// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APITokensColumns holds the columns for the "api_tokens" table.
	APITokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "scopes", Type: field.TypeJSON, Nullable: true},
		{Name: "last_used_at", Type: field.TypeTime, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// APITokensTable holds the schema information for the "api_tokens" table.
	APITokensTable = &schema.Table{
		Name:       "api_tokens",
		Columns:    APITokensColumns,
		PrimaryKey: []*schema.Column{APITokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_tokens_organizations_api_tokens",
				Columns:    []*schema.Column{APITokensColumns[15]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "apitoken_token",
				Unique:  false,
				Columns: []*schema.Column{APITokensColumns[10]},
			},
		},
	}
	// ActionPlansColumns holds the columns for the "action_plans" table.
	ActionPlansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "due_date", Type: field.TypeTime, Nullable: true},
		{Name: "priority", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// ActionPlansTable holds the schema information for the "action_plans" table.
	ActionPlansTable = &schema.Table{
		Name:       "action_plans",
		Columns:    ActionPlansColumns,
		PrimaryKey: []*schema.Column{ActionPlansColumns[0]},
	}
	// ActionPlanHistoryColumns holds the columns for the "action_plan_history" table.
	ActionPlanHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "due_date", Type: field.TypeTime, Nullable: true},
		{Name: "priority", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// ActionPlanHistoryTable holds the schema information for the "action_plan_history" table.
	ActionPlanHistoryTable = &schema.Table{
		Name:       "action_plan_history",
		Columns:    ActionPlanHistoryColumns,
		PrimaryKey: []*schema.Column{ActionPlanHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "actionplanhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{ActionPlanHistoryColumns[1]},
			},
		},
	}
	// ContactsColumns holds the columns for the "contacts" table.
	ContactsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "full_name", Type: field.TypeString, Size: 64},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "company", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"ACTIVE", "INACTIVE", "DEACTIVATED", "SUSPENDED", "ONBOARDING"}, Default: "ACTIVE"},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// ContactsTable holds the schema information for the "contacts" table.
	ContactsTable = &schema.Table{
		Name:       "contacts",
		Columns:    ContactsColumns,
		PrimaryKey: []*schema.Column{ContactsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contacts_organizations_contacts",
				Columns:    []*schema.Column{ContactsColumns[16]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ContactHistoryColumns holds the columns for the "contact_history" table.
	ContactHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "full_name", Type: field.TypeString, Size: 64},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "company", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"ACTIVE", "INACTIVE", "DEACTIVATED", "SUSPENDED", "ONBOARDING"}, Default: "ACTIVE"},
	}
	// ContactHistoryTable holds the schema information for the "contact_history" table.
	ContactHistoryTable = &schema.Table{
		Name:       "contact_history",
		Columns:    ContactHistoryColumns,
		PrimaryKey: []*schema.Column{ContactHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "contacthistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{ContactHistoryColumns[1]},
			},
		},
	}
	// ControlsColumns holds the columns for the "controls" table.
	ControlsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "control_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "control_number", Type: field.TypeString, Nullable: true},
		{Name: "family", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "class", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "mapped_frameworks", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
		{Name: "control_objective_controls", Type: field.TypeString, Nullable: true},
		{Name: "internal_policy_controls", Type: field.TypeString, Nullable: true},
	}
	// ControlsTable holds the schema information for the "controls" table.
	ControlsTable = &schema.Table{
		Name:       "controls",
		Columns:    ControlsColumns,
		PrimaryKey: []*schema.Column{ControlsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "controls_control_objectives_controls",
				Columns:    []*schema.Column{ControlsColumns[21]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "controls_internal_policies_controls",
				Columns:    []*schema.Column{ControlsColumns[22]},
				RefColumns: []*schema.Column{InternalPoliciesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ControlHistoryColumns holds the columns for the "control_history" table.
	ControlHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "control_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "control_number", Type: field.TypeString, Nullable: true},
		{Name: "family", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "class", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "mapped_frameworks", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// ControlHistoryTable holds the schema information for the "control_history" table.
	ControlHistoryTable = &schema.Table{
		Name:       "control_history",
		Columns:    ControlHistoryColumns,
		PrimaryKey: []*schema.Column{ControlHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "controlhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{ControlHistoryColumns[1]},
			},
		},
	}
	// ControlObjectivesColumns holds the columns for the "control_objectives" table.
	ControlObjectivesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "control_objective_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "control_number", Type: field.TypeString, Nullable: true},
		{Name: "family", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "class", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "mapped_frameworks", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
		{Name: "control_controlobjectives", Type: field.TypeString, Nullable: true},
	}
	// ControlObjectivesTable holds the schema information for the "control_objectives" table.
	ControlObjectivesTable = &schema.Table{
		Name:       "control_objectives",
		Columns:    ControlObjectivesColumns,
		PrimaryKey: []*schema.Column{ControlObjectivesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_objectives_controls_controlobjectives",
				Columns:    []*schema.Column{ControlObjectivesColumns[20]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ControlObjectiveHistoryColumns holds the columns for the "control_objective_history" table.
	ControlObjectiveHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "control_objective_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "control_number", Type: field.TypeString, Nullable: true},
		{Name: "family", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "class", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "mapped_frameworks", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// ControlObjectiveHistoryTable holds the schema information for the "control_objective_history" table.
	ControlObjectiveHistoryTable = &schema.Table{
		Name:       "control_objective_history",
		Columns:    ControlObjectiveHistoryColumns,
		PrimaryKey: []*schema.Column{ControlObjectiveHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "controlobjectivehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{ControlObjectiveHistoryColumns[1]},
			},
		},
	}
	// DocumentDataColumns holds the columns for the "document_data" table.
	DocumentDataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "data", Type: field.TypeJSON},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "template_id", Type: field.TypeString},
	}
	// DocumentDataTable holds the schema information for the "document_data" table.
	DocumentDataTable = &schema.Table{
		Name:       "document_data",
		Columns:    DocumentDataColumns,
		PrimaryKey: []*schema.Column{DocumentDataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "document_data_organizations_documentdata",
				Columns:    []*schema.Column{DocumentDataColumns[10]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "document_data_templates_documents",
				Columns:    []*schema.Column{DocumentDataColumns[11]},
				RefColumns: []*schema.Column{TemplatesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DocumentDataHistoryColumns holds the columns for the "document_data_history" table.
	DocumentDataHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "template_id", Type: field.TypeString},
		{Name: "data", Type: field.TypeJSON},
	}
	// DocumentDataHistoryTable holds the schema information for the "document_data_history" table.
	DocumentDataHistoryTable = &schema.Table{
		Name:       "document_data_history",
		Columns:    DocumentDataHistoryColumns,
		PrimaryKey: []*schema.Column{DocumentDataHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "documentdatahistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{DocumentDataHistoryColumns[1]},
			},
		},
	}
	// EmailVerificationTokensColumns holds the columns for the "email_verification_tokens" table.
	EmailVerificationTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "ttl", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString},
		{Name: "secret", Type: field.TypeBytes},
		{Name: "owner_id", Type: field.TypeString},
	}
	// EmailVerificationTokensTable holds the schema information for the "email_verification_tokens" table.
	EmailVerificationTokensTable = &schema.Table{
		Name:       "email_verification_tokens",
		Columns:    EmailVerificationTokensColumns,
		PrimaryKey: []*schema.Column{EmailVerificationTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "email_verification_tokens_users_email_verification_tokens",
				Columns:    []*schema.Column{EmailVerificationTokensColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "emailverificationtoken_token",
				Unique:  true,
				Columns: []*schema.Column{EmailVerificationTokensColumns[8]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// EntitlementsColumns holds the columns for the "entitlements" table.
	EntitlementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "external_customer_id", Type: field.TypeString, Nullable: true},
		{Name: "external_subscription_id", Type: field.TypeString, Nullable: true},
		{Name: "expires", Type: field.TypeBool, Default: false},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "cancelled", Type: field.TypeBool, Default: false},
		{Name: "plan_id", Type: field.TypeString},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "organization_id", Type: field.TypeString},
	}
	// EntitlementsTable holds the schema information for the "entitlements" table.
	EntitlementsTable = &schema.Table{
		Name:       "entitlements",
		Columns:    EntitlementsColumns,
		PrimaryKey: []*schema.Column{EntitlementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entitlements_entitlement_plans_entitlements",
				Columns:    []*schema.Column{EntitlementsColumns[14]},
				RefColumns: []*schema.Column{EntitlementPlansColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "entitlements_organizations_entitlements",
				Columns:    []*schema.Column{EntitlementsColumns[15]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "entitlements_organizations_organization_entitlement",
				Columns:    []*schema.Column{EntitlementsColumns[16]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entitlement_organization_id_owner_id",
				Unique:  true,
				Columns: []*schema.Column{EntitlementsColumns[16], EntitlementsColumns[15]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL and cancelled = false",
				},
			},
		},
	}
	// EntitlementHistoryColumns holds the columns for the "entitlement_history" table.
	EntitlementHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "plan_id", Type: field.TypeString},
		{Name: "organization_id", Type: field.TypeString},
		{Name: "external_customer_id", Type: field.TypeString, Nullable: true},
		{Name: "external_subscription_id", Type: field.TypeString, Nullable: true},
		{Name: "expires", Type: field.TypeBool, Default: false},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "cancelled", Type: field.TypeBool, Default: false},
	}
	// EntitlementHistoryTable holds the schema information for the "entitlement_history" table.
	EntitlementHistoryTable = &schema.Table{
		Name:       "entitlement_history",
		Columns:    EntitlementHistoryColumns,
		PrimaryKey: []*schema.Column{EntitlementHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "entitlementhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{EntitlementHistoryColumns[1]},
			},
		},
	}
	// EntitlementPlansColumns holds the columns for the "entitlement_plans" table.
	EntitlementPlansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// EntitlementPlansTable holds the schema information for the "entitlement_plans" table.
	EntitlementPlansTable = &schema.Table{
		Name:       "entitlement_plans",
		Columns:    EntitlementPlansColumns,
		PrimaryKey: []*schema.Column{EntitlementPlansColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entitlement_plans_organizations_entitlementplans",
				Columns:    []*schema.Column{EntitlementPlansColumns[14]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entitlementplan_name_version_owner_id",
				Unique:  true,
				Columns: []*schema.Column{EntitlementPlansColumns[10], EntitlementPlansColumns[12], EntitlementPlansColumns[14]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// EntitlementPlanFeaturesColumns holds the columns for the "entitlement_plan_features" table.
	EntitlementPlanFeaturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "plan_id", Type: field.TypeString},
		{Name: "feature_id", Type: field.TypeString},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// EntitlementPlanFeaturesTable holds the schema information for the "entitlement_plan_features" table.
	EntitlementPlanFeaturesTable = &schema.Table{
		Name:       "entitlement_plan_features",
		Columns:    EntitlementPlanFeaturesColumns,
		PrimaryKey: []*schema.Column{EntitlementPlanFeaturesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entitlement_plan_features_entitlement_plans_plan",
				Columns:    []*schema.Column{EntitlementPlanFeaturesColumns[10]},
				RefColumns: []*schema.Column{EntitlementPlansColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "entitlement_plan_features_features_feature",
				Columns:    []*schema.Column{EntitlementPlanFeaturesColumns[11]},
				RefColumns: []*schema.Column{FeaturesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "entitlement_plan_features_organizations_entitlementplanfeatures",
				Columns:    []*schema.Column{EntitlementPlanFeaturesColumns[12]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entitlementplanfeature_feature_id_plan_id",
				Unique:  true,
				Columns: []*schema.Column{EntitlementPlanFeaturesColumns[11], EntitlementPlanFeaturesColumns[10]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// EntitlementPlanFeatureHistoryColumns holds the columns for the "entitlement_plan_feature_history" table.
	EntitlementPlanFeatureHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "plan_id", Type: field.TypeString},
		{Name: "feature_id", Type: field.TypeString},
	}
	// EntitlementPlanFeatureHistoryTable holds the schema information for the "entitlement_plan_feature_history" table.
	EntitlementPlanFeatureHistoryTable = &schema.Table{
		Name:       "entitlement_plan_feature_history",
		Columns:    EntitlementPlanFeatureHistoryColumns,
		PrimaryKey: []*schema.Column{EntitlementPlanFeatureHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "entitlementplanfeaturehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{EntitlementPlanFeatureHistoryColumns[1]},
			},
		},
	}
	// EntitlementPlanHistoryColumns holds the columns for the "entitlement_plan_history" table.
	EntitlementPlanHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
	}
	// EntitlementPlanHistoryTable holds the schema information for the "entitlement_plan_history" table.
	EntitlementPlanHistoryTable = &schema.Table{
		Name:       "entitlement_plan_history",
		Columns:    EntitlementPlanHistoryColumns,
		PrimaryKey: []*schema.Column{EntitlementPlanHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "entitlementplanhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{EntitlementPlanHistoryColumns[1]},
			},
		},
	}
	// EntitiesColumns holds the columns for the "entities" table.
	EntitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 160},
		{Name: "display_name", Type: field.TypeString, Nullable: true, Size: 64},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "domains", Type: field.TypeJSON, Nullable: true},
		{Name: "status", Type: field.TypeString, Nullable: true, Default: "active"},
		{Name: "entity_type_id", Type: field.TypeString, Nullable: true},
		{Name: "entity_type_entities", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// EntitiesTable holds the schema information for the "entities" table.
	EntitiesTable = &schema.Table{
		Name:       "entities",
		Columns:    EntitiesColumns,
		PrimaryKey: []*schema.Column{EntitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entities_entity_types_entity_type",
				Columns:    []*schema.Column{EntitiesColumns[14]},
				RefColumns: []*schema.Column{EntityTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "entities_entity_types_entities",
				Columns:    []*schema.Column{EntitiesColumns[15]},
				RefColumns: []*schema.Column{EntityTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "entities_organizations_entities",
				Columns:    []*schema.Column{EntitiesColumns[16]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entity_name_owner_id",
				Unique:  true,
				Columns: []*schema.Column{EntitiesColumns[9], EntitiesColumns[16]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// EntityHistoryColumns holds the columns for the "entity_history" table.
	EntityHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 160},
		{Name: "display_name", Type: field.TypeString, Nullable: true, Size: 64},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "domains", Type: field.TypeJSON, Nullable: true},
		{Name: "entity_type_id", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString, Nullable: true, Default: "active"},
	}
	// EntityHistoryTable holds the schema information for the "entity_history" table.
	EntityHistoryTable = &schema.Table{
		Name:       "entity_history",
		Columns:    EntityHistoryColumns,
		PrimaryKey: []*schema.Column{EntityHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "entityhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{EntityHistoryColumns[1]},
			},
		},
	}
	// EntityTypesColumns holds the columns for the "entity_types" table.
	EntityTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, Size: 64},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// EntityTypesTable holds the schema information for the "entity_types" table.
	EntityTypesTable = &schema.Table{
		Name:       "entity_types",
		Columns:    EntityTypesColumns,
		PrimaryKey: []*schema.Column{EntityTypesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entity_types_organizations_entitytypes",
				Columns:    []*schema.Column{EntityTypesColumns[10]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entitytype_name_owner_id",
				Unique:  true,
				Columns: []*schema.Column{EntityTypesColumns[9], EntityTypesColumns[10]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// EntityTypeHistoryColumns holds the columns for the "entity_type_history" table.
	EntityTypeHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Size: 64},
	}
	// EntityTypeHistoryTable holds the schema information for the "entity_type_history" table.
	EntityTypeHistoryTable = &schema.Table{
		Name:       "entity_type_history",
		Columns:    EntityTypeHistoryColumns,
		PrimaryKey: []*schema.Column{EntityTypeHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "entitytypehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{EntityTypeHistoryColumns[1]},
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "event_id", Type: field.TypeString, Nullable: true},
		{Name: "correlation_id", Type: field.TypeString, Nullable: true},
		{Name: "event_type", Type: field.TypeString},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
	}
	// EventHistoryColumns holds the columns for the "event_history" table.
	EventHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "event_id", Type: field.TypeString, Nullable: true},
		{Name: "correlation_id", Type: field.TypeString, Nullable: true},
		{Name: "event_type", Type: field.TypeString},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
	}
	// EventHistoryTable holds the schema information for the "event_history" table.
	EventHistoryTable = &schema.Table{
		Name:       "event_history",
		Columns:    EventHistoryColumns,
		PrimaryKey: []*schema.Column{EventHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "eventhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{EventHistoryColumns[1]},
			},
		},
	}
	// FeaturesColumns holds the columns for the "features" table.
	FeaturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "enabled", Type: field.TypeBool, Default: false},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// FeaturesTable holds the schema information for the "features" table.
	FeaturesTable = &schema.Table{
		Name:       "features",
		Columns:    FeaturesColumns,
		PrimaryKey: []*schema.Column{FeaturesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "features_organizations_features",
				Columns:    []*schema.Column{FeaturesColumns[14]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "feature_name_owner_id",
				Unique:  true,
				Columns: []*schema.Column{FeaturesColumns[9], FeaturesColumns[14]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// FeatureHistoryColumns holds the columns for the "feature_history" table.
	FeatureHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "enabled", Type: field.TypeBool, Default: false},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
	}
	// FeatureHistoryTable holds the schema information for the "feature_history" table.
	FeatureHistoryTable = &schema.Table{
		Name:       "feature_history",
		Columns:    FeatureHistoryColumns,
		PrimaryKey: []*schema.Column{FeatureHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "featurehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{FeatureHistoryColumns[1]},
			},
		},
	}
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "provided_file_name", Type: field.TypeString},
		{Name: "provided_file_extension", Type: field.TypeString},
		{Name: "provided_file_size", Type: field.TypeInt64, Nullable: true},
		{Name: "persisted_file_size", Type: field.TypeInt64, Nullable: true},
		{Name: "detected_mime_type", Type: field.TypeString, Nullable: true},
		{Name: "md5_hash", Type: field.TypeString, Nullable: true},
		{Name: "detected_content_type", Type: field.TypeString},
		{Name: "store_key", Type: field.TypeString, Nullable: true},
		{Name: "category_type", Type: field.TypeString, Nullable: true},
		{Name: "uri", Type: field.TypeString, Nullable: true},
		{Name: "storage_scheme", Type: field.TypeString, Nullable: true},
		{Name: "storage_volume", Type: field.TypeString, Nullable: true},
		{Name: "storage_path", Type: field.TypeString, Nullable: true},
		{Name: "file_contents", Type: field.TypeBytes, Nullable: true},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
	}
	// FileHistoryColumns holds the columns for the "file_history" table.
	FileHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "provided_file_name", Type: field.TypeString},
		{Name: "provided_file_extension", Type: field.TypeString},
		{Name: "provided_file_size", Type: field.TypeInt64, Nullable: true},
		{Name: "persisted_file_size", Type: field.TypeInt64, Nullable: true},
		{Name: "detected_mime_type", Type: field.TypeString, Nullable: true},
		{Name: "md5_hash", Type: field.TypeString, Nullable: true},
		{Name: "detected_content_type", Type: field.TypeString},
		{Name: "store_key", Type: field.TypeString, Nullable: true},
		{Name: "category_type", Type: field.TypeString, Nullable: true},
		{Name: "uri", Type: field.TypeString, Nullable: true},
		{Name: "storage_scheme", Type: field.TypeString, Nullable: true},
		{Name: "storage_volume", Type: field.TypeString, Nullable: true},
		{Name: "storage_path", Type: field.TypeString, Nullable: true},
		{Name: "file_contents", Type: field.TypeBytes, Nullable: true},
	}
	// FileHistoryTable holds the schema information for the "file_history" table.
	FileHistoryTable = &schema.Table{
		Name:       "file_history",
		Columns:    FileHistoryColumns,
		PrimaryKey: []*schema.Column{FileHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "filehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{FileHistoryColumns[1]},
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "gravatar_logo_url", Type: field.TypeString, Nullable: true},
		{Name: "logo_url", Type: field.TypeString, Nullable: true},
		{Name: "display_name", Type: field.TypeString, Size: 64, Default: ""},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "groups_organizations_groups",
				Columns:    []*schema.Column{GroupsColumns[14]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "group_name_owner_id",
				Unique:  true,
				Columns: []*schema.Column{GroupsColumns[9], GroupsColumns[14]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// GroupHistoryColumns holds the columns for the "group_history" table.
	GroupHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "gravatar_logo_url", Type: field.TypeString, Nullable: true},
		{Name: "logo_url", Type: field.TypeString, Nullable: true},
		{Name: "display_name", Type: field.TypeString, Size: 64, Default: ""},
	}
	// GroupHistoryTable holds the schema information for the "group_history" table.
	GroupHistoryTable = &schema.Table{
		Name:       "group_history",
		Columns:    GroupHistoryColumns,
		PrimaryKey: []*schema.Column{GroupHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "grouphistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{GroupHistoryColumns[1]},
			},
		},
	}
	// GroupMembershipsColumns holds the columns for the "group_memberships" table.
	GroupMembershipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ADMIN", "MEMBER", "USER"}, Default: "MEMBER"},
		{Name: "group_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// GroupMembershipsTable holds the schema information for the "group_memberships" table.
	GroupMembershipsTable = &schema.Table{
		Name:       "group_memberships",
		Columns:    GroupMembershipsColumns,
		PrimaryKey: []*schema.Column{GroupMembershipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_memberships_groups_group",
				Columns:    []*schema.Column{GroupMembershipsColumns[9]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "group_memberships_users_user",
				Columns:    []*schema.Column{GroupMembershipsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "groupmembership_user_id_group_id",
				Unique:  true,
				Columns: []*schema.Column{GroupMembershipsColumns[10], GroupMembershipsColumns[9]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// GroupMembershipHistoryColumns holds the columns for the "group_membership_history" table.
	GroupMembershipHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ADMIN", "MEMBER", "USER"}, Default: "MEMBER"},
		{Name: "group_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// GroupMembershipHistoryTable holds the schema information for the "group_membership_history" table.
	GroupMembershipHistoryTable = &schema.Table{
		Name:       "group_membership_history",
		Columns:    GroupMembershipHistoryColumns,
		PrimaryKey: []*schema.Column{GroupMembershipHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "groupmembershiphistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{GroupMembershipHistoryColumns[1]},
			},
		},
	}
	// GroupSettingsColumns holds the columns for the "group_settings" table.
	GroupSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "visibility", Type: field.TypeEnum, Enums: []string{"PUBLIC", "PRIVATE"}, Default: "PUBLIC"},
		{Name: "join_policy", Type: field.TypeEnum, Enums: []string{"OPEN", "INVITE_ONLY", "APPLICATION_ONLY", "INVITE_OR_APPLICATION"}, Default: "INVITE_OR_APPLICATION"},
		{Name: "sync_to_slack", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "sync_to_github", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "group_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// GroupSettingsTable holds the schema information for the "group_settings" table.
	GroupSettingsTable = &schema.Table{
		Name:       "group_settings",
		Columns:    GroupSettingsColumns,
		PrimaryKey: []*schema.Column{GroupSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_settings_groups_setting",
				Columns:    []*schema.Column{GroupSettingsColumns[13]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GroupSettingHistoryColumns holds the columns for the "group_setting_history" table.
	GroupSettingHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "visibility", Type: field.TypeEnum, Enums: []string{"PUBLIC", "PRIVATE"}, Default: "PUBLIC"},
		{Name: "join_policy", Type: field.TypeEnum, Enums: []string{"OPEN", "INVITE_ONLY", "APPLICATION_ONLY", "INVITE_OR_APPLICATION"}, Default: "INVITE_OR_APPLICATION"},
		{Name: "sync_to_slack", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "sync_to_github", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "group_id", Type: field.TypeString, Nullable: true},
	}
	// GroupSettingHistoryTable holds the schema information for the "group_setting_history" table.
	GroupSettingHistoryTable = &schema.Table{
		Name:       "group_setting_history",
		Columns:    GroupSettingHistoryColumns,
		PrimaryKey: []*schema.Column{GroupSettingHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "groupsettinghistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{GroupSettingHistoryColumns[1]},
			},
		},
	}
	// HushesColumns holds the columns for the "hushes" table.
	HushesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "kind", Type: field.TypeString, Nullable: true},
		{Name: "secret_name", Type: field.TypeString, Nullable: true},
		{Name: "secret_value", Type: field.TypeString, Nullable: true},
	}
	// HushesTable holds the schema information for the "hushes" table.
	HushesTable = &schema.Table{
		Name:       "hushes",
		Columns:    HushesColumns,
		PrimaryKey: []*schema.Column{HushesColumns[0]},
	}
	// HushHistoryColumns holds the columns for the "hush_history" table.
	HushHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "kind", Type: field.TypeString, Nullable: true},
		{Name: "secret_name", Type: field.TypeString, Nullable: true},
		{Name: "secret_value", Type: field.TypeString, Nullable: true},
	}
	// HushHistoryTable holds the schema information for the "hush_history" table.
	HushHistoryTable = &schema.Table{
		Name:       "hush_history",
		Columns:    HushHistoryColumns,
		PrimaryKey: []*schema.Column{HushHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "hushhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{HushHistoryColumns[1]},
			},
		},
	}
	// IntegrationsColumns holds the columns for the "integrations" table.
	IntegrationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "kind", Type: field.TypeString, Nullable: true},
		{Name: "group_integrations", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// IntegrationsTable holds the schema information for the "integrations" table.
	IntegrationsTable = &schema.Table{
		Name:       "integrations",
		Columns:    IntegrationsColumns,
		PrimaryKey: []*schema.Column{IntegrationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "integrations_groups_integrations",
				Columns:    []*schema.Column{IntegrationsColumns[12]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "integrations_organizations_integrations",
				Columns:    []*schema.Column{IntegrationsColumns[13]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IntegrationHistoryColumns holds the columns for the "integration_history" table.
	IntegrationHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "kind", Type: field.TypeString, Nullable: true},
	}
	// IntegrationHistoryTable holds the schema information for the "integration_history" table.
	IntegrationHistoryTable = &schema.Table{
		Name:       "integration_history",
		Columns:    IntegrationHistoryColumns,
		PrimaryKey: []*schema.Column{IntegrationHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "integrationhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{IntegrationHistoryColumns[1]},
			},
		},
	}
	// InternalPoliciesColumns holds the columns for the "internal_policies" table.
	InternalPoliciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "policy_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "purpose_and_scope", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "background", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// InternalPoliciesTable holds the schema information for the "internal_policies" table.
	InternalPoliciesTable = &schema.Table{
		Name:       "internal_policies",
		Columns:    InternalPoliciesColumns,
		PrimaryKey: []*schema.Column{InternalPoliciesColumns[0]},
	}
	// InternalPolicyHistoryColumns holds the columns for the "internal_policy_history" table.
	InternalPolicyHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "policy_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "purpose_and_scope", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "background", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// InternalPolicyHistoryTable holds the schema information for the "internal_policy_history" table.
	InternalPolicyHistoryTable = &schema.Table{
		Name:       "internal_policy_history",
		Columns:    InternalPolicyHistoryColumns,
		PrimaryKey: []*schema.Column{InternalPolicyHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "internalpolicyhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{InternalPolicyHistoryColumns[1]},
			},
		},
	}
	// InvitesColumns holds the columns for the "invites" table.
	InvitesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "expires", Type: field.TypeTime, Nullable: true},
		{Name: "recipient", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"INVITATION_SENT", "APPROVAL_REQUIRED", "INVITATION_ACCEPTED", "INVITATION_EXPIRED"}, Default: "INVITATION_SENT"},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ADMIN", "MEMBER", "USER"}, Default: "MEMBER"},
		{Name: "send_attempts", Type: field.TypeInt, Default: 0},
		{Name: "requestor_id", Type: field.TypeString, Nullable: true},
		{Name: "secret", Type: field.TypeBytes},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// InvitesTable holds the schema information for the "invites" table.
	InvitesTable = &schema.Table{
		Name:       "invites",
		Columns:    InvitesColumns,
		PrimaryKey: []*schema.Column{InvitesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invites_organizations_invites",
				Columns:    []*schema.Column{InvitesColumns[16]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "invite_recipient_owner_id",
				Unique:  true,
				Columns: []*schema.Column{InvitesColumns[10], InvitesColumns[16]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// NarrativesColumns holds the columns for the "narratives" table.
	NarrativesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// NarrativesTable holds the schema information for the "narratives" table.
	NarrativesTable = &schema.Table{
		Name:       "narratives",
		Columns:    NarrativesColumns,
		PrimaryKey: []*schema.Column{NarrativesColumns[0]},
	}
	// NarrativeHistoryColumns holds the columns for the "narrative_history" table.
	NarrativeHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// NarrativeHistoryTable holds the schema information for the "narrative_history" table.
	NarrativeHistoryTable = &schema.Table{
		Name:       "narrative_history",
		Columns:    NarrativeHistoryColumns,
		PrimaryKey: []*schema.Column{NarrativeHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "narrativehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{NarrativeHistoryColumns[1]},
			},
		},
	}
	// NotesColumns holds the columns for the "notes" table.
	NotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "text", Type: field.TypeString},
		{Name: "entity_notes", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// NotesTable holds the schema information for the "notes" table.
	NotesTable = &schema.Table{
		Name:       "notes",
		Columns:    NotesColumns,
		PrimaryKey: []*schema.Column{NotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notes_entities_notes",
				Columns:    []*schema.Column{NotesColumns[10]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notes_organizations_notes",
				Columns:    []*schema.Column{NotesColumns[11]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NoteHistoryColumns holds the columns for the "note_history" table.
	NoteHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "text", Type: field.TypeString},
	}
	// NoteHistoryTable holds the schema information for the "note_history" table.
	NoteHistoryTable = &schema.Table{
		Name:       "note_history",
		Columns:    NoteHistoryColumns,
		PrimaryKey: []*schema.Column{NoteHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "notehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{NoteHistoryColumns[1]},
			},
		},
	}
	// OauthProvidersColumns holds the columns for the "oauth_providers" table.
	OauthProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "client_id", Type: field.TypeString},
		{Name: "client_secret", Type: field.TypeString},
		{Name: "redirect_url", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeString},
		{Name: "auth_url", Type: field.TypeString},
		{Name: "token_url", Type: field.TypeString},
		{Name: "auth_style", Type: field.TypeUint8},
		{Name: "info_url", Type: field.TypeString},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// OauthProvidersTable holds the schema information for the "oauth_providers" table.
	OauthProvidersTable = &schema.Table{
		Name:       "oauth_providers",
		Columns:    OauthProvidersColumns,
		PrimaryKey: []*schema.Column{OauthProvidersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_providers_organizations_oauthprovider",
				Columns:    []*schema.Column{OauthProvidersColumns[18]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OauthProviderHistoryColumns holds the columns for the "oauth_provider_history" table.
	OauthProviderHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "client_id", Type: field.TypeString},
		{Name: "client_secret", Type: field.TypeString},
		{Name: "redirect_url", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeString},
		{Name: "auth_url", Type: field.TypeString},
		{Name: "token_url", Type: field.TypeString},
		{Name: "auth_style", Type: field.TypeUint8},
		{Name: "info_url", Type: field.TypeString},
	}
	// OauthProviderHistoryTable holds the schema information for the "oauth_provider_history" table.
	OauthProviderHistoryTable = &schema.Table{
		Name:       "oauth_provider_history",
		Columns:    OauthProviderHistoryColumns,
		PrimaryKey: []*schema.Column{OauthProviderHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "oauthproviderhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{OauthProviderHistoryColumns[1]},
			},
		},
	}
	// OhAuthTooTokensColumns holds the columns for the "oh_auth_too_tokens" table.
	OhAuthTooTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "client_id", Type: field.TypeString, Size: 2147483647},
		{Name: "scopes", Type: field.TypeJSON, Nullable: true},
		{Name: "nonce", Type: field.TypeString, Size: 2147483647},
		{Name: "claims_user_id", Type: field.TypeString, Size: 2147483647},
		{Name: "claims_username", Type: field.TypeString, Size: 2147483647},
		{Name: "claims_email", Type: field.TypeString, Size: 2147483647},
		{Name: "claims_email_verified", Type: field.TypeBool},
		{Name: "claims_groups", Type: field.TypeJSON, Nullable: true},
		{Name: "claims_preferred_username", Type: field.TypeString, Size: 2147483647},
		{Name: "connector_id", Type: field.TypeString, Size: 2147483647},
		{Name: "connector_data", Type: field.TypeJSON, Nullable: true},
		{Name: "last_used", Type: field.TypeTime},
	}
	// OhAuthTooTokensTable holds the schema information for the "oh_auth_too_tokens" table.
	OhAuthTooTokensTable = &schema.Table{
		Name:       "oh_auth_too_tokens",
		Columns:    OhAuthTooTokensColumns,
		PrimaryKey: []*schema.Column{OhAuthTooTokensColumns[0]},
	}
	// OrgMembershipsColumns holds the columns for the "org_memberships" table.
	OrgMembershipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ADMIN", "MEMBER", "USER", "OWNER"}, Default: "MEMBER"},
		{Name: "organization_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// OrgMembershipsTable holds the schema information for the "org_memberships" table.
	OrgMembershipsTable = &schema.Table{
		Name:       "org_memberships",
		Columns:    OrgMembershipsColumns,
		PrimaryKey: []*schema.Column{OrgMembershipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "org_memberships_organizations_organization",
				Columns:    []*schema.Column{OrgMembershipsColumns[9]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "org_memberships_users_user",
				Columns:    []*schema.Column{OrgMembershipsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "orgmembership_user_id_organization_id",
				Unique:  true,
				Columns: []*schema.Column{OrgMembershipsColumns[10], OrgMembershipsColumns[9]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// OrgMembershipHistoryColumns holds the columns for the "org_membership_history" table.
	OrgMembershipHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ADMIN", "MEMBER", "USER", "OWNER"}, Default: "MEMBER"},
		{Name: "organization_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// OrgMembershipHistoryTable holds the schema information for the "org_membership_history" table.
	OrgMembershipHistoryTable = &schema.Table{
		Name:       "org_membership_history",
		Columns:    OrgMembershipHistoryColumns,
		PrimaryKey: []*schema.Column{OrgMembershipHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "orgmembershiphistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{OrgMembershipHistoryColumns[1]},
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Size: 160},
		{Name: "display_name", Type: field.TypeString, Size: 64, Default: ""},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "personal_org", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "avatar_remote_url", Type: field.TypeString, Nullable: true, Size: 2048},
		{Name: "dedicated_db", Type: field.TypeBool, Default: false},
		{Name: "parent_organization_id", Type: field.TypeString, Nullable: true},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organizations_organizations_children",
				Columns:    []*schema.Column{OrganizationsColumns[15]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "organization_name",
				Unique:  true,
				Columns: []*schema.Column{OrganizationsColumns[9]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// OrganizationHistoryColumns holds the columns for the "organization_history" table.
	OrganizationHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Size: 160},
		{Name: "display_name", Type: field.TypeString, Size: 64, Default: ""},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "parent_organization_id", Type: field.TypeString, Nullable: true},
		{Name: "personal_org", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "avatar_remote_url", Type: field.TypeString, Nullable: true, Size: 2048},
		{Name: "dedicated_db", Type: field.TypeBool, Default: false},
	}
	// OrganizationHistoryTable holds the schema information for the "organization_history" table.
	OrganizationHistoryTable = &schema.Table{
		Name:       "organization_history",
		Columns:    OrganizationHistoryColumns,
		PrimaryKey: []*schema.Column{OrganizationHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "organizationhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{OrganizationHistoryColumns[1]},
			},
		},
	}
	// OrganizationSettingsColumns holds the columns for the "organization_settings" table.
	OrganizationSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "domains", Type: field.TypeJSON, Nullable: true},
		{Name: "billing_contact", Type: field.TypeString, Nullable: true},
		{Name: "billing_email", Type: field.TypeString, Nullable: true},
		{Name: "billing_phone", Type: field.TypeString, Nullable: true},
		{Name: "billing_address", Type: field.TypeString, Nullable: true},
		{Name: "tax_identifier", Type: field.TypeString, Nullable: true},
		{Name: "geo_location", Type: field.TypeEnum, Nullable: true, Enums: []string{"AMER", "EMEA", "APAC"}, Default: "AMER"},
		{Name: "organization_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// OrganizationSettingsTable holds the schema information for the "organization_settings" table.
	OrganizationSettingsTable = &schema.Table{
		Name:       "organization_settings",
		Columns:    OrganizationSettingsColumns,
		PrimaryKey: []*schema.Column{OrganizationSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_settings_organizations_setting",
				Columns:    []*schema.Column{OrganizationSettingsColumns[16]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrganizationSettingHistoryColumns holds the columns for the "organization_setting_history" table.
	OrganizationSettingHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "domains", Type: field.TypeJSON, Nullable: true},
		{Name: "billing_contact", Type: field.TypeString, Nullable: true},
		{Name: "billing_email", Type: field.TypeString, Nullable: true},
		{Name: "billing_phone", Type: field.TypeString, Nullable: true},
		{Name: "billing_address", Type: field.TypeString, Nullable: true},
		{Name: "tax_identifier", Type: field.TypeString, Nullable: true},
		{Name: "geo_location", Type: field.TypeEnum, Nullable: true, Enums: []string{"AMER", "EMEA", "APAC"}, Default: "AMER"},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
	}
	// OrganizationSettingHistoryTable holds the schema information for the "organization_setting_history" table.
	OrganizationSettingHistoryTable = &schema.Table{
		Name:       "organization_setting_history",
		Columns:    OrganizationSettingHistoryColumns,
		PrimaryKey: []*schema.Column{OrganizationSettingHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "organizationsettinghistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{OrganizationSettingHistoryColumns[1]},
			},
		},
	}
	// PasswordResetTokensColumns holds the columns for the "password_reset_tokens" table.
	PasswordResetTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "ttl", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString},
		{Name: "secret", Type: field.TypeBytes},
		{Name: "owner_id", Type: field.TypeString},
	}
	// PasswordResetTokensTable holds the schema information for the "password_reset_tokens" table.
	PasswordResetTokensTable = &schema.Table{
		Name:       "password_reset_tokens",
		Columns:    PasswordResetTokensColumns,
		PrimaryKey: []*schema.Column{PasswordResetTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "password_reset_tokens_users_password_reset_tokens",
				Columns:    []*schema.Column{PasswordResetTokensColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "passwordresettoken_token",
				Unique:  true,
				Columns: []*schema.Column{PasswordResetTokensColumns[8]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// PersonalAccessTokensColumns holds the columns for the "personal_access_tokens" table.
	PersonalAccessTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "scopes", Type: field.TypeJSON, Nullable: true},
		{Name: "last_used_at", Type: field.TypeTime, Nullable: true},
		{Name: "owner_id", Type: field.TypeString},
	}
	// PersonalAccessTokensTable holds the schema information for the "personal_access_tokens" table.
	PersonalAccessTokensTable = &schema.Table{
		Name:       "personal_access_tokens",
		Columns:    PersonalAccessTokensColumns,
		PrimaryKey: []*schema.Column{PersonalAccessTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "personal_access_tokens_users_personal_access_tokens",
				Columns:    []*schema.Column{PersonalAccessTokensColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "personalaccesstoken_token",
				Unique:  false,
				Columns: []*schema.Column{PersonalAccessTokensColumns[10]},
			},
		},
	}
	// ProceduresColumns holds the columns for the "procedures" table.
	ProceduresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "procedure_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "purpose_and_scope", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "background", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
		{Name: "control_objective_procedures", Type: field.TypeString, Nullable: true},
		{Name: "standard_procedures", Type: field.TypeString, Nullable: true},
	}
	// ProceduresTable holds the schema information for the "procedures" table.
	ProceduresTable = &schema.Table{
		Name:       "procedures",
		Columns:    ProceduresColumns,
		PrimaryKey: []*schema.Column{ProceduresColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "procedures_control_objectives_procedures",
				Columns:    []*schema.Column{ProceduresColumns[18]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "procedures_standards_procedures",
				Columns:    []*schema.Column{ProceduresColumns[19]},
				RefColumns: []*schema.Column{StandardsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProcedureHistoryColumns holds the columns for the "procedure_history" table.
	ProcedureHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "procedure_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "purpose_and_scope", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "background", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// ProcedureHistoryTable holds the schema information for the "procedure_history" table.
	ProcedureHistoryTable = &schema.Table{
		Name:       "procedure_history",
		Columns:    ProcedureHistoryColumns,
		PrimaryKey: []*schema.Column{ProcedureHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "procedurehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{ProcedureHistoryColumns[1]},
			},
		},
	}
	// ProgramsColumns holds the columns for the "programs" table.
	ProgramsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"NOT_STARTED", "IN_PROGRESS", "READY_FOR_AUDITOR", "COMPLETED", "ACTION_REQUIRED"}, Default: "NOT_STARTED"},
		{Name: "start_date", Type: field.TypeTime, Nullable: true},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "auditor_ready", Type: field.TypeBool, Default: false},
		{Name: "auditor_write_comments", Type: field.TypeBool, Default: false},
		{Name: "auditor_read_comments", Type: field.TypeBool, Default: false},
		{Name: "organization_id", Type: field.TypeString},
	}
	// ProgramsTable holds the schema information for the "programs" table.
	ProgramsTable = &schema.Table{
		Name:       "programs",
		Columns:    ProgramsColumns,
		PrimaryKey: []*schema.Column{ProgramsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "programs_organizations_programs",
				Columns:    []*schema.Column{ProgramsColumns[17]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProgramHistoryColumns holds the columns for the "program_history" table.
	ProgramHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"NOT_STARTED", "IN_PROGRESS", "READY_FOR_AUDITOR", "COMPLETED", "ACTION_REQUIRED"}, Default: "NOT_STARTED"},
		{Name: "start_date", Type: field.TypeTime, Nullable: true},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "organization_id", Type: field.TypeString},
		{Name: "auditor_ready", Type: field.TypeBool, Default: false},
		{Name: "auditor_write_comments", Type: field.TypeBool, Default: false},
		{Name: "auditor_read_comments", Type: field.TypeBool, Default: false},
	}
	// ProgramHistoryTable holds the schema information for the "program_history" table.
	ProgramHistoryTable = &schema.Table{
		Name:       "program_history",
		Columns:    ProgramHistoryColumns,
		PrimaryKey: []*schema.Column{ProgramHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "programhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{ProgramHistoryColumns[1]},
			},
		},
	}
	// RisksColumns holds the columns for the "risks" table.
	RisksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "risk_type", Type: field.TypeString, Nullable: true},
		{Name: "business_costs", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "impact", Type: field.TypeEnum, Nullable: true, Enums: []string{"LOW", "MODERATE", "HIGH"}},
		{Name: "likelihood", Type: field.TypeEnum, Nullable: true, Enums: []string{"UNLIKELY", "LIKELY", "HIGHLY_LIKELY"}},
		{Name: "mitigation", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
		{Name: "control_objective_risks", Type: field.TypeString, Nullable: true},
	}
	// RisksTable holds the schema information for the "risks" table.
	RisksTable = &schema.Table{
		Name:       "risks",
		Columns:    RisksColumns,
		PrimaryKey: []*schema.Column{RisksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "risks_control_objectives_risks",
				Columns:    []*schema.Column{RisksColumns[19]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RiskHistoryColumns holds the columns for the "risk_history" table.
	RiskHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "risk_type", Type: field.TypeString, Nullable: true},
		{Name: "business_costs", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "impact", Type: field.TypeEnum, Nullable: true, Enums: []string{"LOW", "MODERATE", "HIGH"}},
		{Name: "likelihood", Type: field.TypeEnum, Nullable: true, Enums: []string{"UNLIKELY", "LIKELY", "HIGHLY_LIKELY"}},
		{Name: "mitigation", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// RiskHistoryTable holds the schema information for the "risk_history" table.
	RiskHistoryTable = &schema.Table{
		Name:       "risk_history",
		Columns:    RiskHistoryColumns,
		PrimaryKey: []*schema.Column{RiskHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "riskhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{RiskHistoryColumns[1]},
			},
		},
	}
	// StandardsColumns holds the columns for the "standards" table.
	StandardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "family", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "standard_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "purpose_and_scope", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "background", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// StandardsTable holds the schema information for the "standards" table.
	StandardsTable = &schema.Table{
		Name:       "standards",
		Columns:    StandardsColumns,
		PrimaryKey: []*schema.Column{StandardsColumns[0]},
	}
	// StandardHistoryColumns holds the columns for the "standard_history" table.
	StandardHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "family", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "standard_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "purpose_and_scope", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "background", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "satisfies", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// StandardHistoryTable holds the schema information for the "standard_history" table.
	StandardHistoryTable = &schema.Table{
		Name:       "standard_history",
		Columns:    StandardHistoryColumns,
		PrimaryKey: []*schema.Column{StandardHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "standardhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{StandardHistoryColumns[1]},
			},
		},
	}
	// SubcontrolsColumns holds the columns for the "subcontrols" table.
	SubcontrolsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "subcontrol_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "subcontrol_number", Type: field.TypeString, Nullable: true},
		{Name: "family", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "class", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "mapped_frameworks", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "implementation_evidence", Type: field.TypeString, Nullable: true},
		{Name: "implementation_status", Type: field.TypeString, Nullable: true},
		{Name: "implementation_date", Type: field.TypeTime, Nullable: true},
		{Name: "implementation_verification", Type: field.TypeString, Nullable: true},
		{Name: "implementation_verification_date", Type: field.TypeTime, Nullable: true},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
		{Name: "control_objective_subcontrols", Type: field.TypeString, Nullable: true},
		{Name: "note_subcontrols", Type: field.TypeString, Nullable: true},
	}
	// SubcontrolsTable holds the schema information for the "subcontrols" table.
	SubcontrolsTable = &schema.Table{
		Name:       "subcontrols",
		Columns:    SubcontrolsColumns,
		PrimaryKey: []*schema.Column{SubcontrolsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subcontrols_control_objectives_subcontrols",
				Columns:    []*schema.Column{SubcontrolsColumns[25]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "subcontrols_notes_subcontrols",
				Columns:    []*schema.Column{SubcontrolsColumns[26]},
				RefColumns: []*schema.Column{NotesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SubcontrolHistoryColumns holds the columns for the "subcontrol_history" table.
	SubcontrolHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "subcontrol_type", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "subcontrol_number", Type: field.TypeString, Nullable: true},
		{Name: "family", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "class", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "mapped_frameworks", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "implementation_evidence", Type: field.TypeString, Nullable: true},
		{Name: "implementation_status", Type: field.TypeString, Nullable: true},
		{Name: "implementation_date", Type: field.TypeTime, Nullable: true},
		{Name: "implementation_verification", Type: field.TypeString, Nullable: true},
		{Name: "implementation_verification_date", Type: field.TypeTime, Nullable: true},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// SubcontrolHistoryTable holds the schema information for the "subcontrol_history" table.
	SubcontrolHistoryTable = &schema.Table{
		Name:       "subcontrol_history",
		Columns:    SubcontrolHistoryColumns,
		PrimaryKey: []*schema.Column{SubcontrolHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "subcontrolhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{SubcontrolHistoryColumns[1]},
			},
		},
	}
	// SubscribersColumns holds the columns for the "subscribers" table.
	SubscribersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "verified_email", Type: field.TypeBool, Default: false},
		{Name: "verified_phone", Type: field.TypeBool, Default: false},
		{Name: "active", Type: field.TypeBool, Default: false},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "ttl", Type: field.TypeTime},
		{Name: "secret", Type: field.TypeBytes},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// SubscribersTable holds the schema information for the "subscribers" table.
	SubscribersTable = &schema.Table{
		Name:       "subscribers",
		Columns:    SubscribersColumns,
		PrimaryKey: []*schema.Column{SubscribersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscribers_organizations_subscribers",
				Columns:    []*schema.Column{SubscribersColumns[17]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "subscriber_email_owner_id",
				Unique:  true,
				Columns: []*schema.Column{SubscribersColumns[9], SubscribersColumns[17]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// TfaSettingsColumns holds the columns for the "tfa_settings" table.
	TfaSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "tfa_secret", Type: field.TypeString, Nullable: true},
		{Name: "verified", Type: field.TypeBool, Default: false},
		{Name: "recovery_codes", Type: field.TypeJSON, Nullable: true},
		{Name: "phone_otp_allowed", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "email_otp_allowed", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "totp_allowed", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// TfaSettingsTable holds the schema information for the "tfa_settings" table.
	TfaSettingsTable = &schema.Table{
		Name:       "tfa_settings",
		Columns:    TfaSettingsColumns,
		PrimaryKey: []*schema.Column{TfaSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tfa_settings_users_tfa_settings",
				Columns:    []*schema.Column{TfaSettingsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "tfasetting_owner_id",
				Unique:  true,
				Columns: []*schema.Column{TfaSettingsColumns[15]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"OPEN", "IN_PROGRESS", "IN_REVIEW", "COMPLETED", "WONT_DO"}, Default: "OPEN"},
		{Name: "due", Type: field.TypeTime, Nullable: true},
		{Name: "completed", Type: field.TypeTime, Nullable: true},
		{Name: "user_assigner_tasks", Type: field.TypeString},
		{Name: "user_assignee_tasks", Type: field.TypeString, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_users_assigner_tasks",
				Columns:    []*schema.Column{TasksColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tasks_users_assignee_tasks",
				Columns:    []*schema.Column{TasksColumns[16]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TaskHistoryColumns holds the columns for the "task_history" table.
	TaskHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"OPEN", "IN_PROGRESS", "IN_REVIEW", "COMPLETED", "WONT_DO"}, Default: "OPEN"},
		{Name: "due", Type: field.TypeTime, Nullable: true},
		{Name: "completed", Type: field.TypeTime, Nullable: true},
	}
	// TaskHistoryTable holds the schema information for the "task_history" table.
	TaskHistoryTable = &schema.Table{
		Name:       "task_history",
		Columns:    TaskHistoryColumns,
		PrimaryKey: []*schema.Column{TaskHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "taskhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{TaskHistoryColumns[1]},
			},
		},
	}
	// TemplatesColumns holds the columns for the "templates" table.
	TemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "template_type", Type: field.TypeEnum, Enums: []string{"ROOTTEMPLATE", "DOCUMENT"}, Default: "DOCUMENT"},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "jsonconfig", Type: field.TypeJSON},
		{Name: "uischema", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// TemplatesTable holds the schema information for the "templates" table.
	TemplatesTable = &schema.Table{
		Name:       "templates",
		Columns:    TemplatesColumns,
		PrimaryKey: []*schema.Column{TemplatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "templates_organizations_templates",
				Columns:    []*schema.Column{TemplatesColumns[14]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "template_name_owner_id_template_type",
				Unique:  true,
				Columns: []*schema.Column{TemplatesColumns[9], TemplatesColumns[14], TemplatesColumns[10]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// TemplateHistoryColumns holds the columns for the "template_history" table.
	TemplateHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "template_type", Type: field.TypeEnum, Enums: []string{"ROOTTEMPLATE", "DOCUMENT"}, Default: "DOCUMENT"},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "jsonconfig", Type: field.TypeJSON},
		{Name: "uischema", Type: field.TypeJSON, Nullable: true},
	}
	// TemplateHistoryTable holds the schema information for the "template_history" table.
	TemplateHistoryTable = &schema.Table{
		Name:       "template_history",
		Columns:    TemplateHistoryColumns,
		PrimaryKey: []*schema.Column{TemplateHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "templatehistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{TemplateHistoryColumns[1]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString, Nullable: true, Size: 64},
		{Name: "last_name", Type: field.TypeString, Nullable: true, Size: 64},
		{Name: "display_name", Type: field.TypeString, Size: 64},
		{Name: "avatar_remote_url", Type: field.TypeString, Nullable: true, Size: 2048},
		{Name: "avatar_local_file", Type: field.TypeString, Nullable: true, Size: 2048},
		{Name: "avatar_updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_seen", Type: field.TypeTime, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "sub", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "auth_provider", Type: field.TypeEnum, Enums: []string{"CREDENTIALS", "GOOGLE", "GITHUB", "WEBAUTHN"}, Default: "CREDENTIALS"},
		{Name: "role", Type: field.TypeEnum, Nullable: true, Enums: []string{"ADMIN", "MEMBER", "USER"}, Default: "USER"},
		{Name: "avatar_local_file_id", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_files_file",
				Columns:    []*schema.Column{UsersColumns[21]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_id",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[0]},
			},
			{
				Name:    "user_email_auth_provider",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[9], UsersColumns[19]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// UserHistoryColumns holds the columns for the "user_history" table.
	UserHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString, Nullable: true, Size: 64},
		{Name: "last_name", Type: field.TypeString, Nullable: true, Size: 64},
		{Name: "display_name", Type: field.TypeString, Size: 64},
		{Name: "avatar_remote_url", Type: field.TypeString, Nullable: true, Size: 2048},
		{Name: "avatar_local_file", Type: field.TypeString, Nullable: true, Size: 2048},
		{Name: "avatar_local_file_id", Type: field.TypeString, Nullable: true},
		{Name: "avatar_updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_seen", Type: field.TypeTime, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "sub", Type: field.TypeString, Nullable: true},
		{Name: "auth_provider", Type: field.TypeEnum, Enums: []string{"CREDENTIALS", "GOOGLE", "GITHUB", "WEBAUTHN"}, Default: "CREDENTIALS"},
		{Name: "role", Type: field.TypeEnum, Nullable: true, Enums: []string{"ADMIN", "MEMBER", "USER"}, Default: "USER"},
	}
	// UserHistoryTable holds the schema information for the "user_history" table.
	UserHistoryTable = &schema.Table{
		Name:       "user_history",
		Columns:    UserHistoryColumns,
		PrimaryKey: []*schema.Column{UserHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "userhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{UserHistoryColumns[1]},
			},
		},
	}
	// UserSettingsColumns holds the columns for the "user_settings" table.
	UserSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "locked", Type: field.TypeBool, Default: false},
		{Name: "silenced_at", Type: field.TypeTime, Nullable: true},
		{Name: "suspended_at", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"ACTIVE", "INACTIVE", "DEACTIVATED", "SUSPENDED", "ONBOARDING"}, Default: "ACTIVE"},
		{Name: "email_confirmed", Type: field.TypeBool, Default: false},
		{Name: "is_webauthn_allowed", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "is_tfa_enabled", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "user_setting_default_org", Type: field.TypeString, Nullable: true},
	}
	// UserSettingsTable holds the schema information for the "user_settings" table.
	UserSettingsTable = &schema.Table{
		Name:       "user_settings",
		Columns:    UserSettingsColumns,
		PrimaryKey: []*schema.Column{UserSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_settings_users_setting",
				Columns:    []*schema.Column{UserSettingsColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_settings_organizations_default_org",
				Columns:    []*schema.Column{UserSettingsColumns[18]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserSettingHistoryColumns holds the columns for the "user_setting_history" table.
	UserSettingHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
		{Name: "locked", Type: field.TypeBool, Default: false},
		{Name: "silenced_at", Type: field.TypeTime, Nullable: true},
		{Name: "suspended_at", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"ACTIVE", "INACTIVE", "DEACTIVATED", "SUSPENDED", "ONBOARDING"}, Default: "ACTIVE"},
		{Name: "email_confirmed", Type: field.TypeBool, Default: false},
		{Name: "is_webauthn_allowed", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "is_tfa_enabled", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
	}
	// UserSettingHistoryTable holds the schema information for the "user_setting_history" table.
	UserSettingHistoryTable = &schema.Table{
		Name:       "user_setting_history",
		Columns:    UserSettingHistoryColumns,
		PrimaryKey: []*schema.Column{UserSettingHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "usersettinghistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{UserSettingHistoryColumns[1]},
			},
		},
	}
	// WebauthnsColumns holds the columns for the "webauthns" table.
	WebauthnsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "credential_id", Type: field.TypeBytes, Unique: true, Nullable: true},
		{Name: "public_key", Type: field.TypeBytes, Nullable: true},
		{Name: "attestation_type", Type: field.TypeString, Nullable: true},
		{Name: "aaguid", Type: field.TypeBytes, Unique: true},
		{Name: "sign_count", Type: field.TypeInt32},
		{Name: "transports", Type: field.TypeJSON},
		{Name: "backup_eligible", Type: field.TypeBool, Default: false},
		{Name: "backup_state", Type: field.TypeBool, Default: false},
		{Name: "user_present", Type: field.TypeBool, Default: false},
		{Name: "user_verified", Type: field.TypeBool, Default: false},
		{Name: "owner_id", Type: field.TypeString},
	}
	// WebauthnsTable holds the schema information for the "webauthns" table.
	WebauthnsTable = &schema.Table{
		Name:       "webauthns",
		Columns:    WebauthnsColumns,
		PrimaryKey: []*schema.Column{WebauthnsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "webauthns_users_webauthn",
				Columns:    []*schema.Column{WebauthnsColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// WebhooksColumns holds the columns for the "webhooks" table.
	WebhooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString, Unique: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "destination_url", Type: field.TypeString},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "callback", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "secret", Type: field.TypeBytes, Nullable: true},
		{Name: "failures", Type: field.TypeInt, Nullable: true, Default: 0},
		{Name: "last_error", Type: field.TypeString, Nullable: true},
		{Name: "last_response", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
	}
	// WebhooksTable holds the schema information for the "webhooks" table.
	WebhooksTable = &schema.Table{
		Name:       "webhooks",
		Columns:    WebhooksColumns,
		PrimaryKey: []*schema.Column{WebhooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "webhooks_organizations_webhooks",
				Columns:    []*schema.Column{WebhooksColumns[19]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "webhook_name_owner_id",
				Unique:  true,
				Columns: []*schema.Column{WebhooksColumns[9], WebhooksColumns[19]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at is NULL",
				},
			},
		},
	}
	// WebhookHistoryColumns holds the columns for the "webhook_history" table.
	WebhookHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "history_time", Type: field.TypeTime},
		{Name: "ref", Type: field.TypeString, Nullable: true},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"INSERT", "UPDATE", "DELETE"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "mapping_id", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_by", Type: field.TypeString, Nullable: true},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "destination_url", Type: field.TypeString},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "callback", Type: field.TypeString, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "secret", Type: field.TypeBytes, Nullable: true},
		{Name: "failures", Type: field.TypeInt, Nullable: true, Default: 0},
		{Name: "last_error", Type: field.TypeString, Nullable: true},
		{Name: "last_response", Type: field.TypeString, Nullable: true},
	}
	// WebhookHistoryTable holds the schema information for the "webhook_history" table.
	WebhookHistoryTable = &schema.Table{
		Name:       "webhook_history",
		Columns:    WebhookHistoryColumns,
		PrimaryKey: []*schema.Column{WebhookHistoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "webhookhistory_history_time",
				Unique:  false,
				Columns: []*schema.Column{WebhookHistoryColumns[1]},
			},
		},
	}
	// ContactFilesColumns holds the columns for the "contact_files" table.
	ContactFilesColumns = []*schema.Column{
		{Name: "contact_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// ContactFilesTable holds the schema information for the "contact_files" table.
	ContactFilesTable = &schema.Table{
		Name:       "contact_files",
		Columns:    ContactFilesColumns,
		PrimaryKey: []*schema.Column{ContactFilesColumns[0], ContactFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contact_files_contact_id",
				Columns:    []*schema.Column{ContactFilesColumns[0]},
				RefColumns: []*schema.Column{ContactsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "contact_files_file_id",
				Columns:    []*schema.Column{ContactFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ControlProceduresColumns holds the columns for the "control_procedures" table.
	ControlProceduresColumns = []*schema.Column{
		{Name: "control_id", Type: field.TypeString},
		{Name: "procedure_id", Type: field.TypeString},
	}
	// ControlProceduresTable holds the schema information for the "control_procedures" table.
	ControlProceduresTable = &schema.Table{
		Name:       "control_procedures",
		Columns:    ControlProceduresColumns,
		PrimaryKey: []*schema.Column{ControlProceduresColumns[0], ControlProceduresColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_procedures_control_id",
				Columns:    []*schema.Column{ControlProceduresColumns[0]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "control_procedures_procedure_id",
				Columns:    []*schema.Column{ControlProceduresColumns[1]},
				RefColumns: []*schema.Column{ProceduresColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ControlSubcontrolsColumns holds the columns for the "control_subcontrols" table.
	ControlSubcontrolsColumns = []*schema.Column{
		{Name: "control_id", Type: field.TypeString},
		{Name: "subcontrol_id", Type: field.TypeString},
	}
	// ControlSubcontrolsTable holds the schema information for the "control_subcontrols" table.
	ControlSubcontrolsTable = &schema.Table{
		Name:       "control_subcontrols",
		Columns:    ControlSubcontrolsColumns,
		PrimaryKey: []*schema.Column{ControlSubcontrolsColumns[0], ControlSubcontrolsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_subcontrols_control_id",
				Columns:    []*schema.Column{ControlSubcontrolsColumns[0]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "control_subcontrols_subcontrol_id",
				Columns:    []*schema.Column{ControlSubcontrolsColumns[1]},
				RefColumns: []*schema.Column{SubcontrolsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ControlNarrativesColumns holds the columns for the "control_narratives" table.
	ControlNarrativesColumns = []*schema.Column{
		{Name: "control_id", Type: field.TypeString},
		{Name: "narrative_id", Type: field.TypeString},
	}
	// ControlNarrativesTable holds the schema information for the "control_narratives" table.
	ControlNarrativesTable = &schema.Table{
		Name:       "control_narratives",
		Columns:    ControlNarrativesColumns,
		PrimaryKey: []*schema.Column{ControlNarrativesColumns[0], ControlNarrativesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_narratives_control_id",
				Columns:    []*schema.Column{ControlNarrativesColumns[0]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "control_narratives_narrative_id",
				Columns:    []*schema.Column{ControlNarrativesColumns[1]},
				RefColumns: []*schema.Column{NarrativesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ControlRisksColumns holds the columns for the "control_risks" table.
	ControlRisksColumns = []*schema.Column{
		{Name: "control_id", Type: field.TypeString},
		{Name: "risk_id", Type: field.TypeString},
	}
	// ControlRisksTable holds the schema information for the "control_risks" table.
	ControlRisksTable = &schema.Table{
		Name:       "control_risks",
		Columns:    ControlRisksColumns,
		PrimaryKey: []*schema.Column{ControlRisksColumns[0], ControlRisksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_risks_control_id",
				Columns:    []*schema.Column{ControlRisksColumns[0]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "control_risks_risk_id",
				Columns:    []*schema.Column{ControlRisksColumns[1]},
				RefColumns: []*schema.Column{RisksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ControlActionplansColumns holds the columns for the "control_actionplans" table.
	ControlActionplansColumns = []*schema.Column{
		{Name: "control_id", Type: field.TypeString},
		{Name: "action_plan_id", Type: field.TypeString},
	}
	// ControlActionplansTable holds the schema information for the "control_actionplans" table.
	ControlActionplansTable = &schema.Table{
		Name:       "control_actionplans",
		Columns:    ControlActionplansColumns,
		PrimaryKey: []*schema.Column{ControlActionplansColumns[0], ControlActionplansColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_actionplans_control_id",
				Columns:    []*schema.Column{ControlActionplansColumns[0]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "control_actionplans_action_plan_id",
				Columns:    []*schema.Column{ControlActionplansColumns[1]},
				RefColumns: []*schema.Column{ActionPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ControlTasksColumns holds the columns for the "control_tasks" table.
	ControlTasksColumns = []*schema.Column{
		{Name: "control_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
	}
	// ControlTasksTable holds the schema information for the "control_tasks" table.
	ControlTasksTable = &schema.Table{
		Name:       "control_tasks",
		Columns:    ControlTasksColumns,
		PrimaryKey: []*schema.Column{ControlTasksColumns[0], ControlTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_tasks_control_id",
				Columns:    []*schema.Column{ControlTasksColumns[0]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "control_tasks_task_id",
				Columns:    []*schema.Column{ControlTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ControlObjectiveNarrativesColumns holds the columns for the "control_objective_narratives" table.
	ControlObjectiveNarrativesColumns = []*schema.Column{
		{Name: "control_objective_id", Type: field.TypeString},
		{Name: "narrative_id", Type: field.TypeString},
	}
	// ControlObjectiveNarrativesTable holds the schema information for the "control_objective_narratives" table.
	ControlObjectiveNarrativesTable = &schema.Table{
		Name:       "control_objective_narratives",
		Columns:    ControlObjectiveNarrativesColumns,
		PrimaryKey: []*schema.Column{ControlObjectiveNarrativesColumns[0], ControlObjectiveNarrativesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_objective_narratives_control_objective_id",
				Columns:    []*schema.Column{ControlObjectiveNarrativesColumns[0]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "control_objective_narratives_narrative_id",
				Columns:    []*schema.Column{ControlObjectiveNarrativesColumns[1]},
				RefColumns: []*schema.Column{NarrativesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ControlObjectiveTasksColumns holds the columns for the "control_objective_tasks" table.
	ControlObjectiveTasksColumns = []*schema.Column{
		{Name: "control_objective_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
	}
	// ControlObjectiveTasksTable holds the schema information for the "control_objective_tasks" table.
	ControlObjectiveTasksTable = &schema.Table{
		Name:       "control_objective_tasks",
		Columns:    ControlObjectiveTasksColumns,
		PrimaryKey: []*schema.Column{ControlObjectiveTasksColumns[0], ControlObjectiveTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "control_objective_tasks_control_objective_id",
				Columns:    []*schema.Column{ControlObjectiveTasksColumns[0]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "control_objective_tasks_task_id",
				Columns:    []*schema.Column{ControlObjectiveTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DocumentDataFilesColumns holds the columns for the "document_data_files" table.
	DocumentDataFilesColumns = []*schema.Column{
		{Name: "document_data_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// DocumentDataFilesTable holds the schema information for the "document_data_files" table.
	DocumentDataFilesTable = &schema.Table{
		Name:       "document_data_files",
		Columns:    DocumentDataFilesColumns,
		PrimaryKey: []*schema.Column{DocumentDataFilesColumns[0], DocumentDataFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "document_data_files_document_data_id",
				Columns:    []*schema.Column{DocumentDataFilesColumns[0]},
				RefColumns: []*schema.Column{DocumentDataColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "document_data_files_file_id",
				Columns:    []*schema.Column{DocumentDataFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EntitlementEventsColumns holds the columns for the "entitlement_events" table.
	EntitlementEventsColumns = []*schema.Column{
		{Name: "entitlement_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// EntitlementEventsTable holds the schema information for the "entitlement_events" table.
	EntitlementEventsTable = &schema.Table{
		Name:       "entitlement_events",
		Columns:    EntitlementEventsColumns,
		PrimaryKey: []*schema.Column{EntitlementEventsColumns[0], EntitlementEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entitlement_events_entitlement_id",
				Columns:    []*schema.Column{EntitlementEventsColumns[0]},
				RefColumns: []*schema.Column{EntitlementsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "entitlement_events_event_id",
				Columns:    []*schema.Column{EntitlementEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EntitlementPlanEventsColumns holds the columns for the "entitlement_plan_events" table.
	EntitlementPlanEventsColumns = []*schema.Column{
		{Name: "entitlement_plan_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// EntitlementPlanEventsTable holds the schema information for the "entitlement_plan_events" table.
	EntitlementPlanEventsTable = &schema.Table{
		Name:       "entitlement_plan_events",
		Columns:    EntitlementPlanEventsColumns,
		PrimaryKey: []*schema.Column{EntitlementPlanEventsColumns[0], EntitlementPlanEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entitlement_plan_events_entitlement_plan_id",
				Columns:    []*schema.Column{EntitlementPlanEventsColumns[0]},
				RefColumns: []*schema.Column{EntitlementPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "entitlement_plan_events_event_id",
				Columns:    []*schema.Column{EntitlementPlanEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EntitlementPlanFeatureEventsColumns holds the columns for the "entitlement_plan_feature_events" table.
	EntitlementPlanFeatureEventsColumns = []*schema.Column{
		{Name: "entitlement_plan_feature_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// EntitlementPlanFeatureEventsTable holds the schema information for the "entitlement_plan_feature_events" table.
	EntitlementPlanFeatureEventsTable = &schema.Table{
		Name:       "entitlement_plan_feature_events",
		Columns:    EntitlementPlanFeatureEventsColumns,
		PrimaryKey: []*schema.Column{EntitlementPlanFeatureEventsColumns[0], EntitlementPlanFeatureEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entitlement_plan_feature_events_entitlement_plan_feature_id",
				Columns:    []*schema.Column{EntitlementPlanFeatureEventsColumns[0]},
				RefColumns: []*schema.Column{EntitlementPlanFeaturesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "entitlement_plan_feature_events_event_id",
				Columns:    []*schema.Column{EntitlementPlanFeatureEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EntityContactsColumns holds the columns for the "entity_contacts" table.
	EntityContactsColumns = []*schema.Column{
		{Name: "entity_id", Type: field.TypeString},
		{Name: "contact_id", Type: field.TypeString},
	}
	// EntityContactsTable holds the schema information for the "entity_contacts" table.
	EntityContactsTable = &schema.Table{
		Name:       "entity_contacts",
		Columns:    EntityContactsColumns,
		PrimaryKey: []*schema.Column{EntityContactsColumns[0], EntityContactsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entity_contacts_entity_id",
				Columns:    []*schema.Column{EntityContactsColumns[0]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "entity_contacts_contact_id",
				Columns:    []*schema.Column{EntityContactsColumns[1]},
				RefColumns: []*schema.Column{ContactsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EntityDocumentsColumns holds the columns for the "entity_documents" table.
	EntityDocumentsColumns = []*schema.Column{
		{Name: "entity_id", Type: field.TypeString},
		{Name: "document_data_id", Type: field.TypeString},
	}
	// EntityDocumentsTable holds the schema information for the "entity_documents" table.
	EntityDocumentsTable = &schema.Table{
		Name:       "entity_documents",
		Columns:    EntityDocumentsColumns,
		PrimaryKey: []*schema.Column{EntityDocumentsColumns[0], EntityDocumentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entity_documents_entity_id",
				Columns:    []*schema.Column{EntityDocumentsColumns[0]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "entity_documents_document_data_id",
				Columns:    []*schema.Column{EntityDocumentsColumns[1]},
				RefColumns: []*schema.Column{DocumentDataColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EntityFilesColumns holds the columns for the "entity_files" table.
	EntityFilesColumns = []*schema.Column{
		{Name: "entity_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// EntityFilesTable holds the schema information for the "entity_files" table.
	EntityFilesTable = &schema.Table{
		Name:       "entity_files",
		Columns:    EntityFilesColumns,
		PrimaryKey: []*schema.Column{EntityFilesColumns[0], EntityFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entity_files_entity_id",
				Columns:    []*schema.Column{EntityFilesColumns[0]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "entity_files_file_id",
				Columns:    []*schema.Column{EntityFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FeatureEventsColumns holds the columns for the "feature_events" table.
	FeatureEventsColumns = []*schema.Column{
		{Name: "feature_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// FeatureEventsTable holds the schema information for the "feature_events" table.
	FeatureEventsTable = &schema.Table{
		Name:       "feature_events",
		Columns:    FeatureEventsColumns,
		PrimaryKey: []*schema.Column{FeatureEventsColumns[0], FeatureEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "feature_events_feature_id",
				Columns:    []*schema.Column{FeatureEventsColumns[0]},
				RefColumns: []*schema.Column{FeaturesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "feature_events_event_id",
				Columns:    []*schema.Column{FeatureEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FileEventsColumns holds the columns for the "file_events" table.
	FileEventsColumns = []*schema.Column{
		{Name: "file_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// FileEventsTable holds the schema information for the "file_events" table.
	FileEventsTable = &schema.Table{
		Name:       "file_events",
		Columns:    FileEventsColumns,
		PrimaryKey: []*schema.Column{FileEventsColumns[0], FileEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "file_events_file_id",
				Columns:    []*schema.Column{FileEventsColumns[0]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "file_events_event_id",
				Columns:    []*schema.Column{FileEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupEventsColumns holds the columns for the "group_events" table.
	GroupEventsColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// GroupEventsTable holds the schema information for the "group_events" table.
	GroupEventsTable = &schema.Table{
		Name:       "group_events",
		Columns:    GroupEventsColumns,
		PrimaryKey: []*schema.Column{GroupEventsColumns[0], GroupEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_events_group_id",
				Columns:    []*schema.Column{GroupEventsColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_events_event_id",
				Columns:    []*schema.Column{GroupEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupFilesColumns holds the columns for the "group_files" table.
	GroupFilesColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// GroupFilesTable holds the schema information for the "group_files" table.
	GroupFilesTable = &schema.Table{
		Name:       "group_files",
		Columns:    GroupFilesColumns,
		PrimaryKey: []*schema.Column{GroupFilesColumns[0], GroupFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_files_group_id",
				Columns:    []*schema.Column{GroupFilesColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_files_file_id",
				Columns:    []*schema.Column{GroupFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupTasksColumns holds the columns for the "group_tasks" table.
	GroupTasksColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
	}
	// GroupTasksTable holds the schema information for the "group_tasks" table.
	GroupTasksTable = &schema.Table{
		Name:       "group_tasks",
		Columns:    GroupTasksColumns,
		PrimaryKey: []*schema.Column{GroupTasksColumns[0], GroupTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_tasks_group_id",
				Columns:    []*schema.Column{GroupTasksColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_tasks_task_id",
				Columns:    []*schema.Column{GroupTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupMembershipEventsColumns holds the columns for the "group_membership_events" table.
	GroupMembershipEventsColumns = []*schema.Column{
		{Name: "group_membership_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// GroupMembershipEventsTable holds the schema information for the "group_membership_events" table.
	GroupMembershipEventsTable = &schema.Table{
		Name:       "group_membership_events",
		Columns:    GroupMembershipEventsColumns,
		PrimaryKey: []*schema.Column{GroupMembershipEventsColumns[0], GroupMembershipEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_membership_events_group_membership_id",
				Columns:    []*schema.Column{GroupMembershipEventsColumns[0]},
				RefColumns: []*schema.Column{GroupMembershipsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_membership_events_event_id",
				Columns:    []*schema.Column{GroupMembershipEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HushEventsColumns holds the columns for the "hush_events" table.
	HushEventsColumns = []*schema.Column{
		{Name: "hush_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// HushEventsTable holds the schema information for the "hush_events" table.
	HushEventsTable = &schema.Table{
		Name:       "hush_events",
		Columns:    HushEventsColumns,
		PrimaryKey: []*schema.Column{HushEventsColumns[0], HushEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hush_events_hush_id",
				Columns:    []*schema.Column{HushEventsColumns[0]},
				RefColumns: []*schema.Column{HushesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "hush_events_event_id",
				Columns:    []*schema.Column{HushEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IntegrationSecretsColumns holds the columns for the "integration_secrets" table.
	IntegrationSecretsColumns = []*schema.Column{
		{Name: "integration_id", Type: field.TypeString},
		{Name: "hush_id", Type: field.TypeString},
	}
	// IntegrationSecretsTable holds the schema information for the "integration_secrets" table.
	IntegrationSecretsTable = &schema.Table{
		Name:       "integration_secrets",
		Columns:    IntegrationSecretsColumns,
		PrimaryKey: []*schema.Column{IntegrationSecretsColumns[0], IntegrationSecretsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "integration_secrets_integration_id",
				Columns:    []*schema.Column{IntegrationSecretsColumns[0]},
				RefColumns: []*schema.Column{IntegrationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "integration_secrets_hush_id",
				Columns:    []*schema.Column{IntegrationSecretsColumns[1]},
				RefColumns: []*schema.Column{HushesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IntegrationOauth2tokensColumns holds the columns for the "integration_oauth2tokens" table.
	IntegrationOauth2tokensColumns = []*schema.Column{
		{Name: "integration_id", Type: field.TypeString},
		{Name: "oh_auth_too_token_id", Type: field.TypeString},
	}
	// IntegrationOauth2tokensTable holds the schema information for the "integration_oauth2tokens" table.
	IntegrationOauth2tokensTable = &schema.Table{
		Name:       "integration_oauth2tokens",
		Columns:    IntegrationOauth2tokensColumns,
		PrimaryKey: []*schema.Column{IntegrationOauth2tokensColumns[0], IntegrationOauth2tokensColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "integration_oauth2tokens_integration_id",
				Columns:    []*schema.Column{IntegrationOauth2tokensColumns[0]},
				RefColumns: []*schema.Column{IntegrationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "integration_oauth2tokens_oh_auth_too_token_id",
				Columns:    []*schema.Column{IntegrationOauth2tokensColumns[1]},
				RefColumns: []*schema.Column{OhAuthTooTokensColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IntegrationEventsColumns holds the columns for the "integration_events" table.
	IntegrationEventsColumns = []*schema.Column{
		{Name: "integration_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// IntegrationEventsTable holds the schema information for the "integration_events" table.
	IntegrationEventsTable = &schema.Table{
		Name:       "integration_events",
		Columns:    IntegrationEventsColumns,
		PrimaryKey: []*schema.Column{IntegrationEventsColumns[0], IntegrationEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "integration_events_integration_id",
				Columns:    []*schema.Column{IntegrationEventsColumns[0]},
				RefColumns: []*schema.Column{IntegrationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "integration_events_event_id",
				Columns:    []*schema.Column{IntegrationEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IntegrationWebhooksColumns holds the columns for the "integration_webhooks" table.
	IntegrationWebhooksColumns = []*schema.Column{
		{Name: "integration_id", Type: field.TypeString},
		{Name: "webhook_id", Type: field.TypeString},
	}
	// IntegrationWebhooksTable holds the schema information for the "integration_webhooks" table.
	IntegrationWebhooksTable = &schema.Table{
		Name:       "integration_webhooks",
		Columns:    IntegrationWebhooksColumns,
		PrimaryKey: []*schema.Column{IntegrationWebhooksColumns[0], IntegrationWebhooksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "integration_webhooks_integration_id",
				Columns:    []*schema.Column{IntegrationWebhooksColumns[0]},
				RefColumns: []*schema.Column{IntegrationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "integration_webhooks_webhook_id",
				Columns:    []*schema.Column{IntegrationWebhooksColumns[1]},
				RefColumns: []*schema.Column{WebhooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InternalPolicyControlobjectivesColumns holds the columns for the "internal_policy_controlobjectives" table.
	InternalPolicyControlobjectivesColumns = []*schema.Column{
		{Name: "internal_policy_id", Type: field.TypeString},
		{Name: "control_objective_id", Type: field.TypeString},
	}
	// InternalPolicyControlobjectivesTable holds the schema information for the "internal_policy_controlobjectives" table.
	InternalPolicyControlobjectivesTable = &schema.Table{
		Name:       "internal_policy_controlobjectives",
		Columns:    InternalPolicyControlobjectivesColumns,
		PrimaryKey: []*schema.Column{InternalPolicyControlobjectivesColumns[0], InternalPolicyControlobjectivesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "internal_policy_controlobjectives_internal_policy_id",
				Columns:    []*schema.Column{InternalPolicyControlobjectivesColumns[0]},
				RefColumns: []*schema.Column{InternalPoliciesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "internal_policy_controlobjectives_control_objective_id",
				Columns:    []*schema.Column{InternalPolicyControlobjectivesColumns[1]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InternalPolicyProceduresColumns holds the columns for the "internal_policy_procedures" table.
	InternalPolicyProceduresColumns = []*schema.Column{
		{Name: "internal_policy_id", Type: field.TypeString},
		{Name: "procedure_id", Type: field.TypeString},
	}
	// InternalPolicyProceduresTable holds the schema information for the "internal_policy_procedures" table.
	InternalPolicyProceduresTable = &schema.Table{
		Name:       "internal_policy_procedures",
		Columns:    InternalPolicyProceduresColumns,
		PrimaryKey: []*schema.Column{InternalPolicyProceduresColumns[0], InternalPolicyProceduresColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "internal_policy_procedures_internal_policy_id",
				Columns:    []*schema.Column{InternalPolicyProceduresColumns[0]},
				RefColumns: []*schema.Column{InternalPoliciesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "internal_policy_procedures_procedure_id",
				Columns:    []*schema.Column{InternalPolicyProceduresColumns[1]},
				RefColumns: []*schema.Column{ProceduresColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InternalPolicyNarrativesColumns holds the columns for the "internal_policy_narratives" table.
	InternalPolicyNarrativesColumns = []*schema.Column{
		{Name: "internal_policy_id", Type: field.TypeString},
		{Name: "narrative_id", Type: field.TypeString},
	}
	// InternalPolicyNarrativesTable holds the schema information for the "internal_policy_narratives" table.
	InternalPolicyNarrativesTable = &schema.Table{
		Name:       "internal_policy_narratives",
		Columns:    InternalPolicyNarrativesColumns,
		PrimaryKey: []*schema.Column{InternalPolicyNarrativesColumns[0], InternalPolicyNarrativesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "internal_policy_narratives_internal_policy_id",
				Columns:    []*schema.Column{InternalPolicyNarrativesColumns[0]},
				RefColumns: []*schema.Column{InternalPoliciesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "internal_policy_narratives_narrative_id",
				Columns:    []*schema.Column{InternalPolicyNarrativesColumns[1]},
				RefColumns: []*schema.Column{NarrativesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InternalPolicyTasksColumns holds the columns for the "internal_policy_tasks" table.
	InternalPolicyTasksColumns = []*schema.Column{
		{Name: "internal_policy_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
	}
	// InternalPolicyTasksTable holds the schema information for the "internal_policy_tasks" table.
	InternalPolicyTasksTable = &schema.Table{
		Name:       "internal_policy_tasks",
		Columns:    InternalPolicyTasksColumns,
		PrimaryKey: []*schema.Column{InternalPolicyTasksColumns[0], InternalPolicyTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "internal_policy_tasks_internal_policy_id",
				Columns:    []*schema.Column{InternalPolicyTasksColumns[0]},
				RefColumns: []*schema.Column{InternalPoliciesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "internal_policy_tasks_task_id",
				Columns:    []*schema.Column{InternalPolicyTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// InviteEventsColumns holds the columns for the "invite_events" table.
	InviteEventsColumns = []*schema.Column{
		{Name: "invite_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// InviteEventsTable holds the schema information for the "invite_events" table.
	InviteEventsTable = &schema.Table{
		Name:       "invite_events",
		Columns:    InviteEventsColumns,
		PrimaryKey: []*schema.Column{InviteEventsColumns[0], InviteEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invite_events_invite_id",
				Columns:    []*schema.Column{InviteEventsColumns[0]},
				RefColumns: []*schema.Column{InvitesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "invite_events_event_id",
				Columns:    []*schema.Column{InviteEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OhAuthTooTokenEventsColumns holds the columns for the "oh_auth_too_token_events" table.
	OhAuthTooTokenEventsColumns = []*schema.Column{
		{Name: "oh_auth_too_token_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// OhAuthTooTokenEventsTable holds the schema information for the "oh_auth_too_token_events" table.
	OhAuthTooTokenEventsTable = &schema.Table{
		Name:       "oh_auth_too_token_events",
		Columns:    OhAuthTooTokenEventsColumns,
		PrimaryKey: []*schema.Column{OhAuthTooTokenEventsColumns[0], OhAuthTooTokenEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oh_auth_too_token_events_oh_auth_too_token_id",
				Columns:    []*schema.Column{OhAuthTooTokenEventsColumns[0]},
				RefColumns: []*schema.Column{OhAuthTooTokensColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oh_auth_too_token_events_event_id",
				Columns:    []*schema.Column{OhAuthTooTokenEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrgMembershipEventsColumns holds the columns for the "org_membership_events" table.
	OrgMembershipEventsColumns = []*schema.Column{
		{Name: "org_membership_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// OrgMembershipEventsTable holds the schema information for the "org_membership_events" table.
	OrgMembershipEventsTable = &schema.Table{
		Name:       "org_membership_events",
		Columns:    OrgMembershipEventsColumns,
		PrimaryKey: []*schema.Column{OrgMembershipEventsColumns[0], OrgMembershipEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "org_membership_events_org_membership_id",
				Columns:    []*schema.Column{OrgMembershipEventsColumns[0]},
				RefColumns: []*schema.Column{OrgMembershipsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "org_membership_events_event_id",
				Columns:    []*schema.Column{OrgMembershipEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrganizationPersonalAccessTokensColumns holds the columns for the "organization_personal_access_tokens" table.
	OrganizationPersonalAccessTokensColumns = []*schema.Column{
		{Name: "organization_id", Type: field.TypeString},
		{Name: "personal_access_token_id", Type: field.TypeString},
	}
	// OrganizationPersonalAccessTokensTable holds the schema information for the "organization_personal_access_tokens" table.
	OrganizationPersonalAccessTokensTable = &schema.Table{
		Name:       "organization_personal_access_tokens",
		Columns:    OrganizationPersonalAccessTokensColumns,
		PrimaryKey: []*schema.Column{OrganizationPersonalAccessTokensColumns[0], OrganizationPersonalAccessTokensColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_personal_access_tokens_organization_id",
				Columns:    []*schema.Column{OrganizationPersonalAccessTokensColumns[0]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "organization_personal_access_tokens_personal_access_token_id",
				Columns:    []*schema.Column{OrganizationPersonalAccessTokensColumns[1]},
				RefColumns: []*schema.Column{PersonalAccessTokensColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrganizationEventsColumns holds the columns for the "organization_events" table.
	OrganizationEventsColumns = []*schema.Column{
		{Name: "organization_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// OrganizationEventsTable holds the schema information for the "organization_events" table.
	OrganizationEventsTable = &schema.Table{
		Name:       "organization_events",
		Columns:    OrganizationEventsColumns,
		PrimaryKey: []*schema.Column{OrganizationEventsColumns[0], OrganizationEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_events_organization_id",
				Columns:    []*schema.Column{OrganizationEventsColumns[0]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "organization_events_event_id",
				Columns:    []*schema.Column{OrganizationEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrganizationSecretsColumns holds the columns for the "organization_secrets" table.
	OrganizationSecretsColumns = []*schema.Column{
		{Name: "organization_id", Type: field.TypeString},
		{Name: "hush_id", Type: field.TypeString},
	}
	// OrganizationSecretsTable holds the schema information for the "organization_secrets" table.
	OrganizationSecretsTable = &schema.Table{
		Name:       "organization_secrets",
		Columns:    OrganizationSecretsColumns,
		PrimaryKey: []*schema.Column{OrganizationSecretsColumns[0], OrganizationSecretsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_secrets_organization_id",
				Columns:    []*schema.Column{OrganizationSecretsColumns[0]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "organization_secrets_hush_id",
				Columns:    []*schema.Column{OrganizationSecretsColumns[1]},
				RefColumns: []*schema.Column{HushesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrganizationFilesColumns holds the columns for the "organization_files" table.
	OrganizationFilesColumns = []*schema.Column{
		{Name: "organization_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// OrganizationFilesTable holds the schema information for the "organization_files" table.
	OrganizationFilesTable = &schema.Table{
		Name:       "organization_files",
		Columns:    OrganizationFilesColumns,
		PrimaryKey: []*schema.Column{OrganizationFilesColumns[0], OrganizationFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_files_organization_id",
				Columns:    []*schema.Column{OrganizationFilesColumns[0]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "organization_files_file_id",
				Columns:    []*schema.Column{OrganizationFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrganizationTasksColumns holds the columns for the "organization_tasks" table.
	OrganizationTasksColumns = []*schema.Column{
		{Name: "organization_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
	}
	// OrganizationTasksTable holds the schema information for the "organization_tasks" table.
	OrganizationTasksTable = &schema.Table{
		Name:       "organization_tasks",
		Columns:    OrganizationTasksColumns,
		PrimaryKey: []*schema.Column{OrganizationTasksColumns[0], OrganizationTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_tasks_organization_id",
				Columns:    []*schema.Column{OrganizationTasksColumns[0]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "organization_tasks_task_id",
				Columns:    []*schema.Column{OrganizationTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrganizationSettingFilesColumns holds the columns for the "organization_setting_files" table.
	OrganizationSettingFilesColumns = []*schema.Column{
		{Name: "organization_setting_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// OrganizationSettingFilesTable holds the schema information for the "organization_setting_files" table.
	OrganizationSettingFilesTable = &schema.Table{
		Name:       "organization_setting_files",
		Columns:    OrganizationSettingFilesColumns,
		PrimaryKey: []*schema.Column{OrganizationSettingFilesColumns[0], OrganizationSettingFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_setting_files_organization_setting_id",
				Columns:    []*schema.Column{OrganizationSettingFilesColumns[0]},
				RefColumns: []*schema.Column{OrganizationSettingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "organization_setting_files_file_id",
				Columns:    []*schema.Column{OrganizationSettingFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PersonalAccessTokenEventsColumns holds the columns for the "personal_access_token_events" table.
	PersonalAccessTokenEventsColumns = []*schema.Column{
		{Name: "personal_access_token_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// PersonalAccessTokenEventsTable holds the schema information for the "personal_access_token_events" table.
	PersonalAccessTokenEventsTable = &schema.Table{
		Name:       "personal_access_token_events",
		Columns:    PersonalAccessTokenEventsColumns,
		PrimaryKey: []*schema.Column{PersonalAccessTokenEventsColumns[0], PersonalAccessTokenEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "personal_access_token_events_personal_access_token_id",
				Columns:    []*schema.Column{PersonalAccessTokenEventsColumns[0]},
				RefColumns: []*schema.Column{PersonalAccessTokensColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "personal_access_token_events_event_id",
				Columns:    []*schema.Column{PersonalAccessTokenEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProcedureNarrativesColumns holds the columns for the "procedure_narratives" table.
	ProcedureNarrativesColumns = []*schema.Column{
		{Name: "procedure_id", Type: field.TypeString},
		{Name: "narrative_id", Type: field.TypeString},
	}
	// ProcedureNarrativesTable holds the schema information for the "procedure_narratives" table.
	ProcedureNarrativesTable = &schema.Table{
		Name:       "procedure_narratives",
		Columns:    ProcedureNarrativesColumns,
		PrimaryKey: []*schema.Column{ProcedureNarrativesColumns[0], ProcedureNarrativesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "procedure_narratives_procedure_id",
				Columns:    []*schema.Column{ProcedureNarrativesColumns[0]},
				RefColumns: []*schema.Column{ProceduresColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "procedure_narratives_narrative_id",
				Columns:    []*schema.Column{ProcedureNarrativesColumns[1]},
				RefColumns: []*schema.Column{NarrativesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProcedureRisksColumns holds the columns for the "procedure_risks" table.
	ProcedureRisksColumns = []*schema.Column{
		{Name: "procedure_id", Type: field.TypeString},
		{Name: "risk_id", Type: field.TypeString},
	}
	// ProcedureRisksTable holds the schema information for the "procedure_risks" table.
	ProcedureRisksTable = &schema.Table{
		Name:       "procedure_risks",
		Columns:    ProcedureRisksColumns,
		PrimaryKey: []*schema.Column{ProcedureRisksColumns[0], ProcedureRisksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "procedure_risks_procedure_id",
				Columns:    []*schema.Column{ProcedureRisksColumns[0]},
				RefColumns: []*schema.Column{ProceduresColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "procedure_risks_risk_id",
				Columns:    []*schema.Column{ProcedureRisksColumns[1]},
				RefColumns: []*schema.Column{RisksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProcedureTasksColumns holds the columns for the "procedure_tasks" table.
	ProcedureTasksColumns = []*schema.Column{
		{Name: "procedure_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
	}
	// ProcedureTasksTable holds the schema information for the "procedure_tasks" table.
	ProcedureTasksTable = &schema.Table{
		Name:       "procedure_tasks",
		Columns:    ProcedureTasksColumns,
		PrimaryKey: []*schema.Column{ProcedureTasksColumns[0], ProcedureTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "procedure_tasks_procedure_id",
				Columns:    []*schema.Column{ProcedureTasksColumns[0]},
				RefColumns: []*schema.Column{ProceduresColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "procedure_tasks_task_id",
				Columns:    []*schema.Column{ProcedureTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramControlsColumns holds the columns for the "program_controls" table.
	ProgramControlsColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "control_id", Type: field.TypeString},
	}
	// ProgramControlsTable holds the schema information for the "program_controls" table.
	ProgramControlsTable = &schema.Table{
		Name:       "program_controls",
		Columns:    ProgramControlsColumns,
		PrimaryKey: []*schema.Column{ProgramControlsColumns[0], ProgramControlsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_controls_program_id",
				Columns:    []*schema.Column{ProgramControlsColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_controls_control_id",
				Columns:    []*schema.Column{ProgramControlsColumns[1]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramSubcontrolsColumns holds the columns for the "program_subcontrols" table.
	ProgramSubcontrolsColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "subcontrol_id", Type: field.TypeString},
	}
	// ProgramSubcontrolsTable holds the schema information for the "program_subcontrols" table.
	ProgramSubcontrolsTable = &schema.Table{
		Name:       "program_subcontrols",
		Columns:    ProgramSubcontrolsColumns,
		PrimaryKey: []*schema.Column{ProgramSubcontrolsColumns[0], ProgramSubcontrolsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_subcontrols_program_id",
				Columns:    []*schema.Column{ProgramSubcontrolsColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_subcontrols_subcontrol_id",
				Columns:    []*schema.Column{ProgramSubcontrolsColumns[1]},
				RefColumns: []*schema.Column{SubcontrolsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramControlobjectivesColumns holds the columns for the "program_controlobjectives" table.
	ProgramControlobjectivesColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "control_objective_id", Type: field.TypeString},
	}
	// ProgramControlobjectivesTable holds the schema information for the "program_controlobjectives" table.
	ProgramControlobjectivesTable = &schema.Table{
		Name:       "program_controlobjectives",
		Columns:    ProgramControlobjectivesColumns,
		PrimaryKey: []*schema.Column{ProgramControlobjectivesColumns[0], ProgramControlobjectivesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_controlobjectives_program_id",
				Columns:    []*schema.Column{ProgramControlobjectivesColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_controlobjectives_control_objective_id",
				Columns:    []*schema.Column{ProgramControlobjectivesColumns[1]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramPoliciesColumns holds the columns for the "program_policies" table.
	ProgramPoliciesColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "internal_policy_id", Type: field.TypeString},
	}
	// ProgramPoliciesTable holds the schema information for the "program_policies" table.
	ProgramPoliciesTable = &schema.Table{
		Name:       "program_policies",
		Columns:    ProgramPoliciesColumns,
		PrimaryKey: []*schema.Column{ProgramPoliciesColumns[0], ProgramPoliciesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_policies_program_id",
				Columns:    []*schema.Column{ProgramPoliciesColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_policies_internal_policy_id",
				Columns:    []*schema.Column{ProgramPoliciesColumns[1]},
				RefColumns: []*schema.Column{InternalPoliciesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramProceduresColumns holds the columns for the "program_procedures" table.
	ProgramProceduresColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "procedure_id", Type: field.TypeString},
	}
	// ProgramProceduresTable holds the schema information for the "program_procedures" table.
	ProgramProceduresTable = &schema.Table{
		Name:       "program_procedures",
		Columns:    ProgramProceduresColumns,
		PrimaryKey: []*schema.Column{ProgramProceduresColumns[0], ProgramProceduresColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_procedures_program_id",
				Columns:    []*schema.Column{ProgramProceduresColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_procedures_procedure_id",
				Columns:    []*schema.Column{ProgramProceduresColumns[1]},
				RefColumns: []*schema.Column{ProceduresColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramRisksColumns holds the columns for the "program_risks" table.
	ProgramRisksColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "risk_id", Type: field.TypeString},
	}
	// ProgramRisksTable holds the schema information for the "program_risks" table.
	ProgramRisksTable = &schema.Table{
		Name:       "program_risks",
		Columns:    ProgramRisksColumns,
		PrimaryKey: []*schema.Column{ProgramRisksColumns[0], ProgramRisksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_risks_program_id",
				Columns:    []*schema.Column{ProgramRisksColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_risks_risk_id",
				Columns:    []*schema.Column{ProgramRisksColumns[1]},
				RefColumns: []*schema.Column{RisksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramTasksColumns holds the columns for the "program_tasks" table.
	ProgramTasksColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
	}
	// ProgramTasksTable holds the schema information for the "program_tasks" table.
	ProgramTasksTable = &schema.Table{
		Name:       "program_tasks",
		Columns:    ProgramTasksColumns,
		PrimaryKey: []*schema.Column{ProgramTasksColumns[0], ProgramTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_tasks_program_id",
				Columns:    []*schema.Column{ProgramTasksColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_tasks_task_id",
				Columns:    []*schema.Column{ProgramTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramNotesColumns holds the columns for the "program_notes" table.
	ProgramNotesColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "note_id", Type: field.TypeString},
	}
	// ProgramNotesTable holds the schema information for the "program_notes" table.
	ProgramNotesTable = &schema.Table{
		Name:       "program_notes",
		Columns:    ProgramNotesColumns,
		PrimaryKey: []*schema.Column{ProgramNotesColumns[0], ProgramNotesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_notes_program_id",
				Columns:    []*schema.Column{ProgramNotesColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_notes_note_id",
				Columns:    []*schema.Column{ProgramNotesColumns[1]},
				RefColumns: []*schema.Column{NotesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramFilesColumns holds the columns for the "program_files" table.
	ProgramFilesColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// ProgramFilesTable holds the schema information for the "program_files" table.
	ProgramFilesTable = &schema.Table{
		Name:       "program_files",
		Columns:    ProgramFilesColumns,
		PrimaryKey: []*schema.Column{ProgramFilesColumns[0], ProgramFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_files_program_id",
				Columns:    []*schema.Column{ProgramFilesColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_files_file_id",
				Columns:    []*schema.Column{ProgramFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramNarrativesColumns holds the columns for the "program_narratives" table.
	ProgramNarrativesColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "narrative_id", Type: field.TypeString},
	}
	// ProgramNarrativesTable holds the schema information for the "program_narratives" table.
	ProgramNarrativesTable = &schema.Table{
		Name:       "program_narratives",
		Columns:    ProgramNarrativesColumns,
		PrimaryKey: []*schema.Column{ProgramNarrativesColumns[0], ProgramNarrativesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_narratives_program_id",
				Columns:    []*schema.Column{ProgramNarrativesColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_narratives_narrative_id",
				Columns:    []*schema.Column{ProgramNarrativesColumns[1]},
				RefColumns: []*schema.Column{NarrativesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProgramActionplansColumns holds the columns for the "program_actionplans" table.
	ProgramActionplansColumns = []*schema.Column{
		{Name: "program_id", Type: field.TypeString},
		{Name: "action_plan_id", Type: field.TypeString},
	}
	// ProgramActionplansTable holds the schema information for the "program_actionplans" table.
	ProgramActionplansTable = &schema.Table{
		Name:       "program_actionplans",
		Columns:    ProgramActionplansColumns,
		PrimaryKey: []*schema.Column{ProgramActionplansColumns[0], ProgramActionplansColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_actionplans_program_id",
				Columns:    []*schema.Column{ProgramActionplansColumns[0]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_actionplans_action_plan_id",
				Columns:    []*schema.Column{ProgramActionplansColumns[1]},
				RefColumns: []*schema.Column{ActionPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RiskActionplansColumns holds the columns for the "risk_actionplans" table.
	RiskActionplansColumns = []*schema.Column{
		{Name: "risk_id", Type: field.TypeString},
		{Name: "action_plan_id", Type: field.TypeString},
	}
	// RiskActionplansTable holds the schema information for the "risk_actionplans" table.
	RiskActionplansTable = &schema.Table{
		Name:       "risk_actionplans",
		Columns:    RiskActionplansColumns,
		PrimaryKey: []*schema.Column{RiskActionplansColumns[0], RiskActionplansColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "risk_actionplans_risk_id",
				Columns:    []*schema.Column{RiskActionplansColumns[0]},
				RefColumns: []*schema.Column{RisksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "risk_actionplans_action_plan_id",
				Columns:    []*schema.Column{RiskActionplansColumns[1]},
				RefColumns: []*schema.Column{ActionPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StandardControlobjectivesColumns holds the columns for the "standard_controlobjectives" table.
	StandardControlobjectivesColumns = []*schema.Column{
		{Name: "standard_id", Type: field.TypeString},
		{Name: "control_objective_id", Type: field.TypeString},
	}
	// StandardControlobjectivesTable holds the schema information for the "standard_controlobjectives" table.
	StandardControlobjectivesTable = &schema.Table{
		Name:       "standard_controlobjectives",
		Columns:    StandardControlobjectivesColumns,
		PrimaryKey: []*schema.Column{StandardControlobjectivesColumns[0], StandardControlobjectivesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "standard_controlobjectives_standard_id",
				Columns:    []*schema.Column{StandardControlobjectivesColumns[0]},
				RefColumns: []*schema.Column{StandardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "standard_controlobjectives_control_objective_id",
				Columns:    []*schema.Column{StandardControlobjectivesColumns[1]},
				RefColumns: []*schema.Column{ControlObjectivesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StandardControlsColumns holds the columns for the "standard_controls" table.
	StandardControlsColumns = []*schema.Column{
		{Name: "standard_id", Type: field.TypeString},
		{Name: "control_id", Type: field.TypeString},
	}
	// StandardControlsTable holds the schema information for the "standard_controls" table.
	StandardControlsTable = &schema.Table{
		Name:       "standard_controls",
		Columns:    StandardControlsColumns,
		PrimaryKey: []*schema.Column{StandardControlsColumns[0], StandardControlsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "standard_controls_standard_id",
				Columns:    []*schema.Column{StandardControlsColumns[0]},
				RefColumns: []*schema.Column{StandardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "standard_controls_control_id",
				Columns:    []*schema.Column{StandardControlsColumns[1]},
				RefColumns: []*schema.Column{ControlsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StandardActionplansColumns holds the columns for the "standard_actionplans" table.
	StandardActionplansColumns = []*schema.Column{
		{Name: "standard_id", Type: field.TypeString},
		{Name: "action_plan_id", Type: field.TypeString},
	}
	// StandardActionplansTable holds the schema information for the "standard_actionplans" table.
	StandardActionplansTable = &schema.Table{
		Name:       "standard_actionplans",
		Columns:    StandardActionplansColumns,
		PrimaryKey: []*schema.Column{StandardActionplansColumns[0], StandardActionplansColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "standard_actionplans_standard_id",
				Columns:    []*schema.Column{StandardActionplansColumns[0]},
				RefColumns: []*schema.Column{StandardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "standard_actionplans_action_plan_id",
				Columns:    []*schema.Column{StandardActionplansColumns[1]},
				RefColumns: []*schema.Column{ActionPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StandardProgramsColumns holds the columns for the "standard_programs" table.
	StandardProgramsColumns = []*schema.Column{
		{Name: "standard_id", Type: field.TypeString},
		{Name: "program_id", Type: field.TypeString},
	}
	// StandardProgramsTable holds the schema information for the "standard_programs" table.
	StandardProgramsTable = &schema.Table{
		Name:       "standard_programs",
		Columns:    StandardProgramsColumns,
		PrimaryKey: []*schema.Column{StandardProgramsColumns[0], StandardProgramsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "standard_programs_standard_id",
				Columns:    []*schema.Column{StandardProgramsColumns[0]},
				RefColumns: []*schema.Column{StandardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "standard_programs_program_id",
				Columns:    []*schema.Column{StandardProgramsColumns[1]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SubcontrolTasksColumns holds the columns for the "subcontrol_tasks" table.
	SubcontrolTasksColumns = []*schema.Column{
		{Name: "subcontrol_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
	}
	// SubcontrolTasksTable holds the schema information for the "subcontrol_tasks" table.
	SubcontrolTasksTable = &schema.Table{
		Name:       "subcontrol_tasks",
		Columns:    SubcontrolTasksColumns,
		PrimaryKey: []*schema.Column{SubcontrolTasksColumns[0], SubcontrolTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subcontrol_tasks_subcontrol_id",
				Columns:    []*schema.Column{SubcontrolTasksColumns[0]},
				RefColumns: []*schema.Column{SubcontrolsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "subcontrol_tasks_task_id",
				Columns:    []*schema.Column{SubcontrolTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SubscriberEventsColumns holds the columns for the "subscriber_events" table.
	SubscriberEventsColumns = []*schema.Column{
		{Name: "subscriber_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// SubscriberEventsTable holds the schema information for the "subscriber_events" table.
	SubscriberEventsTable = &schema.Table{
		Name:       "subscriber_events",
		Columns:    SubscriberEventsColumns,
		PrimaryKey: []*schema.Column{SubscriberEventsColumns[0], SubscriberEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscriber_events_subscriber_id",
				Columns:    []*schema.Column{SubscriberEventsColumns[0]},
				RefColumns: []*schema.Column{SubscribersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "subscriber_events_event_id",
				Columns:    []*schema.Column{SubscriberEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TemplateFilesColumns holds the columns for the "template_files" table.
	TemplateFilesColumns = []*schema.Column{
		{Name: "template_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// TemplateFilesTable holds the schema information for the "template_files" table.
	TemplateFilesTable = &schema.Table{
		Name:       "template_files",
		Columns:    TemplateFilesColumns,
		PrimaryKey: []*schema.Column{TemplateFilesColumns[0], TemplateFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "template_files_template_id",
				Columns:    []*schema.Column{TemplateFilesColumns[0]},
				RefColumns: []*schema.Column{TemplatesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "template_files_file_id",
				Columns:    []*schema.Column{TemplateFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFilesColumns holds the columns for the "user_files" table.
	UserFilesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// UserFilesTable holds the schema information for the "user_files" table.
	UserFilesTable = &schema.Table{
		Name:       "user_files",
		Columns:    UserFilesColumns,
		PrimaryKey: []*schema.Column{UserFilesColumns[0], UserFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_files_user_id",
				Columns:    []*schema.Column{UserFilesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_files_file_id",
				Columns:    []*schema.Column{UserFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserEventsColumns holds the columns for the "user_events" table.
	UserEventsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// UserEventsTable holds the schema information for the "user_events" table.
	UserEventsTable = &schema.Table{
		Name:       "user_events",
		Columns:    UserEventsColumns,
		PrimaryKey: []*schema.Column{UserEventsColumns[0], UserEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_events_user_id",
				Columns:    []*schema.Column{UserEventsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_events_event_id",
				Columns:    []*schema.Column{UserEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserActionplansColumns holds the columns for the "user_actionplans" table.
	UserActionplansColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "action_plan_id", Type: field.TypeString},
	}
	// UserActionplansTable holds the schema information for the "user_actionplans" table.
	UserActionplansTable = &schema.Table{
		Name:       "user_actionplans",
		Columns:    UserActionplansColumns,
		PrimaryKey: []*schema.Column{UserActionplansColumns[0], UserActionplansColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_actionplans_user_id",
				Columns:    []*schema.Column{UserActionplansColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_actionplans_action_plan_id",
				Columns:    []*schema.Column{UserActionplansColumns[1]},
				RefColumns: []*schema.Column{ActionPlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserSubcontrolsColumns holds the columns for the "user_subcontrols" table.
	UserSubcontrolsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "subcontrol_id", Type: field.TypeString},
	}
	// UserSubcontrolsTable holds the schema information for the "user_subcontrols" table.
	UserSubcontrolsTable = &schema.Table{
		Name:       "user_subcontrols",
		Columns:    UserSubcontrolsColumns,
		PrimaryKey: []*schema.Column{UserSubcontrolsColumns[0], UserSubcontrolsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_subcontrols_user_id",
				Columns:    []*schema.Column{UserSubcontrolsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_subcontrols_subcontrol_id",
				Columns:    []*schema.Column{UserSubcontrolsColumns[1]},
				RefColumns: []*schema.Column{SubcontrolsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserSettingFilesColumns holds the columns for the "user_setting_files" table.
	UserSettingFilesColumns = []*schema.Column{
		{Name: "user_setting_id", Type: field.TypeString},
		{Name: "file_id", Type: field.TypeString},
	}
	// UserSettingFilesTable holds the schema information for the "user_setting_files" table.
	UserSettingFilesTable = &schema.Table{
		Name:       "user_setting_files",
		Columns:    UserSettingFilesColumns,
		PrimaryKey: []*schema.Column{UserSettingFilesColumns[0], UserSettingFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_setting_files_user_setting_id",
				Columns:    []*schema.Column{UserSettingFilesColumns[0]},
				RefColumns: []*schema.Column{UserSettingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_setting_files_file_id",
				Columns:    []*schema.Column{UserSettingFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WebhookEventsColumns holds the columns for the "webhook_events" table.
	WebhookEventsColumns = []*schema.Column{
		{Name: "webhook_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// WebhookEventsTable holds the schema information for the "webhook_events" table.
	WebhookEventsTable = &schema.Table{
		Name:       "webhook_events",
		Columns:    WebhookEventsColumns,
		PrimaryKey: []*schema.Column{WebhookEventsColumns[0], WebhookEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "webhook_events_webhook_id",
				Columns:    []*schema.Column{WebhookEventsColumns[0]},
				RefColumns: []*schema.Column{WebhooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "webhook_events_event_id",
				Columns:    []*schema.Column{WebhookEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APITokensTable,
		ActionPlansTable,
		ActionPlanHistoryTable,
		ContactsTable,
		ContactHistoryTable,
		ControlsTable,
		ControlHistoryTable,
		ControlObjectivesTable,
		ControlObjectiveHistoryTable,
		DocumentDataTable,
		DocumentDataHistoryTable,
		EmailVerificationTokensTable,
		EntitlementsTable,
		EntitlementHistoryTable,
		EntitlementPlansTable,
		EntitlementPlanFeaturesTable,
		EntitlementPlanFeatureHistoryTable,
		EntitlementPlanHistoryTable,
		EntitiesTable,
		EntityHistoryTable,
		EntityTypesTable,
		EntityTypeHistoryTable,
		EventsTable,
		EventHistoryTable,
		FeaturesTable,
		FeatureHistoryTable,
		FilesTable,
		FileHistoryTable,
		GroupsTable,
		GroupHistoryTable,
		GroupMembershipsTable,
		GroupMembershipHistoryTable,
		GroupSettingsTable,
		GroupSettingHistoryTable,
		HushesTable,
		HushHistoryTable,
		IntegrationsTable,
		IntegrationHistoryTable,
		InternalPoliciesTable,
		InternalPolicyHistoryTable,
		InvitesTable,
		NarrativesTable,
		NarrativeHistoryTable,
		NotesTable,
		NoteHistoryTable,
		OauthProvidersTable,
		OauthProviderHistoryTable,
		OhAuthTooTokensTable,
		OrgMembershipsTable,
		OrgMembershipHistoryTable,
		OrganizationsTable,
		OrganizationHistoryTable,
		OrganizationSettingsTable,
		OrganizationSettingHistoryTable,
		PasswordResetTokensTable,
		PersonalAccessTokensTable,
		ProceduresTable,
		ProcedureHistoryTable,
		ProgramsTable,
		ProgramHistoryTable,
		RisksTable,
		RiskHistoryTable,
		StandardsTable,
		StandardHistoryTable,
		SubcontrolsTable,
		SubcontrolHistoryTable,
		SubscribersTable,
		TfaSettingsTable,
		TasksTable,
		TaskHistoryTable,
		TemplatesTable,
		TemplateHistoryTable,
		UsersTable,
		UserHistoryTable,
		UserSettingsTable,
		UserSettingHistoryTable,
		WebauthnsTable,
		WebhooksTable,
		WebhookHistoryTable,
		ContactFilesTable,
		ControlProceduresTable,
		ControlSubcontrolsTable,
		ControlNarrativesTable,
		ControlRisksTable,
		ControlActionplansTable,
		ControlTasksTable,
		ControlObjectiveNarrativesTable,
		ControlObjectiveTasksTable,
		DocumentDataFilesTable,
		EntitlementEventsTable,
		EntitlementPlanEventsTable,
		EntitlementPlanFeatureEventsTable,
		EntityContactsTable,
		EntityDocumentsTable,
		EntityFilesTable,
		FeatureEventsTable,
		FileEventsTable,
		GroupEventsTable,
		GroupFilesTable,
		GroupTasksTable,
		GroupMembershipEventsTable,
		HushEventsTable,
		IntegrationSecretsTable,
		IntegrationOauth2tokensTable,
		IntegrationEventsTable,
		IntegrationWebhooksTable,
		InternalPolicyControlobjectivesTable,
		InternalPolicyProceduresTable,
		InternalPolicyNarrativesTable,
		InternalPolicyTasksTable,
		InviteEventsTable,
		OhAuthTooTokenEventsTable,
		OrgMembershipEventsTable,
		OrganizationPersonalAccessTokensTable,
		OrganizationEventsTable,
		OrganizationSecretsTable,
		OrganizationFilesTable,
		OrganizationTasksTable,
		OrganizationSettingFilesTable,
		PersonalAccessTokenEventsTable,
		ProcedureNarrativesTable,
		ProcedureRisksTable,
		ProcedureTasksTable,
		ProgramControlsTable,
		ProgramSubcontrolsTable,
		ProgramControlobjectivesTable,
		ProgramPoliciesTable,
		ProgramProceduresTable,
		ProgramRisksTable,
		ProgramTasksTable,
		ProgramNotesTable,
		ProgramFilesTable,
		ProgramNarrativesTable,
		ProgramActionplansTable,
		RiskActionplansTable,
		StandardControlobjectivesTable,
		StandardControlsTable,
		StandardActionplansTable,
		StandardProgramsTable,
		SubcontrolTasksTable,
		SubscriberEventsTable,
		TemplateFilesTable,
		UserFilesTable,
		UserEventsTable,
		UserActionplansTable,
		UserSubcontrolsTable,
		UserSettingFilesTable,
		WebhookEventsTable,
	}
)

func init() {
	APITokensTable.ForeignKeys[0].RefTable = OrganizationsTable
	ActionPlanHistoryTable.Annotation = &entsql.Annotation{
		Table: "action_plan_history",
	}
	ContactsTable.ForeignKeys[0].RefTable = OrganizationsTable
	ContactHistoryTable.Annotation = &entsql.Annotation{
		Table: "contact_history",
	}
	ControlsTable.ForeignKeys[0].RefTable = ControlObjectivesTable
	ControlsTable.ForeignKeys[1].RefTable = InternalPoliciesTable
	ControlHistoryTable.Annotation = &entsql.Annotation{
		Table: "control_history",
	}
	ControlObjectivesTable.ForeignKeys[0].RefTable = ControlsTable
	ControlObjectiveHistoryTable.Annotation = &entsql.Annotation{
		Table: "control_objective_history",
	}
	DocumentDataTable.ForeignKeys[0].RefTable = OrganizationsTable
	DocumentDataTable.ForeignKeys[1].RefTable = TemplatesTable
	DocumentDataHistoryTable.Annotation = &entsql.Annotation{
		Table: "document_data_history",
	}
	EmailVerificationTokensTable.ForeignKeys[0].RefTable = UsersTable
	EntitlementsTable.ForeignKeys[0].RefTable = EntitlementPlansTable
	EntitlementsTable.ForeignKeys[1].RefTable = OrganizationsTable
	EntitlementsTable.ForeignKeys[2].RefTable = OrganizationsTable
	EntitlementHistoryTable.Annotation = &entsql.Annotation{
		Table: "entitlement_history",
	}
	EntitlementPlansTable.ForeignKeys[0].RefTable = OrganizationsTable
	EntitlementPlanFeaturesTable.ForeignKeys[0].RefTable = EntitlementPlansTable
	EntitlementPlanFeaturesTable.ForeignKeys[1].RefTable = FeaturesTable
	EntitlementPlanFeaturesTable.ForeignKeys[2].RefTable = OrganizationsTable
	EntitlementPlanFeatureHistoryTable.Annotation = &entsql.Annotation{
		Table: "entitlement_plan_feature_history",
	}
	EntitlementPlanHistoryTable.Annotation = &entsql.Annotation{
		Table: "entitlement_plan_history",
	}
	EntitiesTable.ForeignKeys[0].RefTable = EntityTypesTable
	EntitiesTable.ForeignKeys[1].RefTable = EntityTypesTable
	EntitiesTable.ForeignKeys[2].RefTable = OrganizationsTable
	EntityHistoryTable.Annotation = &entsql.Annotation{
		Table: "entity_history",
	}
	EntityTypesTable.ForeignKeys[0].RefTable = OrganizationsTable
	EntityTypeHistoryTable.Annotation = &entsql.Annotation{
		Table: "entity_type_history",
	}
	EventHistoryTable.Annotation = &entsql.Annotation{
		Table: "event_history",
	}
	FeaturesTable.ForeignKeys[0].RefTable = OrganizationsTable
	FeatureHistoryTable.Annotation = &entsql.Annotation{
		Table: "feature_history",
	}
	FileHistoryTable.Annotation = &entsql.Annotation{
		Table: "file_history",
	}
	GroupsTable.ForeignKeys[0].RefTable = OrganizationsTable
	GroupHistoryTable.Annotation = &entsql.Annotation{
		Table: "group_history",
	}
	GroupMembershipsTable.ForeignKeys[0].RefTable = GroupsTable
	GroupMembershipsTable.ForeignKeys[1].RefTable = UsersTable
	GroupMembershipHistoryTable.Annotation = &entsql.Annotation{
		Table: "group_membership_history",
	}
	GroupSettingsTable.ForeignKeys[0].RefTable = GroupsTable
	GroupSettingHistoryTable.Annotation = &entsql.Annotation{
		Table: "group_setting_history",
	}
	HushHistoryTable.Annotation = &entsql.Annotation{
		Table: "hush_history",
	}
	IntegrationsTable.ForeignKeys[0].RefTable = GroupsTable
	IntegrationsTable.ForeignKeys[1].RefTable = OrganizationsTable
	IntegrationHistoryTable.Annotation = &entsql.Annotation{
		Table: "integration_history",
	}
	InternalPolicyHistoryTable.Annotation = &entsql.Annotation{
		Table: "internal_policy_history",
	}
	InvitesTable.ForeignKeys[0].RefTable = OrganizationsTable
	NarrativeHistoryTable.Annotation = &entsql.Annotation{
		Table: "narrative_history",
	}
	NotesTable.ForeignKeys[0].RefTable = EntitiesTable
	NotesTable.ForeignKeys[1].RefTable = OrganizationsTable
	NoteHistoryTable.Annotation = &entsql.Annotation{
		Table: "note_history",
	}
	OauthProvidersTable.ForeignKeys[0].RefTable = OrganizationsTable
	OauthProviderHistoryTable.Annotation = &entsql.Annotation{
		Table: "oauth_provider_history",
	}
	OrgMembershipsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrgMembershipsTable.ForeignKeys[1].RefTable = UsersTable
	OrgMembershipHistoryTable.Annotation = &entsql.Annotation{
		Table: "org_membership_history",
	}
	OrganizationsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationHistoryTable.Annotation = &entsql.Annotation{
		Table: "organization_history",
	}
	OrganizationSettingsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationSettingHistoryTable.Annotation = &entsql.Annotation{
		Table: "organization_setting_history",
	}
	PasswordResetTokensTable.ForeignKeys[0].RefTable = UsersTable
	PersonalAccessTokensTable.ForeignKeys[0].RefTable = UsersTable
	ProceduresTable.ForeignKeys[0].RefTable = ControlObjectivesTable
	ProceduresTable.ForeignKeys[1].RefTable = StandardsTable
	ProcedureHistoryTable.Annotation = &entsql.Annotation{
		Table: "procedure_history",
	}
	ProgramsTable.ForeignKeys[0].RefTable = OrganizationsTable
	ProgramHistoryTable.Annotation = &entsql.Annotation{
		Table: "program_history",
	}
	RisksTable.ForeignKeys[0].RefTable = ControlObjectivesTable
	RiskHistoryTable.Annotation = &entsql.Annotation{
		Table: "risk_history",
	}
	StandardHistoryTable.Annotation = &entsql.Annotation{
		Table: "standard_history",
	}
	SubcontrolsTable.ForeignKeys[0].RefTable = ControlObjectivesTable
	SubcontrolsTable.ForeignKeys[1].RefTable = NotesTable
	SubcontrolHistoryTable.Annotation = &entsql.Annotation{
		Table: "subcontrol_history",
	}
	SubscribersTable.ForeignKeys[0].RefTable = OrganizationsTable
	TfaSettingsTable.ForeignKeys[0].RefTable = UsersTable
	TasksTable.ForeignKeys[0].RefTable = UsersTable
	TasksTable.ForeignKeys[1].RefTable = UsersTable
	TaskHistoryTable.Annotation = &entsql.Annotation{
		Table: "task_history",
	}
	TemplatesTable.ForeignKeys[0].RefTable = OrganizationsTable
	TemplateHistoryTable.Annotation = &entsql.Annotation{
		Table: "template_history",
	}
	UsersTable.ForeignKeys[0].RefTable = FilesTable
	UserHistoryTable.Annotation = &entsql.Annotation{
		Table: "user_history",
	}
	UserSettingsTable.ForeignKeys[0].RefTable = UsersTable
	UserSettingsTable.ForeignKeys[1].RefTable = OrganizationsTable
	UserSettingHistoryTable.Annotation = &entsql.Annotation{
		Table: "user_setting_history",
	}
	WebauthnsTable.ForeignKeys[0].RefTable = UsersTable
	WebhooksTable.ForeignKeys[0].RefTable = OrganizationsTable
	WebhookHistoryTable.Annotation = &entsql.Annotation{
		Table: "webhook_history",
	}
	ContactFilesTable.ForeignKeys[0].RefTable = ContactsTable
	ContactFilesTable.ForeignKeys[1].RefTable = FilesTable
	ControlProceduresTable.ForeignKeys[0].RefTable = ControlsTable
	ControlProceduresTable.ForeignKeys[1].RefTable = ProceduresTable
	ControlSubcontrolsTable.ForeignKeys[0].RefTable = ControlsTable
	ControlSubcontrolsTable.ForeignKeys[1].RefTable = SubcontrolsTable
	ControlNarrativesTable.ForeignKeys[0].RefTable = ControlsTable
	ControlNarrativesTable.ForeignKeys[1].RefTable = NarrativesTable
	ControlRisksTable.ForeignKeys[0].RefTable = ControlsTable
	ControlRisksTable.ForeignKeys[1].RefTable = RisksTable
	ControlActionplansTable.ForeignKeys[0].RefTable = ControlsTable
	ControlActionplansTable.ForeignKeys[1].RefTable = ActionPlansTable
	ControlTasksTable.ForeignKeys[0].RefTable = ControlsTable
	ControlTasksTable.ForeignKeys[1].RefTable = TasksTable
	ControlObjectiveNarrativesTable.ForeignKeys[0].RefTable = ControlObjectivesTable
	ControlObjectiveNarrativesTable.ForeignKeys[1].RefTable = NarrativesTable
	ControlObjectiveTasksTable.ForeignKeys[0].RefTable = ControlObjectivesTable
	ControlObjectiveTasksTable.ForeignKeys[1].RefTable = TasksTable
	DocumentDataFilesTable.ForeignKeys[0].RefTable = DocumentDataTable
	DocumentDataFilesTable.ForeignKeys[1].RefTable = FilesTable
	EntitlementEventsTable.ForeignKeys[0].RefTable = EntitlementsTable
	EntitlementEventsTable.ForeignKeys[1].RefTable = EventsTable
	EntitlementPlanEventsTable.ForeignKeys[0].RefTable = EntitlementPlansTable
	EntitlementPlanEventsTable.ForeignKeys[1].RefTable = EventsTable
	EntitlementPlanFeatureEventsTable.ForeignKeys[0].RefTable = EntitlementPlanFeaturesTable
	EntitlementPlanFeatureEventsTable.ForeignKeys[1].RefTable = EventsTable
	EntityContactsTable.ForeignKeys[0].RefTable = EntitiesTable
	EntityContactsTable.ForeignKeys[1].RefTable = ContactsTable
	EntityDocumentsTable.ForeignKeys[0].RefTable = EntitiesTable
	EntityDocumentsTable.ForeignKeys[1].RefTable = DocumentDataTable
	EntityFilesTable.ForeignKeys[0].RefTable = EntitiesTable
	EntityFilesTable.ForeignKeys[1].RefTable = FilesTable
	FeatureEventsTable.ForeignKeys[0].RefTable = FeaturesTable
	FeatureEventsTable.ForeignKeys[1].RefTable = EventsTable
	FileEventsTable.ForeignKeys[0].RefTable = FilesTable
	FileEventsTable.ForeignKeys[1].RefTable = EventsTable
	GroupEventsTable.ForeignKeys[0].RefTable = GroupsTable
	GroupEventsTable.ForeignKeys[1].RefTable = EventsTable
	GroupFilesTable.ForeignKeys[0].RefTable = GroupsTable
	GroupFilesTable.ForeignKeys[1].RefTable = FilesTable
	GroupTasksTable.ForeignKeys[0].RefTable = GroupsTable
	GroupTasksTable.ForeignKeys[1].RefTable = TasksTable
	GroupMembershipEventsTable.ForeignKeys[0].RefTable = GroupMembershipsTable
	GroupMembershipEventsTable.ForeignKeys[1].RefTable = EventsTable
	HushEventsTable.ForeignKeys[0].RefTable = HushesTable
	HushEventsTable.ForeignKeys[1].RefTable = EventsTable
	IntegrationSecretsTable.ForeignKeys[0].RefTable = IntegrationsTable
	IntegrationSecretsTable.ForeignKeys[1].RefTable = HushesTable
	IntegrationOauth2tokensTable.ForeignKeys[0].RefTable = IntegrationsTable
	IntegrationOauth2tokensTable.ForeignKeys[1].RefTable = OhAuthTooTokensTable
	IntegrationEventsTable.ForeignKeys[0].RefTable = IntegrationsTable
	IntegrationEventsTable.ForeignKeys[1].RefTable = EventsTable
	IntegrationWebhooksTable.ForeignKeys[0].RefTable = IntegrationsTable
	IntegrationWebhooksTable.ForeignKeys[1].RefTable = WebhooksTable
	InternalPolicyControlobjectivesTable.ForeignKeys[0].RefTable = InternalPoliciesTable
	InternalPolicyControlobjectivesTable.ForeignKeys[1].RefTable = ControlObjectivesTable
	InternalPolicyProceduresTable.ForeignKeys[0].RefTable = InternalPoliciesTable
	InternalPolicyProceduresTable.ForeignKeys[1].RefTable = ProceduresTable
	InternalPolicyNarrativesTable.ForeignKeys[0].RefTable = InternalPoliciesTable
	InternalPolicyNarrativesTable.ForeignKeys[1].RefTable = NarrativesTable
	InternalPolicyTasksTable.ForeignKeys[0].RefTable = InternalPoliciesTable
	InternalPolicyTasksTable.ForeignKeys[1].RefTable = TasksTable
	InviteEventsTable.ForeignKeys[0].RefTable = InvitesTable
	InviteEventsTable.ForeignKeys[1].RefTable = EventsTable
	OhAuthTooTokenEventsTable.ForeignKeys[0].RefTable = OhAuthTooTokensTable
	OhAuthTooTokenEventsTable.ForeignKeys[1].RefTable = EventsTable
	OrgMembershipEventsTable.ForeignKeys[0].RefTable = OrgMembershipsTable
	OrgMembershipEventsTable.ForeignKeys[1].RefTable = EventsTable
	OrganizationPersonalAccessTokensTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationPersonalAccessTokensTable.ForeignKeys[1].RefTable = PersonalAccessTokensTable
	OrganizationEventsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationEventsTable.ForeignKeys[1].RefTable = EventsTable
	OrganizationSecretsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationSecretsTable.ForeignKeys[1].RefTable = HushesTable
	OrganizationFilesTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationFilesTable.ForeignKeys[1].RefTable = FilesTable
	OrganizationTasksTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationTasksTable.ForeignKeys[1].RefTable = TasksTable
	OrganizationSettingFilesTable.ForeignKeys[0].RefTable = OrganizationSettingsTable
	OrganizationSettingFilesTable.ForeignKeys[1].RefTable = FilesTable
	PersonalAccessTokenEventsTable.ForeignKeys[0].RefTable = PersonalAccessTokensTable
	PersonalAccessTokenEventsTable.ForeignKeys[1].RefTable = EventsTable
	ProcedureNarrativesTable.ForeignKeys[0].RefTable = ProceduresTable
	ProcedureNarrativesTable.ForeignKeys[1].RefTable = NarrativesTable
	ProcedureRisksTable.ForeignKeys[0].RefTable = ProceduresTable
	ProcedureRisksTable.ForeignKeys[1].RefTable = RisksTable
	ProcedureTasksTable.ForeignKeys[0].RefTable = ProceduresTable
	ProcedureTasksTable.ForeignKeys[1].RefTable = TasksTable
	ProgramControlsTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramControlsTable.ForeignKeys[1].RefTable = ControlsTable
	ProgramSubcontrolsTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramSubcontrolsTable.ForeignKeys[1].RefTable = SubcontrolsTable
	ProgramControlobjectivesTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramControlobjectivesTable.ForeignKeys[1].RefTable = ControlObjectivesTable
	ProgramPoliciesTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramPoliciesTable.ForeignKeys[1].RefTable = InternalPoliciesTable
	ProgramProceduresTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramProceduresTable.ForeignKeys[1].RefTable = ProceduresTable
	ProgramRisksTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramRisksTable.ForeignKeys[1].RefTable = RisksTable
	ProgramTasksTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramTasksTable.ForeignKeys[1].RefTable = TasksTable
	ProgramNotesTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramNotesTable.ForeignKeys[1].RefTable = NotesTable
	ProgramFilesTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramFilesTable.ForeignKeys[1].RefTable = FilesTable
	ProgramNarrativesTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramNarrativesTable.ForeignKeys[1].RefTable = NarrativesTable
	ProgramActionplansTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramActionplansTable.ForeignKeys[1].RefTable = ActionPlansTable
	RiskActionplansTable.ForeignKeys[0].RefTable = RisksTable
	RiskActionplansTable.ForeignKeys[1].RefTable = ActionPlansTable
	StandardControlobjectivesTable.ForeignKeys[0].RefTable = StandardsTable
	StandardControlobjectivesTable.ForeignKeys[1].RefTable = ControlObjectivesTable
	StandardControlsTable.ForeignKeys[0].RefTable = StandardsTable
	StandardControlsTable.ForeignKeys[1].RefTable = ControlsTable
	StandardActionplansTable.ForeignKeys[0].RefTable = StandardsTable
	StandardActionplansTable.ForeignKeys[1].RefTable = ActionPlansTable
	StandardProgramsTable.ForeignKeys[0].RefTable = StandardsTable
	StandardProgramsTable.ForeignKeys[1].RefTable = ProgramsTable
	SubcontrolTasksTable.ForeignKeys[0].RefTable = SubcontrolsTable
	SubcontrolTasksTable.ForeignKeys[1].RefTable = TasksTable
	SubscriberEventsTable.ForeignKeys[0].RefTable = SubscribersTable
	SubscriberEventsTable.ForeignKeys[1].RefTable = EventsTable
	TemplateFilesTable.ForeignKeys[0].RefTable = TemplatesTable
	TemplateFilesTable.ForeignKeys[1].RefTable = FilesTable
	UserFilesTable.ForeignKeys[0].RefTable = UsersTable
	UserFilesTable.ForeignKeys[1].RefTable = FilesTable
	UserEventsTable.ForeignKeys[0].RefTable = UsersTable
	UserEventsTable.ForeignKeys[1].RefTable = EventsTable
	UserActionplansTable.ForeignKeys[0].RefTable = UsersTable
	UserActionplansTable.ForeignKeys[1].RefTable = ActionPlansTable
	UserSubcontrolsTable.ForeignKeys[0].RefTable = UsersTable
	UserSubcontrolsTable.ForeignKeys[1].RefTable = SubcontrolsTable
	UserSettingFilesTable.ForeignKeys[0].RefTable = UserSettingsTable
	UserSettingFilesTable.ForeignKeys[1].RefTable = FilesTable
	WebhookEventsTable.ForeignKeys[0].RefTable = WebhooksTable
	WebhookEventsTable.ForeignKeys[1].RefTable = EventsTable
}
