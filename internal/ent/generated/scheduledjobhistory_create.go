// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobhistory"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// ScheduledJobHistoryCreate is the builder for creating a ScheduledJobHistory entity.
type ScheduledJobHistoryCreate struct {
	config
	mutation *ScheduledJobHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (sjhc *ScheduledJobHistoryCreate) SetHistoryTime(t time.Time) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetHistoryTime(t)
	return sjhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableHistoryTime(t *time.Time) *ScheduledJobHistoryCreate {
	if t != nil {
		sjhc.SetHistoryTime(*t)
	}
	return sjhc
}

// SetRef sets the "ref" field.
func (sjhc *ScheduledJobHistoryCreate) SetRef(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetRef(s)
	return sjhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableRef(s *string) *ScheduledJobHistoryCreate {
	if s != nil {
		sjhc.SetRef(*s)
	}
	return sjhc
}

// SetOperation sets the "operation" field.
func (sjhc *ScheduledJobHistoryCreate) SetOperation(ht history.OpType) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetOperation(ht)
	return sjhc
}

// SetCreatedAt sets the "created_at" field.
func (sjhc *ScheduledJobHistoryCreate) SetCreatedAt(t time.Time) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetCreatedAt(t)
	return sjhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableCreatedAt(t *time.Time) *ScheduledJobHistoryCreate {
	if t != nil {
		sjhc.SetCreatedAt(*t)
	}
	return sjhc
}

// SetUpdatedAt sets the "updated_at" field.
func (sjhc *ScheduledJobHistoryCreate) SetUpdatedAt(t time.Time) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetUpdatedAt(t)
	return sjhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableUpdatedAt(t *time.Time) *ScheduledJobHistoryCreate {
	if t != nil {
		sjhc.SetUpdatedAt(*t)
	}
	return sjhc
}

// SetCreatedBy sets the "created_by" field.
func (sjhc *ScheduledJobHistoryCreate) SetCreatedBy(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetCreatedBy(s)
	return sjhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableCreatedBy(s *string) *ScheduledJobHistoryCreate {
	if s != nil {
		sjhc.SetCreatedBy(*s)
	}
	return sjhc
}

// SetUpdatedBy sets the "updated_by" field.
func (sjhc *ScheduledJobHistoryCreate) SetUpdatedBy(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetUpdatedBy(s)
	return sjhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableUpdatedBy(s *string) *ScheduledJobHistoryCreate {
	if s != nil {
		sjhc.SetUpdatedBy(*s)
	}
	return sjhc
}

// SetDeletedAt sets the "deleted_at" field.
func (sjhc *ScheduledJobHistoryCreate) SetDeletedAt(t time.Time) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetDeletedAt(t)
	return sjhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableDeletedAt(t *time.Time) *ScheduledJobHistoryCreate {
	if t != nil {
		sjhc.SetDeletedAt(*t)
	}
	return sjhc
}

// SetDeletedBy sets the "deleted_by" field.
func (sjhc *ScheduledJobHistoryCreate) SetDeletedBy(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetDeletedBy(s)
	return sjhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableDeletedBy(s *string) *ScheduledJobHistoryCreate {
	if s != nil {
		sjhc.SetDeletedBy(*s)
	}
	return sjhc
}

// SetDisplayID sets the "display_id" field.
func (sjhc *ScheduledJobHistoryCreate) SetDisplayID(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetDisplayID(s)
	return sjhc
}

// SetOwnerID sets the "owner_id" field.
func (sjhc *ScheduledJobHistoryCreate) SetOwnerID(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetOwnerID(s)
	return sjhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableOwnerID(s *string) *ScheduledJobHistoryCreate {
	if s != nil {
		sjhc.SetOwnerID(*s)
	}
	return sjhc
}

// SetJobID sets the "job_id" field.
func (sjhc *ScheduledJobHistoryCreate) SetJobID(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetJobID(s)
	return sjhc
}

// SetActive sets the "active" field.
func (sjhc *ScheduledJobHistoryCreate) SetActive(b bool) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetActive(b)
	return sjhc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableActive(b *bool) *ScheduledJobHistoryCreate {
	if b != nil {
		sjhc.SetActive(*b)
	}
	return sjhc
}

// SetConfiguration sets the "configuration" field.
func (sjhc *ScheduledJobHistoryCreate) SetConfiguration(mc models.JobConfiguration) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetConfiguration(mc)
	return sjhc
}

// SetCron sets the "cron" field.
func (sjhc *ScheduledJobHistoryCreate) SetCron(m models.Cron) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetCron(m)
	return sjhc
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableCron(m *models.Cron) *ScheduledJobHistoryCreate {
	if m != nil {
		sjhc.SetCron(*m)
	}
	return sjhc
}

// SetJobRunnerID sets the "job_runner_id" field.
func (sjhc *ScheduledJobHistoryCreate) SetJobRunnerID(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetJobRunnerID(s)
	return sjhc
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableJobRunnerID(s *string) *ScheduledJobHistoryCreate {
	if s != nil {
		sjhc.SetJobRunnerID(*s)
	}
	return sjhc
}

// SetID sets the "id" field.
func (sjhc *ScheduledJobHistoryCreate) SetID(s string) *ScheduledJobHistoryCreate {
	sjhc.mutation.SetID(s)
	return sjhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sjhc *ScheduledJobHistoryCreate) SetNillableID(s *string) *ScheduledJobHistoryCreate {
	if s != nil {
		sjhc.SetID(*s)
	}
	return sjhc
}

// Mutation returns the ScheduledJobHistoryMutation object of the builder.
func (sjhc *ScheduledJobHistoryCreate) Mutation() *ScheduledJobHistoryMutation {
	return sjhc.mutation
}

// Save creates the ScheduledJobHistory in the database.
func (sjhc *ScheduledJobHistoryCreate) Save(ctx context.Context) (*ScheduledJobHistory, error) {
	if err := sjhc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sjhc.sqlSave, sjhc.mutation, sjhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sjhc *ScheduledJobHistoryCreate) SaveX(ctx context.Context) *ScheduledJobHistory {
	v, err := sjhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjhc *ScheduledJobHistoryCreate) Exec(ctx context.Context) error {
	_, err := sjhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjhc *ScheduledJobHistoryCreate) ExecX(ctx context.Context) {
	if err := sjhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjhc *ScheduledJobHistoryCreate) defaults() error {
	if _, ok := sjhc.mutation.HistoryTime(); !ok {
		if scheduledjobhistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobhistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := scheduledjobhistory.DefaultHistoryTime()
		sjhc.mutation.SetHistoryTime(v)
	}
	if _, ok := sjhc.mutation.CreatedAt(); !ok {
		if scheduledjobhistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobhistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjobhistory.DefaultCreatedAt()
		sjhc.mutation.SetCreatedAt(v)
	}
	if _, ok := sjhc.mutation.UpdatedAt(); !ok {
		if scheduledjobhistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobhistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjobhistory.DefaultUpdatedAt()
		sjhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sjhc.mutation.Active(); !ok {
		v := scheduledjobhistory.DefaultActive
		sjhc.mutation.SetActive(v)
	}
	if _, ok := sjhc.mutation.ID(); !ok {
		if scheduledjobhistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobhistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := scheduledjobhistory.DefaultID()
		sjhc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sjhc *ScheduledJobHistoryCreate) check() error {
	if _, ok := sjhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ScheduledJobHistory.history_time"`)}
	}
	if _, ok := sjhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ScheduledJobHistory.operation"`)}
	}
	if v, ok := sjhc.mutation.Operation(); ok {
		if err := scheduledjobhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ScheduledJobHistory.operation": %w`, err)}
		}
	}
	if _, ok := sjhc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "ScheduledJobHistory.display_id"`)}
	}
	if _, ok := sjhc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`generated: missing required field "ScheduledJobHistory.job_id"`)}
	}
	if _, ok := sjhc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`generated: missing required field "ScheduledJobHistory.active"`)}
	}
	if v, ok := sjhc.mutation.Cron(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "ScheduledJobHistory.cron": %w`, err)}
		}
	}
	return nil
}

func (sjhc *ScheduledJobHistoryCreate) sqlSave(ctx context.Context) (*ScheduledJobHistory, error) {
	if err := sjhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sjhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ScheduledJobHistory.ID type: %T", _spec.ID.Value)
		}
	}
	sjhc.mutation.id = &_node.ID
	sjhc.mutation.done = true
	return _node, nil
}

func (sjhc *ScheduledJobHistoryCreate) createSpec() (*ScheduledJobHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheduledJobHistory{config: sjhc.config}
		_spec = sqlgraph.NewCreateSpec(scheduledjobhistory.Table, sqlgraph.NewFieldSpec(scheduledjobhistory.FieldID, field.TypeString))
	)
	_spec.Schema = sjhc.schemaConfig.ScheduledJobHistory
	if id, ok := sjhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sjhc.mutation.HistoryTime(); ok {
		_spec.SetField(scheduledjobhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := sjhc.mutation.Ref(); ok {
		_spec.SetField(scheduledjobhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := sjhc.mutation.Operation(); ok {
		_spec.SetField(scheduledjobhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := sjhc.mutation.CreatedAt(); ok {
		_spec.SetField(scheduledjobhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sjhc.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjobhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sjhc.mutation.CreatedBy(); ok {
		_spec.SetField(scheduledjobhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sjhc.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjobhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sjhc.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjobhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sjhc.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjobhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sjhc.mutation.DisplayID(); ok {
		_spec.SetField(scheduledjobhistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := sjhc.mutation.OwnerID(); ok {
		_spec.SetField(scheduledjobhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := sjhc.mutation.JobID(); ok {
		_spec.SetField(scheduledjobhistory.FieldJobID, field.TypeString, value)
		_node.JobID = value
	}
	if value, ok := sjhc.mutation.Active(); ok {
		_spec.SetField(scheduledjobhistory.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := sjhc.mutation.Configuration(); ok {
		_spec.SetField(scheduledjobhistory.FieldConfiguration, field.TypeJSON, value)
		_node.Configuration = value
	}
	if value, ok := sjhc.mutation.Cron(); ok {
		_spec.SetField(scheduledjobhistory.FieldCron, field.TypeString, value)
		_node.Cron = &value
	}
	if value, ok := sjhc.mutation.JobRunnerID(); ok {
		_spec.SetField(scheduledjobhistory.FieldJobRunnerID, field.TypeString, value)
		_node.JobRunnerID = value
	}
	return _node, _spec
}

// ScheduledJobHistoryCreateBulk is the builder for creating many ScheduledJobHistory entities in bulk.
type ScheduledJobHistoryCreateBulk struct {
	config
	err      error
	builders []*ScheduledJobHistoryCreate
}

// Save creates the ScheduledJobHistory entities in the database.
func (sjhcb *ScheduledJobHistoryCreateBulk) Save(ctx context.Context) ([]*ScheduledJobHistory, error) {
	if sjhcb.err != nil {
		return nil, sjhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sjhcb.builders))
	nodes := make([]*ScheduledJobHistory, len(sjhcb.builders))
	mutators := make([]Mutator, len(sjhcb.builders))
	for i := range sjhcb.builders {
		func(i int, root context.Context) {
			builder := sjhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduledJobHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjhcb *ScheduledJobHistoryCreateBulk) SaveX(ctx context.Context) []*ScheduledJobHistory {
	v, err := sjhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjhcb *ScheduledJobHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := sjhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjhcb *ScheduledJobHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := sjhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
