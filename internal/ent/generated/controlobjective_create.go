// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
)

// ControlObjectiveCreate is the builder for creating a ControlObjective entity.
type ControlObjectiveCreate struct {
	config
	mutation *ControlObjectiveMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (coc *ControlObjectiveCreate) SetCreatedAt(t time.Time) *ControlObjectiveCreate {
	coc.mutation.SetCreatedAt(t)
	return coc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableCreatedAt(t *time.Time) *ControlObjectiveCreate {
	if t != nil {
		coc.SetCreatedAt(*t)
	}
	return coc
}

// SetUpdatedAt sets the "updated_at" field.
func (coc *ControlObjectiveCreate) SetUpdatedAt(t time.Time) *ControlObjectiveCreate {
	coc.mutation.SetUpdatedAt(t)
	return coc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableUpdatedAt(t *time.Time) *ControlObjectiveCreate {
	if t != nil {
		coc.SetUpdatedAt(*t)
	}
	return coc
}

// SetCreatedBy sets the "created_by" field.
func (coc *ControlObjectiveCreate) SetCreatedBy(s string) *ControlObjectiveCreate {
	coc.mutation.SetCreatedBy(s)
	return coc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableCreatedBy(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetCreatedBy(*s)
	}
	return coc
}

// SetUpdatedBy sets the "updated_by" field.
func (coc *ControlObjectiveCreate) SetUpdatedBy(s string) *ControlObjectiveCreate {
	coc.mutation.SetUpdatedBy(s)
	return coc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableUpdatedBy(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetUpdatedBy(*s)
	}
	return coc
}

// SetDeletedAt sets the "deleted_at" field.
func (coc *ControlObjectiveCreate) SetDeletedAt(t time.Time) *ControlObjectiveCreate {
	coc.mutation.SetDeletedAt(t)
	return coc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableDeletedAt(t *time.Time) *ControlObjectiveCreate {
	if t != nil {
		coc.SetDeletedAt(*t)
	}
	return coc
}

// SetDeletedBy sets the "deleted_by" field.
func (coc *ControlObjectiveCreate) SetDeletedBy(s string) *ControlObjectiveCreate {
	coc.mutation.SetDeletedBy(s)
	return coc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableDeletedBy(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetDeletedBy(*s)
	}
	return coc
}

// SetRevision sets the "revision" field.
func (coc *ControlObjectiveCreate) SetRevision(s string) *ControlObjectiveCreate {
	coc.mutation.SetRevision(s)
	return coc
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableRevision(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetRevision(*s)
	}
	return coc
}

// SetDisplayID sets the "display_id" field.
func (coc *ControlObjectiveCreate) SetDisplayID(s string) *ControlObjectiveCreate {
	coc.mutation.SetDisplayID(s)
	return coc
}

// SetTags sets the "tags" field.
func (coc *ControlObjectiveCreate) SetTags(s []string) *ControlObjectiveCreate {
	coc.mutation.SetTags(s)
	return coc
}

// SetOwnerID sets the "owner_id" field.
func (coc *ControlObjectiveCreate) SetOwnerID(s string) *ControlObjectiveCreate {
	coc.mutation.SetOwnerID(s)
	return coc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableOwnerID(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetOwnerID(*s)
	}
	return coc
}

// SetName sets the "name" field.
func (coc *ControlObjectiveCreate) SetName(s string) *ControlObjectiveCreate {
	coc.mutation.SetName(s)
	return coc
}

// SetDesiredOutcome sets the "desired_outcome" field.
func (coc *ControlObjectiveCreate) SetDesiredOutcome(s string) *ControlObjectiveCreate {
	coc.mutation.SetDesiredOutcome(s)
	return coc
}

// SetNillableDesiredOutcome sets the "desired_outcome" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableDesiredOutcome(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetDesiredOutcome(*s)
	}
	return coc
}

// SetStatus sets the "status" field.
func (coc *ControlObjectiveCreate) SetStatus(s string) *ControlObjectiveCreate {
	coc.mutation.SetStatus(s)
	return coc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableStatus(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetStatus(*s)
	}
	return coc
}

// SetSource sets the "source" field.
func (coc *ControlObjectiveCreate) SetSource(es enums.ControlSource) *ControlObjectiveCreate {
	coc.mutation.SetSource(es)
	return coc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableSource(es *enums.ControlSource) *ControlObjectiveCreate {
	if es != nil {
		coc.SetSource(*es)
	}
	return coc
}

// SetControlObjectiveType sets the "control_objective_type" field.
func (coc *ControlObjectiveCreate) SetControlObjectiveType(s string) *ControlObjectiveCreate {
	coc.mutation.SetControlObjectiveType(s)
	return coc
}

// SetNillableControlObjectiveType sets the "control_objective_type" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableControlObjectiveType(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetControlObjectiveType(*s)
	}
	return coc
}

// SetCategory sets the "category" field.
func (coc *ControlObjectiveCreate) SetCategory(s string) *ControlObjectiveCreate {
	coc.mutation.SetCategory(s)
	return coc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableCategory(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetCategory(*s)
	}
	return coc
}

// SetSubcategory sets the "subcategory" field.
func (coc *ControlObjectiveCreate) SetSubcategory(s string) *ControlObjectiveCreate {
	coc.mutation.SetSubcategory(s)
	return coc
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableSubcategory(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetSubcategory(*s)
	}
	return coc
}

// SetID sets the "id" field.
func (coc *ControlObjectiveCreate) SetID(s string) *ControlObjectiveCreate {
	coc.mutation.SetID(s)
	return coc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (coc *ControlObjectiveCreate) SetNillableID(s *string) *ControlObjectiveCreate {
	if s != nil {
		coc.SetID(*s)
	}
	return coc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (coc *ControlObjectiveCreate) SetOwner(o *Organization) *ControlObjectiveCreate {
	return coc.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (coc *ControlObjectiveCreate) AddBlockedGroupIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddBlockedGroupIDs(ids...)
	return coc
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (coc *ControlObjectiveCreate) AddBlockedGroups(g ...*Group) *ControlObjectiveCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return coc.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (coc *ControlObjectiveCreate) AddEditorIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddEditorIDs(ids...)
	return coc
}

// AddEditors adds the "editors" edges to the Group entity.
func (coc *ControlObjectiveCreate) AddEditors(g ...*Group) *ControlObjectiveCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return coc.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (coc *ControlObjectiveCreate) AddViewerIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddViewerIDs(ids...)
	return coc
}

// AddViewers adds the "viewers" edges to the Group entity.
func (coc *ControlObjectiveCreate) AddViewers(g ...*Group) *ControlObjectiveCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return coc.AddViewerIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (coc *ControlObjectiveCreate) AddProgramIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddProgramIDs(ids...)
	return coc
}

// AddPrograms adds the "programs" edges to the Program entity.
func (coc *ControlObjectiveCreate) AddPrograms(p ...*Program) *ControlObjectiveCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return coc.AddProgramIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (coc *ControlObjectiveCreate) AddEvidenceIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddEvidenceIDs(ids...)
	return coc
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (coc *ControlObjectiveCreate) AddEvidence(e ...*Evidence) *ControlObjectiveCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return coc.AddEvidenceIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (coc *ControlObjectiveCreate) AddControlIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddControlIDs(ids...)
	return coc
}

// AddControls adds the "controls" edges to the Control entity.
func (coc *ControlObjectiveCreate) AddControls(c ...*Control) *ControlObjectiveCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return coc.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (coc *ControlObjectiveCreate) AddSubcontrolIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddSubcontrolIDs(ids...)
	return coc
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (coc *ControlObjectiveCreate) AddSubcontrols(s ...*Subcontrol) *ControlObjectiveCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return coc.AddSubcontrolIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (coc *ControlObjectiveCreate) AddInternalPolicyIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddInternalPolicyIDs(ids...)
	return coc
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (coc *ControlObjectiveCreate) AddInternalPolicies(i ...*InternalPolicy) *ControlObjectiveCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return coc.AddInternalPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (coc *ControlObjectiveCreate) AddProcedureIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddProcedureIDs(ids...)
	return coc
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (coc *ControlObjectiveCreate) AddProcedures(p ...*Procedure) *ControlObjectiveCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return coc.AddProcedureIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (coc *ControlObjectiveCreate) AddRiskIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddRiskIDs(ids...)
	return coc
}

// AddRisks adds the "risks" edges to the Risk entity.
func (coc *ControlObjectiveCreate) AddRisks(r ...*Risk) *ControlObjectiveCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return coc.AddRiskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (coc *ControlObjectiveCreate) AddNarrativeIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddNarrativeIDs(ids...)
	return coc
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (coc *ControlObjectiveCreate) AddNarratives(n ...*Narrative) *ControlObjectiveCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return coc.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (coc *ControlObjectiveCreate) AddTaskIDs(ids ...string) *ControlObjectiveCreate {
	coc.mutation.AddTaskIDs(ids...)
	return coc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (coc *ControlObjectiveCreate) AddTasks(t ...*Task) *ControlObjectiveCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return coc.AddTaskIDs(ids...)
}

// Mutation returns the ControlObjectiveMutation object of the builder.
func (coc *ControlObjectiveCreate) Mutation() *ControlObjectiveMutation {
	return coc.mutation
}

// Save creates the ControlObjective in the database.
func (coc *ControlObjectiveCreate) Save(ctx context.Context) (*ControlObjective, error) {
	if err := coc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, coc.sqlSave, coc.mutation, coc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (coc *ControlObjectiveCreate) SaveX(ctx context.Context) *ControlObjective {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *ControlObjectiveCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *ControlObjectiveCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (coc *ControlObjectiveCreate) defaults() error {
	if _, ok := coc.mutation.CreatedAt(); !ok {
		if controlobjective.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlobjective.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := controlobjective.DefaultCreatedAt()
		coc.mutation.SetCreatedAt(v)
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		if controlobjective.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlobjective.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlobjective.DefaultUpdatedAt()
		coc.mutation.SetUpdatedAt(v)
	}
	if _, ok := coc.mutation.Revision(); !ok {
		v := controlobjective.DefaultRevision
		coc.mutation.SetRevision(v)
	}
	if _, ok := coc.mutation.Tags(); !ok {
		v := controlobjective.DefaultTags
		coc.mutation.SetTags(v)
	}
	if _, ok := coc.mutation.Source(); !ok {
		v := controlobjective.DefaultSource
		coc.mutation.SetSource(v)
	}
	if _, ok := coc.mutation.ID(); !ok {
		if controlobjective.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized controlobjective.DefaultID (forgotten import generated/runtime?)")
		}
		v := controlobjective.DefaultID()
		coc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (coc *ControlObjectiveCreate) check() error {
	if v, ok := coc.mutation.Revision(); ok {
		if err := controlobjective.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "ControlObjective.revision": %w`, err)}
		}
	}
	if _, ok := coc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "ControlObjective.display_id"`)}
	}
	if v, ok := coc.mutation.DisplayID(); ok {
		if err := controlobjective.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "ControlObjective.display_id": %w`, err)}
		}
	}
	if v, ok := coc.mutation.OwnerID(); ok {
		if err := controlobjective.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ControlObjective.owner_id": %w`, err)}
		}
	}
	if _, ok := coc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ControlObjective.name"`)}
	}
	if v, ok := coc.mutation.Name(); ok {
		if err := controlobjective.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ControlObjective.name": %w`, err)}
		}
	}
	if v, ok := coc.mutation.Source(); ok {
		if err := controlobjective.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "ControlObjective.source": %w`, err)}
		}
	}
	return nil
}

func (coc *ControlObjectiveCreate) sqlSave(ctx context.Context) (*ControlObjective, error) {
	if err := coc.check(); err != nil {
		return nil, err
	}
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ControlObjective.ID type: %T", _spec.ID.Value)
		}
	}
	coc.mutation.id = &_node.ID
	coc.mutation.done = true
	return _node, nil
}

func (coc *ControlObjectiveCreate) createSpec() (*ControlObjective, *sqlgraph.CreateSpec) {
	var (
		_node = &ControlObjective{config: coc.config}
		_spec = sqlgraph.NewCreateSpec(controlobjective.Table, sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString))
	)
	_spec.Schema = coc.schemaConfig.ControlObjective
	if id, ok := coc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := coc.mutation.CreatedAt(); ok {
		_spec.SetField(controlobjective.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := coc.mutation.UpdatedAt(); ok {
		_spec.SetField(controlobjective.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := coc.mutation.CreatedBy(); ok {
		_spec.SetField(controlobjective.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := coc.mutation.UpdatedBy(); ok {
		_spec.SetField(controlobjective.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := coc.mutation.DeletedAt(); ok {
		_spec.SetField(controlobjective.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := coc.mutation.DeletedBy(); ok {
		_spec.SetField(controlobjective.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := coc.mutation.Revision(); ok {
		_spec.SetField(controlobjective.FieldRevision, field.TypeString, value)
		_node.Revision = value
	}
	if value, ok := coc.mutation.DisplayID(); ok {
		_spec.SetField(controlobjective.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := coc.mutation.Tags(); ok {
		_spec.SetField(controlobjective.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := coc.mutation.Name(); ok {
		_spec.SetField(controlobjective.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := coc.mutation.DesiredOutcome(); ok {
		_spec.SetField(controlobjective.FieldDesiredOutcome, field.TypeString, value)
		_node.DesiredOutcome = value
	}
	if value, ok := coc.mutation.Status(); ok {
		_spec.SetField(controlobjective.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := coc.mutation.Source(); ok {
		_spec.SetField(controlobjective.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := coc.mutation.ControlObjectiveType(); ok {
		_spec.SetField(controlobjective.FieldControlObjectiveType, field.TypeString, value)
		_node.ControlObjectiveType = value
	}
	if value, ok := coc.mutation.Category(); ok {
		_spec.SetField(controlobjective.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := coc.mutation.Subcategory(); ok {
		_spec.SetField(controlobjective.FieldSubcategory, field.TypeString, value)
		_node.Subcategory = value
	}
	if nodes := coc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlobjective.OwnerTable,
			Columns: []string{controlobjective.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.BlockedGroupsTable,
			Columns: controlobjective.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.ControlObjectiveBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.EditorsTable,
			Columns: controlobjective.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.ControlObjectiveEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.ViewersTable,
			Columns: controlobjective.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.ControlObjectiveViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ProgramsTable,
			Columns: controlobjective.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.ProgramControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.EvidenceTable,
			Columns: controlobjective.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.EvidenceControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ControlsTable,
			Columns: controlobjective.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.ControlControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.SubcontrolsTable,
			Columns: controlobjective.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.InternalPoliciesTable,
			Columns: controlobjective.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.InternalPolicyControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ProceduresTable,
			Columns: []string{controlobjective.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.RisksTable,
			Columns: []string{controlobjective.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.NarrativesTable,
			Columns: []string{controlobjective.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.TasksTable,
			Columns: controlobjective.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = coc.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ControlObjectiveCreateBulk is the builder for creating many ControlObjective entities in bulk.
type ControlObjectiveCreateBulk struct {
	config
	err      error
	builders []*ControlObjectiveCreate
}

// Save creates the ControlObjective entities in the database.
func (cocb *ControlObjectiveCreateBulk) Save(ctx context.Context) ([]*ControlObjective, error) {
	if cocb.err != nil {
		return nil, cocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*ControlObjective, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ControlObjectiveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *ControlObjectiveCreateBulk) SaveX(ctx context.Context) []*ControlObjective {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *ControlObjectiveCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *ControlObjectiveCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}
