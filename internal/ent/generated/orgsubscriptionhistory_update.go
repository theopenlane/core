// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscriptionhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgSubscriptionHistoryUpdate is the builder for updating OrgSubscriptionHistory entities.
type OrgSubscriptionHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgSubscriptionHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgSubscriptionHistoryUpdate builder.
func (_u *OrgSubscriptionHistoryUpdate) Where(ps ...predicate.OrgSubscriptionHistory) *OrgSubscriptionHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrgSubscriptionHistoryUpdate) SetUpdatedAt(v time.Time) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearUpdatedAt() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *OrgSubscriptionHistoryUpdate) SetUpdatedBy(v string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableUpdatedBy(v *string) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearUpdatedBy() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrgSubscriptionHistoryUpdate) SetDeletedAt(v time.Time) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableDeletedAt(v *time.Time) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearDeletedAt() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OrgSubscriptionHistoryUpdate) SetDeletedBy(v string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableDeletedBy(v *string) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearDeletedBy() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *OrgSubscriptionHistoryUpdate) SetTags(v []string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *OrgSubscriptionHistoryUpdate) AppendTags(v []string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearTags() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *OrgSubscriptionHistoryUpdate) SetOwnerID(v string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableOwnerID(v *string) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearOwnerID() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (_u *OrgSubscriptionHistoryUpdate) SetStripeSubscriptionID(v string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetStripeSubscriptionID(v)
	return _u
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableStripeSubscriptionID(v *string) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetStripeSubscriptionID(*v)
	}
	return _u
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearStripeSubscriptionID() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearStripeSubscriptionID()
	return _u
}

// SetProductPrice sets the "product_price" field.
func (_u *OrgSubscriptionHistoryUpdate) SetProductPrice(v models.Price) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetProductPrice(v)
	return _u
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableProductPrice(v *models.Price) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetProductPrice(*v)
	}
	return _u
}

// ClearProductPrice clears the value of the "product_price" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearProductPrice() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearProductPrice()
	return _u
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (_u *OrgSubscriptionHistoryUpdate) SetStripeSubscriptionStatus(v string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetStripeSubscriptionStatus(v)
	return _u
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableStripeSubscriptionStatus(v *string) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetStripeSubscriptionStatus(*v)
	}
	return _u
}

// ClearStripeSubscriptionStatus clears the value of the "stripe_subscription_status" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearStripeSubscriptionStatus() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearStripeSubscriptionStatus()
	return _u
}

// SetActive sets the "active" field.
func (_u *OrgSubscriptionHistoryUpdate) SetActive(v bool) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableActive(v *bool) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OrgSubscriptionHistoryUpdate) SetExpiresAt(v time.Time) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableExpiresAt(v *time.Time) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearExpiresAt() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (_u *OrgSubscriptionHistoryUpdate) SetTrialExpiresAt(v time.Time) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetTrialExpiresAt(v)
	return _u
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableTrialExpiresAt(v *time.Time) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetTrialExpiresAt(*v)
	}
	return _u
}

// ClearTrialExpiresAt clears the value of the "trial_expires_at" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearTrialExpiresAt() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearTrialExpiresAt()
	return _u
}

// SetDaysUntilDue sets the "days_until_due" field.
func (_u *OrgSubscriptionHistoryUpdate) SetDaysUntilDue(v string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetDaysUntilDue(v)
	return _u
}

// SetNillableDaysUntilDue sets the "days_until_due" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdate) SetNillableDaysUntilDue(v *string) *OrgSubscriptionHistoryUpdate {
	if v != nil {
		_u.SetDaysUntilDue(*v)
	}
	return _u
}

// ClearDaysUntilDue clears the value of the "days_until_due" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearDaysUntilDue() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearDaysUntilDue()
	return _u
}

// SetFeatures sets the "features" field.
func (_u *OrgSubscriptionHistoryUpdate) SetFeatures(v []string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetFeatures(v)
	return _u
}

// AppendFeatures appends value to the "features" field.
func (_u *OrgSubscriptionHistoryUpdate) AppendFeatures(v []string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.AppendFeatures(v)
	return _u
}

// ClearFeatures clears the value of the "features" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearFeatures() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearFeatures()
	return _u
}

// SetFeatureLookupKeys sets the "feature_lookup_keys" field.
func (_u *OrgSubscriptionHistoryUpdate) SetFeatureLookupKeys(v []string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.SetFeatureLookupKeys(v)
	return _u
}

// AppendFeatureLookupKeys appends value to the "feature_lookup_keys" field.
func (_u *OrgSubscriptionHistoryUpdate) AppendFeatureLookupKeys(v []string) *OrgSubscriptionHistoryUpdate {
	_u.mutation.AppendFeatureLookupKeys(v)
	return _u
}

// ClearFeatureLookupKeys clears the value of the "feature_lookup_keys" field.
func (_u *OrgSubscriptionHistoryUpdate) ClearFeatureLookupKeys() *OrgSubscriptionHistoryUpdate {
	_u.mutation.ClearFeatureLookupKeys()
	return _u
}

// Mutation returns the OrgSubscriptionHistoryMutation object of the builder.
func (_u *OrgSubscriptionHistoryUpdate) Mutation() *OrgSubscriptionHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrgSubscriptionHistoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrgSubscriptionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrgSubscriptionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrgSubscriptionHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrgSubscriptionHistoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orgsubscriptionhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OrgSubscriptionHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgSubscriptionHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OrgSubscriptionHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orgsubscriptionhistory.Table, orgsubscriptionhistory.Columns, sqlgraph.NewFieldSpec(orgsubscriptionhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if _u.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := _u.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON, value)
	}
	if _u.mutation.ProductPriceCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON)
	}
	if value, ok := _u.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString, value)
	}
	if _u.mutation.StripeSubscriptionStatusCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.TrialExpiresAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DaysUntilDue(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString, value)
	}
	if _u.mutation.DaysUntilDueCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString)
	}
	if value, ok := _u.mutation.Features(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldFeatures, value)
		})
	}
	if _u.mutation.FeaturesCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON)
	}
	if value, ok := _u.mutation.FeatureLookupKeys(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeatureLookupKeys(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldFeatureLookupKeys, value)
		})
	}
	if _u.mutation.FeatureLookupKeysCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON)
	}
	_spec.Node.Schema = _u.schemaConfig.OrgSubscriptionHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgsubscriptionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrgSubscriptionHistoryUpdateOne is the builder for updating a single OrgSubscriptionHistory entity.
type OrgSubscriptionHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgSubscriptionHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetUpdatedAt(v time.Time) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearUpdatedAt() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetUpdatedBy(v string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableUpdatedBy(v *string) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearUpdatedBy() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetDeletedAt(v time.Time) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearDeletedAt() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetDeletedBy(v string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableDeletedBy(v *string) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearDeletedBy() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetTags(v []string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *OrgSubscriptionHistoryUpdateOne) AppendTags(v []string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearTags() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetOwnerID(v string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableOwnerID(v *string) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearOwnerID() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetStripeSubscriptionID(v string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetStripeSubscriptionID(v)
	return _u
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableStripeSubscriptionID(v *string) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetStripeSubscriptionID(*v)
	}
	return _u
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearStripeSubscriptionID() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearStripeSubscriptionID()
	return _u
}

// SetProductPrice sets the "product_price" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetProductPrice(v models.Price) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetProductPrice(v)
	return _u
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableProductPrice(v *models.Price) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetProductPrice(*v)
	}
	return _u
}

// ClearProductPrice clears the value of the "product_price" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearProductPrice() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearProductPrice()
	return _u
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetStripeSubscriptionStatus(v string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetStripeSubscriptionStatus(v)
	return _u
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableStripeSubscriptionStatus(v *string) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetStripeSubscriptionStatus(*v)
	}
	return _u
}

// ClearStripeSubscriptionStatus clears the value of the "stripe_subscription_status" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearStripeSubscriptionStatus() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearStripeSubscriptionStatus()
	return _u
}

// SetActive sets the "active" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetActive(v bool) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableActive(v *bool) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetExpiresAt(v time.Time) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableExpiresAt(v *time.Time) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearExpiresAt() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetTrialExpiresAt(v time.Time) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetTrialExpiresAt(v)
	return _u
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableTrialExpiresAt(v *time.Time) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetTrialExpiresAt(*v)
	}
	return _u
}

// ClearTrialExpiresAt clears the value of the "trial_expires_at" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearTrialExpiresAt() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearTrialExpiresAt()
	return _u
}

// SetDaysUntilDue sets the "days_until_due" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetDaysUntilDue(v string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetDaysUntilDue(v)
	return _u
}

// SetNillableDaysUntilDue sets the "days_until_due" field if the given value is not nil.
func (_u *OrgSubscriptionHistoryUpdateOne) SetNillableDaysUntilDue(v *string) *OrgSubscriptionHistoryUpdateOne {
	if v != nil {
		_u.SetDaysUntilDue(*v)
	}
	return _u
}

// ClearDaysUntilDue clears the value of the "days_until_due" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearDaysUntilDue() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearDaysUntilDue()
	return _u
}

// SetFeatures sets the "features" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetFeatures(v []string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetFeatures(v)
	return _u
}

// AppendFeatures appends value to the "features" field.
func (_u *OrgSubscriptionHistoryUpdateOne) AppendFeatures(v []string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.AppendFeatures(v)
	return _u
}

// ClearFeatures clears the value of the "features" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearFeatures() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearFeatures()
	return _u
}

// SetFeatureLookupKeys sets the "feature_lookup_keys" field.
func (_u *OrgSubscriptionHistoryUpdateOne) SetFeatureLookupKeys(v []string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.SetFeatureLookupKeys(v)
	return _u
}

// AppendFeatureLookupKeys appends value to the "feature_lookup_keys" field.
func (_u *OrgSubscriptionHistoryUpdateOne) AppendFeatureLookupKeys(v []string) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.AppendFeatureLookupKeys(v)
	return _u
}

// ClearFeatureLookupKeys clears the value of the "feature_lookup_keys" field.
func (_u *OrgSubscriptionHistoryUpdateOne) ClearFeatureLookupKeys() *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.ClearFeatureLookupKeys()
	return _u
}

// Mutation returns the OrgSubscriptionHistoryMutation object of the builder.
func (_u *OrgSubscriptionHistoryUpdateOne) Mutation() *OrgSubscriptionHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the OrgSubscriptionHistoryUpdate builder.
func (_u *OrgSubscriptionHistoryUpdateOne) Where(ps ...predicate.OrgSubscriptionHistory) *OrgSubscriptionHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrgSubscriptionHistoryUpdateOne) Select(field string, fields ...string) *OrgSubscriptionHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrgSubscriptionHistory entity.
func (_u *OrgSubscriptionHistoryUpdateOne) Save(ctx context.Context) (*OrgSubscriptionHistory, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrgSubscriptionHistoryUpdateOne) SaveX(ctx context.Context) *OrgSubscriptionHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrgSubscriptionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrgSubscriptionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrgSubscriptionHistoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orgsubscriptionhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OrgSubscriptionHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgSubscriptionHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OrgSubscriptionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *OrgSubscriptionHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(orgsubscriptionhistory.Table, orgsubscriptionhistory.Columns, sqlgraph.NewFieldSpec(orgsubscriptionhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrgSubscriptionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgsubscriptionhistory.FieldID)
		for _, f := range fields {
			if !orgsubscriptionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orgsubscriptionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if _u.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := _u.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON, value)
	}
	if _u.mutation.ProductPriceCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON)
	}
	if value, ok := _u.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString, value)
	}
	if _u.mutation.StripeSubscriptionStatusCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.TrialExpiresAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DaysUntilDue(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString, value)
	}
	if _u.mutation.DaysUntilDueCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString)
	}
	if value, ok := _u.mutation.Features(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldFeatures, value)
		})
	}
	if _u.mutation.FeaturesCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON)
	}
	if value, ok := _u.mutation.FeatureLookupKeys(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeatureLookupKeys(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldFeatureLookupKeys, value)
		})
	}
	if _u.mutation.FeatureLookupKeysCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON)
	}
	_spec.Node.Schema = _u.schemaConfig.OrgSubscriptionHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &OrgSubscriptionHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgsubscriptionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
