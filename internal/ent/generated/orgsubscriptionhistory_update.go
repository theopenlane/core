// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscriptionhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgSubscriptionHistoryUpdate is the builder for updating OrgSubscriptionHistory entities.
type OrgSubscriptionHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgSubscriptionHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgSubscriptionHistoryUpdate builder.
func (oshu *OrgSubscriptionHistoryUpdate) Where(ps ...predicate.OrgSubscriptionHistory) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.Where(ps...)
	return oshu
}

// SetUpdatedAt sets the "updated_at" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetUpdatedAt(t time.Time) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetUpdatedAt(t)
	return oshu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearUpdatedAt() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearUpdatedAt()
	return oshu
}

// SetUpdatedBy sets the "updated_by" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetUpdatedBy(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetUpdatedBy(s)
	return oshu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableUpdatedBy(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetUpdatedBy(*s)
	}
	return oshu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearUpdatedBy() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearUpdatedBy()
	return oshu
}

// SetDeletedAt sets the "deleted_at" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetDeletedAt(t time.Time) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetDeletedAt(t)
	return oshu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableDeletedAt(t *time.Time) *OrgSubscriptionHistoryUpdate {
	if t != nil {
		oshu.SetDeletedAt(*t)
	}
	return oshu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearDeletedAt() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearDeletedAt()
	return oshu
}

// SetDeletedBy sets the "deleted_by" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetDeletedBy(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetDeletedBy(s)
	return oshu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableDeletedBy(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetDeletedBy(*s)
	}
	return oshu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearDeletedBy() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearDeletedBy()
	return oshu
}

// SetTags sets the "tags" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetTags(s []string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetTags(s)
	return oshu
}

// AppendTags appends s to the "tags" field.
func (oshu *OrgSubscriptionHistoryUpdate) AppendTags(s []string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.AppendTags(s)
	return oshu
}

// ClearTags clears the value of the "tags" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearTags() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearTags()
	return oshu
}

// SetOwnerID sets the "owner_id" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetOwnerID(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetOwnerID(s)
	return oshu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableOwnerID(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetOwnerID(*s)
	}
	return oshu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearOwnerID() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearOwnerID()
	return oshu
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetStripeSubscriptionID(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetStripeSubscriptionID(s)
	return oshu
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableStripeSubscriptionID(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetStripeSubscriptionID(*s)
	}
	return oshu
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearStripeSubscriptionID() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearStripeSubscriptionID()
	return oshu
}

// SetProductTier sets the "product_tier" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetProductTier(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetProductTier(s)
	return oshu
}

// SetNillableProductTier sets the "product_tier" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableProductTier(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetProductTier(*s)
	}
	return oshu
}

// ClearProductTier clears the value of the "product_tier" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearProductTier() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearProductTier()
	return oshu
}

// SetProductPrice sets the "product_price" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetProductPrice(m models.Price) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetProductPrice(m)
	return oshu
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableProductPrice(m *models.Price) *OrgSubscriptionHistoryUpdate {
	if m != nil {
		oshu.SetProductPrice(*m)
	}
	return oshu
}

// ClearProductPrice clears the value of the "product_price" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearProductPrice() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearProductPrice()
	return oshu
}

// SetStripeProductTierID sets the "stripe_product_tier_id" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetStripeProductTierID(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetStripeProductTierID(s)
	return oshu
}

// SetNillableStripeProductTierID sets the "stripe_product_tier_id" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableStripeProductTierID(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetStripeProductTierID(*s)
	}
	return oshu
}

// ClearStripeProductTierID clears the value of the "stripe_product_tier_id" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearStripeProductTierID() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearStripeProductTierID()
	return oshu
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetStripeSubscriptionStatus(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetStripeSubscriptionStatus(s)
	return oshu
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableStripeSubscriptionStatus(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetStripeSubscriptionStatus(*s)
	}
	return oshu
}

// ClearStripeSubscriptionStatus clears the value of the "stripe_subscription_status" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearStripeSubscriptionStatus() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearStripeSubscriptionStatus()
	return oshu
}

// SetActive sets the "active" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetActive(b bool) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetActive(b)
	return oshu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableActive(b *bool) *OrgSubscriptionHistoryUpdate {
	if b != nil {
		oshu.SetActive(*b)
	}
	return oshu
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetStripeCustomerID(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetStripeCustomerID(s)
	return oshu
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableStripeCustomerID(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetStripeCustomerID(*s)
	}
	return oshu
}

// ClearStripeCustomerID clears the value of the "stripe_customer_id" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearStripeCustomerID() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearStripeCustomerID()
	return oshu
}

// SetExpiresAt sets the "expires_at" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetExpiresAt(t time.Time) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetExpiresAt(t)
	return oshu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableExpiresAt(t *time.Time) *OrgSubscriptionHistoryUpdate {
	if t != nil {
		oshu.SetExpiresAt(*t)
	}
	return oshu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearExpiresAt() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearExpiresAt()
	return oshu
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetTrialExpiresAt(t time.Time) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetTrialExpiresAt(t)
	return oshu
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableTrialExpiresAt(t *time.Time) *OrgSubscriptionHistoryUpdate {
	if t != nil {
		oshu.SetTrialExpiresAt(*t)
	}
	return oshu
}

// ClearTrialExpiresAt clears the value of the "trial_expires_at" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearTrialExpiresAt() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearTrialExpiresAt()
	return oshu
}

// SetDaysUntilDue sets the "days_until_due" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetDaysUntilDue(s string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetDaysUntilDue(s)
	return oshu
}

// SetNillableDaysUntilDue sets the "days_until_due" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillableDaysUntilDue(s *string) *OrgSubscriptionHistoryUpdate {
	if s != nil {
		oshu.SetDaysUntilDue(*s)
	}
	return oshu
}

// ClearDaysUntilDue clears the value of the "days_until_due" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearDaysUntilDue() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearDaysUntilDue()
	return oshu
}

// SetPaymentMethodAdded sets the "payment_method_added" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetPaymentMethodAdded(b bool) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetPaymentMethodAdded(b)
	return oshu
}

// SetNillablePaymentMethodAdded sets the "payment_method_added" field if the given value is not nil.
func (oshu *OrgSubscriptionHistoryUpdate) SetNillablePaymentMethodAdded(b *bool) *OrgSubscriptionHistoryUpdate {
	if b != nil {
		oshu.SetPaymentMethodAdded(*b)
	}
	return oshu
}

// ClearPaymentMethodAdded clears the value of the "payment_method_added" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearPaymentMethodAdded() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearPaymentMethodAdded()
	return oshu
}

// SetFeatures sets the "features" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetFeatures(s []string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetFeatures(s)
	return oshu
}

// AppendFeatures appends s to the "features" field.
func (oshu *OrgSubscriptionHistoryUpdate) AppendFeatures(s []string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.AppendFeatures(s)
	return oshu
}

// ClearFeatures clears the value of the "features" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearFeatures() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearFeatures()
	return oshu
}

// SetFeatureLookupKeys sets the "feature_lookup_keys" field.
func (oshu *OrgSubscriptionHistoryUpdate) SetFeatureLookupKeys(s []string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.SetFeatureLookupKeys(s)
	return oshu
}

// AppendFeatureLookupKeys appends s to the "feature_lookup_keys" field.
func (oshu *OrgSubscriptionHistoryUpdate) AppendFeatureLookupKeys(s []string) *OrgSubscriptionHistoryUpdate {
	oshu.mutation.AppendFeatureLookupKeys(s)
	return oshu
}

// ClearFeatureLookupKeys clears the value of the "feature_lookup_keys" field.
func (oshu *OrgSubscriptionHistoryUpdate) ClearFeatureLookupKeys() *OrgSubscriptionHistoryUpdate {
	oshu.mutation.ClearFeatureLookupKeys()
	return oshu
}

// Mutation returns the OrgSubscriptionHistoryMutation object of the builder.
func (oshu *OrgSubscriptionHistoryUpdate) Mutation() *OrgSubscriptionHistoryMutation {
	return oshu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oshu *OrgSubscriptionHistoryUpdate) Save(ctx context.Context) (int, error) {
	oshu.defaults()
	return withHooks(ctx, oshu.sqlSave, oshu.mutation, oshu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oshu *OrgSubscriptionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := oshu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oshu *OrgSubscriptionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := oshu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshu *OrgSubscriptionHistoryUpdate) ExecX(ctx context.Context) {
	if err := oshu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oshu *OrgSubscriptionHistoryUpdate) defaults() {
	if _, ok := oshu.mutation.UpdatedAt(); !ok && !oshu.mutation.UpdatedAtCleared() {
		v := orgsubscriptionhistory.UpdateDefaultUpdatedAt()
		oshu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oshu *OrgSubscriptionHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgSubscriptionHistoryUpdate {
	oshu.modifiers = append(oshu.modifiers, modifiers...)
	return oshu
}

func (oshu *OrgSubscriptionHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orgsubscriptionhistory.Table, orgsubscriptionhistory.Columns, sqlgraph.NewFieldSpec(orgsubscriptionhistory.FieldID, field.TypeString))
	if ps := oshu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oshu.mutation.RefCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldRef, field.TypeString)
	}
	if oshu.mutation.CreatedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := oshu.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if oshu.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime)
	}
	if oshu.mutation.CreatedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := oshu.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if oshu.mutation.UpdatedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := oshu.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if oshu.mutation.DeletedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oshu.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString, value)
	}
	if oshu.mutation.DeletedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := oshu.mutation.Tags(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := oshu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldTags, value)
		})
	}
	if oshu.mutation.TagsCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := oshu.mutation.OwnerID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldOwnerID, field.TypeString, value)
	}
	if oshu.mutation.OwnerIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := oshu.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if oshu.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := oshu.mutation.ProductTier(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldProductTier, field.TypeString, value)
	}
	if oshu.mutation.ProductTierCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldProductTier, field.TypeString)
	}
	if value, ok := oshu.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON, value)
	}
	if oshu.mutation.ProductPriceCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON)
	}
	if value, ok := oshu.mutation.StripeProductTierID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeProductTierID, field.TypeString, value)
	}
	if oshu.mutation.StripeProductTierIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeProductTierID, field.TypeString)
	}
	if value, ok := oshu.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString, value)
	}
	if oshu.mutation.StripeSubscriptionStatusCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString)
	}
	if value, ok := oshu.mutation.Active(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldActive, field.TypeBool, value)
	}
	if value, ok := oshu.mutation.StripeCustomerID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeCustomerID, field.TypeString, value)
	}
	if oshu.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeCustomerID, field.TypeString)
	}
	if value, ok := oshu.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime, value)
	}
	if oshu.mutation.ExpiresAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := oshu.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime, value)
	}
	if oshu.mutation.TrialExpiresAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime)
	}
	if value, ok := oshu.mutation.DaysUntilDue(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString, value)
	}
	if oshu.mutation.DaysUntilDueCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString)
	}
	if value, ok := oshu.mutation.PaymentMethodAdded(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldPaymentMethodAdded, field.TypeBool, value)
	}
	if oshu.mutation.PaymentMethodAddedCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldPaymentMethodAdded, field.TypeBool)
	}
	if value, ok := oshu.mutation.Features(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := oshu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldFeatures, value)
		})
	}
	if oshu.mutation.FeaturesCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON)
	}
	if value, ok := oshu.mutation.FeatureLookupKeys(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON, value)
	}
	if value, ok := oshu.mutation.AppendedFeatureLookupKeys(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldFeatureLookupKeys, value)
		})
	}
	if oshu.mutation.FeatureLookupKeysCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON)
	}
	_spec.Node.Schema = oshu.schemaConfig.OrgSubscriptionHistory
	ctx = internal.NewSchemaConfigContext(ctx, oshu.schemaConfig)
	_spec.AddModifiers(oshu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oshu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgsubscriptionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oshu.mutation.done = true
	return n, nil
}

// OrgSubscriptionHistoryUpdateOne is the builder for updating a single OrgSubscriptionHistory entity.
type OrgSubscriptionHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgSubscriptionHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetUpdatedAt(t time.Time) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetUpdatedAt(t)
	return oshuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearUpdatedAt() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearUpdatedAt()
	return oshuo
}

// SetUpdatedBy sets the "updated_by" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetUpdatedBy(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetUpdatedBy(s)
	return oshuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableUpdatedBy(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetUpdatedBy(*s)
	}
	return oshuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearUpdatedBy() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearUpdatedBy()
	return oshuo
}

// SetDeletedAt sets the "deleted_at" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetDeletedAt(t time.Time) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetDeletedAt(t)
	return oshuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgSubscriptionHistoryUpdateOne {
	if t != nil {
		oshuo.SetDeletedAt(*t)
	}
	return oshuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearDeletedAt() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearDeletedAt()
	return oshuo
}

// SetDeletedBy sets the "deleted_by" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetDeletedBy(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetDeletedBy(s)
	return oshuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableDeletedBy(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetDeletedBy(*s)
	}
	return oshuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearDeletedBy() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearDeletedBy()
	return oshuo
}

// SetTags sets the "tags" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetTags(s []string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetTags(s)
	return oshuo
}

// AppendTags appends s to the "tags" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) AppendTags(s []string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.AppendTags(s)
	return oshuo
}

// ClearTags clears the value of the "tags" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearTags() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearTags()
	return oshuo
}

// SetOwnerID sets the "owner_id" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetOwnerID(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetOwnerID(s)
	return oshuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableOwnerID(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetOwnerID(*s)
	}
	return oshuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearOwnerID() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearOwnerID()
	return oshuo
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetStripeSubscriptionID(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetStripeSubscriptionID(s)
	return oshuo
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableStripeSubscriptionID(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetStripeSubscriptionID(*s)
	}
	return oshuo
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearStripeSubscriptionID() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearStripeSubscriptionID()
	return oshuo
}

// SetProductTier sets the "product_tier" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetProductTier(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetProductTier(s)
	return oshuo
}

// SetNillableProductTier sets the "product_tier" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableProductTier(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetProductTier(*s)
	}
	return oshuo
}

// ClearProductTier clears the value of the "product_tier" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearProductTier() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearProductTier()
	return oshuo
}

// SetProductPrice sets the "product_price" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetProductPrice(m models.Price) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetProductPrice(m)
	return oshuo
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableProductPrice(m *models.Price) *OrgSubscriptionHistoryUpdateOne {
	if m != nil {
		oshuo.SetProductPrice(*m)
	}
	return oshuo
}

// ClearProductPrice clears the value of the "product_price" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearProductPrice() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearProductPrice()
	return oshuo
}

// SetStripeProductTierID sets the "stripe_product_tier_id" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetStripeProductTierID(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetStripeProductTierID(s)
	return oshuo
}

// SetNillableStripeProductTierID sets the "stripe_product_tier_id" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableStripeProductTierID(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetStripeProductTierID(*s)
	}
	return oshuo
}

// ClearStripeProductTierID clears the value of the "stripe_product_tier_id" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearStripeProductTierID() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearStripeProductTierID()
	return oshuo
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetStripeSubscriptionStatus(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetStripeSubscriptionStatus(s)
	return oshuo
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableStripeSubscriptionStatus(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetStripeSubscriptionStatus(*s)
	}
	return oshuo
}

// ClearStripeSubscriptionStatus clears the value of the "stripe_subscription_status" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearStripeSubscriptionStatus() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearStripeSubscriptionStatus()
	return oshuo
}

// SetActive sets the "active" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetActive(b bool) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetActive(b)
	return oshuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableActive(b *bool) *OrgSubscriptionHistoryUpdateOne {
	if b != nil {
		oshuo.SetActive(*b)
	}
	return oshuo
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetStripeCustomerID(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetStripeCustomerID(s)
	return oshuo
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableStripeCustomerID(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetStripeCustomerID(*s)
	}
	return oshuo
}

// ClearStripeCustomerID clears the value of the "stripe_customer_id" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearStripeCustomerID() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearStripeCustomerID()
	return oshuo
}

// SetExpiresAt sets the "expires_at" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetExpiresAt(t time.Time) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetExpiresAt(t)
	return oshuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableExpiresAt(t *time.Time) *OrgSubscriptionHistoryUpdateOne {
	if t != nil {
		oshuo.SetExpiresAt(*t)
	}
	return oshuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearExpiresAt() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearExpiresAt()
	return oshuo
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetTrialExpiresAt(t time.Time) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetTrialExpiresAt(t)
	return oshuo
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableTrialExpiresAt(t *time.Time) *OrgSubscriptionHistoryUpdateOne {
	if t != nil {
		oshuo.SetTrialExpiresAt(*t)
	}
	return oshuo
}

// ClearTrialExpiresAt clears the value of the "trial_expires_at" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearTrialExpiresAt() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearTrialExpiresAt()
	return oshuo
}

// SetDaysUntilDue sets the "days_until_due" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetDaysUntilDue(s string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetDaysUntilDue(s)
	return oshuo
}

// SetNillableDaysUntilDue sets the "days_until_due" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillableDaysUntilDue(s *string) *OrgSubscriptionHistoryUpdateOne {
	if s != nil {
		oshuo.SetDaysUntilDue(*s)
	}
	return oshuo
}

// ClearDaysUntilDue clears the value of the "days_until_due" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearDaysUntilDue() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearDaysUntilDue()
	return oshuo
}

// SetPaymentMethodAdded sets the "payment_method_added" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetPaymentMethodAdded(b bool) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetPaymentMethodAdded(b)
	return oshuo
}

// SetNillablePaymentMethodAdded sets the "payment_method_added" field if the given value is not nil.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetNillablePaymentMethodAdded(b *bool) *OrgSubscriptionHistoryUpdateOne {
	if b != nil {
		oshuo.SetPaymentMethodAdded(*b)
	}
	return oshuo
}

// ClearPaymentMethodAdded clears the value of the "payment_method_added" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearPaymentMethodAdded() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearPaymentMethodAdded()
	return oshuo
}

// SetFeatures sets the "features" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetFeatures(s []string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetFeatures(s)
	return oshuo
}

// AppendFeatures appends s to the "features" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) AppendFeatures(s []string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.AppendFeatures(s)
	return oshuo
}

// ClearFeatures clears the value of the "features" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearFeatures() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearFeatures()
	return oshuo
}

// SetFeatureLookupKeys sets the "feature_lookup_keys" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SetFeatureLookupKeys(s []string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.SetFeatureLookupKeys(s)
	return oshuo
}

// AppendFeatureLookupKeys appends s to the "feature_lookup_keys" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) AppendFeatureLookupKeys(s []string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.AppendFeatureLookupKeys(s)
	return oshuo
}

// ClearFeatureLookupKeys clears the value of the "feature_lookup_keys" field.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ClearFeatureLookupKeys() *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.ClearFeatureLookupKeys()
	return oshuo
}

// Mutation returns the OrgSubscriptionHistoryMutation object of the builder.
func (oshuo *OrgSubscriptionHistoryUpdateOne) Mutation() *OrgSubscriptionHistoryMutation {
	return oshuo.mutation
}

// Where appends a list predicates to the OrgSubscriptionHistoryUpdate builder.
func (oshuo *OrgSubscriptionHistoryUpdateOne) Where(ps ...predicate.OrgSubscriptionHistory) *OrgSubscriptionHistoryUpdateOne {
	oshuo.mutation.Where(ps...)
	return oshuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oshuo *OrgSubscriptionHistoryUpdateOne) Select(field string, fields ...string) *OrgSubscriptionHistoryUpdateOne {
	oshuo.fields = append([]string{field}, fields...)
	return oshuo
}

// Save executes the query and returns the updated OrgSubscriptionHistory entity.
func (oshuo *OrgSubscriptionHistoryUpdateOne) Save(ctx context.Context) (*OrgSubscriptionHistory, error) {
	oshuo.defaults()
	return withHooks(ctx, oshuo.sqlSave, oshuo.mutation, oshuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oshuo *OrgSubscriptionHistoryUpdateOne) SaveX(ctx context.Context) *OrgSubscriptionHistory {
	node, err := oshuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oshuo *OrgSubscriptionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := oshuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshuo *OrgSubscriptionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := oshuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oshuo *OrgSubscriptionHistoryUpdateOne) defaults() {
	if _, ok := oshuo.mutation.UpdatedAt(); !ok && !oshuo.mutation.UpdatedAtCleared() {
		v := orgsubscriptionhistory.UpdateDefaultUpdatedAt()
		oshuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oshuo *OrgSubscriptionHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgSubscriptionHistoryUpdateOne {
	oshuo.modifiers = append(oshuo.modifiers, modifiers...)
	return oshuo
}

func (oshuo *OrgSubscriptionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *OrgSubscriptionHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(orgsubscriptionhistory.Table, orgsubscriptionhistory.Columns, sqlgraph.NewFieldSpec(orgsubscriptionhistory.FieldID, field.TypeString))
	id, ok := oshuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrgSubscriptionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oshuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgsubscriptionhistory.FieldID)
		for _, f := range fields {
			if !orgsubscriptionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orgsubscriptionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oshuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oshuo.mutation.RefCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldRef, field.TypeString)
	}
	if oshuo.mutation.CreatedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := oshuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if oshuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime)
	}
	if oshuo.mutation.CreatedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := oshuo.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if oshuo.mutation.UpdatedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := oshuo.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if oshuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oshuo.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString, value)
	}
	if oshuo.mutation.DeletedByCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := oshuo.mutation.Tags(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := oshuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldTags, value)
		})
	}
	if oshuo.mutation.TagsCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := oshuo.mutation.OwnerID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldOwnerID, field.TypeString, value)
	}
	if oshuo.mutation.OwnerIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := oshuo.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if oshuo.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := oshuo.mutation.ProductTier(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldProductTier, field.TypeString, value)
	}
	if oshuo.mutation.ProductTierCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldProductTier, field.TypeString)
	}
	if value, ok := oshuo.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON, value)
	}
	if oshuo.mutation.ProductPriceCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON)
	}
	if value, ok := oshuo.mutation.StripeProductTierID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeProductTierID, field.TypeString, value)
	}
	if oshuo.mutation.StripeProductTierIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeProductTierID, field.TypeString)
	}
	if value, ok := oshuo.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString, value)
	}
	if oshuo.mutation.StripeSubscriptionStatusCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString)
	}
	if value, ok := oshuo.mutation.Active(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldActive, field.TypeBool, value)
	}
	if value, ok := oshuo.mutation.StripeCustomerID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeCustomerID, field.TypeString, value)
	}
	if oshuo.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldStripeCustomerID, field.TypeString)
	}
	if value, ok := oshuo.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime, value)
	}
	if oshuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := oshuo.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime, value)
	}
	if oshuo.mutation.TrialExpiresAtCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime)
	}
	if value, ok := oshuo.mutation.DaysUntilDue(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString, value)
	}
	if oshuo.mutation.DaysUntilDueCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString)
	}
	if value, ok := oshuo.mutation.PaymentMethodAdded(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldPaymentMethodAdded, field.TypeBool, value)
	}
	if oshuo.mutation.PaymentMethodAddedCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldPaymentMethodAdded, field.TypeBool)
	}
	if value, ok := oshuo.mutation.Features(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := oshuo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldFeatures, value)
		})
	}
	if oshuo.mutation.FeaturesCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON)
	}
	if value, ok := oshuo.mutation.FeatureLookupKeys(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON, value)
	}
	if value, ok := oshuo.mutation.AppendedFeatureLookupKeys(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgsubscriptionhistory.FieldFeatureLookupKeys, value)
		})
	}
	if oshuo.mutation.FeatureLookupKeysCleared() {
		_spec.ClearField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON)
	}
	_spec.Node.Schema = oshuo.schemaConfig.OrgSubscriptionHistory
	ctx = internal.NewSchemaConfigContext(ctx, oshuo.schemaConfig)
	_spec.AddModifiers(oshuo.modifiers...)
	_node = &OrgSubscriptionHistory{config: oshuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oshuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgsubscriptionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oshuo.mutation.done = true
	return _node, nil
}
