// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgProductUpdate is the builder for updating OrgProduct entities.
type OrgProductUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgProductUpdate builder.
func (opu *OrgProductUpdate) Where(ps ...predicate.OrgProduct) *OrgProductUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetUpdatedAt sets the "updated_at" field.
func (opu *OrgProductUpdate) SetUpdatedAt(t time.Time) *OrgProductUpdate {
	opu.mutation.SetUpdatedAt(t)
	return opu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (opu *OrgProductUpdate) ClearUpdatedAt() *OrgProductUpdate {
	opu.mutation.ClearUpdatedAt()
	return opu
}

// SetUpdatedBy sets the "updated_by" field.
func (opu *OrgProductUpdate) SetUpdatedBy(s string) *OrgProductUpdate {
	opu.mutation.SetUpdatedBy(s)
	return opu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableUpdatedBy(s *string) *OrgProductUpdate {
	if s != nil {
		opu.SetUpdatedBy(*s)
	}
	return opu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (opu *OrgProductUpdate) ClearUpdatedBy() *OrgProductUpdate {
	opu.mutation.ClearUpdatedBy()
	return opu
}

// SetDeletedAt sets the "deleted_at" field.
func (opu *OrgProductUpdate) SetDeletedAt(t time.Time) *OrgProductUpdate {
	opu.mutation.SetDeletedAt(t)
	return opu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableDeletedAt(t *time.Time) *OrgProductUpdate {
	if t != nil {
		opu.SetDeletedAt(*t)
	}
	return opu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (opu *OrgProductUpdate) ClearDeletedAt() *OrgProductUpdate {
	opu.mutation.ClearDeletedAt()
	return opu
}

// SetDeletedBy sets the "deleted_by" field.
func (opu *OrgProductUpdate) SetDeletedBy(s string) *OrgProductUpdate {
	opu.mutation.SetDeletedBy(s)
	return opu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableDeletedBy(s *string) *OrgProductUpdate {
	if s != nil {
		opu.SetDeletedBy(*s)
	}
	return opu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (opu *OrgProductUpdate) ClearDeletedBy() *OrgProductUpdate {
	opu.mutation.ClearDeletedBy()
	return opu
}

// SetTags sets the "tags" field.
func (opu *OrgProductUpdate) SetTags(s []string) *OrgProductUpdate {
	opu.mutation.SetTags(s)
	return opu
}

// AppendTags appends s to the "tags" field.
func (opu *OrgProductUpdate) AppendTags(s []string) *OrgProductUpdate {
	opu.mutation.AppendTags(s)
	return opu
}

// ClearTags clears the value of the "tags" field.
func (opu *OrgProductUpdate) ClearTags() *OrgProductUpdate {
	opu.mutation.ClearTags()
	return opu
}

// SetOwnerID sets the "owner_id" field.
func (opu *OrgProductUpdate) SetOwnerID(s string) *OrgProductUpdate {
	opu.mutation.SetOwnerID(s)
	return opu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableOwnerID(s *string) *OrgProductUpdate {
	if s != nil {
		opu.SetOwnerID(*s)
	}
	return opu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (opu *OrgProductUpdate) ClearOwnerID() *OrgProductUpdate {
	opu.mutation.ClearOwnerID()
	return opu
}

// SetModule sets the "module" field.
func (opu *OrgProductUpdate) SetModule(s string) *OrgProductUpdate {
	opu.mutation.SetModule(s)
	return opu
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableModule(s *string) *OrgProductUpdate {
	if s != nil {
		opu.SetModule(*s)
	}
	return opu
}

// SetStripeProductID sets the "stripe_product_id" field.
func (opu *OrgProductUpdate) SetStripeProductID(s string) *OrgProductUpdate {
	opu.mutation.SetStripeProductID(s)
	return opu
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableStripeProductID(s *string) *OrgProductUpdate {
	if s != nil {
		opu.SetStripeProductID(*s)
	}
	return opu
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (opu *OrgProductUpdate) ClearStripeProductID() *OrgProductUpdate {
	opu.mutation.ClearStripeProductID()
	return opu
}

// SetStatus sets the "status" field.
func (opu *OrgProductUpdate) SetStatus(s string) *OrgProductUpdate {
	opu.mutation.SetStatus(s)
	return opu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableStatus(s *string) *OrgProductUpdate {
	if s != nil {
		opu.SetStatus(*s)
	}
	return opu
}

// ClearStatus clears the value of the "status" field.
func (opu *OrgProductUpdate) ClearStatus() *OrgProductUpdate {
	opu.mutation.ClearStatus()
	return opu
}

// SetActive sets the "active" field.
func (opu *OrgProductUpdate) SetActive(b bool) *OrgProductUpdate {
	opu.mutation.SetActive(b)
	return opu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableActive(b *bool) *OrgProductUpdate {
	if b != nil {
		opu.SetActive(*b)
	}
	return opu
}

// SetSubscriptionID sets the "subscription_id" field.
func (opu *OrgProductUpdate) SetSubscriptionID(s string) *OrgProductUpdate {
	opu.mutation.SetSubscriptionID(s)
	return opu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableSubscriptionID(s *string) *OrgProductUpdate {
	if s != nil {
		opu.SetSubscriptionID(*s)
	}
	return opu
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (opu *OrgProductUpdate) ClearSubscriptionID() *OrgProductUpdate {
	opu.mutation.ClearSubscriptionID()
	return opu
}

// SetPriceID sets the "price_id" field.
func (opu *OrgProductUpdate) SetPriceID(s string) *OrgProductUpdate {
	opu.mutation.SetPriceID(s)
	return opu
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (opu *OrgProductUpdate) SetNillablePriceID(s *string) *OrgProductUpdate {
	if s != nil {
		opu.SetPriceID(*s)
	}
	return opu
}

// ClearPriceID clears the value of the "price_id" field.
func (opu *OrgProductUpdate) ClearPriceID() *OrgProductUpdate {
	opu.mutation.ClearPriceID()
	return opu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (opu *OrgProductUpdate) SetOwner(o *Organization) *OrgProductUpdate {
	return opu.SetOwnerID(o.ID)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (opu *OrgProductUpdate) SetOrgSubscriptionID(id string) *OrgProductUpdate {
	opu.mutation.SetOrgSubscriptionID(id)
	return opu
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (opu *OrgProductUpdate) SetNillableOrgSubscriptionID(id *string) *OrgProductUpdate {
	if id != nil {
		opu = opu.SetOrgSubscriptionID(*id)
	}
	return opu
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (opu *OrgProductUpdate) SetOrgSubscription(o *OrgSubscription) *OrgProductUpdate {
	return opu.SetOrgSubscriptionID(o.ID)
}

// AddOrgPriceIDs adds the "org_prices" edge to the OrgPrice entity by IDs.
func (opu *OrgProductUpdate) AddOrgPriceIDs(ids ...string) *OrgProductUpdate {
	opu.mutation.AddOrgPriceIDs(ids...)
	return opu
}

// AddOrgPrices adds the "org_prices" edges to the OrgPrice entity.
func (opu *OrgProductUpdate) AddOrgPrices(o ...*OrgPrice) *OrgProductUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opu.AddOrgPriceIDs(ids...)
}

// AddOrgModuleIDs adds the "org_modules" edge to the OrgModule entity by IDs.
func (opu *OrgProductUpdate) AddOrgModuleIDs(ids ...string) *OrgProductUpdate {
	opu.mutation.AddOrgModuleIDs(ids...)
	return opu
}

// AddOrgModules adds the "org_modules" edges to the OrgModule entity.
func (opu *OrgProductUpdate) AddOrgModules(o ...*OrgModule) *OrgProductUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opu.AddOrgModuleIDs(ids...)
}

// Mutation returns the OrgProductMutation object of the builder.
func (opu *OrgProductUpdate) Mutation() *OrgProductMutation {
	return opu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (opu *OrgProductUpdate) ClearOwner() *OrgProductUpdate {
	opu.mutation.ClearOwner()
	return opu
}

// ClearOrgSubscription clears the "org_subscription" edge to the OrgSubscription entity.
func (opu *OrgProductUpdate) ClearOrgSubscription() *OrgProductUpdate {
	opu.mutation.ClearOrgSubscription()
	return opu
}

// ClearOrgPrices clears all "org_prices" edges to the OrgPrice entity.
func (opu *OrgProductUpdate) ClearOrgPrices() *OrgProductUpdate {
	opu.mutation.ClearOrgPrices()
	return opu
}

// RemoveOrgPriceIDs removes the "org_prices" edge to OrgPrice entities by IDs.
func (opu *OrgProductUpdate) RemoveOrgPriceIDs(ids ...string) *OrgProductUpdate {
	opu.mutation.RemoveOrgPriceIDs(ids...)
	return opu
}

// RemoveOrgPrices removes "org_prices" edges to OrgPrice entities.
func (opu *OrgProductUpdate) RemoveOrgPrices(o ...*OrgPrice) *OrgProductUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opu.RemoveOrgPriceIDs(ids...)
}

// ClearOrgModules clears all "org_modules" edges to the OrgModule entity.
func (opu *OrgProductUpdate) ClearOrgModules() *OrgProductUpdate {
	opu.mutation.ClearOrgModules()
	return opu
}

// RemoveOrgModuleIDs removes the "org_modules" edge to OrgModule entities by IDs.
func (opu *OrgProductUpdate) RemoveOrgModuleIDs(ids ...string) *OrgProductUpdate {
	opu.mutation.RemoveOrgModuleIDs(ids...)
	return opu
}

// RemoveOrgModules removes "org_modules" edges to OrgModule entities.
func (opu *OrgProductUpdate) RemoveOrgModules(o ...*OrgModule) *OrgProductUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opu.RemoveOrgModuleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OrgProductUpdate) Save(ctx context.Context) (int, error) {
	if err := opu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, opu.sqlSave, opu.mutation, opu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OrgProductUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OrgProductUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OrgProductUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opu *OrgProductUpdate) defaults() error {
	if _, ok := opu.mutation.UpdatedAt(); !ok && !opu.mutation.UpdatedAtCleared() {
		if orgproduct.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgproduct.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgproduct.UpdateDefaultUpdatedAt()
		opu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opu *OrgProductUpdate) check() error {
	if v, ok := opu.mutation.OwnerID(); ok {
		if err := orgproduct.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgProduct.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opu *OrgProductUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgProductUpdate {
	opu.modifiers = append(opu.modifiers, modifiers...)
	return opu
}

func (opu *OrgProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := opu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgproduct.Table, orgproduct.Columns, sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString))
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if opu.mutation.CreatedAtCleared() {
		_spec.ClearField(orgproduct.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := opu.mutation.UpdatedAt(); ok {
		_spec.SetField(orgproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if opu.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgproduct.FieldUpdatedAt, field.TypeTime)
	}
	if opu.mutation.CreatedByCleared() {
		_spec.ClearField(orgproduct.FieldCreatedBy, field.TypeString)
	}
	if value, ok := opu.mutation.UpdatedBy(); ok {
		_spec.SetField(orgproduct.FieldUpdatedBy, field.TypeString, value)
	}
	if opu.mutation.UpdatedByCleared() {
		_spec.ClearField(orgproduct.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := opu.mutation.DeletedAt(); ok {
		_spec.SetField(orgproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if opu.mutation.DeletedAtCleared() {
		_spec.ClearField(orgproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := opu.mutation.DeletedBy(); ok {
		_spec.SetField(orgproduct.FieldDeletedBy, field.TypeString, value)
	}
	if opu.mutation.DeletedByCleared() {
		_spec.ClearField(orgproduct.FieldDeletedBy, field.TypeString)
	}
	if value, ok := opu.mutation.Tags(); ok {
		_spec.SetField(orgproduct.FieldTags, field.TypeJSON, value)
	}
	if value, ok := opu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgproduct.FieldTags, value)
		})
	}
	if opu.mutation.TagsCleared() {
		_spec.ClearField(orgproduct.FieldTags, field.TypeJSON)
	}
	if value, ok := opu.mutation.Module(); ok {
		_spec.SetField(orgproduct.FieldModule, field.TypeString, value)
	}
	if value, ok := opu.mutation.StripeProductID(); ok {
		_spec.SetField(orgproduct.FieldStripeProductID, field.TypeString, value)
	}
	if opu.mutation.StripeProductIDCleared() {
		_spec.ClearField(orgproduct.FieldStripeProductID, field.TypeString)
	}
	if value, ok := opu.mutation.Status(); ok {
		_spec.SetField(orgproduct.FieldStatus, field.TypeString, value)
	}
	if opu.mutation.StatusCleared() {
		_spec.ClearField(orgproduct.FieldStatus, field.TypeString)
	}
	if value, ok := opu.mutation.Active(); ok {
		_spec.SetField(orgproduct.FieldActive, field.TypeBool, value)
	}
	if value, ok := opu.mutation.PriceID(); ok {
		_spec.SetField(orgproduct.FieldPriceID, field.TypeString, value)
	}
	if opu.mutation.PriceIDCleared() {
		_spec.ClearField(orgproduct.FieldPriceID, field.TypeString)
	}
	if opu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OwnerTable,
			Columns: []string{orgproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OwnerTable,
			Columns: []string{orgproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.OrgSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OrgSubscriptionTable,
			Columns: []string{orgproduct.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OrgSubscriptionTable,
			Columns: []string{orgproduct.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgproduct.OrgPricesTable,
			Columns: orgproduct.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProductOrgPrices
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.RemovedOrgPricesIDs(); len(nodes) > 0 && !opu.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgproduct.OrgPricesTable,
			Columns: orgproduct.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProductOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrgPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgproduct.OrgPricesTable,
			Columns: orgproduct.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProductOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgproduct.OrgModulesTable,
			Columns: []string{orgproduct.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.RemovedOrgModulesIDs(); len(nodes) > 0 && !opu.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgproduct.OrgModulesTable,
			Columns: []string{orgproduct.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrgModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgproduct.OrgModulesTable,
			Columns: []string{orgproduct.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = opu.schemaConfig.OrgProduct
	ctx = internal.NewSchemaConfigContext(ctx, opu.schemaConfig)
	_spec.AddModifiers(opu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	opu.mutation.done = true
	return n, nil
}

// OrgProductUpdateOne is the builder for updating a single OrgProduct entity.
type OrgProductUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (opuo *OrgProductUpdateOne) SetUpdatedAt(t time.Time) *OrgProductUpdateOne {
	opuo.mutation.SetUpdatedAt(t)
	return opuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (opuo *OrgProductUpdateOne) ClearUpdatedAt() *OrgProductUpdateOne {
	opuo.mutation.ClearUpdatedAt()
	return opuo
}

// SetUpdatedBy sets the "updated_by" field.
func (opuo *OrgProductUpdateOne) SetUpdatedBy(s string) *OrgProductUpdateOne {
	opuo.mutation.SetUpdatedBy(s)
	return opuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableUpdatedBy(s *string) *OrgProductUpdateOne {
	if s != nil {
		opuo.SetUpdatedBy(*s)
	}
	return opuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (opuo *OrgProductUpdateOne) ClearUpdatedBy() *OrgProductUpdateOne {
	opuo.mutation.ClearUpdatedBy()
	return opuo
}

// SetDeletedAt sets the "deleted_at" field.
func (opuo *OrgProductUpdateOne) SetDeletedAt(t time.Time) *OrgProductUpdateOne {
	opuo.mutation.SetDeletedAt(t)
	return opuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgProductUpdateOne {
	if t != nil {
		opuo.SetDeletedAt(*t)
	}
	return opuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (opuo *OrgProductUpdateOne) ClearDeletedAt() *OrgProductUpdateOne {
	opuo.mutation.ClearDeletedAt()
	return opuo
}

// SetDeletedBy sets the "deleted_by" field.
func (opuo *OrgProductUpdateOne) SetDeletedBy(s string) *OrgProductUpdateOne {
	opuo.mutation.SetDeletedBy(s)
	return opuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableDeletedBy(s *string) *OrgProductUpdateOne {
	if s != nil {
		opuo.SetDeletedBy(*s)
	}
	return opuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (opuo *OrgProductUpdateOne) ClearDeletedBy() *OrgProductUpdateOne {
	opuo.mutation.ClearDeletedBy()
	return opuo
}

// SetTags sets the "tags" field.
func (opuo *OrgProductUpdateOne) SetTags(s []string) *OrgProductUpdateOne {
	opuo.mutation.SetTags(s)
	return opuo
}

// AppendTags appends s to the "tags" field.
func (opuo *OrgProductUpdateOne) AppendTags(s []string) *OrgProductUpdateOne {
	opuo.mutation.AppendTags(s)
	return opuo
}

// ClearTags clears the value of the "tags" field.
func (opuo *OrgProductUpdateOne) ClearTags() *OrgProductUpdateOne {
	opuo.mutation.ClearTags()
	return opuo
}

// SetOwnerID sets the "owner_id" field.
func (opuo *OrgProductUpdateOne) SetOwnerID(s string) *OrgProductUpdateOne {
	opuo.mutation.SetOwnerID(s)
	return opuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableOwnerID(s *string) *OrgProductUpdateOne {
	if s != nil {
		opuo.SetOwnerID(*s)
	}
	return opuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (opuo *OrgProductUpdateOne) ClearOwnerID() *OrgProductUpdateOne {
	opuo.mutation.ClearOwnerID()
	return opuo
}

// SetModule sets the "module" field.
func (opuo *OrgProductUpdateOne) SetModule(s string) *OrgProductUpdateOne {
	opuo.mutation.SetModule(s)
	return opuo
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableModule(s *string) *OrgProductUpdateOne {
	if s != nil {
		opuo.SetModule(*s)
	}
	return opuo
}

// SetStripeProductID sets the "stripe_product_id" field.
func (opuo *OrgProductUpdateOne) SetStripeProductID(s string) *OrgProductUpdateOne {
	opuo.mutation.SetStripeProductID(s)
	return opuo
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableStripeProductID(s *string) *OrgProductUpdateOne {
	if s != nil {
		opuo.SetStripeProductID(*s)
	}
	return opuo
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (opuo *OrgProductUpdateOne) ClearStripeProductID() *OrgProductUpdateOne {
	opuo.mutation.ClearStripeProductID()
	return opuo
}

// SetStatus sets the "status" field.
func (opuo *OrgProductUpdateOne) SetStatus(s string) *OrgProductUpdateOne {
	opuo.mutation.SetStatus(s)
	return opuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableStatus(s *string) *OrgProductUpdateOne {
	if s != nil {
		opuo.SetStatus(*s)
	}
	return opuo
}

// ClearStatus clears the value of the "status" field.
func (opuo *OrgProductUpdateOne) ClearStatus() *OrgProductUpdateOne {
	opuo.mutation.ClearStatus()
	return opuo
}

// SetActive sets the "active" field.
func (opuo *OrgProductUpdateOne) SetActive(b bool) *OrgProductUpdateOne {
	opuo.mutation.SetActive(b)
	return opuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableActive(b *bool) *OrgProductUpdateOne {
	if b != nil {
		opuo.SetActive(*b)
	}
	return opuo
}

// SetSubscriptionID sets the "subscription_id" field.
func (opuo *OrgProductUpdateOne) SetSubscriptionID(s string) *OrgProductUpdateOne {
	opuo.mutation.SetSubscriptionID(s)
	return opuo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableSubscriptionID(s *string) *OrgProductUpdateOne {
	if s != nil {
		opuo.SetSubscriptionID(*s)
	}
	return opuo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (opuo *OrgProductUpdateOne) ClearSubscriptionID() *OrgProductUpdateOne {
	opuo.mutation.ClearSubscriptionID()
	return opuo
}

// SetPriceID sets the "price_id" field.
func (opuo *OrgProductUpdateOne) SetPriceID(s string) *OrgProductUpdateOne {
	opuo.mutation.SetPriceID(s)
	return opuo
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillablePriceID(s *string) *OrgProductUpdateOne {
	if s != nil {
		opuo.SetPriceID(*s)
	}
	return opuo
}

// ClearPriceID clears the value of the "price_id" field.
func (opuo *OrgProductUpdateOne) ClearPriceID() *OrgProductUpdateOne {
	opuo.mutation.ClearPriceID()
	return opuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (opuo *OrgProductUpdateOne) SetOwner(o *Organization) *OrgProductUpdateOne {
	return opuo.SetOwnerID(o.ID)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (opuo *OrgProductUpdateOne) SetOrgSubscriptionID(id string) *OrgProductUpdateOne {
	opuo.mutation.SetOrgSubscriptionID(id)
	return opuo
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (opuo *OrgProductUpdateOne) SetNillableOrgSubscriptionID(id *string) *OrgProductUpdateOne {
	if id != nil {
		opuo = opuo.SetOrgSubscriptionID(*id)
	}
	return opuo
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (opuo *OrgProductUpdateOne) SetOrgSubscription(o *OrgSubscription) *OrgProductUpdateOne {
	return opuo.SetOrgSubscriptionID(o.ID)
}

// AddOrgPriceIDs adds the "org_prices" edge to the OrgPrice entity by IDs.
func (opuo *OrgProductUpdateOne) AddOrgPriceIDs(ids ...string) *OrgProductUpdateOne {
	opuo.mutation.AddOrgPriceIDs(ids...)
	return opuo
}

// AddOrgPrices adds the "org_prices" edges to the OrgPrice entity.
func (opuo *OrgProductUpdateOne) AddOrgPrices(o ...*OrgPrice) *OrgProductUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opuo.AddOrgPriceIDs(ids...)
}

// AddOrgModuleIDs adds the "org_modules" edge to the OrgModule entity by IDs.
func (opuo *OrgProductUpdateOne) AddOrgModuleIDs(ids ...string) *OrgProductUpdateOne {
	opuo.mutation.AddOrgModuleIDs(ids...)
	return opuo
}

// AddOrgModules adds the "org_modules" edges to the OrgModule entity.
func (opuo *OrgProductUpdateOne) AddOrgModules(o ...*OrgModule) *OrgProductUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opuo.AddOrgModuleIDs(ids...)
}

// Mutation returns the OrgProductMutation object of the builder.
func (opuo *OrgProductUpdateOne) Mutation() *OrgProductMutation {
	return opuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (opuo *OrgProductUpdateOne) ClearOwner() *OrgProductUpdateOne {
	opuo.mutation.ClearOwner()
	return opuo
}

// ClearOrgSubscription clears the "org_subscription" edge to the OrgSubscription entity.
func (opuo *OrgProductUpdateOne) ClearOrgSubscription() *OrgProductUpdateOne {
	opuo.mutation.ClearOrgSubscription()
	return opuo
}

// ClearOrgPrices clears all "org_prices" edges to the OrgPrice entity.
func (opuo *OrgProductUpdateOne) ClearOrgPrices() *OrgProductUpdateOne {
	opuo.mutation.ClearOrgPrices()
	return opuo
}

// RemoveOrgPriceIDs removes the "org_prices" edge to OrgPrice entities by IDs.
func (opuo *OrgProductUpdateOne) RemoveOrgPriceIDs(ids ...string) *OrgProductUpdateOne {
	opuo.mutation.RemoveOrgPriceIDs(ids...)
	return opuo
}

// RemoveOrgPrices removes "org_prices" edges to OrgPrice entities.
func (opuo *OrgProductUpdateOne) RemoveOrgPrices(o ...*OrgPrice) *OrgProductUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opuo.RemoveOrgPriceIDs(ids...)
}

// ClearOrgModules clears all "org_modules" edges to the OrgModule entity.
func (opuo *OrgProductUpdateOne) ClearOrgModules() *OrgProductUpdateOne {
	opuo.mutation.ClearOrgModules()
	return opuo
}

// RemoveOrgModuleIDs removes the "org_modules" edge to OrgModule entities by IDs.
func (opuo *OrgProductUpdateOne) RemoveOrgModuleIDs(ids ...string) *OrgProductUpdateOne {
	opuo.mutation.RemoveOrgModuleIDs(ids...)
	return opuo
}

// RemoveOrgModules removes "org_modules" edges to OrgModule entities.
func (opuo *OrgProductUpdateOne) RemoveOrgModules(o ...*OrgModule) *OrgProductUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opuo.RemoveOrgModuleIDs(ids...)
}

// Where appends a list predicates to the OrgProductUpdate builder.
func (opuo *OrgProductUpdateOne) Where(ps ...predicate.OrgProduct) *OrgProductUpdateOne {
	opuo.mutation.Where(ps...)
	return opuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OrgProductUpdateOne) Select(field string, fields ...string) *OrgProductUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OrgProduct entity.
func (opuo *OrgProductUpdateOne) Save(ctx context.Context) (*OrgProduct, error) {
	if err := opuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, opuo.sqlSave, opuo.mutation, opuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OrgProductUpdateOne) SaveX(ctx context.Context) *OrgProduct {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OrgProductUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OrgProductUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opuo *OrgProductUpdateOne) defaults() error {
	if _, ok := opuo.mutation.UpdatedAt(); !ok && !opuo.mutation.UpdatedAtCleared() {
		if orgproduct.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgproduct.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgproduct.UpdateDefaultUpdatedAt()
		opuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opuo *OrgProductUpdateOne) check() error {
	if v, ok := opuo.mutation.OwnerID(); ok {
		if err := orgproduct.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgProduct.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opuo *OrgProductUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgProductUpdateOne {
	opuo.modifiers = append(opuo.modifiers, modifiers...)
	return opuo
}

func (opuo *OrgProductUpdateOne) sqlSave(ctx context.Context) (_node *OrgProduct, err error) {
	if err := opuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgproduct.Table, orgproduct.Columns, sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString))
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrgProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgproduct.FieldID)
		for _, f := range fields {
			if !orgproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orgproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if opuo.mutation.CreatedAtCleared() {
		_spec.ClearField(orgproduct.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := opuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orgproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if opuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgproduct.FieldUpdatedAt, field.TypeTime)
	}
	if opuo.mutation.CreatedByCleared() {
		_spec.ClearField(orgproduct.FieldCreatedBy, field.TypeString)
	}
	if value, ok := opuo.mutation.UpdatedBy(); ok {
		_spec.SetField(orgproduct.FieldUpdatedBy, field.TypeString, value)
	}
	if opuo.mutation.UpdatedByCleared() {
		_spec.ClearField(orgproduct.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := opuo.mutation.DeletedAt(); ok {
		_spec.SetField(orgproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if opuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orgproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := opuo.mutation.DeletedBy(); ok {
		_spec.SetField(orgproduct.FieldDeletedBy, field.TypeString, value)
	}
	if opuo.mutation.DeletedByCleared() {
		_spec.ClearField(orgproduct.FieldDeletedBy, field.TypeString)
	}
	if value, ok := opuo.mutation.Tags(); ok {
		_spec.SetField(orgproduct.FieldTags, field.TypeJSON, value)
	}
	if value, ok := opuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgproduct.FieldTags, value)
		})
	}
	if opuo.mutation.TagsCleared() {
		_spec.ClearField(orgproduct.FieldTags, field.TypeJSON)
	}
	if value, ok := opuo.mutation.Module(); ok {
		_spec.SetField(orgproduct.FieldModule, field.TypeString, value)
	}
	if value, ok := opuo.mutation.StripeProductID(); ok {
		_spec.SetField(orgproduct.FieldStripeProductID, field.TypeString, value)
	}
	if opuo.mutation.StripeProductIDCleared() {
		_spec.ClearField(orgproduct.FieldStripeProductID, field.TypeString)
	}
	if value, ok := opuo.mutation.Status(); ok {
		_spec.SetField(orgproduct.FieldStatus, field.TypeString, value)
	}
	if opuo.mutation.StatusCleared() {
		_spec.ClearField(orgproduct.FieldStatus, field.TypeString)
	}
	if value, ok := opuo.mutation.Active(); ok {
		_spec.SetField(orgproduct.FieldActive, field.TypeBool, value)
	}
	if value, ok := opuo.mutation.PriceID(); ok {
		_spec.SetField(orgproduct.FieldPriceID, field.TypeString, value)
	}
	if opuo.mutation.PriceIDCleared() {
		_spec.ClearField(orgproduct.FieldPriceID, field.TypeString)
	}
	if opuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OwnerTable,
			Columns: []string{orgproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OwnerTable,
			Columns: []string{orgproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.OrgSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OrgSubscriptionTable,
			Columns: []string{orgproduct.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OrgSubscriptionTable,
			Columns: []string{orgproduct.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgproduct.OrgPricesTable,
			Columns: orgproduct.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProductOrgPrices
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.RemovedOrgPricesIDs(); len(nodes) > 0 && !opuo.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgproduct.OrgPricesTable,
			Columns: orgproduct.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProductOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrgPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgproduct.OrgPricesTable,
			Columns: orgproduct.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProductOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgproduct.OrgModulesTable,
			Columns: []string{orgproduct.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.RemovedOrgModulesIDs(); len(nodes) > 0 && !opuo.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgproduct.OrgModulesTable,
			Columns: []string{orgproduct.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrgModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgproduct.OrgModulesTable,
			Columns: []string{orgproduct.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = opuo.schemaConfig.OrgProduct
	ctx = internal.NewSchemaConfigContext(ctx, opuo.schemaConfig)
	_spec.AddModifiers(opuo.modifiers...)
	_node = &OrgProduct{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	opuo.mutation.done = true
	return _node, nil
}
