// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
)

// TaskHistoryDelete is the builder for deleting a TaskHistory entity.
type TaskHistoryDelete struct {
	config
	hooks    []Hook
	mutation *TaskHistoryMutation
}

// Where appends a list predicates to the TaskHistoryDelete builder.
func (thd *TaskHistoryDelete) Where(ps ...predicate.TaskHistory) *TaskHistoryDelete {
	thd.mutation.Where(ps...)
	return thd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (thd *TaskHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, thd.sqlExec, thd.mutation, thd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (thd *TaskHistoryDelete) ExecX(ctx context.Context) int {
	n, err := thd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (thd *TaskHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(taskhistory.Table, sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeString))
	_spec.Node.Schema = thd.schemaConfig.TaskHistory
	ctx = internal.NewSchemaConfigContext(ctx, thd.schemaConfig)
	if ps := thd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, thd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	thd.mutation.done = true
	return affected, err
}

// TaskHistoryDeleteOne is the builder for deleting a single TaskHistory entity.
type TaskHistoryDeleteOne struct {
	thd *TaskHistoryDelete
}

// Where appends a list predicates to the TaskHistoryDelete builder.
func (thdo *TaskHistoryDeleteOne) Where(ps ...predicate.TaskHistory) *TaskHistoryDeleteOne {
	thdo.thd.mutation.Where(ps...)
	return thdo
}

// Exec executes the deletion query.
func (thdo *TaskHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := thdo.thd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{taskhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (thdo *TaskHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := thdo.Exec(ctx); err != nil {
		panic(err)
	}
}
