// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (at *APIToken) Owner(ctx context.Context) (*Organization, error) {
	result, err := at.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ap *ActionPlan) Standard(ctx context.Context) (result []*Standard, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedStandard(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.StandardOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QueryStandard().All(ctx)
	}
	return result, err
}

func (ap *ActionPlan) Risk(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedRisk(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.RiskOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QueryRisk().All(ctx)
	}
	return result, err
}

func (ap *ActionPlan) Control(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedControl(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.ControlOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QueryControl().All(ctx)
	}
	return result, err
}

func (ap *ActionPlan) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QueryUser().All(ctx)
	}
	return result, err
}

func (ap *ActionPlan) Program(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ap.NamedProgram(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ap.Edges.ProgramOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ap.QueryProgram().All(ctx)
	}
	return result, err
}

func (c *Contact) Owner(ctx context.Context) (*Organization, error) {
	result, err := c.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Contact) Entities(ctx context.Context) (result []*Entity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedEntities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.EntitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryEntities().All(ctx)
	}
	return result, err
}

func (c *Contact) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryFiles().All(ctx)
	}
	return result, err
}

func (c *Control) Owner(ctx context.Context) (*Organization, error) {
	result, err := c.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().Only(ctx)
	}
	return result, err
}

func (c *Control) BlockedGroups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.BlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryBlockedGroups().All(ctx)
	}
	return result, err
}

func (c *Control) Editors(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.EditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryEditors().All(ctx)
	}
	return result, err
}

func (c *Control) Viewers(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryViewers().All(ctx)
	}
	return result, err
}

func (c *Control) Procedures(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProcedures(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProceduresOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProcedures().All(ctx)
	}
	return result, err
}

func (c *Control) Subcontrols(ctx context.Context) (result []*Subcontrol, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedSubcontrols(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.SubcontrolsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QuerySubcontrols().All(ctx)
	}
	return result, err
}

func (c *Control) ControlObjectives(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedControlObjectives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ControlObjectivesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryControlObjectives().All(ctx)
	}
	return result, err
}

func (c *Control) Standard(ctx context.Context) (result []*Standard, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedStandard(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.StandardOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryStandard().All(ctx)
	}
	return result, err
}

func (c *Control) Narratives(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedNarratives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.NarrativesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryNarratives().All(ctx)
	}
	return result, err
}

func (c *Control) Risks(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedRisks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.RisksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryRisks().All(ctx)
	}
	return result, err
}

func (c *Control) ActionPlans(ctx context.Context) (result []*ActionPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedActionPlans(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ActionPlansOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryActionPlans().All(ctx)
	}
	return result, err
}

func (c *Control) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryTasks().All(ctx)
	}
	return result, err
}

func (c *Control) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryPrograms().All(ctx)
	}
	return result, err
}

func (c *Control) Evidence(ctx context.Context) (result []*Evidence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedEvidence(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.EvidenceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryEvidence().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Owner(ctx context.Context) (*Organization, error) {
	result, err := co.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = co.QueryOwner().Only(ctx)
	}
	return result, err
}

func (co *ControlObjective) BlockedGroups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.BlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryBlockedGroups().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Editors(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.EditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryEditors().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Viewers(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.ViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryViewers().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) InternalPolicies(ctx context.Context) (result []*InternalPolicy, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedInternalPolicies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.InternalPoliciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryInternalPolicies().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Controls(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedControls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.ControlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryControls().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Procedures(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedProcedures(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.ProceduresOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryProcedures().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Risks(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedRisks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.RisksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryRisks().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Subcontrols(ctx context.Context) (result []*Subcontrol, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedSubcontrols(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.SubcontrolsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QuerySubcontrols().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Standard(ctx context.Context) (result []*Standard, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedStandard(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.StandardOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryStandard().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Narratives(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedNarratives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.NarrativesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryNarratives().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryTasks().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryPrograms().All(ctx)
	}
	return result, err
}

func (co *ControlObjective) Evidence(ctx context.Context) (result []*Evidence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = co.NamedEvidence(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = co.Edges.EvidenceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = co.QueryEvidence().All(ctx)
	}
	return result, err
}

func (dd *DocumentData) Owner(ctx context.Context) (*Organization, error) {
	result, err := dd.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = dd.QueryOwner().Only(ctx)
	}
	return result, err
}

func (dd *DocumentData) Template(ctx context.Context) (*Template, error) {
	result, err := dd.Edges.TemplateOrErr()
	if IsNotLoaded(err) {
		result, err = dd.QueryTemplate().Only(ctx)
	}
	return result, err
}

func (dd *DocumentData) Entity(ctx context.Context) (result []*Entity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dd.NamedEntity(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dd.Edges.EntityOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dd.QueryEntity().All(ctx)
	}
	return result, err
}

func (dd *DocumentData) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dd.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dd.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dd.QueryFiles().All(ctx)
	}
	return result, err
}

func (e *Entity) Owner(ctx context.Context) (*Organization, error) {
	result, err := e.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Entity) Contacts(ctx context.Context) (result []*Contact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedContacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ContactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryContacts().All(ctx)
	}
	return result, err
}

func (e *Entity) Documents(ctx context.Context) (result []*DocumentData, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.DocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryDocuments().All(ctx)
	}
	return result, err
}

func (e *Entity) Notes(ctx context.Context) (result []*Note, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedNotes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.NotesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryNotes().All(ctx)
	}
	return result, err
}

func (e *Entity) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryFiles().All(ctx)
	}
	return result, err
}

func (e *Entity) EntityType(ctx context.Context) (*EntityType, error) {
	result, err := e.Edges.EntityTypeOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryEntityType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (et *EntityType) Owner(ctx context.Context) (*Organization, error) {
	result, err := et.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = et.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (et *EntityType) Entities(ctx context.Context) (result []*Entity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = et.NamedEntities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = et.Edges.EntitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = et.QueryEntities().All(ctx)
	}
	return result, err
}

func (e *Event) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryUser().All(ctx)
	}
	return result, err
}

func (e *Event) Group(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedGroup(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.GroupOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryGroup().All(ctx)
	}
	return result, err
}

func (e *Event) Integration(ctx context.Context) (result []*Integration, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedIntegration(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.IntegrationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryIntegration().All(ctx)
	}
	return result, err
}

func (e *Event) Organization(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedOrganization(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.OrganizationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryOrganization().All(ctx)
	}
	return result, err
}

func (e *Event) Invite(ctx context.Context) (result []*Invite, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedInvite(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.InviteOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryInvite().All(ctx)
	}
	return result, err
}

func (e *Event) PersonalAccessToken(ctx context.Context) (result []*PersonalAccessToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedPersonalAccessToken(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.PersonalAccessTokenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryPersonalAccessToken().All(ctx)
	}
	return result, err
}

func (e *Event) Hush(ctx context.Context) (result []*Hush, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedHush(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.HushOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryHush().All(ctx)
	}
	return result, err
}

func (e *Event) Orgmembership(ctx context.Context) (result []*OrgMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedOrgmembership(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.OrgmembershipOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryOrgmembership().All(ctx)
	}
	return result, err
}

func (e *Event) Groupmembership(ctx context.Context) (result []*GroupMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedGroupmembership(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.GroupmembershipOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryGroupmembership().All(ctx)
	}
	return result, err
}

func (e *Event) Subscriber(ctx context.Context) (result []*Subscriber, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedSubscriber(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.SubscriberOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QuerySubscriber().All(ctx)
	}
	return result, err
}

func (e *Event) File(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedFile(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.FileOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryFile().All(ctx)
	}
	return result, err
}

func (e *Evidence) Owner(ctx context.Context) (*Organization, error) {
	result, err := e.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryOwner().Only(ctx)
	}
	return result, err
}

func (e *Evidence) ControlObjectives(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedControlObjectives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ControlObjectivesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryControlObjectives().All(ctx)
	}
	return result, err
}

func (e *Evidence) Controls(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedControls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ControlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryControls().All(ctx)
	}
	return result, err
}

func (e *Evidence) Subcontrols(ctx context.Context) (result []*Subcontrol, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedSubcontrols(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.SubcontrolsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QuerySubcontrols().All(ctx)
	}
	return result, err
}

func (e *Evidence) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryFiles().All(ctx)
	}
	return result, err
}

func (e *Evidence) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryPrograms().All(ctx)
	}
	return result, err
}

func (e *Evidence) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryTasks().All(ctx)
	}
	return result, err
}

func (f *File) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryUser().All(ctx)
	}
	return result, err
}

func (f *File) Organization(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedOrganization(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.OrganizationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryOrganization().All(ctx)
	}
	return result, err
}

func (f *File) Group(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedGroup(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.GroupOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryGroup().All(ctx)
	}
	return result, err
}

func (f *File) Contact(ctx context.Context) (result []*Contact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedContact(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.ContactOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryContact().All(ctx)
	}
	return result, err
}

func (f *File) Entity(ctx context.Context) (result []*Entity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedEntity(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.EntityOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryEntity().All(ctx)
	}
	return result, err
}

func (f *File) UserSetting(ctx context.Context) (result []*UserSetting, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedUserSetting(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.UserSettingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryUserSetting().All(ctx)
	}
	return result, err
}

func (f *File) OrganizationSetting(ctx context.Context) (result []*OrganizationSetting, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedOrganizationSetting(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.OrganizationSettingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryOrganizationSetting().All(ctx)
	}
	return result, err
}

func (f *File) Template(ctx context.Context) (result []*Template, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedTemplate(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.TemplateOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryTemplate().All(ctx)
	}
	return result, err
}

func (f *File) DocumentData(ctx context.Context) (result []*DocumentData, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedDocumentData(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.DocumentDataOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryDocumentData().All(ctx)
	}
	return result, err
}

func (f *File) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryEvents().All(ctx)
	}
	return result, err
}

func (f *File) Program(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedProgram(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.ProgramOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryProgram().All(ctx)
	}
	return result, err
}

func (f *File) Evidence(ctx context.Context) (result []*Evidence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedEvidence(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.EvidenceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryEvidence().All(ctx)
	}
	return result, err
}

func (gr *Group) Owner(ctx context.Context) (*Organization, error) {
	result, err := gr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gr *Group) ProcedureEditors(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedProcedureEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ProcedureEditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryProcedureEditors().All(ctx)
	}
	return result, err
}

func (gr *Group) ProcedureBlockedGroups(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedProcedureBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ProcedureBlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryProcedureBlockedGroups().All(ctx)
	}
	return result, err
}

func (gr *Group) InternalPolicyEditors(ctx context.Context) (result []*InternalPolicy, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedInternalPolicyEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.InternalPolicyEditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryInternalPolicyEditors().All(ctx)
	}
	return result, err
}

func (gr *Group) InternalPolicyBlockedGroups(ctx context.Context) (result []*InternalPolicy, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedInternalPolicyBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.InternalPolicyBlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryInternalPolicyBlockedGroups().All(ctx)
	}
	return result, err
}

func (gr *Group) ProgramEditors(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedProgramEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ProgramEditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryProgramEditors().All(ctx)
	}
	return result, err
}

func (gr *Group) ProgramBlockedGroups(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedProgramBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ProgramBlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryProgramBlockedGroups().All(ctx)
	}
	return result, err
}

func (gr *Group) ProgramViewers(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedProgramViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ProgramViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryProgramViewers().All(ctx)
	}
	return result, err
}

func (gr *Group) RiskEditors(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedRiskEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.RiskEditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryRiskEditors().All(ctx)
	}
	return result, err
}

func (gr *Group) RiskBlockedGroups(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedRiskBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.RiskBlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryRiskBlockedGroups().All(ctx)
	}
	return result, err
}

func (gr *Group) RiskViewers(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedRiskViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.RiskViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryRiskViewers().All(ctx)
	}
	return result, err
}

func (gr *Group) ControlObjectiveEditors(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedControlObjectiveEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ControlObjectiveEditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryControlObjectiveEditors().All(ctx)
	}
	return result, err
}

func (gr *Group) ControlObjectiveBlockedGroups(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedControlObjectiveBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ControlObjectiveBlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryControlObjectiveBlockedGroups().All(ctx)
	}
	return result, err
}

func (gr *Group) ControlObjectiveViewers(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedControlObjectiveViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ControlObjectiveViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryControlObjectiveViewers().All(ctx)
	}
	return result, err
}

func (gr *Group) ControlEditors(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedControlEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ControlEditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryControlEditors().All(ctx)
	}
	return result, err
}

func (gr *Group) ControlBlockedGroups(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedControlBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ControlBlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryControlBlockedGroups().All(ctx)
	}
	return result, err
}

func (gr *Group) ControlViewers(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedControlViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ControlViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryControlViewers().All(ctx)
	}
	return result, err
}

func (gr *Group) NarrativeEditors(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedNarrativeEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.NarrativeEditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryNarrativeEditors().All(ctx)
	}
	return result, err
}

func (gr *Group) NarrativeBlockedGroups(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedNarrativeBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.NarrativeBlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryNarrativeBlockedGroups().All(ctx)
	}
	return result, err
}

func (gr *Group) NarrativeViewers(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedNarrativeViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.NarrativeViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryNarrativeViewers().All(ctx)
	}
	return result, err
}

func (gr *Group) Setting(ctx context.Context) (*GroupSetting, error) {
	result, err := gr.Edges.SettingOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QuerySetting().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gr *Group) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryUsers().All(ctx)
	}
	return result, err
}

func (gr *Group) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryEvents().All(ctx)
	}
	return result, err
}

func (gr *Group) Integrations(ctx context.Context) (result []*Integration, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedIntegrations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.IntegrationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryIntegrations().All(ctx)
	}
	return result, err
}

func (gr *Group) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryFiles().All(ctx)
	}
	return result, err
}

func (gr *Group) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryTasks().All(ctx)
	}
	return result, err
}

func (gr *Group) Members(ctx context.Context) (result []*GroupMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.MembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryMembers().All(ctx)
	}
	return result, err
}

func (gm *GroupMembership) Group(ctx context.Context) (*Group, error) {
	result, err := gm.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = gm.QueryGroup().Only(ctx)
	}
	return result, err
}

func (gm *GroupMembership) User(ctx context.Context) (*User, error) {
	result, err := gm.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = gm.QueryUser().Only(ctx)
	}
	return result, err
}

func (gm *GroupMembership) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gm.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gm.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gm.QueryEvents().All(ctx)
	}
	return result, err
}

func (gs *GroupSetting) Group(ctx context.Context) (*Group, error) {
	result, err := gs.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = gs.QueryGroup().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Hush) Integrations(ctx context.Context) (result []*Integration, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedIntegrations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.IntegrationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryIntegrations().All(ctx)
	}
	return result, err
}

func (h *Hush) Organization(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedOrganization(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.OrganizationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryOrganization().All(ctx)
	}
	return result, err
}

func (h *Hush) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryEvents().All(ctx)
	}
	return result, err
}

func (i *Integration) Owner(ctx context.Context) (*Organization, error) {
	result, err := i.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Integration) Secrets(ctx context.Context) (result []*Hush, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = i.NamedSecrets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = i.Edges.SecretsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = i.QuerySecrets().All(ctx)
	}
	return result, err
}

func (i *Integration) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = i.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = i.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = i.QueryEvents().All(ctx)
	}
	return result, err
}

func (ip *InternalPolicy) Owner(ctx context.Context) (*Organization, error) {
	result, err := ip.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ip.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ip *InternalPolicy) BlockedGroups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ip.NamedBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ip.Edges.BlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ip.QueryBlockedGroups().All(ctx)
	}
	return result, err
}

func (ip *InternalPolicy) Editors(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ip.NamedEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ip.Edges.EditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ip.QueryEditors().All(ctx)
	}
	return result, err
}

func (ip *InternalPolicy) ControlObjectives(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ip.NamedControlObjectives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ip.Edges.ControlObjectivesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ip.QueryControlObjectives().All(ctx)
	}
	return result, err
}

func (ip *InternalPolicy) Controls(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ip.NamedControls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ip.Edges.ControlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ip.QueryControls().All(ctx)
	}
	return result, err
}

func (ip *InternalPolicy) Procedures(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ip.NamedProcedures(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ip.Edges.ProceduresOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ip.QueryProcedures().All(ctx)
	}
	return result, err
}

func (ip *InternalPolicy) Narratives(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ip.NamedNarratives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ip.Edges.NarrativesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ip.QueryNarratives().All(ctx)
	}
	return result, err
}

func (ip *InternalPolicy) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ip.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ip.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ip.QueryTasks().All(ctx)
	}
	return result, err
}

func (ip *InternalPolicy) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ip.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ip.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ip.QueryPrograms().All(ctx)
	}
	return result, err
}

func (i *Invite) Owner(ctx context.Context) (*Organization, error) {
	result, err := i.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Invite) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = i.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = i.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = i.QueryEvents().All(ctx)
	}
	return result, err
}

func (n *Narrative) Owner(ctx context.Context) (*Organization, error) {
	result, err := n.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryOwner().Only(ctx)
	}
	return result, err
}

func (n *Narrative) BlockedGroups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.BlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryBlockedGroups().All(ctx)
	}
	return result, err
}

func (n *Narrative) Editors(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.EditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryEditors().All(ctx)
	}
	return result, err
}

func (n *Narrative) Viewers(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.ViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryViewers().All(ctx)
	}
	return result, err
}

func (n *Narrative) InternalPolicy(ctx context.Context) (result []*InternalPolicy, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedInternalPolicy(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.InternalPolicyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryInternalPolicy().All(ctx)
	}
	return result, err
}

func (n *Narrative) Control(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedControl(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.ControlOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryControl().All(ctx)
	}
	return result, err
}

func (n *Narrative) Procedure(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedProcedure(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.ProcedureOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryProcedure().All(ctx)
	}
	return result, err
}

func (n *Narrative) ControlObjective(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedControlObjective(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.ControlObjectiveOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryControlObjective().All(ctx)
	}
	return result, err
}

func (n *Narrative) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryPrograms().All(ctx)
	}
	return result, err
}

func (n *Note) Owner(ctx context.Context) (*Organization, error) {
	result, err := n.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (n *Note) Entity(ctx context.Context) (*Entity, error) {
	result, err := n.Edges.EntityOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryEntity().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (n *Note) Subcontrols(ctx context.Context) (result []*Subcontrol, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedSubcontrols(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.SubcontrolsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QuerySubcontrols().All(ctx)
	}
	return result, err
}

func (n *Note) Program(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = n.NamedProgram(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = n.Edges.ProgramOrErr()
	}
	if IsNotLoaded(err) {
		result, err = n.QueryProgram().All(ctx)
	}
	return result, err
}

func (o *Onboarding) Organization(ctx context.Context) (*Organization, error) {
	result, err := o.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryOrganization().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (om *OrgMembership) Organization(ctx context.Context) (*Organization, error) {
	result, err := om.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = om.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (om *OrgMembership) User(ctx context.Context) (*User, error) {
	result, err := om.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = om.QueryUser().Only(ctx)
	}
	return result, err
}

func (om *OrgMembership) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = om.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = om.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = om.QueryEvents().All(ctx)
	}
	return result, err
}

func (os *OrgSubscription) Owner(ctx context.Context) (*Organization, error) {
	result, err := os.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = os.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) ControlCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedControlCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ControlCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryControlCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) ControlObjectiveCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedControlObjectiveCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ControlObjectiveCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryControlObjectiveCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) GroupCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedGroupCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.GroupCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryGroupCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) InternalPolicyCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedInternalPolicyCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.InternalPolicyCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryInternalPolicyCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) NarrativeCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedNarrativeCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.NarrativeCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryNarrativeCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) ProcedureCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedProcedureCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ProcedureCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryProcedureCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) ProgramCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedProgramCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ProgramCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryProgramCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) RiskCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedRiskCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.RiskCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryRiskCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) TemplateCreators(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedTemplateCreators(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.TemplateCreatorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryTemplateCreators().All(ctx)
	}
	return result, err
}

func (o *Organization) Parent(ctx context.Context) (*Organization, error) {
	result, err := o.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) Children(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *OrganizationOrder, where *OrganizationWhereInput,
) (*OrganizationConnection, error) {
	opts := []OrganizationPaginateOption{
		WithOrganizationOrder(orderBy),
		WithOrganizationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[10][alias]
	if nodes, err := o.NamedChildren(alias); err == nil || hasTotalCount {
		pager, err := newOrganizationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrganizationConnection{Edges: []*OrganizationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryChildren().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Setting(ctx context.Context) (*OrganizationSetting, error) {
	result, err := o.Edges.SettingOrErr()
	if IsNotLoaded(err) {
		result, err = o.QuerySetting().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) PersonalAccessTokens(ctx context.Context) (result []*PersonalAccessToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedPersonalAccessTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.PersonalAccessTokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryPersonalAccessTokens().All(ctx)
	}
	return result, err
}

func (o *Organization) APITokens(ctx context.Context) (result []*APIToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedAPITokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.APITokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryAPITokens().All(ctx)
	}
	return result, err
}

func (o *Organization) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryUsers().All(ctx)
	}
	return result, err
}

func (o *Organization) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryFiles().All(ctx)
	}
	return result, err
}

func (o *Organization) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryEvents().All(ctx)
	}
	return result, err
}

func (o *Organization) Secrets(ctx context.Context) (result []*Hush, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedSecrets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.SecretsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QuerySecrets().All(ctx)
	}
	return result, err
}

func (o *Organization) AvatarFile(ctx context.Context) (*File, error) {
	result, err := o.Edges.AvatarFileOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryAvatarFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) Groups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.GroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryGroups().All(ctx)
	}
	return result, err
}

func (o *Organization) Templates(ctx context.Context) (result []*Template, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedTemplates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.TemplatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryTemplates().All(ctx)
	}
	return result, err
}

func (o *Organization) Integrations(ctx context.Context) (result []*Integration, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedIntegrations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.IntegrationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryIntegrations().All(ctx)
	}
	return result, err
}

func (o *Organization) DocumentData(ctx context.Context) (result []*DocumentData, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedDocumentData(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.DocumentDataOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryDocumentData().All(ctx)
	}
	return result, err
}

func (o *Organization) OrgSubscriptions(ctx context.Context) (result []*OrgSubscription, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedOrgSubscriptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.OrgSubscriptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryOrgSubscriptions().All(ctx)
	}
	return result, err
}

func (o *Organization) Invites(ctx context.Context) (result []*Invite, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedInvites(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.InvitesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryInvites().All(ctx)
	}
	return result, err
}

func (o *Organization) Subscribers(ctx context.Context) (result []*Subscriber, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedSubscribers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.SubscribersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QuerySubscribers().All(ctx)
	}
	return result, err
}

func (o *Organization) Entities(ctx context.Context) (result []*Entity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedEntities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.EntitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryEntities().All(ctx)
	}
	return result, err
}

func (o *Organization) EntityTypes(ctx context.Context) (result []*EntityType, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedEntityTypes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.EntityTypesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryEntityTypes().All(ctx)
	}
	return result, err
}

func (o *Organization) Contacts(ctx context.Context) (result []*Contact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedContacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ContactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryContacts().All(ctx)
	}
	return result, err
}

func (o *Organization) Notes(ctx context.Context) (result []*Note, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedNotes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.NotesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryNotes().All(ctx)
	}
	return result, err
}

func (o *Organization) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryTasks().All(ctx)
	}
	return result, err
}

func (o *Organization) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryPrograms().All(ctx)
	}
	return result, err
}

func (o *Organization) Procedures(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedProcedures(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ProceduresOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryProcedures().All(ctx)
	}
	return result, err
}

func (o *Organization) InternalPolicies(ctx context.Context) (result []*InternalPolicy, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedInternalPolicies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.InternalPoliciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryInternalPolicies().All(ctx)
	}
	return result, err
}

func (o *Organization) Risks(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedRisks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.RisksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryRisks().All(ctx)
	}
	return result, err
}

func (o *Organization) ControlObjectives(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedControlObjectives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ControlObjectivesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryControlObjectives().All(ctx)
	}
	return result, err
}

func (o *Organization) Narratives(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedNarratives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.NarrativesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryNarratives().All(ctx)
	}
	return result, err
}

func (o *Organization) Controls(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedControls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ControlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryControls().All(ctx)
	}
	return result, err
}

func (o *Organization) Subcontrols(ctx context.Context) (result []*Subcontrol, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedSubcontrols(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.SubcontrolsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QuerySubcontrols().All(ctx)
	}
	return result, err
}

func (o *Organization) Evidence(ctx context.Context) (result []*Evidence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedEvidence(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.EvidenceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryEvidence().All(ctx)
	}
	return result, err
}

func (o *Organization) Members(ctx context.Context) (result []*OrgMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.MembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryMembers().All(ctx)
	}
	return result, err
}

func (os *OrganizationSetting) Organization(ctx context.Context) (*Organization, error) {
	result, err := os.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = os.QueryOrganization().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (os *OrganizationSetting) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = os.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = os.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = os.QueryFiles().All(ctx)
	}
	return result, err
}

func (pat *PersonalAccessToken) Owner(ctx context.Context) (*User, error) {
	result, err := pat.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pat.QueryOwner().Only(ctx)
	}
	return result, err
}

func (pat *PersonalAccessToken) Organizations(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pat.NamedOrganizations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pat.Edges.OrganizationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pat.QueryOrganizations().All(ctx)
	}
	return result, err
}

func (pat *PersonalAccessToken) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pat.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pat.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pat.QueryEvents().All(ctx)
	}
	return result, err
}

func (pr *Procedure) Owner(ctx context.Context) (*Organization, error) {
	result, err := pr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Procedure) BlockedGroups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.BlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryBlockedGroups().All(ctx)
	}
	return result, err
}

func (pr *Procedure) Editors(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.EditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryEditors().All(ctx)
	}
	return result, err
}

func (pr *Procedure) Controls(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedControls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ControlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryControls().All(ctx)
	}
	return result, err
}

func (pr *Procedure) InternalPolicies(ctx context.Context) (result []*InternalPolicy, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedInternalPolicies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.InternalPoliciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryInternalPolicies().All(ctx)
	}
	return result, err
}

func (pr *Procedure) Narratives(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedNarratives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.NarrativesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryNarratives().All(ctx)
	}
	return result, err
}

func (pr *Procedure) Risks(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedRisks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.RisksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryRisks().All(ctx)
	}
	return result, err
}

func (pr *Procedure) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryTasks().All(ctx)
	}
	return result, err
}

func (pr *Procedure) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryPrograms().All(ctx)
	}
	return result, err
}

func (pr *Program) Owner(ctx context.Context) (*Organization, error) {
	result, err := pr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Program) BlockedGroups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.BlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryBlockedGroups().All(ctx)
	}
	return result, err
}

func (pr *Program) Editors(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.EditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryEditors().All(ctx)
	}
	return result, err
}

func (pr *Program) Viewers(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryViewers().All(ctx)
	}
	return result, err
}

func (pr *Program) Controls(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedControls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ControlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryControls().All(ctx)
	}
	return result, err
}

func (pr *Program) Subcontrols(ctx context.Context) (result []*Subcontrol, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedSubcontrols(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.SubcontrolsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QuerySubcontrols().All(ctx)
	}
	return result, err
}

func (pr *Program) ControlObjectives(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedControlObjectives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ControlObjectivesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryControlObjectives().All(ctx)
	}
	return result, err
}

func (pr *Program) InternalPolicies(ctx context.Context) (result []*InternalPolicy, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedInternalPolicies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.InternalPoliciesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryInternalPolicies().All(ctx)
	}
	return result, err
}

func (pr *Program) Procedures(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedProcedures(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ProceduresOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryProcedures().All(ctx)
	}
	return result, err
}

func (pr *Program) Risks(ctx context.Context) (result []*Risk, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedRisks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.RisksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryRisks().All(ctx)
	}
	return result, err
}

func (pr *Program) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryTasks().All(ctx)
	}
	return result, err
}

func (pr *Program) Notes(ctx context.Context) (result []*Note, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedNotes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.NotesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryNotes().All(ctx)
	}
	return result, err
}

func (pr *Program) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryFiles().All(ctx)
	}
	return result, err
}

func (pr *Program) Evidence(ctx context.Context) (result []*Evidence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedEvidence(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.EvidenceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryEvidence().All(ctx)
	}
	return result, err
}

func (pr *Program) Narratives(ctx context.Context) (result []*Narrative, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedNarratives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.NarrativesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryNarratives().All(ctx)
	}
	return result, err
}

func (pr *Program) ActionPlans(ctx context.Context) (result []*ActionPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedActionPlans(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ActionPlansOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryActionPlans().All(ctx)
	}
	return result, err
}

func (pr *Program) Standards(ctx context.Context) (result []*Standard, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedStandards(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.StandardsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryStandards().All(ctx)
	}
	return result, err
}

func (pr *Program) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryUsers().All(ctx)
	}
	return result, err
}

func (pr *Program) Members(ctx context.Context) (result []*ProgramMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.MembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryMembers().All(ctx)
	}
	return result, err
}

func (pm *ProgramMembership) Program(ctx context.Context) (*Program, error) {
	result, err := pm.Edges.ProgramOrErr()
	if IsNotLoaded(err) {
		result, err = pm.QueryProgram().Only(ctx)
	}
	return result, err
}

func (pm *ProgramMembership) User(ctx context.Context) (*User, error) {
	result, err := pm.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pm.QueryUser().Only(ctx)
	}
	return result, err
}

func (r *Risk) Owner(ctx context.Context) (*Organization, error) {
	result, err := r.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryOwner().Only(ctx)
	}
	return result, err
}

func (r *Risk) BlockedGroups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedBlockedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.BlockedGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryBlockedGroups().All(ctx)
	}
	return result, err
}

func (r *Risk) Editors(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedEditors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.EditorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryEditors().All(ctx)
	}
	return result, err
}

func (r *Risk) Viewers(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedViewers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ViewersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryViewers().All(ctx)
	}
	return result, err
}

func (r *Risk) Control(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedControl(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ControlOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryControl().All(ctx)
	}
	return result, err
}

func (r *Risk) Procedure(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedProcedure(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ProcedureOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryProcedure().All(ctx)
	}
	return result, err
}

func (r *Risk) ActionPlans(ctx context.Context) (result []*ActionPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedActionPlans(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ActionPlansOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryActionPlans().All(ctx)
	}
	return result, err
}

func (r *Risk) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryPrograms().All(ctx)
	}
	return result, err
}

func (s *Standard) ControlObjectives(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedControlObjectives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ControlObjectivesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryControlObjectives().All(ctx)
	}
	return result, err
}

func (s *Standard) Controls(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedControls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ControlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryControls().All(ctx)
	}
	return result, err
}

func (s *Standard) Procedures(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedProcedures(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ProceduresOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryProcedures().All(ctx)
	}
	return result, err
}

func (s *Standard) ActionPlans(ctx context.Context) (result []*ActionPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedActionPlans(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ActionPlansOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryActionPlans().All(ctx)
	}
	return result, err
}

func (s *Standard) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryPrograms().All(ctx)
	}
	return result, err
}

func (s *Subcontrol) Owner(ctx context.Context) (*Organization, error) {
	result, err := s.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryOwner().Only(ctx)
	}
	return result, err
}

func (s *Subcontrol) Controls(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedControls(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ControlsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryControls().All(ctx)
	}
	return result, err
}

func (s *Subcontrol) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryUser().All(ctx)
	}
	return result, err
}

func (s *Subcontrol) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryTasks().All(ctx)
	}
	return result, err
}

func (s *Subcontrol) Notes(ctx context.Context) (*Note, error) {
	result, err := s.Edges.NotesOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryNotes().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subcontrol) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryPrograms().All(ctx)
	}
	return result, err
}

func (s *Subcontrol) Evidence(ctx context.Context) (result []*Evidence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedEvidence(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.EvidenceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryEvidence().All(ctx)
	}
	return result, err
}

func (s *Subscriber) Owner(ctx context.Context) (*Organization, error) {
	result, err := s.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subscriber) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryEvents().All(ctx)
	}
	return result, err
}

func (ts *TFASetting) Owner(ctx context.Context) (*User, error) {
	result, err := ts.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ts.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Owner(ctx context.Context) (*Organization, error) {
	result, err := t.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryOwner().Only(ctx)
	}
	return result, err
}

func (t *Task) Assigner(ctx context.Context) (*User, error) {
	result, err := t.Edges.AssignerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryAssigner().Only(ctx)
	}
	return result, err
}

func (t *Task) Assignee(ctx context.Context) (*User, error) {
	result, err := t.Edges.AssigneeOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryAssignee().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Group(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedGroup(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.GroupOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryGroup().All(ctx)
	}
	return result, err
}

func (t *Task) InternalPolicy(ctx context.Context) (result []*InternalPolicy, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedInternalPolicy(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.InternalPolicyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryInternalPolicy().All(ctx)
	}
	return result, err
}

func (t *Task) Procedure(ctx context.Context) (result []*Procedure, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedProcedure(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ProcedureOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryProcedure().All(ctx)
	}
	return result, err
}

func (t *Task) Control(ctx context.Context) (result []*Control, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedControl(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ControlOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryControl().All(ctx)
	}
	return result, err
}

func (t *Task) ControlObjective(ctx context.Context) (result []*ControlObjective, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedControlObjective(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ControlObjectiveOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryControlObjective().All(ctx)
	}
	return result, err
}

func (t *Task) Subcontrol(ctx context.Context) (result []*Subcontrol, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedSubcontrol(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.SubcontrolOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QuerySubcontrol().All(ctx)
	}
	return result, err
}

func (t *Task) Program(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedProgram(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ProgramOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryProgram().All(ctx)
	}
	return result, err
}

func (t *Task) Evidence(ctx context.Context) (result []*Evidence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedEvidence(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.EvidenceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryEvidence().All(ctx)
	}
	return result, err
}

func (t *Template) Owner(ctx context.Context) (*Organization, error) {
	result, err := t.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Template) Documents(ctx context.Context) (result []*DocumentData, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.DocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryDocuments().All(ctx)
	}
	return result, err
}

func (t *Template) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryFiles().All(ctx)
	}
	return result, err
}

func (u *User) PersonalAccessTokens(ctx context.Context) (result []*PersonalAccessToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPersonalAccessTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PersonalAccessTokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPersonalAccessTokens().All(ctx)
	}
	return result, err
}

func (u *User) TfaSettings(ctx context.Context) (result []*TFASetting, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTfaSettings(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TfaSettingsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTfaSettings().All(ctx)
	}
	return result, err
}

func (u *User) Setting(ctx context.Context) (*UserSetting, error) {
	result, err := u.Edges.SettingOrErr()
	if IsNotLoaded(err) {
		result, err = u.QuerySetting().Only(ctx)
	}
	return result, err
}

func (u *User) Groups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.GroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryGroups().All(ctx)
	}
	return result, err
}

func (u *User) Organizations(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedOrganizations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.OrganizationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryOrganizations().All(ctx)
	}
	return result, err
}

func (u *User) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryFiles().All(ctx)
	}
	return result, err
}

func (u *User) AvatarFile(ctx context.Context) (*File, error) {
	result, err := u.Edges.AvatarFileOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryAvatarFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Events(ctx context.Context) (result []*Event, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryEvents().All(ctx)
	}
	return result, err
}

func (u *User) ActionPlans(ctx context.Context) (result []*ActionPlan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedActionPlans(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ActionPlansOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryActionPlans().All(ctx)
	}
	return result, err
}

func (u *User) Subcontrols(ctx context.Context) (result []*Subcontrol, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSubcontrols(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SubcontrolsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySubcontrols().All(ctx)
	}
	return result, err
}

func (u *User) AssignerTasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAssignerTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AssignerTasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAssignerTasks().All(ctx)
	}
	return result, err
}

func (u *User) AssigneeTasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAssigneeTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AssigneeTasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAssigneeTasks().All(ctx)
	}
	return result, err
}

func (u *User) Programs(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPrograms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ProgramsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPrograms().All(ctx)
	}
	return result, err
}

func (u *User) GroupMemberships(ctx context.Context) (result []*GroupMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedGroupMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.GroupMembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryGroupMemberships().All(ctx)
	}
	return result, err
}

func (u *User) OrgMemberships(ctx context.Context) (result []*OrgMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedOrgMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.OrgMembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryOrgMemberships().All(ctx)
	}
	return result, err
}

func (u *User) ProgramMemberships(ctx context.Context) (result []*ProgramMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedProgramMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ProgramMembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryProgramMemberships().All(ctx)
	}
	return result, err
}

func (us *UserSetting) User(ctx context.Context) (*User, error) {
	result, err := us.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = us.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (us *UserSetting) DefaultOrg(ctx context.Context) (*Organization, error) {
	result, err := us.Edges.DefaultOrgOrErr()
	if IsNotLoaded(err) {
		result, err = us.QueryDefaultOrg().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (us *UserSetting) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = us.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = us.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = us.QueryFiles().All(ctx)
	}
	return result, err
}
