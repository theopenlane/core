// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (at *APIToken) Owner(ctx context.Context) (*Organization, error) {
	result, err := at.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ap *ActionPlan) Approver(ctx context.Context) (*Group, error) {
	result, err := ap.Edges.ApproverOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryApprover().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ap *ActionPlan) Delegate(ctx context.Context) (*Group, error) {
	result, err := ap.Edges.DelegateOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryDelegate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ap *ActionPlan) Owner(ctx context.Context) (*Organization, error) {
	result, err := ap.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ap *ActionPlan) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ap.Edges.totalCount[3][alias]
	if nodes, err := ap.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ap.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (ap *ActionPlan) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ap.Edges.totalCount[4][alias]
	if nodes, err := ap.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ap.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (ap *ActionPlan) Users(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ap.Edges.totalCount[5][alias]
	if nodes, err := ap.NamedUsers(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ap.QueryUsers().Paginate(ctx, after, first, before, last, opts...)
}

func (ap *ActionPlan) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ap.Edges.totalCount[6][alias]
	if nodes, err := ap.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ap.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Asset) Owner(ctx context.Context) (*Organization, error) {
	result, err := a.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Asset) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[1][alias]
	if nodes, err := a.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Asset) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[2][alias]
	if nodes, err := a.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Asset) Viewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[3][alias]
	if nodes, err := a.NamedViewers(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Asset) Scans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScanOrder, where *ScanWhereInput,
) (*ScanConnection, error) {
	opts := []ScanPaginateOption{
		WithScanOrder(orderBy),
		WithScanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[4][alias]
	if nodes, err := a.NamedScans(alias); err == nil || hasTotalCount {
		pager, err := newScanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScanConnection{Edges: []*ScanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryScans().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Asset) Entities(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EntityOrder, where *EntityWhereInput,
) (*EntityConnection, error) {
	opts := []EntityPaginateOption{
		WithEntityOrder(orderBy),
		WithEntityFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[5][alias]
	if nodes, err := a.NamedEntities(alias); err == nil || hasTotalCount {
		pager, err := newEntityPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EntityConnection{Edges: []*EntityEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryEntities().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Asset) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[6][alias]
	if nodes, err := a.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Contact) Owner(ctx context.Context) (*Organization, error) {
	result, err := c.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Contact) Entities(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EntityOrder, where *EntityWhereInput,
) (*EntityConnection, error) {
	opts := []EntityPaginateOption{
		WithEntityOrder(orderBy),
		WithEntityFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[1][alias]
	if nodes, err := c.NamedEntities(alias); err == nil || hasTotalCount {
		pager, err := newEntityPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EntityConnection{Edges: []*EntityEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryEntities().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Contact) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[2][alias]
	if nodes, err := c.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Evidence(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EvidenceOrder, where *EvidenceWhereInput,
) (*EvidenceConnection, error) {
	opts := []EvidencePaginateOption{
		WithEvidenceOrder(orderBy),
		WithEvidenceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[0][alias]
	if nodes, err := c.NamedEvidence(alias); err == nil || hasTotalCount {
		pager, err := newEvidencePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EvidenceConnection{Edges: []*EvidenceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryEvidence().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) ControlObjectives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[1][alias]
	if nodes, err := c.NamedControlObjectives(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryControlObjectives().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[2][alias]
	if nodes, err := c.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Narratives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[3][alias]
	if nodes, err := c.NamedNarratives(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryNarratives().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[4][alias]
	if nodes, err := c.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) ActionPlans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ActionPlanOrder, where *ActionPlanWhereInput,
) (*ActionPlanConnection, error) {
	opts := []ActionPlanPaginateOption{
		WithActionPlanOrder(orderBy),
		WithActionPlanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[5][alias]
	if nodes, err := c.NamedActionPlans(alias); err == nil || hasTotalCount {
		pager, err := newActionPlanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ActionPlanConnection{Edges: []*ActionPlanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryActionPlans().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[6][alias]
	if nodes, err := c.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[7][alias]
	if nodes, err := c.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) ControlOwner(ctx context.Context) (*Group, error) {
	result, err := c.Edges.ControlOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryControlOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Control) Delegate(ctx context.Context) (*Group, error) {
	result, err := c.Edges.DelegateOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryDelegate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Control) Owner(ctx context.Context) (*Organization, error) {
	result, err := c.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Control) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[11][alias]
	if nodes, err := c.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[12][alias]
	if nodes, err := c.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Standard(ctx context.Context) (*Standard, error) {
	result, err := c.Edges.StandardOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryStandard().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Control) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[14][alias]
	if nodes, err := c.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Assets(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*AssetOrder, where *AssetWhereInput,
) (*AssetConnection, error) {
	opts := []AssetPaginateOption{
		WithAssetOrder(orderBy),
		WithAssetFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[15][alias]
	if nodes, err := c.NamedAssets(alias); err == nil || hasTotalCount {
		pager, err := newAssetPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &AssetConnection{Edges: []*AssetEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryAssets().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Scans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScanOrder, where *ScanWhereInput,
) (*ScanConnection, error) {
	opts := []ScanPaginateOption{
		WithScanOrder(orderBy),
		WithScanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[16][alias]
	if nodes, err := c.NamedScans(alias); err == nil || hasTotalCount {
		pager, err := newScanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScanConnection{Edges: []*ScanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryScans().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) ControlImplementations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlImplementationOrder, where *ControlImplementationWhereInput,
) (*ControlImplementationConnection, error) {
	opts := []ControlImplementationPaginateOption{
		WithControlImplementationOrder(orderBy),
		WithControlImplementationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[17][alias]
	if nodes, err := c.NamedControlImplementations(alias); err == nil || hasTotalCount {
		pager, err := newControlImplementationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlImplementationConnection{Edges: []*ControlImplementationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryControlImplementations().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[18][alias]
	if nodes, err := c.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Control) ScheduledJobs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScheduledJobOrder, where *ScheduledJobWhereInput,
) (*ScheduledJobConnection, error) {
	opts := []ScheduledJobPaginateOption{
		WithScheduledJobOrder(orderBy),
		WithScheduledJobFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[19][alias]
	if nodes, err := c.NamedScheduledJobs(alias); err == nil || hasTotalCount {
		pager, err := newScheduledJobPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScheduledJobConnection{Edges: []*ScheduledJobEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryScheduledJobs().Paginate(ctx, after, first, before, last, opts...)
}

func (ci *ControlImplementation) Owner(ctx context.Context) (*Organization, error) {
	result, err := ci.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ci.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ci *ControlImplementation) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ci.Edges.totalCount[1][alias]
	if nodes, err := ci.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ci.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (ci *ControlImplementation) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ci.Edges.totalCount[2][alias]
	if nodes, err := ci.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ci.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (ci *ControlImplementation) Viewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ci.Edges.totalCount[3][alias]
	if nodes, err := ci.NamedViewers(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ci.QueryViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (ci *ControlImplementation) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ci.Edges.totalCount[4][alias]
	if nodes, err := ci.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ci.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (ci *ControlImplementation) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ci.Edges.totalCount[5][alias]
	if nodes, err := ci.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ci.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Owner(ctx context.Context) (*Organization, error) {
	result, err := co.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = co.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (co *ControlObjective) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[1][alias]
	if nodes, err := co.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[2][alias]
	if nodes, err := co.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Viewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[3][alias]
	if nodes, err := co.NamedViewers(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[4][alias]
	if nodes, err := co.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Evidence(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EvidenceOrder, where *EvidenceWhereInput,
) (*EvidenceConnection, error) {
	opts := []EvidencePaginateOption{
		WithEvidenceOrder(orderBy),
		WithEvidenceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[5][alias]
	if nodes, err := co.NamedEvidence(alias); err == nil || hasTotalCount {
		pager, err := newEvidencePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EvidenceConnection{Edges: []*EvidenceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryEvidence().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[6][alias]
	if nodes, err := co.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[7][alias]
	if nodes, err := co.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[8][alias]
	if nodes, err := co.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[9][alias]
	if nodes, err := co.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[10][alias]
	if nodes, err := co.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Narratives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[11][alias]
	if nodes, err := co.NamedNarratives(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryNarratives().Paginate(ctx, after, first, before, last, opts...)
}

func (co *ControlObjective) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := co.Edges.totalCount[12][alias]
	if nodes, err := co.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return co.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (cd *CustomDomain) Owner(ctx context.Context) (*Organization, error) {
	result, err := cd.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cd *CustomDomain) MappableDomain(ctx context.Context) (*MappableDomain, error) {
	result, err := cd.Edges.MappableDomainOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryMappableDomain().Only(ctx)
	}
	return result, err
}

func (cd *CustomDomain) DNSVerification(ctx context.Context) (*DNSVerification, error) {
	result, err := cd.Edges.DNSVerificationOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryDNSVerification().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dv *DNSVerification) Owner(ctx context.Context) (*Organization, error) {
	result, err := dv.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = dv.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dv *DNSVerification) CustomDomains(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*CustomDomainOrder, where *CustomDomainWhereInput,
) (*CustomDomainConnection, error) {
	opts := []CustomDomainPaginateOption{
		WithCustomDomainOrder(orderBy),
		WithCustomDomainFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := dv.Edges.totalCount[1][alias]
	if nodes, err := dv.NamedCustomDomains(alias); err == nil || hasTotalCount {
		pager, err := newCustomDomainPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &CustomDomainConnection{Edges: []*CustomDomainEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return dv.QueryCustomDomains().Paginate(ctx, after, first, before, last, opts...)
}

func (dd *DocumentData) Owner(ctx context.Context) (*Organization, error) {
	result, err := dd.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = dd.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dd *DocumentData) Template(ctx context.Context) (*Template, error) {
	result, err := dd.Edges.TemplateOrErr()
	if IsNotLoaded(err) {
		result, err = dd.QueryTemplate().Only(ctx)
	}
	return result, err
}

func (dd *DocumentData) Entities(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EntityOrder, where *EntityWhereInput,
) (*EntityConnection, error) {
	opts := []EntityPaginateOption{
		WithEntityOrder(orderBy),
		WithEntityFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := dd.Edges.totalCount[2][alias]
	if nodes, err := dd.NamedEntities(alias); err == nil || hasTotalCount {
		pager, err := newEntityPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EntityConnection{Edges: []*EntityEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return dd.QueryEntities().Paginate(ctx, after, first, before, last, opts...)
}

func (dd *DocumentData) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := dd.Edges.totalCount[3][alias]
	if nodes, err := dd.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return dd.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Owner(ctx context.Context) (*Organization, error) {
	result, err := e.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Entity) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[1][alias]
	if nodes, err := e.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[2][alias]
	if nodes, err := e.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Viewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[3][alias]
	if nodes, err := e.NamedViewers(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Contacts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ContactOrder, where *ContactWhereInput,
) (*ContactConnection, error) {
	opts := []ContactPaginateOption{
		WithContactOrder(orderBy),
		WithContactFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[4][alias]
	if nodes, err := e.NamedContacts(alias); err == nil || hasTotalCount {
		pager, err := newContactPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ContactConnection{Edges: []*ContactEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryContacts().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Documents(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*DocumentDataOrder, where *DocumentDataWhereInput,
) (*DocumentDataConnection, error) {
	opts := []DocumentDataPaginateOption{
		WithDocumentDataOrder(orderBy),
		WithDocumentDataFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[5][alias]
	if nodes, err := e.NamedDocuments(alias); err == nil || hasTotalCount {
		pager, err := newDocumentDataPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &DocumentDataConnection{Edges: []*DocumentDataEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryDocuments().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Notes(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NoteOrder, where *NoteWhereInput,
) (*NoteConnection, error) {
	opts := []NotePaginateOption{
		WithNoteOrder(orderBy),
		WithNoteFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[6][alias]
	if nodes, err := e.NamedNotes(alias); err == nil || hasTotalCount {
		pager, err := newNotePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NoteConnection{Edges: []*NoteEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryNotes().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[7][alias]
	if nodes, err := e.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Assets(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*AssetOrder, where *AssetWhereInput,
) (*AssetConnection, error) {
	opts := []AssetPaginateOption{
		WithAssetOrder(orderBy),
		WithAssetFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[8][alias]
	if nodes, err := e.NamedAssets(alias); err == nil || hasTotalCount {
		pager, err := newAssetPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &AssetConnection{Edges: []*AssetEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryAssets().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) Scans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScanOrder, where *ScanWhereInput,
) (*ScanConnection, error) {
	opts := []ScanPaginateOption{
		WithScanOrder(orderBy),
		WithScanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[9][alias]
	if nodes, err := e.NamedScans(alias); err == nil || hasTotalCount {
		pager, err := newScanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScanConnection{Edges: []*ScanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryScans().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Entity) EntityType(ctx context.Context) (*EntityType, error) {
	result, err := e.Edges.EntityTypeOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryEntityType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (et *EntityType) Owner(ctx context.Context) (*Organization, error) {
	result, err := et.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = et.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (et *EntityType) Entities(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EntityOrder, where *EntityWhereInput,
) (*EntityConnection, error) {
	opts := []EntityPaginateOption{
		WithEntityOrder(orderBy),
		WithEntityFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := et.Edges.totalCount[1][alias]
	if nodes, err := et.NamedEntities(alias); err == nil || hasTotalCount {
		pager, err := newEntityPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EntityConnection{Edges: []*EntityEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return et.QueryEntities().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Users(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[0][alias]
	if nodes, err := e.NamedUsers(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryUsers().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Groups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[1][alias]
	if nodes, err := e.NamedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Integrations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*IntegrationOrder, where *IntegrationWhereInput,
) (*IntegrationConnection, error) {
	opts := []IntegrationPaginateOption{
		WithIntegrationOrder(orderBy),
		WithIntegrationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[2][alias]
	if nodes, err := e.NamedIntegrations(alias); err == nil || hasTotalCount {
		pager, err := newIntegrationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &IntegrationConnection{Edges: []*IntegrationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryIntegrations().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Organizations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*OrganizationOrder, where *OrganizationWhereInput,
) (*OrganizationConnection, error) {
	opts := []OrganizationPaginateOption{
		WithOrganizationOrder(orderBy),
		WithOrganizationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[3][alias]
	if nodes, err := e.NamedOrganizations(alias); err == nil || hasTotalCount {
		pager, err := newOrganizationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrganizationConnection{Edges: []*OrganizationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryOrganizations().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Invites(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InviteOrder, where *InviteWhereInput,
) (*InviteConnection, error) {
	opts := []InvitePaginateOption{
		WithInviteOrder(orderBy),
		WithInviteFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[4][alias]
	if nodes, err := e.NamedInvites(alias); err == nil || hasTotalCount {
		pager, err := newInvitePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InviteConnection{Edges: []*InviteEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryInvites().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) PersonalAccessTokens(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*PersonalAccessTokenOrder, where *PersonalAccessTokenWhereInput,
) (*PersonalAccessTokenConnection, error) {
	opts := []PersonalAccessTokenPaginateOption{
		WithPersonalAccessTokenOrder(orderBy),
		WithPersonalAccessTokenFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[5][alias]
	if nodes, err := e.NamedPersonalAccessTokens(alias); err == nil || hasTotalCount {
		pager, err := newPersonalAccessTokenPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &PersonalAccessTokenConnection{Edges: []*PersonalAccessTokenEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryPersonalAccessTokens().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Secrets(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*HushOrder, where *HushWhereInput,
) (*HushConnection, error) {
	opts := []HushPaginateOption{
		WithHushOrder(orderBy),
		WithHushFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[6][alias]
	if nodes, err := e.NamedSecrets(alias); err == nil || hasTotalCount {
		pager, err := newHushPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &HushConnection{Edges: []*HushEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QuerySecrets().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Orgmemberships(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*OrgMembershipOrder, where *OrgMembershipWhereInput,
) (*OrgMembershipConnection, error) {
	opts := []OrgMembershipPaginateOption{
		WithOrgMembershipOrder(orderBy),
		WithOrgMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[7][alias]
	if nodes, err := e.NamedOrgmemberships(alias); err == nil || hasTotalCount {
		pager, err := newOrgMembershipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrgMembershipConnection{Edges: []*OrgMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryOrgmemberships().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Groupmemberships(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupMembershipOrder, where *GroupMembershipWhereInput,
) (*GroupMembershipConnection, error) {
	opts := []GroupMembershipPaginateOption{
		WithGroupMembershipOrder(orderBy),
		WithGroupMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[8][alias]
	if nodes, err := e.NamedGroupmemberships(alias); err == nil || hasTotalCount {
		pager, err := newGroupMembershipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupMembershipConnection{Edges: []*GroupMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryGroupmemberships().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Subscribers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubscriberOrder, where *SubscriberWhereInput,
) (*SubscriberConnection, error) {
	opts := []SubscriberPaginateOption{
		WithSubscriberOrder(orderBy),
		WithSubscriberFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[9][alias]
	if nodes, err := e.NamedSubscribers(alias); err == nil || hasTotalCount {
		pager, err := newSubscriberPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubscriberConnection{Edges: []*SubscriberEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QuerySubscribers().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[10][alias]
	if nodes, err := e.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Event) OrgSubscriptions(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *OrgSubscriptionOrder, where *OrgSubscriptionWhereInput,
) (*OrgSubscriptionConnection, error) {
	opts := []OrgSubscriptionPaginateOption{
		WithOrgSubscriptionOrder(orderBy),
		WithOrgSubscriptionFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[11][alias]
	if nodes, err := e.NamedOrgSubscriptions(alias); err == nil || hasTotalCount {
		pager, err := newOrgSubscriptionPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrgSubscriptionConnection{Edges: []*OrgSubscriptionEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryOrgSubscriptions().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Evidence) Owner(ctx context.Context) (*Organization, error) {
	result, err := e.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Evidence) ControlObjectives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[1][alias]
	if nodes, err := e.NamedControlObjectives(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryControlObjectives().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Evidence) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[2][alias]
	if nodes, err := e.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Evidence) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[3][alias]
	if nodes, err := e.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Evidence) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[4][alias]
	if nodes, err := e.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Evidence) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[5][alias]
	if nodes, err := e.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Evidence) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[6][alias]
	if nodes, err := e.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Export) Owner(ctx context.Context) (*Organization, error) {
	result, err := e.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Export) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[1][alias]
	if nodes, err := e.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (e *Export) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := e.Edges.totalCount[2][alias]
	if nodes, err := e.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return e.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (f *File) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryUser().All(ctx)
	}
	return result, err
}

func (f *File) Organization(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedOrganization(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.OrganizationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryOrganization().All(ctx)
	}
	return result, err
}

func (f *File) Groups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := f.Edges.totalCount[2][alias]
	if nodes, err := f.NamedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return f.QueryGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (f *File) Contact(ctx context.Context) (result []*Contact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedContact(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.ContactOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryContact().All(ctx)
	}
	return result, err
}

func (f *File) Entity(ctx context.Context) (result []*Entity, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedEntity(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.EntityOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryEntity().All(ctx)
	}
	return result, err
}

func (f *File) UserSetting(ctx context.Context) (result []*UserSetting, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedUserSetting(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.UserSettingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryUserSetting().All(ctx)
	}
	return result, err
}

func (f *File) OrganizationSetting(ctx context.Context) (result []*OrganizationSetting, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedOrganizationSetting(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.OrganizationSettingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryOrganizationSetting().All(ctx)
	}
	return result, err
}

func (f *File) Template(ctx context.Context) (result []*Template, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedTemplate(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.TemplateOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryTemplate().All(ctx)
	}
	return result, err
}

func (f *File) Document(ctx context.Context) (result []*DocumentData, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedDocument(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.DocumentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryDocument().All(ctx)
	}
	return result, err
}

func (f *File) Program(ctx context.Context) (result []*Program, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedProgram(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.ProgramOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryProgram().All(ctx)
	}
	return result, err
}

func (f *File) Evidence(ctx context.Context) (result []*Evidence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedEvidence(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.EvidenceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryEvidence().All(ctx)
	}
	return result, err
}

func (f *File) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := f.Edges.totalCount[11][alias]
	if nodes, err := f.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return f.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (f *File) TrustCenterSetting(ctx context.Context) (result []*TrustCenterSetting, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedTrustCenterSetting(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.TrustCenterSettingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryTrustCenterSetting().All(ctx)
	}
	return result, err
}

func (f *File) Subprocessor(ctx context.Context) (result []*Subprocessor, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedSubprocessor(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.SubprocessorOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QuerySubprocessor().All(ctx)
	}
	return result, err
}

func (gr *Group) Owner(ctx context.Context) (*Organization, error) {
	result, err := gr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gr *Group) ProgramEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[1][alias]
	if nodes, err := gr.NamedProgramEditors(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryProgramEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ProgramBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[2][alias]
	if nodes, err := gr.NamedProgramBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryProgramBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ProgramViewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[3][alias]
	if nodes, err := gr.NamedProgramViewers(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryProgramViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) RiskEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[4][alias]
	if nodes, err := gr.NamedRiskEditors(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryRiskEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) RiskBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[5][alias]
	if nodes, err := gr.NamedRiskBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryRiskBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) RiskViewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[6][alias]
	if nodes, err := gr.NamedRiskViewers(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryRiskViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ControlObjectiveEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[7][alias]
	if nodes, err := gr.NamedControlObjectiveEditors(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryControlObjectiveEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ControlObjectiveBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[8][alias]
	if nodes, err := gr.NamedControlObjectiveBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryControlObjectiveBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ControlObjectiveViewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[9][alias]
	if nodes, err := gr.NamedControlObjectiveViewers(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryControlObjectiveViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) NarrativeEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[10][alias]
	if nodes, err := gr.NamedNarrativeEditors(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryNarrativeEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) NarrativeBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[11][alias]
	if nodes, err := gr.NamedNarrativeBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryNarrativeBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) NarrativeViewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[12][alias]
	if nodes, err := gr.NamedNarrativeViewers(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryNarrativeViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ControlImplementationEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlImplementationOrder, where *ControlImplementationWhereInput,
) (*ControlImplementationConnection, error) {
	opts := []ControlImplementationPaginateOption{
		WithControlImplementationOrder(orderBy),
		WithControlImplementationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[13][alias]
	if nodes, err := gr.NamedControlImplementationEditors(alias); err == nil || hasTotalCount {
		pager, err := newControlImplementationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlImplementationConnection{Edges: []*ControlImplementationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryControlImplementationEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ControlImplementationBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlImplementationOrder, where *ControlImplementationWhereInput,
) (*ControlImplementationConnection, error) {
	opts := []ControlImplementationPaginateOption{
		WithControlImplementationOrder(orderBy),
		WithControlImplementationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[14][alias]
	if nodes, err := gr.NamedControlImplementationBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newControlImplementationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlImplementationConnection{Edges: []*ControlImplementationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryControlImplementationBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ControlImplementationViewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlImplementationOrder, where *ControlImplementationWhereInput,
) (*ControlImplementationConnection, error) {
	opts := []ControlImplementationPaginateOption{
		WithControlImplementationOrder(orderBy),
		WithControlImplementationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[15][alias]
	if nodes, err := gr.NamedControlImplementationViewers(alias); err == nil || hasTotalCount {
		pager, err := newControlImplementationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlImplementationConnection{Edges: []*ControlImplementationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryControlImplementationViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ScanEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScanOrder, where *ScanWhereInput,
) (*ScanConnection, error) {
	opts := []ScanPaginateOption{
		WithScanOrder(orderBy),
		WithScanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[16][alias]
	if nodes, err := gr.NamedScanEditors(alias); err == nil || hasTotalCount {
		pager, err := newScanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScanConnection{Edges: []*ScanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryScanEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ScanBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScanOrder, where *ScanWhereInput,
) (*ScanConnection, error) {
	opts := []ScanPaginateOption{
		WithScanOrder(orderBy),
		WithScanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[17][alias]
	if nodes, err := gr.NamedScanBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newScanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScanConnection{Edges: []*ScanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryScanBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ScanViewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScanOrder, where *ScanWhereInput,
) (*ScanConnection, error) {
	opts := []ScanPaginateOption{
		WithScanOrder(orderBy),
		WithScanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[18][alias]
	if nodes, err := gr.NamedScanViewers(alias); err == nil || hasTotalCount {
		pager, err := newScanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScanConnection{Edges: []*ScanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryScanViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ProcedureEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[19][alias]
	if nodes, err := gr.NamedProcedureEditors(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryProcedureEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ProcedureBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[20][alias]
	if nodes, err := gr.NamedProcedureBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryProcedureBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) InternalPolicyEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[21][alias]
	if nodes, err := gr.NamedInternalPolicyEditors(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryInternalPolicyEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) InternalPolicyBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[22][alias]
	if nodes, err := gr.NamedInternalPolicyBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryInternalPolicyBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ControlEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[23][alias]
	if nodes, err := gr.NamedControlEditors(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryControlEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) ControlBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[24][alias]
	if nodes, err := gr.NamedControlBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryControlBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) MappedControlEditors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MappedControlOrder, where *MappedControlWhereInput,
) (*MappedControlConnection, error) {
	opts := []MappedControlPaginateOption{
		WithMappedControlOrder(orderBy),
		WithMappedControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[25][alias]
	if nodes, err := gr.NamedMappedControlEditors(alias); err == nil || hasTotalCount {
		pager, err := newMappedControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MappedControlConnection{Edges: []*MappedControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryMappedControlEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) MappedControlBlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MappedControlOrder, where *MappedControlWhereInput,
) (*MappedControlConnection, error) {
	opts := []MappedControlPaginateOption{
		WithMappedControlOrder(orderBy),
		WithMappedControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[26][alias]
	if nodes, err := gr.NamedMappedControlBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newMappedControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MappedControlConnection{Edges: []*MappedControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryMappedControlBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) Setting(ctx context.Context) (*GroupSetting, error) {
	result, err := gr.Edges.SettingOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QuerySetting().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gr *Group) Users(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[28][alias]
	if nodes, err := gr.NamedUsers(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryUsers().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[29][alias]
	if nodes, err := gr.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) Integrations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*IntegrationOrder, where *IntegrationWhereInput,
) (*IntegrationConnection, error) {
	opts := []IntegrationPaginateOption{
		WithIntegrationOrder(orderBy),
		WithIntegrationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[30][alias]
	if nodes, err := gr.NamedIntegrations(alias); err == nil || hasTotalCount {
		pager, err := newIntegrationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &IntegrationConnection{Edges: []*IntegrationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryIntegrations().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[31][alias]
	if nodes, err := gr.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[32][alias]
	if nodes, err := gr.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) Members(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupMembershipOrder, where *GroupMembershipWhereInput,
) (*GroupMembershipConnection, error) {
	opts := []GroupMembershipPaginateOption{
		WithGroupMembershipOrder(orderBy),
		WithGroupMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[33][alias]
	if nodes, err := gr.NamedMembers(alias); err == nil || hasTotalCount {
		pager, err := newGroupMembershipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupMembershipConnection{Edges: []*GroupMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryMembers().Paginate(ctx, after, first, before, last, opts...)
}

func (gm *GroupMembership) Group(ctx context.Context) (*Group, error) {
	result, err := gm.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = gm.QueryGroup().Only(ctx)
	}
	return result, err
}

func (gm *GroupMembership) User(ctx context.Context) (*User, error) {
	result, err := gm.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = gm.QueryUser().Only(ctx)
	}
	return result, err
}

func (gm *GroupMembership) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gm.Edges.totalCount[2][alias]
	if nodes, err := gm.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gm.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (gs *GroupSetting) Group(ctx context.Context) (*Group, error) {
	result, err := gs.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = gs.QueryGroup().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Hush) Owner(ctx context.Context) (*Organization, error) {
	result, err := h.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Hush) Integrations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*IntegrationOrder, where *IntegrationWhereInput,
) (*IntegrationConnection, error) {
	opts := []IntegrationPaginateOption{
		WithIntegrationOrder(orderBy),
		WithIntegrationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := h.Edges.totalCount[1][alias]
	if nodes, err := h.NamedIntegrations(alias); err == nil || hasTotalCount {
		pager, err := newIntegrationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &IntegrationConnection{Edges: []*IntegrationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return h.QueryIntegrations().Paginate(ctx, after, first, before, last, opts...)
}

func (h *Hush) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := h.Edges.totalCount[2][alias]
	if nodes, err := h.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return h.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (i *Integration) Owner(ctx context.Context) (*Organization, error) {
	result, err := i.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Integration) Secrets(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*HushOrder, where *HushWhereInput,
) (*HushConnection, error) {
	opts := []HushPaginateOption{
		WithHushOrder(orderBy),
		WithHushFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := i.Edges.totalCount[1][alias]
	if nodes, err := i.NamedSecrets(alias); err == nil || hasTotalCount {
		pager, err := newHushPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &HushConnection{Edges: []*HushEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return i.QuerySecrets().Paginate(ctx, after, first, before, last, opts...)
}

func (i *Integration) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := i.Edges.totalCount[2][alias]
	if nodes, err := i.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return i.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Owner(ctx context.Context) (*Organization, error) {
	result, err := ip.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ip.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ip *InternalPolicy) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[1][alias]
	if nodes, err := ip.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[2][alias]
	if nodes, err := ip.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Approver(ctx context.Context) (*Group, error) {
	result, err := ip.Edges.ApproverOrErr()
	if IsNotLoaded(err) {
		result, err = ip.QueryApprover().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ip *InternalPolicy) Delegate(ctx context.Context) (*Group, error) {
	result, err := ip.Edges.DelegateOrErr()
	if IsNotLoaded(err) {
		result, err = ip.QueryDelegate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ip *InternalPolicy) ControlObjectives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[5][alias]
	if nodes, err := ip.NamedControlObjectives(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryControlObjectives().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[6][alias]
	if nodes, err := ip.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[7][alias]
	if nodes, err := ip.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[8][alias]
	if nodes, err := ip.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Narratives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[9][alias]
	if nodes, err := ip.NamedNarratives(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryNarratives().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[10][alias]
	if nodes, err := ip.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[11][alias]
	if nodes, err := ip.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (ip *InternalPolicy) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[12][alias]
	if nodes, err := ip.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (i *Invite) Owner(ctx context.Context) (*Organization, error) {
	result, err := i.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Invite) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := i.Edges.totalCount[1][alias]
	if nodes, err := i.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return i.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (i *Invite) Groups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := i.Edges.totalCount[2][alias]
	if nodes, err := i.NamedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return i.QueryGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (jr *JobResult) Owner(ctx context.Context) (*Organization, error) {
	result, err := jr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobResult) ScheduledJob(ctx context.Context) (*ScheduledJob, error) {
	result, err := jr.Edges.ScheduledJobOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryScheduledJob().Only(ctx)
	}
	return result, err
}

func (jr *JobResult) File(ctx context.Context) (*File, error) {
	result, err := jr.Edges.FileOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryFile().Only(ctx)
	}
	return result, err
}

func (jr *JobRunner) Owner(ctx context.Context) (*Organization, error) {
	result, err := jr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRunner) JobRunnerTokens(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*JobRunnerTokenOrder, where *JobRunnerTokenWhereInput,
) (*JobRunnerTokenConnection, error) {
	opts := []JobRunnerTokenPaginateOption{
		WithJobRunnerTokenOrder(orderBy),
		WithJobRunnerTokenFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := jr.Edges.totalCount[1][alias]
	if nodes, err := jr.NamedJobRunnerTokens(alias); err == nil || hasTotalCount {
		pager, err := newJobRunnerTokenPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &JobRunnerTokenConnection{Edges: []*JobRunnerTokenEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return jr.QueryJobRunnerTokens().Paginate(ctx, after, first, before, last, opts...)
}

func (jrrt *JobRunnerRegistrationToken) Owner(ctx context.Context) (*Organization, error) {
	result, err := jrrt.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = jrrt.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jrrt *JobRunnerRegistrationToken) JobRunner(ctx context.Context) (*JobRunner, error) {
	result, err := jrrt.Edges.JobRunnerOrErr()
	if IsNotLoaded(err) {
		result, err = jrrt.QueryJobRunner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jrt *JobRunnerToken) Owner(ctx context.Context) (*Organization, error) {
	result, err := jrt.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = jrt.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jrt *JobRunnerToken) JobRunners(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*JobRunnerOrder, where *JobRunnerWhereInput,
) (*JobRunnerConnection, error) {
	opts := []JobRunnerPaginateOption{
		WithJobRunnerOrder(orderBy),
		WithJobRunnerFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := jrt.Edges.totalCount[1][alias]
	if nodes, err := jrt.NamedJobRunners(alias); err == nil || hasTotalCount {
		pager, err := newJobRunnerPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &JobRunnerConnection{Edges: []*JobRunnerEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return jrt.QueryJobRunners().Paginate(ctx, after, first, before, last, opts...)
}

func (jt *JobTemplate) Owner(ctx context.Context) (*Organization, error) {
	result, err := jt.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = jt.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jt *JobTemplate) ScheduledJobs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScheduledJobOrder, where *ScheduledJobWhereInput,
) (*ScheduledJobConnection, error) {
	opts := []ScheduledJobPaginateOption{
		WithScheduledJobOrder(orderBy),
		WithScheduledJobFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := jt.Edges.totalCount[1][alias]
	if nodes, err := jt.NamedScheduledJobs(alias); err == nil || hasTotalCount {
		pager, err := newScheduledJobPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScheduledJobConnection{Edges: []*ScheduledJobEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return jt.QueryScheduledJobs().Paginate(ctx, after, first, before, last, opts...)
}

func (md *MappableDomain) CustomDomains(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*CustomDomainOrder, where *CustomDomainWhereInput,
) (*CustomDomainConnection, error) {
	opts := []CustomDomainPaginateOption{
		WithCustomDomainOrder(orderBy),
		WithCustomDomainFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := md.Edges.totalCount[0][alias]
	if nodes, err := md.NamedCustomDomains(alias); err == nil || hasTotalCount {
		pager, err := newCustomDomainPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &CustomDomainConnection{Edges: []*CustomDomainEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return md.QueryCustomDomains().Paginate(ctx, after, first, before, last, opts...)
}

func (mc *MappedControl) Owner(ctx context.Context) (*Organization, error) {
	result, err := mc.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = mc.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (mc *MappedControl) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := mc.Edges.totalCount[1][alias]
	if nodes, err := mc.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return mc.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (mc *MappedControl) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := mc.Edges.totalCount[2][alias]
	if nodes, err := mc.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return mc.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (mc *MappedControl) FromControls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := mc.Edges.totalCount[3][alias]
	if nodes, err := mc.NamedFromControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return mc.QueryFromControls().Paginate(ctx, after, first, before, last, opts...)
}

func (mc *MappedControl) ToControls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := mc.Edges.totalCount[4][alias]
	if nodes, err := mc.NamedToControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return mc.QueryToControls().Paginate(ctx, after, first, before, last, opts...)
}

func (mc *MappedControl) FromSubcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := mc.Edges.totalCount[5][alias]
	if nodes, err := mc.NamedFromSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return mc.QueryFromSubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (mc *MappedControl) ToSubcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := mc.Edges.totalCount[6][alias]
	if nodes, err := mc.NamedToSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return mc.QueryToSubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (n *Narrative) Owner(ctx context.Context) (*Organization, error) {
	result, err := n.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (n *Narrative) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := n.Edges.totalCount[1][alias]
	if nodes, err := n.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return n.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (n *Narrative) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := n.Edges.totalCount[2][alias]
	if nodes, err := n.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return n.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (n *Narrative) Viewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := n.Edges.totalCount[3][alias]
	if nodes, err := n.NamedViewers(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return n.QueryViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (n *Narrative) Satisfies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := n.Edges.totalCount[4][alias]
	if nodes, err := n.NamedSatisfies(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return n.QuerySatisfies().Paginate(ctx, after, first, before, last, opts...)
}

func (n *Narrative) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := n.Edges.totalCount[5][alias]
	if nodes, err := n.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return n.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (n *Narrative) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := n.Edges.totalCount[6][alias]
	if nodes, err := n.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return n.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (n *Narrative) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := n.Edges.totalCount[7][alias]
	if nodes, err := n.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return n.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (n *Note) Owner(ctx context.Context) (*Organization, error) {
	result, err := n.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (n *Note) Task(ctx context.Context) (*Task, error) {
	result, err := n.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryTask().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (n *Note) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := n.Edges.totalCount[2][alias]
	if nodes, err := n.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return n.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Onboarding) Organization(ctx context.Context) (*Organization, error) {
	result, err := o.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryOrganization().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (om *OrgMembership) Organization(ctx context.Context) (*Organization, error) {
	result, err := om.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = om.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (om *OrgMembership) User(ctx context.Context) (*User, error) {
	result, err := om.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = om.QueryUser().Only(ctx)
	}
	return result, err
}

func (om *OrgMembership) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := om.Edges.totalCount[2][alias]
	if nodes, err := om.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return om.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (os *OrgSubscription) Owner(ctx context.Context) (*Organization, error) {
	result, err := os.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = os.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (os *OrgSubscription) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := os.Edges.totalCount[1][alias]
	if nodes, err := os.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return os.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ControlCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[0][alias]
	if nodes, err := o.NamedControlCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryControlCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ControlImplementationCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[1][alias]
	if nodes, err := o.NamedControlImplementationCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryControlImplementationCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ControlObjectiveCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[2][alias]
	if nodes, err := o.NamedControlObjectiveCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryControlObjectiveCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) EvidenceCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[3][alias]
	if nodes, err := o.NamedEvidenceCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryEvidenceCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) GroupCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[4][alias]
	if nodes, err := o.NamedGroupCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryGroupCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) InternalPolicyCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[5][alias]
	if nodes, err := o.NamedInternalPolicyCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryInternalPolicyCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) MappedControlCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[6][alias]
	if nodes, err := o.NamedMappedControlCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryMappedControlCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) NarrativeCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[7][alias]
	if nodes, err := o.NamedNarrativeCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryNarrativeCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ProcedureCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[8][alias]
	if nodes, err := o.NamedProcedureCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryProcedureCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ProgramCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[9][alias]
	if nodes, err := o.NamedProgramCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryProgramCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) RiskCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[10][alias]
	if nodes, err := o.NamedRiskCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryRiskCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ScheduledJobCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[11][alias]
	if nodes, err := o.NamedScheduledJobCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryScheduledJobCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) StandardCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[12][alias]
	if nodes, err := o.NamedStandardCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryStandardCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) TemplateCreators(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[13][alias]
	if nodes, err := o.NamedTemplateCreators(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryTemplateCreators().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Parent(ctx context.Context) (*Organization, error) {
	result, err := o.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) Children(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*OrganizationOrder, where *OrganizationWhereInput,
) (*OrganizationConnection, error) {
	opts := []OrganizationPaginateOption{
		WithOrganizationOrder(orderBy),
		WithOrganizationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[15][alias]
	if nodes, err := o.NamedChildren(alias); err == nil || hasTotalCount {
		pager, err := newOrganizationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrganizationConnection{Edges: []*OrganizationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryChildren().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Setting(ctx context.Context) (*OrganizationSetting, error) {
	result, err := o.Edges.SettingOrErr()
	if IsNotLoaded(err) {
		result, err = o.QuerySetting().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) PersonalAccessTokens(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*PersonalAccessTokenOrder, where *PersonalAccessTokenWhereInput,
) (*PersonalAccessTokenConnection, error) {
	opts := []PersonalAccessTokenPaginateOption{
		WithPersonalAccessTokenOrder(orderBy),
		WithPersonalAccessTokenFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[17][alias]
	if nodes, err := o.NamedPersonalAccessTokens(alias); err == nil || hasTotalCount {
		pager, err := newPersonalAccessTokenPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &PersonalAccessTokenConnection{Edges: []*PersonalAccessTokenEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryPersonalAccessTokens().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) APITokens(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*APITokenOrder, where *APITokenWhereInput,
) (*APITokenConnection, error) {
	opts := []APITokenPaginateOption{
		WithAPITokenOrder(orderBy),
		WithAPITokenFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[18][alias]
	if nodes, err := o.NamedAPITokens(alias); err == nil || hasTotalCount {
		pager, err := newAPITokenPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &APITokenConnection{Edges: []*APITokenEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryAPITokens().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Users(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[19][alias]
	if nodes, err := o.NamedUsers(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryUsers().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[20][alias]
	if nodes, err := o.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[21][alias]
	if nodes, err := o.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Secrets(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*HushOrder, where *HushWhereInput,
) (*HushConnection, error) {
	opts := []HushPaginateOption{
		WithHushOrder(orderBy),
		WithHushFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[22][alias]
	if nodes, err := o.NamedSecrets(alias); err == nil || hasTotalCount {
		pager, err := newHushPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &HushConnection{Edges: []*HushEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QuerySecrets().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) AvatarFile(ctx context.Context) (*File, error) {
	result, err := o.Edges.AvatarFileOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryAvatarFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) Groups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[24][alias]
	if nodes, err := o.NamedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Templates(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TemplateOrder, where *TemplateWhereInput,
) (*TemplateConnection, error) {
	opts := []TemplatePaginateOption{
		WithTemplateOrder(orderBy),
		WithTemplateFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[25][alias]
	if nodes, err := o.NamedTemplates(alias); err == nil || hasTotalCount {
		pager, err := newTemplatePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TemplateConnection{Edges: []*TemplateEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryTemplates().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Integrations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*IntegrationOrder, where *IntegrationWhereInput,
) (*IntegrationConnection, error) {
	opts := []IntegrationPaginateOption{
		WithIntegrationOrder(orderBy),
		WithIntegrationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[26][alias]
	if nodes, err := o.NamedIntegrations(alias); err == nil || hasTotalCount {
		pager, err := newIntegrationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &IntegrationConnection{Edges: []*IntegrationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryIntegrations().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Documents(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*DocumentDataOrder, where *DocumentDataWhereInput,
) (*DocumentDataConnection, error) {
	opts := []DocumentDataPaginateOption{
		WithDocumentDataOrder(orderBy),
		WithDocumentDataFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[27][alias]
	if nodes, err := o.NamedDocuments(alias); err == nil || hasTotalCount {
		pager, err := newDocumentDataPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &DocumentDataConnection{Edges: []*DocumentDataEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryDocuments().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) OrgSubscriptions(ctx context.Context) (result []*OrgSubscription, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedOrgSubscriptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.OrgSubscriptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryOrgSubscriptions().All(ctx)
	}
	return result, err
}

func (o *Organization) Invites(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InviteOrder, where *InviteWhereInput,
) (*InviteConnection, error) {
	opts := []InvitePaginateOption{
		WithInviteOrder(orderBy),
		WithInviteFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[29][alias]
	if nodes, err := o.NamedInvites(alias); err == nil || hasTotalCount {
		pager, err := newInvitePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InviteConnection{Edges: []*InviteEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryInvites().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Subscribers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubscriberOrder, where *SubscriberWhereInput,
) (*SubscriberConnection, error) {
	opts := []SubscriberPaginateOption{
		WithSubscriberOrder(orderBy),
		WithSubscriberFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[30][alias]
	if nodes, err := o.NamedSubscribers(alias); err == nil || hasTotalCount {
		pager, err := newSubscriberPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubscriberConnection{Edges: []*SubscriberEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QuerySubscribers().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Entities(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EntityOrder, where *EntityWhereInput,
) (*EntityConnection, error) {
	opts := []EntityPaginateOption{
		WithEntityOrder(orderBy),
		WithEntityFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[31][alias]
	if nodes, err := o.NamedEntities(alias); err == nil || hasTotalCount {
		pager, err := newEntityPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EntityConnection{Edges: []*EntityEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryEntities().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) EntityTypes(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EntityTypeOrder, where *EntityTypeWhereInput,
) (*EntityTypeConnection, error) {
	opts := []EntityTypePaginateOption{
		WithEntityTypeOrder(orderBy),
		WithEntityTypeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[32][alias]
	if nodes, err := o.NamedEntityTypes(alias); err == nil || hasTotalCount {
		pager, err := newEntityTypePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EntityTypeConnection{Edges: []*EntityTypeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryEntityTypes().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Contacts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ContactOrder, where *ContactWhereInput,
) (*ContactConnection, error) {
	opts := []ContactPaginateOption{
		WithContactOrder(orderBy),
		WithContactFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[33][alias]
	if nodes, err := o.NamedContacts(alias); err == nil || hasTotalCount {
		pager, err := newContactPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ContactConnection{Edges: []*ContactEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryContacts().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Notes(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NoteOrder, where *NoteWhereInput,
) (*NoteConnection, error) {
	opts := []NotePaginateOption{
		WithNoteOrder(orderBy),
		WithNoteFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[34][alias]
	if nodes, err := o.NamedNotes(alias); err == nil || hasTotalCount {
		pager, err := newNotePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NoteConnection{Edges: []*NoteEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryNotes().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[35][alias]
	if nodes, err := o.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[36][alias]
	if nodes, err := o.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[37][alias]
	if nodes, err := o.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[38][alias]
	if nodes, err := o.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[39][alias]
	if nodes, err := o.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ControlObjectives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[40][alias]
	if nodes, err := o.NamedControlObjectives(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryControlObjectives().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Narratives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[41][alias]
	if nodes, err := o.NamedNarratives(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryNarratives().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[42][alias]
	if nodes, err := o.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[43][alias]
	if nodes, err := o.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ControlImplementations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlImplementationOrder, where *ControlImplementationWhereInput,
) (*ControlImplementationConnection, error) {
	opts := []ControlImplementationPaginateOption{
		WithControlImplementationOrder(orderBy),
		WithControlImplementationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[44][alias]
	if nodes, err := o.NamedControlImplementations(alias); err == nil || hasTotalCount {
		pager, err := newControlImplementationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlImplementationConnection{Edges: []*ControlImplementationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryControlImplementations().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) MappedControls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MappedControlOrder, where *MappedControlWhereInput,
) (*MappedControlConnection, error) {
	opts := []MappedControlPaginateOption{
		WithMappedControlOrder(orderBy),
		WithMappedControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[45][alias]
	if nodes, err := o.NamedMappedControls(alias); err == nil || hasTotalCount {
		pager, err := newMappedControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MappedControlConnection{Edges: []*MappedControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryMappedControls().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Evidence(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EvidenceOrder, where *EvidenceWhereInput,
) (*EvidenceConnection, error) {
	opts := []EvidencePaginateOption{
		WithEvidenceOrder(orderBy),
		WithEvidenceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[46][alias]
	if nodes, err := o.NamedEvidence(alias); err == nil || hasTotalCount {
		pager, err := newEvidencePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EvidenceConnection{Edges: []*EvidenceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryEvidence().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Standards(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*StandardOrder, where *StandardWhereInput,
) (*StandardConnection, error) {
	opts := []StandardPaginateOption{
		WithStandardOrder(orderBy),
		WithStandardFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[47][alias]
	if nodes, err := o.NamedStandards(alias); err == nil || hasTotalCount {
		pager, err := newStandardPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &StandardConnection{Edges: []*StandardEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryStandards().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ActionPlans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ActionPlanOrder, where *ActionPlanWhereInput,
) (*ActionPlanConnection, error) {
	opts := []ActionPlanPaginateOption{
		WithActionPlanOrder(orderBy),
		WithActionPlanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[48][alias]
	if nodes, err := o.NamedActionPlans(alias); err == nil || hasTotalCount {
		pager, err := newActionPlanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ActionPlanConnection{Edges: []*ActionPlanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryActionPlans().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) CustomDomains(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*CustomDomainOrder, where *CustomDomainWhereInput,
) (*CustomDomainConnection, error) {
	opts := []CustomDomainPaginateOption{
		WithCustomDomainOrder(orderBy),
		WithCustomDomainFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[49][alias]
	if nodes, err := o.NamedCustomDomains(alias); err == nil || hasTotalCount {
		pager, err := newCustomDomainPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &CustomDomainConnection{Edges: []*CustomDomainEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryCustomDomains().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) JobRunners(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*JobRunnerOrder, where *JobRunnerWhereInput,
) (*JobRunnerConnection, error) {
	opts := []JobRunnerPaginateOption{
		WithJobRunnerOrder(orderBy),
		WithJobRunnerFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[50][alias]
	if nodes, err := o.NamedJobRunners(alias); err == nil || hasTotalCount {
		pager, err := newJobRunnerPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &JobRunnerConnection{Edges: []*JobRunnerEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryJobRunners().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) JobRunnerTokens(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*JobRunnerTokenOrder, where *JobRunnerTokenWhereInput,
) (*JobRunnerTokenConnection, error) {
	opts := []JobRunnerTokenPaginateOption{
		WithJobRunnerTokenOrder(orderBy),
		WithJobRunnerTokenFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[51][alias]
	if nodes, err := o.NamedJobRunnerTokens(alias); err == nil || hasTotalCount {
		pager, err := newJobRunnerTokenPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &JobRunnerTokenConnection{Edges: []*JobRunnerTokenEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryJobRunnerTokens().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) JobRunnerRegistrationTokens(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*JobRunnerRegistrationTokenOrder, where *JobRunnerRegistrationTokenWhereInput,
) (*JobRunnerRegistrationTokenConnection, error) {
	opts := []JobRunnerRegistrationTokenPaginateOption{
		WithJobRunnerRegistrationTokenOrder(orderBy),
		WithJobRunnerRegistrationTokenFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[52][alias]
	if nodes, err := o.NamedJobRunnerRegistrationTokens(alias); err == nil || hasTotalCount {
		pager, err := newJobRunnerRegistrationTokenPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &JobRunnerRegistrationTokenConnection{Edges: []*JobRunnerRegistrationTokenEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryJobRunnerRegistrationTokens().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) DNSVerifications(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*DNSVerificationOrder, where *DNSVerificationWhereInput,
) (*DNSVerificationConnection, error) {
	opts := []DNSVerificationPaginateOption{
		WithDNSVerificationOrder(orderBy),
		WithDNSVerificationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[53][alias]
	if nodes, err := o.NamedDNSVerifications(alias); err == nil || hasTotalCount {
		pager, err := newDNSVerificationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &DNSVerificationConnection{Edges: []*DNSVerificationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryDNSVerifications().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) JobTemplates(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*JobTemplateOrder, where *JobTemplateWhereInput,
) (*JobTemplateConnection, error) {
	opts := []JobTemplatePaginateOption{
		WithJobTemplateOrder(orderBy),
		WithJobTemplateFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[54][alias]
	if nodes, err := o.NamedJobTemplates(alias); err == nil || hasTotalCount {
		pager, err := newJobTemplatePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &JobTemplateConnection{Edges: []*JobTemplateEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryJobTemplates().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ScheduledJobs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScheduledJobOrder, where *ScheduledJobWhereInput,
) (*ScheduledJobConnection, error) {
	opts := []ScheduledJobPaginateOption{
		WithScheduledJobOrder(orderBy),
		WithScheduledJobFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[55][alias]
	if nodes, err := o.NamedScheduledJobs(alias); err == nil || hasTotalCount {
		pager, err := newScheduledJobPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScheduledJobConnection{Edges: []*ScheduledJobEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryScheduledJobs().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) JobResults(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*JobResultOrder, where *JobResultWhereInput,
) (*JobResultConnection, error) {
	opts := []JobResultPaginateOption{
		WithJobResultOrder(orderBy),
		WithJobResultFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[56][alias]
	if nodes, err := o.NamedJobResults(alias); err == nil || hasTotalCount {
		pager, err := newJobResultPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &JobResultConnection{Edges: []*JobResultEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryJobResults().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) ScheduledJobRuns(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScheduledJobRunOrder, where *ScheduledJobRunWhereInput,
) (*ScheduledJobRunConnection, error) {
	opts := []ScheduledJobRunPaginateOption{
		WithScheduledJobRunOrder(orderBy),
		WithScheduledJobRunFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[57][alias]
	if nodes, err := o.NamedScheduledJobRuns(alias); err == nil || hasTotalCount {
		pager, err := newScheduledJobRunPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScheduledJobRunConnection{Edges: []*ScheduledJobRunEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryScheduledJobRuns().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) TrustCenters(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TrustCenterOrder, where *TrustCenterWhereInput,
) (*TrustCenterConnection, error) {
	opts := []TrustCenterPaginateOption{
		WithTrustCenterOrder(orderBy),
		WithTrustCenterFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[58][alias]
	if nodes, err := o.NamedTrustCenters(alias); err == nil || hasTotalCount {
		pager, err := newTrustCenterPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TrustCenterConnection{Edges: []*TrustCenterEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryTrustCenters().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Assets(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*AssetOrder, where *AssetWhereInput,
) (*AssetConnection, error) {
	opts := []AssetPaginateOption{
		WithAssetOrder(orderBy),
		WithAssetFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[59][alias]
	if nodes, err := o.NamedAssets(alias); err == nil || hasTotalCount {
		pager, err := newAssetPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &AssetConnection{Edges: []*AssetEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryAssets().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Scans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScanOrder, where *ScanWhereInput,
) (*ScanConnection, error) {
	opts := []ScanPaginateOption{
		WithScanOrder(orderBy),
		WithScanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[60][alias]
	if nodes, err := o.NamedScans(alias); err == nil || hasTotalCount {
		pager, err := newScanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScanConnection{Edges: []*ScanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryScans().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Subprocessors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubprocessorOrder, where *SubprocessorWhereInput,
) (*SubprocessorConnection, error) {
	opts := []SubprocessorPaginateOption{
		WithSubprocessorOrder(orderBy),
		WithSubprocessorFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[61][alias]
	if nodes, err := o.NamedSubprocessors(alias); err == nil || hasTotalCount {
		pager, err := newSubprocessorPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubprocessorConnection{Edges: []*SubprocessorEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QuerySubprocessors().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Exports(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ExportOrder, where *ExportWhereInput,
) (*ExportConnection, error) {
	opts := []ExportPaginateOption{
		WithExportOrder(orderBy),
		WithExportFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[62][alias]
	if nodes, err := o.NamedExports(alias); err == nil || hasTotalCount {
		pager, err := newExportPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ExportConnection{Edges: []*ExportEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryExports().Paginate(ctx, after, first, before, last, opts...)
}

func (o *Organization) Members(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*OrgMembershipOrder, where *OrgMembershipWhereInput,
) (*OrgMembershipConnection, error) {
	opts := []OrgMembershipPaginateOption{
		WithOrgMembershipOrder(orderBy),
		WithOrgMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[63][alias]
	if nodes, err := o.NamedMembers(alias); err == nil || hasTotalCount {
		pager, err := newOrgMembershipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrgMembershipConnection{Edges: []*OrgMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryMembers().Paginate(ctx, after, first, before, last, opts...)
}

func (os *OrganizationSetting) Organization(ctx context.Context) (*Organization, error) {
	result, err := os.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = os.QueryOrganization().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (os *OrganizationSetting) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := os.Edges.totalCount[1][alias]
	if nodes, err := os.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return os.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (pat *PersonalAccessToken) Owner(ctx context.Context) (*User, error) {
	result, err := pat.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pat.QueryOwner().Only(ctx)
	}
	return result, err
}

func (pat *PersonalAccessToken) Organizations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*OrganizationOrder, where *OrganizationWhereInput,
) (*OrganizationConnection, error) {
	opts := []OrganizationPaginateOption{
		WithOrganizationOrder(orderBy),
		WithOrganizationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pat.Edges.totalCount[1][alias]
	if nodes, err := pat.NamedOrganizations(alias); err == nil || hasTotalCount {
		pager, err := newOrganizationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrganizationConnection{Edges: []*OrganizationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pat.QueryOrganizations().Paginate(ctx, after, first, before, last, opts...)
}

func (pat *PersonalAccessToken) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pat.Edges.totalCount[2][alias]
	if nodes, err := pat.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pat.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) Owner(ctx context.Context) (*Organization, error) {
	result, err := pr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Procedure) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[1][alias]
	if nodes, err := pr.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[2][alias]
	if nodes, err := pr.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) Approver(ctx context.Context) (*Group, error) {
	result, err := pr.Edges.ApproverOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryApprover().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Procedure) Delegate(ctx context.Context) (*Group, error) {
	result, err := pr.Edges.DelegateOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryDelegate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Procedure) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[5][alias]
	if nodes, err := pr.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[6][alias]
	if nodes, err := pr.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[7][alias]
	if nodes, err := pr.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[8][alias]
	if nodes, err := pr.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) Narratives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[9][alias]
	if nodes, err := pr.NamedNarratives(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryNarratives().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[10][alias]
	if nodes, err := pr.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Procedure) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[11][alias]
	if nodes, err := pr.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Owner(ctx context.Context) (*Organization, error) {
	result, err := pr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Program) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[1][alias]
	if nodes, err := pr.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[2][alias]
	if nodes, err := pr.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Viewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[3][alias]
	if nodes, err := pr.NamedViewers(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[4][alias]
	if nodes, err := pr.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[5][alias]
	if nodes, err := pr.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) ControlObjectives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[6][alias]
	if nodes, err := pr.NamedControlObjectives(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryControlObjectives().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[7][alias]
	if nodes, err := pr.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[8][alias]
	if nodes, err := pr.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[9][alias]
	if nodes, err := pr.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[10][alias]
	if nodes, err := pr.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Notes(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NoteOrder, where *NoteWhereInput,
) (*NoteConnection, error) {
	opts := []NotePaginateOption{
		WithNoteOrder(orderBy),
		WithNoteFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[11][alias]
	if nodes, err := pr.NamedNotes(alias); err == nil || hasTotalCount {
		pager, err := newNotePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NoteConnection{Edges: []*NoteEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryNotes().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[12][alias]
	if nodes, err := pr.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Evidence(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EvidenceOrder, where *EvidenceWhereInput,
) (*EvidenceConnection, error) {
	opts := []EvidencePaginateOption{
		WithEvidenceOrder(orderBy),
		WithEvidenceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[13][alias]
	if nodes, err := pr.NamedEvidence(alias); err == nil || hasTotalCount {
		pager, err := newEvidencePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EvidenceConnection{Edges: []*EvidenceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryEvidence().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Narratives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[14][alias]
	if nodes, err := pr.NamedNarratives(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryNarratives().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) ActionPlans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ActionPlanOrder, where *ActionPlanWhereInput,
) (*ActionPlanConnection, error) {
	opts := []ActionPlanPaginateOption{
		WithActionPlanOrder(orderBy),
		WithActionPlanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[15][alias]
	if nodes, err := pr.NamedActionPlans(alias); err == nil || hasTotalCount {
		pager, err := newActionPlanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ActionPlanConnection{Edges: []*ActionPlanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryActionPlans().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Users(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[16][alias]
	if nodes, err := pr.NamedUsers(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryUsers().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Program) Members(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramMembershipOrder, where *ProgramMembershipWhereInput,
) (*ProgramMembershipConnection, error) {
	opts := []ProgramMembershipPaginateOption{
		WithProgramMembershipOrder(orderBy),
		WithProgramMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[17][alias]
	if nodes, err := pr.NamedMembers(alias); err == nil || hasTotalCount {
		pager, err := newProgramMembershipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramMembershipConnection{Edges: []*ProgramMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryMembers().Paginate(ctx, after, first, before, last, opts...)
}

func (pm *ProgramMembership) Program(ctx context.Context) (*Program, error) {
	result, err := pm.Edges.ProgramOrErr()
	if IsNotLoaded(err) {
		result, err = pm.QueryProgram().Only(ctx)
	}
	return result, err
}

func (pm *ProgramMembership) User(ctx context.Context) (*User, error) {
	result, err := pm.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pm.QueryUser().Only(ctx)
	}
	return result, err
}

func (r *Risk) Owner(ctx context.Context) (*Organization, error) {
	result, err := r.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Risk) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[1][alias]
	if nodes, err := r.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[2][alias]
	if nodes, err := r.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Viewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[3][alias]
	if nodes, err := r.NamedViewers(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[4][alias]
	if nodes, err := r.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[5][alias]
	if nodes, err := r.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[6][alias]
	if nodes, err := r.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[7][alias]
	if nodes, err := r.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[8][alias]
	if nodes, err := r.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) ActionPlans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ActionPlanOrder, where *ActionPlanWhereInput,
) (*ActionPlanConnection, error) {
	opts := []ActionPlanPaginateOption{
		WithActionPlanOrder(orderBy),
		WithActionPlanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[9][alias]
	if nodes, err := r.NamedActionPlans(alias); err == nil || hasTotalCount {
		pager, err := newActionPlanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ActionPlanConnection{Edges: []*ActionPlanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryActionPlans().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[10][alias]
	if nodes, err := r.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Assets(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*AssetOrder, where *AssetWhereInput,
) (*AssetConnection, error) {
	opts := []AssetPaginateOption{
		WithAssetOrder(orderBy),
		WithAssetFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[11][alias]
	if nodes, err := r.NamedAssets(alias); err == nil || hasTotalCount {
		pager, err := newAssetPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &AssetConnection{Edges: []*AssetEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryAssets().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Entities(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EntityOrder, where *EntityWhereInput,
) (*EntityConnection, error) {
	opts := []EntityPaginateOption{
		WithEntityOrder(orderBy),
		WithEntityFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[12][alias]
	if nodes, err := r.NamedEntities(alias); err == nil || hasTotalCount {
		pager, err := newEntityPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EntityConnection{Edges: []*EntityEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryEntities().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Scans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScanOrder, where *ScanWhereInput,
) (*ScanConnection, error) {
	opts := []ScanPaginateOption{
		WithScanOrder(orderBy),
		WithScanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[13][alias]
	if nodes, err := r.NamedScans(alias); err == nil || hasTotalCount {
		pager, err := newScanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScanConnection{Edges: []*ScanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryScans().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Risk) Stakeholder(ctx context.Context) (*Group, error) {
	result, err := r.Edges.StakeholderOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryStakeholder().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Risk) Delegate(ctx context.Context) (*Group, error) {
	result, err := r.Edges.DelegateOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryDelegate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Scan) Owner(ctx context.Context) (*Organization, error) {
	result, err := s.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Scan) BlockedGroups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[1][alias]
	if nodes, err := s.NamedBlockedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryBlockedGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Scan) Editors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[2][alias]
	if nodes, err := s.NamedEditors(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryEditors().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Scan) Viewers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[3][alias]
	if nodes, err := s.NamedViewers(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryViewers().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Scan) Assets(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*AssetOrder, where *AssetWhereInput,
) (*AssetConnection, error) {
	opts := []AssetPaginateOption{
		WithAssetOrder(orderBy),
		WithAssetFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[4][alias]
	if nodes, err := s.NamedAssets(alias); err == nil || hasTotalCount {
		pager, err := newAssetPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &AssetConnection{Edges: []*AssetEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryAssets().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Scan) Entities(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EntityOrder, where *EntityWhereInput,
) (*EntityConnection, error) {
	opts := []EntityPaginateOption{
		WithEntityOrder(orderBy),
		WithEntityFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[5][alias]
	if nodes, err := s.NamedEntities(alias); err == nil || hasTotalCount {
		pager, err := newEntityPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EntityConnection{Edges: []*EntityEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryEntities().Paginate(ctx, after, first, before, last, opts...)
}

func (sj *ScheduledJob) Owner(ctx context.Context) (*Organization, error) {
	result, err := sj.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = sj.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sj *ScheduledJob) JobTemplate(ctx context.Context) (*JobTemplate, error) {
	result, err := sj.Edges.JobTemplateOrErr()
	if IsNotLoaded(err) {
		result, err = sj.QueryJobTemplate().Only(ctx)
	}
	return result, err
}

func (sj *ScheduledJob) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := sj.Edges.totalCount[2][alias]
	if nodes, err := sj.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return sj.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (sj *ScheduledJob) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := sj.Edges.totalCount[3][alias]
	if nodes, err := sj.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return sj.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (sj *ScheduledJob) JobRunner(ctx context.Context) (*JobRunner, error) {
	result, err := sj.Edges.JobRunnerOrErr()
	if IsNotLoaded(err) {
		result, err = sj.QueryJobRunner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sjr *ScheduledJobRun) Owner(ctx context.Context) (*Organization, error) {
	result, err := sjr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = sjr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sjr *ScheduledJobRun) ScheduledJob(ctx context.Context) (*ScheduledJob, error) {
	result, err := sjr.Edges.ScheduledJobOrErr()
	if IsNotLoaded(err) {
		result, err = sjr.QueryScheduledJob().Only(ctx)
	}
	return result, err
}

func (sjr *ScheduledJobRun) JobRunner(ctx context.Context) (*JobRunner, error) {
	result, err := sjr.Edges.JobRunnerOrErr()
	if IsNotLoaded(err) {
		result, err = sjr.QueryJobRunner().Only(ctx)
	}
	return result, err
}

func (s *Standard) Owner(ctx context.Context) (*Organization, error) {
	result, err := s.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Standard) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[1][alias]
	if nodes, err := s.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) Evidence(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EvidenceOrder, where *EvidenceWhereInput,
) (*EvidenceConnection, error) {
	opts := []EvidencePaginateOption{
		WithEvidenceOrder(orderBy),
		WithEvidenceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[0][alias]
	if nodes, err := s.NamedEvidence(alias); err == nil || hasTotalCount {
		pager, err := newEvidencePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EvidenceConnection{Edges: []*EvidenceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryEvidence().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) ControlObjectives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[1][alias]
	if nodes, err := s.NamedControlObjectives(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryControlObjectives().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[2][alias]
	if nodes, err := s.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) Narratives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NarrativeOrder, where *NarrativeWhereInput,
) (*NarrativeConnection, error) {
	opts := []NarrativePaginateOption{
		WithNarrativeOrder(orderBy),
		WithNarrativeFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[3][alias]
	if nodes, err := s.NamedNarratives(alias); err == nil || hasTotalCount {
		pager, err := newNarrativePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NarrativeConnection{Edges: []*NarrativeEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryNarratives().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[4][alias]
	if nodes, err := s.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) ActionPlans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ActionPlanOrder, where *ActionPlanWhereInput,
) (*ActionPlanConnection, error) {
	opts := []ActionPlanPaginateOption{
		WithActionPlanOrder(orderBy),
		WithActionPlanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[5][alias]
	if nodes, err := s.NamedActionPlans(alias); err == nil || hasTotalCount {
		pager, err := newActionPlanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ActionPlanConnection{Edges: []*ActionPlanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryActionPlans().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[6][alias]
	if nodes, err := s.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[7][alias]
	if nodes, err := s.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) ControlOwner(ctx context.Context) (*Group, error) {
	result, err := s.Edges.ControlOwnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryControlOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subcontrol) Delegate(ctx context.Context) (*Group, error) {
	result, err := s.Edges.DelegateOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryDelegate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subcontrol) Owner(ctx context.Context) (*Organization, error) {
	result, err := s.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subcontrol) Control(ctx context.Context) (*Control, error) {
	result, err := s.Edges.ControlOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryControl().Only(ctx)
	}
	return result, err
}

func (s *Subcontrol) ControlImplementations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlImplementationOrder, where *ControlImplementationWhereInput,
) (*ControlImplementationConnection, error) {
	opts := []ControlImplementationPaginateOption{
		WithControlImplementationOrder(orderBy),
		WithControlImplementationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[12][alias]
	if nodes, err := s.NamedControlImplementations(alias); err == nil || hasTotalCount {
		pager, err := newControlImplementationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlImplementationConnection{Edges: []*ControlImplementationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryControlImplementations().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subcontrol) ScheduledJobs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ScheduledJobOrder, where *ScheduledJobWhereInput,
) (*ScheduledJobConnection, error) {
	opts := []ScheduledJobPaginateOption{
		WithScheduledJobOrder(orderBy),
		WithScheduledJobFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[13][alias]
	if nodes, err := s.NamedScheduledJobs(alias); err == nil || hasTotalCount {
		pager, err := newScheduledJobPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ScheduledJobConnection{Edges: []*ScheduledJobEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryScheduledJobs().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subprocessor) Owner(ctx context.Context) (*Organization, error) {
	result, err := s.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subprocessor) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[1][alias]
	if nodes, err := s.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subprocessor) LogoFile(ctx context.Context) (*File, error) {
	result, err := s.Edges.LogoFileOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryLogoFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subprocessor) TrustCenterSubprocessors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TrustCenterSubprocessorOrder, where *TrustCenterSubprocessorWhereInput,
) (*TrustCenterSubprocessorConnection, error) {
	opts := []TrustCenterSubprocessorPaginateOption{
		WithTrustCenterSubprocessorOrder(orderBy),
		WithTrustCenterSubprocessorFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[3][alias]
	if nodes, err := s.NamedTrustCenterSubprocessors(alias); err == nil || hasTotalCount {
		pager, err := newTrustCenterSubprocessorPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TrustCenterSubprocessorConnection{Edges: []*TrustCenterSubprocessorEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryTrustCenterSubprocessors().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Subscriber) Owner(ctx context.Context) (*Organization, error) {
	result, err := s.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Subscriber) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[1][alias]
	if nodes, err := s.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (ts *TFASetting) Owner(ctx context.Context) (*User, error) {
	result, err := ts.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ts.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Owner(ctx context.Context) (*Organization, error) {
	result, err := t.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Assigner(ctx context.Context) (*User, error) {
	result, err := t.Edges.AssignerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryAssigner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Assignee(ctx context.Context) (*User, error) {
	result, err := t.Edges.AssigneeOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryAssignee().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Comments(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*NoteOrder, where *NoteWhereInput,
) (*NoteConnection, error) {
	opts := []NotePaginateOption{
		WithNoteOrder(orderBy),
		WithNoteFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[3][alias]
	if nodes, err := t.NamedComments(alias); err == nil || hasTotalCount {
		pager, err := newNotePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &NoteConnection{Edges: []*NoteEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryComments().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) Groups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[4][alias]
	if nodes, err := t.NamedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) InternalPolicies(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*InternalPolicyOrder, where *InternalPolicyWhereInput,
) (*InternalPolicyConnection, error) {
	opts := []InternalPolicyPaginateOption{
		WithInternalPolicyOrder(orderBy),
		WithInternalPolicyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[5][alias]
	if nodes, err := t.NamedInternalPolicies(alias); err == nil || hasTotalCount {
		pager, err := newInternalPolicyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InternalPolicyConnection{Edges: []*InternalPolicyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryInternalPolicies().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) Procedures(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProcedureOrder, where *ProcedureWhereInput,
) (*ProcedureConnection, error) {
	opts := []ProcedurePaginateOption{
		WithProcedureOrder(orderBy),
		WithProcedureFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[6][alias]
	if nodes, err := t.NamedProcedures(alias); err == nil || hasTotalCount {
		pager, err := newProcedurePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProcedureConnection{Edges: []*ProcedureEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryProcedures().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) Controls(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlOrder, where *ControlWhereInput,
) (*ControlConnection, error) {
	opts := []ControlPaginateOption{
		WithControlOrder(orderBy),
		WithControlFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[7][alias]
	if nodes, err := t.NamedControls(alias); err == nil || hasTotalCount {
		pager, err := newControlPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlConnection{Edges: []*ControlEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryControls().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[8][alias]
	if nodes, err := t.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) ControlObjectives(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ControlObjectiveOrder, where *ControlObjectiveWhereInput,
) (*ControlObjectiveConnection, error) {
	opts := []ControlObjectivePaginateOption{
		WithControlObjectiveOrder(orderBy),
		WithControlObjectiveFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[9][alias]
	if nodes, err := t.NamedControlObjectives(alias); err == nil || hasTotalCount {
		pager, err := newControlObjectivePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ControlObjectiveConnection{Edges: []*ControlObjectiveEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryControlObjectives().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[10][alias]
	if nodes, err := t.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) Risks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RiskOrder, where *RiskWhereInput,
) (*RiskConnection, error) {
	opts := []RiskPaginateOption{
		WithRiskOrder(orderBy),
		WithRiskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[11][alias]
	if nodes, err := t.NamedRisks(alias); err == nil || hasTotalCount {
		pager, err := newRiskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RiskConnection{Edges: []*RiskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryRisks().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) Evidence(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EvidenceOrder, where *EvidenceWhereInput,
) (*EvidenceConnection, error) {
	opts := []EvidencePaginateOption{
		WithEvidenceOrder(orderBy),
		WithEvidenceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[12][alias]
	if nodes, err := t.NamedEvidence(alias); err == nil || hasTotalCount {
		pager, err := newEvidencePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EvidenceConnection{Edges: []*EvidenceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryEvidence().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Template) Owner(ctx context.Context) (*Organization, error) {
	result, err := t.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Template) Documents(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*DocumentDataOrder, where *DocumentDataWhereInput,
) (*DocumentDataConnection, error) {
	opts := []DocumentDataPaginateOption{
		WithDocumentDataOrder(orderBy),
		WithDocumentDataFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[1][alias]
	if nodes, err := t.NamedDocuments(alias); err == nil || hasTotalCount {
		pager, err := newDocumentDataPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &DocumentDataConnection{Edges: []*DocumentDataEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryDocuments().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Template) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[2][alias]
	if nodes, err := t.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (tc *TrustCenter) Owner(ctx context.Context) (*Organization, error) {
	result, err := tc.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = tc.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tc *TrustCenter) CustomDomain(ctx context.Context) (*CustomDomain, error) {
	result, err := tc.Edges.CustomDomainOrErr()
	if IsNotLoaded(err) {
		result, err = tc.QueryCustomDomain().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tc *TrustCenter) Setting(ctx context.Context) (*TrustCenterSetting, error) {
	result, err := tc.Edges.SettingOrErr()
	if IsNotLoaded(err) {
		result, err = tc.QuerySetting().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tc *TrustCenter) TrustCenterSubprocessors(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TrustCenterSubprocessorOrder, where *TrustCenterSubprocessorWhereInput,
) (*TrustCenterSubprocessorConnection, error) {
	opts := []TrustCenterSubprocessorPaginateOption{
		WithTrustCenterSubprocessorOrder(orderBy),
		WithTrustCenterSubprocessorFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := tc.Edges.totalCount[3][alias]
	if nodes, err := tc.NamedTrustCenterSubprocessors(alias); err == nil || hasTotalCount {
		pager, err := newTrustCenterSubprocessorPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TrustCenterSubprocessorConnection{Edges: []*TrustCenterSubprocessorEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return tc.QueryTrustCenterSubprocessors().Paginate(ctx, after, first, before, last, opts...)
}

func (tcs *TrustCenterSetting) TrustCenter(ctx context.Context) (*TrustCenter, error) {
	result, err := tcs.Edges.TrustCenterOrErr()
	if IsNotLoaded(err) {
		result, err = tcs.QueryTrustCenter().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tcs *TrustCenterSetting) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := tcs.Edges.totalCount[1][alias]
	if nodes, err := tcs.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return tcs.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (tcs *TrustCenterSetting) LogoFile(ctx context.Context) (*File, error) {
	result, err := tcs.Edges.LogoFileOrErr()
	if IsNotLoaded(err) {
		result, err = tcs.QueryLogoFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tcs *TrustCenterSetting) FaviconFile(ctx context.Context) (*File, error) {
	result, err := tcs.Edges.FaviconFileOrErr()
	if IsNotLoaded(err) {
		result, err = tcs.QueryFaviconFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tcs *TrustCenterSubprocessor) TrustCenter(ctx context.Context) (*TrustCenter, error) {
	result, err := tcs.Edges.TrustCenterOrErr()
	if IsNotLoaded(err) {
		result, err = tcs.QueryTrustCenter().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tcs *TrustCenterSubprocessor) Subprocessor(ctx context.Context) (*Subprocessor, error) {
	result, err := tcs.Edges.SubprocessorOrErr()
	if IsNotLoaded(err) {
		result, err = tcs.QuerySubprocessor().Only(ctx)
	}
	return result, err
}

func (u *User) PersonalAccessTokens(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*PersonalAccessTokenOrder, where *PersonalAccessTokenWhereInput,
) (*PersonalAccessTokenConnection, error) {
	opts := []PersonalAccessTokenPaginateOption{
		WithPersonalAccessTokenOrder(orderBy),
		WithPersonalAccessTokenFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedPersonalAccessTokens(alias); err == nil || hasTotalCount {
		pager, err := newPersonalAccessTokenPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &PersonalAccessTokenConnection{Edges: []*PersonalAccessTokenEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryPersonalAccessTokens().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) TfaSettings(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TFASettingOrder, where *TFASettingWhereInput,
) (*TFASettingConnection, error) {
	opts := []TFASettingPaginateOption{
		WithTFASettingOrder(orderBy),
		WithTFASettingFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[1][alias]
	if nodes, err := u.NamedTfaSettings(alias); err == nil || hasTotalCount {
		pager, err := newTFASettingPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TFASettingConnection{Edges: []*TFASettingEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryTfaSettings().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Setting(ctx context.Context) (*UserSetting, error) {
	result, err := u.Edges.SettingOrErr()
	if IsNotLoaded(err) {
		result, err = u.QuerySetting().Only(ctx)
	}
	return result, err
}

func (u *User) Groups(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupOrder, where *GroupWhereInput,
) (*GroupConnection, error) {
	opts := []GroupPaginateOption{
		WithGroupOrder(orderBy),
		WithGroupFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[3][alias]
	if nodes, err := u.NamedGroups(alias); err == nil || hasTotalCount {
		pager, err := newGroupPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupConnection{Edges: []*GroupEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryGroups().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Organizations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*OrganizationOrder, where *OrganizationWhereInput,
) (*OrganizationConnection, error) {
	opts := []OrganizationPaginateOption{
		WithOrganizationOrder(orderBy),
		WithOrganizationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[4][alias]
	if nodes, err := u.NamedOrganizations(alias); err == nil || hasTotalCount {
		pager, err := newOrganizationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrganizationConnection{Edges: []*OrganizationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryOrganizations().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Webauthns(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *WebauthnOrder, where *WebauthnWhereInput,
) (*WebauthnConnection, error) {
	opts := []WebauthnPaginateOption{
		WithWebauthnOrder(orderBy),
		WithWebauthnFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[5][alias]
	if nodes, err := u.NamedWebauthns(alias); err == nil || hasTotalCount {
		pager, err := newWebauthnPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &WebauthnConnection{Edges: []*WebauthnEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryWebauthns().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[6][alias]
	if nodes, err := u.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) AvatarFile(ctx context.Context) (*File, error) {
	result, err := u.Edges.AvatarFileOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryAvatarFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Events(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*EventOrder, where *EventWhereInput,
) (*EventConnection, error) {
	opts := []EventPaginateOption{
		WithEventOrder(orderBy),
		WithEventFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[8][alias]
	if nodes, err := u.NamedEvents(alias); err == nil || hasTotalCount {
		pager, err := newEventPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &EventConnection{Edges: []*EventEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryEvents().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) ActionPlans(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ActionPlanOrder, where *ActionPlanWhereInput,
) (*ActionPlanConnection, error) {
	opts := []ActionPlanPaginateOption{
		WithActionPlanOrder(orderBy),
		WithActionPlanFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[9][alias]
	if nodes, err := u.NamedActionPlans(alias); err == nil || hasTotalCount {
		pager, err := newActionPlanPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ActionPlanConnection{Edges: []*ActionPlanEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryActionPlans().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Subcontrols(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*SubcontrolOrder, where *SubcontrolWhereInput,
) (*SubcontrolConnection, error) {
	opts := []SubcontrolPaginateOption{
		WithSubcontrolOrder(orderBy),
		WithSubcontrolFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[10][alias]
	if nodes, err := u.NamedSubcontrols(alias); err == nil || hasTotalCount {
		pager, err := newSubcontrolPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &SubcontrolConnection{Edges: []*SubcontrolEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QuerySubcontrols().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) AssignerTasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[11][alias]
	if nodes, err := u.NamedAssignerTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryAssignerTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) AssigneeTasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[12][alias]
	if nodes, err := u.NamedAssigneeTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryAssigneeTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Programs(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramOrder, where *ProgramWhereInput,
) (*ProgramConnection, error) {
	opts := []ProgramPaginateOption{
		WithProgramOrder(orderBy),
		WithProgramFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[13][alias]
	if nodes, err := u.NamedPrograms(alias); err == nil || hasTotalCount {
		pager, err := newProgramPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramConnection{Edges: []*ProgramEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryPrograms().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) GroupMemberships(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*GroupMembershipOrder, where *GroupMembershipWhereInput,
) (*GroupMembershipConnection, error) {
	opts := []GroupMembershipPaginateOption{
		WithGroupMembershipOrder(orderBy),
		WithGroupMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[14][alias]
	if nodes, err := u.NamedGroupMemberships(alias); err == nil || hasTotalCount {
		pager, err := newGroupMembershipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &GroupMembershipConnection{Edges: []*GroupMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryGroupMemberships().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) OrgMemberships(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*OrgMembershipOrder, where *OrgMembershipWhereInput,
) (*OrgMembershipConnection, error) {
	opts := []OrgMembershipPaginateOption{
		WithOrgMembershipOrder(orderBy),
		WithOrgMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[15][alias]
	if nodes, err := u.NamedOrgMemberships(alias); err == nil || hasTotalCount {
		pager, err := newOrgMembershipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrgMembershipConnection{Edges: []*OrgMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryOrgMemberships().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) ProgramMemberships(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ProgramMembershipOrder, where *ProgramMembershipWhereInput,
) (*ProgramMembershipConnection, error) {
	opts := []ProgramMembershipPaginateOption{
		WithProgramMembershipOrder(orderBy),
		WithProgramMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[16][alias]
	if nodes, err := u.NamedProgramMemberships(alias); err == nil || hasTotalCount {
		pager, err := newProgramMembershipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProgramMembershipConnection{Edges: []*ProgramMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryProgramMemberships().Paginate(ctx, after, first, before, last, opts...)
}

func (us *UserSetting) User(ctx context.Context) (*User, error) {
	result, err := us.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = us.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (us *UserSetting) DefaultOrg(ctx context.Context) (*Organization, error) {
	result, err := us.Edges.DefaultOrgOrErr()
	if IsNotLoaded(err) {
		result, err = us.QueryDefaultOrg().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (us *UserSetting) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*FileOrder, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileOrder(orderBy),
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := us.Edges.totalCount[2][alias]
	if nodes, err := us.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return us.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (w *Webauthn) Owner(ctx context.Context) (*User, error) {
	result, err := w.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryOwner().Only(ctx)
	}
	return result, err
}
