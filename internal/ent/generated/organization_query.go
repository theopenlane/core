// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/export"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/jobresult"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterdoc"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrganizationQuery is the builder for querying Organization entities.
type OrganizationQuery struct {
	config
	ctx                                    *QueryContext
	order                                  []organization.OrderOption
	inters                                 []Interceptor
	predicates                             []predicate.Organization
	withControlCreators                    *GroupQuery
	withControlImplementationCreators      *GroupQuery
	withControlObjectiveCreators           *GroupQuery
	withEvidenceCreators                   *GroupQuery
	withGroupCreators                      *GroupQuery
	withInternalPolicyCreators             *GroupQuery
	withMappedControlCreators              *GroupQuery
	withNarrativeCreators                  *GroupQuery
	withProcedureCreators                  *GroupQuery
	withProgramCreators                    *GroupQuery
	withRiskCreators                       *GroupQuery
	withScheduledJobCreators               *GroupQuery
	withStandardCreators                   *GroupQuery
	withTemplateCreators                   *GroupQuery
	withParent                             *OrganizationQuery
	withChildren                           *OrganizationQuery
	withSetting                            *OrganizationSettingQuery
	withPersonalAccessTokens               *PersonalAccessTokenQuery
	withAPITokens                          *APITokenQuery
	withUsers                              *UserQuery
	withFiles                              *FileQuery
	withEvents                             *EventQuery
	withSecrets                            *HushQuery
	withAvatarFile                         *FileQuery
	withGroups                             *GroupQuery
	withTemplates                          *TemplateQuery
	withIntegrations                       *IntegrationQuery
	withDocuments                          *DocumentDataQuery
	withOrgSubscriptions                   *OrgSubscriptionQuery
	withOrgProducts                        *OrgProductQuery
	withOrgPrices                          *OrgPriceQuery
	withOrgModules                         *OrgModuleQuery
	withInvites                            *InviteQuery
	withSubscribers                        *SubscriberQuery
	withEntities                           *EntityQuery
	withEntityTypes                        *EntityTypeQuery
	withContacts                           *ContactQuery
	withNotes                              *NoteQuery
	withTasks                              *TaskQuery
	withPrograms                           *ProgramQuery
	withProcedures                         *ProcedureQuery
	withInternalPolicies                   *InternalPolicyQuery
	withRisks                              *RiskQuery
	withControlObjectives                  *ControlObjectiveQuery
	withNarratives                         *NarrativeQuery
	withControls                           *ControlQuery
	withSubcontrols                        *SubcontrolQuery
	withControlImplementations             *ControlImplementationQuery
	withMappedControls                     *MappedControlQuery
	withEvidence                           *EvidenceQuery
	withStandards                          *StandardQuery
	withActionPlans                        *ActionPlanQuery
	withCustomDomains                      *CustomDomainQuery
	withJobRunners                         *JobRunnerQuery
	withJobRunnerTokens                    *JobRunnerTokenQuery
	withJobRunnerRegistrationTokens        *JobRunnerRegistrationTokenQuery
	withDNSVerifications                   *DNSVerificationQuery
	withJobTemplates                       *JobTemplateQuery
	withScheduledJobs                      *ScheduledJobQuery
	withJobResults                         *JobResultQuery
	withScheduledJobRuns                   *ScheduledJobRunQuery
	withTrustCenters                       *TrustCenterQuery
	withAssets                             *AssetQuery
	withScans                              *ScanQuery
	withSubprocessors                      *SubprocessorQuery
	withExports                            *ExportQuery
	withTrustCenterDocs                    *TrustCenterDocQuery
	withMembers                            *OrgMembershipQuery
	loadTotal                              []func(context.Context, []*Organization) error
	modifiers                              []func(*sql.Selector)
	withNamedControlCreators               map[string]*GroupQuery
	withNamedControlImplementationCreators map[string]*GroupQuery
	withNamedControlObjectiveCreators      map[string]*GroupQuery
	withNamedEvidenceCreators              map[string]*GroupQuery
	withNamedGroupCreators                 map[string]*GroupQuery
	withNamedInternalPolicyCreators        map[string]*GroupQuery
	withNamedMappedControlCreators         map[string]*GroupQuery
	withNamedNarrativeCreators             map[string]*GroupQuery
	withNamedProcedureCreators             map[string]*GroupQuery
	withNamedProgramCreators               map[string]*GroupQuery
	withNamedRiskCreators                  map[string]*GroupQuery
	withNamedScheduledJobCreators          map[string]*GroupQuery
	withNamedStandardCreators              map[string]*GroupQuery
	withNamedTemplateCreators              map[string]*GroupQuery
	withNamedChildren                      map[string]*OrganizationQuery
	withNamedPersonalAccessTokens          map[string]*PersonalAccessTokenQuery
	withNamedAPITokens                     map[string]*APITokenQuery
	withNamedUsers                         map[string]*UserQuery
	withNamedFiles                         map[string]*FileQuery
	withNamedEvents                        map[string]*EventQuery
	withNamedSecrets                       map[string]*HushQuery
	withNamedGroups                        map[string]*GroupQuery
	withNamedTemplates                     map[string]*TemplateQuery
	withNamedIntegrations                  map[string]*IntegrationQuery
	withNamedDocuments                     map[string]*DocumentDataQuery
	withNamedOrgSubscriptions              map[string]*OrgSubscriptionQuery
	withNamedOrgProducts                   map[string]*OrgProductQuery
	withNamedOrgPrices                     map[string]*OrgPriceQuery
	withNamedOrgModules                    map[string]*OrgModuleQuery
	withNamedInvites                       map[string]*InviteQuery
	withNamedSubscribers                   map[string]*SubscriberQuery
	withNamedEntities                      map[string]*EntityQuery
	withNamedEntityTypes                   map[string]*EntityTypeQuery
	withNamedContacts                      map[string]*ContactQuery
	withNamedNotes                         map[string]*NoteQuery
	withNamedTasks                         map[string]*TaskQuery
	withNamedPrograms                      map[string]*ProgramQuery
	withNamedProcedures                    map[string]*ProcedureQuery
	withNamedInternalPolicies              map[string]*InternalPolicyQuery
	withNamedRisks                         map[string]*RiskQuery
	withNamedControlObjectives             map[string]*ControlObjectiveQuery
	withNamedNarratives                    map[string]*NarrativeQuery
	withNamedControls                      map[string]*ControlQuery
	withNamedSubcontrols                   map[string]*SubcontrolQuery
	withNamedControlImplementations        map[string]*ControlImplementationQuery
	withNamedMappedControls                map[string]*MappedControlQuery
	withNamedEvidence                      map[string]*EvidenceQuery
	withNamedStandards                     map[string]*StandardQuery
	withNamedActionPlans                   map[string]*ActionPlanQuery
	withNamedCustomDomains                 map[string]*CustomDomainQuery
	withNamedJobRunners                    map[string]*JobRunnerQuery
	withNamedJobRunnerTokens               map[string]*JobRunnerTokenQuery
	withNamedJobRunnerRegistrationTokens   map[string]*JobRunnerRegistrationTokenQuery
	withNamedDNSVerifications              map[string]*DNSVerificationQuery
	withNamedJobTemplates                  map[string]*JobTemplateQuery
	withNamedScheduledJobs                 map[string]*ScheduledJobQuery
	withNamedJobResults                    map[string]*JobResultQuery
	withNamedScheduledJobRuns              map[string]*ScheduledJobRunQuery
	withNamedTrustCenters                  map[string]*TrustCenterQuery
	withNamedAssets                        map[string]*AssetQuery
	withNamedScans                         map[string]*ScanQuery
	withNamedSubprocessors                 map[string]*SubprocessorQuery
	withNamedExports                       map[string]*ExportQuery
	withNamedTrustCenterDocs               map[string]*TrustCenterDocQuery
	withNamedMembers                       map[string]*OrgMembershipQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrganizationQuery builder.
func (_q *OrganizationQuery) Where(ps ...predicate.Organization) *OrganizationQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *OrganizationQuery) Limit(limit int) *OrganizationQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *OrganizationQuery) Offset(offset int) *OrganizationQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *OrganizationQuery) Unique(unique bool) *OrganizationQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *OrganizationQuery) Order(o ...organization.OrderOption) *OrganizationQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryControlCreators chains the current query on the "control_creators" edge.
func (_q *OrganizationQuery) QueryControlCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ControlCreatorsTable, organization.ControlCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlImplementationCreators chains the current query on the "control_implementation_creators" edge.
func (_q *OrganizationQuery) QueryControlImplementationCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ControlImplementationCreatorsTable, organization.ControlImplementationCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjectiveCreators chains the current query on the "control_objective_creators" edge.
func (_q *OrganizationQuery) QueryControlObjectiveCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ControlObjectiveCreatorsTable, organization.ControlObjectiveCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvidenceCreators chains the current query on the "evidence_creators" edge.
func (_q *OrganizationQuery) QueryEvidenceCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EvidenceCreatorsTable, organization.EvidenceCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroupCreators chains the current query on the "group_creators" edge.
func (_q *OrganizationQuery) QueryGroupCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.GroupCreatorsTable, organization.GroupCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicyCreators chains the current query on the "internal_policy_creators" edge.
func (_q *OrganizationQuery) QueryInternalPolicyCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.InternalPolicyCreatorsTable, organization.InternalPolicyCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMappedControlCreators chains the current query on the "mapped_control_creators" edge.
func (_q *OrganizationQuery) QueryMappedControlCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.MappedControlCreatorsTable, organization.MappedControlCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarrativeCreators chains the current query on the "narrative_creators" edge.
func (_q *OrganizationQuery) QueryNarrativeCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.NarrativeCreatorsTable, organization.NarrativeCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedureCreators chains the current query on the "procedure_creators" edge.
func (_q *OrganizationQuery) QueryProcedureCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ProcedureCreatorsTable, organization.ProcedureCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgramCreators chains the current query on the "program_creators" edge.
func (_q *OrganizationQuery) QueryProgramCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ProgramCreatorsTable, organization.ProgramCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskCreators chains the current query on the "risk_creators" edge.
func (_q *OrganizationQuery) QueryRiskCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.RiskCreatorsTable, organization.RiskCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduledJobCreators chains the current query on the "scheduled_job_creators" edge.
func (_q *OrganizationQuery) QueryScheduledJobCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ScheduledJobCreatorsTable, organization.ScheduledJobCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStandardCreators chains the current query on the "standard_creators" edge.
func (_q *OrganizationQuery) QueryStandardCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.StandardCreatorsTable, organization.StandardCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplateCreators chains the current query on the "template_creators" edge.
func (_q *OrganizationQuery) QueryTemplateCreators() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.TemplateCreatorsTable, organization.TemplateCreatorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (_q *OrganizationQuery) QueryParent() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organization.ParentTable, organization.ParentColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (_q *OrganizationQuery) QueryChildren() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ChildrenTable, organization.ChildrenColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySetting chains the current query on the "setting" edge.
func (_q *OrganizationQuery) QuerySetting() *OrganizationSettingQuery {
	query := (&OrganizationSettingClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(organizationsetting.Table, organizationsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.SettingTable, organization.SettingColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrganizationSetting
		step.Edge.Schema = schemaConfig.OrganizationSetting
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPersonalAccessTokens chains the current query on the "personal_access_tokens" edge.
func (_q *OrganizationQuery) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(personalaccesstoken.Table, personalaccesstoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.PersonalAccessTokensTable, organization.PersonalAccessTokensPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.OrganizationPersonalAccessTokens
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAPITokens chains the current query on the "api_tokens" edge.
func (_q *OrganizationQuery) QueryAPITokens() *APITokenQuery {
	query := (&APITokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.APITokensTable, organization.APITokensColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.APIToken
		step.Edge.Schema = schemaConfig.APIToken
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (_q *OrganizationQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, organization.UsersTable, organization.UsersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (_q *OrganizationQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.FilesTable, organization.FilesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.OrganizationFiles
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (_q *OrganizationQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.EventsTable, organization.EventsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.OrganizationEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySecrets chains the current query on the "secrets" edge.
func (_q *OrganizationQuery) QuerySecrets() *HushQuery {
	query := (&HushClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(hush.Table, hush.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.SecretsTable, organization.SecretsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Hush
		step.Edge.Schema = schemaConfig.Hush
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAvatarFile chains the current query on the "avatar_file" edge.
func (_q *OrganizationQuery) QueryAvatarFile() *FileQuery {
	query := (&FileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organization.AvatarFileTable, organization.AvatarFileColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.Organization
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroups chains the current query on the "groups" edge.
func (_q *OrganizationQuery) QueryGroups() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.GroupsTable, organization.GroupsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplates chains the current query on the "templates" edge.
func (_q *OrganizationQuery) QueryTemplates() *TemplateQuery {
	query := (&TemplateClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.TemplatesTable, organization.TemplatesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.Template
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegrations chains the current query on the "integrations" edge.
func (_q *OrganizationQuery) QueryIntegrations() *IntegrationQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(integration.Table, integration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.IntegrationsTable, organization.IntegrationsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.Integration
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocuments chains the current query on the "documents" edge.
func (_q *OrganizationQuery) QueryDocuments() *DocumentDataQuery {
	query := (&DocumentDataClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(documentdata.Table, documentdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.DocumentsTable, organization.DocumentsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.DocumentData
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgSubscriptions chains the current query on the "org_subscriptions" edge.
func (_q *OrganizationQuery) QueryOrgSubscriptions() *OrgSubscriptionQuery {
	query := (&OrgSubscriptionClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(orgsubscription.Table, orgsubscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OrgSubscriptionsTable, organization.OrgSubscriptionsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrgSubscription
		step.Edge.Schema = schemaConfig.OrgSubscription
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgProducts chains the current query on the "org_products" edge.
func (_q *OrganizationQuery) QueryOrgProducts() *OrgProductQuery {
	query := (&OrgProductClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(orgproduct.Table, orgproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OrgProductsTable, organization.OrgProductsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrgProduct
		step.Edge.Schema = schemaConfig.OrgProduct
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgPrices chains the current query on the "org_prices" edge.
func (_q *OrganizationQuery) QueryOrgPrices() *OrgPriceQuery {
	query := (&OrgPriceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(orgprice.Table, orgprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OrgPricesTable, organization.OrgPricesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrgPrice
		step.Edge.Schema = schemaConfig.OrgPrice
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgModules chains the current query on the "org_modules" edge.
func (_q *OrganizationQuery) QueryOrgModules() *OrgModuleQuery {
	query := (&OrgModuleClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(orgmodule.Table, orgmodule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OrgModulesTable, organization.OrgModulesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrgModule
		step.Edge.Schema = schemaConfig.OrgModule
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvites chains the current query on the "invites" edge.
func (_q *OrganizationQuery) QueryInvites() *InviteQuery {
	query := (&InviteClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.InvitesTable, organization.InvitesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Invite
		step.Edge.Schema = schemaConfig.Invite
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribers chains the current query on the "subscribers" edge.
func (_q *OrganizationQuery) QuerySubscribers() *SubscriberQuery {
	query := (&SubscriberClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(subscriber.Table, subscriber.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.SubscribersTable, organization.SubscribersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Subscriber
		step.Edge.Schema = schemaConfig.Subscriber
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntities chains the current query on the "entities" edge.
func (_q *OrganizationQuery) QueryEntities() *EntityQuery {
	query := (&EntityClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EntitiesTable, organization.EntitiesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.Entity
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntityTypes chains the current query on the "entity_types" edge.
func (_q *OrganizationQuery) QueryEntityTypes() *EntityTypeQuery {
	query := (&EntityTypeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(entitytype.Table, entitytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EntityTypesTable, organization.EntityTypesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.EntityType
		step.Edge.Schema = schemaConfig.EntityType
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContacts chains the current query on the "contacts" edge.
func (_q *OrganizationQuery) QueryContacts() *ContactQuery {
	query := (&ContactClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ContactsTable, organization.ContactsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Contact
		step.Edge.Schema = schemaConfig.Contact
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotes chains the current query on the "notes" edge.
func (_q *OrganizationQuery) QueryNotes() *NoteQuery {
	query := (&NoteClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(note.Table, note.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.NotesTable, organization.NotesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Note
		step.Edge.Schema = schemaConfig.Note
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (_q *OrganizationQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.TasksTable, organization.TasksColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (_q *OrganizationQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ProgramsTable, organization.ProgramsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.Program
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedures chains the current query on the "procedures" edge.
func (_q *OrganizationQuery) QueryProcedures() *ProcedureQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ProceduresTable, organization.ProceduresColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.Procedure
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicies chains the current query on the "internal_policies" edge.
func (_q *OrganizationQuery) QueryInternalPolicies() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.InternalPoliciesTable, organization.InternalPoliciesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicy
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisks chains the current query on the "risks" edge.
func (_q *OrganizationQuery) QueryRisks() *RiskQuery {
	query := (&RiskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.RisksTable, organization.RisksColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.Risk
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjectives chains the current query on the "control_objectives" edge.
func (_q *OrganizationQuery) QueryControlObjectives() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ControlObjectivesTable, organization.ControlObjectivesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjective
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarratives chains the current query on the "narratives" edge.
func (_q *OrganizationQuery) QueryNarratives() *NarrativeQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.NarrativesTable, organization.NarrativesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.Narrative
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (_q *OrganizationQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ControlsTable, organization.ControlsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.Control
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubcontrols chains the current query on the "subcontrols" edge.
func (_q *OrganizationQuery) QuerySubcontrols() *SubcontrolQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(subcontrol.Table, subcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.SubcontrolsTable, organization.SubcontrolsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.Subcontrol
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlImplementations chains the current query on the "control_implementations" edge.
func (_q *OrganizationQuery) QueryControlImplementations() *ControlImplementationQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(controlimplementation.Table, controlimplementation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ControlImplementationsTable, organization.ControlImplementationsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlImplementation
		step.Edge.Schema = schemaConfig.ControlImplementation
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMappedControls chains the current query on the "mapped_controls" edge.
func (_q *OrganizationQuery) QueryMappedControls() *MappedControlQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(mappedcontrol.Table, mappedcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.MappedControlsTable, organization.MappedControlsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.MappedControl
		step.Edge.Schema = schemaConfig.MappedControl
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvidence chains the current query on the "evidence" edge.
func (_q *OrganizationQuery) QueryEvidence() *EvidenceQuery {
	query := (&EvidenceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(evidence.Table, evidence.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EvidenceTable, organization.EvidenceColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Evidence
		step.Edge.Schema = schemaConfig.Evidence
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStandards chains the current query on the "standards" edge.
func (_q *OrganizationQuery) QueryStandards() *StandardQuery {
	query := (&StandardClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(standard.Table, standard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.StandardsTable, organization.StandardsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Standard
		step.Edge.Schema = schemaConfig.Standard
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActionPlans chains the current query on the "action_plans" edge.
func (_q *OrganizationQuery) QueryActionPlans() *ActionPlanQuery {
	query := (&ActionPlanClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(actionplan.Table, actionplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ActionPlansTable, organization.ActionPlansColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.ActionPlan
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomDomains chains the current query on the "custom_domains" edge.
func (_q *OrganizationQuery) QueryCustomDomains() *CustomDomainQuery {
	query := (&CustomDomainClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(customdomain.Table, customdomain.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.CustomDomainsTable, organization.CustomDomainsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.CustomDomain
		step.Edge.Schema = schemaConfig.CustomDomain
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobRunners chains the current query on the "job_runners" edge.
func (_q *OrganizationQuery) QueryJobRunners() *JobRunnerQuery {
	query := (&JobRunnerClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(jobrunner.Table, jobrunner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.JobRunnersTable, organization.JobRunnersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.JobRunner
		step.Edge.Schema = schemaConfig.JobRunner
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobRunnerTokens chains the current query on the "job_runner_tokens" edge.
func (_q *OrganizationQuery) QueryJobRunnerTokens() *JobRunnerTokenQuery {
	query := (&JobRunnerTokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(jobrunnertoken.Table, jobrunnertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.JobRunnerTokensTable, organization.JobRunnerTokensColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.JobRunnerToken
		step.Edge.Schema = schemaConfig.JobRunnerToken
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobRunnerRegistrationTokens chains the current query on the "job_runner_registration_tokens" edge.
func (_q *OrganizationQuery) QueryJobRunnerRegistrationTokens() *JobRunnerRegistrationTokenQuery {
	query := (&JobRunnerRegistrationTokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(jobrunnerregistrationtoken.Table, jobrunnerregistrationtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.JobRunnerRegistrationTokensTable, organization.JobRunnerRegistrationTokensColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.JobRunnerRegistrationToken
		step.Edge.Schema = schemaConfig.JobRunnerRegistrationToken
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDNSVerifications chains the current query on the "dns_verifications" edge.
func (_q *OrganizationQuery) QueryDNSVerifications() *DNSVerificationQuery {
	query := (&DNSVerificationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(dnsverification.Table, dnsverification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.DNSVerificationsTable, organization.DNSVerificationsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.DNSVerification
		step.Edge.Schema = schemaConfig.DNSVerification
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobTemplates chains the current query on the "job_templates" edge.
func (_q *OrganizationQuery) QueryJobTemplates() *JobTemplateQuery {
	query := (&JobTemplateClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(jobtemplate.Table, jobtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.JobTemplatesTable, organization.JobTemplatesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.JobTemplate
		step.Edge.Schema = schemaConfig.JobTemplate
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduledJobs chains the current query on the "scheduled_jobs" edge.
func (_q *OrganizationQuery) QueryScheduledJobs() *ScheduledJobQuery {
	query := (&ScheduledJobClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(scheduledjob.Table, scheduledjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ScheduledJobsTable, organization.ScheduledJobsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ScheduledJob
		step.Edge.Schema = schemaConfig.ScheduledJob
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobResults chains the current query on the "job_results" edge.
func (_q *OrganizationQuery) QueryJobResults() *JobResultQuery {
	query := (&JobResultClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(jobresult.Table, jobresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.JobResultsTable, organization.JobResultsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.JobResult
		step.Edge.Schema = schemaConfig.JobResult
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduledJobRuns chains the current query on the "scheduled_job_runs" edge.
func (_q *OrganizationQuery) QueryScheduledJobRuns() *ScheduledJobRunQuery {
	query := (&ScheduledJobRunClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(scheduledjobrun.Table, scheduledjobrun.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ScheduledJobRunsTable, organization.ScheduledJobRunsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ScheduledJobRun
		step.Edge.Schema = schemaConfig.ScheduledJobRun
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrustCenters chains the current query on the "trust_centers" edge.
func (_q *OrganizationQuery) QueryTrustCenters() *TrustCenterQuery {
	query := (&TrustCenterClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(trustcenter.Table, trustcenter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.TrustCentersTable, organization.TrustCentersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.TrustCenter
		step.Edge.Schema = schemaConfig.TrustCenter
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssets chains the current query on the "assets" edge.
func (_q *OrganizationQuery) QueryAssets() *AssetQuery {
	query := (&AssetClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.AssetsTable, organization.AssetsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Asset
		step.Edge.Schema = schemaConfig.Asset
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScans chains the current query on the "scans" edge.
func (_q *OrganizationQuery) QueryScans() *ScanQuery {
	query := (&ScanClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(scan.Table, scan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ScansTable, organization.ScansColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Scan
		step.Edge.Schema = schemaConfig.Scan
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubprocessors chains the current query on the "subprocessors" edge.
func (_q *OrganizationQuery) QuerySubprocessors() *SubprocessorQuery {
	query := (&SubprocessorClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(subprocessor.Table, subprocessor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.SubprocessorsTable, organization.SubprocessorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Subprocessor
		step.Edge.Schema = schemaConfig.Subprocessor
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExports chains the current query on the "exports" edge.
func (_q *OrganizationQuery) QueryExports() *ExportQuery {
	query := (&ExportClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(export.Table, export.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ExportsTable, organization.ExportsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Export
		step.Edge.Schema = schemaConfig.Export
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrustCenterDocs chains the current query on the "trust_center_docs" edge.
func (_q *OrganizationQuery) QueryTrustCenterDocs() *TrustCenterDocQuery {
	query := (&TrustCenterDocClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(trustcenterdoc.Table, trustcenterdoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.TrustCenterDocsTable, organization.TrustCenterDocsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.TrustCenterDoc
		step.Edge.Schema = schemaConfig.TrustCenterDoc
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMembers chains the current query on the "members" edge.
func (_q *OrganizationQuery) QueryMembers() *OrgMembershipQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(orgmembership.Table, orgmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, organization.MembersTable, organization.MembersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Organization entity from the query.
// Returns a *NotFoundError when no Organization was found.
func (_q *OrganizationQuery) First(ctx context.Context) (*Organization, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{organization.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *OrganizationQuery) FirstX(ctx context.Context) *Organization {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Organization ID from the query.
// Returns a *NotFoundError when no Organization ID was found.
func (_q *OrganizationQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{organization.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *OrganizationQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Organization entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Organization entity is found.
// Returns a *NotFoundError when no Organization entities are found.
func (_q *OrganizationQuery) Only(ctx context.Context) (*Organization, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{organization.Label}
	default:
		return nil, &NotSingularError{organization.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *OrganizationQuery) OnlyX(ctx context.Context) *Organization {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Organization ID in the query.
// Returns a *NotSingularError when more than one Organization ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *OrganizationQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{organization.Label}
	default:
		err = &NotSingularError{organization.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *OrganizationQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Organizations.
func (_q *OrganizationQuery) All(ctx context.Context) ([]*Organization, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Organization, *OrganizationQuery]()
	return withInterceptors[[]*Organization](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *OrganizationQuery) AllX(ctx context.Context) []*Organization {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Organization IDs.
func (_q *OrganizationQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(organization.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *OrganizationQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *OrganizationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*OrganizationQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *OrganizationQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *OrganizationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *OrganizationQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrganizationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *OrganizationQuery) Clone() *OrganizationQuery {
	if _q == nil {
		return nil
	}
	return &OrganizationQuery{
		config:                            _q.config,
		ctx:                               _q.ctx.Clone(),
		order:                             append([]organization.OrderOption{}, _q.order...),
		inters:                            append([]Interceptor{}, _q.inters...),
		predicates:                        append([]predicate.Organization{}, _q.predicates...),
		withControlCreators:               _q.withControlCreators.Clone(),
		withControlImplementationCreators: _q.withControlImplementationCreators.Clone(),
		withControlObjectiveCreators:      _q.withControlObjectiveCreators.Clone(),
		withEvidenceCreators:              _q.withEvidenceCreators.Clone(),
		withGroupCreators:                 _q.withGroupCreators.Clone(),
		withInternalPolicyCreators:        _q.withInternalPolicyCreators.Clone(),
		withMappedControlCreators:         _q.withMappedControlCreators.Clone(),
		withNarrativeCreators:             _q.withNarrativeCreators.Clone(),
		withProcedureCreators:             _q.withProcedureCreators.Clone(),
		withProgramCreators:               _q.withProgramCreators.Clone(),
		withRiskCreators:                  _q.withRiskCreators.Clone(),
		withScheduledJobCreators:          _q.withScheduledJobCreators.Clone(),
		withStandardCreators:              _q.withStandardCreators.Clone(),
		withTemplateCreators:              _q.withTemplateCreators.Clone(),
		withParent:                        _q.withParent.Clone(),
		withChildren:                      _q.withChildren.Clone(),
		withSetting:                       _q.withSetting.Clone(),
		withPersonalAccessTokens:          _q.withPersonalAccessTokens.Clone(),
		withAPITokens:                     _q.withAPITokens.Clone(),
		withUsers:                         _q.withUsers.Clone(),
		withFiles:                         _q.withFiles.Clone(),
		withEvents:                        _q.withEvents.Clone(),
		withSecrets:                       _q.withSecrets.Clone(),
		withAvatarFile:                    _q.withAvatarFile.Clone(),
		withGroups:                        _q.withGroups.Clone(),
		withTemplates:                     _q.withTemplates.Clone(),
		withIntegrations:                  _q.withIntegrations.Clone(),
		withDocuments:                     _q.withDocuments.Clone(),
		withOrgSubscriptions:              _q.withOrgSubscriptions.Clone(),
		withOrgProducts:                   _q.withOrgProducts.Clone(),
		withOrgPrices:                     _q.withOrgPrices.Clone(),
		withOrgModules:                    _q.withOrgModules.Clone(),
		withInvites:                       _q.withInvites.Clone(),
		withSubscribers:                   _q.withSubscribers.Clone(),
		withEntities:                      _q.withEntities.Clone(),
		withEntityTypes:                   _q.withEntityTypes.Clone(),
		withContacts:                      _q.withContacts.Clone(),
		withNotes:                         _q.withNotes.Clone(),
		withTasks:                         _q.withTasks.Clone(),
		withPrograms:                      _q.withPrograms.Clone(),
		withProcedures:                    _q.withProcedures.Clone(),
		withInternalPolicies:              _q.withInternalPolicies.Clone(),
		withRisks:                         _q.withRisks.Clone(),
		withControlObjectives:             _q.withControlObjectives.Clone(),
		withNarratives:                    _q.withNarratives.Clone(),
		withControls:                      _q.withControls.Clone(),
		withSubcontrols:                   _q.withSubcontrols.Clone(),
		withControlImplementations:        _q.withControlImplementations.Clone(),
		withMappedControls:                _q.withMappedControls.Clone(),
		withEvidence:                      _q.withEvidence.Clone(),
		withStandards:                     _q.withStandards.Clone(),
		withActionPlans:                   _q.withActionPlans.Clone(),
		withCustomDomains:                 _q.withCustomDomains.Clone(),
		withJobRunners:                    _q.withJobRunners.Clone(),
		withJobRunnerTokens:               _q.withJobRunnerTokens.Clone(),
		withJobRunnerRegistrationTokens:   _q.withJobRunnerRegistrationTokens.Clone(),
		withDNSVerifications:              _q.withDNSVerifications.Clone(),
		withJobTemplates:                  _q.withJobTemplates.Clone(),
		withScheduledJobs:                 _q.withScheduledJobs.Clone(),
		withJobResults:                    _q.withJobResults.Clone(),
		withScheduledJobRuns:              _q.withScheduledJobRuns.Clone(),
		withTrustCenters:                  _q.withTrustCenters.Clone(),
		withAssets:                        _q.withAssets.Clone(),
		withScans:                         _q.withScans.Clone(),
		withSubprocessors:                 _q.withSubprocessors.Clone(),
		withExports:                       _q.withExports.Clone(),
		withTrustCenterDocs:               _q.withTrustCenterDocs.Clone(),
		withMembers:                       _q.withMembers.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithControlCreators tells the query-builder to eager-load the nodes that are connected to
// the "control_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithControlCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlCreators = query
	return _q
}

// WithControlImplementationCreators tells the query-builder to eager-load the nodes that are connected to
// the "control_implementation_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithControlImplementationCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlImplementationCreators = query
	return _q
}

// WithControlObjectiveCreators tells the query-builder to eager-load the nodes that are connected to
// the "control_objective_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithControlObjectiveCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlObjectiveCreators = query
	return _q
}

// WithEvidenceCreators tells the query-builder to eager-load the nodes that are connected to
// the "evidence_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithEvidenceCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEvidenceCreators = query
	return _q
}

// WithGroupCreators tells the query-builder to eager-load the nodes that are connected to
// the "group_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithGroupCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withGroupCreators = query
	return _q
}

// WithInternalPolicyCreators tells the query-builder to eager-load the nodes that are connected to
// the "internal_policy_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithInternalPolicyCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInternalPolicyCreators = query
	return _q
}

// WithMappedControlCreators tells the query-builder to eager-load the nodes that are connected to
// the "mapped_control_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithMappedControlCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMappedControlCreators = query
	return _q
}

// WithNarrativeCreators tells the query-builder to eager-load the nodes that are connected to
// the "narrative_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNarrativeCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNarrativeCreators = query
	return _q
}

// WithProcedureCreators tells the query-builder to eager-load the nodes that are connected to
// the "procedure_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithProcedureCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProcedureCreators = query
	return _q
}

// WithProgramCreators tells the query-builder to eager-load the nodes that are connected to
// the "program_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithProgramCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProgramCreators = query
	return _q
}

// WithRiskCreators tells the query-builder to eager-load the nodes that are connected to
// the "risk_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithRiskCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withRiskCreators = query
	return _q
}

// WithScheduledJobCreators tells the query-builder to eager-load the nodes that are connected to
// the "scheduled_job_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithScheduledJobCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScheduledJobCreators = query
	return _q
}

// WithStandardCreators tells the query-builder to eager-load the nodes that are connected to
// the "standard_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithStandardCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withStandardCreators = query
	return _q
}

// WithTemplateCreators tells the query-builder to eager-load the nodes that are connected to
// the "template_creators" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithTemplateCreators(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTemplateCreators = query
	return _q
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithParent(opts ...func(*OrganizationQuery)) *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withParent = query
	return _q
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithChildren(opts ...func(*OrganizationQuery)) *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withChildren = query
	return _q
}

// WithSetting tells the query-builder to eager-load the nodes that are connected to
// the "setting" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithSetting(opts ...func(*OrganizationSettingQuery)) *OrganizationQuery {
	query := (&OrganizationSettingClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSetting = query
	return _q
}

// WithPersonalAccessTokens tells the query-builder to eager-load the nodes that are connected to
// the "personal_access_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithPersonalAccessTokens(opts ...func(*PersonalAccessTokenQuery)) *OrganizationQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPersonalAccessTokens = query
	return _q
}

// WithAPITokens tells the query-builder to eager-load the nodes that are connected to
// the "api_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithAPITokens(opts ...func(*APITokenQuery)) *OrganizationQuery {
	query := (&APITokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAPITokens = query
	return _q
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithUsers(opts ...func(*UserQuery)) *OrganizationQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withUsers = query
	return _q
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithFiles(opts ...func(*FileQuery)) *OrganizationQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withFiles = query
	return _q
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithEvents(opts ...func(*EventQuery)) *OrganizationQuery {
	query := (&EventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEvents = query
	return _q
}

// WithSecrets tells the query-builder to eager-load the nodes that are connected to
// the "secrets" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithSecrets(opts ...func(*HushQuery)) *OrganizationQuery {
	query := (&HushClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSecrets = query
	return _q
}

// WithAvatarFile tells the query-builder to eager-load the nodes that are connected to
// the "avatar_file" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithAvatarFile(opts ...func(*FileQuery)) *OrganizationQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAvatarFile = query
	return _q
}

// WithGroups tells the query-builder to eager-load the nodes that are connected to
// the "groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithGroups(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withGroups = query
	return _q
}

// WithTemplates tells the query-builder to eager-load the nodes that are connected to
// the "templates" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithTemplates(opts ...func(*TemplateQuery)) *OrganizationQuery {
	query := (&TemplateClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTemplates = query
	return _q
}

// WithIntegrations tells the query-builder to eager-load the nodes that are connected to
// the "integrations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithIntegrations(opts ...func(*IntegrationQuery)) *OrganizationQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withIntegrations = query
	return _q
}

// WithDocuments tells the query-builder to eager-load the nodes that are connected to
// the "documents" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithDocuments(opts ...func(*DocumentDataQuery)) *OrganizationQuery {
	query := (&DocumentDataClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDocuments = query
	return _q
}

// WithOrgSubscriptions tells the query-builder to eager-load the nodes that are connected to
// the "org_subscriptions" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithOrgSubscriptions(opts ...func(*OrgSubscriptionQuery)) *OrganizationQuery {
	query := (&OrgSubscriptionClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrgSubscriptions = query
	return _q
}

// WithOrgProducts tells the query-builder to eager-load the nodes that are connected to
// the "org_products" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithOrgProducts(opts ...func(*OrgProductQuery)) *OrganizationQuery {
	query := (&OrgProductClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrgProducts = query
	return _q
}

// WithOrgPrices tells the query-builder to eager-load the nodes that are connected to
// the "org_prices" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithOrgPrices(opts ...func(*OrgPriceQuery)) *OrganizationQuery {
	query := (&OrgPriceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrgPrices = query
	return _q
}

// WithOrgModules tells the query-builder to eager-load the nodes that are connected to
// the "org_modules" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithOrgModules(opts ...func(*OrgModuleQuery)) *OrganizationQuery {
	query := (&OrgModuleClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrgModules = query
	return _q
}

// WithInvites tells the query-builder to eager-load the nodes that are connected to
// the "invites" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithInvites(opts ...func(*InviteQuery)) *OrganizationQuery {
	query := (&InviteClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInvites = query
	return _q
}

// WithSubscribers tells the query-builder to eager-load the nodes that are connected to
// the "subscribers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithSubscribers(opts ...func(*SubscriberQuery)) *OrganizationQuery {
	query := (&SubscriberClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSubscribers = query
	return _q
}

// WithEntities tells the query-builder to eager-load the nodes that are connected to
// the "entities" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithEntities(opts ...func(*EntityQuery)) *OrganizationQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEntities = query
	return _q
}

// WithEntityTypes tells the query-builder to eager-load the nodes that are connected to
// the "entity_types" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithEntityTypes(opts ...func(*EntityTypeQuery)) *OrganizationQuery {
	query := (&EntityTypeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEntityTypes = query
	return _q
}

// WithContacts tells the query-builder to eager-load the nodes that are connected to
// the "contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithContacts(opts ...func(*ContactQuery)) *OrganizationQuery {
	query := (&ContactClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withContacts = query
	return _q
}

// WithNotes tells the query-builder to eager-load the nodes that are connected to
// the "notes" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNotes(opts ...func(*NoteQuery)) *OrganizationQuery {
	query := (&NoteClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNotes = query
	return _q
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithTasks(opts ...func(*TaskQuery)) *OrganizationQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTasks = query
	return _q
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithPrograms(opts ...func(*ProgramQuery)) *OrganizationQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPrograms = query
	return _q
}

// WithProcedures tells the query-builder to eager-load the nodes that are connected to
// the "procedures" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithProcedures(opts ...func(*ProcedureQuery)) *OrganizationQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProcedures = query
	return _q
}

// WithInternalPolicies tells the query-builder to eager-load the nodes that are connected to
// the "internal_policies" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithInternalPolicies(opts ...func(*InternalPolicyQuery)) *OrganizationQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInternalPolicies = query
	return _q
}

// WithRisks tells the query-builder to eager-load the nodes that are connected to
// the "risks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithRisks(opts ...func(*RiskQuery)) *OrganizationQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withRisks = query
	return _q
}

// WithControlObjectives tells the query-builder to eager-load the nodes that are connected to
// the "control_objectives" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithControlObjectives(opts ...func(*ControlObjectiveQuery)) *OrganizationQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlObjectives = query
	return _q
}

// WithNarratives tells the query-builder to eager-load the nodes that are connected to
// the "narratives" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNarratives(opts ...func(*NarrativeQuery)) *OrganizationQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNarratives = query
	return _q
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithControls(opts ...func(*ControlQuery)) *OrganizationQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControls = query
	return _q
}

// WithSubcontrols tells the query-builder to eager-load the nodes that are connected to
// the "subcontrols" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithSubcontrols(opts ...func(*SubcontrolQuery)) *OrganizationQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSubcontrols = query
	return _q
}

// WithControlImplementations tells the query-builder to eager-load the nodes that are connected to
// the "control_implementations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithControlImplementations(opts ...func(*ControlImplementationQuery)) *OrganizationQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlImplementations = query
	return _q
}

// WithMappedControls tells the query-builder to eager-load the nodes that are connected to
// the "mapped_controls" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithMappedControls(opts ...func(*MappedControlQuery)) *OrganizationQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMappedControls = query
	return _q
}

// WithEvidence tells the query-builder to eager-load the nodes that are connected to
// the "evidence" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithEvidence(opts ...func(*EvidenceQuery)) *OrganizationQuery {
	query := (&EvidenceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEvidence = query
	return _q
}

// WithStandards tells the query-builder to eager-load the nodes that are connected to
// the "standards" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithStandards(opts ...func(*StandardQuery)) *OrganizationQuery {
	query := (&StandardClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withStandards = query
	return _q
}

// WithActionPlans tells the query-builder to eager-load the nodes that are connected to
// the "action_plans" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithActionPlans(opts ...func(*ActionPlanQuery)) *OrganizationQuery {
	query := (&ActionPlanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withActionPlans = query
	return _q
}

// WithCustomDomains tells the query-builder to eager-load the nodes that are connected to
// the "custom_domains" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithCustomDomains(opts ...func(*CustomDomainQuery)) *OrganizationQuery {
	query := (&CustomDomainClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCustomDomains = query
	return _q
}

// WithJobRunners tells the query-builder to eager-load the nodes that are connected to
// the "job_runners" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithJobRunners(opts ...func(*JobRunnerQuery)) *OrganizationQuery {
	query := (&JobRunnerClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withJobRunners = query
	return _q
}

// WithJobRunnerTokens tells the query-builder to eager-load the nodes that are connected to
// the "job_runner_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithJobRunnerTokens(opts ...func(*JobRunnerTokenQuery)) *OrganizationQuery {
	query := (&JobRunnerTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withJobRunnerTokens = query
	return _q
}

// WithJobRunnerRegistrationTokens tells the query-builder to eager-load the nodes that are connected to
// the "job_runner_registration_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithJobRunnerRegistrationTokens(opts ...func(*JobRunnerRegistrationTokenQuery)) *OrganizationQuery {
	query := (&JobRunnerRegistrationTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withJobRunnerRegistrationTokens = query
	return _q
}

// WithDNSVerifications tells the query-builder to eager-load the nodes that are connected to
// the "dns_verifications" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithDNSVerifications(opts ...func(*DNSVerificationQuery)) *OrganizationQuery {
	query := (&DNSVerificationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDNSVerifications = query
	return _q
}

// WithJobTemplates tells the query-builder to eager-load the nodes that are connected to
// the "job_templates" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithJobTemplates(opts ...func(*JobTemplateQuery)) *OrganizationQuery {
	query := (&JobTemplateClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withJobTemplates = query
	return _q
}

// WithScheduledJobs tells the query-builder to eager-load the nodes that are connected to
// the "scheduled_jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithScheduledJobs(opts ...func(*ScheduledJobQuery)) *OrganizationQuery {
	query := (&ScheduledJobClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScheduledJobs = query
	return _q
}

// WithJobResults tells the query-builder to eager-load the nodes that are connected to
// the "job_results" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithJobResults(opts ...func(*JobResultQuery)) *OrganizationQuery {
	query := (&JobResultClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withJobResults = query
	return _q
}

// WithScheduledJobRuns tells the query-builder to eager-load the nodes that are connected to
// the "scheduled_job_runs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithScheduledJobRuns(opts ...func(*ScheduledJobRunQuery)) *OrganizationQuery {
	query := (&ScheduledJobRunClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScheduledJobRuns = query
	return _q
}

// WithTrustCenters tells the query-builder to eager-load the nodes that are connected to
// the "trust_centers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithTrustCenters(opts ...func(*TrustCenterQuery)) *OrganizationQuery {
	query := (&TrustCenterClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTrustCenters = query
	return _q
}

// WithAssets tells the query-builder to eager-load the nodes that are connected to
// the "assets" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithAssets(opts ...func(*AssetQuery)) *OrganizationQuery {
	query := (&AssetClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAssets = query
	return _q
}

// WithScans tells the query-builder to eager-load the nodes that are connected to
// the "scans" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithScans(opts ...func(*ScanQuery)) *OrganizationQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScans = query
	return _q
}

// WithSubprocessors tells the query-builder to eager-load the nodes that are connected to
// the "subprocessors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithSubprocessors(opts ...func(*SubprocessorQuery)) *OrganizationQuery {
	query := (&SubprocessorClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSubprocessors = query
	return _q
}

// WithExports tells the query-builder to eager-load the nodes that are connected to
// the "exports" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithExports(opts ...func(*ExportQuery)) *OrganizationQuery {
	query := (&ExportClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withExports = query
	return _q
}

// WithTrustCenterDocs tells the query-builder to eager-load the nodes that are connected to
// the "trust_center_docs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithTrustCenterDocs(opts ...func(*TrustCenterDocQuery)) *OrganizationQuery {
	query := (&TrustCenterDocClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTrustCenterDocs = query
	return _q
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithMembers(opts ...func(*OrgMembershipQuery)) *OrganizationQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMembers = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Organization.Query().
//		GroupBy(organization.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (_q *OrganizationQuery) GroupBy(field string, fields ...string) *OrganizationGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrganizationGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = organization.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Organization.Query().
//		Select(organization.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *OrganizationQuery) Select(fields ...string) *OrganizationSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &OrganizationSelect{OrganizationQuery: _q}
	sbuild.label = organization.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrganizationSelect configured with the given aggregations.
func (_q *OrganizationQuery) Aggregate(fns ...AggregateFunc) *OrganizationSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *OrganizationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !organization.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	if organization.Policy == nil {
		return errors.New("generated: uninitialized organization.Policy (forgotten import generated/runtime?)")
	}
	if err := organization.Policy.EvalQuery(ctx, _q); err != nil {
		return err
	}
	return nil
}

func (_q *OrganizationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Organization, error) {
	var (
		nodes       = []*Organization{}
		_spec       = _q.querySpec()
		loadedTypes = [68]bool{
			_q.withControlCreators != nil,
			_q.withControlImplementationCreators != nil,
			_q.withControlObjectiveCreators != nil,
			_q.withEvidenceCreators != nil,
			_q.withGroupCreators != nil,
			_q.withInternalPolicyCreators != nil,
			_q.withMappedControlCreators != nil,
			_q.withNarrativeCreators != nil,
			_q.withProcedureCreators != nil,
			_q.withProgramCreators != nil,
			_q.withRiskCreators != nil,
			_q.withScheduledJobCreators != nil,
			_q.withStandardCreators != nil,
			_q.withTemplateCreators != nil,
			_q.withParent != nil,
			_q.withChildren != nil,
			_q.withSetting != nil,
			_q.withPersonalAccessTokens != nil,
			_q.withAPITokens != nil,
			_q.withUsers != nil,
			_q.withFiles != nil,
			_q.withEvents != nil,
			_q.withSecrets != nil,
			_q.withAvatarFile != nil,
			_q.withGroups != nil,
			_q.withTemplates != nil,
			_q.withIntegrations != nil,
			_q.withDocuments != nil,
			_q.withOrgSubscriptions != nil,
			_q.withOrgProducts != nil,
			_q.withOrgPrices != nil,
			_q.withOrgModules != nil,
			_q.withInvites != nil,
			_q.withSubscribers != nil,
			_q.withEntities != nil,
			_q.withEntityTypes != nil,
			_q.withContacts != nil,
			_q.withNotes != nil,
			_q.withTasks != nil,
			_q.withPrograms != nil,
			_q.withProcedures != nil,
			_q.withInternalPolicies != nil,
			_q.withRisks != nil,
			_q.withControlObjectives != nil,
			_q.withNarratives != nil,
			_q.withControls != nil,
			_q.withSubcontrols != nil,
			_q.withControlImplementations != nil,
			_q.withMappedControls != nil,
			_q.withEvidence != nil,
			_q.withStandards != nil,
			_q.withActionPlans != nil,
			_q.withCustomDomains != nil,
			_q.withJobRunners != nil,
			_q.withJobRunnerTokens != nil,
			_q.withJobRunnerRegistrationTokens != nil,
			_q.withDNSVerifications != nil,
			_q.withJobTemplates != nil,
			_q.withScheduledJobs != nil,
			_q.withJobResults != nil,
			_q.withScheduledJobRuns != nil,
			_q.withTrustCenters != nil,
			_q.withAssets != nil,
			_q.withScans != nil,
			_q.withSubprocessors != nil,
			_q.withExports != nil,
			_q.withTrustCenterDocs != nil,
			_q.withMembers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Organization).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Organization{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = _q.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withControlCreators; query != nil {
		if err := _q.loadControlCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.ControlCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.ControlCreators = append(n.Edges.ControlCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlImplementationCreators; query != nil {
		if err := _q.loadControlImplementationCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.ControlImplementationCreators = []*Group{} },
			func(n *Organization, e *Group) {
				n.Edges.ControlImplementationCreators = append(n.Edges.ControlImplementationCreators, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlObjectiveCreators; query != nil {
		if err := _q.loadControlObjectiveCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.ControlObjectiveCreators = []*Group{} },
			func(n *Organization, e *Group) {
				n.Edges.ControlObjectiveCreators = append(n.Edges.ControlObjectiveCreators, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withEvidenceCreators; query != nil {
		if err := _q.loadEvidenceCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.EvidenceCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.EvidenceCreators = append(n.Edges.EvidenceCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withGroupCreators; query != nil {
		if err := _q.loadGroupCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.GroupCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.GroupCreators = append(n.Edges.GroupCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInternalPolicyCreators; query != nil {
		if err := _q.loadInternalPolicyCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.InternalPolicyCreators = []*Group{} },
			func(n *Organization, e *Group) {
				n.Edges.InternalPolicyCreators = append(n.Edges.InternalPolicyCreators, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withMappedControlCreators; query != nil {
		if err := _q.loadMappedControlCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.MappedControlCreators = []*Group{} },
			func(n *Organization, e *Group) {
				n.Edges.MappedControlCreators = append(n.Edges.MappedControlCreators, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withNarrativeCreators; query != nil {
		if err := _q.loadNarrativeCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.NarrativeCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.NarrativeCreators = append(n.Edges.NarrativeCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProcedureCreators; query != nil {
		if err := _q.loadProcedureCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.ProcedureCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.ProcedureCreators = append(n.Edges.ProcedureCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProgramCreators; query != nil {
		if err := _q.loadProgramCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.ProgramCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.ProgramCreators = append(n.Edges.ProgramCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withRiskCreators; query != nil {
		if err := _q.loadRiskCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.RiskCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.RiskCreators = append(n.Edges.RiskCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withScheduledJobCreators; query != nil {
		if err := _q.loadScheduledJobCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.ScheduledJobCreators = []*Group{} },
			func(n *Organization, e *Group) {
				n.Edges.ScheduledJobCreators = append(n.Edges.ScheduledJobCreators, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withStandardCreators; query != nil {
		if err := _q.loadStandardCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.StandardCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.StandardCreators = append(n.Edges.StandardCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTemplateCreators; query != nil {
		if err := _q.loadTemplateCreators(ctx, query, nodes,
			func(n *Organization) { n.Edges.TemplateCreators = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.TemplateCreators = append(n.Edges.TemplateCreators, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withParent; query != nil {
		if err := _q.loadParent(ctx, query, nodes, nil,
			func(n *Organization, e *Organization) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withChildren; query != nil {
		if err := _q.loadChildren(ctx, query, nodes,
			func(n *Organization) { n.Edges.Children = []*Organization{} },
			func(n *Organization, e *Organization) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSetting; query != nil {
		if err := _q.loadSetting(ctx, query, nodes, nil,
			func(n *Organization, e *OrganizationSetting) { n.Edges.Setting = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPersonalAccessTokens; query != nil {
		if err := _q.loadPersonalAccessTokens(ctx, query, nodes,
			func(n *Organization) { n.Edges.PersonalAccessTokens = []*PersonalAccessToken{} },
			func(n *Organization, e *PersonalAccessToken) {
				n.Edges.PersonalAccessTokens = append(n.Edges.PersonalAccessTokens, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withAPITokens; query != nil {
		if err := _q.loadAPITokens(ctx, query, nodes,
			func(n *Organization) { n.Edges.APITokens = []*APIToken{} },
			func(n *Organization, e *APIToken) { n.Edges.APITokens = append(n.Edges.APITokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withUsers; query != nil {
		if err := _q.loadUsers(ctx, query, nodes,
			func(n *Organization) { n.Edges.Users = []*User{} },
			func(n *Organization, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withFiles; query != nil {
		if err := _q.loadFiles(ctx, query, nodes,
			func(n *Organization) { n.Edges.Files = []*File{} },
			func(n *Organization, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEvents; query != nil {
		if err := _q.loadEvents(ctx, query, nodes,
			func(n *Organization) { n.Edges.Events = []*Event{} },
			func(n *Organization, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSecrets; query != nil {
		if err := _q.loadSecrets(ctx, query, nodes,
			func(n *Organization) { n.Edges.Secrets = []*Hush{} },
			func(n *Organization, e *Hush) { n.Edges.Secrets = append(n.Edges.Secrets, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAvatarFile; query != nil {
		if err := _q.loadAvatarFile(ctx, query, nodes, nil,
			func(n *Organization, e *File) { n.Edges.AvatarFile = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withGroups; query != nil {
		if err := _q.loadGroups(ctx, query, nodes,
			func(n *Organization) { n.Edges.Groups = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.Groups = append(n.Edges.Groups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTemplates; query != nil {
		if err := _q.loadTemplates(ctx, query, nodes,
			func(n *Organization) { n.Edges.Templates = []*Template{} },
			func(n *Organization, e *Template) { n.Edges.Templates = append(n.Edges.Templates, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withIntegrations; query != nil {
		if err := _q.loadIntegrations(ctx, query, nodes,
			func(n *Organization) { n.Edges.Integrations = []*Integration{} },
			func(n *Organization, e *Integration) { n.Edges.Integrations = append(n.Edges.Integrations, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withDocuments; query != nil {
		if err := _q.loadDocuments(ctx, query, nodes,
			func(n *Organization) { n.Edges.Documents = []*DocumentData{} },
			func(n *Organization, e *DocumentData) { n.Edges.Documents = append(n.Edges.Documents, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrgSubscriptions; query != nil {
		if err := _q.loadOrgSubscriptions(ctx, query, nodes,
			func(n *Organization) { n.Edges.OrgSubscriptions = []*OrgSubscription{} },
			func(n *Organization, e *OrgSubscription) {
				n.Edges.OrgSubscriptions = append(n.Edges.OrgSubscriptions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrgProducts; query != nil {
		if err := _q.loadOrgProducts(ctx, query, nodes,
			func(n *Organization) { n.Edges.OrgProducts = []*OrgProduct{} },
			func(n *Organization, e *OrgProduct) { n.Edges.OrgProducts = append(n.Edges.OrgProducts, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrgPrices; query != nil {
		if err := _q.loadOrgPrices(ctx, query, nodes,
			func(n *Organization) { n.Edges.OrgPrices = []*OrgPrice{} },
			func(n *Organization, e *OrgPrice) { n.Edges.OrgPrices = append(n.Edges.OrgPrices, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrgModules; query != nil {
		if err := _q.loadOrgModules(ctx, query, nodes,
			func(n *Organization) { n.Edges.OrgModules = []*OrgModule{} },
			func(n *Organization, e *OrgModule) { n.Edges.OrgModules = append(n.Edges.OrgModules, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInvites; query != nil {
		if err := _q.loadInvites(ctx, query, nodes,
			func(n *Organization) { n.Edges.Invites = []*Invite{} },
			func(n *Organization, e *Invite) { n.Edges.Invites = append(n.Edges.Invites, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSubscribers; query != nil {
		if err := _q.loadSubscribers(ctx, query, nodes,
			func(n *Organization) { n.Edges.Subscribers = []*Subscriber{} },
			func(n *Organization, e *Subscriber) { n.Edges.Subscribers = append(n.Edges.Subscribers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEntities; query != nil {
		if err := _q.loadEntities(ctx, query, nodes,
			func(n *Organization) { n.Edges.Entities = []*Entity{} },
			func(n *Organization, e *Entity) { n.Edges.Entities = append(n.Edges.Entities, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEntityTypes; query != nil {
		if err := _q.loadEntityTypes(ctx, query, nodes,
			func(n *Organization) { n.Edges.EntityTypes = []*EntityType{} },
			func(n *Organization, e *EntityType) { n.Edges.EntityTypes = append(n.Edges.EntityTypes, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withContacts; query != nil {
		if err := _q.loadContacts(ctx, query, nodes,
			func(n *Organization) { n.Edges.Contacts = []*Contact{} },
			func(n *Organization, e *Contact) { n.Edges.Contacts = append(n.Edges.Contacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withNotes; query != nil {
		if err := _q.loadNotes(ctx, query, nodes,
			func(n *Organization) { n.Edges.Notes = []*Note{} },
			func(n *Organization, e *Note) { n.Edges.Notes = append(n.Edges.Notes, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTasks; query != nil {
		if err := _q.loadTasks(ctx, query, nodes,
			func(n *Organization) { n.Edges.Tasks = []*Task{} },
			func(n *Organization, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPrograms; query != nil {
		if err := _q.loadPrograms(ctx, query, nodes,
			func(n *Organization) { n.Edges.Programs = []*Program{} },
			func(n *Organization, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProcedures; query != nil {
		if err := _q.loadProcedures(ctx, query, nodes,
			func(n *Organization) { n.Edges.Procedures = []*Procedure{} },
			func(n *Organization, e *Procedure) { n.Edges.Procedures = append(n.Edges.Procedures, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInternalPolicies; query != nil {
		if err := _q.loadInternalPolicies(ctx, query, nodes,
			func(n *Organization) { n.Edges.InternalPolicies = []*InternalPolicy{} },
			func(n *Organization, e *InternalPolicy) {
				n.Edges.InternalPolicies = append(n.Edges.InternalPolicies, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withRisks; query != nil {
		if err := _q.loadRisks(ctx, query, nodes,
			func(n *Organization) { n.Edges.Risks = []*Risk{} },
			func(n *Organization, e *Risk) { n.Edges.Risks = append(n.Edges.Risks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlObjectives; query != nil {
		if err := _q.loadControlObjectives(ctx, query, nodes,
			func(n *Organization) { n.Edges.ControlObjectives = []*ControlObjective{} },
			func(n *Organization, e *ControlObjective) {
				n.Edges.ControlObjectives = append(n.Edges.ControlObjectives, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withNarratives; query != nil {
		if err := _q.loadNarratives(ctx, query, nodes,
			func(n *Organization) { n.Edges.Narratives = []*Narrative{} },
			func(n *Organization, e *Narrative) { n.Edges.Narratives = append(n.Edges.Narratives, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControls; query != nil {
		if err := _q.loadControls(ctx, query, nodes,
			func(n *Organization) { n.Edges.Controls = []*Control{} },
			func(n *Organization, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSubcontrols; query != nil {
		if err := _q.loadSubcontrols(ctx, query, nodes,
			func(n *Organization) { n.Edges.Subcontrols = []*Subcontrol{} },
			func(n *Organization, e *Subcontrol) { n.Edges.Subcontrols = append(n.Edges.Subcontrols, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlImplementations; query != nil {
		if err := _q.loadControlImplementations(ctx, query, nodes,
			func(n *Organization) { n.Edges.ControlImplementations = []*ControlImplementation{} },
			func(n *Organization, e *ControlImplementation) {
				n.Edges.ControlImplementations = append(n.Edges.ControlImplementations, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withMappedControls; query != nil {
		if err := _q.loadMappedControls(ctx, query, nodes,
			func(n *Organization) { n.Edges.MappedControls = []*MappedControl{} },
			func(n *Organization, e *MappedControl) { n.Edges.MappedControls = append(n.Edges.MappedControls, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEvidence; query != nil {
		if err := _q.loadEvidence(ctx, query, nodes,
			func(n *Organization) { n.Edges.Evidence = []*Evidence{} },
			func(n *Organization, e *Evidence) { n.Edges.Evidence = append(n.Edges.Evidence, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withStandards; query != nil {
		if err := _q.loadStandards(ctx, query, nodes,
			func(n *Organization) { n.Edges.Standards = []*Standard{} },
			func(n *Organization, e *Standard) { n.Edges.Standards = append(n.Edges.Standards, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withActionPlans; query != nil {
		if err := _q.loadActionPlans(ctx, query, nodes,
			func(n *Organization) { n.Edges.ActionPlans = []*ActionPlan{} },
			func(n *Organization, e *ActionPlan) { n.Edges.ActionPlans = append(n.Edges.ActionPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withCustomDomains; query != nil {
		if err := _q.loadCustomDomains(ctx, query, nodes,
			func(n *Organization) { n.Edges.CustomDomains = []*CustomDomain{} },
			func(n *Organization, e *CustomDomain) { n.Edges.CustomDomains = append(n.Edges.CustomDomains, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withJobRunners; query != nil {
		if err := _q.loadJobRunners(ctx, query, nodes,
			func(n *Organization) { n.Edges.JobRunners = []*JobRunner{} },
			func(n *Organization, e *JobRunner) { n.Edges.JobRunners = append(n.Edges.JobRunners, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withJobRunnerTokens; query != nil {
		if err := _q.loadJobRunnerTokens(ctx, query, nodes,
			func(n *Organization) { n.Edges.JobRunnerTokens = []*JobRunnerToken{} },
			func(n *Organization, e *JobRunnerToken) { n.Edges.JobRunnerTokens = append(n.Edges.JobRunnerTokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withJobRunnerRegistrationTokens; query != nil {
		if err := _q.loadJobRunnerRegistrationTokens(ctx, query, nodes,
			func(n *Organization) { n.Edges.JobRunnerRegistrationTokens = []*JobRunnerRegistrationToken{} },
			func(n *Organization, e *JobRunnerRegistrationToken) {
				n.Edges.JobRunnerRegistrationTokens = append(n.Edges.JobRunnerRegistrationTokens, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withDNSVerifications; query != nil {
		if err := _q.loadDNSVerifications(ctx, query, nodes,
			func(n *Organization) { n.Edges.DNSVerifications = []*DNSVerification{} },
			func(n *Organization, e *DNSVerification) {
				n.Edges.DNSVerifications = append(n.Edges.DNSVerifications, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withJobTemplates; query != nil {
		if err := _q.loadJobTemplates(ctx, query, nodes,
			func(n *Organization) { n.Edges.JobTemplates = []*JobTemplate{} },
			func(n *Organization, e *JobTemplate) { n.Edges.JobTemplates = append(n.Edges.JobTemplates, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withScheduledJobs; query != nil {
		if err := _q.loadScheduledJobs(ctx, query, nodes,
			func(n *Organization) { n.Edges.ScheduledJobs = []*ScheduledJob{} },
			func(n *Organization, e *ScheduledJob) { n.Edges.ScheduledJobs = append(n.Edges.ScheduledJobs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withJobResults; query != nil {
		if err := _q.loadJobResults(ctx, query, nodes,
			func(n *Organization) { n.Edges.JobResults = []*JobResult{} },
			func(n *Organization, e *JobResult) { n.Edges.JobResults = append(n.Edges.JobResults, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withScheduledJobRuns; query != nil {
		if err := _q.loadScheduledJobRuns(ctx, query, nodes,
			func(n *Organization) { n.Edges.ScheduledJobRuns = []*ScheduledJobRun{} },
			func(n *Organization, e *ScheduledJobRun) {
				n.Edges.ScheduledJobRuns = append(n.Edges.ScheduledJobRuns, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withTrustCenters; query != nil {
		if err := _q.loadTrustCenters(ctx, query, nodes,
			func(n *Organization) { n.Edges.TrustCenters = []*TrustCenter{} },
			func(n *Organization, e *TrustCenter) { n.Edges.TrustCenters = append(n.Edges.TrustCenters, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAssets; query != nil {
		if err := _q.loadAssets(ctx, query, nodes,
			func(n *Organization) { n.Edges.Assets = []*Asset{} },
			func(n *Organization, e *Asset) { n.Edges.Assets = append(n.Edges.Assets, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withScans; query != nil {
		if err := _q.loadScans(ctx, query, nodes,
			func(n *Organization) { n.Edges.Scans = []*Scan{} },
			func(n *Organization, e *Scan) { n.Edges.Scans = append(n.Edges.Scans, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSubprocessors; query != nil {
		if err := _q.loadSubprocessors(ctx, query, nodes,
			func(n *Organization) { n.Edges.Subprocessors = []*Subprocessor{} },
			func(n *Organization, e *Subprocessor) { n.Edges.Subprocessors = append(n.Edges.Subprocessors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withExports; query != nil {
		if err := _q.loadExports(ctx, query, nodes,
			func(n *Organization) { n.Edges.Exports = []*Export{} },
			func(n *Organization, e *Export) { n.Edges.Exports = append(n.Edges.Exports, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTrustCenterDocs; query != nil {
		if err := _q.loadTrustCenterDocs(ctx, query, nodes,
			func(n *Organization) { n.Edges.TrustCenterDocs = []*TrustCenterDoc{} },
			func(n *Organization, e *TrustCenterDoc) { n.Edges.TrustCenterDocs = append(n.Edges.TrustCenterDocs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withMembers; query != nil {
		if err := _q.loadMembers(ctx, query, nodes,
			func(n *Organization) { n.Edges.Members = []*OrgMembership{} },
			func(n *Organization, e *OrgMembership) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlCreators {
		if err := _q.loadControlCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedControlCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedControlCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlImplementationCreators {
		if err := _q.loadControlImplementationCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedControlImplementationCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedControlImplementationCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlObjectiveCreators {
		if err := _q.loadControlObjectiveCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedControlObjectiveCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedControlObjectiveCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEvidenceCreators {
		if err := _q.loadEvidenceCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedEvidenceCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedEvidenceCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedGroupCreators {
		if err := _q.loadGroupCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedGroupCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedGroupCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedInternalPolicyCreators {
		if err := _q.loadInternalPolicyCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedInternalPolicyCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedInternalPolicyCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedMappedControlCreators {
		if err := _q.loadMappedControlCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedMappedControlCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedMappedControlCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedNarrativeCreators {
		if err := _q.loadNarrativeCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedNarrativeCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedNarrativeCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProcedureCreators {
		if err := _q.loadProcedureCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedProcedureCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedProcedureCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProgramCreators {
		if err := _q.loadProgramCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedProgramCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedProgramCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedRiskCreators {
		if err := _q.loadRiskCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedRiskCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedRiskCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedScheduledJobCreators {
		if err := _q.loadScheduledJobCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedScheduledJobCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedScheduledJobCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedStandardCreators {
		if err := _q.loadStandardCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedStandardCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedStandardCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTemplateCreators {
		if err := _q.loadTemplateCreators(ctx, query, nodes,
			func(n *Organization) { n.appendNamedTemplateCreators(name) },
			func(n *Organization, e *Group) { n.appendNamedTemplateCreators(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedChildren {
		if err := _q.loadChildren(ctx, query, nodes,
			func(n *Organization) { n.appendNamedChildren(name) },
			func(n *Organization, e *Organization) { n.appendNamedChildren(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedPersonalAccessTokens {
		if err := _q.loadPersonalAccessTokens(ctx, query, nodes,
			func(n *Organization) { n.appendNamedPersonalAccessTokens(name) },
			func(n *Organization, e *PersonalAccessToken) { n.appendNamedPersonalAccessTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedAPITokens {
		if err := _q.loadAPITokens(ctx, query, nodes,
			func(n *Organization) { n.appendNamedAPITokens(name) },
			func(n *Organization, e *APIToken) { n.appendNamedAPITokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedUsers {
		if err := _q.loadUsers(ctx, query, nodes,
			func(n *Organization) { n.appendNamedUsers(name) },
			func(n *Organization, e *User) { n.appendNamedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedFiles {
		if err := _q.loadFiles(ctx, query, nodes,
			func(n *Organization) { n.appendNamedFiles(name) },
			func(n *Organization, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEvents {
		if err := _q.loadEvents(ctx, query, nodes,
			func(n *Organization) { n.appendNamedEvents(name) },
			func(n *Organization, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSecrets {
		if err := _q.loadSecrets(ctx, query, nodes,
			func(n *Organization) { n.appendNamedSecrets(name) },
			func(n *Organization, e *Hush) { n.appendNamedSecrets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedGroups {
		if err := _q.loadGroups(ctx, query, nodes,
			func(n *Organization) { n.appendNamedGroups(name) },
			func(n *Organization, e *Group) { n.appendNamedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTemplates {
		if err := _q.loadTemplates(ctx, query, nodes,
			func(n *Organization) { n.appendNamedTemplates(name) },
			func(n *Organization, e *Template) { n.appendNamedTemplates(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedIntegrations {
		if err := _q.loadIntegrations(ctx, query, nodes,
			func(n *Organization) { n.appendNamedIntegrations(name) },
			func(n *Organization, e *Integration) { n.appendNamedIntegrations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedDocuments {
		if err := _q.loadDocuments(ctx, query, nodes,
			func(n *Organization) { n.appendNamedDocuments(name) },
			func(n *Organization, e *DocumentData) { n.appendNamedDocuments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrgSubscriptions {
		if err := _q.loadOrgSubscriptions(ctx, query, nodes,
			func(n *Organization) { n.appendNamedOrgSubscriptions(name) },
			func(n *Organization, e *OrgSubscription) { n.appendNamedOrgSubscriptions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrgProducts {
		if err := _q.loadOrgProducts(ctx, query, nodes,
			func(n *Organization) { n.appendNamedOrgProducts(name) },
			func(n *Organization, e *OrgProduct) { n.appendNamedOrgProducts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrgPrices {
		if err := _q.loadOrgPrices(ctx, query, nodes,
			func(n *Organization) { n.appendNamedOrgPrices(name) },
			func(n *Organization, e *OrgPrice) { n.appendNamedOrgPrices(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrgModules {
		if err := _q.loadOrgModules(ctx, query, nodes,
			func(n *Organization) { n.appendNamedOrgModules(name) },
			func(n *Organization, e *OrgModule) { n.appendNamedOrgModules(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedInvites {
		if err := _q.loadInvites(ctx, query, nodes,
			func(n *Organization) { n.appendNamedInvites(name) },
			func(n *Organization, e *Invite) { n.appendNamedInvites(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSubscribers {
		if err := _q.loadSubscribers(ctx, query, nodes,
			func(n *Organization) { n.appendNamedSubscribers(name) },
			func(n *Organization, e *Subscriber) { n.appendNamedSubscribers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEntities {
		if err := _q.loadEntities(ctx, query, nodes,
			func(n *Organization) { n.appendNamedEntities(name) },
			func(n *Organization, e *Entity) { n.appendNamedEntities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEntityTypes {
		if err := _q.loadEntityTypes(ctx, query, nodes,
			func(n *Organization) { n.appendNamedEntityTypes(name) },
			func(n *Organization, e *EntityType) { n.appendNamedEntityTypes(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedContacts {
		if err := _q.loadContacts(ctx, query, nodes,
			func(n *Organization) { n.appendNamedContacts(name) },
			func(n *Organization, e *Contact) { n.appendNamedContacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedNotes {
		if err := _q.loadNotes(ctx, query, nodes,
			func(n *Organization) { n.appendNamedNotes(name) },
			func(n *Organization, e *Note) { n.appendNamedNotes(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTasks {
		if err := _q.loadTasks(ctx, query, nodes,
			func(n *Organization) { n.appendNamedTasks(name) },
			func(n *Organization, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedPrograms {
		if err := _q.loadPrograms(ctx, query, nodes,
			func(n *Organization) { n.appendNamedPrograms(name) },
			func(n *Organization, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProcedures {
		if err := _q.loadProcedures(ctx, query, nodes,
			func(n *Organization) { n.appendNamedProcedures(name) },
			func(n *Organization, e *Procedure) { n.appendNamedProcedures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedInternalPolicies {
		if err := _q.loadInternalPolicies(ctx, query, nodes,
			func(n *Organization) { n.appendNamedInternalPolicies(name) },
			func(n *Organization, e *InternalPolicy) { n.appendNamedInternalPolicies(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedRisks {
		if err := _q.loadRisks(ctx, query, nodes,
			func(n *Organization) { n.appendNamedRisks(name) },
			func(n *Organization, e *Risk) { n.appendNamedRisks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlObjectives {
		if err := _q.loadControlObjectives(ctx, query, nodes,
			func(n *Organization) { n.appendNamedControlObjectives(name) },
			func(n *Organization, e *ControlObjective) { n.appendNamedControlObjectives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedNarratives {
		if err := _q.loadNarratives(ctx, query, nodes,
			func(n *Organization) { n.appendNamedNarratives(name) },
			func(n *Organization, e *Narrative) { n.appendNamedNarratives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControls {
		if err := _q.loadControls(ctx, query, nodes,
			func(n *Organization) { n.appendNamedControls(name) },
			func(n *Organization, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSubcontrols {
		if err := _q.loadSubcontrols(ctx, query, nodes,
			func(n *Organization) { n.appendNamedSubcontrols(name) },
			func(n *Organization, e *Subcontrol) { n.appendNamedSubcontrols(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlImplementations {
		if err := _q.loadControlImplementations(ctx, query, nodes,
			func(n *Organization) { n.appendNamedControlImplementations(name) },
			func(n *Organization, e *ControlImplementation) { n.appendNamedControlImplementations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedMappedControls {
		if err := _q.loadMappedControls(ctx, query, nodes,
			func(n *Organization) { n.appendNamedMappedControls(name) },
			func(n *Organization, e *MappedControl) { n.appendNamedMappedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEvidence {
		if err := _q.loadEvidence(ctx, query, nodes,
			func(n *Organization) { n.appendNamedEvidence(name) },
			func(n *Organization, e *Evidence) { n.appendNamedEvidence(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedStandards {
		if err := _q.loadStandards(ctx, query, nodes,
			func(n *Organization) { n.appendNamedStandards(name) },
			func(n *Organization, e *Standard) { n.appendNamedStandards(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedActionPlans {
		if err := _q.loadActionPlans(ctx, query, nodes,
			func(n *Organization) { n.appendNamedActionPlans(name) },
			func(n *Organization, e *ActionPlan) { n.appendNamedActionPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedCustomDomains {
		if err := _q.loadCustomDomains(ctx, query, nodes,
			func(n *Organization) { n.appendNamedCustomDomains(name) },
			func(n *Organization, e *CustomDomain) { n.appendNamedCustomDomains(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedJobRunners {
		if err := _q.loadJobRunners(ctx, query, nodes,
			func(n *Organization) { n.appendNamedJobRunners(name) },
			func(n *Organization, e *JobRunner) { n.appendNamedJobRunners(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedJobRunnerTokens {
		if err := _q.loadJobRunnerTokens(ctx, query, nodes,
			func(n *Organization) { n.appendNamedJobRunnerTokens(name) },
			func(n *Organization, e *JobRunnerToken) { n.appendNamedJobRunnerTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedJobRunnerRegistrationTokens {
		if err := _q.loadJobRunnerRegistrationTokens(ctx, query, nodes,
			func(n *Organization) { n.appendNamedJobRunnerRegistrationTokens(name) },
			func(n *Organization, e *JobRunnerRegistrationToken) {
				n.appendNamedJobRunnerRegistrationTokens(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedDNSVerifications {
		if err := _q.loadDNSVerifications(ctx, query, nodes,
			func(n *Organization) { n.appendNamedDNSVerifications(name) },
			func(n *Organization, e *DNSVerification) { n.appendNamedDNSVerifications(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedJobTemplates {
		if err := _q.loadJobTemplates(ctx, query, nodes,
			func(n *Organization) { n.appendNamedJobTemplates(name) },
			func(n *Organization, e *JobTemplate) { n.appendNamedJobTemplates(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedScheduledJobs {
		if err := _q.loadScheduledJobs(ctx, query, nodes,
			func(n *Organization) { n.appendNamedScheduledJobs(name) },
			func(n *Organization, e *ScheduledJob) { n.appendNamedScheduledJobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedJobResults {
		if err := _q.loadJobResults(ctx, query, nodes,
			func(n *Organization) { n.appendNamedJobResults(name) },
			func(n *Organization, e *JobResult) { n.appendNamedJobResults(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedScheduledJobRuns {
		if err := _q.loadScheduledJobRuns(ctx, query, nodes,
			func(n *Organization) { n.appendNamedScheduledJobRuns(name) },
			func(n *Organization, e *ScheduledJobRun) { n.appendNamedScheduledJobRuns(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTrustCenters {
		if err := _q.loadTrustCenters(ctx, query, nodes,
			func(n *Organization) { n.appendNamedTrustCenters(name) },
			func(n *Organization, e *TrustCenter) { n.appendNamedTrustCenters(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedAssets {
		if err := _q.loadAssets(ctx, query, nodes,
			func(n *Organization) { n.appendNamedAssets(name) },
			func(n *Organization, e *Asset) { n.appendNamedAssets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedScans {
		if err := _q.loadScans(ctx, query, nodes,
			func(n *Organization) { n.appendNamedScans(name) },
			func(n *Organization, e *Scan) { n.appendNamedScans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSubprocessors {
		if err := _q.loadSubprocessors(ctx, query, nodes,
			func(n *Organization) { n.appendNamedSubprocessors(name) },
			func(n *Organization, e *Subprocessor) { n.appendNamedSubprocessors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedExports {
		if err := _q.loadExports(ctx, query, nodes,
			func(n *Organization) { n.appendNamedExports(name) },
			func(n *Organization, e *Export) { n.appendNamedExports(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTrustCenterDocs {
		if err := _q.loadTrustCenterDocs(ctx, query, nodes,
			func(n *Organization) { n.appendNamedTrustCenterDocs(name) },
			func(n *Organization, e *TrustCenterDoc) { n.appendNamedTrustCenterDocs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedMembers {
		if err := _q.loadMembers(ctx, query, nodes,
			func(n *Organization) { n.appendNamedMembers(name) },
			func(n *Organization, e *OrgMembership) { n.appendNamedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *OrganizationQuery) loadControlCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ControlCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_control_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_control_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_control_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadControlImplementationCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ControlImplementationCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_control_implementation_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_control_implementation_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_control_implementation_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadControlObjectiveCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ControlObjectiveCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_control_objective_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_control_objective_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_control_objective_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadEvidenceCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.EvidenceCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_evidence_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_evidence_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_evidence_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadGroupCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.GroupCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_group_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_group_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_group_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadInternalPolicyCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.InternalPolicyCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_internal_policy_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_internal_policy_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_internal_policy_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadMappedControlCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.MappedControlCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_mapped_control_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_mapped_control_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_mapped_control_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadNarrativeCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.NarrativeCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_narrative_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_narrative_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_narrative_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadProcedureCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ProcedureCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_procedure_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_procedure_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_procedure_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadProgramCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ProgramCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_program_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_program_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_program_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadRiskCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.RiskCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_risk_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_risk_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_risk_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadScheduledJobCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ScheduledJobCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_scheduled_job_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_scheduled_job_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_scheduled_job_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadStandardCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.StandardCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_standard_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_standard_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_standard_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadTemplateCreators(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.TemplateCreatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.organization_template_creators
		if fk == nil {
			return fmt.Errorf(`foreign-key "organization_template_creators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_template_creators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadParent(ctx context.Context, query *OrganizationQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Organization)
	for i := range nodes {
		fk := nodes[i].ParentOrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *OrganizationQuery) loadChildren(ctx context.Context, query *OrganizationQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Organization)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(organization.FieldParentOrganizationID)
	}
	query.Where(predicate.Organization(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentOrganizationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_organization_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadSetting(ctx context.Context, query *OrganizationSettingQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OrganizationSetting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(organizationsetting.FieldOrganizationID)
	}
	query.Where(predicate.OrganizationSetting(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.SettingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrganizationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadPersonalAccessTokens(ctx context.Context, query *PersonalAccessTokenQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *PersonalAccessToken)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.PersonalAccessTokensTable)
		joinT.Schema(_q.schemaConfig.OrganizationPersonalAccessTokens)
		s.Join(joinT).On(s.C(personalaccesstoken.FieldID), joinT.C(organization.PersonalAccessTokensPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(organization.PersonalAccessTokensPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.PersonalAccessTokensPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*PersonalAccessToken](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "personal_access_tokens" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *OrganizationQuery) loadAPITokens(ctx context.Context, query *APITokenQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *APIToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(apitoken.FieldOwnerID)
	}
	query.Where(predicate.APIToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.APITokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.UsersTable)
		joinT.Schema(_q.schemaConfig.OrgMembership)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(organization.UsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(organization.UsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.UsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *OrganizationQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.FilesTable)
		joinT.Schema(_q.schemaConfig.OrganizationFiles)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(organization.FilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(organization.FilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.FilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *OrganizationQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.EventsTable)
		joinT.Schema(_q.schemaConfig.OrganizationEvents)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(organization.EventsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(organization.EventsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.EventsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Event](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "events" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *OrganizationQuery) loadSecrets(ctx context.Context, query *HushQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Hush)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(hush.FieldOwnerID)
	}
	query.Where(predicate.Hush(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.SecretsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadAvatarFile(ctx context.Context, query *FileQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *File)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Organization)
	for i := range nodes {
		if nodes[i].AvatarLocalFileID == nil {
			continue
		}
		fk := *nodes[i].AvatarLocalFileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(file.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "avatar_local_file_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *OrganizationQuery) loadGroups(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(group.FieldOwnerID)
	}
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.GroupsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadTemplates(ctx context.Context, query *TemplateQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Template)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(template.FieldOwnerID)
	}
	query.Where(predicate.Template(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.TemplatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadIntegrations(ctx context.Context, query *IntegrationQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Integration)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(integration.FieldOwnerID)
	}
	query.Where(predicate.Integration(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.IntegrationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadDocuments(ctx context.Context, query *DocumentDataQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *DocumentData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(documentdata.FieldOwnerID)
	}
	query.Where(predicate.DocumentData(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.DocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadOrgSubscriptions(ctx context.Context, query *OrgSubscriptionQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OrgSubscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgsubscription.FieldOwnerID)
	}
	query.Where(predicate.OrgSubscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.OrgSubscriptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadOrgProducts(ctx context.Context, query *OrgProductQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OrgProduct)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgproduct.FieldOwnerID)
	}
	query.Where(predicate.OrgProduct(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.OrgProductsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadOrgPrices(ctx context.Context, query *OrgPriceQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OrgPrice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgprice.FieldOwnerID)
	}
	query.Where(predicate.OrgPrice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.OrgPricesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadOrgModules(ctx context.Context, query *OrgModuleQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OrgModule)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgmodule.FieldOwnerID)
	}
	query.Where(predicate.OrgModule(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.OrgModulesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadInvites(ctx context.Context, query *InviteQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Invite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(invite.FieldOwnerID)
	}
	query.Where(predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.InvitesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadSubscribers(ctx context.Context, query *SubscriberQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Subscriber)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subscriber.FieldOwnerID)
	}
	query.Where(predicate.Subscriber(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.SubscribersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadEntities(ctx context.Context, query *EntityQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Entity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(entity.FieldOwnerID)
	}
	query.Where(predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.EntitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadEntityTypes(ctx context.Context, query *EntityTypeQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *EntityType)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(entitytype.FieldOwnerID)
	}
	query.Where(predicate.EntityType(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.EntityTypesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadContacts(ctx context.Context, query *ContactQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Contact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(contact.FieldOwnerID)
	}
	query.Where(predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ContactsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadNotes(ctx context.Context, query *NoteQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Note)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(note.FieldOwnerID)
	}
	query.Where(predicate.Note(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.NotesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(task.FieldOwnerID)
	}
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.TasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Program)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(program.FieldOwnerID)
	}
	query.Where(predicate.Program(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ProgramsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadProcedures(ctx context.Context, query *ProcedureQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Procedure)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(procedure.FieldOwnerID)
	}
	query.Where(predicate.Procedure(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ProceduresColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadInternalPolicies(ctx context.Context, query *InternalPolicyQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *InternalPolicy)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(internalpolicy.FieldOwnerID)
	}
	query.Where(predicate.InternalPolicy(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.InternalPoliciesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadRisks(ctx context.Context, query *RiskQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Risk)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(risk.FieldOwnerID)
	}
	query.Where(predicate.Risk(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.RisksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadControlObjectives(ctx context.Context, query *ControlObjectiveQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *ControlObjective)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(controlobjective.FieldOwnerID)
	}
	query.Where(predicate.ControlObjective(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ControlObjectivesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadNarratives(ctx context.Context, query *NarrativeQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Narrative)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(narrative.FieldOwnerID)
	}
	query.Where(predicate.Narrative(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.NarrativesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Control)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(control.FieldOwnerID)
	}
	query.Where(predicate.Control(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ControlsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadSubcontrols(ctx context.Context, query *SubcontrolQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Subcontrol)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subcontrol.FieldOwnerID)
	}
	query.Where(predicate.Subcontrol(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.SubcontrolsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadControlImplementations(ctx context.Context, query *ControlImplementationQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *ControlImplementation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(controlimplementation.FieldOwnerID)
	}
	query.Where(predicate.ControlImplementation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ControlImplementationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadMappedControls(ctx context.Context, query *MappedControlQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *MappedControl)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(mappedcontrol.FieldOwnerID)
	}
	query.Where(predicate.MappedControl(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.MappedControlsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadEvidence(ctx context.Context, query *EvidenceQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Evidence)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(evidence.FieldOwnerID)
	}
	query.Where(predicate.Evidence(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.EvidenceColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadStandards(ctx context.Context, query *StandardQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Standard)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(standard.FieldOwnerID)
	}
	query.Where(predicate.Standard(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.StandardsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadActionPlans(ctx context.Context, query *ActionPlanQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *ActionPlan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(actionplan.FieldOwnerID)
	}
	query.Where(predicate.ActionPlan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ActionPlansColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadCustomDomains(ctx context.Context, query *CustomDomainQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *CustomDomain)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(customdomain.FieldOwnerID)
	}
	query.Where(predicate.CustomDomain(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.CustomDomainsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadJobRunners(ctx context.Context, query *JobRunnerQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *JobRunner)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobrunner.FieldOwnerID)
	}
	query.Where(predicate.JobRunner(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.JobRunnersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadJobRunnerTokens(ctx context.Context, query *JobRunnerTokenQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *JobRunnerToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobrunnertoken.FieldOwnerID)
	}
	query.Where(predicate.JobRunnerToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.JobRunnerTokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadJobRunnerRegistrationTokens(ctx context.Context, query *JobRunnerRegistrationTokenQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *JobRunnerRegistrationToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobrunnerregistrationtoken.FieldOwnerID)
	}
	query.Where(predicate.JobRunnerRegistrationToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.JobRunnerRegistrationTokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadDNSVerifications(ctx context.Context, query *DNSVerificationQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *DNSVerification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(dnsverification.FieldOwnerID)
	}
	query.Where(predicate.DNSVerification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.DNSVerificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadJobTemplates(ctx context.Context, query *JobTemplateQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *JobTemplate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobtemplate.FieldOwnerID)
	}
	query.Where(predicate.JobTemplate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.JobTemplatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadScheduledJobs(ctx context.Context, query *ScheduledJobQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *ScheduledJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(scheduledjob.FieldOwnerID)
	}
	query.Where(predicate.ScheduledJob(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ScheduledJobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadJobResults(ctx context.Context, query *JobResultQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *JobResult)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(jobresult.FieldOwnerID)
	}
	query.Where(predicate.JobResult(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.JobResultsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadScheduledJobRuns(ctx context.Context, query *ScheduledJobRunQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *ScheduledJobRun)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(scheduledjobrun.FieldOwnerID)
	}
	query.Where(predicate.ScheduledJobRun(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ScheduledJobRunsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadTrustCenters(ctx context.Context, query *TrustCenterQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *TrustCenter)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(trustcenter.FieldOwnerID)
	}
	query.Where(predicate.TrustCenter(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.TrustCentersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadAssets(ctx context.Context, query *AssetQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Asset)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(asset.FieldOwnerID)
	}
	query.Where(predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.AssetsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadScans(ctx context.Context, query *ScanQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Scan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(scan.FieldOwnerID)
	}
	query.Where(predicate.Scan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ScansColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadSubprocessors(ctx context.Context, query *SubprocessorQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Subprocessor)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subprocessor.FieldOwnerID)
	}
	query.Where(predicate.Subprocessor(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.SubprocessorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadExports(ctx context.Context, query *ExportQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Export)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(export.FieldOwnerID)
	}
	query.Where(predicate.Export(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ExportsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadTrustCenterDocs(ctx context.Context, query *TrustCenterDocQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *TrustCenterDoc)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(trustcenterdoc.FieldOwnerID)
	}
	query.Where(predicate.TrustCenterDoc(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.TrustCenterDocsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *OrganizationQuery) loadMembers(ctx context.Context, query *OrgMembershipQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OrgMembership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgmembership.FieldOrganizationID)
	}
	query.Where(predicate.OrgMembership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.MembersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrganizationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *OrganizationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Schema = _q.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *OrganizationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for i := range fields {
			if fields[i] != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withParent != nil {
			_spec.Node.AddColumnOnce(organization.FieldParentOrganizationID)
		}
		if _q.withAvatarFile != nil {
			_spec.Node.AddColumnOnce(organization.FieldAvatarLocalFileID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *OrganizationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(organization.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = organization.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(_q.schemaConfig.Organization)
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *OrganizationQuery) Modify(modifiers ...func(s *sql.Selector)) *OrganizationSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// WithNamedControlCreators tells the query-builder to eager-load the nodes that are connected to the "control_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedControlCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlCreators == nil {
		_q.withNamedControlCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedControlCreators[name] = query
	return _q
}

// WithNamedControlImplementationCreators tells the query-builder to eager-load the nodes that are connected to the "control_implementation_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedControlImplementationCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlImplementationCreators == nil {
		_q.withNamedControlImplementationCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedControlImplementationCreators[name] = query
	return _q
}

// WithNamedControlObjectiveCreators tells the query-builder to eager-load the nodes that are connected to the "control_objective_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedControlObjectiveCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlObjectiveCreators == nil {
		_q.withNamedControlObjectiveCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedControlObjectiveCreators[name] = query
	return _q
}

// WithNamedEvidenceCreators tells the query-builder to eager-load the nodes that are connected to the "evidence_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedEvidenceCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEvidenceCreators == nil {
		_q.withNamedEvidenceCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedEvidenceCreators[name] = query
	return _q
}

// WithNamedGroupCreators tells the query-builder to eager-load the nodes that are connected to the "group_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedGroupCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedGroupCreators == nil {
		_q.withNamedGroupCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedGroupCreators[name] = query
	return _q
}

// WithNamedInternalPolicyCreators tells the query-builder to eager-load the nodes that are connected to the "internal_policy_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedInternalPolicyCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedInternalPolicyCreators == nil {
		_q.withNamedInternalPolicyCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedInternalPolicyCreators[name] = query
	return _q
}

// WithNamedMappedControlCreators tells the query-builder to eager-load the nodes that are connected to the "mapped_control_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedMappedControlCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedMappedControlCreators == nil {
		_q.withNamedMappedControlCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedMappedControlCreators[name] = query
	return _q
}

// WithNamedNarrativeCreators tells the query-builder to eager-load the nodes that are connected to the "narrative_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedNarrativeCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedNarrativeCreators == nil {
		_q.withNamedNarrativeCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedNarrativeCreators[name] = query
	return _q
}

// WithNamedProcedureCreators tells the query-builder to eager-load the nodes that are connected to the "procedure_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedProcedureCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProcedureCreators == nil {
		_q.withNamedProcedureCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedProcedureCreators[name] = query
	return _q
}

// WithNamedProgramCreators tells the query-builder to eager-load the nodes that are connected to the "program_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedProgramCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProgramCreators == nil {
		_q.withNamedProgramCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedProgramCreators[name] = query
	return _q
}

// WithNamedRiskCreators tells the query-builder to eager-load the nodes that are connected to the "risk_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedRiskCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedRiskCreators == nil {
		_q.withNamedRiskCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedRiskCreators[name] = query
	return _q
}

// WithNamedScheduledJobCreators tells the query-builder to eager-load the nodes that are connected to the "scheduled_job_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedScheduledJobCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedScheduledJobCreators == nil {
		_q.withNamedScheduledJobCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedScheduledJobCreators[name] = query
	return _q
}

// WithNamedStandardCreators tells the query-builder to eager-load the nodes that are connected to the "standard_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedStandardCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedStandardCreators == nil {
		_q.withNamedStandardCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedStandardCreators[name] = query
	return _q
}

// WithNamedTemplateCreators tells the query-builder to eager-load the nodes that are connected to the "template_creators"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedTemplateCreators(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTemplateCreators == nil {
		_q.withNamedTemplateCreators = make(map[string]*GroupQuery)
	}
	_q.withNamedTemplateCreators[name] = query
	return _q
}

// WithNamedChildren tells the query-builder to eager-load the nodes that are connected to the "children"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedChildren(name string, opts ...func(*OrganizationQuery)) *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedChildren == nil {
		_q.withNamedChildren = make(map[string]*OrganizationQuery)
	}
	_q.withNamedChildren[name] = query
	return _q
}

// WithNamedPersonalAccessTokens tells the query-builder to eager-load the nodes that are connected to the "personal_access_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedPersonalAccessTokens(name string, opts ...func(*PersonalAccessTokenQuery)) *OrganizationQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedPersonalAccessTokens == nil {
		_q.withNamedPersonalAccessTokens = make(map[string]*PersonalAccessTokenQuery)
	}
	_q.withNamedPersonalAccessTokens[name] = query
	return _q
}

// WithNamedAPITokens tells the query-builder to eager-load the nodes that are connected to the "api_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedAPITokens(name string, opts ...func(*APITokenQuery)) *OrganizationQuery {
	query := (&APITokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedAPITokens == nil {
		_q.withNamedAPITokens = make(map[string]*APITokenQuery)
	}
	_q.withNamedAPITokens[name] = query
	return _q
}

// WithNamedUsers tells the query-builder to eager-load the nodes that are connected to the "users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedUsers(name string, opts ...func(*UserQuery)) *OrganizationQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedUsers == nil {
		_q.withNamedUsers = make(map[string]*UserQuery)
	}
	_q.withNamedUsers[name] = query
	return _q
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *OrganizationQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedFiles == nil {
		_q.withNamedFiles = make(map[string]*FileQuery)
	}
	_q.withNamedFiles[name] = query
	return _q
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *OrganizationQuery {
	query := (&EventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEvents == nil {
		_q.withNamedEvents = make(map[string]*EventQuery)
	}
	_q.withNamedEvents[name] = query
	return _q
}

// WithNamedSecrets tells the query-builder to eager-load the nodes that are connected to the "secrets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedSecrets(name string, opts ...func(*HushQuery)) *OrganizationQuery {
	query := (&HushClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSecrets == nil {
		_q.withNamedSecrets = make(map[string]*HushQuery)
	}
	_q.withNamedSecrets[name] = query
	return _q
}

// WithNamedGroups tells the query-builder to eager-load the nodes that are connected to the "groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedGroups(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedGroups == nil {
		_q.withNamedGroups = make(map[string]*GroupQuery)
	}
	_q.withNamedGroups[name] = query
	return _q
}

// WithNamedTemplates tells the query-builder to eager-load the nodes that are connected to the "templates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedTemplates(name string, opts ...func(*TemplateQuery)) *OrganizationQuery {
	query := (&TemplateClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTemplates == nil {
		_q.withNamedTemplates = make(map[string]*TemplateQuery)
	}
	_q.withNamedTemplates[name] = query
	return _q
}

// WithNamedIntegrations tells the query-builder to eager-load the nodes that are connected to the "integrations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedIntegrations(name string, opts ...func(*IntegrationQuery)) *OrganizationQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedIntegrations == nil {
		_q.withNamedIntegrations = make(map[string]*IntegrationQuery)
	}
	_q.withNamedIntegrations[name] = query
	return _q
}

// WithNamedDocuments tells the query-builder to eager-load the nodes that are connected to the "documents"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedDocuments(name string, opts ...func(*DocumentDataQuery)) *OrganizationQuery {
	query := (&DocumentDataClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedDocuments == nil {
		_q.withNamedDocuments = make(map[string]*DocumentDataQuery)
	}
	_q.withNamedDocuments[name] = query
	return _q
}

// WithNamedOrgSubscriptions tells the query-builder to eager-load the nodes that are connected to the "org_subscriptions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedOrgSubscriptions(name string, opts ...func(*OrgSubscriptionQuery)) *OrganizationQuery {
	query := (&OrgSubscriptionClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrgSubscriptions == nil {
		_q.withNamedOrgSubscriptions = make(map[string]*OrgSubscriptionQuery)
	}
	_q.withNamedOrgSubscriptions[name] = query
	return _q
}

// WithNamedOrgProducts tells the query-builder to eager-load the nodes that are connected to the "org_products"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedOrgProducts(name string, opts ...func(*OrgProductQuery)) *OrganizationQuery {
	query := (&OrgProductClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrgProducts == nil {
		_q.withNamedOrgProducts = make(map[string]*OrgProductQuery)
	}
	_q.withNamedOrgProducts[name] = query
	return _q
}

// WithNamedOrgPrices tells the query-builder to eager-load the nodes that are connected to the "org_prices"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedOrgPrices(name string, opts ...func(*OrgPriceQuery)) *OrganizationQuery {
	query := (&OrgPriceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrgPrices == nil {
		_q.withNamedOrgPrices = make(map[string]*OrgPriceQuery)
	}
	_q.withNamedOrgPrices[name] = query
	return _q
}

// WithNamedOrgModules tells the query-builder to eager-load the nodes that are connected to the "org_modules"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedOrgModules(name string, opts ...func(*OrgModuleQuery)) *OrganizationQuery {
	query := (&OrgModuleClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrgModules == nil {
		_q.withNamedOrgModules = make(map[string]*OrgModuleQuery)
	}
	_q.withNamedOrgModules[name] = query
	return _q
}

// WithNamedInvites tells the query-builder to eager-load the nodes that are connected to the "invites"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedInvites(name string, opts ...func(*InviteQuery)) *OrganizationQuery {
	query := (&InviteClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedInvites == nil {
		_q.withNamedInvites = make(map[string]*InviteQuery)
	}
	_q.withNamedInvites[name] = query
	return _q
}

// WithNamedSubscribers tells the query-builder to eager-load the nodes that are connected to the "subscribers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedSubscribers(name string, opts ...func(*SubscriberQuery)) *OrganizationQuery {
	query := (&SubscriberClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSubscribers == nil {
		_q.withNamedSubscribers = make(map[string]*SubscriberQuery)
	}
	_q.withNamedSubscribers[name] = query
	return _q
}

// WithNamedEntities tells the query-builder to eager-load the nodes that are connected to the "entities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedEntities(name string, opts ...func(*EntityQuery)) *OrganizationQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEntities == nil {
		_q.withNamedEntities = make(map[string]*EntityQuery)
	}
	_q.withNamedEntities[name] = query
	return _q
}

// WithNamedEntityTypes tells the query-builder to eager-load the nodes that are connected to the "entity_types"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedEntityTypes(name string, opts ...func(*EntityTypeQuery)) *OrganizationQuery {
	query := (&EntityTypeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEntityTypes == nil {
		_q.withNamedEntityTypes = make(map[string]*EntityTypeQuery)
	}
	_q.withNamedEntityTypes[name] = query
	return _q
}

// WithNamedContacts tells the query-builder to eager-load the nodes that are connected to the "contacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedContacts(name string, opts ...func(*ContactQuery)) *OrganizationQuery {
	query := (&ContactClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedContacts == nil {
		_q.withNamedContacts = make(map[string]*ContactQuery)
	}
	_q.withNamedContacts[name] = query
	return _q
}

// WithNamedNotes tells the query-builder to eager-load the nodes that are connected to the "notes"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedNotes(name string, opts ...func(*NoteQuery)) *OrganizationQuery {
	query := (&NoteClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedNotes == nil {
		_q.withNamedNotes = make(map[string]*NoteQuery)
	}
	_q.withNamedNotes[name] = query
	return _q
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *OrganizationQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTasks == nil {
		_q.withNamedTasks = make(map[string]*TaskQuery)
	}
	_q.withNamedTasks[name] = query
	return _q
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *OrganizationQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedPrograms == nil {
		_q.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	_q.withNamedPrograms[name] = query
	return _q
}

// WithNamedProcedures tells the query-builder to eager-load the nodes that are connected to the "procedures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedProcedures(name string, opts ...func(*ProcedureQuery)) *OrganizationQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProcedures == nil {
		_q.withNamedProcedures = make(map[string]*ProcedureQuery)
	}
	_q.withNamedProcedures[name] = query
	return _q
}

// WithNamedInternalPolicies tells the query-builder to eager-load the nodes that are connected to the "internal_policies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedInternalPolicies(name string, opts ...func(*InternalPolicyQuery)) *OrganizationQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedInternalPolicies == nil {
		_q.withNamedInternalPolicies = make(map[string]*InternalPolicyQuery)
	}
	_q.withNamedInternalPolicies[name] = query
	return _q
}

// WithNamedRisks tells the query-builder to eager-load the nodes that are connected to the "risks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedRisks(name string, opts ...func(*RiskQuery)) *OrganizationQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedRisks == nil {
		_q.withNamedRisks = make(map[string]*RiskQuery)
	}
	_q.withNamedRisks[name] = query
	return _q
}

// WithNamedControlObjectives tells the query-builder to eager-load the nodes that are connected to the "control_objectives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedControlObjectives(name string, opts ...func(*ControlObjectiveQuery)) *OrganizationQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlObjectives == nil {
		_q.withNamedControlObjectives = make(map[string]*ControlObjectiveQuery)
	}
	_q.withNamedControlObjectives[name] = query
	return _q
}

// WithNamedNarratives tells the query-builder to eager-load the nodes that are connected to the "narratives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedNarratives(name string, opts ...func(*NarrativeQuery)) *OrganizationQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedNarratives == nil {
		_q.withNamedNarratives = make(map[string]*NarrativeQuery)
	}
	_q.withNamedNarratives[name] = query
	return _q
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *OrganizationQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControls == nil {
		_q.withNamedControls = make(map[string]*ControlQuery)
	}
	_q.withNamedControls[name] = query
	return _q
}

// WithNamedSubcontrols tells the query-builder to eager-load the nodes that are connected to the "subcontrols"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedSubcontrols(name string, opts ...func(*SubcontrolQuery)) *OrganizationQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSubcontrols == nil {
		_q.withNamedSubcontrols = make(map[string]*SubcontrolQuery)
	}
	_q.withNamedSubcontrols[name] = query
	return _q
}

// WithNamedControlImplementations tells the query-builder to eager-load the nodes that are connected to the "control_implementations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedControlImplementations(name string, opts ...func(*ControlImplementationQuery)) *OrganizationQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlImplementations == nil {
		_q.withNamedControlImplementations = make(map[string]*ControlImplementationQuery)
	}
	_q.withNamedControlImplementations[name] = query
	return _q
}

// WithNamedMappedControls tells the query-builder to eager-load the nodes that are connected to the "mapped_controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedMappedControls(name string, opts ...func(*MappedControlQuery)) *OrganizationQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedMappedControls == nil {
		_q.withNamedMappedControls = make(map[string]*MappedControlQuery)
	}
	_q.withNamedMappedControls[name] = query
	return _q
}

// WithNamedEvidence tells the query-builder to eager-load the nodes that are connected to the "evidence"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedEvidence(name string, opts ...func(*EvidenceQuery)) *OrganizationQuery {
	query := (&EvidenceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEvidence == nil {
		_q.withNamedEvidence = make(map[string]*EvidenceQuery)
	}
	_q.withNamedEvidence[name] = query
	return _q
}

// WithNamedStandards tells the query-builder to eager-load the nodes that are connected to the "standards"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedStandards(name string, opts ...func(*StandardQuery)) *OrganizationQuery {
	query := (&StandardClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedStandards == nil {
		_q.withNamedStandards = make(map[string]*StandardQuery)
	}
	_q.withNamedStandards[name] = query
	return _q
}

// WithNamedActionPlans tells the query-builder to eager-load the nodes that are connected to the "action_plans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedActionPlans(name string, opts ...func(*ActionPlanQuery)) *OrganizationQuery {
	query := (&ActionPlanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedActionPlans == nil {
		_q.withNamedActionPlans = make(map[string]*ActionPlanQuery)
	}
	_q.withNamedActionPlans[name] = query
	return _q
}

// WithNamedCustomDomains tells the query-builder to eager-load the nodes that are connected to the "custom_domains"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedCustomDomains(name string, opts ...func(*CustomDomainQuery)) *OrganizationQuery {
	query := (&CustomDomainClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedCustomDomains == nil {
		_q.withNamedCustomDomains = make(map[string]*CustomDomainQuery)
	}
	_q.withNamedCustomDomains[name] = query
	return _q
}

// WithNamedJobRunners tells the query-builder to eager-load the nodes that are connected to the "job_runners"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedJobRunners(name string, opts ...func(*JobRunnerQuery)) *OrganizationQuery {
	query := (&JobRunnerClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedJobRunners == nil {
		_q.withNamedJobRunners = make(map[string]*JobRunnerQuery)
	}
	_q.withNamedJobRunners[name] = query
	return _q
}

// WithNamedJobRunnerTokens tells the query-builder to eager-load the nodes that are connected to the "job_runner_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedJobRunnerTokens(name string, opts ...func(*JobRunnerTokenQuery)) *OrganizationQuery {
	query := (&JobRunnerTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedJobRunnerTokens == nil {
		_q.withNamedJobRunnerTokens = make(map[string]*JobRunnerTokenQuery)
	}
	_q.withNamedJobRunnerTokens[name] = query
	return _q
}

// WithNamedJobRunnerRegistrationTokens tells the query-builder to eager-load the nodes that are connected to the "job_runner_registration_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedJobRunnerRegistrationTokens(name string, opts ...func(*JobRunnerRegistrationTokenQuery)) *OrganizationQuery {
	query := (&JobRunnerRegistrationTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedJobRunnerRegistrationTokens == nil {
		_q.withNamedJobRunnerRegistrationTokens = make(map[string]*JobRunnerRegistrationTokenQuery)
	}
	_q.withNamedJobRunnerRegistrationTokens[name] = query
	return _q
}

// WithNamedDNSVerifications tells the query-builder to eager-load the nodes that are connected to the "dns_verifications"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedDNSVerifications(name string, opts ...func(*DNSVerificationQuery)) *OrganizationQuery {
	query := (&DNSVerificationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedDNSVerifications == nil {
		_q.withNamedDNSVerifications = make(map[string]*DNSVerificationQuery)
	}
	_q.withNamedDNSVerifications[name] = query
	return _q
}

// WithNamedJobTemplates tells the query-builder to eager-load the nodes that are connected to the "job_templates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedJobTemplates(name string, opts ...func(*JobTemplateQuery)) *OrganizationQuery {
	query := (&JobTemplateClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedJobTemplates == nil {
		_q.withNamedJobTemplates = make(map[string]*JobTemplateQuery)
	}
	_q.withNamedJobTemplates[name] = query
	return _q
}

// WithNamedScheduledJobs tells the query-builder to eager-load the nodes that are connected to the "scheduled_jobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedScheduledJobs(name string, opts ...func(*ScheduledJobQuery)) *OrganizationQuery {
	query := (&ScheduledJobClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedScheduledJobs == nil {
		_q.withNamedScheduledJobs = make(map[string]*ScheduledJobQuery)
	}
	_q.withNamedScheduledJobs[name] = query
	return _q
}

// WithNamedJobResults tells the query-builder to eager-load the nodes that are connected to the "job_results"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedJobResults(name string, opts ...func(*JobResultQuery)) *OrganizationQuery {
	query := (&JobResultClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedJobResults == nil {
		_q.withNamedJobResults = make(map[string]*JobResultQuery)
	}
	_q.withNamedJobResults[name] = query
	return _q
}

// WithNamedScheduledJobRuns tells the query-builder to eager-load the nodes that are connected to the "scheduled_job_runs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedScheduledJobRuns(name string, opts ...func(*ScheduledJobRunQuery)) *OrganizationQuery {
	query := (&ScheduledJobRunClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedScheduledJobRuns == nil {
		_q.withNamedScheduledJobRuns = make(map[string]*ScheduledJobRunQuery)
	}
	_q.withNamedScheduledJobRuns[name] = query
	return _q
}

// WithNamedTrustCenters tells the query-builder to eager-load the nodes that are connected to the "trust_centers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedTrustCenters(name string, opts ...func(*TrustCenterQuery)) *OrganizationQuery {
	query := (&TrustCenterClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTrustCenters == nil {
		_q.withNamedTrustCenters = make(map[string]*TrustCenterQuery)
	}
	_q.withNamedTrustCenters[name] = query
	return _q
}

// WithNamedAssets tells the query-builder to eager-load the nodes that are connected to the "assets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedAssets(name string, opts ...func(*AssetQuery)) *OrganizationQuery {
	query := (&AssetClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedAssets == nil {
		_q.withNamedAssets = make(map[string]*AssetQuery)
	}
	_q.withNamedAssets[name] = query
	return _q
}

// WithNamedScans tells the query-builder to eager-load the nodes that are connected to the "scans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedScans(name string, opts ...func(*ScanQuery)) *OrganizationQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedScans == nil {
		_q.withNamedScans = make(map[string]*ScanQuery)
	}
	_q.withNamedScans[name] = query
	return _q
}

// WithNamedSubprocessors tells the query-builder to eager-load the nodes that are connected to the "subprocessors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedSubprocessors(name string, opts ...func(*SubprocessorQuery)) *OrganizationQuery {
	query := (&SubprocessorClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSubprocessors == nil {
		_q.withNamedSubprocessors = make(map[string]*SubprocessorQuery)
	}
	_q.withNamedSubprocessors[name] = query
	return _q
}

// WithNamedExports tells the query-builder to eager-load the nodes that are connected to the "exports"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedExports(name string, opts ...func(*ExportQuery)) *OrganizationQuery {
	query := (&ExportClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedExports == nil {
		_q.withNamedExports = make(map[string]*ExportQuery)
	}
	_q.withNamedExports[name] = query
	return _q
}

// WithNamedTrustCenterDocs tells the query-builder to eager-load the nodes that are connected to the "trust_center_docs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedTrustCenterDocs(name string, opts ...func(*TrustCenterDocQuery)) *OrganizationQuery {
	query := (&TrustCenterDocClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTrustCenterDocs == nil {
		_q.withNamedTrustCenterDocs = make(map[string]*TrustCenterDocQuery)
	}
	_q.withNamedTrustCenterDocs[name] = query
	return _q
}

// WithNamedMembers tells the query-builder to eager-load the nodes that are connected to the "members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *OrganizationQuery) WithNamedMembers(name string, opts ...func(*OrgMembershipQuery)) *OrganizationQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedMembers == nil {
		_q.withNamedMembers = make(map[string]*OrgMembershipQuery)
	}
	_q.withNamedMembers[name] = query
	return _q
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (oq *OrganizationQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryIDs)
	if err := oq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return oq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, oq, qr, oq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// OrganizationGroupBy is the group-by builder for Organization entities.
type OrganizationGroupBy struct {
	selector
	build *OrganizationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *OrganizationGroupBy) Aggregate(fns ...AggregateFunc) *OrganizationGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *OrganizationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationQuery, *OrganizationGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *OrganizationGroupBy) sqlScan(ctx context.Context, root *OrganizationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrganizationSelect is the builder for selecting fields of Organization entities.
type OrganizationSelect struct {
	*OrganizationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *OrganizationSelect) Aggregate(fns ...AggregateFunc) *OrganizationSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *OrganizationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationQuery, *OrganizationSelect](ctx, _s.OrganizationQuery, _s, _s.inters, v)
}

func (_s *OrganizationSelect) sqlScan(ctx context.Context, root *OrganizationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *OrganizationSelect) Modify(modifiers ...func(s *sql.Selector)) *OrganizationSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
