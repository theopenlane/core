// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersettinghistory"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterSettingHistoryQuery is the builder for querying TrustCenterSettingHistory entities.
type TrustCenterSettingHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []trustcentersettinghistory.OrderOption
	inters     []Interceptor
	predicates []predicate.TrustCenterSettingHistory
	loadTotal  []func(context.Context, []*TrustCenterSettingHistory) error
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TrustCenterSettingHistoryQuery builder.
func (tcshq *TrustCenterSettingHistoryQuery) Where(ps ...predicate.TrustCenterSettingHistory) *TrustCenterSettingHistoryQuery {
	tcshq.predicates = append(tcshq.predicates, ps...)
	return tcshq
}

// Limit the number of records to be returned by this query.
func (tcshq *TrustCenterSettingHistoryQuery) Limit(limit int) *TrustCenterSettingHistoryQuery {
	tcshq.ctx.Limit = &limit
	return tcshq
}

// Offset to start from.
func (tcshq *TrustCenterSettingHistoryQuery) Offset(offset int) *TrustCenterSettingHistoryQuery {
	tcshq.ctx.Offset = &offset
	return tcshq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tcshq *TrustCenterSettingHistoryQuery) Unique(unique bool) *TrustCenterSettingHistoryQuery {
	tcshq.ctx.Unique = &unique
	return tcshq
}

// Order specifies how the records should be ordered.
func (tcshq *TrustCenterSettingHistoryQuery) Order(o ...trustcentersettinghistory.OrderOption) *TrustCenterSettingHistoryQuery {
	tcshq.order = append(tcshq.order, o...)
	return tcshq
}

// First returns the first TrustCenterSettingHistory entity from the query.
// Returns a *NotFoundError when no TrustCenterSettingHistory was found.
func (tcshq *TrustCenterSettingHistoryQuery) First(ctx context.Context) (*TrustCenterSettingHistory, error) {
	nodes, err := tcshq.Limit(1).All(setContextOp(ctx, tcshq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{trustcentersettinghistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tcshq *TrustCenterSettingHistoryQuery) FirstX(ctx context.Context) *TrustCenterSettingHistory {
	node, err := tcshq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TrustCenterSettingHistory ID from the query.
// Returns a *NotFoundError when no TrustCenterSettingHistory ID was found.
func (tcshq *TrustCenterSettingHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tcshq.Limit(1).IDs(setContextOp(ctx, tcshq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{trustcentersettinghistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tcshq *TrustCenterSettingHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := tcshq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TrustCenterSettingHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TrustCenterSettingHistory entity is found.
// Returns a *NotFoundError when no TrustCenterSettingHistory entities are found.
func (tcshq *TrustCenterSettingHistoryQuery) Only(ctx context.Context) (*TrustCenterSettingHistory, error) {
	nodes, err := tcshq.Limit(2).All(setContextOp(ctx, tcshq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{trustcentersettinghistory.Label}
	default:
		return nil, &NotSingularError{trustcentersettinghistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tcshq *TrustCenterSettingHistoryQuery) OnlyX(ctx context.Context) *TrustCenterSettingHistory {
	node, err := tcshq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TrustCenterSettingHistory ID in the query.
// Returns a *NotSingularError when more than one TrustCenterSettingHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (tcshq *TrustCenterSettingHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tcshq.Limit(2).IDs(setContextOp(ctx, tcshq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{trustcentersettinghistory.Label}
	default:
		err = &NotSingularError{trustcentersettinghistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tcshq *TrustCenterSettingHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := tcshq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TrustCenterSettingHistories.
func (tcshq *TrustCenterSettingHistoryQuery) All(ctx context.Context) ([]*TrustCenterSettingHistory, error) {
	ctx = setContextOp(ctx, tcshq.ctx, ent.OpQueryAll)
	if err := tcshq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TrustCenterSettingHistory, *TrustCenterSettingHistoryQuery]()
	return withInterceptors[[]*TrustCenterSettingHistory](ctx, tcshq, qr, tcshq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tcshq *TrustCenterSettingHistoryQuery) AllX(ctx context.Context) []*TrustCenterSettingHistory {
	nodes, err := tcshq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TrustCenterSettingHistory IDs.
func (tcshq *TrustCenterSettingHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tcshq.ctx.Unique == nil && tcshq.path != nil {
		tcshq.Unique(true)
	}
	ctx = setContextOp(ctx, tcshq.ctx, ent.OpQueryIDs)
	if err = tcshq.Select(trustcentersettinghistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tcshq *TrustCenterSettingHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := tcshq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tcshq *TrustCenterSettingHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcshq.ctx, ent.OpQueryCount)
	if err := tcshq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tcshq, querierCount[*TrustCenterSettingHistoryQuery](), tcshq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tcshq *TrustCenterSettingHistoryQuery) CountX(ctx context.Context) int {
	count, err := tcshq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tcshq *TrustCenterSettingHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tcshq.ctx, ent.OpQueryExist)
	switch _, err := tcshq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tcshq *TrustCenterSettingHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := tcshq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TrustCenterSettingHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tcshq *TrustCenterSettingHistoryQuery) Clone() *TrustCenterSettingHistoryQuery {
	if tcshq == nil {
		return nil
	}
	return &TrustCenterSettingHistoryQuery{
		config:     tcshq.config,
		ctx:        tcshq.ctx.Clone(),
		order:      append([]trustcentersettinghistory.OrderOption{}, tcshq.order...),
		inters:     append([]Interceptor{}, tcshq.inters...),
		predicates: append([]predicate.TrustCenterSettingHistory{}, tcshq.predicates...),
		// clone intermediate query.
		sql:       tcshq.sql.Clone(),
		path:      tcshq.path,
		modifiers: append([]func(*sql.Selector){}, tcshq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TrustCenterSettingHistory.Query().
//		GroupBy(trustcentersettinghistory.FieldHistoryTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (tcshq *TrustCenterSettingHistoryQuery) GroupBy(field string, fields ...string) *TrustCenterSettingHistoryGroupBy {
	tcshq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TrustCenterSettingHistoryGroupBy{build: tcshq}
	grbuild.flds = &tcshq.ctx.Fields
	grbuild.label = trustcentersettinghistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//	}
//
//	client.TrustCenterSettingHistory.Query().
//		Select(trustcentersettinghistory.FieldHistoryTime).
//		Scan(ctx, &v)
func (tcshq *TrustCenterSettingHistoryQuery) Select(fields ...string) *TrustCenterSettingHistorySelect {
	tcshq.ctx.Fields = append(tcshq.ctx.Fields, fields...)
	sbuild := &TrustCenterSettingHistorySelect{TrustCenterSettingHistoryQuery: tcshq}
	sbuild.label = trustcentersettinghistory.Label
	sbuild.flds, sbuild.scan = &tcshq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TrustCenterSettingHistorySelect configured with the given aggregations.
func (tcshq *TrustCenterSettingHistoryQuery) Aggregate(fns ...AggregateFunc) *TrustCenterSettingHistorySelect {
	return tcshq.Select().Aggregate(fns...)
}

func (tcshq *TrustCenterSettingHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tcshq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tcshq); err != nil {
				return err
			}
		}
	}
	for _, f := range tcshq.ctx.Fields {
		if !trustcentersettinghistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if tcshq.path != nil {
		prev, err := tcshq.path(ctx)
		if err != nil {
			return err
		}
		tcshq.sql = prev
	}
	if trustcentersettinghistory.Policy == nil {
		return errors.New("generated: uninitialized trustcentersettinghistory.Policy (forgotten import generated/runtime?)")
	}
	if err := trustcentersettinghistory.Policy.EvalQuery(ctx, tcshq); err != nil {
		return err
	}
	return nil
}

func (tcshq *TrustCenterSettingHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TrustCenterSettingHistory, error) {
	var (
		nodes = []*TrustCenterSettingHistory{}
		_spec = tcshq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TrustCenterSettingHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TrustCenterSettingHistory{config: tcshq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = tcshq.schemaConfig.TrustCenterSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, tcshq.schemaConfig)
	if len(tcshq.modifiers) > 0 {
		_spec.Modifiers = tcshq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tcshq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range tcshq.loadTotal {
		if err := tcshq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tcshq *TrustCenterSettingHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tcshq.querySpec()
	_spec.Node.Schema = tcshq.schemaConfig.TrustCenterSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, tcshq.schemaConfig)
	if len(tcshq.modifiers) > 0 {
		_spec.Modifiers = tcshq.modifiers
	}
	_spec.Node.Columns = tcshq.ctx.Fields
	if len(tcshq.ctx.Fields) > 0 {
		_spec.Unique = tcshq.ctx.Unique != nil && *tcshq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tcshq.driver, _spec)
}

func (tcshq *TrustCenterSettingHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(trustcentersettinghistory.Table, trustcentersettinghistory.Columns, sqlgraph.NewFieldSpec(trustcentersettinghistory.FieldID, field.TypeString))
	_spec.From = tcshq.sql
	if unique := tcshq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tcshq.path != nil {
		_spec.Unique = true
	}
	if fields := tcshq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentersettinghistory.FieldID)
		for i := range fields {
			if fields[i] != trustcentersettinghistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tcshq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tcshq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tcshq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tcshq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tcshq *TrustCenterSettingHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tcshq.driver.Dialect())
	t1 := builder.Table(trustcentersettinghistory.Table)
	columns := tcshq.ctx.Fields
	if len(columns) == 0 {
		columns = trustcentersettinghistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tcshq.sql != nil {
		selector = tcshq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tcshq.ctx.Unique != nil && *tcshq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(tcshq.schemaConfig.TrustCenterSettingHistory)
	ctx = internal.NewSchemaConfigContext(ctx, tcshq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range tcshq.modifiers {
		m(selector)
	}
	for _, p := range tcshq.predicates {
		p(selector)
	}
	for _, p := range tcshq.order {
		p(selector)
	}
	if offset := tcshq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tcshq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tcshq *TrustCenterSettingHistoryQuery) Modify(modifiers ...func(s *sql.Selector)) *TrustCenterSettingHistorySelect {
	tcshq.modifiers = append(tcshq.modifiers, modifiers...)
	return tcshq.Select()
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (tcshq *TrustCenterSettingHistoryQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcshq.ctx, ent.OpQueryIDs)
	if err := tcshq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return tcshq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, tcshq, qr, tcshq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// TrustCenterSettingHistoryGroupBy is the group-by builder for TrustCenterSettingHistory entities.
type TrustCenterSettingHistoryGroupBy struct {
	selector
	build *TrustCenterSettingHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tcshgb *TrustCenterSettingHistoryGroupBy) Aggregate(fns ...AggregateFunc) *TrustCenterSettingHistoryGroupBy {
	tcshgb.fns = append(tcshgb.fns, fns...)
	return tcshgb
}

// Scan applies the selector query and scans the result into the given value.
func (tcshgb *TrustCenterSettingHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcshgb.build.ctx, ent.OpQueryGroupBy)
	if err := tcshgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrustCenterSettingHistoryQuery, *TrustCenterSettingHistoryGroupBy](ctx, tcshgb.build, tcshgb, tcshgb.build.inters, v)
}

func (tcshgb *TrustCenterSettingHistoryGroupBy) sqlScan(ctx context.Context, root *TrustCenterSettingHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tcshgb.fns))
	for _, fn := range tcshgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tcshgb.flds)+len(tcshgb.fns))
		for _, f := range *tcshgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tcshgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcshgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TrustCenterSettingHistorySelect is the builder for selecting fields of TrustCenterSettingHistory entities.
type TrustCenterSettingHistorySelect struct {
	*TrustCenterSettingHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tcshs *TrustCenterSettingHistorySelect) Aggregate(fns ...AggregateFunc) *TrustCenterSettingHistorySelect {
	tcshs.fns = append(tcshs.fns, fns...)
	return tcshs
}

// Scan applies the selector query and scans the result into the given value.
func (tcshs *TrustCenterSettingHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcshs.ctx, ent.OpQuerySelect)
	if err := tcshs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrustCenterSettingHistoryQuery, *TrustCenterSettingHistorySelect](ctx, tcshs.TrustCenterSettingHistoryQuery, tcshs, tcshs.inters, v)
}

func (tcshs *TrustCenterSettingHistorySelect) sqlScan(ctx context.Context, root *TrustCenterSettingHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tcshs.fns))
	for _, fn := range tcshs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tcshs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcshs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tcshs *TrustCenterSettingHistorySelect) Modify(modifiers ...func(s *sql.Selector)) *TrustCenterSettingHistorySelect {
	tcshs.modifiers = append(tcshs.modifiers, modifiers...)
	return tcshs
}
