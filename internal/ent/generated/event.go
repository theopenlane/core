// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/event"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// CorrelationID holds the value of the "correlation_id" field.
	CorrelationID string `json:"correlation_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges         EventEdges `json:"edges"`
	export_events *string
	selectValues  sql.SelectValues
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Integrations holds the value of the integrations edge.
	Integrations []*Integration `json:"integrations,omitempty"`
	// Organizations holds the value of the organizations edge.
	Organizations []*Organization `json:"organizations,omitempty"`
	// Invites holds the value of the invites edge.
	Invites []*Invite `json:"invites,omitempty"`
	// PersonalAccessTokens holds the value of the personal_access_tokens edge.
	PersonalAccessTokens []*PersonalAccessToken `json:"personal_access_tokens,omitempty"`
	// Secrets holds the value of the secrets edge.
	Secrets []*Hush `json:"secrets,omitempty"`
	// OrgMemberships holds the value of the org_memberships edge.
	OrgMemberships []*OrgMembership `json:"org_memberships,omitempty"`
	// GroupMemberships holds the value of the group_memberships edge.
	GroupMemberships []*GroupMembership `json:"group_memberships,omitempty"`
	// Subscribers holds the value of the subscribers edge.
	Subscribers []*Subscriber `json:"subscribers,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// OrgSubscriptions holds the value of the org_subscriptions edge.
	OrgSubscriptions []*OrgSubscription `json:"org_subscriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
	// totalCount holds the count of the edges above.
	totalCount [12]map[string]int

	namedUsers                map[string][]*User
	namedGroups               map[string][]*Group
	namedIntegrations         map[string][]*Integration
	namedOrganizations        map[string][]*Organization
	namedInvites              map[string][]*Invite
	namedPersonalAccessTokens map[string][]*PersonalAccessToken
	namedSecrets              map[string][]*Hush
	namedOrgMemberships       map[string][]*OrgMembership
	namedGroupMemberships     map[string][]*GroupMembership
	namedSubscribers          map[string][]*Subscriber
	namedFiles                map[string][]*File
	namedOrgSubscriptions     map[string][]*OrgSubscription
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) IntegrationsOrErr() ([]*Integration, error) {
	if e.loadedTypes[2] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// OrganizationsOrErr returns the Organizations value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) OrganizationsOrErr() ([]*Organization, error) {
	if e.loadedTypes[3] {
		return e.Organizations, nil
	}
	return nil, &NotLoadedError{edge: "organizations"}
}

// InvitesOrErr returns the Invites value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) InvitesOrErr() ([]*Invite, error) {
	if e.loadedTypes[4] {
		return e.Invites, nil
	}
	return nil, &NotLoadedError{edge: "invites"}
}

// PersonalAccessTokensOrErr returns the PersonalAccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) PersonalAccessTokensOrErr() ([]*PersonalAccessToken, error) {
	if e.loadedTypes[5] {
		return e.PersonalAccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "personal_access_tokens"}
}

// SecretsOrErr returns the Secrets value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) SecretsOrErr() ([]*Hush, error) {
	if e.loadedTypes[6] {
		return e.Secrets, nil
	}
	return nil, &NotLoadedError{edge: "secrets"}
}

// OrgMembershipsOrErr returns the OrgMemberships value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) OrgMembershipsOrErr() ([]*OrgMembership, error) {
	if e.loadedTypes[7] {
		return e.OrgMemberships, nil
	}
	return nil, &NotLoadedError{edge: "org_memberships"}
}

// GroupMembershipsOrErr returns the GroupMemberships value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) GroupMembershipsOrErr() ([]*GroupMembership, error) {
	if e.loadedTypes[8] {
		return e.GroupMemberships, nil
	}
	return nil, &NotLoadedError{edge: "group_memberships"}
}

// SubscribersOrErr returns the Subscribers value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) SubscribersOrErr() ([]*Subscriber, error) {
	if e.loadedTypes[9] {
		return e.Subscribers, nil
	}
	return nil, &NotLoadedError{edge: "subscribers"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[10] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// OrgSubscriptionsOrErr returns the OrgSubscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) OrgSubscriptionsOrErr() ([]*OrgSubscription, error) {
	if e.loadedTypes[11] {
		return e.OrgSubscriptions, nil
	}
	return nil, &NotLoadedError{edge: "org_subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldTags, event.FieldMetadata:
			values[i] = new([]byte)
		case event.FieldID, event.FieldCreatedBy, event.FieldUpdatedBy, event.FieldEventID, event.FieldCorrelationID, event.FieldEventType:
			values[i] = new(sql.NullString)
		case event.FieldCreatedAt, event.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case event.ForeignKeys[0]: // export_events
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (_m *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case event.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case event.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case event.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case event.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case event.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				_m.EventID = value.String
			}
		case event.FieldCorrelationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field correlation_id", values[i])
			} else if value.Valid {
				_m.CorrelationID = value.String
			}
		case event.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				_m.EventType = value.String
			}
		case event.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case event.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field export_events", values[i])
			} else if value.Valid {
				_m.export_events = new(string)
				*_m.export_events = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (_m *Event) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Event entity.
func (_m *Event) QueryUsers() *UserQuery {
	return NewEventClient(_m.config).QueryUsers(_m)
}

// QueryGroups queries the "groups" edge of the Event entity.
func (_m *Event) QueryGroups() *GroupQuery {
	return NewEventClient(_m.config).QueryGroups(_m)
}

// QueryIntegrations queries the "integrations" edge of the Event entity.
func (_m *Event) QueryIntegrations() *IntegrationQuery {
	return NewEventClient(_m.config).QueryIntegrations(_m)
}

// QueryOrganizations queries the "organizations" edge of the Event entity.
func (_m *Event) QueryOrganizations() *OrganizationQuery {
	return NewEventClient(_m.config).QueryOrganizations(_m)
}

// QueryInvites queries the "invites" edge of the Event entity.
func (_m *Event) QueryInvites() *InviteQuery {
	return NewEventClient(_m.config).QueryInvites(_m)
}

// QueryPersonalAccessTokens queries the "personal_access_tokens" edge of the Event entity.
func (_m *Event) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	return NewEventClient(_m.config).QueryPersonalAccessTokens(_m)
}

// QuerySecrets queries the "secrets" edge of the Event entity.
func (_m *Event) QuerySecrets() *HushQuery {
	return NewEventClient(_m.config).QuerySecrets(_m)
}

// QueryOrgMemberships queries the "org_memberships" edge of the Event entity.
func (_m *Event) QueryOrgMemberships() *OrgMembershipQuery {
	return NewEventClient(_m.config).QueryOrgMemberships(_m)
}

// QueryGroupMemberships queries the "group_memberships" edge of the Event entity.
func (_m *Event) QueryGroupMemberships() *GroupMembershipQuery {
	return NewEventClient(_m.config).QueryGroupMemberships(_m)
}

// QuerySubscribers queries the "subscribers" edge of the Event entity.
func (_m *Event) QuerySubscribers() *SubscriberQuery {
	return NewEventClient(_m.config).QuerySubscribers(_m)
}

// QueryFiles queries the "files" edge of the Event entity.
func (_m *Event) QueryFiles() *FileQuery {
	return NewEventClient(_m.config).QueryFiles(_m)
}

// QueryOrgSubscriptions queries the "org_subscriptions" edge of the Event entity.
func (_m *Event) QueryOrgSubscriptions() *OrgSubscriptionQuery {
	return NewEventClient(_m.config).QueryOrgSubscriptions(_m)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Event) Update() *EventUpdateOne {
	return NewEventClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Event) Unwrap() *Event {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Event is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(_m.EventID)
	builder.WriteString(", ")
	builder.WriteString("correlation_id=")
	builder.WriteString(_m.CorrelationID)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(_m.EventType)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedUsers(name string) ([]*User, error) {
	if _m.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedUsers(name string, edges ...*User) {
	if _m.Edges.namedUsers == nil {
		_m.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		_m.Edges.namedUsers[name] = []*User{}
	} else {
		_m.Edges.namedUsers[name] = append(_m.Edges.namedUsers[name], edges...)
	}
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedGroups(name string) ([]*Group, error) {
	if _m.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedGroups(name string, edges ...*Group) {
	if _m.Edges.namedGroups == nil {
		_m.Edges.namedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedGroups[name] = []*Group{}
	} else {
		_m.Edges.namedGroups[name] = append(_m.Edges.namedGroups[name], edges...)
	}
}

// NamedIntegrations returns the Integrations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedIntegrations(name string) ([]*Integration, error) {
	if _m.Edges.namedIntegrations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedIntegrations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedIntegrations(name string, edges ...*Integration) {
	if _m.Edges.namedIntegrations == nil {
		_m.Edges.namedIntegrations = make(map[string][]*Integration)
	}
	if len(edges) == 0 {
		_m.Edges.namedIntegrations[name] = []*Integration{}
	} else {
		_m.Edges.namedIntegrations[name] = append(_m.Edges.namedIntegrations[name], edges...)
	}
}

// NamedOrganizations returns the Organizations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedOrganizations(name string) ([]*Organization, error) {
	if _m.Edges.namedOrganizations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOrganizations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedOrganizations(name string, edges ...*Organization) {
	if _m.Edges.namedOrganizations == nil {
		_m.Edges.namedOrganizations = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		_m.Edges.namedOrganizations[name] = []*Organization{}
	} else {
		_m.Edges.namedOrganizations[name] = append(_m.Edges.namedOrganizations[name], edges...)
	}
}

// NamedInvites returns the Invites named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedInvites(name string) ([]*Invite, error) {
	if _m.Edges.namedInvites == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedInvites[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedInvites(name string, edges ...*Invite) {
	if _m.Edges.namedInvites == nil {
		_m.Edges.namedInvites = make(map[string][]*Invite)
	}
	if len(edges) == 0 {
		_m.Edges.namedInvites[name] = []*Invite{}
	} else {
		_m.Edges.namedInvites[name] = append(_m.Edges.namedInvites[name], edges...)
	}
}

// NamedPersonalAccessTokens returns the PersonalAccessTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedPersonalAccessTokens(name string) ([]*PersonalAccessToken, error) {
	if _m.Edges.namedPersonalAccessTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPersonalAccessTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedPersonalAccessTokens(name string, edges ...*PersonalAccessToken) {
	if _m.Edges.namedPersonalAccessTokens == nil {
		_m.Edges.namedPersonalAccessTokens = make(map[string][]*PersonalAccessToken)
	}
	if len(edges) == 0 {
		_m.Edges.namedPersonalAccessTokens[name] = []*PersonalAccessToken{}
	} else {
		_m.Edges.namedPersonalAccessTokens[name] = append(_m.Edges.namedPersonalAccessTokens[name], edges...)
	}
}

// NamedSecrets returns the Secrets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedSecrets(name string) ([]*Hush, error) {
	if _m.Edges.namedSecrets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSecrets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedSecrets(name string, edges ...*Hush) {
	if _m.Edges.namedSecrets == nil {
		_m.Edges.namedSecrets = make(map[string][]*Hush)
	}
	if len(edges) == 0 {
		_m.Edges.namedSecrets[name] = []*Hush{}
	} else {
		_m.Edges.namedSecrets[name] = append(_m.Edges.namedSecrets[name], edges...)
	}
}

// NamedOrgMemberships returns the OrgMemberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedOrgMemberships(name string) ([]*OrgMembership, error) {
	if _m.Edges.namedOrgMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOrgMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedOrgMemberships(name string, edges ...*OrgMembership) {
	if _m.Edges.namedOrgMemberships == nil {
		_m.Edges.namedOrgMemberships = make(map[string][]*OrgMembership)
	}
	if len(edges) == 0 {
		_m.Edges.namedOrgMemberships[name] = []*OrgMembership{}
	} else {
		_m.Edges.namedOrgMemberships[name] = append(_m.Edges.namedOrgMemberships[name], edges...)
	}
}

// NamedGroupMemberships returns the GroupMemberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedGroupMemberships(name string) ([]*GroupMembership, error) {
	if _m.Edges.namedGroupMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedGroupMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedGroupMemberships(name string, edges ...*GroupMembership) {
	if _m.Edges.namedGroupMemberships == nil {
		_m.Edges.namedGroupMemberships = make(map[string][]*GroupMembership)
	}
	if len(edges) == 0 {
		_m.Edges.namedGroupMemberships[name] = []*GroupMembership{}
	} else {
		_m.Edges.namedGroupMemberships[name] = append(_m.Edges.namedGroupMemberships[name], edges...)
	}
}

// NamedSubscribers returns the Subscribers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedSubscribers(name string) ([]*Subscriber, error) {
	if _m.Edges.namedSubscribers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSubscribers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedSubscribers(name string, edges ...*Subscriber) {
	if _m.Edges.namedSubscribers == nil {
		_m.Edges.namedSubscribers = make(map[string][]*Subscriber)
	}
	if len(edges) == 0 {
		_m.Edges.namedSubscribers[name] = []*Subscriber{}
	} else {
		_m.Edges.namedSubscribers[name] = append(_m.Edges.namedSubscribers[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedFiles(name string) ([]*File, error) {
	if _m.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedFiles(name string, edges ...*File) {
	if _m.Edges.namedFiles == nil {
		_m.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		_m.Edges.namedFiles[name] = []*File{}
	} else {
		_m.Edges.namedFiles[name] = append(_m.Edges.namedFiles[name], edges...)
	}
}

// NamedOrgSubscriptions returns the OrgSubscriptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Event) NamedOrgSubscriptions(name string) ([]*OrgSubscription, error) {
	if _m.Edges.namedOrgSubscriptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOrgSubscriptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Event) appendNamedOrgSubscriptions(name string, edges ...*OrgSubscription) {
	if _m.Edges.namedOrgSubscriptions == nil {
		_m.Edges.namedOrgSubscriptions = make(map[string][]*OrgSubscription)
	}
	if len(edges) == 0 {
		_m.Edges.namedOrgSubscriptions[name] = []*OrgSubscription{}
	} else {
		_m.Edges.namedOrgSubscriptions[name] = append(_m.Edges.namedOrgSubscriptions[name], edges...)
	}
}

// Events is a parsable slice of Event.
type Events []*Event
