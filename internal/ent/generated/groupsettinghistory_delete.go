// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// GroupSettingHistoryDelete is the builder for deleting a GroupSettingHistory entity.
type GroupSettingHistoryDelete struct {
	config
	hooks    []Hook
	mutation *GroupSettingHistoryMutation
}

// Where appends a list predicates to the GroupSettingHistoryDelete builder.
func (gshd *GroupSettingHistoryDelete) Where(ps ...predicate.GroupSettingHistory) *GroupSettingHistoryDelete {
	gshd.mutation.Where(ps...)
	return gshd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gshd *GroupSettingHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gshd.sqlExec, gshd.mutation, gshd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gshd *GroupSettingHistoryDelete) ExecX(ctx context.Context) int {
	n, err := gshd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gshd *GroupSettingHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(groupsettinghistory.Table, sqlgraph.NewFieldSpec(groupsettinghistory.FieldID, field.TypeString))
	_spec.Node.Schema = gshd.schemaConfig.GroupSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, gshd.schemaConfig)
	if ps := gshd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gshd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gshd.mutation.done = true
	return affected, err
}

// GroupSettingHistoryDeleteOne is the builder for deleting a single GroupSettingHistory entity.
type GroupSettingHistoryDeleteOne struct {
	gshd *GroupSettingHistoryDelete
}

// Where appends a list predicates to the GroupSettingHistoryDelete builder.
func (gshdo *GroupSettingHistoryDeleteOne) Where(ps ...predicate.GroupSettingHistory) *GroupSettingHistoryDeleteOne {
	gshdo.gshd.mutation.Where(ps...)
	return gshdo
}

// Exec executes the deletion query.
func (gshdo *GroupSettingHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := gshdo.gshd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{groupsettinghistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gshdo *GroupSettingHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := gshdo.Exec(ctx); err != nil {
		panic(err)
	}
}
