// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/assessmenthistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// AssessmentHistory is the model entity for the AssessmentHistory schema.
type AssessmentHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the assessment, e.g. cloud providers, marketing team
	Name string `json:"name,omitempty"`
	// AssessmentType holds the value of the "assessment_type" field.
	AssessmentType enums.AssessmentType `json:"assessment_type,omitempty"`
	// the template id associated with the assessment
	TemplateID string `json:"template_id,omitempty"`
	// the id of the group that owns the assessment
	AssessmentOwnerID string `json:"assessment_owner_id,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssessmentHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assessmenthistory.FieldTags:
			values[i] = new([]byte)
		case assessmenthistory.FieldOperation:
			values[i] = new(history.OpType)
		case assessmenthistory.FieldID, assessmenthistory.FieldRef, assessmenthistory.FieldCreatedBy, assessmenthistory.FieldUpdatedBy, assessmenthistory.FieldDeletedBy, assessmenthistory.FieldOwnerID, assessmenthistory.FieldName, assessmenthistory.FieldAssessmentType, assessmenthistory.FieldTemplateID, assessmenthistory.FieldAssessmentOwnerID:
			values[i] = new(sql.NullString)
		case assessmenthistory.FieldHistoryTime, assessmenthistory.FieldCreatedAt, assessmenthistory.FieldUpdatedAt, assessmenthistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssessmentHistory fields.
func (ah *AssessmentHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assessmenthistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ah.ID = value.String
			}
		case assessmenthistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				ah.HistoryTime = value.Time
			}
		case assessmenthistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				ah.Ref = value.String
			}
		case assessmenthistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				ah.Operation = *value
			}
		case assessmenthistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ah.CreatedAt = value.Time
			}
		case assessmenthistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ah.UpdatedAt = value.Time
			}
		case assessmenthistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ah.CreatedBy = value.String
			}
		case assessmenthistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ah.UpdatedBy = value.String
			}
		case assessmenthistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ah.DeletedAt = value.Time
			}
		case assessmenthistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ah.DeletedBy = value.String
			}
		case assessmenthistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ah.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case assessmenthistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				ah.OwnerID = value.String
			}
		case assessmenthistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ah.Name = value.String
			}
		case assessmenthistory.FieldAssessmentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_type", values[i])
			} else if value.Valid {
				ah.AssessmentType = enums.AssessmentType(value.String)
			}
		case assessmenthistory.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				ah.TemplateID = value.String
			}
		case assessmenthistory.FieldAssessmentOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_owner_id", values[i])
			} else if value.Valid {
				ah.AssessmentOwnerID = value.String
			}
		default:
			ah.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssessmentHistory.
// This includes values selected through modifiers, order, etc.
func (ah *AssessmentHistory) Value(name string) (ent.Value, error) {
	return ah.selectValues.Get(name)
}

// Update returns a builder for updating this AssessmentHistory.
// Note that you need to call AssessmentHistory.Unwrap() before calling this method if this AssessmentHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ah *AssessmentHistory) Update() *AssessmentHistoryUpdateOne {
	return NewAssessmentHistoryClient(ah.config).UpdateOne(ah)
}

// Unwrap unwraps the AssessmentHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ah *AssessmentHistory) Unwrap() *AssessmentHistory {
	_tx, ok := ah.config.driver.(*txDriver)
	if !ok {
		panic("generated: AssessmentHistory is not a transactional entity")
	}
	ah.config.driver = _tx.drv
	return ah
}

// String implements the fmt.Stringer.
func (ah *AssessmentHistory) String() string {
	var builder strings.Builder
	builder.WriteString("AssessmentHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ah.ID))
	builder.WriteString("history_time=")
	builder.WriteString(ah.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(ah.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", ah.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ah.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ah.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ah.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ah.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ah.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ah.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ah.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(ah.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ah.Name)
	builder.WriteString(", ")
	builder.WriteString("assessment_type=")
	builder.WriteString(fmt.Sprintf("%v", ah.AssessmentType))
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(ah.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("assessment_owner_id=")
	builder.WriteString(ah.AssessmentOwnerID)
	builder.WriteByte(')')
	return builder.String()
}

// AssessmentHistories is a parsable slice of AssessmentHistory.
type AssessmentHistories []*AssessmentHistory
