// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks     []Hook
	mutation  *GroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GroupUpdate builder.
func (_u *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GroupUpdate) SetUpdatedAt(v time.Time) *GroupUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *GroupUpdate) ClearUpdatedAt() *GroupUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *GroupUpdate) SetUpdatedBy(v string) *GroupUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableUpdatedBy(v *string) *GroupUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *GroupUpdate) ClearUpdatedBy() *GroupUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *GroupUpdate) SetDeletedAt(v time.Time) *GroupUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableDeletedAt(v *time.Time) *GroupUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *GroupUpdate) ClearDeletedAt() *GroupUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *GroupUpdate) SetDeletedBy(v string) *GroupUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableDeletedBy(v *string) *GroupUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *GroupUpdate) ClearDeletedBy() *GroupUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *GroupUpdate) SetTags(v []string) *GroupUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *GroupUpdate) AppendTags(v []string) *GroupUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *GroupUpdate) ClearTags() *GroupUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *GroupUpdate) SetOwnerID(v string) *GroupUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableOwnerID(v *string) *GroupUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *GroupUpdate) ClearOwnerID() *GroupUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *GroupUpdate) SetName(v string) *GroupUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableName(v *string) *GroupUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *GroupUpdate) SetDescription(v string) *GroupUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableDescription(v *string) *GroupUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *GroupUpdate) ClearDescription() *GroupUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetGravatarLogoURL sets the "gravatar_logo_url" field.
func (_u *GroupUpdate) SetGravatarLogoURL(v string) *GroupUpdate {
	_u.mutation.SetGravatarLogoURL(v)
	return _u
}

// SetNillableGravatarLogoURL sets the "gravatar_logo_url" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableGravatarLogoURL(v *string) *GroupUpdate {
	if v != nil {
		_u.SetGravatarLogoURL(*v)
	}
	return _u
}

// ClearGravatarLogoURL clears the value of the "gravatar_logo_url" field.
func (_u *GroupUpdate) ClearGravatarLogoURL() *GroupUpdate {
	_u.mutation.ClearGravatarLogoURL()
	return _u
}

// SetLogoURL sets the "logo_url" field.
func (_u *GroupUpdate) SetLogoURL(v string) *GroupUpdate {
	_u.mutation.SetLogoURL(v)
	return _u
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableLogoURL(v *string) *GroupUpdate {
	if v != nil {
		_u.SetLogoURL(*v)
	}
	return _u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (_u *GroupUpdate) ClearLogoURL() *GroupUpdate {
	_u.mutation.ClearLogoURL()
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *GroupUpdate) SetDisplayName(v string) *GroupUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableDisplayName(v *string) *GroupUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *GroupUpdate) SetOwner(v *Organization) *GroupUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddProgramEditorIDs adds the "program_editors" edge to the Program entity by IDs.
func (_u *GroupUpdate) AddProgramEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddProgramEditorIDs(ids...)
	return _u
}

// AddProgramEditors adds the "program_editors" edges to the Program entity.
func (_u *GroupUpdate) AddProgramEditors(v ...*Program) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramEditorIDs(ids...)
}

// AddProgramBlockedGroupIDs adds the "program_blocked_groups" edge to the Program entity by IDs.
func (_u *GroupUpdate) AddProgramBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddProgramBlockedGroupIDs(ids...)
	return _u
}

// AddProgramBlockedGroups adds the "program_blocked_groups" edges to the Program entity.
func (_u *GroupUpdate) AddProgramBlockedGroups(v ...*Program) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramBlockedGroupIDs(ids...)
}

// AddProgramViewerIDs adds the "program_viewers" edge to the Program entity by IDs.
func (_u *GroupUpdate) AddProgramViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddProgramViewerIDs(ids...)
	return _u
}

// AddProgramViewers adds the "program_viewers" edges to the Program entity.
func (_u *GroupUpdate) AddProgramViewers(v ...*Program) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramViewerIDs(ids...)
}

// AddRiskEditorIDs adds the "risk_editors" edge to the Risk entity by IDs.
func (_u *GroupUpdate) AddRiskEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddRiskEditorIDs(ids...)
	return _u
}

// AddRiskEditors adds the "risk_editors" edges to the Risk entity.
func (_u *GroupUpdate) AddRiskEditors(v ...*Risk) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskEditorIDs(ids...)
}

// AddRiskBlockedGroupIDs adds the "risk_blocked_groups" edge to the Risk entity by IDs.
func (_u *GroupUpdate) AddRiskBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddRiskBlockedGroupIDs(ids...)
	return _u
}

// AddRiskBlockedGroups adds the "risk_blocked_groups" edges to the Risk entity.
func (_u *GroupUpdate) AddRiskBlockedGroups(v ...*Risk) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskBlockedGroupIDs(ids...)
}

// AddRiskViewerIDs adds the "risk_viewers" edge to the Risk entity by IDs.
func (_u *GroupUpdate) AddRiskViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddRiskViewerIDs(ids...)
	return _u
}

// AddRiskViewers adds the "risk_viewers" edges to the Risk entity.
func (_u *GroupUpdate) AddRiskViewers(v ...*Risk) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskViewerIDs(ids...)
}

// AddControlObjectiveEditorIDs adds the "control_objective_editors" edge to the ControlObjective entity by IDs.
func (_u *GroupUpdate) AddControlObjectiveEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddControlObjectiveEditorIDs(ids...)
	return _u
}

// AddControlObjectiveEditors adds the "control_objective_editors" edges to the ControlObjective entity.
func (_u *GroupUpdate) AddControlObjectiveEditors(v ...*ControlObjective) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveEditorIDs(ids...)
}

// AddControlObjectiveBlockedGroupIDs adds the "control_objective_blocked_groups" edge to the ControlObjective entity by IDs.
func (_u *GroupUpdate) AddControlObjectiveBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddControlObjectiveBlockedGroupIDs(ids...)
	return _u
}

// AddControlObjectiveBlockedGroups adds the "control_objective_blocked_groups" edges to the ControlObjective entity.
func (_u *GroupUpdate) AddControlObjectiveBlockedGroups(v ...*ControlObjective) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveBlockedGroupIDs(ids...)
}

// AddControlObjectiveViewerIDs adds the "control_objective_viewers" edge to the ControlObjective entity by IDs.
func (_u *GroupUpdate) AddControlObjectiveViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddControlObjectiveViewerIDs(ids...)
	return _u
}

// AddControlObjectiveViewers adds the "control_objective_viewers" edges to the ControlObjective entity.
func (_u *GroupUpdate) AddControlObjectiveViewers(v ...*ControlObjective) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveViewerIDs(ids...)
}

// AddNarrativeEditorIDs adds the "narrative_editors" edge to the Narrative entity by IDs.
func (_u *GroupUpdate) AddNarrativeEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddNarrativeEditorIDs(ids...)
	return _u
}

// AddNarrativeEditors adds the "narrative_editors" edges to the Narrative entity.
func (_u *GroupUpdate) AddNarrativeEditors(v ...*Narrative) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeEditorIDs(ids...)
}

// AddNarrativeBlockedGroupIDs adds the "narrative_blocked_groups" edge to the Narrative entity by IDs.
func (_u *GroupUpdate) AddNarrativeBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddNarrativeBlockedGroupIDs(ids...)
	return _u
}

// AddNarrativeBlockedGroups adds the "narrative_blocked_groups" edges to the Narrative entity.
func (_u *GroupUpdate) AddNarrativeBlockedGroups(v ...*Narrative) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeBlockedGroupIDs(ids...)
}

// AddNarrativeViewerIDs adds the "narrative_viewers" edge to the Narrative entity by IDs.
func (_u *GroupUpdate) AddNarrativeViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddNarrativeViewerIDs(ids...)
	return _u
}

// AddNarrativeViewers adds the "narrative_viewers" edges to the Narrative entity.
func (_u *GroupUpdate) AddNarrativeViewers(v ...*Narrative) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeViewerIDs(ids...)
}

// AddControlImplementationEditorIDs adds the "control_implementation_editors" edge to the ControlImplementation entity by IDs.
func (_u *GroupUpdate) AddControlImplementationEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddControlImplementationEditorIDs(ids...)
	return _u
}

// AddControlImplementationEditors adds the "control_implementation_editors" edges to the ControlImplementation entity.
func (_u *GroupUpdate) AddControlImplementationEditors(v ...*ControlImplementation) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationEditorIDs(ids...)
}

// AddControlImplementationBlockedGroupIDs adds the "control_implementation_blocked_groups" edge to the ControlImplementation entity by IDs.
func (_u *GroupUpdate) AddControlImplementationBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddControlImplementationBlockedGroupIDs(ids...)
	return _u
}

// AddControlImplementationBlockedGroups adds the "control_implementation_blocked_groups" edges to the ControlImplementation entity.
func (_u *GroupUpdate) AddControlImplementationBlockedGroups(v ...*ControlImplementation) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationBlockedGroupIDs(ids...)
}

// AddControlImplementationViewerIDs adds the "control_implementation_viewers" edge to the ControlImplementation entity by IDs.
func (_u *GroupUpdate) AddControlImplementationViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddControlImplementationViewerIDs(ids...)
	return _u
}

// AddControlImplementationViewers adds the "control_implementation_viewers" edges to the ControlImplementation entity.
func (_u *GroupUpdate) AddControlImplementationViewers(v ...*ControlImplementation) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationViewerIDs(ids...)
}

// AddScanEditorIDs adds the "scan_editors" edge to the Scan entity by IDs.
func (_u *GroupUpdate) AddScanEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddScanEditorIDs(ids...)
	return _u
}

// AddScanEditors adds the "scan_editors" edges to the Scan entity.
func (_u *GroupUpdate) AddScanEditors(v ...*Scan) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanEditorIDs(ids...)
}

// AddScanBlockedGroupIDs adds the "scan_blocked_groups" edge to the Scan entity by IDs.
func (_u *GroupUpdate) AddScanBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddScanBlockedGroupIDs(ids...)
	return _u
}

// AddScanBlockedGroups adds the "scan_blocked_groups" edges to the Scan entity.
func (_u *GroupUpdate) AddScanBlockedGroups(v ...*Scan) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanBlockedGroupIDs(ids...)
}

// AddScanViewerIDs adds the "scan_viewers" edge to the Scan entity by IDs.
func (_u *GroupUpdate) AddScanViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddScanViewerIDs(ids...)
	return _u
}

// AddScanViewers adds the "scan_viewers" edges to the Scan entity.
func (_u *GroupUpdate) AddScanViewers(v ...*Scan) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanViewerIDs(ids...)
}

// AddEntityEditorIDs adds the "entity_editors" edge to the Entity entity by IDs.
func (_u *GroupUpdate) AddEntityEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddEntityEditorIDs(ids...)
	return _u
}

// AddEntityEditors adds the "entity_editors" edges to the Entity entity.
func (_u *GroupUpdate) AddEntityEditors(v ...*Entity) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityEditorIDs(ids...)
}

// AddEntityBlockedGroupIDs adds the "entity_blocked_groups" edge to the Entity entity by IDs.
func (_u *GroupUpdate) AddEntityBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddEntityBlockedGroupIDs(ids...)
	return _u
}

// AddEntityBlockedGroups adds the "entity_blocked_groups" edges to the Entity entity.
func (_u *GroupUpdate) AddEntityBlockedGroups(v ...*Entity) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityBlockedGroupIDs(ids...)
}

// AddEntityViewerIDs adds the "entity_viewers" edge to the Entity entity by IDs.
func (_u *GroupUpdate) AddEntityViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddEntityViewerIDs(ids...)
	return _u
}

// AddEntityViewers adds the "entity_viewers" edges to the Entity entity.
func (_u *GroupUpdate) AddEntityViewers(v ...*Entity) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityViewerIDs(ids...)
}

// AddProcedureEditorIDs adds the "procedure_editors" edge to the Procedure entity by IDs.
func (_u *GroupUpdate) AddProcedureEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddProcedureEditorIDs(ids...)
	return _u
}

// AddProcedureEditors adds the "procedure_editors" edges to the Procedure entity.
func (_u *GroupUpdate) AddProcedureEditors(v ...*Procedure) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureEditorIDs(ids...)
}

// AddProcedureBlockedGroupIDs adds the "procedure_blocked_groups" edge to the Procedure entity by IDs.
func (_u *GroupUpdate) AddProcedureBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddProcedureBlockedGroupIDs(ids...)
	return _u
}

// AddProcedureBlockedGroups adds the "procedure_blocked_groups" edges to the Procedure entity.
func (_u *GroupUpdate) AddProcedureBlockedGroups(v ...*Procedure) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureBlockedGroupIDs(ids...)
}

// AddInternalPolicyEditorIDs adds the "internal_policy_editors" edge to the InternalPolicy entity by IDs.
func (_u *GroupUpdate) AddInternalPolicyEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddInternalPolicyEditorIDs(ids...)
	return _u
}

// AddInternalPolicyEditors adds the "internal_policy_editors" edges to the InternalPolicy entity.
func (_u *GroupUpdate) AddInternalPolicyEditors(v ...*InternalPolicy) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyEditorIDs(ids...)
}

// AddInternalPolicyBlockedGroupIDs adds the "internal_policy_blocked_groups" edge to the InternalPolicy entity by IDs.
func (_u *GroupUpdate) AddInternalPolicyBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddInternalPolicyBlockedGroupIDs(ids...)
	return _u
}

// AddInternalPolicyBlockedGroups adds the "internal_policy_blocked_groups" edges to the InternalPolicy entity.
func (_u *GroupUpdate) AddInternalPolicyBlockedGroups(v ...*InternalPolicy) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyBlockedGroupIDs(ids...)
}

// AddControlEditorIDs adds the "control_editors" edge to the Control entity by IDs.
func (_u *GroupUpdate) AddControlEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddControlEditorIDs(ids...)
	return _u
}

// AddControlEditors adds the "control_editors" edges to the Control entity.
func (_u *GroupUpdate) AddControlEditors(v ...*Control) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlEditorIDs(ids...)
}

// AddControlBlockedGroupIDs adds the "control_blocked_groups" edge to the Control entity by IDs.
func (_u *GroupUpdate) AddControlBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddControlBlockedGroupIDs(ids...)
	return _u
}

// AddControlBlockedGroups adds the "control_blocked_groups" edges to the Control entity.
func (_u *GroupUpdate) AddControlBlockedGroups(v ...*Control) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlBlockedGroupIDs(ids...)
}

// AddMappedControlEditorIDs adds the "mapped_control_editors" edge to the MappedControl entity by IDs.
func (_u *GroupUpdate) AddMappedControlEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddMappedControlEditorIDs(ids...)
	return _u
}

// AddMappedControlEditors adds the "mapped_control_editors" edges to the MappedControl entity.
func (_u *GroupUpdate) AddMappedControlEditors(v ...*MappedControl) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedControlEditorIDs(ids...)
}

// AddMappedControlBlockedGroupIDs adds the "mapped_control_blocked_groups" edge to the MappedControl entity by IDs.
func (_u *GroupUpdate) AddMappedControlBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddMappedControlBlockedGroupIDs(ids...)
	return _u
}

// AddMappedControlBlockedGroups adds the "mapped_control_blocked_groups" edges to the MappedControl entity.
func (_u *GroupUpdate) AddMappedControlBlockedGroups(v ...*MappedControl) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedControlBlockedGroupIDs(ids...)
}

// SetSettingID sets the "setting" edge to the GroupSetting entity by ID.
func (_u *GroupUpdate) SetSettingID(id string) *GroupUpdate {
	_u.mutation.SetSettingID(id)
	return _u
}

// SetNillableSettingID sets the "setting" edge to the GroupSetting entity by ID if the given value is not nil.
func (_u *GroupUpdate) SetNillableSettingID(id *string) *GroupUpdate {
	if id != nil {
		_u = _u.SetSettingID(*id)
	}
	return _u
}

// SetSetting sets the "setting" edge to the GroupSetting entity.
func (_u *GroupUpdate) SetSetting(v *GroupSetting) *GroupUpdate {
	return _u.SetSettingID(v.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *GroupUpdate) AddUserIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *GroupUpdate) AddUsers(v ...*User) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *GroupUpdate) AddEventIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *GroupUpdate) AddEvents(v ...*Event) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_u *GroupUpdate) AddIntegrationIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddIntegrationIDs(ids...)
	return _u
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_u *GroupUpdate) AddIntegrations(v ...*Integration) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIntegrationIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *GroupUpdate) AddFileIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *GroupUpdate) AddFiles(v ...*File) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *GroupUpdate) AddTaskIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *GroupUpdate) AddTasks(v ...*Task) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (_u *GroupUpdate) AddInviteIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddInviteIDs(ids...)
	return _u
}

// AddInvites adds the "invites" edges to the Invite entity.
func (_u *GroupUpdate) AddInvites(v ...*Invite) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInviteIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the GroupMembership entity by IDs.
func (_u *GroupUpdate) AddMemberIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddMemberIDs(ids...)
	return _u
}

// AddMembers adds the "members" edges to the GroupMembership entity.
func (_u *GroupUpdate) AddMembers(v ...*GroupMembership) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (_u *GroupUpdate) Mutation() *GroupMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *GroupUpdate) ClearOwner() *GroupUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearProgramEditors clears all "program_editors" edges to the Program entity.
func (_u *GroupUpdate) ClearProgramEditors() *GroupUpdate {
	_u.mutation.ClearProgramEditors()
	return _u
}

// RemoveProgramEditorIDs removes the "program_editors" edge to Program entities by IDs.
func (_u *GroupUpdate) RemoveProgramEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveProgramEditorIDs(ids...)
	return _u
}

// RemoveProgramEditors removes "program_editors" edges to Program entities.
func (_u *GroupUpdate) RemoveProgramEditors(v ...*Program) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramEditorIDs(ids...)
}

// ClearProgramBlockedGroups clears all "program_blocked_groups" edges to the Program entity.
func (_u *GroupUpdate) ClearProgramBlockedGroups() *GroupUpdate {
	_u.mutation.ClearProgramBlockedGroups()
	return _u
}

// RemoveProgramBlockedGroupIDs removes the "program_blocked_groups" edge to Program entities by IDs.
func (_u *GroupUpdate) RemoveProgramBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveProgramBlockedGroupIDs(ids...)
	return _u
}

// RemoveProgramBlockedGroups removes "program_blocked_groups" edges to Program entities.
func (_u *GroupUpdate) RemoveProgramBlockedGroups(v ...*Program) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramBlockedGroupIDs(ids...)
}

// ClearProgramViewers clears all "program_viewers" edges to the Program entity.
func (_u *GroupUpdate) ClearProgramViewers() *GroupUpdate {
	_u.mutation.ClearProgramViewers()
	return _u
}

// RemoveProgramViewerIDs removes the "program_viewers" edge to Program entities by IDs.
func (_u *GroupUpdate) RemoveProgramViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveProgramViewerIDs(ids...)
	return _u
}

// RemoveProgramViewers removes "program_viewers" edges to Program entities.
func (_u *GroupUpdate) RemoveProgramViewers(v ...*Program) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramViewerIDs(ids...)
}

// ClearRiskEditors clears all "risk_editors" edges to the Risk entity.
func (_u *GroupUpdate) ClearRiskEditors() *GroupUpdate {
	_u.mutation.ClearRiskEditors()
	return _u
}

// RemoveRiskEditorIDs removes the "risk_editors" edge to Risk entities by IDs.
func (_u *GroupUpdate) RemoveRiskEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveRiskEditorIDs(ids...)
	return _u
}

// RemoveRiskEditors removes "risk_editors" edges to Risk entities.
func (_u *GroupUpdate) RemoveRiskEditors(v ...*Risk) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskEditorIDs(ids...)
}

// ClearRiskBlockedGroups clears all "risk_blocked_groups" edges to the Risk entity.
func (_u *GroupUpdate) ClearRiskBlockedGroups() *GroupUpdate {
	_u.mutation.ClearRiskBlockedGroups()
	return _u
}

// RemoveRiskBlockedGroupIDs removes the "risk_blocked_groups" edge to Risk entities by IDs.
func (_u *GroupUpdate) RemoveRiskBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveRiskBlockedGroupIDs(ids...)
	return _u
}

// RemoveRiskBlockedGroups removes "risk_blocked_groups" edges to Risk entities.
func (_u *GroupUpdate) RemoveRiskBlockedGroups(v ...*Risk) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskBlockedGroupIDs(ids...)
}

// ClearRiskViewers clears all "risk_viewers" edges to the Risk entity.
func (_u *GroupUpdate) ClearRiskViewers() *GroupUpdate {
	_u.mutation.ClearRiskViewers()
	return _u
}

// RemoveRiskViewerIDs removes the "risk_viewers" edge to Risk entities by IDs.
func (_u *GroupUpdate) RemoveRiskViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveRiskViewerIDs(ids...)
	return _u
}

// RemoveRiskViewers removes "risk_viewers" edges to Risk entities.
func (_u *GroupUpdate) RemoveRiskViewers(v ...*Risk) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskViewerIDs(ids...)
}

// ClearControlObjectiveEditors clears all "control_objective_editors" edges to the ControlObjective entity.
func (_u *GroupUpdate) ClearControlObjectiveEditors() *GroupUpdate {
	_u.mutation.ClearControlObjectiveEditors()
	return _u
}

// RemoveControlObjectiveEditorIDs removes the "control_objective_editors" edge to ControlObjective entities by IDs.
func (_u *GroupUpdate) RemoveControlObjectiveEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveControlObjectiveEditorIDs(ids...)
	return _u
}

// RemoveControlObjectiveEditors removes "control_objective_editors" edges to ControlObjective entities.
func (_u *GroupUpdate) RemoveControlObjectiveEditors(v ...*ControlObjective) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveEditorIDs(ids...)
}

// ClearControlObjectiveBlockedGroups clears all "control_objective_blocked_groups" edges to the ControlObjective entity.
func (_u *GroupUpdate) ClearControlObjectiveBlockedGroups() *GroupUpdate {
	_u.mutation.ClearControlObjectiveBlockedGroups()
	return _u
}

// RemoveControlObjectiveBlockedGroupIDs removes the "control_objective_blocked_groups" edge to ControlObjective entities by IDs.
func (_u *GroupUpdate) RemoveControlObjectiveBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveControlObjectiveBlockedGroupIDs(ids...)
	return _u
}

// RemoveControlObjectiveBlockedGroups removes "control_objective_blocked_groups" edges to ControlObjective entities.
func (_u *GroupUpdate) RemoveControlObjectiveBlockedGroups(v ...*ControlObjective) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveBlockedGroupIDs(ids...)
}

// ClearControlObjectiveViewers clears all "control_objective_viewers" edges to the ControlObjective entity.
func (_u *GroupUpdate) ClearControlObjectiveViewers() *GroupUpdate {
	_u.mutation.ClearControlObjectiveViewers()
	return _u
}

// RemoveControlObjectiveViewerIDs removes the "control_objective_viewers" edge to ControlObjective entities by IDs.
func (_u *GroupUpdate) RemoveControlObjectiveViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveControlObjectiveViewerIDs(ids...)
	return _u
}

// RemoveControlObjectiveViewers removes "control_objective_viewers" edges to ControlObjective entities.
func (_u *GroupUpdate) RemoveControlObjectiveViewers(v ...*ControlObjective) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveViewerIDs(ids...)
}

// ClearNarrativeEditors clears all "narrative_editors" edges to the Narrative entity.
func (_u *GroupUpdate) ClearNarrativeEditors() *GroupUpdate {
	_u.mutation.ClearNarrativeEditors()
	return _u
}

// RemoveNarrativeEditorIDs removes the "narrative_editors" edge to Narrative entities by IDs.
func (_u *GroupUpdate) RemoveNarrativeEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveNarrativeEditorIDs(ids...)
	return _u
}

// RemoveNarrativeEditors removes "narrative_editors" edges to Narrative entities.
func (_u *GroupUpdate) RemoveNarrativeEditors(v ...*Narrative) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeEditorIDs(ids...)
}

// ClearNarrativeBlockedGroups clears all "narrative_blocked_groups" edges to the Narrative entity.
func (_u *GroupUpdate) ClearNarrativeBlockedGroups() *GroupUpdate {
	_u.mutation.ClearNarrativeBlockedGroups()
	return _u
}

// RemoveNarrativeBlockedGroupIDs removes the "narrative_blocked_groups" edge to Narrative entities by IDs.
func (_u *GroupUpdate) RemoveNarrativeBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveNarrativeBlockedGroupIDs(ids...)
	return _u
}

// RemoveNarrativeBlockedGroups removes "narrative_blocked_groups" edges to Narrative entities.
func (_u *GroupUpdate) RemoveNarrativeBlockedGroups(v ...*Narrative) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeBlockedGroupIDs(ids...)
}

// ClearNarrativeViewers clears all "narrative_viewers" edges to the Narrative entity.
func (_u *GroupUpdate) ClearNarrativeViewers() *GroupUpdate {
	_u.mutation.ClearNarrativeViewers()
	return _u
}

// RemoveNarrativeViewerIDs removes the "narrative_viewers" edge to Narrative entities by IDs.
func (_u *GroupUpdate) RemoveNarrativeViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveNarrativeViewerIDs(ids...)
	return _u
}

// RemoveNarrativeViewers removes "narrative_viewers" edges to Narrative entities.
func (_u *GroupUpdate) RemoveNarrativeViewers(v ...*Narrative) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeViewerIDs(ids...)
}

// ClearControlImplementationEditors clears all "control_implementation_editors" edges to the ControlImplementation entity.
func (_u *GroupUpdate) ClearControlImplementationEditors() *GroupUpdate {
	_u.mutation.ClearControlImplementationEditors()
	return _u
}

// RemoveControlImplementationEditorIDs removes the "control_implementation_editors" edge to ControlImplementation entities by IDs.
func (_u *GroupUpdate) RemoveControlImplementationEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveControlImplementationEditorIDs(ids...)
	return _u
}

// RemoveControlImplementationEditors removes "control_implementation_editors" edges to ControlImplementation entities.
func (_u *GroupUpdate) RemoveControlImplementationEditors(v ...*ControlImplementation) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationEditorIDs(ids...)
}

// ClearControlImplementationBlockedGroups clears all "control_implementation_blocked_groups" edges to the ControlImplementation entity.
func (_u *GroupUpdate) ClearControlImplementationBlockedGroups() *GroupUpdate {
	_u.mutation.ClearControlImplementationBlockedGroups()
	return _u
}

// RemoveControlImplementationBlockedGroupIDs removes the "control_implementation_blocked_groups" edge to ControlImplementation entities by IDs.
func (_u *GroupUpdate) RemoveControlImplementationBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveControlImplementationBlockedGroupIDs(ids...)
	return _u
}

// RemoveControlImplementationBlockedGroups removes "control_implementation_blocked_groups" edges to ControlImplementation entities.
func (_u *GroupUpdate) RemoveControlImplementationBlockedGroups(v ...*ControlImplementation) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationBlockedGroupIDs(ids...)
}

// ClearControlImplementationViewers clears all "control_implementation_viewers" edges to the ControlImplementation entity.
func (_u *GroupUpdate) ClearControlImplementationViewers() *GroupUpdate {
	_u.mutation.ClearControlImplementationViewers()
	return _u
}

// RemoveControlImplementationViewerIDs removes the "control_implementation_viewers" edge to ControlImplementation entities by IDs.
func (_u *GroupUpdate) RemoveControlImplementationViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveControlImplementationViewerIDs(ids...)
	return _u
}

// RemoveControlImplementationViewers removes "control_implementation_viewers" edges to ControlImplementation entities.
func (_u *GroupUpdate) RemoveControlImplementationViewers(v ...*ControlImplementation) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationViewerIDs(ids...)
}

// ClearScanEditors clears all "scan_editors" edges to the Scan entity.
func (_u *GroupUpdate) ClearScanEditors() *GroupUpdate {
	_u.mutation.ClearScanEditors()
	return _u
}

// RemoveScanEditorIDs removes the "scan_editors" edge to Scan entities by IDs.
func (_u *GroupUpdate) RemoveScanEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveScanEditorIDs(ids...)
	return _u
}

// RemoveScanEditors removes "scan_editors" edges to Scan entities.
func (_u *GroupUpdate) RemoveScanEditors(v ...*Scan) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanEditorIDs(ids...)
}

// ClearScanBlockedGroups clears all "scan_blocked_groups" edges to the Scan entity.
func (_u *GroupUpdate) ClearScanBlockedGroups() *GroupUpdate {
	_u.mutation.ClearScanBlockedGroups()
	return _u
}

// RemoveScanBlockedGroupIDs removes the "scan_blocked_groups" edge to Scan entities by IDs.
func (_u *GroupUpdate) RemoveScanBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveScanBlockedGroupIDs(ids...)
	return _u
}

// RemoveScanBlockedGroups removes "scan_blocked_groups" edges to Scan entities.
func (_u *GroupUpdate) RemoveScanBlockedGroups(v ...*Scan) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanBlockedGroupIDs(ids...)
}

// ClearScanViewers clears all "scan_viewers" edges to the Scan entity.
func (_u *GroupUpdate) ClearScanViewers() *GroupUpdate {
	_u.mutation.ClearScanViewers()
	return _u
}

// RemoveScanViewerIDs removes the "scan_viewers" edge to Scan entities by IDs.
func (_u *GroupUpdate) RemoveScanViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveScanViewerIDs(ids...)
	return _u
}

// RemoveScanViewers removes "scan_viewers" edges to Scan entities.
func (_u *GroupUpdate) RemoveScanViewers(v ...*Scan) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanViewerIDs(ids...)
}

// ClearEntityEditors clears all "entity_editors" edges to the Entity entity.
func (_u *GroupUpdate) ClearEntityEditors() *GroupUpdate {
	_u.mutation.ClearEntityEditors()
	return _u
}

// RemoveEntityEditorIDs removes the "entity_editors" edge to Entity entities by IDs.
func (_u *GroupUpdate) RemoveEntityEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveEntityEditorIDs(ids...)
	return _u
}

// RemoveEntityEditors removes "entity_editors" edges to Entity entities.
func (_u *GroupUpdate) RemoveEntityEditors(v ...*Entity) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityEditorIDs(ids...)
}

// ClearEntityBlockedGroups clears all "entity_blocked_groups" edges to the Entity entity.
func (_u *GroupUpdate) ClearEntityBlockedGroups() *GroupUpdate {
	_u.mutation.ClearEntityBlockedGroups()
	return _u
}

// RemoveEntityBlockedGroupIDs removes the "entity_blocked_groups" edge to Entity entities by IDs.
func (_u *GroupUpdate) RemoveEntityBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveEntityBlockedGroupIDs(ids...)
	return _u
}

// RemoveEntityBlockedGroups removes "entity_blocked_groups" edges to Entity entities.
func (_u *GroupUpdate) RemoveEntityBlockedGroups(v ...*Entity) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityBlockedGroupIDs(ids...)
}

// ClearEntityViewers clears all "entity_viewers" edges to the Entity entity.
func (_u *GroupUpdate) ClearEntityViewers() *GroupUpdate {
	_u.mutation.ClearEntityViewers()
	return _u
}

// RemoveEntityViewerIDs removes the "entity_viewers" edge to Entity entities by IDs.
func (_u *GroupUpdate) RemoveEntityViewerIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveEntityViewerIDs(ids...)
	return _u
}

// RemoveEntityViewers removes "entity_viewers" edges to Entity entities.
func (_u *GroupUpdate) RemoveEntityViewers(v ...*Entity) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityViewerIDs(ids...)
}

// ClearProcedureEditors clears all "procedure_editors" edges to the Procedure entity.
func (_u *GroupUpdate) ClearProcedureEditors() *GroupUpdate {
	_u.mutation.ClearProcedureEditors()
	return _u
}

// RemoveProcedureEditorIDs removes the "procedure_editors" edge to Procedure entities by IDs.
func (_u *GroupUpdate) RemoveProcedureEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveProcedureEditorIDs(ids...)
	return _u
}

// RemoveProcedureEditors removes "procedure_editors" edges to Procedure entities.
func (_u *GroupUpdate) RemoveProcedureEditors(v ...*Procedure) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureEditorIDs(ids...)
}

// ClearProcedureBlockedGroups clears all "procedure_blocked_groups" edges to the Procedure entity.
func (_u *GroupUpdate) ClearProcedureBlockedGroups() *GroupUpdate {
	_u.mutation.ClearProcedureBlockedGroups()
	return _u
}

// RemoveProcedureBlockedGroupIDs removes the "procedure_blocked_groups" edge to Procedure entities by IDs.
func (_u *GroupUpdate) RemoveProcedureBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveProcedureBlockedGroupIDs(ids...)
	return _u
}

// RemoveProcedureBlockedGroups removes "procedure_blocked_groups" edges to Procedure entities.
func (_u *GroupUpdate) RemoveProcedureBlockedGroups(v ...*Procedure) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureBlockedGroupIDs(ids...)
}

// ClearInternalPolicyEditors clears all "internal_policy_editors" edges to the InternalPolicy entity.
func (_u *GroupUpdate) ClearInternalPolicyEditors() *GroupUpdate {
	_u.mutation.ClearInternalPolicyEditors()
	return _u
}

// RemoveInternalPolicyEditorIDs removes the "internal_policy_editors" edge to InternalPolicy entities by IDs.
func (_u *GroupUpdate) RemoveInternalPolicyEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveInternalPolicyEditorIDs(ids...)
	return _u
}

// RemoveInternalPolicyEditors removes "internal_policy_editors" edges to InternalPolicy entities.
func (_u *GroupUpdate) RemoveInternalPolicyEditors(v ...*InternalPolicy) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyEditorIDs(ids...)
}

// ClearInternalPolicyBlockedGroups clears all "internal_policy_blocked_groups" edges to the InternalPolicy entity.
func (_u *GroupUpdate) ClearInternalPolicyBlockedGroups() *GroupUpdate {
	_u.mutation.ClearInternalPolicyBlockedGroups()
	return _u
}

// RemoveInternalPolicyBlockedGroupIDs removes the "internal_policy_blocked_groups" edge to InternalPolicy entities by IDs.
func (_u *GroupUpdate) RemoveInternalPolicyBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveInternalPolicyBlockedGroupIDs(ids...)
	return _u
}

// RemoveInternalPolicyBlockedGroups removes "internal_policy_blocked_groups" edges to InternalPolicy entities.
func (_u *GroupUpdate) RemoveInternalPolicyBlockedGroups(v ...*InternalPolicy) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyBlockedGroupIDs(ids...)
}

// ClearControlEditors clears all "control_editors" edges to the Control entity.
func (_u *GroupUpdate) ClearControlEditors() *GroupUpdate {
	_u.mutation.ClearControlEditors()
	return _u
}

// RemoveControlEditorIDs removes the "control_editors" edge to Control entities by IDs.
func (_u *GroupUpdate) RemoveControlEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveControlEditorIDs(ids...)
	return _u
}

// RemoveControlEditors removes "control_editors" edges to Control entities.
func (_u *GroupUpdate) RemoveControlEditors(v ...*Control) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlEditorIDs(ids...)
}

// ClearControlBlockedGroups clears all "control_blocked_groups" edges to the Control entity.
func (_u *GroupUpdate) ClearControlBlockedGroups() *GroupUpdate {
	_u.mutation.ClearControlBlockedGroups()
	return _u
}

// RemoveControlBlockedGroupIDs removes the "control_blocked_groups" edge to Control entities by IDs.
func (_u *GroupUpdate) RemoveControlBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveControlBlockedGroupIDs(ids...)
	return _u
}

// RemoveControlBlockedGroups removes "control_blocked_groups" edges to Control entities.
func (_u *GroupUpdate) RemoveControlBlockedGroups(v ...*Control) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlBlockedGroupIDs(ids...)
}

// ClearMappedControlEditors clears all "mapped_control_editors" edges to the MappedControl entity.
func (_u *GroupUpdate) ClearMappedControlEditors() *GroupUpdate {
	_u.mutation.ClearMappedControlEditors()
	return _u
}

// RemoveMappedControlEditorIDs removes the "mapped_control_editors" edge to MappedControl entities by IDs.
func (_u *GroupUpdate) RemoveMappedControlEditorIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveMappedControlEditorIDs(ids...)
	return _u
}

// RemoveMappedControlEditors removes "mapped_control_editors" edges to MappedControl entities.
func (_u *GroupUpdate) RemoveMappedControlEditors(v ...*MappedControl) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedControlEditorIDs(ids...)
}

// ClearMappedControlBlockedGroups clears all "mapped_control_blocked_groups" edges to the MappedControl entity.
func (_u *GroupUpdate) ClearMappedControlBlockedGroups() *GroupUpdate {
	_u.mutation.ClearMappedControlBlockedGroups()
	return _u
}

// RemoveMappedControlBlockedGroupIDs removes the "mapped_control_blocked_groups" edge to MappedControl entities by IDs.
func (_u *GroupUpdate) RemoveMappedControlBlockedGroupIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveMappedControlBlockedGroupIDs(ids...)
	return _u
}

// RemoveMappedControlBlockedGroups removes "mapped_control_blocked_groups" edges to MappedControl entities.
func (_u *GroupUpdate) RemoveMappedControlBlockedGroups(v ...*MappedControl) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedControlBlockedGroupIDs(ids...)
}

// ClearSetting clears the "setting" edge to the GroupSetting entity.
func (_u *GroupUpdate) ClearSetting() *GroupUpdate {
	_u.mutation.ClearSetting()
	return _u
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *GroupUpdate) ClearUsers() *GroupUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *GroupUpdate) RemoveUserIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *GroupUpdate) RemoveUsers(v ...*User) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *GroupUpdate) ClearEvents() *GroupUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *GroupUpdate) RemoveEventIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *GroupUpdate) RemoveEvents(v ...*Event) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (_u *GroupUpdate) ClearIntegrations() *GroupUpdate {
	_u.mutation.ClearIntegrations()
	return _u
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (_u *GroupUpdate) RemoveIntegrationIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveIntegrationIDs(ids...)
	return _u
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (_u *GroupUpdate) RemoveIntegrations(v ...*Integration) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIntegrationIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *GroupUpdate) ClearFiles() *GroupUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *GroupUpdate) RemoveFileIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *GroupUpdate) RemoveFiles(v ...*File) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *GroupUpdate) ClearTasks() *GroupUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *GroupUpdate) RemoveTaskIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *GroupUpdate) RemoveTasks(v ...*Task) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (_u *GroupUpdate) ClearInvites() *GroupUpdate {
	_u.mutation.ClearInvites()
	return _u
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (_u *GroupUpdate) RemoveInviteIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveInviteIDs(ids...)
	return _u
}

// RemoveInvites removes "invites" edges to Invite entities.
func (_u *GroupUpdate) RemoveInvites(v ...*Invite) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInviteIDs(ids...)
}

// ClearMembers clears all "members" edges to the GroupMembership entity.
func (_u *GroupUpdate) ClearMembers() *GroupUpdate {
	_u.mutation.ClearMembers()
	return _u
}

// RemoveMemberIDs removes the "members" edge to GroupMembership entities by IDs.
func (_u *GroupUpdate) RemoveMemberIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveMemberIDs(ids...)
	return _u
}

// RemoveMembers removes "members" edges to GroupMembership entities.
func (_u *GroupUpdate) RemoveMembers(v ...*GroupMembership) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GroupUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GroupUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GroupUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GroupUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if group.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized group.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := group.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *GroupUpdate) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := group.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Group.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GravatarLogoURL(); ok {
		if err := group.GravatarLogoURLValidator(v); err != nil {
			return &ValidationError{Name: "gravatar_logo_url", err: fmt.Errorf(`generated: validator failed for field "Group.gravatar_logo_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LogoURL(); ok {
		if err := group.LogoURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_url", err: fmt.Errorf(`generated: validator failed for field "Group.logo_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DisplayName(); ok {
		if err := group.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Group.display_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *GroupUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GroupUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *GroupUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(group.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(group.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(group.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(group.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(group.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(group.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(group.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(group.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if _u.mutation.IsManagedCleared() {
		_spec.ClearField(group.FieldIsManaged, field.TypeBool)
	}
	if value, ok := _u.mutation.GravatarLogoURL(); ok {
		_spec.SetField(group.FieldGravatarLogoURL, field.TypeString, value)
	}
	if _u.mutation.GravatarLogoURLCleared() {
		_spec.ClearField(group.FieldGravatarLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.LogoURL(); ok {
		_spec.SetField(group.FieldLogoURL, field.TypeString, value)
	}
	if _u.mutation.LogoURLCleared() {
		_spec.ClearField(group.FieldLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(group.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramEditorsIDs(); len(nodes) > 0 && !_u.mutation.ProgramEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ProgramBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramViewersIDs(); len(nodes) > 0 && !_u.mutation.ProgramViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRiskEditorsIDs(); len(nodes) > 0 && !_u.mutation.RiskEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRiskBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.RiskBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRiskViewersIDs(); len(nodes) > 0 && !_u.mutation.RiskViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectiveEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveEditorsTable,
			Columns: group.ControlObjectiveEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectiveEditorsIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectiveEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveEditorsTable,
			Columns: group.ControlObjectiveEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectiveEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveEditorsTable,
			Columns: group.ControlObjectiveEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectiveBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveBlockedGroupsTable,
			Columns: group.ControlObjectiveBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectiveBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectiveBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveBlockedGroupsTable,
			Columns: group.ControlObjectiveBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectiveBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveBlockedGroupsTable,
			Columns: group.ControlObjectiveBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectiveViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveViewersTable,
			Columns: group.ControlObjectiveViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectiveViewersIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectiveViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveViewersTable,
			Columns: group.ControlObjectiveViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectiveViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveViewersTable,
			Columns: group.ControlObjectiveViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativeEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeEditorsTable,
			Columns: group.NarrativeEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativeEditorsIDs(); len(nodes) > 0 && !_u.mutation.NarrativeEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeEditorsTable,
			Columns: group.NarrativeEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativeEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeEditorsTable,
			Columns: group.NarrativeEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativeBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeBlockedGroupsTable,
			Columns: group.NarrativeBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativeBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.NarrativeBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeBlockedGroupsTable,
			Columns: group.NarrativeBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativeBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeBlockedGroupsTable,
			Columns: group.NarrativeBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativeViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeViewersTable,
			Columns: group.NarrativeViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativeViewersIDs(); len(nodes) > 0 && !_u.mutation.NarrativeViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeViewersTable,
			Columns: group.NarrativeViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativeViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeViewersTable,
			Columns: group.NarrativeViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationEditorsTable,
			Columns: group.ControlImplementationEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationEditorsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationEditorsTable,
			Columns: group.ControlImplementationEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationEditorsTable,
			Columns: group.ControlImplementationEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationBlockedGroupsTable,
			Columns: group.ControlImplementationBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationBlockedGroupsTable,
			Columns: group.ControlImplementationBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationBlockedGroupsTable,
			Columns: group.ControlImplementationBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationViewersTable,
			Columns: group.ControlImplementationViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationViewersIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationViewersTable,
			Columns: group.ControlImplementationViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationViewersTable,
			Columns: group.ControlImplementationViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScanEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanEditorsTable,
			Columns: group.ScanEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScanEditorsIDs(); len(nodes) > 0 && !_u.mutation.ScanEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanEditorsTable,
			Columns: group.ScanEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScanEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanEditorsTable,
			Columns: group.ScanEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScanBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanBlockedGroupsTable,
			Columns: group.ScanBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScanBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ScanBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanBlockedGroupsTable,
			Columns: group.ScanBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScanBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanBlockedGroupsTable,
			Columns: group.ScanBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScanViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanViewersTable,
			Columns: group.ScanViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScanViewersIDs(); len(nodes) > 0 && !_u.mutation.ScanViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanViewersTable,
			Columns: group.ScanViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScanViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanViewersTable,
			Columns: group.ScanViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityEditorsTable,
			Columns: group.EntityEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityEditorsIDs(); len(nodes) > 0 && !_u.mutation.EntityEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityEditorsTable,
			Columns: group.EntityEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityEditorsTable,
			Columns: group.EntityEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityBlockedGroupsTable,
			Columns: group.EntityBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.EntityBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityBlockedGroupsTable,
			Columns: group.EntityBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityBlockedGroupsTable,
			Columns: group.EntityBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityViewersTable,
			Columns: group.EntityViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityViewersIDs(); len(nodes) > 0 && !_u.mutation.EntityViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityViewersTable,
			Columns: group.EntityViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityViewersTable,
			Columns: group.EntityViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProcedureEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProcedureEditorsIDs(); len(nodes) > 0 && !_u.mutation.ProcedureEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProcedureEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProcedureBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProcedureBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ProcedureBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProcedureBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPolicyEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyEditorsTable,
			Columns: group.InternalPolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPolicyEditorsIDs(); len(nodes) > 0 && !_u.mutation.InternalPolicyEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyEditorsTable,
			Columns: group.InternalPolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPolicyEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyEditorsTable,
			Columns: group.InternalPolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPolicyBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyBlockedGroupsTable,
			Columns: group.InternalPolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPolicyBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.InternalPolicyBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyBlockedGroupsTable,
			Columns: group.InternalPolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPolicyBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyBlockedGroupsTable,
			Columns: group.InternalPolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlEditorsTable,
			Columns: group.ControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlEditorsIDs(); len(nodes) > 0 && !_u.mutation.ControlEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlEditorsTable,
			Columns: group.ControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlEditorsTable,
			Columns: group.ControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlBlockedGroupsTable,
			Columns: group.ControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ControlBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlBlockedGroupsTable,
			Columns: group.ControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlBlockedGroupsTable,
			Columns: group.ControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedControlEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlEditorsTable,
			Columns: group.MappedControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedControlEditorsIDs(); len(nodes) > 0 && !_u.mutation.MappedControlEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlEditorsTable,
			Columns: group.MappedControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedControlEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlEditorsTable,
			Columns: group.MappedControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedControlBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlBlockedGroupsTable,
			Columns: group.MappedControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedControlBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.MappedControlBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlBlockedGroupsTable,
			Columns: group.MappedControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedControlBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlBlockedGroupsTable,
			Columns: group.MappedControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		createE := &GroupMembershipCreate{config: _u.config, mutation: newGroupMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: _u.config, mutation: newGroupMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: _u.config, mutation: newGroupMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !_u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InvitesTable,
			Columns: group.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !_u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InvitesTable,
			Columns: group.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InvitesTable,
			Columns: group.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMembersIDs(); len(nodes) > 0 && !_u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Group
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GroupUpdateOne) SetUpdatedAt(v time.Time) *GroupUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *GroupUpdateOne) ClearUpdatedAt() *GroupUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *GroupUpdateOne) SetUpdatedBy(v string) *GroupUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableUpdatedBy(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *GroupUpdateOne) ClearUpdatedBy() *GroupUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *GroupUpdateOne) SetDeletedAt(v time.Time) *GroupUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableDeletedAt(v *time.Time) *GroupUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *GroupUpdateOne) ClearDeletedAt() *GroupUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *GroupUpdateOne) SetDeletedBy(v string) *GroupUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableDeletedBy(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *GroupUpdateOne) ClearDeletedBy() *GroupUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *GroupUpdateOne) SetTags(v []string) *GroupUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *GroupUpdateOne) AppendTags(v []string) *GroupUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *GroupUpdateOne) ClearTags() *GroupUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *GroupUpdateOne) SetOwnerID(v string) *GroupUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableOwnerID(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *GroupUpdateOne) ClearOwnerID() *GroupUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *GroupUpdateOne) SetName(v string) *GroupUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableName(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *GroupUpdateOne) SetDescription(v string) *GroupUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableDescription(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *GroupUpdateOne) ClearDescription() *GroupUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetGravatarLogoURL sets the "gravatar_logo_url" field.
func (_u *GroupUpdateOne) SetGravatarLogoURL(v string) *GroupUpdateOne {
	_u.mutation.SetGravatarLogoURL(v)
	return _u
}

// SetNillableGravatarLogoURL sets the "gravatar_logo_url" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableGravatarLogoURL(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetGravatarLogoURL(*v)
	}
	return _u
}

// ClearGravatarLogoURL clears the value of the "gravatar_logo_url" field.
func (_u *GroupUpdateOne) ClearGravatarLogoURL() *GroupUpdateOne {
	_u.mutation.ClearGravatarLogoURL()
	return _u
}

// SetLogoURL sets the "logo_url" field.
func (_u *GroupUpdateOne) SetLogoURL(v string) *GroupUpdateOne {
	_u.mutation.SetLogoURL(v)
	return _u
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableLogoURL(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetLogoURL(*v)
	}
	return _u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (_u *GroupUpdateOne) ClearLogoURL() *GroupUpdateOne {
	_u.mutation.ClearLogoURL()
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *GroupUpdateOne) SetDisplayName(v string) *GroupUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableDisplayName(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *GroupUpdateOne) SetOwner(v *Organization) *GroupUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddProgramEditorIDs adds the "program_editors" edge to the Program entity by IDs.
func (_u *GroupUpdateOne) AddProgramEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddProgramEditorIDs(ids...)
	return _u
}

// AddProgramEditors adds the "program_editors" edges to the Program entity.
func (_u *GroupUpdateOne) AddProgramEditors(v ...*Program) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramEditorIDs(ids...)
}

// AddProgramBlockedGroupIDs adds the "program_blocked_groups" edge to the Program entity by IDs.
func (_u *GroupUpdateOne) AddProgramBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddProgramBlockedGroupIDs(ids...)
	return _u
}

// AddProgramBlockedGroups adds the "program_blocked_groups" edges to the Program entity.
func (_u *GroupUpdateOne) AddProgramBlockedGroups(v ...*Program) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramBlockedGroupIDs(ids...)
}

// AddProgramViewerIDs adds the "program_viewers" edge to the Program entity by IDs.
func (_u *GroupUpdateOne) AddProgramViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddProgramViewerIDs(ids...)
	return _u
}

// AddProgramViewers adds the "program_viewers" edges to the Program entity.
func (_u *GroupUpdateOne) AddProgramViewers(v ...*Program) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramViewerIDs(ids...)
}

// AddRiskEditorIDs adds the "risk_editors" edge to the Risk entity by IDs.
func (_u *GroupUpdateOne) AddRiskEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddRiskEditorIDs(ids...)
	return _u
}

// AddRiskEditors adds the "risk_editors" edges to the Risk entity.
func (_u *GroupUpdateOne) AddRiskEditors(v ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskEditorIDs(ids...)
}

// AddRiskBlockedGroupIDs adds the "risk_blocked_groups" edge to the Risk entity by IDs.
func (_u *GroupUpdateOne) AddRiskBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddRiskBlockedGroupIDs(ids...)
	return _u
}

// AddRiskBlockedGroups adds the "risk_blocked_groups" edges to the Risk entity.
func (_u *GroupUpdateOne) AddRiskBlockedGroups(v ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskBlockedGroupIDs(ids...)
}

// AddRiskViewerIDs adds the "risk_viewers" edge to the Risk entity by IDs.
func (_u *GroupUpdateOne) AddRiskViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddRiskViewerIDs(ids...)
	return _u
}

// AddRiskViewers adds the "risk_viewers" edges to the Risk entity.
func (_u *GroupUpdateOne) AddRiskViewers(v ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskViewerIDs(ids...)
}

// AddControlObjectiveEditorIDs adds the "control_objective_editors" edge to the ControlObjective entity by IDs.
func (_u *GroupUpdateOne) AddControlObjectiveEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddControlObjectiveEditorIDs(ids...)
	return _u
}

// AddControlObjectiveEditors adds the "control_objective_editors" edges to the ControlObjective entity.
func (_u *GroupUpdateOne) AddControlObjectiveEditors(v ...*ControlObjective) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveEditorIDs(ids...)
}

// AddControlObjectiveBlockedGroupIDs adds the "control_objective_blocked_groups" edge to the ControlObjective entity by IDs.
func (_u *GroupUpdateOne) AddControlObjectiveBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddControlObjectiveBlockedGroupIDs(ids...)
	return _u
}

// AddControlObjectiveBlockedGroups adds the "control_objective_blocked_groups" edges to the ControlObjective entity.
func (_u *GroupUpdateOne) AddControlObjectiveBlockedGroups(v ...*ControlObjective) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveBlockedGroupIDs(ids...)
}

// AddControlObjectiveViewerIDs adds the "control_objective_viewers" edge to the ControlObjective entity by IDs.
func (_u *GroupUpdateOne) AddControlObjectiveViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddControlObjectiveViewerIDs(ids...)
	return _u
}

// AddControlObjectiveViewers adds the "control_objective_viewers" edges to the ControlObjective entity.
func (_u *GroupUpdateOne) AddControlObjectiveViewers(v ...*ControlObjective) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveViewerIDs(ids...)
}

// AddNarrativeEditorIDs adds the "narrative_editors" edge to the Narrative entity by IDs.
func (_u *GroupUpdateOne) AddNarrativeEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddNarrativeEditorIDs(ids...)
	return _u
}

// AddNarrativeEditors adds the "narrative_editors" edges to the Narrative entity.
func (_u *GroupUpdateOne) AddNarrativeEditors(v ...*Narrative) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeEditorIDs(ids...)
}

// AddNarrativeBlockedGroupIDs adds the "narrative_blocked_groups" edge to the Narrative entity by IDs.
func (_u *GroupUpdateOne) AddNarrativeBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddNarrativeBlockedGroupIDs(ids...)
	return _u
}

// AddNarrativeBlockedGroups adds the "narrative_blocked_groups" edges to the Narrative entity.
func (_u *GroupUpdateOne) AddNarrativeBlockedGroups(v ...*Narrative) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeBlockedGroupIDs(ids...)
}

// AddNarrativeViewerIDs adds the "narrative_viewers" edge to the Narrative entity by IDs.
func (_u *GroupUpdateOne) AddNarrativeViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddNarrativeViewerIDs(ids...)
	return _u
}

// AddNarrativeViewers adds the "narrative_viewers" edges to the Narrative entity.
func (_u *GroupUpdateOne) AddNarrativeViewers(v ...*Narrative) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeViewerIDs(ids...)
}

// AddControlImplementationEditorIDs adds the "control_implementation_editors" edge to the ControlImplementation entity by IDs.
func (_u *GroupUpdateOne) AddControlImplementationEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddControlImplementationEditorIDs(ids...)
	return _u
}

// AddControlImplementationEditors adds the "control_implementation_editors" edges to the ControlImplementation entity.
func (_u *GroupUpdateOne) AddControlImplementationEditors(v ...*ControlImplementation) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationEditorIDs(ids...)
}

// AddControlImplementationBlockedGroupIDs adds the "control_implementation_blocked_groups" edge to the ControlImplementation entity by IDs.
func (_u *GroupUpdateOne) AddControlImplementationBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddControlImplementationBlockedGroupIDs(ids...)
	return _u
}

// AddControlImplementationBlockedGroups adds the "control_implementation_blocked_groups" edges to the ControlImplementation entity.
func (_u *GroupUpdateOne) AddControlImplementationBlockedGroups(v ...*ControlImplementation) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationBlockedGroupIDs(ids...)
}

// AddControlImplementationViewerIDs adds the "control_implementation_viewers" edge to the ControlImplementation entity by IDs.
func (_u *GroupUpdateOne) AddControlImplementationViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddControlImplementationViewerIDs(ids...)
	return _u
}

// AddControlImplementationViewers adds the "control_implementation_viewers" edges to the ControlImplementation entity.
func (_u *GroupUpdateOne) AddControlImplementationViewers(v ...*ControlImplementation) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationViewerIDs(ids...)
}

// AddScanEditorIDs adds the "scan_editors" edge to the Scan entity by IDs.
func (_u *GroupUpdateOne) AddScanEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddScanEditorIDs(ids...)
	return _u
}

// AddScanEditors adds the "scan_editors" edges to the Scan entity.
func (_u *GroupUpdateOne) AddScanEditors(v ...*Scan) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanEditorIDs(ids...)
}

// AddScanBlockedGroupIDs adds the "scan_blocked_groups" edge to the Scan entity by IDs.
func (_u *GroupUpdateOne) AddScanBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddScanBlockedGroupIDs(ids...)
	return _u
}

// AddScanBlockedGroups adds the "scan_blocked_groups" edges to the Scan entity.
func (_u *GroupUpdateOne) AddScanBlockedGroups(v ...*Scan) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanBlockedGroupIDs(ids...)
}

// AddScanViewerIDs adds the "scan_viewers" edge to the Scan entity by IDs.
func (_u *GroupUpdateOne) AddScanViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddScanViewerIDs(ids...)
	return _u
}

// AddScanViewers adds the "scan_viewers" edges to the Scan entity.
func (_u *GroupUpdateOne) AddScanViewers(v ...*Scan) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanViewerIDs(ids...)
}

// AddEntityEditorIDs adds the "entity_editors" edge to the Entity entity by IDs.
func (_u *GroupUpdateOne) AddEntityEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddEntityEditorIDs(ids...)
	return _u
}

// AddEntityEditors adds the "entity_editors" edges to the Entity entity.
func (_u *GroupUpdateOne) AddEntityEditors(v ...*Entity) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityEditorIDs(ids...)
}

// AddEntityBlockedGroupIDs adds the "entity_blocked_groups" edge to the Entity entity by IDs.
func (_u *GroupUpdateOne) AddEntityBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddEntityBlockedGroupIDs(ids...)
	return _u
}

// AddEntityBlockedGroups adds the "entity_blocked_groups" edges to the Entity entity.
func (_u *GroupUpdateOne) AddEntityBlockedGroups(v ...*Entity) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityBlockedGroupIDs(ids...)
}

// AddEntityViewerIDs adds the "entity_viewers" edge to the Entity entity by IDs.
func (_u *GroupUpdateOne) AddEntityViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddEntityViewerIDs(ids...)
	return _u
}

// AddEntityViewers adds the "entity_viewers" edges to the Entity entity.
func (_u *GroupUpdateOne) AddEntityViewers(v ...*Entity) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityViewerIDs(ids...)
}

// AddProcedureEditorIDs adds the "procedure_editors" edge to the Procedure entity by IDs.
func (_u *GroupUpdateOne) AddProcedureEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddProcedureEditorIDs(ids...)
	return _u
}

// AddProcedureEditors adds the "procedure_editors" edges to the Procedure entity.
func (_u *GroupUpdateOne) AddProcedureEditors(v ...*Procedure) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureEditorIDs(ids...)
}

// AddProcedureBlockedGroupIDs adds the "procedure_blocked_groups" edge to the Procedure entity by IDs.
func (_u *GroupUpdateOne) AddProcedureBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddProcedureBlockedGroupIDs(ids...)
	return _u
}

// AddProcedureBlockedGroups adds the "procedure_blocked_groups" edges to the Procedure entity.
func (_u *GroupUpdateOne) AddProcedureBlockedGroups(v ...*Procedure) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureBlockedGroupIDs(ids...)
}

// AddInternalPolicyEditorIDs adds the "internal_policy_editors" edge to the InternalPolicy entity by IDs.
func (_u *GroupUpdateOne) AddInternalPolicyEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddInternalPolicyEditorIDs(ids...)
	return _u
}

// AddInternalPolicyEditors adds the "internal_policy_editors" edges to the InternalPolicy entity.
func (_u *GroupUpdateOne) AddInternalPolicyEditors(v ...*InternalPolicy) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyEditorIDs(ids...)
}

// AddInternalPolicyBlockedGroupIDs adds the "internal_policy_blocked_groups" edge to the InternalPolicy entity by IDs.
func (_u *GroupUpdateOne) AddInternalPolicyBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddInternalPolicyBlockedGroupIDs(ids...)
	return _u
}

// AddInternalPolicyBlockedGroups adds the "internal_policy_blocked_groups" edges to the InternalPolicy entity.
func (_u *GroupUpdateOne) AddInternalPolicyBlockedGroups(v ...*InternalPolicy) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyBlockedGroupIDs(ids...)
}

// AddControlEditorIDs adds the "control_editors" edge to the Control entity by IDs.
func (_u *GroupUpdateOne) AddControlEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddControlEditorIDs(ids...)
	return _u
}

// AddControlEditors adds the "control_editors" edges to the Control entity.
func (_u *GroupUpdateOne) AddControlEditors(v ...*Control) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlEditorIDs(ids...)
}

// AddControlBlockedGroupIDs adds the "control_blocked_groups" edge to the Control entity by IDs.
func (_u *GroupUpdateOne) AddControlBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddControlBlockedGroupIDs(ids...)
	return _u
}

// AddControlBlockedGroups adds the "control_blocked_groups" edges to the Control entity.
func (_u *GroupUpdateOne) AddControlBlockedGroups(v ...*Control) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlBlockedGroupIDs(ids...)
}

// AddMappedControlEditorIDs adds the "mapped_control_editors" edge to the MappedControl entity by IDs.
func (_u *GroupUpdateOne) AddMappedControlEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddMappedControlEditorIDs(ids...)
	return _u
}

// AddMappedControlEditors adds the "mapped_control_editors" edges to the MappedControl entity.
func (_u *GroupUpdateOne) AddMappedControlEditors(v ...*MappedControl) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedControlEditorIDs(ids...)
}

// AddMappedControlBlockedGroupIDs adds the "mapped_control_blocked_groups" edge to the MappedControl entity by IDs.
func (_u *GroupUpdateOne) AddMappedControlBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddMappedControlBlockedGroupIDs(ids...)
	return _u
}

// AddMappedControlBlockedGroups adds the "mapped_control_blocked_groups" edges to the MappedControl entity.
func (_u *GroupUpdateOne) AddMappedControlBlockedGroups(v ...*MappedControl) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedControlBlockedGroupIDs(ids...)
}

// SetSettingID sets the "setting" edge to the GroupSetting entity by ID.
func (_u *GroupUpdateOne) SetSettingID(id string) *GroupUpdateOne {
	_u.mutation.SetSettingID(id)
	return _u
}

// SetNillableSettingID sets the "setting" edge to the GroupSetting entity by ID if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableSettingID(id *string) *GroupUpdateOne {
	if id != nil {
		_u = _u.SetSettingID(*id)
	}
	return _u
}

// SetSetting sets the "setting" edge to the GroupSetting entity.
func (_u *GroupUpdateOne) SetSetting(v *GroupSetting) *GroupUpdateOne {
	return _u.SetSettingID(v.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *GroupUpdateOne) AddUserIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *GroupUpdateOne) AddUsers(v ...*User) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *GroupUpdateOne) AddEventIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *GroupUpdateOne) AddEvents(v ...*Event) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_u *GroupUpdateOne) AddIntegrationIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddIntegrationIDs(ids...)
	return _u
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_u *GroupUpdateOne) AddIntegrations(v ...*Integration) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIntegrationIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *GroupUpdateOne) AddFileIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *GroupUpdateOne) AddFiles(v ...*File) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *GroupUpdateOne) AddTaskIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *GroupUpdateOne) AddTasks(v ...*Task) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (_u *GroupUpdateOne) AddInviteIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddInviteIDs(ids...)
	return _u
}

// AddInvites adds the "invites" edges to the Invite entity.
func (_u *GroupUpdateOne) AddInvites(v ...*Invite) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInviteIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the GroupMembership entity by IDs.
func (_u *GroupUpdateOne) AddMemberIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddMemberIDs(ids...)
	return _u
}

// AddMembers adds the "members" edges to the GroupMembership entity.
func (_u *GroupUpdateOne) AddMembers(v ...*GroupMembership) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (_u *GroupUpdateOne) Mutation() *GroupMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *GroupUpdateOne) ClearOwner() *GroupUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearProgramEditors clears all "program_editors" edges to the Program entity.
func (_u *GroupUpdateOne) ClearProgramEditors() *GroupUpdateOne {
	_u.mutation.ClearProgramEditors()
	return _u
}

// RemoveProgramEditorIDs removes the "program_editors" edge to Program entities by IDs.
func (_u *GroupUpdateOne) RemoveProgramEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveProgramEditorIDs(ids...)
	return _u
}

// RemoveProgramEditors removes "program_editors" edges to Program entities.
func (_u *GroupUpdateOne) RemoveProgramEditors(v ...*Program) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramEditorIDs(ids...)
}

// ClearProgramBlockedGroups clears all "program_blocked_groups" edges to the Program entity.
func (_u *GroupUpdateOne) ClearProgramBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearProgramBlockedGroups()
	return _u
}

// RemoveProgramBlockedGroupIDs removes the "program_blocked_groups" edge to Program entities by IDs.
func (_u *GroupUpdateOne) RemoveProgramBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveProgramBlockedGroupIDs(ids...)
	return _u
}

// RemoveProgramBlockedGroups removes "program_blocked_groups" edges to Program entities.
func (_u *GroupUpdateOne) RemoveProgramBlockedGroups(v ...*Program) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramBlockedGroupIDs(ids...)
}

// ClearProgramViewers clears all "program_viewers" edges to the Program entity.
func (_u *GroupUpdateOne) ClearProgramViewers() *GroupUpdateOne {
	_u.mutation.ClearProgramViewers()
	return _u
}

// RemoveProgramViewerIDs removes the "program_viewers" edge to Program entities by IDs.
func (_u *GroupUpdateOne) RemoveProgramViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveProgramViewerIDs(ids...)
	return _u
}

// RemoveProgramViewers removes "program_viewers" edges to Program entities.
func (_u *GroupUpdateOne) RemoveProgramViewers(v ...*Program) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramViewerIDs(ids...)
}

// ClearRiskEditors clears all "risk_editors" edges to the Risk entity.
func (_u *GroupUpdateOne) ClearRiskEditors() *GroupUpdateOne {
	_u.mutation.ClearRiskEditors()
	return _u
}

// RemoveRiskEditorIDs removes the "risk_editors" edge to Risk entities by IDs.
func (_u *GroupUpdateOne) RemoveRiskEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveRiskEditorIDs(ids...)
	return _u
}

// RemoveRiskEditors removes "risk_editors" edges to Risk entities.
func (_u *GroupUpdateOne) RemoveRiskEditors(v ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskEditorIDs(ids...)
}

// ClearRiskBlockedGroups clears all "risk_blocked_groups" edges to the Risk entity.
func (_u *GroupUpdateOne) ClearRiskBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearRiskBlockedGroups()
	return _u
}

// RemoveRiskBlockedGroupIDs removes the "risk_blocked_groups" edge to Risk entities by IDs.
func (_u *GroupUpdateOne) RemoveRiskBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveRiskBlockedGroupIDs(ids...)
	return _u
}

// RemoveRiskBlockedGroups removes "risk_blocked_groups" edges to Risk entities.
func (_u *GroupUpdateOne) RemoveRiskBlockedGroups(v ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskBlockedGroupIDs(ids...)
}

// ClearRiskViewers clears all "risk_viewers" edges to the Risk entity.
func (_u *GroupUpdateOne) ClearRiskViewers() *GroupUpdateOne {
	_u.mutation.ClearRiskViewers()
	return _u
}

// RemoveRiskViewerIDs removes the "risk_viewers" edge to Risk entities by IDs.
func (_u *GroupUpdateOne) RemoveRiskViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveRiskViewerIDs(ids...)
	return _u
}

// RemoveRiskViewers removes "risk_viewers" edges to Risk entities.
func (_u *GroupUpdateOne) RemoveRiskViewers(v ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskViewerIDs(ids...)
}

// ClearControlObjectiveEditors clears all "control_objective_editors" edges to the ControlObjective entity.
func (_u *GroupUpdateOne) ClearControlObjectiveEditors() *GroupUpdateOne {
	_u.mutation.ClearControlObjectiveEditors()
	return _u
}

// RemoveControlObjectiveEditorIDs removes the "control_objective_editors" edge to ControlObjective entities by IDs.
func (_u *GroupUpdateOne) RemoveControlObjectiveEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveControlObjectiveEditorIDs(ids...)
	return _u
}

// RemoveControlObjectiveEditors removes "control_objective_editors" edges to ControlObjective entities.
func (_u *GroupUpdateOne) RemoveControlObjectiveEditors(v ...*ControlObjective) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveEditorIDs(ids...)
}

// ClearControlObjectiveBlockedGroups clears all "control_objective_blocked_groups" edges to the ControlObjective entity.
func (_u *GroupUpdateOne) ClearControlObjectiveBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearControlObjectiveBlockedGroups()
	return _u
}

// RemoveControlObjectiveBlockedGroupIDs removes the "control_objective_blocked_groups" edge to ControlObjective entities by IDs.
func (_u *GroupUpdateOne) RemoveControlObjectiveBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveControlObjectiveBlockedGroupIDs(ids...)
	return _u
}

// RemoveControlObjectiveBlockedGroups removes "control_objective_blocked_groups" edges to ControlObjective entities.
func (_u *GroupUpdateOne) RemoveControlObjectiveBlockedGroups(v ...*ControlObjective) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveBlockedGroupIDs(ids...)
}

// ClearControlObjectiveViewers clears all "control_objective_viewers" edges to the ControlObjective entity.
func (_u *GroupUpdateOne) ClearControlObjectiveViewers() *GroupUpdateOne {
	_u.mutation.ClearControlObjectiveViewers()
	return _u
}

// RemoveControlObjectiveViewerIDs removes the "control_objective_viewers" edge to ControlObjective entities by IDs.
func (_u *GroupUpdateOne) RemoveControlObjectiveViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveControlObjectiveViewerIDs(ids...)
	return _u
}

// RemoveControlObjectiveViewers removes "control_objective_viewers" edges to ControlObjective entities.
func (_u *GroupUpdateOne) RemoveControlObjectiveViewers(v ...*ControlObjective) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveViewerIDs(ids...)
}

// ClearNarrativeEditors clears all "narrative_editors" edges to the Narrative entity.
func (_u *GroupUpdateOne) ClearNarrativeEditors() *GroupUpdateOne {
	_u.mutation.ClearNarrativeEditors()
	return _u
}

// RemoveNarrativeEditorIDs removes the "narrative_editors" edge to Narrative entities by IDs.
func (_u *GroupUpdateOne) RemoveNarrativeEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveNarrativeEditorIDs(ids...)
	return _u
}

// RemoveNarrativeEditors removes "narrative_editors" edges to Narrative entities.
func (_u *GroupUpdateOne) RemoveNarrativeEditors(v ...*Narrative) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeEditorIDs(ids...)
}

// ClearNarrativeBlockedGroups clears all "narrative_blocked_groups" edges to the Narrative entity.
func (_u *GroupUpdateOne) ClearNarrativeBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearNarrativeBlockedGroups()
	return _u
}

// RemoveNarrativeBlockedGroupIDs removes the "narrative_blocked_groups" edge to Narrative entities by IDs.
func (_u *GroupUpdateOne) RemoveNarrativeBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveNarrativeBlockedGroupIDs(ids...)
	return _u
}

// RemoveNarrativeBlockedGroups removes "narrative_blocked_groups" edges to Narrative entities.
func (_u *GroupUpdateOne) RemoveNarrativeBlockedGroups(v ...*Narrative) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeBlockedGroupIDs(ids...)
}

// ClearNarrativeViewers clears all "narrative_viewers" edges to the Narrative entity.
func (_u *GroupUpdateOne) ClearNarrativeViewers() *GroupUpdateOne {
	_u.mutation.ClearNarrativeViewers()
	return _u
}

// RemoveNarrativeViewerIDs removes the "narrative_viewers" edge to Narrative entities by IDs.
func (_u *GroupUpdateOne) RemoveNarrativeViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveNarrativeViewerIDs(ids...)
	return _u
}

// RemoveNarrativeViewers removes "narrative_viewers" edges to Narrative entities.
func (_u *GroupUpdateOne) RemoveNarrativeViewers(v ...*Narrative) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeViewerIDs(ids...)
}

// ClearControlImplementationEditors clears all "control_implementation_editors" edges to the ControlImplementation entity.
func (_u *GroupUpdateOne) ClearControlImplementationEditors() *GroupUpdateOne {
	_u.mutation.ClearControlImplementationEditors()
	return _u
}

// RemoveControlImplementationEditorIDs removes the "control_implementation_editors" edge to ControlImplementation entities by IDs.
func (_u *GroupUpdateOne) RemoveControlImplementationEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveControlImplementationEditorIDs(ids...)
	return _u
}

// RemoveControlImplementationEditors removes "control_implementation_editors" edges to ControlImplementation entities.
func (_u *GroupUpdateOne) RemoveControlImplementationEditors(v ...*ControlImplementation) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationEditorIDs(ids...)
}

// ClearControlImplementationBlockedGroups clears all "control_implementation_blocked_groups" edges to the ControlImplementation entity.
func (_u *GroupUpdateOne) ClearControlImplementationBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearControlImplementationBlockedGroups()
	return _u
}

// RemoveControlImplementationBlockedGroupIDs removes the "control_implementation_blocked_groups" edge to ControlImplementation entities by IDs.
func (_u *GroupUpdateOne) RemoveControlImplementationBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveControlImplementationBlockedGroupIDs(ids...)
	return _u
}

// RemoveControlImplementationBlockedGroups removes "control_implementation_blocked_groups" edges to ControlImplementation entities.
func (_u *GroupUpdateOne) RemoveControlImplementationBlockedGroups(v ...*ControlImplementation) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationBlockedGroupIDs(ids...)
}

// ClearControlImplementationViewers clears all "control_implementation_viewers" edges to the ControlImplementation entity.
func (_u *GroupUpdateOne) ClearControlImplementationViewers() *GroupUpdateOne {
	_u.mutation.ClearControlImplementationViewers()
	return _u
}

// RemoveControlImplementationViewerIDs removes the "control_implementation_viewers" edge to ControlImplementation entities by IDs.
func (_u *GroupUpdateOne) RemoveControlImplementationViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveControlImplementationViewerIDs(ids...)
	return _u
}

// RemoveControlImplementationViewers removes "control_implementation_viewers" edges to ControlImplementation entities.
func (_u *GroupUpdateOne) RemoveControlImplementationViewers(v ...*ControlImplementation) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationViewerIDs(ids...)
}

// ClearScanEditors clears all "scan_editors" edges to the Scan entity.
func (_u *GroupUpdateOne) ClearScanEditors() *GroupUpdateOne {
	_u.mutation.ClearScanEditors()
	return _u
}

// RemoveScanEditorIDs removes the "scan_editors" edge to Scan entities by IDs.
func (_u *GroupUpdateOne) RemoveScanEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveScanEditorIDs(ids...)
	return _u
}

// RemoveScanEditors removes "scan_editors" edges to Scan entities.
func (_u *GroupUpdateOne) RemoveScanEditors(v ...*Scan) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanEditorIDs(ids...)
}

// ClearScanBlockedGroups clears all "scan_blocked_groups" edges to the Scan entity.
func (_u *GroupUpdateOne) ClearScanBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearScanBlockedGroups()
	return _u
}

// RemoveScanBlockedGroupIDs removes the "scan_blocked_groups" edge to Scan entities by IDs.
func (_u *GroupUpdateOne) RemoveScanBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveScanBlockedGroupIDs(ids...)
	return _u
}

// RemoveScanBlockedGroups removes "scan_blocked_groups" edges to Scan entities.
func (_u *GroupUpdateOne) RemoveScanBlockedGroups(v ...*Scan) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanBlockedGroupIDs(ids...)
}

// ClearScanViewers clears all "scan_viewers" edges to the Scan entity.
func (_u *GroupUpdateOne) ClearScanViewers() *GroupUpdateOne {
	_u.mutation.ClearScanViewers()
	return _u
}

// RemoveScanViewerIDs removes the "scan_viewers" edge to Scan entities by IDs.
func (_u *GroupUpdateOne) RemoveScanViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveScanViewerIDs(ids...)
	return _u
}

// RemoveScanViewers removes "scan_viewers" edges to Scan entities.
func (_u *GroupUpdateOne) RemoveScanViewers(v ...*Scan) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanViewerIDs(ids...)
}

// ClearEntityEditors clears all "entity_editors" edges to the Entity entity.
func (_u *GroupUpdateOne) ClearEntityEditors() *GroupUpdateOne {
	_u.mutation.ClearEntityEditors()
	return _u
}

// RemoveEntityEditorIDs removes the "entity_editors" edge to Entity entities by IDs.
func (_u *GroupUpdateOne) RemoveEntityEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveEntityEditorIDs(ids...)
	return _u
}

// RemoveEntityEditors removes "entity_editors" edges to Entity entities.
func (_u *GroupUpdateOne) RemoveEntityEditors(v ...*Entity) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityEditorIDs(ids...)
}

// ClearEntityBlockedGroups clears all "entity_blocked_groups" edges to the Entity entity.
func (_u *GroupUpdateOne) ClearEntityBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearEntityBlockedGroups()
	return _u
}

// RemoveEntityBlockedGroupIDs removes the "entity_blocked_groups" edge to Entity entities by IDs.
func (_u *GroupUpdateOne) RemoveEntityBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveEntityBlockedGroupIDs(ids...)
	return _u
}

// RemoveEntityBlockedGroups removes "entity_blocked_groups" edges to Entity entities.
func (_u *GroupUpdateOne) RemoveEntityBlockedGroups(v ...*Entity) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityBlockedGroupIDs(ids...)
}

// ClearEntityViewers clears all "entity_viewers" edges to the Entity entity.
func (_u *GroupUpdateOne) ClearEntityViewers() *GroupUpdateOne {
	_u.mutation.ClearEntityViewers()
	return _u
}

// RemoveEntityViewerIDs removes the "entity_viewers" edge to Entity entities by IDs.
func (_u *GroupUpdateOne) RemoveEntityViewerIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveEntityViewerIDs(ids...)
	return _u
}

// RemoveEntityViewers removes "entity_viewers" edges to Entity entities.
func (_u *GroupUpdateOne) RemoveEntityViewers(v ...*Entity) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityViewerIDs(ids...)
}

// ClearProcedureEditors clears all "procedure_editors" edges to the Procedure entity.
func (_u *GroupUpdateOne) ClearProcedureEditors() *GroupUpdateOne {
	_u.mutation.ClearProcedureEditors()
	return _u
}

// RemoveProcedureEditorIDs removes the "procedure_editors" edge to Procedure entities by IDs.
func (_u *GroupUpdateOne) RemoveProcedureEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveProcedureEditorIDs(ids...)
	return _u
}

// RemoveProcedureEditors removes "procedure_editors" edges to Procedure entities.
func (_u *GroupUpdateOne) RemoveProcedureEditors(v ...*Procedure) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureEditorIDs(ids...)
}

// ClearProcedureBlockedGroups clears all "procedure_blocked_groups" edges to the Procedure entity.
func (_u *GroupUpdateOne) ClearProcedureBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearProcedureBlockedGroups()
	return _u
}

// RemoveProcedureBlockedGroupIDs removes the "procedure_blocked_groups" edge to Procedure entities by IDs.
func (_u *GroupUpdateOne) RemoveProcedureBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveProcedureBlockedGroupIDs(ids...)
	return _u
}

// RemoveProcedureBlockedGroups removes "procedure_blocked_groups" edges to Procedure entities.
func (_u *GroupUpdateOne) RemoveProcedureBlockedGroups(v ...*Procedure) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureBlockedGroupIDs(ids...)
}

// ClearInternalPolicyEditors clears all "internal_policy_editors" edges to the InternalPolicy entity.
func (_u *GroupUpdateOne) ClearInternalPolicyEditors() *GroupUpdateOne {
	_u.mutation.ClearInternalPolicyEditors()
	return _u
}

// RemoveInternalPolicyEditorIDs removes the "internal_policy_editors" edge to InternalPolicy entities by IDs.
func (_u *GroupUpdateOne) RemoveInternalPolicyEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveInternalPolicyEditorIDs(ids...)
	return _u
}

// RemoveInternalPolicyEditors removes "internal_policy_editors" edges to InternalPolicy entities.
func (_u *GroupUpdateOne) RemoveInternalPolicyEditors(v ...*InternalPolicy) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyEditorIDs(ids...)
}

// ClearInternalPolicyBlockedGroups clears all "internal_policy_blocked_groups" edges to the InternalPolicy entity.
func (_u *GroupUpdateOne) ClearInternalPolicyBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearInternalPolicyBlockedGroups()
	return _u
}

// RemoveInternalPolicyBlockedGroupIDs removes the "internal_policy_blocked_groups" edge to InternalPolicy entities by IDs.
func (_u *GroupUpdateOne) RemoveInternalPolicyBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveInternalPolicyBlockedGroupIDs(ids...)
	return _u
}

// RemoveInternalPolicyBlockedGroups removes "internal_policy_blocked_groups" edges to InternalPolicy entities.
func (_u *GroupUpdateOne) RemoveInternalPolicyBlockedGroups(v ...*InternalPolicy) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyBlockedGroupIDs(ids...)
}

// ClearControlEditors clears all "control_editors" edges to the Control entity.
func (_u *GroupUpdateOne) ClearControlEditors() *GroupUpdateOne {
	_u.mutation.ClearControlEditors()
	return _u
}

// RemoveControlEditorIDs removes the "control_editors" edge to Control entities by IDs.
func (_u *GroupUpdateOne) RemoveControlEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveControlEditorIDs(ids...)
	return _u
}

// RemoveControlEditors removes "control_editors" edges to Control entities.
func (_u *GroupUpdateOne) RemoveControlEditors(v ...*Control) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlEditorIDs(ids...)
}

// ClearControlBlockedGroups clears all "control_blocked_groups" edges to the Control entity.
func (_u *GroupUpdateOne) ClearControlBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearControlBlockedGroups()
	return _u
}

// RemoveControlBlockedGroupIDs removes the "control_blocked_groups" edge to Control entities by IDs.
func (_u *GroupUpdateOne) RemoveControlBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveControlBlockedGroupIDs(ids...)
	return _u
}

// RemoveControlBlockedGroups removes "control_blocked_groups" edges to Control entities.
func (_u *GroupUpdateOne) RemoveControlBlockedGroups(v ...*Control) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlBlockedGroupIDs(ids...)
}

// ClearMappedControlEditors clears all "mapped_control_editors" edges to the MappedControl entity.
func (_u *GroupUpdateOne) ClearMappedControlEditors() *GroupUpdateOne {
	_u.mutation.ClearMappedControlEditors()
	return _u
}

// RemoveMappedControlEditorIDs removes the "mapped_control_editors" edge to MappedControl entities by IDs.
func (_u *GroupUpdateOne) RemoveMappedControlEditorIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveMappedControlEditorIDs(ids...)
	return _u
}

// RemoveMappedControlEditors removes "mapped_control_editors" edges to MappedControl entities.
func (_u *GroupUpdateOne) RemoveMappedControlEditors(v ...*MappedControl) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedControlEditorIDs(ids...)
}

// ClearMappedControlBlockedGroups clears all "mapped_control_blocked_groups" edges to the MappedControl entity.
func (_u *GroupUpdateOne) ClearMappedControlBlockedGroups() *GroupUpdateOne {
	_u.mutation.ClearMappedControlBlockedGroups()
	return _u
}

// RemoveMappedControlBlockedGroupIDs removes the "mapped_control_blocked_groups" edge to MappedControl entities by IDs.
func (_u *GroupUpdateOne) RemoveMappedControlBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveMappedControlBlockedGroupIDs(ids...)
	return _u
}

// RemoveMappedControlBlockedGroups removes "mapped_control_blocked_groups" edges to MappedControl entities.
func (_u *GroupUpdateOne) RemoveMappedControlBlockedGroups(v ...*MappedControl) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedControlBlockedGroupIDs(ids...)
}

// ClearSetting clears the "setting" edge to the GroupSetting entity.
func (_u *GroupUpdateOne) ClearSetting() *GroupUpdateOne {
	_u.mutation.ClearSetting()
	return _u
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *GroupUpdateOne) ClearUsers() *GroupUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *GroupUpdateOne) RemoveUserIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *GroupUpdateOne) RemoveUsers(v ...*User) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *GroupUpdateOne) ClearEvents() *GroupUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *GroupUpdateOne) RemoveEventIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *GroupUpdateOne) RemoveEvents(v ...*Event) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (_u *GroupUpdateOne) ClearIntegrations() *GroupUpdateOne {
	_u.mutation.ClearIntegrations()
	return _u
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (_u *GroupUpdateOne) RemoveIntegrationIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveIntegrationIDs(ids...)
	return _u
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (_u *GroupUpdateOne) RemoveIntegrations(v ...*Integration) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIntegrationIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *GroupUpdateOne) ClearFiles() *GroupUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *GroupUpdateOne) RemoveFileIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *GroupUpdateOne) RemoveFiles(v ...*File) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *GroupUpdateOne) ClearTasks() *GroupUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *GroupUpdateOne) RemoveTaskIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *GroupUpdateOne) RemoveTasks(v ...*Task) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (_u *GroupUpdateOne) ClearInvites() *GroupUpdateOne {
	_u.mutation.ClearInvites()
	return _u
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (_u *GroupUpdateOne) RemoveInviteIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveInviteIDs(ids...)
	return _u
}

// RemoveInvites removes "invites" edges to Invite entities.
func (_u *GroupUpdateOne) RemoveInvites(v ...*Invite) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInviteIDs(ids...)
}

// ClearMembers clears all "members" edges to the GroupMembership entity.
func (_u *GroupUpdateOne) ClearMembers() *GroupUpdateOne {
	_u.mutation.ClearMembers()
	return _u
}

// RemoveMemberIDs removes the "members" edge to GroupMembership entities by IDs.
func (_u *GroupUpdateOne) RemoveMemberIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveMemberIDs(ids...)
	return _u
}

// RemoveMembers removes "members" edges to GroupMembership entities.
func (_u *GroupUpdateOne) RemoveMembers(v ...*GroupMembership) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the GroupUpdate builder.
func (_u *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Group entity.
func (_u *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GroupUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if group.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized group.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := group.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *GroupUpdateOne) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := group.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Group.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GravatarLogoURL(); ok {
		if err := group.GravatarLogoURLValidator(v); err != nil {
			return &ValidationError{Name: "gravatar_logo_url", err: fmt.Errorf(`generated: validator failed for field "Group.gravatar_logo_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LogoURL(); ok {
		if err := group.LogoURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_url", err: fmt.Errorf(`generated: validator failed for field "Group.logo_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DisplayName(); ok {
		if err := group.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Group.display_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *GroupUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GroupUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(group.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(group.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(group.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(group.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(group.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(group.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(group.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(group.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if _u.mutation.IsManagedCleared() {
		_spec.ClearField(group.FieldIsManaged, field.TypeBool)
	}
	if value, ok := _u.mutation.GravatarLogoURL(); ok {
		_spec.SetField(group.FieldGravatarLogoURL, field.TypeString, value)
	}
	if _u.mutation.GravatarLogoURLCleared() {
		_spec.ClearField(group.FieldGravatarLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.LogoURL(); ok {
		_spec.SetField(group.FieldLogoURL, field.TypeString, value)
	}
	if _u.mutation.LogoURLCleared() {
		_spec.ClearField(group.FieldLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(group.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramEditorsIDs(); len(nodes) > 0 && !_u.mutation.ProgramEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ProgramBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramViewersIDs(); len(nodes) > 0 && !_u.mutation.ProgramViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRiskEditorsIDs(); len(nodes) > 0 && !_u.mutation.RiskEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRiskBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.RiskBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRiskViewersIDs(); len(nodes) > 0 && !_u.mutation.RiskViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectiveEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveEditorsTable,
			Columns: group.ControlObjectiveEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectiveEditorsIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectiveEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveEditorsTable,
			Columns: group.ControlObjectiveEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectiveEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveEditorsTable,
			Columns: group.ControlObjectiveEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectiveBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveBlockedGroupsTable,
			Columns: group.ControlObjectiveBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectiveBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectiveBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveBlockedGroupsTable,
			Columns: group.ControlObjectiveBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectiveBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveBlockedGroupsTable,
			Columns: group.ControlObjectiveBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectiveViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveViewersTable,
			Columns: group.ControlObjectiveViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectiveViewersIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectiveViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveViewersTable,
			Columns: group.ControlObjectiveViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectiveViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveViewersTable,
			Columns: group.ControlObjectiveViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjectiveViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativeEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeEditorsTable,
			Columns: group.NarrativeEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativeEditorsIDs(); len(nodes) > 0 && !_u.mutation.NarrativeEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeEditorsTable,
			Columns: group.NarrativeEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativeEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeEditorsTable,
			Columns: group.NarrativeEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativeBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeBlockedGroupsTable,
			Columns: group.NarrativeBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativeBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.NarrativeBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeBlockedGroupsTable,
			Columns: group.NarrativeBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativeBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeBlockedGroupsTable,
			Columns: group.NarrativeBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativeViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeViewersTable,
			Columns: group.NarrativeViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativeViewersIDs(); len(nodes) > 0 && !_u.mutation.NarrativeViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeViewersTable,
			Columns: group.NarrativeViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativeViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeViewersTable,
			Columns: group.NarrativeViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.NarrativeViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationEditorsTable,
			Columns: group.ControlImplementationEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationEditorsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationEditorsTable,
			Columns: group.ControlImplementationEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationEditorsTable,
			Columns: group.ControlImplementationEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationBlockedGroupsTable,
			Columns: group.ControlImplementationBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationBlockedGroupsTable,
			Columns: group.ControlImplementationBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationBlockedGroupsTable,
			Columns: group.ControlImplementationBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationViewersTable,
			Columns: group.ControlImplementationViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationViewersIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationViewersTable,
			Columns: group.ControlImplementationViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationViewersTable,
			Columns: group.ControlImplementationViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScanEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanEditorsTable,
			Columns: group.ScanEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScanEditorsIDs(); len(nodes) > 0 && !_u.mutation.ScanEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanEditorsTable,
			Columns: group.ScanEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScanEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanEditorsTable,
			Columns: group.ScanEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScanBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanBlockedGroupsTable,
			Columns: group.ScanBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScanBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ScanBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanBlockedGroupsTable,
			Columns: group.ScanBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScanBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanBlockedGroupsTable,
			Columns: group.ScanBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScanViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanViewersTable,
			Columns: group.ScanViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScanViewersIDs(); len(nodes) > 0 && !_u.mutation.ScanViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanViewersTable,
			Columns: group.ScanViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScanViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanViewersTable,
			Columns: group.ScanViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityEditorsTable,
			Columns: group.EntityEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityEditorsIDs(); len(nodes) > 0 && !_u.mutation.EntityEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityEditorsTable,
			Columns: group.EntityEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityEditorsTable,
			Columns: group.EntityEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityBlockedGroupsTable,
			Columns: group.EntityBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.EntityBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityBlockedGroupsTable,
			Columns: group.EntityBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityBlockedGroupsTable,
			Columns: group.EntityBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityViewersTable,
			Columns: group.EntityViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityViewersIDs(); len(nodes) > 0 && !_u.mutation.EntityViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityViewersTable,
			Columns: group.EntityViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityViewersTable,
			Columns: group.EntityViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProcedureEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProcedureEditorsIDs(); len(nodes) > 0 && !_u.mutation.ProcedureEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProcedureEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProcedureBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProcedureBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ProcedureBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProcedureBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPolicyEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyEditorsTable,
			Columns: group.InternalPolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPolicyEditorsIDs(); len(nodes) > 0 && !_u.mutation.InternalPolicyEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyEditorsTable,
			Columns: group.InternalPolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPolicyEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyEditorsTable,
			Columns: group.InternalPolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPolicyBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyBlockedGroupsTable,
			Columns: group.InternalPolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPolicyBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.InternalPolicyBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyBlockedGroupsTable,
			Columns: group.InternalPolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPolicyBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyBlockedGroupsTable,
			Columns: group.InternalPolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlEditorsTable,
			Columns: group.ControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlEditorsIDs(); len(nodes) > 0 && !_u.mutation.ControlEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlEditorsTable,
			Columns: group.ControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlEditorsTable,
			Columns: group.ControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlBlockedGroupsTable,
			Columns: group.ControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.ControlBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlBlockedGroupsTable,
			Columns: group.ControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlBlockedGroupsTable,
			Columns: group.ControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedControlEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlEditorsTable,
			Columns: group.MappedControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedControlEditorsIDs(); len(nodes) > 0 && !_u.mutation.MappedControlEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlEditorsTable,
			Columns: group.MappedControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedControlEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlEditorsTable,
			Columns: group.MappedControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedControlBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlBlockedGroupsTable,
			Columns: group.MappedControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedControlBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.MappedControlBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlBlockedGroupsTable,
			Columns: group.MappedControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedControlBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlBlockedGroupsTable,
			Columns: group.MappedControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		createE := &GroupMembershipCreate{config: _u.config, mutation: newGroupMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: _u.config, mutation: newGroupMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: _u.config, mutation: newGroupMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !_u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InvitesTable,
			Columns: group.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !_u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InvitesTable,
			Columns: group.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InvitesTable,
			Columns: group.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMembersIDs(); len(nodes) > 0 && !_u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Group
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Group{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
