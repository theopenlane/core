// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks     []Hook
	mutation  *GroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GroupUpdate) SetUpdatedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gu *GroupUpdate) ClearUpdatedAt() *GroupUpdate {
	gu.mutation.ClearUpdatedAt()
	return gu
}

// SetUpdatedBy sets the "updated_by" field.
func (gu *GroupUpdate) SetUpdatedBy(s string) *GroupUpdate {
	gu.mutation.SetUpdatedBy(s)
	return gu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableUpdatedBy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetUpdatedBy(*s)
	}
	return gu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (gu *GroupUpdate) ClearUpdatedBy() *GroupUpdate {
	gu.mutation.ClearUpdatedBy()
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GroupUpdate) SetDeletedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetDeletedAt(t)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDeletedAt(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetDeletedAt(*t)
	}
	return gu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gu *GroupUpdate) ClearDeletedAt() *GroupUpdate {
	gu.mutation.ClearDeletedAt()
	return gu
}

// SetDeletedBy sets the "deleted_by" field.
func (gu *GroupUpdate) SetDeletedBy(s string) *GroupUpdate {
	gu.mutation.SetDeletedBy(s)
	return gu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDeletedBy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDeletedBy(*s)
	}
	return gu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (gu *GroupUpdate) ClearDeletedBy() *GroupUpdate {
	gu.mutation.ClearDeletedBy()
	return gu
}

// SetTags sets the "tags" field.
func (gu *GroupUpdate) SetTags(s []string) *GroupUpdate {
	gu.mutation.SetTags(s)
	return gu
}

// AppendTags appends s to the "tags" field.
func (gu *GroupUpdate) AppendTags(s []string) *GroupUpdate {
	gu.mutation.AppendTags(s)
	return gu
}

// ClearTags clears the value of the "tags" field.
func (gu *GroupUpdate) ClearTags() *GroupUpdate {
	gu.mutation.ClearTags()
	return gu
}

// SetOwnerID sets the "owner_id" field.
func (gu *GroupUpdate) SetOwnerID(s string) *GroupUpdate {
	gu.mutation.SetOwnerID(s)
	return gu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableOwnerID(s *string) *GroupUpdate {
	if s != nil {
		gu.SetOwnerID(*s)
	}
	return gu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (gu *GroupUpdate) ClearOwnerID() *GroupUpdate {
	gu.mutation.ClearOwnerID()
	return gu
}

// SetName sets the "name" field.
func (gu *GroupUpdate) SetName(s string) *GroupUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetDescription sets the "description" field.
func (gu *GroupUpdate) SetDescription(s string) *GroupUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDescription(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// ClearDescription clears the value of the "description" field.
func (gu *GroupUpdate) ClearDescription() *GroupUpdate {
	gu.mutation.ClearDescription()
	return gu
}

// SetGravatarLogoURL sets the "gravatar_logo_url" field.
func (gu *GroupUpdate) SetGravatarLogoURL(s string) *GroupUpdate {
	gu.mutation.SetGravatarLogoURL(s)
	return gu
}

// SetNillableGravatarLogoURL sets the "gravatar_logo_url" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableGravatarLogoURL(s *string) *GroupUpdate {
	if s != nil {
		gu.SetGravatarLogoURL(*s)
	}
	return gu
}

// ClearGravatarLogoURL clears the value of the "gravatar_logo_url" field.
func (gu *GroupUpdate) ClearGravatarLogoURL() *GroupUpdate {
	gu.mutation.ClearGravatarLogoURL()
	return gu
}

// SetLogoURL sets the "logo_url" field.
func (gu *GroupUpdate) SetLogoURL(s string) *GroupUpdate {
	gu.mutation.SetLogoURL(s)
	return gu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableLogoURL(s *string) *GroupUpdate {
	if s != nil {
		gu.SetLogoURL(*s)
	}
	return gu
}

// ClearLogoURL clears the value of the "logo_url" field.
func (gu *GroupUpdate) ClearLogoURL() *GroupUpdate {
	gu.mutation.ClearLogoURL()
	return gu
}

// SetDisplayName sets the "display_name" field.
func (gu *GroupUpdate) SetDisplayName(s string) *GroupUpdate {
	gu.mutation.SetDisplayName(s)
	return gu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDisplayName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDisplayName(*s)
	}
	return gu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (gu *GroupUpdate) SetOwner(o *Organization) *GroupUpdate {
	return gu.SetOwnerID(o.ID)
}

// SetSettingID sets the "setting" edge to the GroupSetting entity by ID.
func (gu *GroupUpdate) SetSettingID(id string) *GroupUpdate {
	gu.mutation.SetSettingID(id)
	return gu
}

// SetSetting sets the "setting" edge to the GroupSetting entity.
func (gu *GroupUpdate) SetSetting(g *GroupSetting) *GroupUpdate {
	return gu.SetSettingID(g.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (gu *GroupUpdate) AddUserIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddUserIDs(ids...)
	return gu
}

// AddUsers adds the "users" edges to the User entity.
func (gu *GroupUpdate) AddUsers(u ...*User) *GroupUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddUserIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (gu *GroupUpdate) AddEventIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddEventIDs(ids...)
	return gu
}

// AddEvents adds the "events" edges to the Event entity.
func (gu *GroupUpdate) AddEvents(e ...*Event) *GroupUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gu.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (gu *GroupUpdate) AddIntegrationIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddIntegrationIDs(ids...)
	return gu
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (gu *GroupUpdate) AddIntegrations(i ...*Integration) *GroupUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.AddIntegrationIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (gu *GroupUpdate) AddFileIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddFileIDs(ids...)
	return gu
}

// AddFiles adds the "files" edges to the File entity.
func (gu *GroupUpdate) AddFiles(f ...*File) *GroupUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return gu.AddFileIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (gu *GroupUpdate) AddTaskIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddTaskIDs(ids...)
	return gu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (gu *GroupUpdate) AddTasks(t ...*Task) *GroupUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.AddTaskIDs(ids...)
}

// AddProcedureEditorIDs adds the "procedure_editors" edge to the Procedure entity by IDs.
func (gu *GroupUpdate) AddProcedureEditorIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddProcedureEditorIDs(ids...)
	return gu
}

// AddProcedureEditors adds the "procedure_editors" edges to the Procedure entity.
func (gu *GroupUpdate) AddProcedureEditors(p ...*Procedure) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddProcedureEditorIDs(ids...)
}

// AddProcedureBlockedGroupIDs adds the "procedure_blocked_groups" edge to the Procedure entity by IDs.
func (gu *GroupUpdate) AddProcedureBlockedGroupIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddProcedureBlockedGroupIDs(ids...)
	return gu
}

// AddProcedureBlockedGroups adds the "procedure_blocked_groups" edges to the Procedure entity.
func (gu *GroupUpdate) AddProcedureBlockedGroups(p ...*Procedure) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddProcedureBlockedGroupIDs(ids...)
}

// AddInternalpolicyEditorIDs adds the "internalpolicy_editors" edge to the InternalPolicy entity by IDs.
func (gu *GroupUpdate) AddInternalpolicyEditorIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddInternalpolicyEditorIDs(ids...)
	return gu
}

// AddInternalpolicyEditors adds the "internalpolicy_editors" edges to the InternalPolicy entity.
func (gu *GroupUpdate) AddInternalpolicyEditors(i ...*InternalPolicy) *GroupUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.AddInternalpolicyEditorIDs(ids...)
}

// AddInternalpolicyBlockedGroupIDs adds the "internalpolicy_blocked_groups" edge to the InternalPolicy entity by IDs.
func (gu *GroupUpdate) AddInternalpolicyBlockedGroupIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddInternalpolicyBlockedGroupIDs(ids...)
	return gu
}

// AddInternalpolicyBlockedGroups adds the "internalpolicy_blocked_groups" edges to the InternalPolicy entity.
func (gu *GroupUpdate) AddInternalpolicyBlockedGroups(i ...*InternalPolicy) *GroupUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.AddInternalpolicyBlockedGroupIDs(ids...)
}

// AddProgramViewerIDs adds the "program_viewers" edge to the Program entity by IDs.
func (gu *GroupUpdate) AddProgramViewerIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddProgramViewerIDs(ids...)
	return gu
}

// AddProgramViewers adds the "program_viewers" edges to the Program entity.
func (gu *GroupUpdate) AddProgramViewers(p ...*Program) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddProgramViewerIDs(ids...)
}

// AddProgramEditorIDs adds the "program_editors" edge to the Program entity by IDs.
func (gu *GroupUpdate) AddProgramEditorIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddProgramEditorIDs(ids...)
	return gu
}

// AddProgramEditors adds the "program_editors" edges to the Program entity.
func (gu *GroupUpdate) AddProgramEditors(p ...*Program) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddProgramEditorIDs(ids...)
}

// AddProgramBlockedGroupIDs adds the "program_blocked_groups" edge to the Program entity by IDs.
func (gu *GroupUpdate) AddProgramBlockedGroupIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddProgramBlockedGroupIDs(ids...)
	return gu
}

// AddProgramBlockedGroups adds the "program_blocked_groups" edges to the Program entity.
func (gu *GroupUpdate) AddProgramBlockedGroups(p ...*Program) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddProgramBlockedGroupIDs(ids...)
}

// AddRiskViewerIDs adds the "risk_viewers" edge to the Risk entity by IDs.
func (gu *GroupUpdate) AddRiskViewerIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddRiskViewerIDs(ids...)
	return gu
}

// AddRiskViewers adds the "risk_viewers" edges to the Risk entity.
func (gu *GroupUpdate) AddRiskViewers(r ...*Risk) *GroupUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return gu.AddRiskViewerIDs(ids...)
}

// AddRiskEditorIDs adds the "risk_editors" edge to the Risk entity by IDs.
func (gu *GroupUpdate) AddRiskEditorIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddRiskEditorIDs(ids...)
	return gu
}

// AddRiskEditors adds the "risk_editors" edges to the Risk entity.
func (gu *GroupUpdate) AddRiskEditors(r ...*Risk) *GroupUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return gu.AddRiskEditorIDs(ids...)
}

// AddRiskBlockedGroupIDs adds the "risk_blocked_groups" edge to the Risk entity by IDs.
func (gu *GroupUpdate) AddRiskBlockedGroupIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddRiskBlockedGroupIDs(ids...)
	return gu
}

// AddRiskBlockedGroups adds the "risk_blocked_groups" edges to the Risk entity.
func (gu *GroupUpdate) AddRiskBlockedGroups(r ...*Risk) *GroupUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return gu.AddRiskBlockedGroupIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the GroupMembership entity by IDs.
func (gu *GroupUpdate) AddMemberIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddMemberIDs(ids...)
	return gu
}

// AddMembers adds the "members" edges to the GroupMembership entity.
func (gu *GroupUpdate) AddMembers(g ...*GroupMembership) *GroupUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddMemberIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (gu *GroupUpdate) ClearOwner() *GroupUpdate {
	gu.mutation.ClearOwner()
	return gu
}

// ClearSetting clears the "setting" edge to the GroupSetting entity.
func (gu *GroupUpdate) ClearSetting() *GroupUpdate {
	gu.mutation.ClearSetting()
	return gu
}

// ClearUsers clears all "users" edges to the User entity.
func (gu *GroupUpdate) ClearUsers() *GroupUpdate {
	gu.mutation.ClearUsers()
	return gu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (gu *GroupUpdate) RemoveUserIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveUserIDs(ids...)
	return gu
}

// RemoveUsers removes "users" edges to User entities.
func (gu *GroupUpdate) RemoveUsers(u ...*User) *GroupUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveUserIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (gu *GroupUpdate) ClearEvents() *GroupUpdate {
	gu.mutation.ClearEvents()
	return gu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (gu *GroupUpdate) RemoveEventIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveEventIDs(ids...)
	return gu
}

// RemoveEvents removes "events" edges to Event entities.
func (gu *GroupUpdate) RemoveEvents(e ...*Event) *GroupUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gu.RemoveEventIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (gu *GroupUpdate) ClearIntegrations() *GroupUpdate {
	gu.mutation.ClearIntegrations()
	return gu
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (gu *GroupUpdate) RemoveIntegrationIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveIntegrationIDs(ids...)
	return gu
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (gu *GroupUpdate) RemoveIntegrations(i ...*Integration) *GroupUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.RemoveIntegrationIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (gu *GroupUpdate) ClearFiles() *GroupUpdate {
	gu.mutation.ClearFiles()
	return gu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (gu *GroupUpdate) RemoveFileIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveFileIDs(ids...)
	return gu
}

// RemoveFiles removes "files" edges to File entities.
func (gu *GroupUpdate) RemoveFiles(f ...*File) *GroupUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return gu.RemoveFileIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (gu *GroupUpdate) ClearTasks() *GroupUpdate {
	gu.mutation.ClearTasks()
	return gu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (gu *GroupUpdate) RemoveTaskIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveTaskIDs(ids...)
	return gu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (gu *GroupUpdate) RemoveTasks(t ...*Task) *GroupUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.RemoveTaskIDs(ids...)
}

// ClearProcedureEditors clears all "procedure_editors" edges to the Procedure entity.
func (gu *GroupUpdate) ClearProcedureEditors() *GroupUpdate {
	gu.mutation.ClearProcedureEditors()
	return gu
}

// RemoveProcedureEditorIDs removes the "procedure_editors" edge to Procedure entities by IDs.
func (gu *GroupUpdate) RemoveProcedureEditorIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveProcedureEditorIDs(ids...)
	return gu
}

// RemoveProcedureEditors removes "procedure_editors" edges to Procedure entities.
func (gu *GroupUpdate) RemoveProcedureEditors(p ...*Procedure) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemoveProcedureEditorIDs(ids...)
}

// ClearProcedureBlockedGroups clears all "procedure_blocked_groups" edges to the Procedure entity.
func (gu *GroupUpdate) ClearProcedureBlockedGroups() *GroupUpdate {
	gu.mutation.ClearProcedureBlockedGroups()
	return gu
}

// RemoveProcedureBlockedGroupIDs removes the "procedure_blocked_groups" edge to Procedure entities by IDs.
func (gu *GroupUpdate) RemoveProcedureBlockedGroupIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveProcedureBlockedGroupIDs(ids...)
	return gu
}

// RemoveProcedureBlockedGroups removes "procedure_blocked_groups" edges to Procedure entities.
func (gu *GroupUpdate) RemoveProcedureBlockedGroups(p ...*Procedure) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemoveProcedureBlockedGroupIDs(ids...)
}

// ClearInternalpolicyEditors clears all "internalpolicy_editors" edges to the InternalPolicy entity.
func (gu *GroupUpdate) ClearInternalpolicyEditors() *GroupUpdate {
	gu.mutation.ClearInternalpolicyEditors()
	return gu
}

// RemoveInternalpolicyEditorIDs removes the "internalpolicy_editors" edge to InternalPolicy entities by IDs.
func (gu *GroupUpdate) RemoveInternalpolicyEditorIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveInternalpolicyEditorIDs(ids...)
	return gu
}

// RemoveInternalpolicyEditors removes "internalpolicy_editors" edges to InternalPolicy entities.
func (gu *GroupUpdate) RemoveInternalpolicyEditors(i ...*InternalPolicy) *GroupUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.RemoveInternalpolicyEditorIDs(ids...)
}

// ClearInternalpolicyBlockedGroups clears all "internalpolicy_blocked_groups" edges to the InternalPolicy entity.
func (gu *GroupUpdate) ClearInternalpolicyBlockedGroups() *GroupUpdate {
	gu.mutation.ClearInternalpolicyBlockedGroups()
	return gu
}

// RemoveInternalpolicyBlockedGroupIDs removes the "internalpolicy_blocked_groups" edge to InternalPolicy entities by IDs.
func (gu *GroupUpdate) RemoveInternalpolicyBlockedGroupIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveInternalpolicyBlockedGroupIDs(ids...)
	return gu
}

// RemoveInternalpolicyBlockedGroups removes "internalpolicy_blocked_groups" edges to InternalPolicy entities.
func (gu *GroupUpdate) RemoveInternalpolicyBlockedGroups(i ...*InternalPolicy) *GroupUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.RemoveInternalpolicyBlockedGroupIDs(ids...)
}

// ClearProgramViewers clears all "program_viewers" edges to the Program entity.
func (gu *GroupUpdate) ClearProgramViewers() *GroupUpdate {
	gu.mutation.ClearProgramViewers()
	return gu
}

// RemoveProgramViewerIDs removes the "program_viewers" edge to Program entities by IDs.
func (gu *GroupUpdate) RemoveProgramViewerIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveProgramViewerIDs(ids...)
	return gu
}

// RemoveProgramViewers removes "program_viewers" edges to Program entities.
func (gu *GroupUpdate) RemoveProgramViewers(p ...*Program) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemoveProgramViewerIDs(ids...)
}

// ClearProgramEditors clears all "program_editors" edges to the Program entity.
func (gu *GroupUpdate) ClearProgramEditors() *GroupUpdate {
	gu.mutation.ClearProgramEditors()
	return gu
}

// RemoveProgramEditorIDs removes the "program_editors" edge to Program entities by IDs.
func (gu *GroupUpdate) RemoveProgramEditorIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveProgramEditorIDs(ids...)
	return gu
}

// RemoveProgramEditors removes "program_editors" edges to Program entities.
func (gu *GroupUpdate) RemoveProgramEditors(p ...*Program) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemoveProgramEditorIDs(ids...)
}

// ClearProgramBlockedGroups clears all "program_blocked_groups" edges to the Program entity.
func (gu *GroupUpdate) ClearProgramBlockedGroups() *GroupUpdate {
	gu.mutation.ClearProgramBlockedGroups()
	return gu
}

// RemoveProgramBlockedGroupIDs removes the "program_blocked_groups" edge to Program entities by IDs.
func (gu *GroupUpdate) RemoveProgramBlockedGroupIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveProgramBlockedGroupIDs(ids...)
	return gu
}

// RemoveProgramBlockedGroups removes "program_blocked_groups" edges to Program entities.
func (gu *GroupUpdate) RemoveProgramBlockedGroups(p ...*Program) *GroupUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemoveProgramBlockedGroupIDs(ids...)
}

// ClearRiskViewers clears all "risk_viewers" edges to the Risk entity.
func (gu *GroupUpdate) ClearRiskViewers() *GroupUpdate {
	gu.mutation.ClearRiskViewers()
	return gu
}

// RemoveRiskViewerIDs removes the "risk_viewers" edge to Risk entities by IDs.
func (gu *GroupUpdate) RemoveRiskViewerIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveRiskViewerIDs(ids...)
	return gu
}

// RemoveRiskViewers removes "risk_viewers" edges to Risk entities.
func (gu *GroupUpdate) RemoveRiskViewers(r ...*Risk) *GroupUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return gu.RemoveRiskViewerIDs(ids...)
}

// ClearRiskEditors clears all "risk_editors" edges to the Risk entity.
func (gu *GroupUpdate) ClearRiskEditors() *GroupUpdate {
	gu.mutation.ClearRiskEditors()
	return gu
}

// RemoveRiskEditorIDs removes the "risk_editors" edge to Risk entities by IDs.
func (gu *GroupUpdate) RemoveRiskEditorIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveRiskEditorIDs(ids...)
	return gu
}

// RemoveRiskEditors removes "risk_editors" edges to Risk entities.
func (gu *GroupUpdate) RemoveRiskEditors(r ...*Risk) *GroupUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return gu.RemoveRiskEditorIDs(ids...)
}

// ClearRiskBlockedGroups clears all "risk_blocked_groups" edges to the Risk entity.
func (gu *GroupUpdate) ClearRiskBlockedGroups() *GroupUpdate {
	gu.mutation.ClearRiskBlockedGroups()
	return gu
}

// RemoveRiskBlockedGroupIDs removes the "risk_blocked_groups" edge to Risk entities by IDs.
func (gu *GroupUpdate) RemoveRiskBlockedGroupIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveRiskBlockedGroupIDs(ids...)
	return gu
}

// RemoveRiskBlockedGroups removes "risk_blocked_groups" edges to Risk entities.
func (gu *GroupUpdate) RemoveRiskBlockedGroups(r ...*Risk) *GroupUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return gu.RemoveRiskBlockedGroupIDs(ids...)
}

// ClearMembers clears all "members" edges to the GroupMembership entity.
func (gu *GroupUpdate) ClearMembers() *GroupUpdate {
	gu.mutation.ClearMembers()
	return gu
}

// RemoveMemberIDs removes the "members" edge to GroupMembership entities by IDs.
func (gu *GroupUpdate) RemoveMemberIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveMemberIDs(ids...)
	return gu
}

// RemoveMembers removes "members" edges to GroupMembership entities.
func (gu *GroupUpdate) RemoveMembers(g ...*GroupMembership) *GroupUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GroupUpdate) defaults() error {
	if _, ok := gu.mutation.UpdatedAt(); !ok && !gu.mutation.UpdatedAtCleared() {
		if group.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized group.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := group.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if v, ok := gu.mutation.OwnerID(); ok {
		if err := group.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Group.owner_id": %w`, err)}
		}
	}
	if v, ok := gu.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := gu.mutation.DisplayName(); ok {
		if err := group.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Group.display_name": %w`, err)}
		}
	}
	if gu.mutation.SettingCleared() && len(gu.mutation.SettingIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Group.setting"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gu *GroupUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GroupUpdate {
	gu.modifiers = append(gu.modifiers, modifiers...)
	return gu
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gu.mutation.CreatedAtCleared() {
		_spec.ClearField(group.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.UpdatedAtCleared() {
		_spec.ClearField(group.FieldUpdatedAt, field.TypeTime)
	}
	if gu.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := gu.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if gu.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.SetField(group.FieldDeletedAt, field.TypeTime, value)
	}
	if gu.mutation.DeletedAtCleared() {
		_spec.ClearField(group.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.DeletedBy(); ok {
		_spec.SetField(group.FieldDeletedBy, field.TypeString, value)
	}
	if gu.mutation.DeletedByCleared() {
		_spec.ClearField(group.FieldDeletedBy, field.TypeString)
	}
	if value, ok := gu.mutation.Tags(); ok {
		_spec.SetField(group.FieldTags, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldTags, value)
		})
	}
	if gu.mutation.TagsCleared() {
		_spec.ClearField(group.FieldTags, field.TypeJSON)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if value, ok := gu.mutation.GravatarLogoURL(); ok {
		_spec.SetField(group.FieldGravatarLogoURL, field.TypeString, value)
	}
	if gu.mutation.GravatarLogoURLCleared() {
		_spec.ClearField(group.FieldGravatarLogoURL, field.TypeString)
	}
	if value, ok := gu.mutation.LogoURL(); ok {
		_spec.SetField(group.FieldLogoURL, field.TypeString, value)
	}
	if gu.mutation.LogoURLCleared() {
		_spec.ClearField(group.FieldLogoURL, field.TypeString)
	}
	if value, ok := gu.mutation.DisplayName(); ok {
		_spec.SetField(group.FieldDisplayName, field.TypeString, value)
	}
	if gu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupMembership
		createE := &GroupMembershipCreate{config: gu.config, mutation: newGroupMembershipMutation(gu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: gu.config, mutation: newGroupMembershipMutation(gu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: gu.config, mutation: newGroupMembershipMutation(gu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !gu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !gu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !gu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !gu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ProcedureEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProcedureEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedProcedureEditorsIDs(); len(nodes) > 0 && !gu.mutation.ProcedureEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProcedureEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ProcedureBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProcedureBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedProcedureBlockedGroupsIDs(); len(nodes) > 0 && !gu.mutation.ProcedureBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProcedureBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.InternalpolicyEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyEditorsTable,
			Columns: group.InternalpolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.InternalPolicyEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedInternalpolicyEditorsIDs(); len(nodes) > 0 && !gu.mutation.InternalpolicyEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyEditorsTable,
			Columns: group.InternalpolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.InternalpolicyEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyEditorsTable,
			Columns: group.InternalpolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.InternalpolicyBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyBlockedGroupsTable,
			Columns: group.InternalpolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.InternalPolicyBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedInternalpolicyBlockedGroupsIDs(); len(nodes) > 0 && !gu.mutation.InternalpolicyBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyBlockedGroupsTable,
			Columns: group.InternalpolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.InternalpolicyBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyBlockedGroupsTable,
			Columns: group.InternalpolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ProgramViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedProgramViewersIDs(); len(nodes) > 0 && !gu.mutation.ProgramViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProgramViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ProgramEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedProgramEditorsIDs(); len(nodes) > 0 && !gu.mutation.ProgramEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProgramEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ProgramBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedProgramBlockedGroupsIDs(); len(nodes) > 0 && !gu.mutation.ProgramBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProgramBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.RiskViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedRiskViewersIDs(); len(nodes) > 0 && !gu.mutation.RiskViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RiskViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.RiskEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedRiskEditorsIDs(); len(nodes) > 0 && !gu.mutation.RiskEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RiskEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.RiskBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedRiskBlockedGroupsIDs(); len(nodes) > 0 && !gu.mutation.RiskBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RiskBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !gu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = gu.schemaConfig.Group
	ctx = internal.NewSchemaConfigContext(ctx, gu.schemaConfig)
	_spec.AddModifiers(gu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GroupUpdateOne) SetUpdatedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (guo *GroupUpdateOne) ClearUpdatedAt() *GroupUpdateOne {
	guo.mutation.ClearUpdatedAt()
	return guo
}

// SetUpdatedBy sets the "updated_by" field.
func (guo *GroupUpdateOne) SetUpdatedBy(s string) *GroupUpdateOne {
	guo.mutation.SetUpdatedBy(s)
	return guo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableUpdatedBy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetUpdatedBy(*s)
	}
	return guo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (guo *GroupUpdateOne) ClearUpdatedBy() *GroupUpdateOne {
	guo.mutation.ClearUpdatedBy()
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GroupUpdateOne) SetDeletedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetDeletedAt(t)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDeletedAt(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetDeletedAt(*t)
	}
	return guo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guo *GroupUpdateOne) ClearDeletedAt() *GroupUpdateOne {
	guo.mutation.ClearDeletedAt()
	return guo
}

// SetDeletedBy sets the "deleted_by" field.
func (guo *GroupUpdateOne) SetDeletedBy(s string) *GroupUpdateOne {
	guo.mutation.SetDeletedBy(s)
	return guo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDeletedBy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDeletedBy(*s)
	}
	return guo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (guo *GroupUpdateOne) ClearDeletedBy() *GroupUpdateOne {
	guo.mutation.ClearDeletedBy()
	return guo
}

// SetTags sets the "tags" field.
func (guo *GroupUpdateOne) SetTags(s []string) *GroupUpdateOne {
	guo.mutation.SetTags(s)
	return guo
}

// AppendTags appends s to the "tags" field.
func (guo *GroupUpdateOne) AppendTags(s []string) *GroupUpdateOne {
	guo.mutation.AppendTags(s)
	return guo
}

// ClearTags clears the value of the "tags" field.
func (guo *GroupUpdateOne) ClearTags() *GroupUpdateOne {
	guo.mutation.ClearTags()
	return guo
}

// SetOwnerID sets the "owner_id" field.
func (guo *GroupUpdateOne) SetOwnerID(s string) *GroupUpdateOne {
	guo.mutation.SetOwnerID(s)
	return guo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableOwnerID(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetOwnerID(*s)
	}
	return guo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (guo *GroupUpdateOne) ClearOwnerID() *GroupUpdateOne {
	guo.mutation.ClearOwnerID()
	return guo
}

// SetName sets the "name" field.
func (guo *GroupUpdateOne) SetName(s string) *GroupUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetDescription sets the "description" field.
func (guo *GroupUpdateOne) SetDescription(s string) *GroupUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDescription(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// ClearDescription clears the value of the "description" field.
func (guo *GroupUpdateOne) ClearDescription() *GroupUpdateOne {
	guo.mutation.ClearDescription()
	return guo
}

// SetGravatarLogoURL sets the "gravatar_logo_url" field.
func (guo *GroupUpdateOne) SetGravatarLogoURL(s string) *GroupUpdateOne {
	guo.mutation.SetGravatarLogoURL(s)
	return guo
}

// SetNillableGravatarLogoURL sets the "gravatar_logo_url" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableGravatarLogoURL(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetGravatarLogoURL(*s)
	}
	return guo
}

// ClearGravatarLogoURL clears the value of the "gravatar_logo_url" field.
func (guo *GroupUpdateOne) ClearGravatarLogoURL() *GroupUpdateOne {
	guo.mutation.ClearGravatarLogoURL()
	return guo
}

// SetLogoURL sets the "logo_url" field.
func (guo *GroupUpdateOne) SetLogoURL(s string) *GroupUpdateOne {
	guo.mutation.SetLogoURL(s)
	return guo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableLogoURL(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetLogoURL(*s)
	}
	return guo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (guo *GroupUpdateOne) ClearLogoURL() *GroupUpdateOne {
	guo.mutation.ClearLogoURL()
	return guo
}

// SetDisplayName sets the "display_name" field.
func (guo *GroupUpdateOne) SetDisplayName(s string) *GroupUpdateOne {
	guo.mutation.SetDisplayName(s)
	return guo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDisplayName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDisplayName(*s)
	}
	return guo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (guo *GroupUpdateOne) SetOwner(o *Organization) *GroupUpdateOne {
	return guo.SetOwnerID(o.ID)
}

// SetSettingID sets the "setting" edge to the GroupSetting entity by ID.
func (guo *GroupUpdateOne) SetSettingID(id string) *GroupUpdateOne {
	guo.mutation.SetSettingID(id)
	return guo
}

// SetSetting sets the "setting" edge to the GroupSetting entity.
func (guo *GroupUpdateOne) SetSetting(g *GroupSetting) *GroupUpdateOne {
	return guo.SetSettingID(g.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (guo *GroupUpdateOne) AddUserIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddUserIDs(ids...)
	return guo
}

// AddUsers adds the "users" edges to the User entity.
func (guo *GroupUpdateOne) AddUsers(u ...*User) *GroupUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddUserIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (guo *GroupUpdateOne) AddEventIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddEventIDs(ids...)
	return guo
}

// AddEvents adds the "events" edges to the Event entity.
func (guo *GroupUpdateOne) AddEvents(e ...*Event) *GroupUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return guo.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (guo *GroupUpdateOne) AddIntegrationIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddIntegrationIDs(ids...)
	return guo
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (guo *GroupUpdateOne) AddIntegrations(i ...*Integration) *GroupUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.AddIntegrationIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (guo *GroupUpdateOne) AddFileIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddFileIDs(ids...)
	return guo
}

// AddFiles adds the "files" edges to the File entity.
func (guo *GroupUpdateOne) AddFiles(f ...*File) *GroupUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return guo.AddFileIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (guo *GroupUpdateOne) AddTaskIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddTaskIDs(ids...)
	return guo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (guo *GroupUpdateOne) AddTasks(t ...*Task) *GroupUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.AddTaskIDs(ids...)
}

// AddProcedureEditorIDs adds the "procedure_editors" edge to the Procedure entity by IDs.
func (guo *GroupUpdateOne) AddProcedureEditorIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddProcedureEditorIDs(ids...)
	return guo
}

// AddProcedureEditors adds the "procedure_editors" edges to the Procedure entity.
func (guo *GroupUpdateOne) AddProcedureEditors(p ...*Procedure) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddProcedureEditorIDs(ids...)
}

// AddProcedureBlockedGroupIDs adds the "procedure_blocked_groups" edge to the Procedure entity by IDs.
func (guo *GroupUpdateOne) AddProcedureBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddProcedureBlockedGroupIDs(ids...)
	return guo
}

// AddProcedureBlockedGroups adds the "procedure_blocked_groups" edges to the Procedure entity.
func (guo *GroupUpdateOne) AddProcedureBlockedGroups(p ...*Procedure) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddProcedureBlockedGroupIDs(ids...)
}

// AddInternalpolicyEditorIDs adds the "internalpolicy_editors" edge to the InternalPolicy entity by IDs.
func (guo *GroupUpdateOne) AddInternalpolicyEditorIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddInternalpolicyEditorIDs(ids...)
	return guo
}

// AddInternalpolicyEditors adds the "internalpolicy_editors" edges to the InternalPolicy entity.
func (guo *GroupUpdateOne) AddInternalpolicyEditors(i ...*InternalPolicy) *GroupUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.AddInternalpolicyEditorIDs(ids...)
}

// AddInternalpolicyBlockedGroupIDs adds the "internalpolicy_blocked_groups" edge to the InternalPolicy entity by IDs.
func (guo *GroupUpdateOne) AddInternalpolicyBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddInternalpolicyBlockedGroupIDs(ids...)
	return guo
}

// AddInternalpolicyBlockedGroups adds the "internalpolicy_blocked_groups" edges to the InternalPolicy entity.
func (guo *GroupUpdateOne) AddInternalpolicyBlockedGroups(i ...*InternalPolicy) *GroupUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.AddInternalpolicyBlockedGroupIDs(ids...)
}

// AddProgramViewerIDs adds the "program_viewers" edge to the Program entity by IDs.
func (guo *GroupUpdateOne) AddProgramViewerIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddProgramViewerIDs(ids...)
	return guo
}

// AddProgramViewers adds the "program_viewers" edges to the Program entity.
func (guo *GroupUpdateOne) AddProgramViewers(p ...*Program) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddProgramViewerIDs(ids...)
}

// AddProgramEditorIDs adds the "program_editors" edge to the Program entity by IDs.
func (guo *GroupUpdateOne) AddProgramEditorIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddProgramEditorIDs(ids...)
	return guo
}

// AddProgramEditors adds the "program_editors" edges to the Program entity.
func (guo *GroupUpdateOne) AddProgramEditors(p ...*Program) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddProgramEditorIDs(ids...)
}

// AddProgramBlockedGroupIDs adds the "program_blocked_groups" edge to the Program entity by IDs.
func (guo *GroupUpdateOne) AddProgramBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddProgramBlockedGroupIDs(ids...)
	return guo
}

// AddProgramBlockedGroups adds the "program_blocked_groups" edges to the Program entity.
func (guo *GroupUpdateOne) AddProgramBlockedGroups(p ...*Program) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddProgramBlockedGroupIDs(ids...)
}

// AddRiskViewerIDs adds the "risk_viewers" edge to the Risk entity by IDs.
func (guo *GroupUpdateOne) AddRiskViewerIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddRiskViewerIDs(ids...)
	return guo
}

// AddRiskViewers adds the "risk_viewers" edges to the Risk entity.
func (guo *GroupUpdateOne) AddRiskViewers(r ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return guo.AddRiskViewerIDs(ids...)
}

// AddRiskEditorIDs adds the "risk_editors" edge to the Risk entity by IDs.
func (guo *GroupUpdateOne) AddRiskEditorIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddRiskEditorIDs(ids...)
	return guo
}

// AddRiskEditors adds the "risk_editors" edges to the Risk entity.
func (guo *GroupUpdateOne) AddRiskEditors(r ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return guo.AddRiskEditorIDs(ids...)
}

// AddRiskBlockedGroupIDs adds the "risk_blocked_groups" edge to the Risk entity by IDs.
func (guo *GroupUpdateOne) AddRiskBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddRiskBlockedGroupIDs(ids...)
	return guo
}

// AddRiskBlockedGroups adds the "risk_blocked_groups" edges to the Risk entity.
func (guo *GroupUpdateOne) AddRiskBlockedGroups(r ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return guo.AddRiskBlockedGroupIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the GroupMembership entity by IDs.
func (guo *GroupUpdateOne) AddMemberIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddMemberIDs(ids...)
	return guo
}

// AddMembers adds the "members" edges to the GroupMembership entity.
func (guo *GroupUpdateOne) AddMembers(g ...*GroupMembership) *GroupUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddMemberIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (guo *GroupUpdateOne) ClearOwner() *GroupUpdateOne {
	guo.mutation.ClearOwner()
	return guo
}

// ClearSetting clears the "setting" edge to the GroupSetting entity.
func (guo *GroupUpdateOne) ClearSetting() *GroupUpdateOne {
	guo.mutation.ClearSetting()
	return guo
}

// ClearUsers clears all "users" edges to the User entity.
func (guo *GroupUpdateOne) ClearUsers() *GroupUpdateOne {
	guo.mutation.ClearUsers()
	return guo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (guo *GroupUpdateOne) RemoveUserIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveUserIDs(ids...)
	return guo
}

// RemoveUsers removes "users" edges to User entities.
func (guo *GroupUpdateOne) RemoveUsers(u ...*User) *GroupUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveUserIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (guo *GroupUpdateOne) ClearEvents() *GroupUpdateOne {
	guo.mutation.ClearEvents()
	return guo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (guo *GroupUpdateOne) RemoveEventIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveEventIDs(ids...)
	return guo
}

// RemoveEvents removes "events" edges to Event entities.
func (guo *GroupUpdateOne) RemoveEvents(e ...*Event) *GroupUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return guo.RemoveEventIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (guo *GroupUpdateOne) ClearIntegrations() *GroupUpdateOne {
	guo.mutation.ClearIntegrations()
	return guo
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (guo *GroupUpdateOne) RemoveIntegrationIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveIntegrationIDs(ids...)
	return guo
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (guo *GroupUpdateOne) RemoveIntegrations(i ...*Integration) *GroupUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.RemoveIntegrationIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (guo *GroupUpdateOne) ClearFiles() *GroupUpdateOne {
	guo.mutation.ClearFiles()
	return guo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (guo *GroupUpdateOne) RemoveFileIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveFileIDs(ids...)
	return guo
}

// RemoveFiles removes "files" edges to File entities.
func (guo *GroupUpdateOne) RemoveFiles(f ...*File) *GroupUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return guo.RemoveFileIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (guo *GroupUpdateOne) ClearTasks() *GroupUpdateOne {
	guo.mutation.ClearTasks()
	return guo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (guo *GroupUpdateOne) RemoveTaskIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveTaskIDs(ids...)
	return guo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (guo *GroupUpdateOne) RemoveTasks(t ...*Task) *GroupUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.RemoveTaskIDs(ids...)
}

// ClearProcedureEditors clears all "procedure_editors" edges to the Procedure entity.
func (guo *GroupUpdateOne) ClearProcedureEditors() *GroupUpdateOne {
	guo.mutation.ClearProcedureEditors()
	return guo
}

// RemoveProcedureEditorIDs removes the "procedure_editors" edge to Procedure entities by IDs.
func (guo *GroupUpdateOne) RemoveProcedureEditorIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveProcedureEditorIDs(ids...)
	return guo
}

// RemoveProcedureEditors removes "procedure_editors" edges to Procedure entities.
func (guo *GroupUpdateOne) RemoveProcedureEditors(p ...*Procedure) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemoveProcedureEditorIDs(ids...)
}

// ClearProcedureBlockedGroups clears all "procedure_blocked_groups" edges to the Procedure entity.
func (guo *GroupUpdateOne) ClearProcedureBlockedGroups() *GroupUpdateOne {
	guo.mutation.ClearProcedureBlockedGroups()
	return guo
}

// RemoveProcedureBlockedGroupIDs removes the "procedure_blocked_groups" edge to Procedure entities by IDs.
func (guo *GroupUpdateOne) RemoveProcedureBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveProcedureBlockedGroupIDs(ids...)
	return guo
}

// RemoveProcedureBlockedGroups removes "procedure_blocked_groups" edges to Procedure entities.
func (guo *GroupUpdateOne) RemoveProcedureBlockedGroups(p ...*Procedure) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemoveProcedureBlockedGroupIDs(ids...)
}

// ClearInternalpolicyEditors clears all "internalpolicy_editors" edges to the InternalPolicy entity.
func (guo *GroupUpdateOne) ClearInternalpolicyEditors() *GroupUpdateOne {
	guo.mutation.ClearInternalpolicyEditors()
	return guo
}

// RemoveInternalpolicyEditorIDs removes the "internalpolicy_editors" edge to InternalPolicy entities by IDs.
func (guo *GroupUpdateOne) RemoveInternalpolicyEditorIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveInternalpolicyEditorIDs(ids...)
	return guo
}

// RemoveInternalpolicyEditors removes "internalpolicy_editors" edges to InternalPolicy entities.
func (guo *GroupUpdateOne) RemoveInternalpolicyEditors(i ...*InternalPolicy) *GroupUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.RemoveInternalpolicyEditorIDs(ids...)
}

// ClearInternalpolicyBlockedGroups clears all "internalpolicy_blocked_groups" edges to the InternalPolicy entity.
func (guo *GroupUpdateOne) ClearInternalpolicyBlockedGroups() *GroupUpdateOne {
	guo.mutation.ClearInternalpolicyBlockedGroups()
	return guo
}

// RemoveInternalpolicyBlockedGroupIDs removes the "internalpolicy_blocked_groups" edge to InternalPolicy entities by IDs.
func (guo *GroupUpdateOne) RemoveInternalpolicyBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveInternalpolicyBlockedGroupIDs(ids...)
	return guo
}

// RemoveInternalpolicyBlockedGroups removes "internalpolicy_blocked_groups" edges to InternalPolicy entities.
func (guo *GroupUpdateOne) RemoveInternalpolicyBlockedGroups(i ...*InternalPolicy) *GroupUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.RemoveInternalpolicyBlockedGroupIDs(ids...)
}

// ClearProgramViewers clears all "program_viewers" edges to the Program entity.
func (guo *GroupUpdateOne) ClearProgramViewers() *GroupUpdateOne {
	guo.mutation.ClearProgramViewers()
	return guo
}

// RemoveProgramViewerIDs removes the "program_viewers" edge to Program entities by IDs.
func (guo *GroupUpdateOne) RemoveProgramViewerIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveProgramViewerIDs(ids...)
	return guo
}

// RemoveProgramViewers removes "program_viewers" edges to Program entities.
func (guo *GroupUpdateOne) RemoveProgramViewers(p ...*Program) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemoveProgramViewerIDs(ids...)
}

// ClearProgramEditors clears all "program_editors" edges to the Program entity.
func (guo *GroupUpdateOne) ClearProgramEditors() *GroupUpdateOne {
	guo.mutation.ClearProgramEditors()
	return guo
}

// RemoveProgramEditorIDs removes the "program_editors" edge to Program entities by IDs.
func (guo *GroupUpdateOne) RemoveProgramEditorIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveProgramEditorIDs(ids...)
	return guo
}

// RemoveProgramEditors removes "program_editors" edges to Program entities.
func (guo *GroupUpdateOne) RemoveProgramEditors(p ...*Program) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemoveProgramEditorIDs(ids...)
}

// ClearProgramBlockedGroups clears all "program_blocked_groups" edges to the Program entity.
func (guo *GroupUpdateOne) ClearProgramBlockedGroups() *GroupUpdateOne {
	guo.mutation.ClearProgramBlockedGroups()
	return guo
}

// RemoveProgramBlockedGroupIDs removes the "program_blocked_groups" edge to Program entities by IDs.
func (guo *GroupUpdateOne) RemoveProgramBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveProgramBlockedGroupIDs(ids...)
	return guo
}

// RemoveProgramBlockedGroups removes "program_blocked_groups" edges to Program entities.
func (guo *GroupUpdateOne) RemoveProgramBlockedGroups(p ...*Program) *GroupUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemoveProgramBlockedGroupIDs(ids...)
}

// ClearRiskViewers clears all "risk_viewers" edges to the Risk entity.
func (guo *GroupUpdateOne) ClearRiskViewers() *GroupUpdateOne {
	guo.mutation.ClearRiskViewers()
	return guo
}

// RemoveRiskViewerIDs removes the "risk_viewers" edge to Risk entities by IDs.
func (guo *GroupUpdateOne) RemoveRiskViewerIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveRiskViewerIDs(ids...)
	return guo
}

// RemoveRiskViewers removes "risk_viewers" edges to Risk entities.
func (guo *GroupUpdateOne) RemoveRiskViewers(r ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return guo.RemoveRiskViewerIDs(ids...)
}

// ClearRiskEditors clears all "risk_editors" edges to the Risk entity.
func (guo *GroupUpdateOne) ClearRiskEditors() *GroupUpdateOne {
	guo.mutation.ClearRiskEditors()
	return guo
}

// RemoveRiskEditorIDs removes the "risk_editors" edge to Risk entities by IDs.
func (guo *GroupUpdateOne) RemoveRiskEditorIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveRiskEditorIDs(ids...)
	return guo
}

// RemoveRiskEditors removes "risk_editors" edges to Risk entities.
func (guo *GroupUpdateOne) RemoveRiskEditors(r ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return guo.RemoveRiskEditorIDs(ids...)
}

// ClearRiskBlockedGroups clears all "risk_blocked_groups" edges to the Risk entity.
func (guo *GroupUpdateOne) ClearRiskBlockedGroups() *GroupUpdateOne {
	guo.mutation.ClearRiskBlockedGroups()
	return guo
}

// RemoveRiskBlockedGroupIDs removes the "risk_blocked_groups" edge to Risk entities by IDs.
func (guo *GroupUpdateOne) RemoveRiskBlockedGroupIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveRiskBlockedGroupIDs(ids...)
	return guo
}

// RemoveRiskBlockedGroups removes "risk_blocked_groups" edges to Risk entities.
func (guo *GroupUpdateOne) RemoveRiskBlockedGroups(r ...*Risk) *GroupUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return guo.RemoveRiskBlockedGroupIDs(ids...)
}

// ClearMembers clears all "members" edges to the GroupMembership entity.
func (guo *GroupUpdateOne) ClearMembers() *GroupUpdateOne {
	guo.mutation.ClearMembers()
	return guo
}

// RemoveMemberIDs removes the "members" edge to GroupMembership entities by IDs.
func (guo *GroupUpdateOne) RemoveMemberIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveMemberIDs(ids...)
	return guo
}

// RemoveMembers removes "members" edges to GroupMembership entities.
func (guo *GroupUpdateOne) RemoveMembers(g ...*GroupMembership) *GroupUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GroupUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdatedAt(); !ok && !guo.mutation.UpdatedAtCleared() {
		if group.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized group.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := group.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if v, ok := guo.mutation.OwnerID(); ok {
		if err := group.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Group.owner_id": %w`, err)}
		}
	}
	if v, ok := guo.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := guo.mutation.DisplayName(); ok {
		if err := group.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Group.display_name": %w`, err)}
		}
	}
	if guo.mutation.SettingCleared() && len(guo.mutation.SettingIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Group.setting"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (guo *GroupUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GroupUpdateOne {
	guo.modifiers = append(guo.modifiers, modifiers...)
	return guo
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if guo.mutation.CreatedAtCleared() {
		_spec.ClearField(group.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.UpdatedAtCleared() {
		_spec.ClearField(group.FieldUpdatedAt, field.TypeTime)
	}
	if guo.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := guo.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if guo.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.SetField(group.FieldDeletedAt, field.TypeTime, value)
	}
	if guo.mutation.DeletedAtCleared() {
		_spec.ClearField(group.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.DeletedBy(); ok {
		_spec.SetField(group.FieldDeletedBy, field.TypeString, value)
	}
	if guo.mutation.DeletedByCleared() {
		_spec.ClearField(group.FieldDeletedBy, field.TypeString)
	}
	if value, ok := guo.mutation.Tags(); ok {
		_spec.SetField(group.FieldTags, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldTags, value)
		})
	}
	if guo.mutation.TagsCleared() {
		_spec.ClearField(group.FieldTags, field.TypeJSON)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if value, ok := guo.mutation.GravatarLogoURL(); ok {
		_spec.SetField(group.FieldGravatarLogoURL, field.TypeString, value)
	}
	if guo.mutation.GravatarLogoURLCleared() {
		_spec.ClearField(group.FieldGravatarLogoURL, field.TypeString)
	}
	if value, ok := guo.mutation.LogoURL(); ok {
		_spec.SetField(group.FieldLogoURL, field.TypeString, value)
	}
	if guo.mutation.LogoURLCleared() {
		_spec.ClearField(group.FieldLogoURL, field.TypeString)
	}
	if value, ok := guo.mutation.DisplayName(); ok {
		_spec.SetField(group.FieldDisplayName, field.TypeString, value)
	}
	if guo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupMembership
		createE := &GroupMembershipCreate{config: guo.config, mutation: newGroupMembershipMutation(guo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: guo.config, mutation: newGroupMembershipMutation(guo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: guo.config, mutation: newGroupMembershipMutation(guo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !guo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !guo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !guo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !guo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ProcedureEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProcedureEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedProcedureEditorsIDs(); len(nodes) > 0 && !guo.mutation.ProcedureEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProcedureEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ProcedureBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProcedureBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedProcedureBlockedGroupsIDs(); len(nodes) > 0 && !guo.mutation.ProcedureBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProcedureBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.InternalpolicyEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyEditorsTable,
			Columns: group.InternalpolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.InternalPolicyEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedInternalpolicyEditorsIDs(); len(nodes) > 0 && !guo.mutation.InternalpolicyEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyEditorsTable,
			Columns: group.InternalpolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.InternalpolicyEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyEditorsTable,
			Columns: group.InternalpolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.InternalpolicyBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyBlockedGroupsTable,
			Columns: group.InternalpolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.InternalPolicyBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedInternalpolicyBlockedGroupsIDs(); len(nodes) > 0 && !guo.mutation.InternalpolicyBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyBlockedGroupsTable,
			Columns: group.InternalpolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.InternalpolicyBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalpolicyBlockedGroupsTable,
			Columns: group.InternalpolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ProgramViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedProgramViewersIDs(); len(nodes) > 0 && !guo.mutation.ProgramViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProgramViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ProgramEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedProgramEditorsIDs(); len(nodes) > 0 && !guo.mutation.ProgramEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProgramEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ProgramBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedProgramBlockedGroupsIDs(); len(nodes) > 0 && !guo.mutation.ProgramBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProgramBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.RiskViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedRiskViewersIDs(); len(nodes) > 0 && !guo.mutation.RiskViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RiskViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.RiskEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedRiskEditorsIDs(); len(nodes) > 0 && !guo.mutation.RiskEditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RiskEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.RiskBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedRiskBlockedGroupsIDs(); len(nodes) > 0 && !guo.mutation.RiskBlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RiskBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !guo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = guo.schemaConfig.Group
	ctx = internal.NewSchemaConfigContext(ctx, guo.schemaConfig)
	_spec.AddModifiers(guo.modifiers...)
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
