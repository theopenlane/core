// Code generated by ent, DO NOT EDIT.

package internalpolicy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedByID applies equality check predicate on the "created_by_id" field. It's identical to CreatedByIDEQ.
func CreatedByID(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldCreatedByID, v))
}

// UpdatedByID applies equality check predicate on the "updated_by_id" field. It's identical to UpdatedByIDEQ.
func UpdatedByID(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldUpdatedByID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedByID applies equality check predicate on the "deleted_by_id" field. It's identical to DeletedByIDEQ.
func DeletedByID(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldDeletedByID, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldMappingID, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldOwnerID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldStatus, v))
}

// PolicyType applies equality check predicate on the "policy_type" field. It's identical to PolicyTypeEQ.
func PolicyType(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldPolicyType, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldVersion, v))
}

// PurposeAndScope applies equality check predicate on the "purpose_and_scope" field. It's identical to PurposeAndScopeEQ.
func PurposeAndScope(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldPurposeAndScope, v))
}

// Background applies equality check predicate on the "background" field. It's identical to BackgroundEQ.
func Background(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldBackground, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByIDEQ applies the EQ predicate on the "created_by_id" field.
func CreatedByIDEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldCreatedByID, v))
}

// CreatedByIDNEQ applies the NEQ predicate on the "created_by_id" field.
func CreatedByIDNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldCreatedByID, v))
}

// CreatedByIDIn applies the In predicate on the "created_by_id" field.
func CreatedByIDIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldCreatedByID, vs...))
}

// CreatedByIDNotIn applies the NotIn predicate on the "created_by_id" field.
func CreatedByIDNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldCreatedByID, vs...))
}

// CreatedByIDGT applies the GT predicate on the "created_by_id" field.
func CreatedByIDGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldCreatedByID, v))
}

// CreatedByIDGTE applies the GTE predicate on the "created_by_id" field.
func CreatedByIDGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldCreatedByID, v))
}

// CreatedByIDLT applies the LT predicate on the "created_by_id" field.
func CreatedByIDLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldCreatedByID, v))
}

// CreatedByIDLTE applies the LTE predicate on the "created_by_id" field.
func CreatedByIDLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldCreatedByID, v))
}

// CreatedByIDContains applies the Contains predicate on the "created_by_id" field.
func CreatedByIDContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldCreatedByID, v))
}

// CreatedByIDHasPrefix applies the HasPrefix predicate on the "created_by_id" field.
func CreatedByIDHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldCreatedByID, v))
}

// CreatedByIDHasSuffix applies the HasSuffix predicate on the "created_by_id" field.
func CreatedByIDHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldCreatedByID, v))
}

// CreatedByIDIsNil applies the IsNil predicate on the "created_by_id" field.
func CreatedByIDIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldCreatedByID))
}

// CreatedByIDNotNil applies the NotNil predicate on the "created_by_id" field.
func CreatedByIDNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldCreatedByID))
}

// CreatedByIDEqualFold applies the EqualFold predicate on the "created_by_id" field.
func CreatedByIDEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldCreatedByID, v))
}

// CreatedByIDContainsFold applies the ContainsFold predicate on the "created_by_id" field.
func CreatedByIDContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldCreatedByID, v))
}

// UpdatedByIDEQ applies the EQ predicate on the "updated_by_id" field.
func UpdatedByIDEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldUpdatedByID, v))
}

// UpdatedByIDNEQ applies the NEQ predicate on the "updated_by_id" field.
func UpdatedByIDNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldUpdatedByID, v))
}

// UpdatedByIDIn applies the In predicate on the "updated_by_id" field.
func UpdatedByIDIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDNotIn applies the NotIn predicate on the "updated_by_id" field.
func UpdatedByIDNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDGT applies the GT predicate on the "updated_by_id" field.
func UpdatedByIDGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldUpdatedByID, v))
}

// UpdatedByIDGTE applies the GTE predicate on the "updated_by_id" field.
func UpdatedByIDGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldUpdatedByID, v))
}

// UpdatedByIDLT applies the LT predicate on the "updated_by_id" field.
func UpdatedByIDLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldUpdatedByID, v))
}

// UpdatedByIDLTE applies the LTE predicate on the "updated_by_id" field.
func UpdatedByIDLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldUpdatedByID, v))
}

// UpdatedByIDContains applies the Contains predicate on the "updated_by_id" field.
func UpdatedByIDContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldUpdatedByID, v))
}

// UpdatedByIDHasPrefix applies the HasPrefix predicate on the "updated_by_id" field.
func UpdatedByIDHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldUpdatedByID, v))
}

// UpdatedByIDHasSuffix applies the HasSuffix predicate on the "updated_by_id" field.
func UpdatedByIDHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldUpdatedByID, v))
}

// UpdatedByIDIsNil applies the IsNil predicate on the "updated_by_id" field.
func UpdatedByIDIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldUpdatedByID))
}

// UpdatedByIDNotNil applies the NotNil predicate on the "updated_by_id" field.
func UpdatedByIDNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldUpdatedByID))
}

// UpdatedByIDEqualFold applies the EqualFold predicate on the "updated_by_id" field.
func UpdatedByIDEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldUpdatedByID, v))
}

// UpdatedByIDContainsFold applies the ContainsFold predicate on the "updated_by_id" field.
func UpdatedByIDContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldUpdatedByID, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByIDEQ applies the EQ predicate on the "deleted_by_id" field.
func DeletedByIDEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldDeletedByID, v))
}

// DeletedByIDNEQ applies the NEQ predicate on the "deleted_by_id" field.
func DeletedByIDNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldDeletedByID, v))
}

// DeletedByIDIn applies the In predicate on the "deleted_by_id" field.
func DeletedByIDIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldDeletedByID, vs...))
}

// DeletedByIDNotIn applies the NotIn predicate on the "deleted_by_id" field.
func DeletedByIDNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldDeletedByID, vs...))
}

// DeletedByIDGT applies the GT predicate on the "deleted_by_id" field.
func DeletedByIDGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldDeletedByID, v))
}

// DeletedByIDGTE applies the GTE predicate on the "deleted_by_id" field.
func DeletedByIDGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldDeletedByID, v))
}

// DeletedByIDLT applies the LT predicate on the "deleted_by_id" field.
func DeletedByIDLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldDeletedByID, v))
}

// DeletedByIDLTE applies the LTE predicate on the "deleted_by_id" field.
func DeletedByIDLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldDeletedByID, v))
}

// DeletedByIDContains applies the Contains predicate on the "deleted_by_id" field.
func DeletedByIDContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldDeletedByID, v))
}

// DeletedByIDHasPrefix applies the HasPrefix predicate on the "deleted_by_id" field.
func DeletedByIDHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldDeletedByID, v))
}

// DeletedByIDHasSuffix applies the HasSuffix predicate on the "deleted_by_id" field.
func DeletedByIDHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldDeletedByID, v))
}

// DeletedByIDIsNil applies the IsNil predicate on the "deleted_by_id" field.
func DeletedByIDIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldDeletedByID))
}

// DeletedByIDNotNil applies the NotNil predicate on the "deleted_by_id" field.
func DeletedByIDNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldDeletedByID))
}

// DeletedByIDEqualFold applies the EqualFold predicate on the "deleted_by_id" field.
func DeletedByIDEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldDeletedByID, v))
}

// DeletedByIDContainsFold applies the ContainsFold predicate on the "deleted_by_id" field.
func DeletedByIDContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldDeletedByID, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldOwnerID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldStatus, v))
}

// PolicyTypeEQ applies the EQ predicate on the "policy_type" field.
func PolicyTypeEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldPolicyType, v))
}

// PolicyTypeNEQ applies the NEQ predicate on the "policy_type" field.
func PolicyTypeNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldPolicyType, v))
}

// PolicyTypeIn applies the In predicate on the "policy_type" field.
func PolicyTypeIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldPolicyType, vs...))
}

// PolicyTypeNotIn applies the NotIn predicate on the "policy_type" field.
func PolicyTypeNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldPolicyType, vs...))
}

// PolicyTypeGT applies the GT predicate on the "policy_type" field.
func PolicyTypeGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldPolicyType, v))
}

// PolicyTypeGTE applies the GTE predicate on the "policy_type" field.
func PolicyTypeGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldPolicyType, v))
}

// PolicyTypeLT applies the LT predicate on the "policy_type" field.
func PolicyTypeLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldPolicyType, v))
}

// PolicyTypeLTE applies the LTE predicate on the "policy_type" field.
func PolicyTypeLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldPolicyType, v))
}

// PolicyTypeContains applies the Contains predicate on the "policy_type" field.
func PolicyTypeContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldPolicyType, v))
}

// PolicyTypeHasPrefix applies the HasPrefix predicate on the "policy_type" field.
func PolicyTypeHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldPolicyType, v))
}

// PolicyTypeHasSuffix applies the HasSuffix predicate on the "policy_type" field.
func PolicyTypeHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldPolicyType, v))
}

// PolicyTypeIsNil applies the IsNil predicate on the "policy_type" field.
func PolicyTypeIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldPolicyType))
}

// PolicyTypeNotNil applies the NotNil predicate on the "policy_type" field.
func PolicyTypeNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldPolicyType))
}

// PolicyTypeEqualFold applies the EqualFold predicate on the "policy_type" field.
func PolicyTypeEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldPolicyType, v))
}

// PolicyTypeContainsFold applies the ContainsFold predicate on the "policy_type" field.
func PolicyTypeContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldPolicyType, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldVersion, v))
}

// PurposeAndScopeEQ applies the EQ predicate on the "purpose_and_scope" field.
func PurposeAndScopeEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldPurposeAndScope, v))
}

// PurposeAndScopeNEQ applies the NEQ predicate on the "purpose_and_scope" field.
func PurposeAndScopeNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldPurposeAndScope, v))
}

// PurposeAndScopeIn applies the In predicate on the "purpose_and_scope" field.
func PurposeAndScopeIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldPurposeAndScope, vs...))
}

// PurposeAndScopeNotIn applies the NotIn predicate on the "purpose_and_scope" field.
func PurposeAndScopeNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldPurposeAndScope, vs...))
}

// PurposeAndScopeGT applies the GT predicate on the "purpose_and_scope" field.
func PurposeAndScopeGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldPurposeAndScope, v))
}

// PurposeAndScopeGTE applies the GTE predicate on the "purpose_and_scope" field.
func PurposeAndScopeGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldPurposeAndScope, v))
}

// PurposeAndScopeLT applies the LT predicate on the "purpose_and_scope" field.
func PurposeAndScopeLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldPurposeAndScope, v))
}

// PurposeAndScopeLTE applies the LTE predicate on the "purpose_and_scope" field.
func PurposeAndScopeLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldPurposeAndScope, v))
}

// PurposeAndScopeContains applies the Contains predicate on the "purpose_and_scope" field.
func PurposeAndScopeContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldPurposeAndScope, v))
}

// PurposeAndScopeHasPrefix applies the HasPrefix predicate on the "purpose_and_scope" field.
func PurposeAndScopeHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldPurposeAndScope, v))
}

// PurposeAndScopeHasSuffix applies the HasSuffix predicate on the "purpose_and_scope" field.
func PurposeAndScopeHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldPurposeAndScope, v))
}

// PurposeAndScopeIsNil applies the IsNil predicate on the "purpose_and_scope" field.
func PurposeAndScopeIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldPurposeAndScope))
}

// PurposeAndScopeNotNil applies the NotNil predicate on the "purpose_and_scope" field.
func PurposeAndScopeNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldPurposeAndScope))
}

// PurposeAndScopeEqualFold applies the EqualFold predicate on the "purpose_and_scope" field.
func PurposeAndScopeEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldPurposeAndScope, v))
}

// PurposeAndScopeContainsFold applies the ContainsFold predicate on the "purpose_and_scope" field.
func PurposeAndScopeContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldPurposeAndScope, v))
}

// BackgroundEQ applies the EQ predicate on the "background" field.
func BackgroundEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEQ(FieldBackground, v))
}

// BackgroundNEQ applies the NEQ predicate on the "background" field.
func BackgroundNEQ(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNEQ(FieldBackground, v))
}

// BackgroundIn applies the In predicate on the "background" field.
func BackgroundIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIn(FieldBackground, vs...))
}

// BackgroundNotIn applies the NotIn predicate on the "background" field.
func BackgroundNotIn(vs ...string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotIn(FieldBackground, vs...))
}

// BackgroundGT applies the GT predicate on the "background" field.
func BackgroundGT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGT(FieldBackground, v))
}

// BackgroundGTE applies the GTE predicate on the "background" field.
func BackgroundGTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldGTE(FieldBackground, v))
}

// BackgroundLT applies the LT predicate on the "background" field.
func BackgroundLT(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLT(FieldBackground, v))
}

// BackgroundLTE applies the LTE predicate on the "background" field.
func BackgroundLTE(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldLTE(FieldBackground, v))
}

// BackgroundContains applies the Contains predicate on the "background" field.
func BackgroundContains(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContains(FieldBackground, v))
}

// BackgroundHasPrefix applies the HasPrefix predicate on the "background" field.
func BackgroundHasPrefix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasPrefix(FieldBackground, v))
}

// BackgroundHasSuffix applies the HasSuffix predicate on the "background" field.
func BackgroundHasSuffix(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldHasSuffix(FieldBackground, v))
}

// BackgroundIsNil applies the IsNil predicate on the "background" field.
func BackgroundIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldBackground))
}

// BackgroundNotNil applies the NotNil predicate on the "background" field.
func BackgroundNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldBackground))
}

// BackgroundEqualFold applies the EqualFold predicate on the "background" field.
func BackgroundEqualFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldEqualFold(FieldBackground, v))
}

// BackgroundContainsFold applies the ContainsFold predicate on the "background" field.
func BackgroundContainsFold(v string) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldContainsFold(FieldBackground, v))
}

// DetailsIsNil applies the IsNil predicate on the "details" field.
func DetailsIsNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldIsNull(FieldDetails))
}

// DetailsNotNil applies the NotNil predicate on the "details" field.
func DetailsNotNil() predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.FieldNotNull(FieldDetails))
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ChangeActor
		step.Edge.Schema = schemaConfig.InternalPolicy
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.ChangeActor) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newCreatedByStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ChangeActor
		step.Edge.Schema = schemaConfig.InternalPolicy
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedBy applies the HasEdge predicate on the "updated_by" edge.
func HasUpdatedBy() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByTable, UpdatedByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ChangeActor
		step.Edge.Schema = schemaConfig.InternalPolicy
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedByWith applies the HasEdge predicate on the "updated_by" edge with a given conditions (other predicates).
func HasUpdatedByWith(preds ...predicate.ChangeActor) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newUpdatedByStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ChangeActor
		step.Edge.Schema = schemaConfig.InternalPolicy
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.InternalPolicy
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.InternalPolicy
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockedGroups applies the HasEdge predicate on the "blocked_groups" edge.
func HasBlockedGroups() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, BlockedGroupsTable, BlockedGroupsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.InternalPolicyBlockedGroups
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockedGroupsWith applies the HasEdge predicate on the "blocked_groups" edge with a given conditions (other predicates).
func HasBlockedGroupsWith(preds ...predicate.Group) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newBlockedGroupsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.InternalPolicyBlockedGroups
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEditors applies the HasEdge predicate on the "editors" edge.
func HasEditors() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EditorsTable, EditorsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.InternalPolicyEditors
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEditorsWith applies the HasEdge predicate on the "editors" edge with a given conditions (other predicates).
func HasEditorsWith(preds ...predicate.Group) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newEditorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.InternalPolicyEditors
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControlObjectives applies the HasEdge predicate on the "control_objectives" edge.
func HasControlObjectives() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ControlObjectivesTable, ControlObjectivesPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.InternalPolicyControlObjectives
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlObjectivesWith applies the HasEdge predicate on the "control_objectives" edge with a given conditions (other predicates).
func HasControlObjectivesWith(preds ...predicate.ControlObjective) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newControlObjectivesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.InternalPolicyControlObjectives
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControls applies the HasEdge predicate on the "controls" edge.
func HasControls() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ControlsTable, ControlsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.Control
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlsWith applies the HasEdge predicate on the "controls" edge with a given conditions (other predicates).
func HasControlsWith(preds ...predicate.Control) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newControlsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.Control
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProcedures applies the HasEdge predicate on the "procedures" edge.
func HasProcedures() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProceduresTable, ProceduresPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.InternalPolicyProcedures
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProceduresWith applies the HasEdge predicate on the "procedures" edge with a given conditions (other predicates).
func HasProceduresWith(preds ...predicate.Procedure) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newProceduresStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.InternalPolicyProcedures
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNarratives applies the HasEdge predicate on the "narratives" edge.
func HasNarratives() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NarrativesTable, NarrativesPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.InternalPolicyNarratives
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNarrativesWith applies the HasEdge predicate on the "narratives" edge with a given conditions (other predicates).
func HasNarrativesWith(preds ...predicate.Narrative) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newNarrativesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.InternalPolicyNarratives
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.InternalPolicyTasks
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newTasksStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.InternalPolicyTasks
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrograms applies the HasEdge predicate on the "programs" edge.
func HasPrograms() predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProgramsTable, ProgramsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramInternalPolicies
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramsWith applies the HasEdge predicate on the "programs" edge with a given conditions (other predicates).
func HasProgramsWith(preds ...predicate.Program) predicate.InternalPolicy {
	return predicate.InternalPolicy(func(s *sql.Selector) {
		step := newProgramsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramInternalPolicies
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InternalPolicy) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InternalPolicy) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InternalPolicy) predicate.InternalPolicy {
	return predicate.InternalPolicy(sql.NotPredicates(p))
}
