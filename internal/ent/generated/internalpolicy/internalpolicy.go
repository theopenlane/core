// Code generated by ent, DO NOT EDIT.

package internalpolicy

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the internalpolicy type in the database.
	Label = "internal_policy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPolicyType holds the string denoting the policy_type field in the database.
	FieldPolicyType = "policy_type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldPurposeAndScope holds the string denoting the purpose_and_scope field in the database.
	FieldPurposeAndScope = "purpose_and_scope"
	// FieldBackground holds the string denoting the background field in the database.
	FieldBackground = "background"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// EdgeControlobjectives holds the string denoting the controlobjectives edge name in mutations.
	EdgeControlobjectives = "controlobjectives"
	// EdgeControls holds the string denoting the controls edge name in mutations.
	EdgeControls = "controls"
	// EdgeProcedures holds the string denoting the procedures edge name in mutations.
	EdgeProcedures = "procedures"
	// EdgeNarratives holds the string denoting the narratives edge name in mutations.
	EdgeNarratives = "narratives"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgePrograms holds the string denoting the programs edge name in mutations.
	EdgePrograms = "programs"
	// Table holds the table name of the internalpolicy in the database.
	Table = "internal_policies"
	// ControlobjectivesTable is the table that holds the controlobjectives relation/edge. The primary key declared below.
	ControlobjectivesTable = "internal_policy_controlobjectives"
	// ControlobjectivesInverseTable is the table name for the ControlObjective entity.
	// It exists in this package in order to avoid circular dependency with the "controlobjective" package.
	ControlobjectivesInverseTable = "control_objectives"
	// ControlsTable is the table that holds the controls relation/edge.
	ControlsTable = "controls"
	// ControlsInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlsInverseTable = "controls"
	// ControlsColumn is the table column denoting the controls relation/edge.
	ControlsColumn = "internal_policy_controls"
	// ProceduresTable is the table that holds the procedures relation/edge. The primary key declared below.
	ProceduresTable = "internal_policy_procedures"
	// ProceduresInverseTable is the table name for the Procedure entity.
	// It exists in this package in order to avoid circular dependency with the "procedure" package.
	ProceduresInverseTable = "procedures"
	// NarrativesTable is the table that holds the narratives relation/edge. The primary key declared below.
	NarrativesTable = "internal_policy_narratives"
	// NarrativesInverseTable is the table name for the Narrative entity.
	// It exists in this package in order to avoid circular dependency with the "narrative" package.
	NarrativesInverseTable = "narratives"
	// TasksTable is the table that holds the tasks relation/edge. The primary key declared below.
	TasksTable = "internal_policy_tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// ProgramsTable is the table that holds the programs relation/edge. The primary key declared below.
	ProgramsTable = "program_policies"
	// ProgramsInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramsInverseTable = "programs"
)

// Columns holds all SQL columns for internalpolicy fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldMappingID,
	FieldTags,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldPolicyType,
	FieldVersion,
	FieldPurposeAndScope,
	FieldBackground,
	FieldDetails,
}

var (
	// ControlobjectivesPrimaryKey and ControlobjectivesColumn2 are the table columns denoting the
	// primary key for the controlobjectives relation (M2M).
	ControlobjectivesPrimaryKey = []string{"internal_policy_id", "control_objective_id"}
	// ProceduresPrimaryKey and ProceduresColumn2 are the table columns denoting the
	// primary key for the procedures relation (M2M).
	ProceduresPrimaryKey = []string{"internal_policy_id", "procedure_id"}
	// NarrativesPrimaryKey and NarrativesColumn2 are the table columns denoting the
	// primary key for the narratives relation (M2M).
	NarrativesPrimaryKey = []string{"internal_policy_id", "narrative_id"}
	// TasksPrimaryKey and TasksColumn2 are the table columns denoting the
	// primary key for the tasks relation (M2M).
	TasksPrimaryKey = []string{"internal_policy_id", "task_id"}
	// ProgramsPrimaryKey and ProgramsColumn2 are the table columns denoting the
	// primary key for the programs relation (M2M).
	ProgramsPrimaryKey = []string{"program_id", "internal_policy_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the InternalPolicy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPolicyType orders the results by the policy_type field.
func ByPolicyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPolicyType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByPurposeAndScope orders the results by the purpose_and_scope field.
func ByPurposeAndScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPurposeAndScope, opts...).ToFunc()
}

// ByBackground orders the results by the background field.
func ByBackground(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackground, opts...).ToFunc()
}

// ByControlobjectivesCount orders the results by controlobjectives count.
func ByControlobjectivesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlobjectivesStep(), opts...)
	}
}

// ByControlobjectives orders the results by controlobjectives terms.
func ByControlobjectives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlobjectivesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlsCount orders the results by controls count.
func ByControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlsStep(), opts...)
	}
}

// ByControls orders the results by controls terms.
func ByControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProceduresCount orders the results by procedures count.
func ByProceduresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProceduresStep(), opts...)
	}
}

// ByProcedures orders the results by procedures terms.
func ByProcedures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProceduresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarrativesCount orders the results by narratives count.
func ByNarrativesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarrativesStep(), opts...)
	}
}

// ByNarratives orders the results by narratives terms.
func ByNarratives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarrativesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramsCount orders the results by programs count.
func ByProgramsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramsStep(), opts...)
	}
}

// ByPrograms orders the results by programs terms.
func ByPrograms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newControlobjectivesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlobjectivesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ControlobjectivesTable, ControlobjectivesPrimaryKey...),
	)
}
func newControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControlsTable, ControlsColumn),
	)
}
func newProceduresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProceduresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProceduresTable, ProceduresPrimaryKey...),
	)
}
func newNarrativesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarrativesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NarrativesTable, NarrativesPrimaryKey...),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
	)
}
func newProgramsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramsTable, ProgramsPrimaryKey...),
	)
}
