// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgPriceUpdate is the builder for updating OrgPrice entities.
type OrgPriceUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgPriceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgPriceUpdate builder.
func (opu *OrgPriceUpdate) Where(ps ...predicate.OrgPrice) *OrgPriceUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetUpdatedAt sets the "updated_at" field.
func (opu *OrgPriceUpdate) SetUpdatedAt(t time.Time) *OrgPriceUpdate {
	opu.mutation.SetUpdatedAt(t)
	return opu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (opu *OrgPriceUpdate) ClearUpdatedAt() *OrgPriceUpdate {
	opu.mutation.ClearUpdatedAt()
	return opu
}

// SetUpdatedBy sets the "updated_by" field.
func (opu *OrgPriceUpdate) SetUpdatedBy(s string) *OrgPriceUpdate {
	opu.mutation.SetUpdatedBy(s)
	return opu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableUpdatedBy(s *string) *OrgPriceUpdate {
	if s != nil {
		opu.SetUpdatedBy(*s)
	}
	return opu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (opu *OrgPriceUpdate) ClearUpdatedBy() *OrgPriceUpdate {
	opu.mutation.ClearUpdatedBy()
	return opu
}

// SetDeletedAt sets the "deleted_at" field.
func (opu *OrgPriceUpdate) SetDeletedAt(t time.Time) *OrgPriceUpdate {
	opu.mutation.SetDeletedAt(t)
	return opu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableDeletedAt(t *time.Time) *OrgPriceUpdate {
	if t != nil {
		opu.SetDeletedAt(*t)
	}
	return opu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (opu *OrgPriceUpdate) ClearDeletedAt() *OrgPriceUpdate {
	opu.mutation.ClearDeletedAt()
	return opu
}

// SetDeletedBy sets the "deleted_by" field.
func (opu *OrgPriceUpdate) SetDeletedBy(s string) *OrgPriceUpdate {
	opu.mutation.SetDeletedBy(s)
	return opu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableDeletedBy(s *string) *OrgPriceUpdate {
	if s != nil {
		opu.SetDeletedBy(*s)
	}
	return opu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (opu *OrgPriceUpdate) ClearDeletedBy() *OrgPriceUpdate {
	opu.mutation.ClearDeletedBy()
	return opu
}

// SetTags sets the "tags" field.
func (opu *OrgPriceUpdate) SetTags(s []string) *OrgPriceUpdate {
	opu.mutation.SetTags(s)
	return opu
}

// AppendTags appends s to the "tags" field.
func (opu *OrgPriceUpdate) AppendTags(s []string) *OrgPriceUpdate {
	opu.mutation.AppendTags(s)
	return opu
}

// ClearTags clears the value of the "tags" field.
func (opu *OrgPriceUpdate) ClearTags() *OrgPriceUpdate {
	opu.mutation.ClearTags()
	return opu
}

// SetOwnerID sets the "owner_id" field.
func (opu *OrgPriceUpdate) SetOwnerID(s string) *OrgPriceUpdate {
	opu.mutation.SetOwnerID(s)
	return opu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableOwnerID(s *string) *OrgPriceUpdate {
	if s != nil {
		opu.SetOwnerID(*s)
	}
	return opu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (opu *OrgPriceUpdate) ClearOwnerID() *OrgPriceUpdate {
	opu.mutation.ClearOwnerID()
	return opu
}

// SetPrice sets the "price" field.
func (opu *OrgPriceUpdate) SetPrice(m models.Price) *OrgPriceUpdate {
	opu.mutation.SetPrice(m)
	return opu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillablePrice(m *models.Price) *OrgPriceUpdate {
	if m != nil {
		opu.SetPrice(*m)
	}
	return opu
}

// ClearPrice clears the value of the "price" field.
func (opu *OrgPriceUpdate) ClearPrice() *OrgPriceUpdate {
	opu.mutation.ClearPrice()
	return opu
}

// SetStripePriceID sets the "stripe_price_id" field.
func (opu *OrgPriceUpdate) SetStripePriceID(s string) *OrgPriceUpdate {
	opu.mutation.SetStripePriceID(s)
	return opu
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableStripePriceID(s *string) *OrgPriceUpdate {
	if s != nil {
		opu.SetStripePriceID(*s)
	}
	return opu
}

// ClearStripePriceID clears the value of the "stripe_price_id" field.
func (opu *OrgPriceUpdate) ClearStripePriceID() *OrgPriceUpdate {
	opu.mutation.ClearStripePriceID()
	return opu
}

// SetStatus sets the "status" field.
func (opu *OrgPriceUpdate) SetStatus(s string) *OrgPriceUpdate {
	opu.mutation.SetStatus(s)
	return opu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableStatus(s *string) *OrgPriceUpdate {
	if s != nil {
		opu.SetStatus(*s)
	}
	return opu
}

// ClearStatus clears the value of the "status" field.
func (opu *OrgPriceUpdate) ClearStatus() *OrgPriceUpdate {
	opu.mutation.ClearStatus()
	return opu
}

// SetActive sets the "active" field.
func (opu *OrgPriceUpdate) SetActive(b bool) *OrgPriceUpdate {
	opu.mutation.SetActive(b)
	return opu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableActive(b *bool) *OrgPriceUpdate {
	if b != nil {
		opu.SetActive(*b)
	}
	return opu
}

// SetProductID sets the "product_id" field.
func (opu *OrgPriceUpdate) SetProductID(s string) *OrgPriceUpdate {
	opu.mutation.SetProductID(s)
	return opu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableProductID(s *string) *OrgPriceUpdate {
	if s != nil {
		opu.SetProductID(*s)
	}
	return opu
}

// ClearProductID clears the value of the "product_id" field.
func (opu *OrgPriceUpdate) ClearProductID() *OrgPriceUpdate {
	opu.mutation.ClearProductID()
	return opu
}

// SetSubscriptionID sets the "subscription_id" field.
func (opu *OrgPriceUpdate) SetSubscriptionID(s string) *OrgPriceUpdate {
	opu.mutation.SetSubscriptionID(s)
	return opu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableSubscriptionID(s *string) *OrgPriceUpdate {
	if s != nil {
		opu.SetSubscriptionID(*s)
	}
	return opu
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (opu *OrgPriceUpdate) ClearSubscriptionID() *OrgPriceUpdate {
	opu.mutation.ClearSubscriptionID()
	return opu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (opu *OrgPriceUpdate) SetOwner(o *Organization) *OrgPriceUpdate {
	return opu.SetOwnerID(o.ID)
}

// AddOrgProductIDs adds the "org_products" edge to the OrgProduct entity by IDs.
func (opu *OrgPriceUpdate) AddOrgProductIDs(ids ...string) *OrgPriceUpdate {
	opu.mutation.AddOrgProductIDs(ids...)
	return opu
}

// AddOrgProducts adds the "org_products" edges to the OrgProduct entity.
func (opu *OrgPriceUpdate) AddOrgProducts(o ...*OrgProduct) *OrgPriceUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opu.AddOrgProductIDs(ids...)
}

// AddOrgModuleIDs adds the "org_modules" edge to the OrgModule entity by IDs.
func (opu *OrgPriceUpdate) AddOrgModuleIDs(ids ...string) *OrgPriceUpdate {
	opu.mutation.AddOrgModuleIDs(ids...)
	return opu
}

// AddOrgModules adds the "org_modules" edges to the OrgModule entity.
func (opu *OrgPriceUpdate) AddOrgModules(o ...*OrgModule) *OrgPriceUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opu.AddOrgModuleIDs(ids...)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (opu *OrgPriceUpdate) SetOrgSubscriptionID(id string) *OrgPriceUpdate {
	opu.mutation.SetOrgSubscriptionID(id)
	return opu
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (opu *OrgPriceUpdate) SetNillableOrgSubscriptionID(id *string) *OrgPriceUpdate {
	if id != nil {
		opu = opu.SetOrgSubscriptionID(*id)
	}
	return opu
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (opu *OrgPriceUpdate) SetOrgSubscription(o *OrgSubscription) *OrgPriceUpdate {
	return opu.SetOrgSubscriptionID(o.ID)
}

// Mutation returns the OrgPriceMutation object of the builder.
func (opu *OrgPriceUpdate) Mutation() *OrgPriceMutation {
	return opu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (opu *OrgPriceUpdate) ClearOwner() *OrgPriceUpdate {
	opu.mutation.ClearOwner()
	return opu
}

// ClearOrgProducts clears all "org_products" edges to the OrgProduct entity.
func (opu *OrgPriceUpdate) ClearOrgProducts() *OrgPriceUpdate {
	opu.mutation.ClearOrgProducts()
	return opu
}

// RemoveOrgProductIDs removes the "org_products" edge to OrgProduct entities by IDs.
func (opu *OrgPriceUpdate) RemoveOrgProductIDs(ids ...string) *OrgPriceUpdate {
	opu.mutation.RemoveOrgProductIDs(ids...)
	return opu
}

// RemoveOrgProducts removes "org_products" edges to OrgProduct entities.
func (opu *OrgPriceUpdate) RemoveOrgProducts(o ...*OrgProduct) *OrgPriceUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opu.RemoveOrgProductIDs(ids...)
}

// ClearOrgModules clears all "org_modules" edges to the OrgModule entity.
func (opu *OrgPriceUpdate) ClearOrgModules() *OrgPriceUpdate {
	opu.mutation.ClearOrgModules()
	return opu
}

// RemoveOrgModuleIDs removes the "org_modules" edge to OrgModule entities by IDs.
func (opu *OrgPriceUpdate) RemoveOrgModuleIDs(ids ...string) *OrgPriceUpdate {
	opu.mutation.RemoveOrgModuleIDs(ids...)
	return opu
}

// RemoveOrgModules removes "org_modules" edges to OrgModule entities.
func (opu *OrgPriceUpdate) RemoveOrgModules(o ...*OrgModule) *OrgPriceUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opu.RemoveOrgModuleIDs(ids...)
}

// ClearOrgSubscription clears the "org_subscription" edge to the OrgSubscription entity.
func (opu *OrgPriceUpdate) ClearOrgSubscription() *OrgPriceUpdate {
	opu.mutation.ClearOrgSubscription()
	return opu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OrgPriceUpdate) Save(ctx context.Context) (int, error) {
	if err := opu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, opu.sqlSave, opu.mutation, opu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OrgPriceUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OrgPriceUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OrgPriceUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opu *OrgPriceUpdate) defaults() error {
	if _, ok := opu.mutation.UpdatedAt(); !ok && !opu.mutation.UpdatedAtCleared() {
		if orgprice.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgprice.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgprice.UpdateDefaultUpdatedAt()
		opu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opu *OrgPriceUpdate) check() error {
	if v, ok := opu.mutation.OwnerID(); ok {
		if err := orgprice.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgPrice.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opu *OrgPriceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgPriceUpdate {
	opu.modifiers = append(opu.modifiers, modifiers...)
	return opu
}

func (opu *OrgPriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := opu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgprice.Table, orgprice.Columns, sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString))
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if opu.mutation.CreatedAtCleared() {
		_spec.ClearField(orgprice.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := opu.mutation.UpdatedAt(); ok {
		_spec.SetField(orgprice.FieldUpdatedAt, field.TypeTime, value)
	}
	if opu.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgprice.FieldUpdatedAt, field.TypeTime)
	}
	if opu.mutation.CreatedByCleared() {
		_spec.ClearField(orgprice.FieldCreatedBy, field.TypeString)
	}
	if value, ok := opu.mutation.UpdatedBy(); ok {
		_spec.SetField(orgprice.FieldUpdatedBy, field.TypeString, value)
	}
	if opu.mutation.UpdatedByCleared() {
		_spec.ClearField(orgprice.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := opu.mutation.DeletedAt(); ok {
		_spec.SetField(orgprice.FieldDeletedAt, field.TypeTime, value)
	}
	if opu.mutation.DeletedAtCleared() {
		_spec.ClearField(orgprice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := opu.mutation.DeletedBy(); ok {
		_spec.SetField(orgprice.FieldDeletedBy, field.TypeString, value)
	}
	if opu.mutation.DeletedByCleared() {
		_spec.ClearField(orgprice.FieldDeletedBy, field.TypeString)
	}
	if value, ok := opu.mutation.Tags(); ok {
		_spec.SetField(orgprice.FieldTags, field.TypeJSON, value)
	}
	if value, ok := opu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgprice.FieldTags, value)
		})
	}
	if opu.mutation.TagsCleared() {
		_spec.ClearField(orgprice.FieldTags, field.TypeJSON)
	}
	if value, ok := opu.mutation.Price(); ok {
		_spec.SetField(orgprice.FieldPrice, field.TypeJSON, value)
	}
	if opu.mutation.PriceCleared() {
		_spec.ClearField(orgprice.FieldPrice, field.TypeJSON)
	}
	if value, ok := opu.mutation.StripePriceID(); ok {
		_spec.SetField(orgprice.FieldStripePriceID, field.TypeString, value)
	}
	if opu.mutation.StripePriceIDCleared() {
		_spec.ClearField(orgprice.FieldStripePriceID, field.TypeString)
	}
	if value, ok := opu.mutation.Status(); ok {
		_spec.SetField(orgprice.FieldStatus, field.TypeString, value)
	}
	if opu.mutation.StatusCleared() {
		_spec.ClearField(orgprice.FieldStatus, field.TypeString)
	}
	if value, ok := opu.mutation.Active(); ok {
		_spec.SetField(orgprice.FieldActive, field.TypeBool, value)
	}
	if value, ok := opu.mutation.ProductID(); ok {
		_spec.SetField(orgprice.FieldProductID, field.TypeString, value)
	}
	if opu.mutation.ProductIDCleared() {
		_spec.ClearField(orgprice.FieldProductID, field.TypeString)
	}
	if opu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OwnerTable,
			Columns: []string{orgprice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgPrice
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OwnerTable,
			Columns: []string{orgprice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgProductsTable,
			Columns: orgprice.OrgProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProductOrgPrices
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.RemovedOrgProductsIDs(); len(nodes) > 0 && !opu.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgProductsTable,
			Columns: orgprice.OrgProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProductOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrgProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgProductsTable,
			Columns: orgprice.OrgProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgProductOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgModulesTable,
			Columns: orgprice.OrgModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgModuleOrgPrices
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.RemovedOrgModulesIDs(); len(nodes) > 0 && !opu.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgModulesTable,
			Columns: orgprice.OrgModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrgModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgModulesTable,
			Columns: orgprice.OrgModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.OrgSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OrgSubscriptionTable,
			Columns: []string{orgprice.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgPrice
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OrgSubscriptionTable,
			Columns: []string{orgprice.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opu.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = opu.schemaConfig.OrgPrice
	ctx = internal.NewSchemaConfigContext(ctx, opu.schemaConfig)
	_spec.AddModifiers(opu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	opu.mutation.done = true
	return n, nil
}

// OrgPriceUpdateOne is the builder for updating a single OrgPrice entity.
type OrgPriceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgPriceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (opuo *OrgPriceUpdateOne) SetUpdatedAt(t time.Time) *OrgPriceUpdateOne {
	opuo.mutation.SetUpdatedAt(t)
	return opuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (opuo *OrgPriceUpdateOne) ClearUpdatedAt() *OrgPriceUpdateOne {
	opuo.mutation.ClearUpdatedAt()
	return opuo
}

// SetUpdatedBy sets the "updated_by" field.
func (opuo *OrgPriceUpdateOne) SetUpdatedBy(s string) *OrgPriceUpdateOne {
	opuo.mutation.SetUpdatedBy(s)
	return opuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableUpdatedBy(s *string) *OrgPriceUpdateOne {
	if s != nil {
		opuo.SetUpdatedBy(*s)
	}
	return opuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (opuo *OrgPriceUpdateOne) ClearUpdatedBy() *OrgPriceUpdateOne {
	opuo.mutation.ClearUpdatedBy()
	return opuo
}

// SetDeletedAt sets the "deleted_at" field.
func (opuo *OrgPriceUpdateOne) SetDeletedAt(t time.Time) *OrgPriceUpdateOne {
	opuo.mutation.SetDeletedAt(t)
	return opuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgPriceUpdateOne {
	if t != nil {
		opuo.SetDeletedAt(*t)
	}
	return opuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (opuo *OrgPriceUpdateOne) ClearDeletedAt() *OrgPriceUpdateOne {
	opuo.mutation.ClearDeletedAt()
	return opuo
}

// SetDeletedBy sets the "deleted_by" field.
func (opuo *OrgPriceUpdateOne) SetDeletedBy(s string) *OrgPriceUpdateOne {
	opuo.mutation.SetDeletedBy(s)
	return opuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableDeletedBy(s *string) *OrgPriceUpdateOne {
	if s != nil {
		opuo.SetDeletedBy(*s)
	}
	return opuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (opuo *OrgPriceUpdateOne) ClearDeletedBy() *OrgPriceUpdateOne {
	opuo.mutation.ClearDeletedBy()
	return opuo
}

// SetTags sets the "tags" field.
func (opuo *OrgPriceUpdateOne) SetTags(s []string) *OrgPriceUpdateOne {
	opuo.mutation.SetTags(s)
	return opuo
}

// AppendTags appends s to the "tags" field.
func (opuo *OrgPriceUpdateOne) AppendTags(s []string) *OrgPriceUpdateOne {
	opuo.mutation.AppendTags(s)
	return opuo
}

// ClearTags clears the value of the "tags" field.
func (opuo *OrgPriceUpdateOne) ClearTags() *OrgPriceUpdateOne {
	opuo.mutation.ClearTags()
	return opuo
}

// SetOwnerID sets the "owner_id" field.
func (opuo *OrgPriceUpdateOne) SetOwnerID(s string) *OrgPriceUpdateOne {
	opuo.mutation.SetOwnerID(s)
	return opuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableOwnerID(s *string) *OrgPriceUpdateOne {
	if s != nil {
		opuo.SetOwnerID(*s)
	}
	return opuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (opuo *OrgPriceUpdateOne) ClearOwnerID() *OrgPriceUpdateOne {
	opuo.mutation.ClearOwnerID()
	return opuo
}

// SetPrice sets the "price" field.
func (opuo *OrgPriceUpdateOne) SetPrice(m models.Price) *OrgPriceUpdateOne {
	opuo.mutation.SetPrice(m)
	return opuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillablePrice(m *models.Price) *OrgPriceUpdateOne {
	if m != nil {
		opuo.SetPrice(*m)
	}
	return opuo
}

// ClearPrice clears the value of the "price" field.
func (opuo *OrgPriceUpdateOne) ClearPrice() *OrgPriceUpdateOne {
	opuo.mutation.ClearPrice()
	return opuo
}

// SetStripePriceID sets the "stripe_price_id" field.
func (opuo *OrgPriceUpdateOne) SetStripePriceID(s string) *OrgPriceUpdateOne {
	opuo.mutation.SetStripePriceID(s)
	return opuo
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableStripePriceID(s *string) *OrgPriceUpdateOne {
	if s != nil {
		opuo.SetStripePriceID(*s)
	}
	return opuo
}

// ClearStripePriceID clears the value of the "stripe_price_id" field.
func (opuo *OrgPriceUpdateOne) ClearStripePriceID() *OrgPriceUpdateOne {
	opuo.mutation.ClearStripePriceID()
	return opuo
}

// SetStatus sets the "status" field.
func (opuo *OrgPriceUpdateOne) SetStatus(s string) *OrgPriceUpdateOne {
	opuo.mutation.SetStatus(s)
	return opuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableStatus(s *string) *OrgPriceUpdateOne {
	if s != nil {
		opuo.SetStatus(*s)
	}
	return opuo
}

// ClearStatus clears the value of the "status" field.
func (opuo *OrgPriceUpdateOne) ClearStatus() *OrgPriceUpdateOne {
	opuo.mutation.ClearStatus()
	return opuo
}

// SetActive sets the "active" field.
func (opuo *OrgPriceUpdateOne) SetActive(b bool) *OrgPriceUpdateOne {
	opuo.mutation.SetActive(b)
	return opuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableActive(b *bool) *OrgPriceUpdateOne {
	if b != nil {
		opuo.SetActive(*b)
	}
	return opuo
}

// SetProductID sets the "product_id" field.
func (opuo *OrgPriceUpdateOne) SetProductID(s string) *OrgPriceUpdateOne {
	opuo.mutation.SetProductID(s)
	return opuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableProductID(s *string) *OrgPriceUpdateOne {
	if s != nil {
		opuo.SetProductID(*s)
	}
	return opuo
}

// ClearProductID clears the value of the "product_id" field.
func (opuo *OrgPriceUpdateOne) ClearProductID() *OrgPriceUpdateOne {
	opuo.mutation.ClearProductID()
	return opuo
}

// SetSubscriptionID sets the "subscription_id" field.
func (opuo *OrgPriceUpdateOne) SetSubscriptionID(s string) *OrgPriceUpdateOne {
	opuo.mutation.SetSubscriptionID(s)
	return opuo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableSubscriptionID(s *string) *OrgPriceUpdateOne {
	if s != nil {
		opuo.SetSubscriptionID(*s)
	}
	return opuo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (opuo *OrgPriceUpdateOne) ClearSubscriptionID() *OrgPriceUpdateOne {
	opuo.mutation.ClearSubscriptionID()
	return opuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (opuo *OrgPriceUpdateOne) SetOwner(o *Organization) *OrgPriceUpdateOne {
	return opuo.SetOwnerID(o.ID)
}

// AddOrgProductIDs adds the "org_products" edge to the OrgProduct entity by IDs.
func (opuo *OrgPriceUpdateOne) AddOrgProductIDs(ids ...string) *OrgPriceUpdateOne {
	opuo.mutation.AddOrgProductIDs(ids...)
	return opuo
}

// AddOrgProducts adds the "org_products" edges to the OrgProduct entity.
func (opuo *OrgPriceUpdateOne) AddOrgProducts(o ...*OrgProduct) *OrgPriceUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opuo.AddOrgProductIDs(ids...)
}

// AddOrgModuleIDs adds the "org_modules" edge to the OrgModule entity by IDs.
func (opuo *OrgPriceUpdateOne) AddOrgModuleIDs(ids ...string) *OrgPriceUpdateOne {
	opuo.mutation.AddOrgModuleIDs(ids...)
	return opuo
}

// AddOrgModules adds the "org_modules" edges to the OrgModule entity.
func (opuo *OrgPriceUpdateOne) AddOrgModules(o ...*OrgModule) *OrgPriceUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opuo.AddOrgModuleIDs(ids...)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (opuo *OrgPriceUpdateOne) SetOrgSubscriptionID(id string) *OrgPriceUpdateOne {
	opuo.mutation.SetOrgSubscriptionID(id)
	return opuo
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (opuo *OrgPriceUpdateOne) SetNillableOrgSubscriptionID(id *string) *OrgPriceUpdateOne {
	if id != nil {
		opuo = opuo.SetOrgSubscriptionID(*id)
	}
	return opuo
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (opuo *OrgPriceUpdateOne) SetOrgSubscription(o *OrgSubscription) *OrgPriceUpdateOne {
	return opuo.SetOrgSubscriptionID(o.ID)
}

// Mutation returns the OrgPriceMutation object of the builder.
func (opuo *OrgPriceUpdateOne) Mutation() *OrgPriceMutation {
	return opuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (opuo *OrgPriceUpdateOne) ClearOwner() *OrgPriceUpdateOne {
	opuo.mutation.ClearOwner()
	return opuo
}

// ClearOrgProducts clears all "org_products" edges to the OrgProduct entity.
func (opuo *OrgPriceUpdateOne) ClearOrgProducts() *OrgPriceUpdateOne {
	opuo.mutation.ClearOrgProducts()
	return opuo
}

// RemoveOrgProductIDs removes the "org_products" edge to OrgProduct entities by IDs.
func (opuo *OrgPriceUpdateOne) RemoveOrgProductIDs(ids ...string) *OrgPriceUpdateOne {
	opuo.mutation.RemoveOrgProductIDs(ids...)
	return opuo
}

// RemoveOrgProducts removes "org_products" edges to OrgProduct entities.
func (opuo *OrgPriceUpdateOne) RemoveOrgProducts(o ...*OrgProduct) *OrgPriceUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opuo.RemoveOrgProductIDs(ids...)
}

// ClearOrgModules clears all "org_modules" edges to the OrgModule entity.
func (opuo *OrgPriceUpdateOne) ClearOrgModules() *OrgPriceUpdateOne {
	opuo.mutation.ClearOrgModules()
	return opuo
}

// RemoveOrgModuleIDs removes the "org_modules" edge to OrgModule entities by IDs.
func (opuo *OrgPriceUpdateOne) RemoveOrgModuleIDs(ids ...string) *OrgPriceUpdateOne {
	opuo.mutation.RemoveOrgModuleIDs(ids...)
	return opuo
}

// RemoveOrgModules removes "org_modules" edges to OrgModule entities.
func (opuo *OrgPriceUpdateOne) RemoveOrgModules(o ...*OrgModule) *OrgPriceUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opuo.RemoveOrgModuleIDs(ids...)
}

// ClearOrgSubscription clears the "org_subscription" edge to the OrgSubscription entity.
func (opuo *OrgPriceUpdateOne) ClearOrgSubscription() *OrgPriceUpdateOne {
	opuo.mutation.ClearOrgSubscription()
	return opuo
}

// Where appends a list predicates to the OrgPriceUpdate builder.
func (opuo *OrgPriceUpdateOne) Where(ps ...predicate.OrgPrice) *OrgPriceUpdateOne {
	opuo.mutation.Where(ps...)
	return opuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OrgPriceUpdateOne) Select(field string, fields ...string) *OrgPriceUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OrgPrice entity.
func (opuo *OrgPriceUpdateOne) Save(ctx context.Context) (*OrgPrice, error) {
	if err := opuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, opuo.sqlSave, opuo.mutation, opuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OrgPriceUpdateOne) SaveX(ctx context.Context) *OrgPrice {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OrgPriceUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OrgPriceUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opuo *OrgPriceUpdateOne) defaults() error {
	if _, ok := opuo.mutation.UpdatedAt(); !ok && !opuo.mutation.UpdatedAtCleared() {
		if orgprice.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgprice.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgprice.UpdateDefaultUpdatedAt()
		opuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opuo *OrgPriceUpdateOne) check() error {
	if v, ok := opuo.mutation.OwnerID(); ok {
		if err := orgprice.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgPrice.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opuo *OrgPriceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgPriceUpdateOne {
	opuo.modifiers = append(opuo.modifiers, modifiers...)
	return opuo
}

func (opuo *OrgPriceUpdateOne) sqlSave(ctx context.Context) (_node *OrgPrice, err error) {
	if err := opuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgprice.Table, orgprice.Columns, sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString))
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrgPrice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgprice.FieldID)
		for _, f := range fields {
			if !orgprice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orgprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if opuo.mutation.CreatedAtCleared() {
		_spec.ClearField(orgprice.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := opuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orgprice.FieldUpdatedAt, field.TypeTime, value)
	}
	if opuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgprice.FieldUpdatedAt, field.TypeTime)
	}
	if opuo.mutation.CreatedByCleared() {
		_spec.ClearField(orgprice.FieldCreatedBy, field.TypeString)
	}
	if value, ok := opuo.mutation.UpdatedBy(); ok {
		_spec.SetField(orgprice.FieldUpdatedBy, field.TypeString, value)
	}
	if opuo.mutation.UpdatedByCleared() {
		_spec.ClearField(orgprice.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := opuo.mutation.DeletedAt(); ok {
		_spec.SetField(orgprice.FieldDeletedAt, field.TypeTime, value)
	}
	if opuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orgprice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := opuo.mutation.DeletedBy(); ok {
		_spec.SetField(orgprice.FieldDeletedBy, field.TypeString, value)
	}
	if opuo.mutation.DeletedByCleared() {
		_spec.ClearField(orgprice.FieldDeletedBy, field.TypeString)
	}
	if value, ok := opuo.mutation.Tags(); ok {
		_spec.SetField(orgprice.FieldTags, field.TypeJSON, value)
	}
	if value, ok := opuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgprice.FieldTags, value)
		})
	}
	if opuo.mutation.TagsCleared() {
		_spec.ClearField(orgprice.FieldTags, field.TypeJSON)
	}
	if value, ok := opuo.mutation.Price(); ok {
		_spec.SetField(orgprice.FieldPrice, field.TypeJSON, value)
	}
	if opuo.mutation.PriceCleared() {
		_spec.ClearField(orgprice.FieldPrice, field.TypeJSON)
	}
	if value, ok := opuo.mutation.StripePriceID(); ok {
		_spec.SetField(orgprice.FieldStripePriceID, field.TypeString, value)
	}
	if opuo.mutation.StripePriceIDCleared() {
		_spec.ClearField(orgprice.FieldStripePriceID, field.TypeString)
	}
	if value, ok := opuo.mutation.Status(); ok {
		_spec.SetField(orgprice.FieldStatus, field.TypeString, value)
	}
	if opuo.mutation.StatusCleared() {
		_spec.ClearField(orgprice.FieldStatus, field.TypeString)
	}
	if value, ok := opuo.mutation.Active(); ok {
		_spec.SetField(orgprice.FieldActive, field.TypeBool, value)
	}
	if value, ok := opuo.mutation.ProductID(); ok {
		_spec.SetField(orgprice.FieldProductID, field.TypeString, value)
	}
	if opuo.mutation.ProductIDCleared() {
		_spec.ClearField(orgprice.FieldProductID, field.TypeString)
	}
	if opuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OwnerTable,
			Columns: []string{orgprice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgPrice
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OwnerTable,
			Columns: []string{orgprice.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgProductsTable,
			Columns: orgprice.OrgProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProductOrgPrices
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.RemovedOrgProductsIDs(); len(nodes) > 0 && !opuo.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgProductsTable,
			Columns: orgprice.OrgProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProductOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrgProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgProductsTable,
			Columns: orgprice.OrgProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgProductOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgModulesTable,
			Columns: orgprice.OrgModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgModuleOrgPrices
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.RemovedOrgModulesIDs(); len(nodes) > 0 && !opuo.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgModulesTable,
			Columns: orgprice.OrgModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrgModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   orgprice.OrgModulesTable,
			Columns: orgprice.OrgModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.OrgSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OrgSubscriptionTable,
			Columns: []string{orgprice.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgPrice
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgprice.OrgSubscriptionTable,
			Columns: []string{orgprice.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opuo.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = opuo.schemaConfig.OrgPrice
	ctx = internal.NewSchemaConfigContext(ctx, opuo.schemaConfig)
	_spec.AddModifiers(opuo.modifiers...)
	_node = &OrgPrice{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	opuo.mutation.done = true
	return _node, nil
}
