// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// JobRunnerCreate is the builder for creating a JobRunner entity.
type JobRunnerCreate struct {
	config
	mutation *JobRunnerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (jrc *JobRunnerCreate) SetCreatedAt(t time.Time) *JobRunnerCreate {
	jrc.mutation.SetCreatedAt(t)
	return jrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableCreatedAt(t *time.Time) *JobRunnerCreate {
	if t != nil {
		jrc.SetCreatedAt(*t)
	}
	return jrc
}

// SetUpdatedAt sets the "updated_at" field.
func (jrc *JobRunnerCreate) SetUpdatedAt(t time.Time) *JobRunnerCreate {
	jrc.mutation.SetUpdatedAt(t)
	return jrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableUpdatedAt(t *time.Time) *JobRunnerCreate {
	if t != nil {
		jrc.SetUpdatedAt(*t)
	}
	return jrc
}

// SetCreatedBy sets the "created_by" field.
func (jrc *JobRunnerCreate) SetCreatedBy(s string) *JobRunnerCreate {
	jrc.mutation.SetCreatedBy(s)
	return jrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableCreatedBy(s *string) *JobRunnerCreate {
	if s != nil {
		jrc.SetCreatedBy(*s)
	}
	return jrc
}

// SetUpdatedBy sets the "updated_by" field.
func (jrc *JobRunnerCreate) SetUpdatedBy(s string) *JobRunnerCreate {
	jrc.mutation.SetUpdatedBy(s)
	return jrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableUpdatedBy(s *string) *JobRunnerCreate {
	if s != nil {
		jrc.SetUpdatedBy(*s)
	}
	return jrc
}

// SetDeletedAt sets the "deleted_at" field.
func (jrc *JobRunnerCreate) SetDeletedAt(t time.Time) *JobRunnerCreate {
	jrc.mutation.SetDeletedAt(t)
	return jrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableDeletedAt(t *time.Time) *JobRunnerCreate {
	if t != nil {
		jrc.SetDeletedAt(*t)
	}
	return jrc
}

// SetDeletedBy sets the "deleted_by" field.
func (jrc *JobRunnerCreate) SetDeletedBy(s string) *JobRunnerCreate {
	jrc.mutation.SetDeletedBy(s)
	return jrc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableDeletedBy(s *string) *JobRunnerCreate {
	if s != nil {
		jrc.SetDeletedBy(*s)
	}
	return jrc
}

// SetDisplayID sets the "display_id" field.
func (jrc *JobRunnerCreate) SetDisplayID(s string) *JobRunnerCreate {
	jrc.mutation.SetDisplayID(s)
	return jrc
}

// SetTags sets the "tags" field.
func (jrc *JobRunnerCreate) SetTags(s []string) *JobRunnerCreate {
	jrc.mutation.SetTags(s)
	return jrc
}

// SetOwnerID sets the "owner_id" field.
func (jrc *JobRunnerCreate) SetOwnerID(s string) *JobRunnerCreate {
	jrc.mutation.SetOwnerID(s)
	return jrc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableOwnerID(s *string) *JobRunnerCreate {
	if s != nil {
		jrc.SetOwnerID(*s)
	}
	return jrc
}

// SetSystemOwned sets the "system_owned" field.
func (jrc *JobRunnerCreate) SetSystemOwned(b bool) *JobRunnerCreate {
	jrc.mutation.SetSystemOwned(b)
	return jrc
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableSystemOwned(b *bool) *JobRunnerCreate {
	if b != nil {
		jrc.SetSystemOwned(*b)
	}
	return jrc
}

// SetName sets the "name" field.
func (jrc *JobRunnerCreate) SetName(s string) *JobRunnerCreate {
	jrc.mutation.SetName(s)
	return jrc
}

// SetStatus sets the "status" field.
func (jrc *JobRunnerCreate) SetStatus(ers enums.JobRunnerStatus) *JobRunnerCreate {
	jrc.mutation.SetStatus(ers)
	return jrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableStatus(ers *enums.JobRunnerStatus) *JobRunnerCreate {
	if ers != nil {
		jrc.SetStatus(*ers)
	}
	return jrc
}

// SetIPAddress sets the "ip_address" field.
func (jrc *JobRunnerCreate) SetIPAddress(s string) *JobRunnerCreate {
	jrc.mutation.SetIPAddress(s)
	return jrc
}

// SetID sets the "id" field.
func (jrc *JobRunnerCreate) SetID(s string) *JobRunnerCreate {
	jrc.mutation.SetID(s)
	return jrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jrc *JobRunnerCreate) SetNillableID(s *string) *JobRunnerCreate {
	if s != nil {
		jrc.SetID(*s)
	}
	return jrc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jrc *JobRunnerCreate) SetOwner(o *Organization) *JobRunnerCreate {
	return jrc.SetOwnerID(o.ID)
}

// AddJobRunnerTokenIDs adds the "job_runner_tokens" edge to the JobRunnerToken entity by IDs.
func (jrc *JobRunnerCreate) AddJobRunnerTokenIDs(ids ...string) *JobRunnerCreate {
	jrc.mutation.AddJobRunnerTokenIDs(ids...)
	return jrc
}

// AddJobRunnerTokens adds the "job_runner_tokens" edges to the JobRunnerToken entity.
func (jrc *JobRunnerCreate) AddJobRunnerTokens(j ...*JobRunnerToken) *JobRunnerCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jrc.AddJobRunnerTokenIDs(ids...)
}

// Mutation returns the JobRunnerMutation object of the builder.
func (jrc *JobRunnerCreate) Mutation() *JobRunnerMutation {
	return jrc.mutation
}

// Save creates the JobRunner in the database.
func (jrc *JobRunnerCreate) Save(ctx context.Context) (*JobRunner, error) {
	if err := jrc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jrc.sqlSave, jrc.mutation, jrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jrc *JobRunnerCreate) SaveX(ctx context.Context) *JobRunner {
	v, err := jrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrc *JobRunnerCreate) Exec(ctx context.Context) error {
	_, err := jrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrc *JobRunnerCreate) ExecX(ctx context.Context) {
	if err := jrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrc *JobRunnerCreate) defaults() error {
	if _, ok := jrc.mutation.CreatedAt(); !ok {
		if jobrunner.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunner.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunner.DefaultCreatedAt()
		jrc.mutation.SetCreatedAt(v)
	}
	if _, ok := jrc.mutation.UpdatedAt(); !ok {
		if jobrunner.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunner.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunner.DefaultUpdatedAt()
		jrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jrc.mutation.Tags(); !ok {
		v := jobrunner.DefaultTags
		jrc.mutation.SetTags(v)
	}
	if _, ok := jrc.mutation.SystemOwned(); !ok {
		v := jobrunner.DefaultSystemOwned
		jrc.mutation.SetSystemOwned(v)
	}
	if _, ok := jrc.mutation.Status(); !ok {
		v := jobrunner.DefaultStatus
		jrc.mutation.SetStatus(v)
	}
	if _, ok := jrc.mutation.ID(); !ok {
		if jobrunner.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized jobrunner.DefaultID (forgotten import generated/runtime?)")
		}
		v := jobrunner.DefaultID()
		jrc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jrc *JobRunnerCreate) check() error {
	if _, ok := jrc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "JobRunner.display_id"`)}
	}
	if v, ok := jrc.mutation.DisplayID(); ok {
		if err := jobrunner.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "JobRunner.display_id": %w`, err)}
		}
	}
	if _, ok := jrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "JobRunner.name"`)}
	}
	if _, ok := jrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "JobRunner.status"`)}
	}
	if v, ok := jrc.mutation.Status(); ok {
		if err := jobrunner.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobRunner.status": %w`, err)}
		}
	}
	if _, ok := jrc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`generated: missing required field "JobRunner.ip_address"`)}
	}
	if v, ok := jrc.mutation.IPAddress(); ok {
		if err := jobrunner.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`generated: validator failed for field "JobRunner.ip_address": %w`, err)}
		}
	}
	return nil
}

func (jrc *JobRunnerCreate) sqlSave(ctx context.Context) (*JobRunner, error) {
	if err := jrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobRunner.ID type: %T", _spec.ID.Value)
		}
	}
	jrc.mutation.id = &_node.ID
	jrc.mutation.done = true
	return _node, nil
}

func (jrc *JobRunnerCreate) createSpec() (*JobRunner, *sqlgraph.CreateSpec) {
	var (
		_node = &JobRunner{config: jrc.config}
		_spec = sqlgraph.NewCreateSpec(jobrunner.Table, sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString))
	)
	_spec.Schema = jrc.schemaConfig.JobRunner
	if id, ok := jrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jrc.mutation.CreatedAt(); ok {
		_spec.SetField(jobrunner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jrc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jrc.mutation.CreatedBy(); ok {
		_spec.SetField(jobrunner.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := jrc.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunner.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := jrc.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunner.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jrc.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunner.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := jrc.mutation.DisplayID(); ok {
		_spec.SetField(jobrunner.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := jrc.mutation.Tags(); ok {
		_spec.SetField(jobrunner.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := jrc.mutation.SystemOwned(); ok {
		_spec.SetField(jobrunner.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := jrc.mutation.Name(); ok {
		_spec.SetField(jobrunner.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := jrc.mutation.Status(); ok {
		_spec.SetField(jobrunner.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := jrc.mutation.IPAddress(); ok {
		_spec.SetField(jobrunner.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if nodes := jrc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunner.OwnerTable,
			Columns: []string{jobrunner.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrc.schemaConfig.JobRunner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.JobRunnerTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobrunner.JobRunnerTokensTable,
			Columns: jobrunner.JobRunnerTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrc.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobRunnerCreateBulk is the builder for creating many JobRunner entities in bulk.
type JobRunnerCreateBulk struct {
	config
	err      error
	builders []*JobRunnerCreate
}

// Save creates the JobRunner entities in the database.
func (jrcb *JobRunnerCreateBulk) Save(ctx context.Context) ([]*JobRunner, error) {
	if jrcb.err != nil {
		return nil, jrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jrcb.builders))
	nodes := make([]*JobRunner, len(jrcb.builders))
	mutators := make([]Mutator, len(jrcb.builders))
	for i := range jrcb.builders {
		func(i int, root context.Context) {
			builder := jrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobRunnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jrcb *JobRunnerCreateBulk) SaveX(ctx context.Context) []*JobRunner {
	v, err := jrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrcb *JobRunnerCreateBulk) Exec(ctx context.Context) error {
	_, err := jrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrcb *JobRunnerCreateBulk) ExecX(ctx context.Context) {
	if err := jrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
