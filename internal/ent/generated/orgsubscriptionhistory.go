// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscriptionhistory"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// OrgSubscriptionHistory is the model entity for the OrgSubscriptionHistory schema.
type OrgSubscriptionHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the stripe subscription id
	StripeSubscriptionID string `json:"stripe_subscription_id,omitempty"`
	// the common name of the product tier the subscription is associated with, e.g. starter tier
	ProductTier string `json:"product_tier,omitempty"`
	// the price of the product tier
	ProductPrice models.Price `json:"product_price,omitempty"`
	// the product id that represents the tier in stripe
	StripeProductTierID string `json:"stripe_product_tier_id,omitempty"`
	// the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
	StripeSubscriptionStatus string `json:"stripe_subscription_status,omitempty"`
	// indicates if the subscription is active
	Active bool `json:"active,omitempty"`
	// the customer ID the subscription is associated to
	StripeCustomerID string `json:"stripe_customer_id,omitempty"`
	// the time the subscription is set to expire; only populated if subscription is cancelled
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// the features associated with the subscription
	Features []string `json:"features,omitempty"`
	// the feature lookup keys associated with the subscription
	FeatureLookupKeys []string `json:"feature_lookup_keys,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgSubscriptionHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgsubscriptionhistory.FieldTags, orgsubscriptionhistory.FieldProductPrice, orgsubscriptionhistory.FieldFeatures, orgsubscriptionhistory.FieldFeatureLookupKeys:
			values[i] = new([]byte)
		case orgsubscriptionhistory.FieldOperation:
			values[i] = new(history.OpType)
		case orgsubscriptionhistory.FieldActive:
			values[i] = new(sql.NullBool)
		case orgsubscriptionhistory.FieldID, orgsubscriptionhistory.FieldRef, orgsubscriptionhistory.FieldCreatedBy, orgsubscriptionhistory.FieldUpdatedBy, orgsubscriptionhistory.FieldDeletedBy, orgsubscriptionhistory.FieldOwnerID, orgsubscriptionhistory.FieldStripeSubscriptionID, orgsubscriptionhistory.FieldProductTier, orgsubscriptionhistory.FieldStripeProductTierID, orgsubscriptionhistory.FieldStripeSubscriptionStatus, orgsubscriptionhistory.FieldStripeCustomerID:
			values[i] = new(sql.NullString)
		case orgsubscriptionhistory.FieldHistoryTime, orgsubscriptionhistory.FieldCreatedAt, orgsubscriptionhistory.FieldUpdatedAt, orgsubscriptionhistory.FieldDeletedAt, orgsubscriptionhistory.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgSubscriptionHistory fields.
func (osh *OrgSubscriptionHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgsubscriptionhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				osh.ID = value.String
			}
		case orgsubscriptionhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				osh.HistoryTime = value.Time
			}
		case orgsubscriptionhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				osh.Ref = value.String
			}
		case orgsubscriptionhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				osh.Operation = *value
			}
		case orgsubscriptionhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				osh.CreatedAt = value.Time
			}
		case orgsubscriptionhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				osh.UpdatedAt = value.Time
			}
		case orgsubscriptionhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				osh.CreatedBy = value.String
			}
		case orgsubscriptionhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				osh.UpdatedBy = value.String
			}
		case orgsubscriptionhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &osh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case orgsubscriptionhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				osh.DeletedAt = value.Time
			}
		case orgsubscriptionhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				osh.DeletedBy = value.String
			}
		case orgsubscriptionhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				osh.OwnerID = value.String
			}
		case orgsubscriptionhistory.FieldStripeSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_subscription_id", values[i])
			} else if value.Valid {
				osh.StripeSubscriptionID = value.String
			}
		case orgsubscriptionhistory.FieldProductTier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_tier", values[i])
			} else if value.Valid {
				osh.ProductTier = value.String
			}
		case orgsubscriptionhistory.FieldProductPrice:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field product_price", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &osh.ProductPrice); err != nil {
					return fmt.Errorf("unmarshal field product_price: %w", err)
				}
			}
		case orgsubscriptionhistory.FieldStripeProductTierID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_product_tier_id", values[i])
			} else if value.Valid {
				osh.StripeProductTierID = value.String
			}
		case orgsubscriptionhistory.FieldStripeSubscriptionStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_subscription_status", values[i])
			} else if value.Valid {
				osh.StripeSubscriptionStatus = value.String
			}
		case orgsubscriptionhistory.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				osh.Active = value.Bool
			}
		case orgsubscriptionhistory.FieldStripeCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_customer_id", values[i])
			} else if value.Valid {
				osh.StripeCustomerID = value.String
			}
		case orgsubscriptionhistory.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				osh.ExpiresAt = new(time.Time)
				*osh.ExpiresAt = value.Time
			}
		case orgsubscriptionhistory.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &osh.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case orgsubscriptionhistory.FieldFeatureLookupKeys:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field feature_lookup_keys", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &osh.FeatureLookupKeys); err != nil {
					return fmt.Errorf("unmarshal field feature_lookup_keys: %w", err)
				}
			}
		default:
			osh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrgSubscriptionHistory.
// This includes values selected through modifiers, order, etc.
func (osh *OrgSubscriptionHistory) Value(name string) (ent.Value, error) {
	return osh.selectValues.Get(name)
}

// Update returns a builder for updating this OrgSubscriptionHistory.
// Note that you need to call OrgSubscriptionHistory.Unwrap() before calling this method if this OrgSubscriptionHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (osh *OrgSubscriptionHistory) Update() *OrgSubscriptionHistoryUpdateOne {
	return NewOrgSubscriptionHistoryClient(osh.config).UpdateOne(osh)
}

// Unwrap unwraps the OrgSubscriptionHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (osh *OrgSubscriptionHistory) Unwrap() *OrgSubscriptionHistory {
	_tx, ok := osh.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrgSubscriptionHistory is not a transactional entity")
	}
	osh.config.driver = _tx.drv
	return osh
}

// String implements the fmt.Stringer.
func (osh *OrgSubscriptionHistory) String() string {
	var builder strings.Builder
	builder.WriteString("OrgSubscriptionHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", osh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(osh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(osh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", osh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(osh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(osh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(osh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(osh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", osh.Tags))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(osh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(osh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(osh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("stripe_subscription_id=")
	builder.WriteString(osh.StripeSubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("product_tier=")
	builder.WriteString(osh.ProductTier)
	builder.WriteString(", ")
	builder.WriteString("product_price=")
	builder.WriteString(fmt.Sprintf("%v", osh.ProductPrice))
	builder.WriteString(", ")
	builder.WriteString("stripe_product_tier_id=")
	builder.WriteString(osh.StripeProductTierID)
	builder.WriteString(", ")
	builder.WriteString("stripe_subscription_status=")
	builder.WriteString(osh.StripeSubscriptionStatus)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", osh.Active))
	builder.WriteString(", ")
	builder.WriteString("stripe_customer_id=")
	builder.WriteString(osh.StripeCustomerID)
	builder.WriteString(", ")
	if v := osh.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", osh.Features))
	builder.WriteString(", ")
	builder.WriteString("feature_lookup_keys=")
	builder.WriteString(fmt.Sprintf("%v", osh.FeatureLookupKeys))
	builder.WriteByte(')')
	return builder.String()
}

// OrgSubscriptionHistories is a parsable slice of OrgSubscriptionHistory.
type OrgSubscriptionHistories []*OrgSubscriptionHistory
