// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// GroupCreate is the builder for creating a Group entity.
type GroupCreate struct {
	config
	mutation *GroupMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *GroupCreate) SetCreatedAt(v time.Time) *GroupCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *GroupCreate) SetNillableCreatedAt(v *time.Time) *GroupCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *GroupCreate) SetUpdatedAt(v time.Time) *GroupCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *GroupCreate) SetNillableUpdatedAt(v *time.Time) *GroupCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *GroupCreate) SetCreatedBy(v string) *GroupCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *GroupCreate) SetNillableCreatedBy(v *string) *GroupCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *GroupCreate) SetUpdatedBy(v string) *GroupCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *GroupCreate) SetNillableUpdatedBy(v *string) *GroupCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *GroupCreate) SetDeletedAt(v time.Time) *GroupCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *GroupCreate) SetNillableDeletedAt(v *time.Time) *GroupCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *GroupCreate) SetDeletedBy(v string) *GroupCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *GroupCreate) SetNillableDeletedBy(v *string) *GroupCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *GroupCreate) SetDisplayID(v string) *GroupCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *GroupCreate) SetTags(v []string) *GroupCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *GroupCreate) SetOwnerID(v string) *GroupCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *GroupCreate) SetNillableOwnerID(v *string) *GroupCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *GroupCreate) SetName(v string) *GroupCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *GroupCreate) SetDescription(v string) *GroupCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *GroupCreate) SetNillableDescription(v *string) *GroupCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetIsManaged sets the "is_managed" field.
func (_c *GroupCreate) SetIsManaged(v bool) *GroupCreate {
	_c.mutation.SetIsManaged(v)
	return _c
}

// SetNillableIsManaged sets the "is_managed" field if the given value is not nil.
func (_c *GroupCreate) SetNillableIsManaged(v *bool) *GroupCreate {
	if v != nil {
		_c.SetIsManaged(*v)
	}
	return _c
}

// SetGravatarLogoURL sets the "gravatar_logo_url" field.
func (_c *GroupCreate) SetGravatarLogoURL(v string) *GroupCreate {
	_c.mutation.SetGravatarLogoURL(v)
	return _c
}

// SetNillableGravatarLogoURL sets the "gravatar_logo_url" field if the given value is not nil.
func (_c *GroupCreate) SetNillableGravatarLogoURL(v *string) *GroupCreate {
	if v != nil {
		_c.SetGravatarLogoURL(*v)
	}
	return _c
}

// SetLogoURL sets the "logo_url" field.
func (_c *GroupCreate) SetLogoURL(v string) *GroupCreate {
	_c.mutation.SetLogoURL(v)
	return _c
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_c *GroupCreate) SetNillableLogoURL(v *string) *GroupCreate {
	if v != nil {
		_c.SetLogoURL(*v)
	}
	return _c
}

// SetDisplayName sets the "display_name" field.
func (_c *GroupCreate) SetDisplayName(v string) *GroupCreate {
	_c.mutation.SetDisplayName(v)
	return _c
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_c *GroupCreate) SetNillableDisplayName(v *string) *GroupCreate {
	if v != nil {
		_c.SetDisplayName(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *GroupCreate) SetID(v string) *GroupCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *GroupCreate) SetNillableID(v *string) *GroupCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *GroupCreate) SetOwner(v *Organization) *GroupCreate {
	return _c.SetOwnerID(v.ID)
}

// AddProgramEditorIDs adds the "program_editors" edge to the Program entity by IDs.
func (_c *GroupCreate) AddProgramEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddProgramEditorIDs(ids...)
	return _c
}

// AddProgramEditors adds the "program_editors" edges to the Program entity.
func (_c *GroupCreate) AddProgramEditors(v ...*Program) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramEditorIDs(ids...)
}

// AddProgramBlockedGroupIDs adds the "program_blocked_groups" edge to the Program entity by IDs.
func (_c *GroupCreate) AddProgramBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddProgramBlockedGroupIDs(ids...)
	return _c
}

// AddProgramBlockedGroups adds the "program_blocked_groups" edges to the Program entity.
func (_c *GroupCreate) AddProgramBlockedGroups(v ...*Program) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramBlockedGroupIDs(ids...)
}

// AddProgramViewerIDs adds the "program_viewers" edge to the Program entity by IDs.
func (_c *GroupCreate) AddProgramViewerIDs(ids ...string) *GroupCreate {
	_c.mutation.AddProgramViewerIDs(ids...)
	return _c
}

// AddProgramViewers adds the "program_viewers" edges to the Program entity.
func (_c *GroupCreate) AddProgramViewers(v ...*Program) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramViewerIDs(ids...)
}

// AddRiskEditorIDs adds the "risk_editors" edge to the Risk entity by IDs.
func (_c *GroupCreate) AddRiskEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddRiskEditorIDs(ids...)
	return _c
}

// AddRiskEditors adds the "risk_editors" edges to the Risk entity.
func (_c *GroupCreate) AddRiskEditors(v ...*Risk) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskEditorIDs(ids...)
}

// AddRiskBlockedGroupIDs adds the "risk_blocked_groups" edge to the Risk entity by IDs.
func (_c *GroupCreate) AddRiskBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddRiskBlockedGroupIDs(ids...)
	return _c
}

// AddRiskBlockedGroups adds the "risk_blocked_groups" edges to the Risk entity.
func (_c *GroupCreate) AddRiskBlockedGroups(v ...*Risk) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskBlockedGroupIDs(ids...)
}

// AddRiskViewerIDs adds the "risk_viewers" edge to the Risk entity by IDs.
func (_c *GroupCreate) AddRiskViewerIDs(ids ...string) *GroupCreate {
	_c.mutation.AddRiskViewerIDs(ids...)
	return _c
}

// AddRiskViewers adds the "risk_viewers" edges to the Risk entity.
func (_c *GroupCreate) AddRiskViewers(v ...*Risk) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskViewerIDs(ids...)
}

// AddControlObjectiveEditorIDs adds the "control_objective_editors" edge to the ControlObjective entity by IDs.
func (_c *GroupCreate) AddControlObjectiveEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddControlObjectiveEditorIDs(ids...)
	return _c
}

// AddControlObjectiveEditors adds the "control_objective_editors" edges to the ControlObjective entity.
func (_c *GroupCreate) AddControlObjectiveEditors(v ...*ControlObjective) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveEditorIDs(ids...)
}

// AddControlObjectiveBlockedGroupIDs adds the "control_objective_blocked_groups" edge to the ControlObjective entity by IDs.
func (_c *GroupCreate) AddControlObjectiveBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddControlObjectiveBlockedGroupIDs(ids...)
	return _c
}

// AddControlObjectiveBlockedGroups adds the "control_objective_blocked_groups" edges to the ControlObjective entity.
func (_c *GroupCreate) AddControlObjectiveBlockedGroups(v ...*ControlObjective) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveBlockedGroupIDs(ids...)
}

// AddControlObjectiveViewerIDs adds the "control_objective_viewers" edge to the ControlObjective entity by IDs.
func (_c *GroupCreate) AddControlObjectiveViewerIDs(ids ...string) *GroupCreate {
	_c.mutation.AddControlObjectiveViewerIDs(ids...)
	return _c
}

// AddControlObjectiveViewers adds the "control_objective_viewers" edges to the ControlObjective entity.
func (_c *GroupCreate) AddControlObjectiveViewers(v ...*ControlObjective) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveViewerIDs(ids...)
}

// AddNarrativeEditorIDs adds the "narrative_editors" edge to the Narrative entity by IDs.
func (_c *GroupCreate) AddNarrativeEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddNarrativeEditorIDs(ids...)
	return _c
}

// AddNarrativeEditors adds the "narrative_editors" edges to the Narrative entity.
func (_c *GroupCreate) AddNarrativeEditors(v ...*Narrative) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNarrativeEditorIDs(ids...)
}

// AddNarrativeBlockedGroupIDs adds the "narrative_blocked_groups" edge to the Narrative entity by IDs.
func (_c *GroupCreate) AddNarrativeBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddNarrativeBlockedGroupIDs(ids...)
	return _c
}

// AddNarrativeBlockedGroups adds the "narrative_blocked_groups" edges to the Narrative entity.
func (_c *GroupCreate) AddNarrativeBlockedGroups(v ...*Narrative) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNarrativeBlockedGroupIDs(ids...)
}

// AddNarrativeViewerIDs adds the "narrative_viewers" edge to the Narrative entity by IDs.
func (_c *GroupCreate) AddNarrativeViewerIDs(ids ...string) *GroupCreate {
	_c.mutation.AddNarrativeViewerIDs(ids...)
	return _c
}

// AddNarrativeViewers adds the "narrative_viewers" edges to the Narrative entity.
func (_c *GroupCreate) AddNarrativeViewers(v ...*Narrative) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNarrativeViewerIDs(ids...)
}

// AddControlImplementationEditorIDs adds the "control_implementation_editors" edge to the ControlImplementation entity by IDs.
func (_c *GroupCreate) AddControlImplementationEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddControlImplementationEditorIDs(ids...)
	return _c
}

// AddControlImplementationEditors adds the "control_implementation_editors" edges to the ControlImplementation entity.
func (_c *GroupCreate) AddControlImplementationEditors(v ...*ControlImplementation) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlImplementationEditorIDs(ids...)
}

// AddControlImplementationBlockedGroupIDs adds the "control_implementation_blocked_groups" edge to the ControlImplementation entity by IDs.
func (_c *GroupCreate) AddControlImplementationBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddControlImplementationBlockedGroupIDs(ids...)
	return _c
}

// AddControlImplementationBlockedGroups adds the "control_implementation_blocked_groups" edges to the ControlImplementation entity.
func (_c *GroupCreate) AddControlImplementationBlockedGroups(v ...*ControlImplementation) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlImplementationBlockedGroupIDs(ids...)
}

// AddControlImplementationViewerIDs adds the "control_implementation_viewers" edge to the ControlImplementation entity by IDs.
func (_c *GroupCreate) AddControlImplementationViewerIDs(ids ...string) *GroupCreate {
	_c.mutation.AddControlImplementationViewerIDs(ids...)
	return _c
}

// AddControlImplementationViewers adds the "control_implementation_viewers" edges to the ControlImplementation entity.
func (_c *GroupCreate) AddControlImplementationViewers(v ...*ControlImplementation) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlImplementationViewerIDs(ids...)
}

// AddScanEditorIDs adds the "scan_editors" edge to the Scan entity by IDs.
func (_c *GroupCreate) AddScanEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddScanEditorIDs(ids...)
	return _c
}

// AddScanEditors adds the "scan_editors" edges to the Scan entity.
func (_c *GroupCreate) AddScanEditors(v ...*Scan) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScanEditorIDs(ids...)
}

// AddScanBlockedGroupIDs adds the "scan_blocked_groups" edge to the Scan entity by IDs.
func (_c *GroupCreate) AddScanBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddScanBlockedGroupIDs(ids...)
	return _c
}

// AddScanBlockedGroups adds the "scan_blocked_groups" edges to the Scan entity.
func (_c *GroupCreate) AddScanBlockedGroups(v ...*Scan) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScanBlockedGroupIDs(ids...)
}

// AddScanViewerIDs adds the "scan_viewers" edge to the Scan entity by IDs.
func (_c *GroupCreate) AddScanViewerIDs(ids ...string) *GroupCreate {
	_c.mutation.AddScanViewerIDs(ids...)
	return _c
}

// AddScanViewers adds the "scan_viewers" edges to the Scan entity.
func (_c *GroupCreate) AddScanViewers(v ...*Scan) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScanViewerIDs(ids...)
}

// AddEntityEditorIDs adds the "entity_editors" edge to the Entity entity by IDs.
func (_c *GroupCreate) AddEntityEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddEntityEditorIDs(ids...)
	return _c
}

// AddEntityEditors adds the "entity_editors" edges to the Entity entity.
func (_c *GroupCreate) AddEntityEditors(v ...*Entity) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntityEditorIDs(ids...)
}

// AddEntityBlockedGroupIDs adds the "entity_blocked_groups" edge to the Entity entity by IDs.
func (_c *GroupCreate) AddEntityBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddEntityBlockedGroupIDs(ids...)
	return _c
}

// AddEntityBlockedGroups adds the "entity_blocked_groups" edges to the Entity entity.
func (_c *GroupCreate) AddEntityBlockedGroups(v ...*Entity) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntityBlockedGroupIDs(ids...)
}

// AddEntityViewerIDs adds the "entity_viewers" edge to the Entity entity by IDs.
func (_c *GroupCreate) AddEntityViewerIDs(ids ...string) *GroupCreate {
	_c.mutation.AddEntityViewerIDs(ids...)
	return _c
}

// AddEntityViewers adds the "entity_viewers" edges to the Entity entity.
func (_c *GroupCreate) AddEntityViewers(v ...*Entity) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntityViewerIDs(ids...)
}

// AddProcedureEditorIDs adds the "procedure_editors" edge to the Procedure entity by IDs.
func (_c *GroupCreate) AddProcedureEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddProcedureEditorIDs(ids...)
	return _c
}

// AddProcedureEditors adds the "procedure_editors" edges to the Procedure entity.
func (_c *GroupCreate) AddProcedureEditors(v ...*Procedure) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProcedureEditorIDs(ids...)
}

// AddProcedureBlockedGroupIDs adds the "procedure_blocked_groups" edge to the Procedure entity by IDs.
func (_c *GroupCreate) AddProcedureBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddProcedureBlockedGroupIDs(ids...)
	return _c
}

// AddProcedureBlockedGroups adds the "procedure_blocked_groups" edges to the Procedure entity.
func (_c *GroupCreate) AddProcedureBlockedGroups(v ...*Procedure) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProcedureBlockedGroupIDs(ids...)
}

// AddInternalPolicyEditorIDs adds the "internal_policy_editors" edge to the InternalPolicy entity by IDs.
func (_c *GroupCreate) AddInternalPolicyEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddInternalPolicyEditorIDs(ids...)
	return _c
}

// AddInternalPolicyEditors adds the "internal_policy_editors" edges to the InternalPolicy entity.
func (_c *GroupCreate) AddInternalPolicyEditors(v ...*InternalPolicy) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInternalPolicyEditorIDs(ids...)
}

// AddInternalPolicyBlockedGroupIDs adds the "internal_policy_blocked_groups" edge to the InternalPolicy entity by IDs.
func (_c *GroupCreate) AddInternalPolicyBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddInternalPolicyBlockedGroupIDs(ids...)
	return _c
}

// AddInternalPolicyBlockedGroups adds the "internal_policy_blocked_groups" edges to the InternalPolicy entity.
func (_c *GroupCreate) AddInternalPolicyBlockedGroups(v ...*InternalPolicy) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInternalPolicyBlockedGroupIDs(ids...)
}

// AddControlEditorIDs adds the "control_editors" edge to the Control entity by IDs.
func (_c *GroupCreate) AddControlEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddControlEditorIDs(ids...)
	return _c
}

// AddControlEditors adds the "control_editors" edges to the Control entity.
func (_c *GroupCreate) AddControlEditors(v ...*Control) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlEditorIDs(ids...)
}

// AddControlBlockedGroupIDs adds the "control_blocked_groups" edge to the Control entity by IDs.
func (_c *GroupCreate) AddControlBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddControlBlockedGroupIDs(ids...)
	return _c
}

// AddControlBlockedGroups adds the "control_blocked_groups" edges to the Control entity.
func (_c *GroupCreate) AddControlBlockedGroups(v ...*Control) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlBlockedGroupIDs(ids...)
}

// AddMappedControlEditorIDs adds the "mapped_control_editors" edge to the MappedControl entity by IDs.
func (_c *GroupCreate) AddMappedControlEditorIDs(ids ...string) *GroupCreate {
	_c.mutation.AddMappedControlEditorIDs(ids...)
	return _c
}

// AddMappedControlEditors adds the "mapped_control_editors" edges to the MappedControl entity.
func (_c *GroupCreate) AddMappedControlEditors(v ...*MappedControl) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMappedControlEditorIDs(ids...)
}

// AddMappedControlBlockedGroupIDs adds the "mapped_control_blocked_groups" edge to the MappedControl entity by IDs.
func (_c *GroupCreate) AddMappedControlBlockedGroupIDs(ids ...string) *GroupCreate {
	_c.mutation.AddMappedControlBlockedGroupIDs(ids...)
	return _c
}

// AddMappedControlBlockedGroups adds the "mapped_control_blocked_groups" edges to the MappedControl entity.
func (_c *GroupCreate) AddMappedControlBlockedGroups(v ...*MappedControl) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMappedControlBlockedGroupIDs(ids...)
}

// SetSettingID sets the "setting" edge to the GroupSetting entity by ID.
func (_c *GroupCreate) SetSettingID(id string) *GroupCreate {
	_c.mutation.SetSettingID(id)
	return _c
}

// SetNillableSettingID sets the "setting" edge to the GroupSetting entity by ID if the given value is not nil.
func (_c *GroupCreate) SetNillableSettingID(id *string) *GroupCreate {
	if id != nil {
		_c = _c.SetSettingID(*id)
	}
	return _c
}

// SetSetting sets the "setting" edge to the GroupSetting entity.
func (_c *GroupCreate) SetSetting(v *GroupSetting) *GroupCreate {
	return _c.SetSettingID(v.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_c *GroupCreate) AddUserIDs(ids ...string) *GroupCreate {
	_c.mutation.AddUserIDs(ids...)
	return _c
}

// AddUsers adds the "users" edges to the User entity.
func (_c *GroupCreate) AddUsers(v ...*User) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_c *GroupCreate) AddEventIDs(ids ...string) *GroupCreate {
	_c.mutation.AddEventIDs(ids...)
	return _c
}

// AddEvents adds the "events" edges to the Event entity.
func (_c *GroupCreate) AddEvents(v ...*Event) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_c *GroupCreate) AddIntegrationIDs(ids ...string) *GroupCreate {
	_c.mutation.AddIntegrationIDs(ids...)
	return _c
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_c *GroupCreate) AddIntegrations(v ...*Integration) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddIntegrationIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_c *GroupCreate) AddFileIDs(ids ...string) *GroupCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the File entity.
func (_c *GroupCreate) AddFiles(v ...*File) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_c *GroupCreate) AddTaskIDs(ids ...string) *GroupCreate {
	_c.mutation.AddTaskIDs(ids...)
	return _c
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_c *GroupCreate) AddTasks(v ...*Task) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTaskIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (_c *GroupCreate) AddInviteIDs(ids ...string) *GroupCreate {
	_c.mutation.AddInviteIDs(ids...)
	return _c
}

// AddInvites adds the "invites" edges to the Invite entity.
func (_c *GroupCreate) AddInvites(v ...*Invite) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInviteIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the GroupMembership entity by IDs.
func (_c *GroupCreate) AddMemberIDs(ids ...string) *GroupCreate {
	_c.mutation.AddMemberIDs(ids...)
	return _c
}

// AddMembers adds the "members" edges to the GroupMembership entity.
func (_c *GroupCreate) AddMembers(v ...*GroupMembership) *GroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMemberIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (_c *GroupCreate) Mutation() *GroupMutation {
	return _c.mutation
}

// Save creates the Group in the database.
func (_c *GroupCreate) Save(ctx context.Context) (*Group, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GroupCreate) SaveX(ctx context.Context) *Group {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GroupCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GroupCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GroupCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if group.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized group.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := group.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if group.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized group.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := group.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := group.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.IsManaged(); !ok {
		v := group.DefaultIsManaged
		_c.mutation.SetIsManaged(v)
	}
	if _, ok := _c.mutation.DisplayName(); !ok {
		v := group.DefaultDisplayName
		_c.mutation.SetDisplayName(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if group.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized group.DefaultID (forgotten import generated/runtime?)")
		}
		v := group.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *GroupCreate) check() error {
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "Group.display_id"`)}
	}
	if v, ok := _c.mutation.DisplayID(); ok {
		if err := group.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "Group.display_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := group.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Group.owner_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Group.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.GravatarLogoURL(); ok {
		if err := group.GravatarLogoURLValidator(v); err != nil {
			return &ValidationError{Name: "gravatar_logo_url", err: fmt.Errorf(`generated: validator failed for field "Group.gravatar_logo_url": %w`, err)}
		}
	}
	if v, ok := _c.mutation.LogoURL(); ok {
		if err := group.LogoURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_url", err: fmt.Errorf(`generated: validator failed for field "Group.logo_url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "Group.display_name"`)}
	}
	if v, ok := _c.mutation.DisplayName(); ok {
		if err := group.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Group.display_name": %w`, err)}
		}
	}
	return nil
}

func (_c *GroupCreate) sqlSave(ctx context.Context) (*Group, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Group.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GroupCreate) createSpec() (*Group, *sqlgraph.CreateSpec) {
	var (
		_node = &Group{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(group.Table, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Group
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(group.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(group.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(group.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(group.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(group.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(group.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.IsManaged(); ok {
		_spec.SetField(group.FieldIsManaged, field.TypeBool, value)
		_node.IsManaged = value
	}
	if value, ok := _c.mutation.GravatarLogoURL(); ok {
		_spec.SetField(group.FieldGravatarLogoURL, field.TypeString, value)
		_node.GravatarLogoURL = value
	}
	if value, ok := _c.mutation.LogoURL(); ok {
		_spec.SetField(group.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := _c.mutation.DisplayName(); ok {
		_spec.SetField(group.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramEditorsTable,
			Columns: group.ProgramEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramBlockedGroupsTable,
			Columns: group.ProgramBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProgramViewersTable,
			Columns: group.ProgramViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RiskEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskEditorsTable,
			Columns: group.RiskEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RiskBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskBlockedGroupsTable,
			Columns: group.RiskBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RiskViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.RiskViewersTable,
			Columns: group.RiskViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectiveEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveEditorsTable,
			Columns: group.ControlObjectiveEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlObjectiveEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectiveBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveBlockedGroupsTable,
			Columns: group.ControlObjectiveBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlObjectiveBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectiveViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlObjectiveViewersTable,
			Columns: group.ControlObjectiveViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlObjectiveViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NarrativeEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeEditorsTable,
			Columns: group.NarrativeEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.NarrativeEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NarrativeBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeBlockedGroupsTable,
			Columns: group.NarrativeBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.NarrativeBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NarrativeViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.NarrativeViewersTable,
			Columns: group.NarrativeViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.NarrativeViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlImplementationEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationEditorsTable,
			Columns: group.ControlImplementationEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlImplementationBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationBlockedGroupsTable,
			Columns: group.ControlImplementationBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlImplementationViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlImplementationViewersTable,
			Columns: group.ControlImplementationViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScanEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanEditorsTable,
			Columns: group.ScanEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScanBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanBlockedGroupsTable,
			Columns: group.ScanBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScanViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ScanViewersTable,
			Columns: group.ScanViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntityEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityEditorsTable,
			Columns: group.EntityEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntityBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityBlockedGroupsTable,
			Columns: group.EntityBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntityViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.EntityViewersTable,
			Columns: group.EntityViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProcedureEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureEditorsTable,
			Columns: group.ProcedureEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProcedureBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ProcedureBlockedGroupsTable,
			Columns: group.ProcedureBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InternalPolicyEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyEditorsTable,
			Columns: group.InternalPolicyEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InternalPolicyBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InternalPolicyBlockedGroupsTable,
			Columns: group.InternalPolicyBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlEditorsTable,
			Columns: group.ControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.ControlBlockedGroupsTable,
			Columns: group.ControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MappedControlEditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlEditorsTable,
			Columns: group.MappedControlEditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MappedControlBlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MappedControlBlockedGroupsTable,
			Columns: group.MappedControlBlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: _c.config, mutation: newGroupMembershipMutation(_c.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.EventsTable,
			Columns: group.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.IntegrationsTable,
			Columns: []string{group.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: group.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   group.TasksTable,
			Columns: group.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.InvitesTable,
			Columns: group.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InviteGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupCreateBulk is the builder for creating many Group entities in bulk.
type GroupCreateBulk struct {
	config
	err      error
	builders []*GroupCreate
}

// Save creates the Group entities in the database.
func (_c *GroupCreateBulk) Save(ctx context.Context) ([]*Group, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Group, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GroupCreateBulk) SaveX(ctx context.Context) []*Group {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GroupCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GroupCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
