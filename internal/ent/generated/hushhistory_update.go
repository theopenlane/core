// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// HushHistoryUpdate is the builder for updating HushHistory entities.
type HushHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *HushHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the HushHistoryUpdate builder.
func (hhu *HushHistoryUpdate) Where(ps ...predicate.HushHistory) *HushHistoryUpdate {
	hhu.mutation.Where(ps...)
	return hhu
}

// SetUpdatedAt sets the "updated_at" field.
func (hhu *HushHistoryUpdate) SetUpdatedAt(t time.Time) *HushHistoryUpdate {
	hhu.mutation.SetUpdatedAt(t)
	return hhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hhu *HushHistoryUpdate) ClearUpdatedAt() *HushHistoryUpdate {
	hhu.mutation.ClearUpdatedAt()
	return hhu
}

// SetUpdatedByID sets the "updated_by_id" field.
func (hhu *HushHistoryUpdate) SetUpdatedByID(s string) *HushHistoryUpdate {
	hhu.mutation.SetUpdatedByID(s)
	return hhu
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (hhu *HushHistoryUpdate) SetNillableUpdatedByID(s *string) *HushHistoryUpdate {
	if s != nil {
		hhu.SetUpdatedByID(*s)
	}
	return hhu
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (hhu *HushHistoryUpdate) ClearUpdatedByID() *HushHistoryUpdate {
	hhu.mutation.ClearUpdatedByID()
	return hhu
}

// SetUpdatedByUserID sets the "updated_by_user_id" field.
func (hhu *HushHistoryUpdate) SetUpdatedByUserID(s string) *HushHistoryUpdate {
	hhu.mutation.SetUpdatedByUserID(s)
	return hhu
}

// SetNillableUpdatedByUserID sets the "updated_by_user_id" field if the given value is not nil.
func (hhu *HushHistoryUpdate) SetNillableUpdatedByUserID(s *string) *HushHistoryUpdate {
	if s != nil {
		hhu.SetUpdatedByUserID(*s)
	}
	return hhu
}

// ClearUpdatedByUserID clears the value of the "updated_by_user_id" field.
func (hhu *HushHistoryUpdate) ClearUpdatedByUserID() *HushHistoryUpdate {
	hhu.mutation.ClearUpdatedByUserID()
	return hhu
}

// SetUpdatedByServiceID sets the "updated_by_service_id" field.
func (hhu *HushHistoryUpdate) SetUpdatedByServiceID(s string) *HushHistoryUpdate {
	hhu.mutation.SetUpdatedByServiceID(s)
	return hhu
}

// SetNillableUpdatedByServiceID sets the "updated_by_service_id" field if the given value is not nil.
func (hhu *HushHistoryUpdate) SetNillableUpdatedByServiceID(s *string) *HushHistoryUpdate {
	if s != nil {
		hhu.SetUpdatedByServiceID(*s)
	}
	return hhu
}

// ClearUpdatedByServiceID clears the value of the "updated_by_service_id" field.
func (hhu *HushHistoryUpdate) ClearUpdatedByServiceID() *HushHistoryUpdate {
	hhu.mutation.ClearUpdatedByServiceID()
	return hhu
}

// SetName sets the "name" field.
func (hhu *HushHistoryUpdate) SetName(s string) *HushHistoryUpdate {
	hhu.mutation.SetName(s)
	return hhu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hhu *HushHistoryUpdate) SetNillableName(s *string) *HushHistoryUpdate {
	if s != nil {
		hhu.SetName(*s)
	}
	return hhu
}

// SetDescription sets the "description" field.
func (hhu *HushHistoryUpdate) SetDescription(s string) *HushHistoryUpdate {
	hhu.mutation.SetDescription(s)
	return hhu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hhu *HushHistoryUpdate) SetNillableDescription(s *string) *HushHistoryUpdate {
	if s != nil {
		hhu.SetDescription(*s)
	}
	return hhu
}

// ClearDescription clears the value of the "description" field.
func (hhu *HushHistoryUpdate) ClearDescription() *HushHistoryUpdate {
	hhu.mutation.ClearDescription()
	return hhu
}

// SetKind sets the "kind" field.
func (hhu *HushHistoryUpdate) SetKind(s string) *HushHistoryUpdate {
	hhu.mutation.SetKind(s)
	return hhu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (hhu *HushHistoryUpdate) SetNillableKind(s *string) *HushHistoryUpdate {
	if s != nil {
		hhu.SetKind(*s)
	}
	return hhu
}

// ClearKind clears the value of the "kind" field.
func (hhu *HushHistoryUpdate) ClearKind() *HushHistoryUpdate {
	hhu.mutation.ClearKind()
	return hhu
}

// Mutation returns the HushHistoryMutation object of the builder.
func (hhu *HushHistoryUpdate) Mutation() *HushHistoryMutation {
	return hhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hhu *HushHistoryUpdate) Save(ctx context.Context) (int, error) {
	hhu.defaults()
	return withHooks(ctx, hhu.sqlSave, hhu.mutation, hhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hhu *HushHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hhu *HushHistoryUpdate) Exec(ctx context.Context) error {
	_, err := hhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hhu *HushHistoryUpdate) ExecX(ctx context.Context) {
	if err := hhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hhu *HushHistoryUpdate) defaults() {
	if _, ok := hhu.mutation.UpdatedAt(); !ok && !hhu.mutation.UpdatedAtCleared() {
		v := hushhistory.UpdateDefaultUpdatedAt()
		hhu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hhu *HushHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HushHistoryUpdate {
	hhu.modifiers = append(hhu.modifiers, modifiers...)
	return hhu
}

func (hhu *HushHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hushhistory.Table, hushhistory.Columns, sqlgraph.NewFieldSpec(hushhistory.FieldID, field.TypeString))
	if ps := hhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hhu.mutation.RefCleared() {
		_spec.ClearField(hushhistory.FieldRef, field.TypeString)
	}
	if hhu.mutation.UpdatedByCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedBy, field.TypeString)
	}
	if hhu.mutation.CreatedAtCleared() {
		_spec.ClearField(hushhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hhu.mutation.UpdatedAt(); ok {
		_spec.SetField(hushhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if hhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedAt, field.TypeTime)
	}
	if hhu.mutation.CreatedByIDCleared() {
		_spec.ClearField(hushhistory.FieldCreatedByID, field.TypeString)
	}
	if value, ok := hhu.mutation.UpdatedByID(); ok {
		_spec.SetField(hushhistory.FieldUpdatedByID, field.TypeString, value)
	}
	if hhu.mutation.UpdatedByIDCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedByID, field.TypeString)
	}
	if hhu.mutation.CreatedByUserIDCleared() {
		_spec.ClearField(hushhistory.FieldCreatedByUserID, field.TypeString)
	}
	if value, ok := hhu.mutation.UpdatedByUserID(); ok {
		_spec.SetField(hushhistory.FieldUpdatedByUserID, field.TypeString, value)
	}
	if hhu.mutation.UpdatedByUserIDCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedByUserID, field.TypeString)
	}
	if hhu.mutation.CreatedByServiceIDCleared() {
		_spec.ClearField(hushhistory.FieldCreatedByServiceID, field.TypeString)
	}
	if value, ok := hhu.mutation.UpdatedByServiceID(); ok {
		_spec.SetField(hushhistory.FieldUpdatedByServiceID, field.TypeString, value)
	}
	if hhu.mutation.UpdatedByServiceIDCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedByServiceID, field.TypeString)
	}
	if hhu.mutation.DeletedAtCleared() {
		_spec.ClearField(hushhistory.FieldDeletedAt, field.TypeTime)
	}
	if hhu.mutation.DeletedByIDCleared() {
		_spec.ClearField(hushhistory.FieldDeletedByID, field.TypeString)
	}
	if value, ok := hhu.mutation.Name(); ok {
		_spec.SetField(hushhistory.FieldName, field.TypeString, value)
	}
	if value, ok := hhu.mutation.Description(); ok {
		_spec.SetField(hushhistory.FieldDescription, field.TypeString, value)
	}
	if hhu.mutation.DescriptionCleared() {
		_spec.ClearField(hushhistory.FieldDescription, field.TypeString)
	}
	if value, ok := hhu.mutation.Kind(); ok {
		_spec.SetField(hushhistory.FieldKind, field.TypeString, value)
	}
	if hhu.mutation.KindCleared() {
		_spec.ClearField(hushhistory.FieldKind, field.TypeString)
	}
	if hhu.mutation.SecretNameCleared() {
		_spec.ClearField(hushhistory.FieldSecretName, field.TypeString)
	}
	if hhu.mutation.SecretValueCleared() {
		_spec.ClearField(hushhistory.FieldSecretValue, field.TypeString)
	}
	_spec.Node.Schema = hhu.schemaConfig.HushHistory
	ctx = internal.NewSchemaConfigContext(ctx, hhu.schemaConfig)
	_spec.AddModifiers(hhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, hhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hushhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hhu.mutation.done = true
	return n, nil
}

// HushHistoryUpdateOne is the builder for updating a single HushHistory entity.
type HushHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *HushHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (hhuo *HushHistoryUpdateOne) SetUpdatedAt(t time.Time) *HushHistoryUpdateOne {
	hhuo.mutation.SetUpdatedAt(t)
	return hhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hhuo *HushHistoryUpdateOne) ClearUpdatedAt() *HushHistoryUpdateOne {
	hhuo.mutation.ClearUpdatedAt()
	return hhuo
}

// SetUpdatedByID sets the "updated_by_id" field.
func (hhuo *HushHistoryUpdateOne) SetUpdatedByID(s string) *HushHistoryUpdateOne {
	hhuo.mutation.SetUpdatedByID(s)
	return hhuo
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (hhuo *HushHistoryUpdateOne) SetNillableUpdatedByID(s *string) *HushHistoryUpdateOne {
	if s != nil {
		hhuo.SetUpdatedByID(*s)
	}
	return hhuo
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (hhuo *HushHistoryUpdateOne) ClearUpdatedByID() *HushHistoryUpdateOne {
	hhuo.mutation.ClearUpdatedByID()
	return hhuo
}

// SetUpdatedByUserID sets the "updated_by_user_id" field.
func (hhuo *HushHistoryUpdateOne) SetUpdatedByUserID(s string) *HushHistoryUpdateOne {
	hhuo.mutation.SetUpdatedByUserID(s)
	return hhuo
}

// SetNillableUpdatedByUserID sets the "updated_by_user_id" field if the given value is not nil.
func (hhuo *HushHistoryUpdateOne) SetNillableUpdatedByUserID(s *string) *HushHistoryUpdateOne {
	if s != nil {
		hhuo.SetUpdatedByUserID(*s)
	}
	return hhuo
}

// ClearUpdatedByUserID clears the value of the "updated_by_user_id" field.
func (hhuo *HushHistoryUpdateOne) ClearUpdatedByUserID() *HushHistoryUpdateOne {
	hhuo.mutation.ClearUpdatedByUserID()
	return hhuo
}

// SetUpdatedByServiceID sets the "updated_by_service_id" field.
func (hhuo *HushHistoryUpdateOne) SetUpdatedByServiceID(s string) *HushHistoryUpdateOne {
	hhuo.mutation.SetUpdatedByServiceID(s)
	return hhuo
}

// SetNillableUpdatedByServiceID sets the "updated_by_service_id" field if the given value is not nil.
func (hhuo *HushHistoryUpdateOne) SetNillableUpdatedByServiceID(s *string) *HushHistoryUpdateOne {
	if s != nil {
		hhuo.SetUpdatedByServiceID(*s)
	}
	return hhuo
}

// ClearUpdatedByServiceID clears the value of the "updated_by_service_id" field.
func (hhuo *HushHistoryUpdateOne) ClearUpdatedByServiceID() *HushHistoryUpdateOne {
	hhuo.mutation.ClearUpdatedByServiceID()
	return hhuo
}

// SetName sets the "name" field.
func (hhuo *HushHistoryUpdateOne) SetName(s string) *HushHistoryUpdateOne {
	hhuo.mutation.SetName(s)
	return hhuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hhuo *HushHistoryUpdateOne) SetNillableName(s *string) *HushHistoryUpdateOne {
	if s != nil {
		hhuo.SetName(*s)
	}
	return hhuo
}

// SetDescription sets the "description" field.
func (hhuo *HushHistoryUpdateOne) SetDescription(s string) *HushHistoryUpdateOne {
	hhuo.mutation.SetDescription(s)
	return hhuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hhuo *HushHistoryUpdateOne) SetNillableDescription(s *string) *HushHistoryUpdateOne {
	if s != nil {
		hhuo.SetDescription(*s)
	}
	return hhuo
}

// ClearDescription clears the value of the "description" field.
func (hhuo *HushHistoryUpdateOne) ClearDescription() *HushHistoryUpdateOne {
	hhuo.mutation.ClearDescription()
	return hhuo
}

// SetKind sets the "kind" field.
func (hhuo *HushHistoryUpdateOne) SetKind(s string) *HushHistoryUpdateOne {
	hhuo.mutation.SetKind(s)
	return hhuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (hhuo *HushHistoryUpdateOne) SetNillableKind(s *string) *HushHistoryUpdateOne {
	if s != nil {
		hhuo.SetKind(*s)
	}
	return hhuo
}

// ClearKind clears the value of the "kind" field.
func (hhuo *HushHistoryUpdateOne) ClearKind() *HushHistoryUpdateOne {
	hhuo.mutation.ClearKind()
	return hhuo
}

// Mutation returns the HushHistoryMutation object of the builder.
func (hhuo *HushHistoryUpdateOne) Mutation() *HushHistoryMutation {
	return hhuo.mutation
}

// Where appends a list predicates to the HushHistoryUpdate builder.
func (hhuo *HushHistoryUpdateOne) Where(ps ...predicate.HushHistory) *HushHistoryUpdateOne {
	hhuo.mutation.Where(ps...)
	return hhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hhuo *HushHistoryUpdateOne) Select(field string, fields ...string) *HushHistoryUpdateOne {
	hhuo.fields = append([]string{field}, fields...)
	return hhuo
}

// Save executes the query and returns the updated HushHistory entity.
func (hhuo *HushHistoryUpdateOne) Save(ctx context.Context) (*HushHistory, error) {
	hhuo.defaults()
	return withHooks(ctx, hhuo.sqlSave, hhuo.mutation, hhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hhuo *HushHistoryUpdateOne) SaveX(ctx context.Context) *HushHistory {
	node, err := hhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hhuo *HushHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := hhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hhuo *HushHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := hhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hhuo *HushHistoryUpdateOne) defaults() {
	if _, ok := hhuo.mutation.UpdatedAt(); !ok && !hhuo.mutation.UpdatedAtCleared() {
		v := hushhistory.UpdateDefaultUpdatedAt()
		hhuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hhuo *HushHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HushHistoryUpdateOne {
	hhuo.modifiers = append(hhuo.modifiers, modifiers...)
	return hhuo
}

func (hhuo *HushHistoryUpdateOne) sqlSave(ctx context.Context) (_node *HushHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(hushhistory.Table, hushhistory.Columns, sqlgraph.NewFieldSpec(hushhistory.FieldID, field.TypeString))
	id, ok := hhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "HushHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hushhistory.FieldID)
		for _, f := range fields {
			if !hushhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != hushhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hhuo.mutation.RefCleared() {
		_spec.ClearField(hushhistory.FieldRef, field.TypeString)
	}
	if hhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedBy, field.TypeString)
	}
	if hhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(hushhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := hhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hushhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if hhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedAt, field.TypeTime)
	}
	if hhuo.mutation.CreatedByIDCleared() {
		_spec.ClearField(hushhistory.FieldCreatedByID, field.TypeString)
	}
	if value, ok := hhuo.mutation.UpdatedByID(); ok {
		_spec.SetField(hushhistory.FieldUpdatedByID, field.TypeString, value)
	}
	if hhuo.mutation.UpdatedByIDCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedByID, field.TypeString)
	}
	if hhuo.mutation.CreatedByUserIDCleared() {
		_spec.ClearField(hushhistory.FieldCreatedByUserID, field.TypeString)
	}
	if value, ok := hhuo.mutation.UpdatedByUserID(); ok {
		_spec.SetField(hushhistory.FieldUpdatedByUserID, field.TypeString, value)
	}
	if hhuo.mutation.UpdatedByUserIDCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedByUserID, field.TypeString)
	}
	if hhuo.mutation.CreatedByServiceIDCleared() {
		_spec.ClearField(hushhistory.FieldCreatedByServiceID, field.TypeString)
	}
	if value, ok := hhuo.mutation.UpdatedByServiceID(); ok {
		_spec.SetField(hushhistory.FieldUpdatedByServiceID, field.TypeString, value)
	}
	if hhuo.mutation.UpdatedByServiceIDCleared() {
		_spec.ClearField(hushhistory.FieldUpdatedByServiceID, field.TypeString)
	}
	if hhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(hushhistory.FieldDeletedAt, field.TypeTime)
	}
	if hhuo.mutation.DeletedByIDCleared() {
		_spec.ClearField(hushhistory.FieldDeletedByID, field.TypeString)
	}
	if value, ok := hhuo.mutation.Name(); ok {
		_spec.SetField(hushhistory.FieldName, field.TypeString, value)
	}
	if value, ok := hhuo.mutation.Description(); ok {
		_spec.SetField(hushhistory.FieldDescription, field.TypeString, value)
	}
	if hhuo.mutation.DescriptionCleared() {
		_spec.ClearField(hushhistory.FieldDescription, field.TypeString)
	}
	if value, ok := hhuo.mutation.Kind(); ok {
		_spec.SetField(hushhistory.FieldKind, field.TypeString, value)
	}
	if hhuo.mutation.KindCleared() {
		_spec.ClearField(hushhistory.FieldKind, field.TypeString)
	}
	if hhuo.mutation.SecretNameCleared() {
		_spec.ClearField(hushhistory.FieldSecretName, field.TypeString)
	}
	if hhuo.mutation.SecretValueCleared() {
		_spec.ClearField(hushhistory.FieldSecretValue, field.TypeString)
	}
	_spec.Node.Schema = hhuo.schemaConfig.HushHistory
	ctx = internal.NewSchemaConfigContext(ctx, hhuo.schemaConfig)
	_spec.AddModifiers(hhuo.modifiers...)
	_node = &HushHistory{config: hhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hushhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hhuo.mutation.done = true
	return _node, nil
}
