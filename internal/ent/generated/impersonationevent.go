// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/impersonationevent"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// ImpersonationEvent is the model entity for the ImpersonationEvent schema.
type ImpersonationEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// Type of impersonation: SUPPORT, ADMIN, JOB
	ImpersonationType enums.ImpersonationType `json:"impersonation_type,omitempty"`
	// Action for the impersonation event
	Action enums.ImpersonationAction `json:"action,omitempty"`
	// Reason for impersonation
	Reason string `json:"reason,omitempty"`
	// IP address of the impersonator
	IPAddress string `json:"ip_address,omitempty"`
	// User-Agent of the impersonator
	UserAgent string `json:"user_agent,omitempty"`
	// Granted scopes during impersonation
	Scopes []string `json:"scopes,omitempty"`
	// Impersonator user id
	UserID string `json:"user_id,omitempty"`
	// id of the organization that is being impersonated
	OrganizationID string `json:"organization_id,omitempty"`
	// id of the user that is being impersonated
	TargetUserID string `json:"target_user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImpersonationEventQuery when eager-loading is set.
	Edges        ImpersonationEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ImpersonationEventEdges holds the relations/edges for other nodes in the graph.
type ImpersonationEventEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// TargetUser holds the value of the target_user edge.
	TargetUser *User `json:"target_user,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImpersonationEventEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TargetUserOrErr returns the TargetUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImpersonationEventEdges) TargetUserOrErr() (*User, error) {
	if e.TargetUser != nil {
		return e.TargetUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "target_user"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImpersonationEventEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImpersonationEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case impersonationevent.FieldTags, impersonationevent.FieldScopes:
			values[i] = new([]byte)
		case impersonationevent.FieldID, impersonationevent.FieldCreatedBy, impersonationevent.FieldUpdatedBy, impersonationevent.FieldDeletedBy, impersonationevent.FieldImpersonationType, impersonationevent.FieldAction, impersonationevent.FieldReason, impersonationevent.FieldIPAddress, impersonationevent.FieldUserAgent, impersonationevent.FieldUserID, impersonationevent.FieldOrganizationID, impersonationevent.FieldTargetUserID:
			values[i] = new(sql.NullString)
		case impersonationevent.FieldCreatedAt, impersonationevent.FieldUpdatedAt, impersonationevent.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImpersonationEvent fields.
func (_m *ImpersonationEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case impersonationevent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case impersonationevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case impersonationevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case impersonationevent.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case impersonationevent.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case impersonationevent.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case impersonationevent.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case impersonationevent.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case impersonationevent.FieldImpersonationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field impersonation_type", values[i])
			} else if value.Valid {
				_m.ImpersonationType = enums.ImpersonationType(value.String)
			}
		case impersonationevent.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				_m.Action = enums.ImpersonationAction(value.String)
			}
		case impersonationevent.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				_m.Reason = value.String
			}
		case impersonationevent.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				_m.IPAddress = value.String
			}
		case impersonationevent.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case impersonationevent.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case impersonationevent.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case impersonationevent.FieldOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				_m.OrganizationID = value.String
			}
		case impersonationevent.FieldTargetUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_user_id", values[i])
			} else if value.Valid {
				_m.TargetUserID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImpersonationEvent.
// This includes values selected through modifiers, order, etc.
func (_m *ImpersonationEvent) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ImpersonationEvent entity.
func (_m *ImpersonationEvent) QueryUser() *UserQuery {
	return NewImpersonationEventClient(_m.config).QueryUser(_m)
}

// QueryTargetUser queries the "target_user" edge of the ImpersonationEvent entity.
func (_m *ImpersonationEvent) QueryTargetUser() *UserQuery {
	return NewImpersonationEventClient(_m.config).QueryTargetUser(_m)
}

// QueryOrganization queries the "organization" edge of the ImpersonationEvent entity.
func (_m *ImpersonationEvent) QueryOrganization() *OrganizationQuery {
	return NewImpersonationEventClient(_m.config).QueryOrganization(_m)
}

// Update returns a builder for updating this ImpersonationEvent.
// Note that you need to call ImpersonationEvent.Unwrap() before calling this method if this ImpersonationEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ImpersonationEvent) Update() *ImpersonationEventUpdateOne {
	return NewImpersonationEventClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ImpersonationEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ImpersonationEvent) Unwrap() *ImpersonationEvent {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: ImpersonationEvent is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ImpersonationEvent) String() string {
	var builder strings.Builder
	builder.WriteString("ImpersonationEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("impersonation_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImpersonationType))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", _m.Action))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(_m.Reason)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(_m.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Scopes))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(_m.OrganizationID)
	builder.WriteString(", ")
	builder.WriteString("target_user_id=")
	builder.WriteString(_m.TargetUserID)
	builder.WriteByte(')')
	return builder.String()
}

// ImpersonationEvents is a parsable slice of ImpersonationEvent.
type ImpersonationEvents []*ImpersonationEvent
