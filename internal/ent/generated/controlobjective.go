// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// ControlObjective is the model entity for the ControlObjective schema.
type ControlObjective struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
	Revision string `json:"revision,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// internal notes about the object creation, this field is only available to system admins
	InternalNotes *string `json:"internal_notes,omitempty"`
	// an internal identifier for the mapping, this field is only available to system admins
	SystemInternalID *string `json:"system_internal_id,omitempty"`
	// the name of the control objective
	Name string `json:"name,omitempty"`
	// the desired outcome or target of the control objective
	DesiredOutcome string `json:"desired_outcome,omitempty"`
	// status of the control objective
	Status enums.ObjectiveStatus `json:"status,omitempty"`
	// source of the control, e.g. framework, template, custom, etc.
	Source enums.ControlSource `json:"source,omitempty"`
	// type of the control objective e.g. compliance, financial, operational, etc.
	ControlObjectiveType string `json:"control_objective_type,omitempty"`
	// category of the control
	Category string `json:"category,omitempty"`
	// subcategory of the control
	Subcategory string `json:"subcategory,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ControlObjectiveQuery when eager-loading is set.
	Edges        ControlObjectiveEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ControlObjectiveEdges holds the relations/edges for other nodes in the graph.
type ControlObjectiveEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// groups that are blocked from viewing or editing the risk
	BlockedGroups []*Group `json:"blocked_groups,omitempty"`
	// provides edit access to the risk to members of the group
	Editors []*Group `json:"editors,omitempty"`
	// provides view access to the risk to members of the group
	Viewers []*Group `json:"viewers,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// Evidence holds the value of the evidence edge.
	Evidence []*Evidence `json:"evidence,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// InternalPolicies holds the value of the internal_policies edge.
	InternalPolicies []*InternalPolicy `json:"internal_policies,omitempty"`
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// Risks holds the value of the risks edge.
	Risks []*Risk `json:"risks,omitempty"`
	// Narratives holds the value of the narratives edge.
	Narratives []*Narrative `json:"narratives,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
	// totalCount holds the count of the edges above.
	totalCount [13]map[string]int

	namedBlockedGroups    map[string][]*Group
	namedEditors          map[string][]*Group
	namedViewers          map[string][]*Group
	namedPrograms         map[string][]*Program
	namedEvidence         map[string][]*Evidence
	namedControls         map[string][]*Control
	namedSubcontrols      map[string][]*Subcontrol
	namedInternalPolicies map[string][]*InternalPolicy
	namedProcedures       map[string][]*Procedure
	namedRisks            map[string][]*Risk
	namedNarratives       map[string][]*Narrative
	namedTasks            map[string][]*Task
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ControlObjectiveEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BlockedGroupsOrErr returns the BlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) BlockedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.BlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "blocked_groups"}
}

// EditorsOrErr returns the Editors value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) EditorsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Editors, nil
	}
	return nil, &NotLoadedError{edge: "editors"}
}

// ViewersOrErr returns the Viewers value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) ViewersOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Viewers, nil
	}
	return nil, &NotLoadedError{edge: "viewers"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[4] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// EvidenceOrErr returns the Evidence value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) EvidenceOrErr() ([]*Evidence, error) {
	if e.loadedTypes[5] {
		return e.Evidence, nil
	}
	return nil, &NotLoadedError{edge: "evidence"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[6] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[7] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// InternalPoliciesOrErr returns the InternalPolicies value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) InternalPoliciesOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[8] {
		return e.InternalPolicies, nil
	}
	return nil, &NotLoadedError{edge: "internal_policies"}
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[9] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// RisksOrErr returns the Risks value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) RisksOrErr() ([]*Risk, error) {
	if e.loadedTypes[10] {
		return e.Risks, nil
	}
	return nil, &NotLoadedError{edge: "risks"}
}

// NarrativesOrErr returns the Narratives value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) NarrativesOrErr() ([]*Narrative, error) {
	if e.loadedTypes[11] {
		return e.Narratives, nil
	}
	return nil, &NotLoadedError{edge: "narratives"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ControlObjectiveEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[12] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ControlObjective) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case controlobjective.FieldTags:
			values[i] = new([]byte)
		case controlobjective.FieldSystemOwned:
			values[i] = new(sql.NullBool)
		case controlobjective.FieldID, controlobjective.FieldCreatedBy, controlobjective.FieldUpdatedBy, controlobjective.FieldDeletedBy, controlobjective.FieldDisplayID, controlobjective.FieldRevision, controlobjective.FieldOwnerID, controlobjective.FieldInternalNotes, controlobjective.FieldSystemInternalID, controlobjective.FieldName, controlobjective.FieldDesiredOutcome, controlobjective.FieldStatus, controlobjective.FieldSource, controlobjective.FieldControlObjectiveType, controlobjective.FieldCategory, controlobjective.FieldSubcategory:
			values[i] = new(sql.NullString)
		case controlobjective.FieldCreatedAt, controlobjective.FieldUpdatedAt, controlobjective.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ControlObjective fields.
func (_m *ControlObjective) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case controlobjective.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case controlobjective.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case controlobjective.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case controlobjective.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case controlobjective.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case controlobjective.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case controlobjective.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case controlobjective.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				_m.DisplayID = value.String
			}
		case controlobjective.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case controlobjective.FieldRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				_m.Revision = value.String
			}
		case controlobjective.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case controlobjective.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				_m.SystemOwned = value.Bool
			}
		case controlobjective.FieldInternalNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_notes", values[i])
			} else if value.Valid {
				_m.InternalNotes = new(string)
				*_m.InternalNotes = value.String
			}
		case controlobjective.FieldSystemInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_internal_id", values[i])
			} else if value.Valid {
				_m.SystemInternalID = new(string)
				*_m.SystemInternalID = value.String
			}
		case controlobjective.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case controlobjective.FieldDesiredOutcome:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_outcome", values[i])
			} else if value.Valid {
				_m.DesiredOutcome = value.String
			}
		case controlobjective.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = enums.ObjectiveStatus(value.String)
			}
		case controlobjective.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				_m.Source = enums.ControlSource(value.String)
			}
		case controlobjective.FieldControlObjectiveType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_objective_type", values[i])
			} else if value.Valid {
				_m.ControlObjectiveType = value.String
			}
		case controlobjective.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case controlobjective.FieldSubcategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcategory", values[i])
			} else if value.Valid {
				_m.Subcategory = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ControlObjective.
// This includes values selected through modifiers, order, etc.
func (_m *ControlObjective) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryOwner() *OrganizationQuery {
	return NewControlObjectiveClient(_m.config).QueryOwner(_m)
}

// QueryBlockedGroups queries the "blocked_groups" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryBlockedGroups() *GroupQuery {
	return NewControlObjectiveClient(_m.config).QueryBlockedGroups(_m)
}

// QueryEditors queries the "editors" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryEditors() *GroupQuery {
	return NewControlObjectiveClient(_m.config).QueryEditors(_m)
}

// QueryViewers queries the "viewers" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryViewers() *GroupQuery {
	return NewControlObjectiveClient(_m.config).QueryViewers(_m)
}

// QueryPrograms queries the "programs" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryPrograms() *ProgramQuery {
	return NewControlObjectiveClient(_m.config).QueryPrograms(_m)
}

// QueryEvidence queries the "evidence" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryEvidence() *EvidenceQuery {
	return NewControlObjectiveClient(_m.config).QueryEvidence(_m)
}

// QueryControls queries the "controls" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryControls() *ControlQuery {
	return NewControlObjectiveClient(_m.config).QueryControls(_m)
}

// QuerySubcontrols queries the "subcontrols" edge of the ControlObjective entity.
func (_m *ControlObjective) QuerySubcontrols() *SubcontrolQuery {
	return NewControlObjectiveClient(_m.config).QuerySubcontrols(_m)
}

// QueryInternalPolicies queries the "internal_policies" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryInternalPolicies() *InternalPolicyQuery {
	return NewControlObjectiveClient(_m.config).QueryInternalPolicies(_m)
}

// QueryProcedures queries the "procedures" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryProcedures() *ProcedureQuery {
	return NewControlObjectiveClient(_m.config).QueryProcedures(_m)
}

// QueryRisks queries the "risks" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryRisks() *RiskQuery {
	return NewControlObjectiveClient(_m.config).QueryRisks(_m)
}

// QueryNarratives queries the "narratives" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryNarratives() *NarrativeQuery {
	return NewControlObjectiveClient(_m.config).QueryNarratives(_m)
}

// QueryTasks queries the "tasks" edge of the ControlObjective entity.
func (_m *ControlObjective) QueryTasks() *TaskQuery {
	return NewControlObjectiveClient(_m.config).QueryTasks(_m)
}

// Update returns a builder for updating this ControlObjective.
// Note that you need to call ControlObjective.Unwrap() before calling this method if this ControlObjective
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ControlObjective) Update() *ControlObjectiveUpdateOne {
	return NewControlObjectiveClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ControlObjective entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ControlObjective) Unwrap() *ControlObjective {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: ControlObjective is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ControlObjective) String() string {
	var builder strings.Builder
	builder.WriteString("ControlObjective(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(_m.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(_m.Revision)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", _m.SystemOwned))
	builder.WriteString(", ")
	if v := _m.InternalNotes; v != nil {
		builder.WriteString("internal_notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SystemInternalID; v != nil {
		builder.WriteString("system_internal_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("desired_outcome=")
	builder.WriteString(_m.DesiredOutcome)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", _m.Source))
	builder.WriteString(", ")
	builder.WriteString("control_objective_type=")
	builder.WriteString(_m.ControlObjectiveType)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	builder.WriteString("subcategory=")
	builder.WriteString(_m.Subcategory)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockedGroups returns the BlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedBlockedGroups(name string) ([]*Group, error) {
	if _m.Edges.namedBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedBlockedGroups(name string, edges ...*Group) {
	if _m.Edges.namedBlockedGroups == nil {
		_m.Edges.namedBlockedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedBlockedGroups[name] = []*Group{}
	} else {
		_m.Edges.namedBlockedGroups[name] = append(_m.Edges.namedBlockedGroups[name], edges...)
	}
}

// NamedEditors returns the Editors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedEditors(name string) ([]*Group, error) {
	if _m.Edges.namedEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedEditors(name string, edges ...*Group) {
	if _m.Edges.namedEditors == nil {
		_m.Edges.namedEditors = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedEditors[name] = []*Group{}
	} else {
		_m.Edges.namedEditors[name] = append(_m.Edges.namedEditors[name], edges...)
	}
}

// NamedViewers returns the Viewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedViewers(name string) ([]*Group, error) {
	if _m.Edges.namedViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedViewers(name string, edges ...*Group) {
	if _m.Edges.namedViewers == nil {
		_m.Edges.namedViewers = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedViewers[name] = []*Group{}
	} else {
		_m.Edges.namedViewers[name] = append(_m.Edges.namedViewers[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedPrograms(name string) ([]*Program, error) {
	if _m.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedPrograms(name string, edges ...*Program) {
	if _m.Edges.namedPrograms == nil {
		_m.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		_m.Edges.namedPrograms[name] = []*Program{}
	} else {
		_m.Edges.namedPrograms[name] = append(_m.Edges.namedPrograms[name], edges...)
	}
}

// NamedEvidence returns the Evidence named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedEvidence(name string) ([]*Evidence, error) {
	if _m.Edges.namedEvidence == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEvidence[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedEvidence(name string, edges ...*Evidence) {
	if _m.Edges.namedEvidence == nil {
		_m.Edges.namedEvidence = make(map[string][]*Evidence)
	}
	if len(edges) == 0 {
		_m.Edges.namedEvidence[name] = []*Evidence{}
	} else {
		_m.Edges.namedEvidence[name] = append(_m.Edges.namedEvidence[name], edges...)
	}
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedControls(name string) ([]*Control, error) {
	if _m.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedControls(name string, edges ...*Control) {
	if _m.Edges.namedControls == nil {
		_m.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		_m.Edges.namedControls[name] = []*Control{}
	} else {
		_m.Edges.namedControls[name] = append(_m.Edges.namedControls[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if _m.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if _m.Edges.namedSubcontrols == nil {
		_m.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		_m.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		_m.Edges.namedSubcontrols[name] = append(_m.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedInternalPolicies returns the InternalPolicies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedInternalPolicies(name string) ([]*InternalPolicy, error) {
	if _m.Edges.namedInternalPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedInternalPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedInternalPolicies(name string, edges ...*InternalPolicy) {
	if _m.Edges.namedInternalPolicies == nil {
		_m.Edges.namedInternalPolicies = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		_m.Edges.namedInternalPolicies[name] = []*InternalPolicy{}
	} else {
		_m.Edges.namedInternalPolicies[name] = append(_m.Edges.namedInternalPolicies[name], edges...)
	}
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedProcedures(name string) ([]*Procedure, error) {
	if _m.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedProcedures(name string, edges ...*Procedure) {
	if _m.Edges.namedProcedures == nil {
		_m.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		_m.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		_m.Edges.namedProcedures[name] = append(_m.Edges.namedProcedures[name], edges...)
	}
}

// NamedRisks returns the Risks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedRisks(name string) ([]*Risk, error) {
	if _m.Edges.namedRisks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedRisks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedRisks(name string, edges ...*Risk) {
	if _m.Edges.namedRisks == nil {
		_m.Edges.namedRisks = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		_m.Edges.namedRisks[name] = []*Risk{}
	} else {
		_m.Edges.namedRisks[name] = append(_m.Edges.namedRisks[name], edges...)
	}
}

// NamedNarratives returns the Narratives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedNarratives(name string) ([]*Narrative, error) {
	if _m.Edges.namedNarratives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedNarratives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedNarratives(name string, edges ...*Narrative) {
	if _m.Edges.namedNarratives == nil {
		_m.Edges.namedNarratives = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		_m.Edges.namedNarratives[name] = []*Narrative{}
	} else {
		_m.Edges.namedNarratives[name] = append(_m.Edges.namedNarratives[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *ControlObjective) NamedTasks(name string) ([]*Task, error) {
	if _m.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *ControlObjective) appendNamedTasks(name string, edges ...*Task) {
	if _m.Edges.namedTasks == nil {
		_m.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		_m.Edges.namedTasks[name] = []*Task{}
	} else {
		_m.Edges.namedTasks[name] = append(_m.Edges.namedTasks[name], edges...)
	}
}

// ControlObjectives is a parsable slice of ControlObjective.
type ControlObjectives []*ControlObjective
