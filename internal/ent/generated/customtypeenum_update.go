// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/customtypeenum"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// CustomTypeEnumUpdate is the builder for updating CustomTypeEnum entities.
type CustomTypeEnumUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomTypeEnumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomTypeEnumUpdate builder.
func (_u *CustomTypeEnumUpdate) Where(ps ...predicate.CustomTypeEnum) *CustomTypeEnumUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CustomTypeEnumUpdate) SetUpdatedAt(v time.Time) *CustomTypeEnumUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *CustomTypeEnumUpdate) ClearUpdatedAt() *CustomTypeEnumUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *CustomTypeEnumUpdate) SetUpdatedBy(v string) *CustomTypeEnumUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableUpdatedBy(v *string) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *CustomTypeEnumUpdate) ClearUpdatedBy() *CustomTypeEnumUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *CustomTypeEnumUpdate) SetDeletedAt(v time.Time) *CustomTypeEnumUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableDeletedAt(v *time.Time) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *CustomTypeEnumUpdate) ClearDeletedAt() *CustomTypeEnumUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *CustomTypeEnumUpdate) SetDeletedBy(v string) *CustomTypeEnumUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableDeletedBy(v *string) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *CustomTypeEnumUpdate) ClearDeletedBy() *CustomTypeEnumUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *CustomTypeEnumUpdate) SetTags(v []string) *CustomTypeEnumUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *CustomTypeEnumUpdate) AppendTags(v []string) *CustomTypeEnumUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *CustomTypeEnumUpdate) ClearTags() *CustomTypeEnumUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *CustomTypeEnumUpdate) SetOwnerID(v string) *CustomTypeEnumUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableOwnerID(v *string) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *CustomTypeEnumUpdate) ClearOwnerID() *CustomTypeEnumUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *CustomTypeEnumUpdate) SetInternalNotes(v string) *CustomTypeEnumUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableInternalNotes(v *string) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *CustomTypeEnumUpdate) ClearInternalNotes() *CustomTypeEnumUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *CustomTypeEnumUpdate) SetSystemInternalID(v string) *CustomTypeEnumUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableSystemInternalID(v *string) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *CustomTypeEnumUpdate) ClearSystemInternalID() *CustomTypeEnumUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *CustomTypeEnumUpdate) SetName(v string) *CustomTypeEnumUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableName(v *string) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CustomTypeEnumUpdate) SetDescription(v string) *CustomTypeEnumUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableDescription(v *string) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CustomTypeEnumUpdate) ClearDescription() *CustomTypeEnumUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSystemGenerated sets the "system_generated" field.
func (_u *CustomTypeEnumUpdate) SetSystemGenerated(v bool) *CustomTypeEnumUpdate {
	_u.mutation.SetSystemGenerated(v)
	return _u
}

// SetNillableSystemGenerated sets the "system_generated" field if the given value is not nil.
func (_u *CustomTypeEnumUpdate) SetNillableSystemGenerated(v *bool) *CustomTypeEnumUpdate {
	if v != nil {
		_u.SetSystemGenerated(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *CustomTypeEnumUpdate) SetOwner(v *Organization) *CustomTypeEnumUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *CustomTypeEnumUpdate) AddTaskIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *CustomTypeEnumUpdate) AddTasks(v ...*Task) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *CustomTypeEnumUpdate) AddControlIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *CustomTypeEnumUpdate) AddControls(v ...*Control) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *CustomTypeEnumUpdate) AddSubcontrolIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *CustomTypeEnumUpdate) AddSubcontrols(v ...*Subcontrol) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *CustomTypeEnumUpdate) AddRiskIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *CustomTypeEnumUpdate) AddRisks(v ...*Risk) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *CustomTypeEnumUpdate) AddInternalPolicyIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *CustomTypeEnumUpdate) AddInternalPolicies(v ...*InternalPolicy) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *CustomTypeEnumUpdate) AddProcedureIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *CustomTypeEnumUpdate) AddProcedures(v ...*Procedure) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *CustomTypeEnumUpdate) AddActionPlanIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *CustomTypeEnumUpdate) AddActionPlans(v ...*ActionPlan) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *CustomTypeEnumUpdate) AddProgramIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *CustomTypeEnumUpdate) AddPrograms(v ...*Program) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// Mutation returns the CustomTypeEnumMutation object of the builder.
func (_u *CustomTypeEnumUpdate) Mutation() *CustomTypeEnumMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *CustomTypeEnumUpdate) ClearOwner() *CustomTypeEnumUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *CustomTypeEnumUpdate) ClearTasks() *CustomTypeEnumUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *CustomTypeEnumUpdate) RemoveTaskIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *CustomTypeEnumUpdate) RemoveTasks(v ...*Task) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *CustomTypeEnumUpdate) ClearControls() *CustomTypeEnumUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *CustomTypeEnumUpdate) RemoveControlIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *CustomTypeEnumUpdate) RemoveControls(v ...*Control) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *CustomTypeEnumUpdate) ClearSubcontrols() *CustomTypeEnumUpdate {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *CustomTypeEnumUpdate) RemoveSubcontrolIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *CustomTypeEnumUpdate) RemoveSubcontrols(v ...*Subcontrol) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *CustomTypeEnumUpdate) ClearRisks() *CustomTypeEnumUpdate {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *CustomTypeEnumUpdate) RemoveRiskIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *CustomTypeEnumUpdate) RemoveRisks(v ...*Risk) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *CustomTypeEnumUpdate) ClearInternalPolicies() *CustomTypeEnumUpdate {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *CustomTypeEnumUpdate) RemoveInternalPolicyIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *CustomTypeEnumUpdate) RemoveInternalPolicies(v ...*InternalPolicy) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *CustomTypeEnumUpdate) ClearProcedures() *CustomTypeEnumUpdate {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *CustomTypeEnumUpdate) RemoveProcedureIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *CustomTypeEnumUpdate) RemoveProcedures(v ...*Procedure) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *CustomTypeEnumUpdate) ClearActionPlans() *CustomTypeEnumUpdate {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *CustomTypeEnumUpdate) RemoveActionPlanIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *CustomTypeEnumUpdate) RemoveActionPlans(v ...*ActionPlan) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *CustomTypeEnumUpdate) ClearPrograms() *CustomTypeEnumUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *CustomTypeEnumUpdate) RemoveProgramIDs(ids ...string) *CustomTypeEnumUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *CustomTypeEnumUpdate) RemovePrograms(v ...*Program) *CustomTypeEnumUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CustomTypeEnumUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CustomTypeEnumUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CustomTypeEnumUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CustomTypeEnumUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CustomTypeEnumUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if customtypeenum.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized customtypeenum.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := customtypeenum.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CustomTypeEnumUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomTypeEnumUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CustomTypeEnumUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customtypeenum.Table, customtypeenum.Columns, sqlgraph.NewFieldSpec(customtypeenum.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(customtypeenum.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(customtypeenum.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(customtypeenum.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(customtypeenum.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(customtypeenum.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(customtypeenum.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(customtypeenum.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(customtypeenum.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(customtypeenum.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(customtypeenum.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(customtypeenum.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, customtypeenum.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(customtypeenum.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(customtypeenum.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(customtypeenum.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(customtypeenum.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(customtypeenum.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(customtypeenum.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(customtypeenum.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(customtypeenum.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(customtypeenum.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.SystemGenerated(); ok {
		_spec.SetField(customtypeenum.FieldSystemGenerated, field.TypeBool, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customtypeenum.OwnerTable,
			Columns: []string{customtypeenum.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomTypeEnum
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customtypeenum.OwnerTable,
			Columns: []string{customtypeenum.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomTypeEnum
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.TasksTable,
			Columns: []string{customtypeenum.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.TasksTable,
			Columns: []string{customtypeenum.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.TasksTable,
			Columns: []string{customtypeenum.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ControlsTable,
			Columns: []string{customtypeenum.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ControlsTable,
			Columns: []string{customtypeenum.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ControlsTable,
			Columns: []string{customtypeenum.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.SubcontrolsTable,
			Columns: []string{customtypeenum.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.SubcontrolsTable,
			Columns: []string{customtypeenum.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.SubcontrolsTable,
			Columns: []string{customtypeenum.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.RisksTable,
			Columns: []string{customtypeenum.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.RisksTable,
			Columns: []string{customtypeenum.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.RisksTable,
			Columns: []string{customtypeenum.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.InternalPoliciesTable,
			Columns: []string{customtypeenum.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.InternalPoliciesTable,
			Columns: []string{customtypeenum.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.InternalPoliciesTable,
			Columns: []string{customtypeenum.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProceduresTable,
			Columns: []string{customtypeenum.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProceduresTable,
			Columns: []string{customtypeenum.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProceduresTable,
			Columns: []string{customtypeenum.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ActionPlansTable,
			Columns: []string{customtypeenum.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ActionPlansTable,
			Columns: []string{customtypeenum.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ActionPlansTable,
			Columns: []string{customtypeenum.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProgramsTable,
			Columns: []string{customtypeenum.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProgramsTable,
			Columns: []string{customtypeenum.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProgramsTable,
			Columns: []string{customtypeenum.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.CustomTypeEnum
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customtypeenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CustomTypeEnumUpdateOne is the builder for updating a single CustomTypeEnum entity.
type CustomTypeEnumUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomTypeEnumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CustomTypeEnumUpdateOne) SetUpdatedAt(v time.Time) *CustomTypeEnumUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *CustomTypeEnumUpdateOne) ClearUpdatedAt() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *CustomTypeEnumUpdateOne) SetUpdatedBy(v string) *CustomTypeEnumUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableUpdatedBy(v *string) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *CustomTypeEnumUpdateOne) ClearUpdatedBy() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *CustomTypeEnumUpdateOne) SetDeletedAt(v time.Time) *CustomTypeEnumUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableDeletedAt(v *time.Time) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *CustomTypeEnumUpdateOne) ClearDeletedAt() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *CustomTypeEnumUpdateOne) SetDeletedBy(v string) *CustomTypeEnumUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableDeletedBy(v *string) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *CustomTypeEnumUpdateOne) ClearDeletedBy() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *CustomTypeEnumUpdateOne) SetTags(v []string) *CustomTypeEnumUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *CustomTypeEnumUpdateOne) AppendTags(v []string) *CustomTypeEnumUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *CustomTypeEnumUpdateOne) ClearTags() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *CustomTypeEnumUpdateOne) SetOwnerID(v string) *CustomTypeEnumUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableOwnerID(v *string) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *CustomTypeEnumUpdateOne) ClearOwnerID() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *CustomTypeEnumUpdateOne) SetInternalNotes(v string) *CustomTypeEnumUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableInternalNotes(v *string) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *CustomTypeEnumUpdateOne) ClearInternalNotes() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *CustomTypeEnumUpdateOne) SetSystemInternalID(v string) *CustomTypeEnumUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableSystemInternalID(v *string) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *CustomTypeEnumUpdateOne) ClearSystemInternalID() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *CustomTypeEnumUpdateOne) SetName(v string) *CustomTypeEnumUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableName(v *string) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CustomTypeEnumUpdateOne) SetDescription(v string) *CustomTypeEnumUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableDescription(v *string) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CustomTypeEnumUpdateOne) ClearDescription() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSystemGenerated sets the "system_generated" field.
func (_u *CustomTypeEnumUpdateOne) SetSystemGenerated(v bool) *CustomTypeEnumUpdateOne {
	_u.mutation.SetSystemGenerated(v)
	return _u
}

// SetNillableSystemGenerated sets the "system_generated" field if the given value is not nil.
func (_u *CustomTypeEnumUpdateOne) SetNillableSystemGenerated(v *bool) *CustomTypeEnumUpdateOne {
	if v != nil {
		_u.SetSystemGenerated(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *CustomTypeEnumUpdateOne) SetOwner(v *Organization) *CustomTypeEnumUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *CustomTypeEnumUpdateOne) AddTaskIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *CustomTypeEnumUpdateOne) AddTasks(v ...*Task) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *CustomTypeEnumUpdateOne) AddControlIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *CustomTypeEnumUpdateOne) AddControls(v ...*Control) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *CustomTypeEnumUpdateOne) AddSubcontrolIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *CustomTypeEnumUpdateOne) AddSubcontrols(v ...*Subcontrol) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *CustomTypeEnumUpdateOne) AddRiskIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *CustomTypeEnumUpdateOne) AddRisks(v ...*Risk) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *CustomTypeEnumUpdateOne) AddInternalPolicyIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *CustomTypeEnumUpdateOne) AddInternalPolicies(v ...*InternalPolicy) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *CustomTypeEnumUpdateOne) AddProcedureIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *CustomTypeEnumUpdateOne) AddProcedures(v ...*Procedure) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *CustomTypeEnumUpdateOne) AddActionPlanIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *CustomTypeEnumUpdateOne) AddActionPlans(v ...*ActionPlan) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *CustomTypeEnumUpdateOne) AddProgramIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *CustomTypeEnumUpdateOne) AddPrograms(v ...*Program) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// Mutation returns the CustomTypeEnumMutation object of the builder.
func (_u *CustomTypeEnumUpdateOne) Mutation() *CustomTypeEnumMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *CustomTypeEnumUpdateOne) ClearOwner() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *CustomTypeEnumUpdateOne) ClearTasks() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *CustomTypeEnumUpdateOne) RemoveTaskIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *CustomTypeEnumUpdateOne) RemoveTasks(v ...*Task) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *CustomTypeEnumUpdateOne) ClearControls() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *CustomTypeEnumUpdateOne) RemoveControlIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *CustomTypeEnumUpdateOne) RemoveControls(v ...*Control) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *CustomTypeEnumUpdateOne) ClearSubcontrols() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *CustomTypeEnumUpdateOne) RemoveSubcontrolIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *CustomTypeEnumUpdateOne) RemoveSubcontrols(v ...*Subcontrol) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *CustomTypeEnumUpdateOne) ClearRisks() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *CustomTypeEnumUpdateOne) RemoveRiskIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *CustomTypeEnumUpdateOne) RemoveRisks(v ...*Risk) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *CustomTypeEnumUpdateOne) ClearInternalPolicies() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *CustomTypeEnumUpdateOne) RemoveInternalPolicyIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *CustomTypeEnumUpdateOne) RemoveInternalPolicies(v ...*InternalPolicy) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *CustomTypeEnumUpdateOne) ClearProcedures() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *CustomTypeEnumUpdateOne) RemoveProcedureIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *CustomTypeEnumUpdateOne) RemoveProcedures(v ...*Procedure) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *CustomTypeEnumUpdateOne) ClearActionPlans() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *CustomTypeEnumUpdateOne) RemoveActionPlanIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *CustomTypeEnumUpdateOne) RemoveActionPlans(v ...*ActionPlan) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *CustomTypeEnumUpdateOne) ClearPrograms() *CustomTypeEnumUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *CustomTypeEnumUpdateOne) RemoveProgramIDs(ids ...string) *CustomTypeEnumUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *CustomTypeEnumUpdateOne) RemovePrograms(v ...*Program) *CustomTypeEnumUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the CustomTypeEnumUpdate builder.
func (_u *CustomTypeEnumUpdateOne) Where(ps ...predicate.CustomTypeEnum) *CustomTypeEnumUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CustomTypeEnumUpdateOne) Select(field string, fields ...string) *CustomTypeEnumUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CustomTypeEnum entity.
func (_u *CustomTypeEnumUpdateOne) Save(ctx context.Context) (*CustomTypeEnum, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CustomTypeEnumUpdateOne) SaveX(ctx context.Context) *CustomTypeEnum {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CustomTypeEnumUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CustomTypeEnumUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CustomTypeEnumUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if customtypeenum.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized customtypeenum.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := customtypeenum.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CustomTypeEnumUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomTypeEnumUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CustomTypeEnumUpdateOne) sqlSave(ctx context.Context) (_node *CustomTypeEnum, err error) {
	_spec := sqlgraph.NewUpdateSpec(customtypeenum.Table, customtypeenum.Columns, sqlgraph.NewFieldSpec(customtypeenum.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CustomTypeEnum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customtypeenum.FieldID)
		for _, f := range fields {
			if !customtypeenum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != customtypeenum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(customtypeenum.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(customtypeenum.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(customtypeenum.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(customtypeenum.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(customtypeenum.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(customtypeenum.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(customtypeenum.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(customtypeenum.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(customtypeenum.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(customtypeenum.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(customtypeenum.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, customtypeenum.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(customtypeenum.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(customtypeenum.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(customtypeenum.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(customtypeenum.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(customtypeenum.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(customtypeenum.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(customtypeenum.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(customtypeenum.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(customtypeenum.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.SystemGenerated(); ok {
		_spec.SetField(customtypeenum.FieldSystemGenerated, field.TypeBool, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customtypeenum.OwnerTable,
			Columns: []string{customtypeenum.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomTypeEnum
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customtypeenum.OwnerTable,
			Columns: []string{customtypeenum.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomTypeEnum
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.TasksTable,
			Columns: []string{customtypeenum.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.TasksTable,
			Columns: []string{customtypeenum.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.TasksTable,
			Columns: []string{customtypeenum.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ControlsTable,
			Columns: []string{customtypeenum.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ControlsTable,
			Columns: []string{customtypeenum.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ControlsTable,
			Columns: []string{customtypeenum.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.SubcontrolsTable,
			Columns: []string{customtypeenum.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.SubcontrolsTable,
			Columns: []string{customtypeenum.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.SubcontrolsTable,
			Columns: []string{customtypeenum.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.RisksTable,
			Columns: []string{customtypeenum.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.RisksTable,
			Columns: []string{customtypeenum.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.RisksTable,
			Columns: []string{customtypeenum.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.InternalPoliciesTable,
			Columns: []string{customtypeenum.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.InternalPoliciesTable,
			Columns: []string{customtypeenum.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.InternalPoliciesTable,
			Columns: []string{customtypeenum.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProceduresTable,
			Columns: []string{customtypeenum.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProceduresTable,
			Columns: []string{customtypeenum.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProceduresTable,
			Columns: []string{customtypeenum.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ActionPlansTable,
			Columns: []string{customtypeenum.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ActionPlansTable,
			Columns: []string{customtypeenum.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ActionPlansTable,
			Columns: []string{customtypeenum.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProgramsTable,
			Columns: []string{customtypeenum.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProgramsTable,
			Columns: []string{customtypeenum.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProgramsTable,
			Columns: []string{customtypeenum.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.CustomTypeEnum
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &CustomTypeEnum{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customtypeenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
