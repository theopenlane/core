// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanhistory"
	"github.com/theopenlane/entx/history"
)

// EntitlementPlanHistoryCreate is the builder for creating a EntitlementPlanHistory entity.
type EntitlementPlanHistoryCreate struct {
	config
	mutation *EntitlementPlanHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (ephc *EntitlementPlanHistoryCreate) SetHistoryTime(t time.Time) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetHistoryTime(t)
	return ephc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableHistoryTime(t *time.Time) *EntitlementPlanHistoryCreate {
	if t != nil {
		ephc.SetHistoryTime(*t)
	}
	return ephc
}

// SetRef sets the "ref" field.
func (ephc *EntitlementPlanHistoryCreate) SetRef(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetRef(s)
	return ephc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableRef(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetRef(*s)
	}
	return ephc
}

// SetOperation sets the "operation" field.
func (ephc *EntitlementPlanHistoryCreate) SetOperation(ht history.OpType) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetOperation(ht)
	return ephc
}

// SetCreatedAt sets the "created_at" field.
func (ephc *EntitlementPlanHistoryCreate) SetCreatedAt(t time.Time) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetCreatedAt(t)
	return ephc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableCreatedAt(t *time.Time) *EntitlementPlanHistoryCreate {
	if t != nil {
		ephc.SetCreatedAt(*t)
	}
	return ephc
}

// SetUpdatedAt sets the "updated_at" field.
func (ephc *EntitlementPlanHistoryCreate) SetUpdatedAt(t time.Time) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetUpdatedAt(t)
	return ephc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableUpdatedAt(t *time.Time) *EntitlementPlanHistoryCreate {
	if t != nil {
		ephc.SetUpdatedAt(*t)
	}
	return ephc
}

// SetCreatedBy sets the "created_by" field.
func (ephc *EntitlementPlanHistoryCreate) SetCreatedBy(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetCreatedBy(s)
	return ephc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableCreatedBy(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetCreatedBy(*s)
	}
	return ephc
}

// SetUpdatedBy sets the "updated_by" field.
func (ephc *EntitlementPlanHistoryCreate) SetUpdatedBy(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetUpdatedBy(s)
	return ephc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableUpdatedBy(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetUpdatedBy(*s)
	}
	return ephc
}

// SetMappingID sets the "mapping_id" field.
func (ephc *EntitlementPlanHistoryCreate) SetMappingID(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetMappingID(s)
	return ephc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableMappingID(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetMappingID(*s)
	}
	return ephc
}

// SetDeletedAt sets the "deleted_at" field.
func (ephc *EntitlementPlanHistoryCreate) SetDeletedAt(t time.Time) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetDeletedAt(t)
	return ephc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableDeletedAt(t *time.Time) *EntitlementPlanHistoryCreate {
	if t != nil {
		ephc.SetDeletedAt(*t)
	}
	return ephc
}

// SetDeletedBy sets the "deleted_by" field.
func (ephc *EntitlementPlanHistoryCreate) SetDeletedBy(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetDeletedBy(s)
	return ephc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableDeletedBy(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetDeletedBy(*s)
	}
	return ephc
}

// SetTags sets the "tags" field.
func (ephc *EntitlementPlanHistoryCreate) SetTags(s []string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetTags(s)
	return ephc
}

// SetOwnerID sets the "owner_id" field.
func (ephc *EntitlementPlanHistoryCreate) SetOwnerID(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetOwnerID(s)
	return ephc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableOwnerID(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetOwnerID(*s)
	}
	return ephc
}

// SetDisplayName sets the "display_name" field.
func (ephc *EntitlementPlanHistoryCreate) SetDisplayName(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetDisplayName(s)
	return ephc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableDisplayName(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetDisplayName(*s)
	}
	return ephc
}

// SetName sets the "name" field.
func (ephc *EntitlementPlanHistoryCreate) SetName(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetName(s)
	return ephc
}

// SetDescription sets the "description" field.
func (ephc *EntitlementPlanHistoryCreate) SetDescription(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetDescription(s)
	return ephc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableDescription(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetDescription(*s)
	}
	return ephc
}

// SetVersion sets the "version" field.
func (ephc *EntitlementPlanHistoryCreate) SetVersion(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetVersion(s)
	return ephc
}

// SetMetadata sets the "metadata" field.
func (ephc *EntitlementPlanHistoryCreate) SetMetadata(m map[string]interface{}) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetMetadata(m)
	return ephc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (ephc *EntitlementPlanHistoryCreate) SetStripeProductID(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetStripeProductID(s)
	return ephc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableStripeProductID(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetStripeProductID(*s)
	}
	return ephc
}

// SetStripePriceID sets the "stripe_price_id" field.
func (ephc *EntitlementPlanHistoryCreate) SetStripePriceID(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetStripePriceID(s)
	return ephc
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableStripePriceID(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetStripePriceID(*s)
	}
	return ephc
}

// SetID sets the "id" field.
func (ephc *EntitlementPlanHistoryCreate) SetID(s string) *EntitlementPlanHistoryCreate {
	ephc.mutation.SetID(s)
	return ephc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ephc *EntitlementPlanHistoryCreate) SetNillableID(s *string) *EntitlementPlanHistoryCreate {
	if s != nil {
		ephc.SetID(*s)
	}
	return ephc
}

// Mutation returns the EntitlementPlanHistoryMutation object of the builder.
func (ephc *EntitlementPlanHistoryCreate) Mutation() *EntitlementPlanHistoryMutation {
	return ephc.mutation
}

// Save creates the EntitlementPlanHistory in the database.
func (ephc *EntitlementPlanHistoryCreate) Save(ctx context.Context) (*EntitlementPlanHistory, error) {
	if err := ephc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ephc.sqlSave, ephc.mutation, ephc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ephc *EntitlementPlanHistoryCreate) SaveX(ctx context.Context) *EntitlementPlanHistory {
	v, err := ephc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ephc *EntitlementPlanHistoryCreate) Exec(ctx context.Context) error {
	_, err := ephc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ephc *EntitlementPlanHistoryCreate) ExecX(ctx context.Context) {
	if err := ephc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ephc *EntitlementPlanHistoryCreate) defaults() error {
	if _, ok := ephc.mutation.HistoryTime(); !ok {
		if entitlementplanhistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanhistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := entitlementplanhistory.DefaultHistoryTime()
		ephc.mutation.SetHistoryTime(v)
	}
	if _, ok := ephc.mutation.CreatedAt(); !ok {
		if entitlementplanhistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanhistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanhistory.DefaultCreatedAt()
		ephc.mutation.SetCreatedAt(v)
	}
	if _, ok := ephc.mutation.UpdatedAt(); !ok {
		if entitlementplanhistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanhistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanhistory.DefaultUpdatedAt()
		ephc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ephc.mutation.MappingID(); !ok {
		if entitlementplanhistory.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanhistory.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := entitlementplanhistory.DefaultMappingID()
		ephc.mutation.SetMappingID(v)
	}
	if _, ok := ephc.mutation.Tags(); !ok {
		v := entitlementplanhistory.DefaultTags
		ephc.mutation.SetTags(v)
	}
	if _, ok := ephc.mutation.ID(); !ok {
		if entitlementplanhistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanhistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := entitlementplanhistory.DefaultID()
		ephc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ephc *EntitlementPlanHistoryCreate) check() error {
	if _, ok := ephc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "EntitlementPlanHistory.history_time"`)}
	}
	if _, ok := ephc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "EntitlementPlanHistory.operation"`)}
	}
	if v, ok := ephc.mutation.Operation(); ok {
		if err := entitlementplanhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlanHistory.operation": %w`, err)}
		}
	}
	if _, ok := ephc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "EntitlementPlanHistory.mapping_id"`)}
	}
	if _, ok := ephc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "EntitlementPlanHistory.name"`)}
	}
	if _, ok := ephc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`generated: missing required field "EntitlementPlanHistory.version"`)}
	}
	return nil
}

func (ephc *EntitlementPlanHistoryCreate) sqlSave(ctx context.Context) (*EntitlementPlanHistory, error) {
	if err := ephc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ephc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ephc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EntitlementPlanHistory.ID type: %T", _spec.ID.Value)
		}
	}
	ephc.mutation.id = &_node.ID
	ephc.mutation.done = true
	return _node, nil
}

func (ephc *EntitlementPlanHistoryCreate) createSpec() (*EntitlementPlanHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &EntitlementPlanHistory{config: ephc.config}
		_spec = sqlgraph.NewCreateSpec(entitlementplanhistory.Table, sqlgraph.NewFieldSpec(entitlementplanhistory.FieldID, field.TypeString))
	)
	_spec.Schema = ephc.schemaConfig.EntitlementPlanHistory
	if id, ok := ephc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ephc.mutation.HistoryTime(); ok {
		_spec.SetField(entitlementplanhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := ephc.mutation.Ref(); ok {
		_spec.SetField(entitlementplanhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := ephc.mutation.Operation(); ok {
		_spec.SetField(entitlementplanhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := ephc.mutation.CreatedAt(); ok {
		_spec.SetField(entitlementplanhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ephc.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ephc.mutation.CreatedBy(); ok {
		_spec.SetField(entitlementplanhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ephc.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ephc.mutation.MappingID(); ok {
		_spec.SetField(entitlementplanhistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := ephc.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ephc.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := ephc.mutation.Tags(); ok {
		_spec.SetField(entitlementplanhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ephc.mutation.OwnerID(); ok {
		_spec.SetField(entitlementplanhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := ephc.mutation.DisplayName(); ok {
		_spec.SetField(entitlementplanhistory.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := ephc.mutation.Name(); ok {
		_spec.SetField(entitlementplanhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ephc.mutation.Description(); ok {
		_spec.SetField(entitlementplanhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ephc.mutation.Version(); ok {
		_spec.SetField(entitlementplanhistory.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ephc.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanhistory.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ephc.mutation.StripeProductID(); ok {
		_spec.SetField(entitlementplanhistory.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = value
	}
	if value, ok := ephc.mutation.StripePriceID(); ok {
		_spec.SetField(entitlementplanhistory.FieldStripePriceID, field.TypeString, value)
		_node.StripePriceID = value
	}
	return _node, _spec
}

// EntitlementPlanHistoryCreateBulk is the builder for creating many EntitlementPlanHistory entities in bulk.
type EntitlementPlanHistoryCreateBulk struct {
	config
	err      error
	builders []*EntitlementPlanHistoryCreate
}

// Save creates the EntitlementPlanHistory entities in the database.
func (ephcb *EntitlementPlanHistoryCreateBulk) Save(ctx context.Context) ([]*EntitlementPlanHistory, error) {
	if ephcb.err != nil {
		return nil, ephcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ephcb.builders))
	nodes := make([]*EntitlementPlanHistory, len(ephcb.builders))
	mutators := make([]Mutator, len(ephcb.builders))
	for i := range ephcb.builders {
		func(i int, root context.Context) {
			builder := ephcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitlementPlanHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ephcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ephcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ephcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ephcb *EntitlementPlanHistoryCreateBulk) SaveX(ctx context.Context) []*EntitlementPlanHistory {
	v, err := ephcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ephcb *EntitlementPlanHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ephcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ephcb *EntitlementPlanHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ephcb.Exec(ctx); err != nil {
		panic(err)
	}
}
