// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
)

// OrgProductCreate is the builder for creating a OrgProduct entity.
type OrgProductCreate struct {
	config
	mutation *OrgProductMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (opc *OrgProductCreate) SetCreatedAt(t time.Time) *OrgProductCreate {
	opc.mutation.SetCreatedAt(t)
	return opc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableCreatedAt(t *time.Time) *OrgProductCreate {
	if t != nil {
		opc.SetCreatedAt(*t)
	}
	return opc
}

// SetUpdatedAt sets the "updated_at" field.
func (opc *OrgProductCreate) SetUpdatedAt(t time.Time) *OrgProductCreate {
	opc.mutation.SetUpdatedAt(t)
	return opc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableUpdatedAt(t *time.Time) *OrgProductCreate {
	if t != nil {
		opc.SetUpdatedAt(*t)
	}
	return opc
}

// SetCreatedBy sets the "created_by" field.
func (opc *OrgProductCreate) SetCreatedBy(s string) *OrgProductCreate {
	opc.mutation.SetCreatedBy(s)
	return opc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableCreatedBy(s *string) *OrgProductCreate {
	if s != nil {
		opc.SetCreatedBy(*s)
	}
	return opc
}

// SetUpdatedBy sets the "updated_by" field.
func (opc *OrgProductCreate) SetUpdatedBy(s string) *OrgProductCreate {
	opc.mutation.SetUpdatedBy(s)
	return opc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableUpdatedBy(s *string) *OrgProductCreate {
	if s != nil {
		opc.SetUpdatedBy(*s)
	}
	return opc
}

// SetDeletedAt sets the "deleted_at" field.
func (opc *OrgProductCreate) SetDeletedAt(t time.Time) *OrgProductCreate {
	opc.mutation.SetDeletedAt(t)
	return opc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableDeletedAt(t *time.Time) *OrgProductCreate {
	if t != nil {
		opc.SetDeletedAt(*t)
	}
	return opc
}

// SetDeletedBy sets the "deleted_by" field.
func (opc *OrgProductCreate) SetDeletedBy(s string) *OrgProductCreate {
	opc.mutation.SetDeletedBy(s)
	return opc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableDeletedBy(s *string) *OrgProductCreate {
	if s != nil {
		opc.SetDeletedBy(*s)
	}
	return opc
}

// SetTags sets the "tags" field.
func (opc *OrgProductCreate) SetTags(s []string) *OrgProductCreate {
	opc.mutation.SetTags(s)
	return opc
}

// SetOwnerID sets the "owner_id" field.
func (opc *OrgProductCreate) SetOwnerID(s string) *OrgProductCreate {
	opc.mutation.SetOwnerID(s)
	return opc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableOwnerID(s *string) *OrgProductCreate {
	if s != nil {
		opc.SetOwnerID(*s)
	}
	return opc
}

// SetModule sets the "module" field.
func (opc *OrgProductCreate) SetModule(s string) *OrgProductCreate {
	opc.mutation.SetModule(s)
	return opc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (opc *OrgProductCreate) SetStripeProductID(s string) *OrgProductCreate {
	opc.mutation.SetStripeProductID(s)
	return opc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableStripeProductID(s *string) *OrgProductCreate {
	if s != nil {
		opc.SetStripeProductID(*s)
	}
	return opc
}

// SetStatus sets the "status" field.
func (opc *OrgProductCreate) SetStatus(s string) *OrgProductCreate {
	opc.mutation.SetStatus(s)
	return opc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableStatus(s *string) *OrgProductCreate {
	if s != nil {
		opc.SetStatus(*s)
	}
	return opc
}

// SetActive sets the "active" field.
func (opc *OrgProductCreate) SetActive(b bool) *OrgProductCreate {
	opc.mutation.SetActive(b)
	return opc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableActive(b *bool) *OrgProductCreate {
	if b != nil {
		opc.SetActive(*b)
	}
	return opc
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (opc *OrgProductCreate) SetTrialExpiresAt(t time.Time) *OrgProductCreate {
	opc.mutation.SetTrialExpiresAt(t)
	return opc
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableTrialExpiresAt(t *time.Time) *OrgProductCreate {
	if t != nil {
		opc.SetTrialExpiresAt(*t)
	}
	return opc
}

// SetExpiresAt sets the "expires_at" field.
func (opc *OrgProductCreate) SetExpiresAt(t time.Time) *OrgProductCreate {
	opc.mutation.SetExpiresAt(t)
	return opc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableExpiresAt(t *time.Time) *OrgProductCreate {
	if t != nil {
		opc.SetExpiresAt(*t)
	}
	return opc
}

// SetSubscriptionID sets the "subscription_id" field.
func (opc *OrgProductCreate) SetSubscriptionID(s string) *OrgProductCreate {
	opc.mutation.SetSubscriptionID(s)
	return opc
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableSubscriptionID(s *string) *OrgProductCreate {
	if s != nil {
		opc.SetSubscriptionID(*s)
	}
	return opc
}

// SetID sets the "id" field.
func (opc *OrgProductCreate) SetID(s string) *OrgProductCreate {
	opc.mutation.SetID(s)
	return opc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (opc *OrgProductCreate) SetNillableID(s *string) *OrgProductCreate {
	if s != nil {
		opc.SetID(*s)
	}
	return opc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (opc *OrgProductCreate) SetOwner(o *Organization) *OrgProductCreate {
	return opc.SetOwnerID(o.ID)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (opc *OrgProductCreate) SetOrgSubscriptionID(id string) *OrgProductCreate {
	opc.mutation.SetOrgSubscriptionID(id)
	return opc
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (opc *OrgProductCreate) SetNillableOrgSubscriptionID(id *string) *OrgProductCreate {
	if id != nil {
		opc = opc.SetOrgSubscriptionID(*id)
	}
	return opc
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (opc *OrgProductCreate) SetOrgSubscription(o *OrgSubscription) *OrgProductCreate {
	return opc.SetOrgSubscriptionID(o.ID)
}

// AddPriceIDs adds the "prices" edge to the OrgPrice entity by IDs.
func (opc *OrgProductCreate) AddPriceIDs(ids ...string) *OrgProductCreate {
	opc.mutation.AddPriceIDs(ids...)
	return opc
}

// AddPrices adds the "prices" edges to the OrgPrice entity.
func (opc *OrgProductCreate) AddPrices(o ...*OrgPrice) *OrgProductCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return opc.AddPriceIDs(ids...)
}

// Mutation returns the OrgProductMutation object of the builder.
func (opc *OrgProductCreate) Mutation() *OrgProductMutation {
	return opc.mutation
}

// Save creates the OrgProduct in the database.
func (opc *OrgProductCreate) Save(ctx context.Context) (*OrgProduct, error) {
	if err := opc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrgProductCreate) SaveX(ctx context.Context) *OrgProduct {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrgProductCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrgProductCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OrgProductCreate) defaults() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		if orgproduct.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgproduct.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := orgproduct.DefaultCreatedAt()
		opc.mutation.SetCreatedAt(v)
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		if orgproduct.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgproduct.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgproduct.DefaultUpdatedAt()
		opc.mutation.SetUpdatedAt(v)
	}
	if _, ok := opc.mutation.Tags(); !ok {
		v := orgproduct.DefaultTags
		opc.mutation.SetTags(v)
	}
	if _, ok := opc.mutation.Active(); !ok {
		v := orgproduct.DefaultActive
		opc.mutation.SetActive(v)
	}
	if _, ok := opc.mutation.ID(); !ok {
		if orgproduct.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized orgproduct.DefaultID (forgotten import generated/runtime?)")
		}
		v := orgproduct.DefaultID()
		opc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrgProductCreate) check() error {
	if v, ok := opc.mutation.OwnerID(); ok {
		if err := orgproduct.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgProduct.owner_id": %w`, err)}
		}
	}
	if _, ok := opc.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`generated: missing required field "OrgProduct.module"`)}
	}
	if _, ok := opc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`generated: missing required field "OrgProduct.active"`)}
	}
	return nil
}

func (opc *OrgProductCreate) sqlSave(ctx context.Context) (*OrgProduct, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgProduct.ID type: %T", _spec.ID.Value)
		}
	}
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OrgProductCreate) createSpec() (*OrgProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgProduct{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(orgproduct.Table, sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString))
	)
	_spec.Schema = opc.schemaConfig.OrgProduct
	if id, ok := opc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := opc.mutation.CreatedAt(); ok {
		_spec.SetField(orgproduct.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := opc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgproduct.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := opc.mutation.CreatedBy(); ok {
		_spec.SetField(orgproduct.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := opc.mutation.UpdatedBy(); ok {
		_spec.SetField(orgproduct.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := opc.mutation.DeletedAt(); ok {
		_spec.SetField(orgproduct.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := opc.mutation.DeletedBy(); ok {
		_spec.SetField(orgproduct.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := opc.mutation.Tags(); ok {
		_spec.SetField(orgproduct.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := opc.mutation.Module(); ok {
		_spec.SetField(orgproduct.FieldModule, field.TypeString, value)
		_node.Module = value
	}
	if value, ok := opc.mutation.StripeProductID(); ok {
		_spec.SetField(orgproduct.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = value
	}
	if value, ok := opc.mutation.Status(); ok {
		_spec.SetField(orgproduct.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := opc.mutation.Active(); ok {
		_spec.SetField(orgproduct.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := opc.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgproduct.FieldTrialExpiresAt, field.TypeTime, value)
		_node.TrialExpiresAt = &value
	}
	if value, ok := opc.mutation.ExpiresAt(); ok {
		_spec.SetField(orgproduct.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if nodes := opc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OwnerTable,
			Columns: []string{orgproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = opc.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := opc.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgproduct.OrgSubscriptionTable,
			Columns: []string{orgproduct.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = opc.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := opc.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgproduct.PricesTable,
			Columns: []string{orgproduct.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = opc.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrgProductCreateBulk is the builder for creating many OrgProduct entities in bulk.
type OrgProductCreateBulk struct {
	config
	err      error
	builders []*OrgProductCreate
}

// Save creates the OrgProduct entities in the database.
func (opcb *OrgProductCreateBulk) Save(ctx context.Context) ([]*OrgProduct, error) {
	if opcb.err != nil {
		return nil, opcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrgProduct, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrgProductCreateBulk) SaveX(ctx context.Context) []*OrgProduct {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrgProductCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrgProductCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}
