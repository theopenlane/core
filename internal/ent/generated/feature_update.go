// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// FeatureUpdate is the builder for updating Feature entities.
type FeatureUpdate struct {
	config
	hooks     []Hook
	mutation  *FeatureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FeatureUpdate builder.
func (fu *FeatureUpdate) Where(ps ...predicate.Feature) *FeatureUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FeatureUpdate) SetUpdatedAt(t time.Time) *FeatureUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fu *FeatureUpdate) ClearUpdatedAt() *FeatureUpdate {
	fu.mutation.ClearUpdatedAt()
	return fu
}

// SetUpdatedBy sets the "updated_by" field.
func (fu *FeatureUpdate) SetUpdatedBy(s string) *FeatureUpdate {
	fu.mutation.SetUpdatedBy(s)
	return fu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableUpdatedBy(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetUpdatedBy(*s)
	}
	return fu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fu *FeatureUpdate) ClearUpdatedBy() *FeatureUpdate {
	fu.mutation.ClearUpdatedBy()
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FeatureUpdate) SetDeletedAt(t time.Time) *FeatureUpdate {
	fu.mutation.SetDeletedAt(t)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableDeletedAt(t *time.Time) *FeatureUpdate {
	if t != nil {
		fu.SetDeletedAt(*t)
	}
	return fu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fu *FeatureUpdate) ClearDeletedAt() *FeatureUpdate {
	fu.mutation.ClearDeletedAt()
	return fu
}

// SetDeletedBy sets the "deleted_by" field.
func (fu *FeatureUpdate) SetDeletedBy(s string) *FeatureUpdate {
	fu.mutation.SetDeletedBy(s)
	return fu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableDeletedBy(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetDeletedBy(*s)
	}
	return fu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fu *FeatureUpdate) ClearDeletedBy() *FeatureUpdate {
	fu.mutation.ClearDeletedBy()
	return fu
}

// SetTags sets the "tags" field.
func (fu *FeatureUpdate) SetTags(s []string) *FeatureUpdate {
	fu.mutation.SetTags(s)
	return fu
}

// AppendTags appends s to the "tags" field.
func (fu *FeatureUpdate) AppendTags(s []string) *FeatureUpdate {
	fu.mutation.AppendTags(s)
	return fu
}

// ClearTags clears the value of the "tags" field.
func (fu *FeatureUpdate) ClearTags() *FeatureUpdate {
	fu.mutation.ClearTags()
	return fu
}

// SetOwnerID sets the "owner_id" field.
func (fu *FeatureUpdate) SetOwnerID(s string) *FeatureUpdate {
	fu.mutation.SetOwnerID(s)
	return fu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableOwnerID(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetOwnerID(*s)
	}
	return fu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (fu *FeatureUpdate) ClearOwnerID() *FeatureUpdate {
	fu.mutation.ClearOwnerID()
	return fu
}

// SetDisplayName sets the "display_name" field.
func (fu *FeatureUpdate) SetDisplayName(s string) *FeatureUpdate {
	fu.mutation.SetDisplayName(s)
	return fu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableDisplayName(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetDisplayName(*s)
	}
	return fu
}

// ClearDisplayName clears the value of the "display_name" field.
func (fu *FeatureUpdate) ClearDisplayName() *FeatureUpdate {
	fu.mutation.ClearDisplayName()
	return fu
}

// SetEnabled sets the "enabled" field.
func (fu *FeatureUpdate) SetEnabled(b bool) *FeatureUpdate {
	fu.mutation.SetEnabled(b)
	return fu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableEnabled(b *bool) *FeatureUpdate {
	if b != nil {
		fu.SetEnabled(*b)
	}
	return fu
}

// SetDescription sets the "description" field.
func (fu *FeatureUpdate) SetDescription(s string) *FeatureUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableDescription(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of the "description" field.
func (fu *FeatureUpdate) ClearDescription() *FeatureUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// SetMetadata sets the "metadata" field.
func (fu *FeatureUpdate) SetMetadata(m map[string]interface{}) *FeatureUpdate {
	fu.mutation.SetMetadata(m)
	return fu
}

// ClearMetadata clears the value of the "metadata" field.
func (fu *FeatureUpdate) ClearMetadata() *FeatureUpdate {
	fu.mutation.ClearMetadata()
	return fu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (fu *FeatureUpdate) SetOwner(o *Organization) *FeatureUpdate {
	return fu.SetOwnerID(o.ID)
}

// AddPlanIDs adds the "plans" edge to the EntitlementPlan entity by IDs.
func (fu *FeatureUpdate) AddPlanIDs(ids ...string) *FeatureUpdate {
	fu.mutation.AddPlanIDs(ids...)
	return fu
}

// AddPlans adds the "plans" edges to the EntitlementPlan entity.
func (fu *FeatureUpdate) AddPlans(e ...*EntitlementPlan) *FeatureUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddPlanIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (fu *FeatureUpdate) AddEventIDs(ids ...string) *FeatureUpdate {
	fu.mutation.AddEventIDs(ids...)
	return fu
}

// AddEvents adds the "events" edges to the Event entity.
func (fu *FeatureUpdate) AddEvents(e ...*Event) *FeatureUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddEventIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the EntitlementPlanFeature entity by IDs.
func (fu *FeatureUpdate) AddFeatureIDs(ids ...string) *FeatureUpdate {
	fu.mutation.AddFeatureIDs(ids...)
	return fu
}

// AddFeatures adds the "features" edges to the EntitlementPlanFeature entity.
func (fu *FeatureUpdate) AddFeatures(e ...*EntitlementPlanFeature) *FeatureUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddFeatureIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (fu *FeatureUpdate) Mutation() *FeatureMutation {
	return fu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (fu *FeatureUpdate) ClearOwner() *FeatureUpdate {
	fu.mutation.ClearOwner()
	return fu
}

// ClearPlans clears all "plans" edges to the EntitlementPlan entity.
func (fu *FeatureUpdate) ClearPlans() *FeatureUpdate {
	fu.mutation.ClearPlans()
	return fu
}

// RemovePlanIDs removes the "plans" edge to EntitlementPlan entities by IDs.
func (fu *FeatureUpdate) RemovePlanIDs(ids ...string) *FeatureUpdate {
	fu.mutation.RemovePlanIDs(ids...)
	return fu
}

// RemovePlans removes "plans" edges to EntitlementPlan entities.
func (fu *FeatureUpdate) RemovePlans(e ...*EntitlementPlan) *FeatureUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemovePlanIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (fu *FeatureUpdate) ClearEvents() *FeatureUpdate {
	fu.mutation.ClearEvents()
	return fu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (fu *FeatureUpdate) RemoveEventIDs(ids ...string) *FeatureUpdate {
	fu.mutation.RemoveEventIDs(ids...)
	return fu
}

// RemoveEvents removes "events" edges to Event entities.
func (fu *FeatureUpdate) RemoveEvents(e ...*Event) *FeatureUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveEventIDs(ids...)
}

// ClearFeatures clears all "features" edges to the EntitlementPlanFeature entity.
func (fu *FeatureUpdate) ClearFeatures() *FeatureUpdate {
	fu.mutation.ClearFeatures()
	return fu
}

// RemoveFeatureIDs removes the "features" edge to EntitlementPlanFeature entities by IDs.
func (fu *FeatureUpdate) RemoveFeatureIDs(ids ...string) *FeatureUpdate {
	fu.mutation.RemoveFeatureIDs(ids...)
	return fu
}

// RemoveFeatures removes "features" edges to EntitlementPlanFeature entities.
func (fu *FeatureUpdate) RemoveFeatures(e ...*EntitlementPlanFeature) *FeatureUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveFeatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeatureUpdate) Save(ctx context.Context) (int, error) {
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeatureUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeatureUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeatureUpdate) defaults() error {
	if _, ok := fu.mutation.UpdatedAt(); !ok && !fu.mutation.UpdatedAtCleared() {
		if feature.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized feature.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := feature.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fu *FeatureUpdate) check() error {
	if v, ok := fu.mutation.OwnerID(); ok {
		if err := feature.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Feature.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FeatureUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeatureUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feature.Table, feature.Columns, sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fu.mutation.CreatedAtCleared() {
		_spec.ClearField(feature.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(feature.FieldUpdatedAt, field.TypeTime, value)
	}
	if fu.mutation.UpdatedAtCleared() {
		_spec.ClearField(feature.FieldUpdatedAt, field.TypeTime)
	}
	if fu.mutation.CreatedByCleared() {
		_spec.ClearField(feature.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fu.mutation.UpdatedBy(); ok {
		_spec.SetField(feature.FieldUpdatedBy, field.TypeString, value)
	}
	if fu.mutation.UpdatedByCleared() {
		_spec.ClearField(feature.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(feature.FieldDeletedAt, field.TypeTime, value)
	}
	if fu.mutation.DeletedAtCleared() {
		_spec.ClearField(feature.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.DeletedBy(); ok {
		_spec.SetField(feature.FieldDeletedBy, field.TypeString, value)
	}
	if fu.mutation.DeletedByCleared() {
		_spec.ClearField(feature.FieldDeletedBy, field.TypeString)
	}
	if value, ok := fu.mutation.Tags(); ok {
		_spec.SetField(feature.FieldTags, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feature.FieldTags, value)
		})
	}
	if fu.mutation.TagsCleared() {
		_spec.ClearField(feature.FieldTags, field.TypeJSON)
	}
	if value, ok := fu.mutation.DisplayName(); ok {
		_spec.SetField(feature.FieldDisplayName, field.TypeString, value)
	}
	if fu.mutation.DisplayNameCleared() {
		_spec.ClearField(feature.FieldDisplayName, field.TypeString)
	}
	if value, ok := fu.mutation.Enabled(); ok {
		_spec.SetField(feature.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(feature.FieldDescription, field.TypeString, value)
	}
	if fu.mutation.DescriptionCleared() {
		_spec.ClearField(feature.FieldDescription, field.TypeString)
	}
	if value, ok := fu.mutation.Metadata(); ok {
		_spec.SetField(feature.FieldMetadata, field.TypeJSON, value)
	}
	if fu.mutation.MetadataCleared() {
		_spec.ClearField(feature.FieldMetadata, field.TypeJSON)
	}
	if fu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feature.OwnerTable,
			Columns: []string{feature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.Feature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feature.OwnerTable,
			Columns: []string{feature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.Feature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.PlansTable,
			Columns: feature.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntitlementPlanFeature
		createE := &EntitlementPlanFeatureCreate{config: fu.config, mutation: newEntitlementPlanFeatureMutation(fu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedPlansIDs(); len(nodes) > 0 && !fu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.PlansTable,
			Columns: feature.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EntitlementPlanFeatureCreate{config: fu.config, mutation: newEntitlementPlanFeatureMutation(fu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.PlansTable,
			Columns: feature.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EntitlementPlanFeatureCreate{config: fu.config, mutation: newEntitlementPlanFeatureMutation(fu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.EventsTable,
			Columns: feature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.FeatureEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !fu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.EventsTable,
			Columns: feature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.FeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.EventsTable,
			Columns: feature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.FeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feature.FeaturesTable,
			Columns: []string{feature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntitlementPlanFeature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !fu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feature.FeaturesTable,
			Columns: []string{feature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feature.FeaturesTable,
			Columns: []string{feature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = fu.schemaConfig.Feature
	ctx = internal.NewSchemaConfigContext(ctx, fu.schemaConfig)
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeatureUpdateOne is the builder for updating a single Feature entity.
type FeatureUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FeatureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FeatureUpdateOne) SetUpdatedAt(t time.Time) *FeatureUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fuo *FeatureUpdateOne) ClearUpdatedAt() *FeatureUpdateOne {
	fuo.mutation.ClearUpdatedAt()
	return fuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fuo *FeatureUpdateOne) SetUpdatedBy(s string) *FeatureUpdateOne {
	fuo.mutation.SetUpdatedBy(s)
	return fuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableUpdatedBy(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetUpdatedBy(*s)
	}
	return fuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fuo *FeatureUpdateOne) ClearUpdatedBy() *FeatureUpdateOne {
	fuo.mutation.ClearUpdatedBy()
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FeatureUpdateOne) SetDeletedAt(t time.Time) *FeatureUpdateOne {
	fuo.mutation.SetDeletedAt(t)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableDeletedAt(t *time.Time) *FeatureUpdateOne {
	if t != nil {
		fuo.SetDeletedAt(*t)
	}
	return fuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuo *FeatureUpdateOne) ClearDeletedAt() *FeatureUpdateOne {
	fuo.mutation.ClearDeletedAt()
	return fuo
}

// SetDeletedBy sets the "deleted_by" field.
func (fuo *FeatureUpdateOne) SetDeletedBy(s string) *FeatureUpdateOne {
	fuo.mutation.SetDeletedBy(s)
	return fuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableDeletedBy(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetDeletedBy(*s)
	}
	return fuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fuo *FeatureUpdateOne) ClearDeletedBy() *FeatureUpdateOne {
	fuo.mutation.ClearDeletedBy()
	return fuo
}

// SetTags sets the "tags" field.
func (fuo *FeatureUpdateOne) SetTags(s []string) *FeatureUpdateOne {
	fuo.mutation.SetTags(s)
	return fuo
}

// AppendTags appends s to the "tags" field.
func (fuo *FeatureUpdateOne) AppendTags(s []string) *FeatureUpdateOne {
	fuo.mutation.AppendTags(s)
	return fuo
}

// ClearTags clears the value of the "tags" field.
func (fuo *FeatureUpdateOne) ClearTags() *FeatureUpdateOne {
	fuo.mutation.ClearTags()
	return fuo
}

// SetOwnerID sets the "owner_id" field.
func (fuo *FeatureUpdateOne) SetOwnerID(s string) *FeatureUpdateOne {
	fuo.mutation.SetOwnerID(s)
	return fuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableOwnerID(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetOwnerID(*s)
	}
	return fuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (fuo *FeatureUpdateOne) ClearOwnerID() *FeatureUpdateOne {
	fuo.mutation.ClearOwnerID()
	return fuo
}

// SetDisplayName sets the "display_name" field.
func (fuo *FeatureUpdateOne) SetDisplayName(s string) *FeatureUpdateOne {
	fuo.mutation.SetDisplayName(s)
	return fuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableDisplayName(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetDisplayName(*s)
	}
	return fuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (fuo *FeatureUpdateOne) ClearDisplayName() *FeatureUpdateOne {
	fuo.mutation.ClearDisplayName()
	return fuo
}

// SetEnabled sets the "enabled" field.
func (fuo *FeatureUpdateOne) SetEnabled(b bool) *FeatureUpdateOne {
	fuo.mutation.SetEnabled(b)
	return fuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableEnabled(b *bool) *FeatureUpdateOne {
	if b != nil {
		fuo.SetEnabled(*b)
	}
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FeatureUpdateOne) SetDescription(s string) *FeatureUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableDescription(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of the "description" field.
func (fuo *FeatureUpdateOne) ClearDescription() *FeatureUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// SetMetadata sets the "metadata" field.
func (fuo *FeatureUpdateOne) SetMetadata(m map[string]interface{}) *FeatureUpdateOne {
	fuo.mutation.SetMetadata(m)
	return fuo
}

// ClearMetadata clears the value of the "metadata" field.
func (fuo *FeatureUpdateOne) ClearMetadata() *FeatureUpdateOne {
	fuo.mutation.ClearMetadata()
	return fuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (fuo *FeatureUpdateOne) SetOwner(o *Organization) *FeatureUpdateOne {
	return fuo.SetOwnerID(o.ID)
}

// AddPlanIDs adds the "plans" edge to the EntitlementPlan entity by IDs.
func (fuo *FeatureUpdateOne) AddPlanIDs(ids ...string) *FeatureUpdateOne {
	fuo.mutation.AddPlanIDs(ids...)
	return fuo
}

// AddPlans adds the "plans" edges to the EntitlementPlan entity.
func (fuo *FeatureUpdateOne) AddPlans(e ...*EntitlementPlan) *FeatureUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddPlanIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (fuo *FeatureUpdateOne) AddEventIDs(ids ...string) *FeatureUpdateOne {
	fuo.mutation.AddEventIDs(ids...)
	return fuo
}

// AddEvents adds the "events" edges to the Event entity.
func (fuo *FeatureUpdateOne) AddEvents(e ...*Event) *FeatureUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddEventIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the EntitlementPlanFeature entity by IDs.
func (fuo *FeatureUpdateOne) AddFeatureIDs(ids ...string) *FeatureUpdateOne {
	fuo.mutation.AddFeatureIDs(ids...)
	return fuo
}

// AddFeatures adds the "features" edges to the EntitlementPlanFeature entity.
func (fuo *FeatureUpdateOne) AddFeatures(e ...*EntitlementPlanFeature) *FeatureUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddFeatureIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (fuo *FeatureUpdateOne) Mutation() *FeatureMutation {
	return fuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (fuo *FeatureUpdateOne) ClearOwner() *FeatureUpdateOne {
	fuo.mutation.ClearOwner()
	return fuo
}

// ClearPlans clears all "plans" edges to the EntitlementPlan entity.
func (fuo *FeatureUpdateOne) ClearPlans() *FeatureUpdateOne {
	fuo.mutation.ClearPlans()
	return fuo
}

// RemovePlanIDs removes the "plans" edge to EntitlementPlan entities by IDs.
func (fuo *FeatureUpdateOne) RemovePlanIDs(ids ...string) *FeatureUpdateOne {
	fuo.mutation.RemovePlanIDs(ids...)
	return fuo
}

// RemovePlans removes "plans" edges to EntitlementPlan entities.
func (fuo *FeatureUpdateOne) RemovePlans(e ...*EntitlementPlan) *FeatureUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemovePlanIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (fuo *FeatureUpdateOne) ClearEvents() *FeatureUpdateOne {
	fuo.mutation.ClearEvents()
	return fuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (fuo *FeatureUpdateOne) RemoveEventIDs(ids ...string) *FeatureUpdateOne {
	fuo.mutation.RemoveEventIDs(ids...)
	return fuo
}

// RemoveEvents removes "events" edges to Event entities.
func (fuo *FeatureUpdateOne) RemoveEvents(e ...*Event) *FeatureUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveEventIDs(ids...)
}

// ClearFeatures clears all "features" edges to the EntitlementPlanFeature entity.
func (fuo *FeatureUpdateOne) ClearFeatures() *FeatureUpdateOne {
	fuo.mutation.ClearFeatures()
	return fuo
}

// RemoveFeatureIDs removes the "features" edge to EntitlementPlanFeature entities by IDs.
func (fuo *FeatureUpdateOne) RemoveFeatureIDs(ids ...string) *FeatureUpdateOne {
	fuo.mutation.RemoveFeatureIDs(ids...)
	return fuo
}

// RemoveFeatures removes "features" edges to EntitlementPlanFeature entities.
func (fuo *FeatureUpdateOne) RemoveFeatures(e ...*EntitlementPlanFeature) *FeatureUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveFeatureIDs(ids...)
}

// Where appends a list predicates to the FeatureUpdate builder.
func (fuo *FeatureUpdateOne) Where(ps ...predicate.Feature) *FeatureUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeatureUpdateOne) Select(field string, fields ...string) *FeatureUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feature entity.
func (fuo *FeatureUpdateOne) Save(ctx context.Context) (*Feature, error) {
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeatureUpdateOne) SaveX(ctx context.Context) *Feature {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeatureUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeatureUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdatedAt(); !ok && !fuo.mutation.UpdatedAtCleared() {
		if feature.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized feature.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := feature.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FeatureUpdateOne) check() error {
	if v, ok := fuo.mutation.OwnerID(); ok {
		if err := feature.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Feature.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FeatureUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeatureUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FeatureUpdateOne) sqlSave(ctx context.Context) (_node *Feature, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feature.Table, feature.Columns, sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Feature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feature.FieldID)
		for _, f := range fields {
			if !feature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != feature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fuo.mutation.CreatedAtCleared() {
		_spec.ClearField(feature.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feature.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(feature.FieldUpdatedAt, field.TypeTime)
	}
	if fuo.mutation.CreatedByCleared() {
		_spec.ClearField(feature.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.UpdatedBy(); ok {
		_spec.SetField(feature.FieldUpdatedBy, field.TypeString, value)
	}
	if fuo.mutation.UpdatedByCleared() {
		_spec.ClearField(feature.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(feature.FieldDeletedAt, field.TypeTime, value)
	}
	if fuo.mutation.DeletedAtCleared() {
		_spec.ClearField(feature.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.DeletedBy(); ok {
		_spec.SetField(feature.FieldDeletedBy, field.TypeString, value)
	}
	if fuo.mutation.DeletedByCleared() {
		_spec.ClearField(feature.FieldDeletedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.Tags(); ok {
		_spec.SetField(feature.FieldTags, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feature.FieldTags, value)
		})
	}
	if fuo.mutation.TagsCleared() {
		_spec.ClearField(feature.FieldTags, field.TypeJSON)
	}
	if value, ok := fuo.mutation.DisplayName(); ok {
		_spec.SetField(feature.FieldDisplayName, field.TypeString, value)
	}
	if fuo.mutation.DisplayNameCleared() {
		_spec.ClearField(feature.FieldDisplayName, field.TypeString)
	}
	if value, ok := fuo.mutation.Enabled(); ok {
		_spec.SetField(feature.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(feature.FieldDescription, field.TypeString, value)
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.ClearField(feature.FieldDescription, field.TypeString)
	}
	if value, ok := fuo.mutation.Metadata(); ok {
		_spec.SetField(feature.FieldMetadata, field.TypeJSON, value)
	}
	if fuo.mutation.MetadataCleared() {
		_spec.ClearField(feature.FieldMetadata, field.TypeJSON)
	}
	if fuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feature.OwnerTable,
			Columns: []string{feature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.Feature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feature.OwnerTable,
			Columns: []string{feature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.Feature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.PlansTable,
			Columns: feature.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntitlementPlanFeature
		createE := &EntitlementPlanFeatureCreate{config: fuo.config, mutation: newEntitlementPlanFeatureMutation(fuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedPlansIDs(); len(nodes) > 0 && !fuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.PlansTable,
			Columns: feature.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EntitlementPlanFeatureCreate{config: fuo.config, mutation: newEntitlementPlanFeatureMutation(fuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.PlansTable,
			Columns: feature.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EntitlementPlanFeatureCreate{config: fuo.config, mutation: newEntitlementPlanFeatureMutation(fuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.EventsTable,
			Columns: feature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.FeatureEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !fuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.EventsTable,
			Columns: feature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.FeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feature.EventsTable,
			Columns: feature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.FeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feature.FeaturesTable,
			Columns: []string{feature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntitlementPlanFeature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !fuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feature.FeaturesTable,
			Columns: []string{feature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feature.FeaturesTable,
			Columns: []string{feature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = fuo.schemaConfig.Feature
	ctx = internal.NewSchemaConfigContext(ctx, fuo.schemaConfig)
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Feature{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
