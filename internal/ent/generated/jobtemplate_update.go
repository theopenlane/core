// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobTemplateUpdate is the builder for updating JobTemplate entities.
type JobTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *JobTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobTemplateUpdate builder.
func (_u *JobTemplateUpdate) Where(ps ...predicate.JobTemplate) *JobTemplateUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *JobTemplateUpdate) SetUpdatedAt(v time.Time) *JobTemplateUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *JobTemplateUpdate) ClearUpdatedAt() *JobTemplateUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *JobTemplateUpdate) SetUpdatedBy(v string) *JobTemplateUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableUpdatedBy(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *JobTemplateUpdate) ClearUpdatedBy() *JobTemplateUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *JobTemplateUpdate) SetDeletedAt(v time.Time) *JobTemplateUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableDeletedAt(v *time.Time) *JobTemplateUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *JobTemplateUpdate) ClearDeletedAt() *JobTemplateUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *JobTemplateUpdate) SetDeletedBy(v string) *JobTemplateUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableDeletedBy(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *JobTemplateUpdate) ClearDeletedBy() *JobTemplateUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *JobTemplateUpdate) SetTags(v []string) *JobTemplateUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *JobTemplateUpdate) AppendTags(v []string) *JobTemplateUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *JobTemplateUpdate) ClearTags() *JobTemplateUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *JobTemplateUpdate) SetOwnerID(v string) *JobTemplateUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableOwnerID(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *JobTemplateUpdate) ClearOwnerID() *JobTemplateUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *JobTemplateUpdate) SetInternalNotes(v string) *JobTemplateUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableInternalNotes(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *JobTemplateUpdate) ClearInternalNotes() *JobTemplateUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *JobTemplateUpdate) SetSystemInternalID(v string) *JobTemplateUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableSystemInternalID(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *JobTemplateUpdate) ClearSystemInternalID() *JobTemplateUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *JobTemplateUpdate) SetTitle(v string) *JobTemplateUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableTitle(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *JobTemplateUpdate) SetDescription(v string) *JobTemplateUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableDescription(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *JobTemplateUpdate) ClearDescription() *JobTemplateUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetWindmillPath sets the "windmill_path" field.
func (_u *JobTemplateUpdate) SetWindmillPath(v string) *JobTemplateUpdate {
	_u.mutation.SetWindmillPath(v)
	return _u
}

// SetNillableWindmillPath sets the "windmill_path" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableWindmillPath(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetWindmillPath(*v)
	}
	return _u
}

// ClearWindmillPath clears the value of the "windmill_path" field.
func (_u *JobTemplateUpdate) ClearWindmillPath() *JobTemplateUpdate {
	_u.mutation.ClearWindmillPath()
	return _u
}

// SetDownloadURL sets the "download_url" field.
func (_u *JobTemplateUpdate) SetDownloadURL(v string) *JobTemplateUpdate {
	_u.mutation.SetDownloadURL(v)
	return _u
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableDownloadURL(v *string) *JobTemplateUpdate {
	if v != nil {
		_u.SetDownloadURL(*v)
	}
	return _u
}

// SetConfiguration sets the "configuration" field.
func (_u *JobTemplateUpdate) SetConfiguration(v models.JobConfiguration) *JobTemplateUpdate {
	_u.mutation.SetConfiguration(v)
	return _u
}

// AppendConfiguration appends value to the "configuration" field.
func (_u *JobTemplateUpdate) AppendConfiguration(v models.JobConfiguration) *JobTemplateUpdate {
	_u.mutation.AppendConfiguration(v)
	return _u
}

// ClearConfiguration clears the value of the "configuration" field.
func (_u *JobTemplateUpdate) ClearConfiguration() *JobTemplateUpdate {
	_u.mutation.ClearConfiguration()
	return _u
}

// SetCron sets the "cron" field.
func (_u *JobTemplateUpdate) SetCron(v models.Cron) *JobTemplateUpdate {
	_u.mutation.SetCron(v)
	return _u
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (_u *JobTemplateUpdate) SetNillableCron(v *models.Cron) *JobTemplateUpdate {
	if v != nil {
		_u.SetCron(*v)
	}
	return _u
}

// ClearCron clears the value of the "cron" field.
func (_u *JobTemplateUpdate) ClearCron() *JobTemplateUpdate {
	_u.mutation.ClearCron()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *JobTemplateUpdate) SetOwner(v *Organization) *JobTemplateUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_u *JobTemplateUpdate) AddScheduledJobIDs(ids ...string) *JobTemplateUpdate {
	_u.mutation.AddScheduledJobIDs(ids...)
	return _u
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *JobTemplateUpdate) AddScheduledJobs(v ...*ScheduledJob) *JobTemplateUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobIDs(ids...)
}

// Mutation returns the JobTemplateMutation object of the builder.
func (_u *JobTemplateUpdate) Mutation() *JobTemplateMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *JobTemplateUpdate) ClearOwner() *JobTemplateUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *JobTemplateUpdate) ClearScheduledJobs() *JobTemplateUpdate {
	_u.mutation.ClearScheduledJobs()
	return _u
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (_u *JobTemplateUpdate) RemoveScheduledJobIDs(ids ...string) *JobTemplateUpdate {
	_u.mutation.RemoveScheduledJobIDs(ids...)
	return _u
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (_u *JobTemplateUpdate) RemoveScheduledJobs(v ...*ScheduledJob) *JobTemplateUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *JobTemplateUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *JobTemplateUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobTemplateUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobTemplateUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if jobtemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplate.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplate.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobTemplateUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := jobtemplate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Cron(); ok {
		if err := jobtemplate.CronValidator(string(v)); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.cron": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *JobTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobTemplateUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *JobTemplateUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobtemplate.Table, jobtemplate.Columns, sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(jobtemplate.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobtemplate.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(jobtemplate.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(jobtemplate.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(jobtemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(jobtemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(jobtemplate.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(jobtemplate.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(jobtemplate.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplate.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(jobtemplate.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobtemplate.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(jobtemplate.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(jobtemplate.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(jobtemplate.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(jobtemplate.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(jobtemplate.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(jobtemplate.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(jobtemplate.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.WindmillPath(); ok {
		_spec.SetField(jobtemplate.FieldWindmillPath, field.TypeString, value)
	}
	if _u.mutation.WindmillPathCleared() {
		_spec.ClearField(jobtemplate.FieldWindmillPath, field.TypeString)
	}
	if value, ok := _u.mutation.DownloadURL(); ok {
		_spec.SetField(jobtemplate.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Configuration(); ok {
		_spec.SetField(jobtemplate.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedConfiguration(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplate.FieldConfiguration, value)
		})
	}
	if _u.mutation.ConfigurationCleared() {
		_spec.ClearField(jobtemplate.FieldConfiguration, field.TypeJSON)
	}
	if value, ok := _u.mutation.Cron(); ok {
		_spec.SetField(jobtemplate.FieldCron, field.TypeString, value)
	}
	if _u.mutation.CronCleared() {
		_spec.ClearField(jobtemplate.FieldCron, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.JobTemplate
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// JobTemplateUpdateOne is the builder for updating a single JobTemplate entity.
type JobTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *JobTemplateUpdateOne) SetUpdatedAt(v time.Time) *JobTemplateUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *JobTemplateUpdateOne) ClearUpdatedAt() *JobTemplateUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *JobTemplateUpdateOne) SetUpdatedBy(v string) *JobTemplateUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableUpdatedBy(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *JobTemplateUpdateOne) ClearUpdatedBy() *JobTemplateUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *JobTemplateUpdateOne) SetDeletedAt(v time.Time) *JobTemplateUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableDeletedAt(v *time.Time) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *JobTemplateUpdateOne) ClearDeletedAt() *JobTemplateUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *JobTemplateUpdateOne) SetDeletedBy(v string) *JobTemplateUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableDeletedBy(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *JobTemplateUpdateOne) ClearDeletedBy() *JobTemplateUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *JobTemplateUpdateOne) SetTags(v []string) *JobTemplateUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *JobTemplateUpdateOne) AppendTags(v []string) *JobTemplateUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *JobTemplateUpdateOne) ClearTags() *JobTemplateUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *JobTemplateUpdateOne) SetOwnerID(v string) *JobTemplateUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableOwnerID(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *JobTemplateUpdateOne) ClearOwnerID() *JobTemplateUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *JobTemplateUpdateOne) SetInternalNotes(v string) *JobTemplateUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableInternalNotes(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *JobTemplateUpdateOne) ClearInternalNotes() *JobTemplateUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *JobTemplateUpdateOne) SetSystemInternalID(v string) *JobTemplateUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableSystemInternalID(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *JobTemplateUpdateOne) ClearSystemInternalID() *JobTemplateUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *JobTemplateUpdateOne) SetTitle(v string) *JobTemplateUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableTitle(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *JobTemplateUpdateOne) SetDescription(v string) *JobTemplateUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableDescription(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *JobTemplateUpdateOne) ClearDescription() *JobTemplateUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetWindmillPath sets the "windmill_path" field.
func (_u *JobTemplateUpdateOne) SetWindmillPath(v string) *JobTemplateUpdateOne {
	_u.mutation.SetWindmillPath(v)
	return _u
}

// SetNillableWindmillPath sets the "windmill_path" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableWindmillPath(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetWindmillPath(*v)
	}
	return _u
}

// ClearWindmillPath clears the value of the "windmill_path" field.
func (_u *JobTemplateUpdateOne) ClearWindmillPath() *JobTemplateUpdateOne {
	_u.mutation.ClearWindmillPath()
	return _u
}

// SetDownloadURL sets the "download_url" field.
func (_u *JobTemplateUpdateOne) SetDownloadURL(v string) *JobTemplateUpdateOne {
	_u.mutation.SetDownloadURL(v)
	return _u
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableDownloadURL(v *string) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetDownloadURL(*v)
	}
	return _u
}

// SetConfiguration sets the "configuration" field.
func (_u *JobTemplateUpdateOne) SetConfiguration(v models.JobConfiguration) *JobTemplateUpdateOne {
	_u.mutation.SetConfiguration(v)
	return _u
}

// AppendConfiguration appends value to the "configuration" field.
func (_u *JobTemplateUpdateOne) AppendConfiguration(v models.JobConfiguration) *JobTemplateUpdateOne {
	_u.mutation.AppendConfiguration(v)
	return _u
}

// ClearConfiguration clears the value of the "configuration" field.
func (_u *JobTemplateUpdateOne) ClearConfiguration() *JobTemplateUpdateOne {
	_u.mutation.ClearConfiguration()
	return _u
}

// SetCron sets the "cron" field.
func (_u *JobTemplateUpdateOne) SetCron(v models.Cron) *JobTemplateUpdateOne {
	_u.mutation.SetCron(v)
	return _u
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (_u *JobTemplateUpdateOne) SetNillableCron(v *models.Cron) *JobTemplateUpdateOne {
	if v != nil {
		_u.SetCron(*v)
	}
	return _u
}

// ClearCron clears the value of the "cron" field.
func (_u *JobTemplateUpdateOne) ClearCron() *JobTemplateUpdateOne {
	_u.mutation.ClearCron()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *JobTemplateUpdateOne) SetOwner(v *Organization) *JobTemplateUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_u *JobTemplateUpdateOne) AddScheduledJobIDs(ids ...string) *JobTemplateUpdateOne {
	_u.mutation.AddScheduledJobIDs(ids...)
	return _u
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *JobTemplateUpdateOne) AddScheduledJobs(v ...*ScheduledJob) *JobTemplateUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobIDs(ids...)
}

// Mutation returns the JobTemplateMutation object of the builder.
func (_u *JobTemplateUpdateOne) Mutation() *JobTemplateMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *JobTemplateUpdateOne) ClearOwner() *JobTemplateUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *JobTemplateUpdateOne) ClearScheduledJobs() *JobTemplateUpdateOne {
	_u.mutation.ClearScheduledJobs()
	return _u
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (_u *JobTemplateUpdateOne) RemoveScheduledJobIDs(ids ...string) *JobTemplateUpdateOne {
	_u.mutation.RemoveScheduledJobIDs(ids...)
	return _u
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (_u *JobTemplateUpdateOne) RemoveScheduledJobs(v ...*ScheduledJob) *JobTemplateUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobIDs(ids...)
}

// Where appends a list predicates to the JobTemplateUpdate builder.
func (_u *JobTemplateUpdateOne) Where(ps ...predicate.JobTemplate) *JobTemplateUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *JobTemplateUpdateOne) Select(field string, fields ...string) *JobTemplateUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated JobTemplate entity.
func (_u *JobTemplateUpdateOne) Save(ctx context.Context) (*JobTemplate, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobTemplateUpdateOne) SaveX(ctx context.Context) *JobTemplate {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *JobTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobTemplateUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if jobtemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplate.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplate.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobTemplateUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := jobtemplate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Cron(); ok {
		if err := jobtemplate.CronValidator(string(v)); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.cron": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *JobTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobTemplateUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *JobTemplateUpdateOne) sqlSave(ctx context.Context) (_node *JobTemplate, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobtemplate.Table, jobtemplate.Columns, sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "JobTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobtemplate.FieldID)
		for _, f := range fields {
			if !jobtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != jobtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(jobtemplate.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobtemplate.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(jobtemplate.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(jobtemplate.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(jobtemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(jobtemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(jobtemplate.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(jobtemplate.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(jobtemplate.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplate.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(jobtemplate.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobtemplate.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(jobtemplate.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(jobtemplate.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(jobtemplate.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(jobtemplate.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(jobtemplate.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(jobtemplate.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(jobtemplate.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.WindmillPath(); ok {
		_spec.SetField(jobtemplate.FieldWindmillPath, field.TypeString, value)
	}
	if _u.mutation.WindmillPathCleared() {
		_spec.ClearField(jobtemplate.FieldWindmillPath, field.TypeString)
	}
	if value, ok := _u.mutation.DownloadURL(); ok {
		_spec.SetField(jobtemplate.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Configuration(); ok {
		_spec.SetField(jobtemplate.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedConfiguration(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplate.FieldConfiguration, value)
		})
	}
	if _u.mutation.ConfigurationCleared() {
		_spec.ClearField(jobtemplate.FieldConfiguration, field.TypeJSON)
	}
	if value, ok := _u.mutation.Cron(); ok {
		_spec.SetField(jobtemplate.FieldCron, field.TypeString, value)
	}
	if _u.mutation.CronCleared() {
		_spec.ClearField(jobtemplate.FieldCron, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.JobTemplate
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &JobTemplate{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
