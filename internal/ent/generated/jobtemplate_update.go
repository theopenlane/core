// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobTemplateUpdate is the builder for updating JobTemplate entities.
type JobTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *JobTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobTemplateUpdate builder.
func (jtu *JobTemplateUpdate) Where(ps ...predicate.JobTemplate) *JobTemplateUpdate {
	jtu.mutation.Where(ps...)
	return jtu
}

// SetUpdatedAt sets the "updated_at" field.
func (jtu *JobTemplateUpdate) SetUpdatedAt(t time.Time) *JobTemplateUpdate {
	jtu.mutation.SetUpdatedAt(t)
	return jtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jtu *JobTemplateUpdate) ClearUpdatedAt() *JobTemplateUpdate {
	jtu.mutation.ClearUpdatedAt()
	return jtu
}

// SetUpdatedBy sets the "updated_by" field.
func (jtu *JobTemplateUpdate) SetUpdatedBy(s string) *JobTemplateUpdate {
	jtu.mutation.SetUpdatedBy(s)
	return jtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableUpdatedBy(s *string) *JobTemplateUpdate {
	if s != nil {
		jtu.SetUpdatedBy(*s)
	}
	return jtu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jtu *JobTemplateUpdate) ClearUpdatedBy() *JobTemplateUpdate {
	jtu.mutation.ClearUpdatedBy()
	return jtu
}

// SetDeletedAt sets the "deleted_at" field.
func (jtu *JobTemplateUpdate) SetDeletedAt(t time.Time) *JobTemplateUpdate {
	jtu.mutation.SetDeletedAt(t)
	return jtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableDeletedAt(t *time.Time) *JobTemplateUpdate {
	if t != nil {
		jtu.SetDeletedAt(*t)
	}
	return jtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jtu *JobTemplateUpdate) ClearDeletedAt() *JobTemplateUpdate {
	jtu.mutation.ClearDeletedAt()
	return jtu
}

// SetDeletedBy sets the "deleted_by" field.
func (jtu *JobTemplateUpdate) SetDeletedBy(s string) *JobTemplateUpdate {
	jtu.mutation.SetDeletedBy(s)
	return jtu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableDeletedBy(s *string) *JobTemplateUpdate {
	if s != nil {
		jtu.SetDeletedBy(*s)
	}
	return jtu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jtu *JobTemplateUpdate) ClearDeletedBy() *JobTemplateUpdate {
	jtu.mutation.ClearDeletedBy()
	return jtu
}

// SetTags sets the "tags" field.
func (jtu *JobTemplateUpdate) SetTags(s []string) *JobTemplateUpdate {
	jtu.mutation.SetTags(s)
	return jtu
}

// AppendTags appends s to the "tags" field.
func (jtu *JobTemplateUpdate) AppendTags(s []string) *JobTemplateUpdate {
	jtu.mutation.AppendTags(s)
	return jtu
}

// ClearTags clears the value of the "tags" field.
func (jtu *JobTemplateUpdate) ClearTags() *JobTemplateUpdate {
	jtu.mutation.ClearTags()
	return jtu
}

// SetOwnerID sets the "owner_id" field.
func (jtu *JobTemplateUpdate) SetOwnerID(s string) *JobTemplateUpdate {
	jtu.mutation.SetOwnerID(s)
	return jtu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableOwnerID(s *string) *JobTemplateUpdate {
	if s != nil {
		jtu.SetOwnerID(*s)
	}
	return jtu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jtu *JobTemplateUpdate) ClearOwnerID() *JobTemplateUpdate {
	jtu.mutation.ClearOwnerID()
	return jtu
}

// SetTitle sets the "title" field.
func (jtu *JobTemplateUpdate) SetTitle(s string) *JobTemplateUpdate {
	jtu.mutation.SetTitle(s)
	return jtu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableTitle(s *string) *JobTemplateUpdate {
	if s != nil {
		jtu.SetTitle(*s)
	}
	return jtu
}

// SetDescription sets the "description" field.
func (jtu *JobTemplateUpdate) SetDescription(s string) *JobTemplateUpdate {
	jtu.mutation.SetDescription(s)
	return jtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableDescription(s *string) *JobTemplateUpdate {
	if s != nil {
		jtu.SetDescription(*s)
	}
	return jtu
}

// ClearDescription clears the value of the "description" field.
func (jtu *JobTemplateUpdate) ClearDescription() *JobTemplateUpdate {
	jtu.mutation.ClearDescription()
	return jtu
}

// SetWindmillPath sets the "windmill_path" field.
func (jtu *JobTemplateUpdate) SetWindmillPath(s string) *JobTemplateUpdate {
	jtu.mutation.SetWindmillPath(s)
	return jtu
}

// SetNillableWindmillPath sets the "windmill_path" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableWindmillPath(s *string) *JobTemplateUpdate {
	if s != nil {
		jtu.SetWindmillPath(*s)
	}
	return jtu
}

// ClearWindmillPath clears the value of the "windmill_path" field.
func (jtu *JobTemplateUpdate) ClearWindmillPath() *JobTemplateUpdate {
	jtu.mutation.ClearWindmillPath()
	return jtu
}

// SetDownloadURL sets the "download_url" field.
func (jtu *JobTemplateUpdate) SetDownloadURL(s string) *JobTemplateUpdate {
	jtu.mutation.SetDownloadURL(s)
	return jtu
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableDownloadURL(s *string) *JobTemplateUpdate {
	if s != nil {
		jtu.SetDownloadURL(*s)
	}
	return jtu
}

// SetConfiguration sets the "configuration" field.
func (jtu *JobTemplateUpdate) SetConfiguration(mc models.JobConfiguration) *JobTemplateUpdate {
	jtu.mutation.SetConfiguration(mc)
	return jtu
}

// AppendConfiguration appends mc to the "configuration" field.
func (jtu *JobTemplateUpdate) AppendConfiguration(mc models.JobConfiguration) *JobTemplateUpdate {
	jtu.mutation.AppendConfiguration(mc)
	return jtu
}

// ClearConfiguration clears the value of the "configuration" field.
func (jtu *JobTemplateUpdate) ClearConfiguration() *JobTemplateUpdate {
	jtu.mutation.ClearConfiguration()
	return jtu
}

// SetCron sets the "cron" field.
func (jtu *JobTemplateUpdate) SetCron(m models.Cron) *JobTemplateUpdate {
	jtu.mutation.SetCron(m)
	return jtu
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (jtu *JobTemplateUpdate) SetNillableCron(m *models.Cron) *JobTemplateUpdate {
	if m != nil {
		jtu.SetCron(*m)
	}
	return jtu
}

// ClearCron clears the value of the "cron" field.
func (jtu *JobTemplateUpdate) ClearCron() *JobTemplateUpdate {
	jtu.mutation.ClearCron()
	return jtu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jtu *JobTemplateUpdate) SetOwner(o *Organization) *JobTemplateUpdate {
	return jtu.SetOwnerID(o.ID)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (jtu *JobTemplateUpdate) AddScheduledJobIDs(ids ...string) *JobTemplateUpdate {
	jtu.mutation.AddScheduledJobIDs(ids...)
	return jtu
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (jtu *JobTemplateUpdate) AddScheduledJobs(s ...*ScheduledJob) *JobTemplateUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jtu.AddScheduledJobIDs(ids...)
}

// Mutation returns the JobTemplateMutation object of the builder.
func (jtu *JobTemplateUpdate) Mutation() *JobTemplateMutation {
	return jtu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (jtu *JobTemplateUpdate) ClearOwner() *JobTemplateUpdate {
	jtu.mutation.ClearOwner()
	return jtu
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (jtu *JobTemplateUpdate) ClearScheduledJobs() *JobTemplateUpdate {
	jtu.mutation.ClearScheduledJobs()
	return jtu
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (jtu *JobTemplateUpdate) RemoveScheduledJobIDs(ids ...string) *JobTemplateUpdate {
	jtu.mutation.RemoveScheduledJobIDs(ids...)
	return jtu
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (jtu *JobTemplateUpdate) RemoveScheduledJobs(s ...*ScheduledJob) *JobTemplateUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jtu.RemoveScheduledJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jtu *JobTemplateUpdate) Save(ctx context.Context) (int, error) {
	if err := jtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jtu.sqlSave, jtu.mutation, jtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jtu *JobTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := jtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jtu *JobTemplateUpdate) Exec(ctx context.Context) error {
	_, err := jtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtu *JobTemplateUpdate) ExecX(ctx context.Context) {
	if err := jtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtu *JobTemplateUpdate) defaults() error {
	if _, ok := jtu.mutation.UpdatedAt(); !ok && !jtu.mutation.UpdatedAtCleared() {
		if jobtemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplate.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplate.UpdateDefaultUpdatedAt()
		jtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jtu *JobTemplateUpdate) check() error {
	if v, ok := jtu.mutation.Title(); ok {
		if err := jobtemplate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.title": %w`, err)}
		}
	}
	if v, ok := jtu.mutation.Cron(); ok {
		if err := jobtemplate.CronValidator(string(v)); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.cron": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jtu *JobTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobTemplateUpdate {
	jtu.modifiers = append(jtu.modifiers, modifiers...)
	return jtu
}

func (jtu *JobTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobtemplate.Table, jobtemplate.Columns, sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString))
	if ps := jtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jtu.mutation.CreatedAtCleared() {
		_spec.ClearField(jobtemplate.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jtu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if jtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobtemplate.FieldUpdatedAt, field.TypeTime)
	}
	if jtu.mutation.CreatedByCleared() {
		_spec.ClearField(jobtemplate.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jtu.mutation.UpdatedBy(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedBy, field.TypeString, value)
	}
	if jtu.mutation.UpdatedByCleared() {
		_spec.ClearField(jobtemplate.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jtu.mutation.DeletedAt(); ok {
		_spec.SetField(jobtemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if jtu.mutation.DeletedAtCleared() {
		_spec.ClearField(jobtemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jtu.mutation.DeletedBy(); ok {
		_spec.SetField(jobtemplate.FieldDeletedBy, field.TypeString, value)
	}
	if jtu.mutation.DeletedByCleared() {
		_spec.ClearField(jobtemplate.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jtu.mutation.Tags(); ok {
		_spec.SetField(jobtemplate.FieldTags, field.TypeJSON, value)
	}
	if value, ok := jtu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplate.FieldTags, value)
		})
	}
	if jtu.mutation.TagsCleared() {
		_spec.ClearField(jobtemplate.FieldTags, field.TypeJSON)
	}
	if jtu.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobtemplate.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := jtu.mutation.Title(); ok {
		_spec.SetField(jobtemplate.FieldTitle, field.TypeString, value)
	}
	if value, ok := jtu.mutation.Description(); ok {
		_spec.SetField(jobtemplate.FieldDescription, field.TypeString, value)
	}
	if jtu.mutation.DescriptionCleared() {
		_spec.ClearField(jobtemplate.FieldDescription, field.TypeString)
	}
	if value, ok := jtu.mutation.WindmillPath(); ok {
		_spec.SetField(jobtemplate.FieldWindmillPath, field.TypeString, value)
	}
	if jtu.mutation.WindmillPathCleared() {
		_spec.ClearField(jobtemplate.FieldWindmillPath, field.TypeString)
	}
	if value, ok := jtu.mutation.DownloadURL(); ok {
		_spec.SetField(jobtemplate.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := jtu.mutation.Configuration(); ok {
		_spec.SetField(jobtemplate.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := jtu.mutation.AppendedConfiguration(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplate.FieldConfiguration, value)
		})
	}
	if jtu.mutation.ConfigurationCleared() {
		_spec.ClearField(jobtemplate.FieldConfiguration, field.TypeJSON)
	}
	if value, ok := jtu.mutation.Cron(); ok {
		_spec.SetField(jobtemplate.FieldCron, field.TypeString, value)
	}
	if jtu.mutation.CronCleared() {
		_spec.ClearField(jobtemplate.FieldCron, field.TypeString)
	}
	if jtu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtu.schemaConfig.JobTemplate
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtu.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jtu.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtu.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtu.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !jtu.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtu.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtu.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtu.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jtu.schemaConfig.JobTemplate
	ctx = internal.NewSchemaConfigContext(ctx, jtu.schemaConfig)
	_spec.AddModifiers(jtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jtu.mutation.done = true
	return n, nil
}

// JobTemplateUpdateOne is the builder for updating a single JobTemplate entity.
type JobTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (jtuo *JobTemplateUpdateOne) SetUpdatedAt(t time.Time) *JobTemplateUpdateOne {
	jtuo.mutation.SetUpdatedAt(t)
	return jtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jtuo *JobTemplateUpdateOne) ClearUpdatedAt() *JobTemplateUpdateOne {
	jtuo.mutation.ClearUpdatedAt()
	return jtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (jtuo *JobTemplateUpdateOne) SetUpdatedBy(s string) *JobTemplateUpdateOne {
	jtuo.mutation.SetUpdatedBy(s)
	return jtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableUpdatedBy(s *string) *JobTemplateUpdateOne {
	if s != nil {
		jtuo.SetUpdatedBy(*s)
	}
	return jtuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jtuo *JobTemplateUpdateOne) ClearUpdatedBy() *JobTemplateUpdateOne {
	jtuo.mutation.ClearUpdatedBy()
	return jtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (jtuo *JobTemplateUpdateOne) SetDeletedAt(t time.Time) *JobTemplateUpdateOne {
	jtuo.mutation.SetDeletedAt(t)
	return jtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableDeletedAt(t *time.Time) *JobTemplateUpdateOne {
	if t != nil {
		jtuo.SetDeletedAt(*t)
	}
	return jtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jtuo *JobTemplateUpdateOne) ClearDeletedAt() *JobTemplateUpdateOne {
	jtuo.mutation.ClearDeletedAt()
	return jtuo
}

// SetDeletedBy sets the "deleted_by" field.
func (jtuo *JobTemplateUpdateOne) SetDeletedBy(s string) *JobTemplateUpdateOne {
	jtuo.mutation.SetDeletedBy(s)
	return jtuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableDeletedBy(s *string) *JobTemplateUpdateOne {
	if s != nil {
		jtuo.SetDeletedBy(*s)
	}
	return jtuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jtuo *JobTemplateUpdateOne) ClearDeletedBy() *JobTemplateUpdateOne {
	jtuo.mutation.ClearDeletedBy()
	return jtuo
}

// SetTags sets the "tags" field.
func (jtuo *JobTemplateUpdateOne) SetTags(s []string) *JobTemplateUpdateOne {
	jtuo.mutation.SetTags(s)
	return jtuo
}

// AppendTags appends s to the "tags" field.
func (jtuo *JobTemplateUpdateOne) AppendTags(s []string) *JobTemplateUpdateOne {
	jtuo.mutation.AppendTags(s)
	return jtuo
}

// ClearTags clears the value of the "tags" field.
func (jtuo *JobTemplateUpdateOne) ClearTags() *JobTemplateUpdateOne {
	jtuo.mutation.ClearTags()
	return jtuo
}

// SetOwnerID sets the "owner_id" field.
func (jtuo *JobTemplateUpdateOne) SetOwnerID(s string) *JobTemplateUpdateOne {
	jtuo.mutation.SetOwnerID(s)
	return jtuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableOwnerID(s *string) *JobTemplateUpdateOne {
	if s != nil {
		jtuo.SetOwnerID(*s)
	}
	return jtuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jtuo *JobTemplateUpdateOne) ClearOwnerID() *JobTemplateUpdateOne {
	jtuo.mutation.ClearOwnerID()
	return jtuo
}

// SetTitle sets the "title" field.
func (jtuo *JobTemplateUpdateOne) SetTitle(s string) *JobTemplateUpdateOne {
	jtuo.mutation.SetTitle(s)
	return jtuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableTitle(s *string) *JobTemplateUpdateOne {
	if s != nil {
		jtuo.SetTitle(*s)
	}
	return jtuo
}

// SetDescription sets the "description" field.
func (jtuo *JobTemplateUpdateOne) SetDescription(s string) *JobTemplateUpdateOne {
	jtuo.mutation.SetDescription(s)
	return jtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableDescription(s *string) *JobTemplateUpdateOne {
	if s != nil {
		jtuo.SetDescription(*s)
	}
	return jtuo
}

// ClearDescription clears the value of the "description" field.
func (jtuo *JobTemplateUpdateOne) ClearDescription() *JobTemplateUpdateOne {
	jtuo.mutation.ClearDescription()
	return jtuo
}

// SetWindmillPath sets the "windmill_path" field.
func (jtuo *JobTemplateUpdateOne) SetWindmillPath(s string) *JobTemplateUpdateOne {
	jtuo.mutation.SetWindmillPath(s)
	return jtuo
}

// SetNillableWindmillPath sets the "windmill_path" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableWindmillPath(s *string) *JobTemplateUpdateOne {
	if s != nil {
		jtuo.SetWindmillPath(*s)
	}
	return jtuo
}

// ClearWindmillPath clears the value of the "windmill_path" field.
func (jtuo *JobTemplateUpdateOne) ClearWindmillPath() *JobTemplateUpdateOne {
	jtuo.mutation.ClearWindmillPath()
	return jtuo
}

// SetDownloadURL sets the "download_url" field.
func (jtuo *JobTemplateUpdateOne) SetDownloadURL(s string) *JobTemplateUpdateOne {
	jtuo.mutation.SetDownloadURL(s)
	return jtuo
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableDownloadURL(s *string) *JobTemplateUpdateOne {
	if s != nil {
		jtuo.SetDownloadURL(*s)
	}
	return jtuo
}

// SetConfiguration sets the "configuration" field.
func (jtuo *JobTemplateUpdateOne) SetConfiguration(mc models.JobConfiguration) *JobTemplateUpdateOne {
	jtuo.mutation.SetConfiguration(mc)
	return jtuo
}

// AppendConfiguration appends mc to the "configuration" field.
func (jtuo *JobTemplateUpdateOne) AppendConfiguration(mc models.JobConfiguration) *JobTemplateUpdateOne {
	jtuo.mutation.AppendConfiguration(mc)
	return jtuo
}

// ClearConfiguration clears the value of the "configuration" field.
func (jtuo *JobTemplateUpdateOne) ClearConfiguration() *JobTemplateUpdateOne {
	jtuo.mutation.ClearConfiguration()
	return jtuo
}

// SetCron sets the "cron" field.
func (jtuo *JobTemplateUpdateOne) SetCron(m models.Cron) *JobTemplateUpdateOne {
	jtuo.mutation.SetCron(m)
	return jtuo
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (jtuo *JobTemplateUpdateOne) SetNillableCron(m *models.Cron) *JobTemplateUpdateOne {
	if m != nil {
		jtuo.SetCron(*m)
	}
	return jtuo
}

// ClearCron clears the value of the "cron" field.
func (jtuo *JobTemplateUpdateOne) ClearCron() *JobTemplateUpdateOne {
	jtuo.mutation.ClearCron()
	return jtuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jtuo *JobTemplateUpdateOne) SetOwner(o *Organization) *JobTemplateUpdateOne {
	return jtuo.SetOwnerID(o.ID)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (jtuo *JobTemplateUpdateOne) AddScheduledJobIDs(ids ...string) *JobTemplateUpdateOne {
	jtuo.mutation.AddScheduledJobIDs(ids...)
	return jtuo
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (jtuo *JobTemplateUpdateOne) AddScheduledJobs(s ...*ScheduledJob) *JobTemplateUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jtuo.AddScheduledJobIDs(ids...)
}

// Mutation returns the JobTemplateMutation object of the builder.
func (jtuo *JobTemplateUpdateOne) Mutation() *JobTemplateMutation {
	return jtuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (jtuo *JobTemplateUpdateOne) ClearOwner() *JobTemplateUpdateOne {
	jtuo.mutation.ClearOwner()
	return jtuo
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (jtuo *JobTemplateUpdateOne) ClearScheduledJobs() *JobTemplateUpdateOne {
	jtuo.mutation.ClearScheduledJobs()
	return jtuo
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (jtuo *JobTemplateUpdateOne) RemoveScheduledJobIDs(ids ...string) *JobTemplateUpdateOne {
	jtuo.mutation.RemoveScheduledJobIDs(ids...)
	return jtuo
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (jtuo *JobTemplateUpdateOne) RemoveScheduledJobs(s ...*ScheduledJob) *JobTemplateUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jtuo.RemoveScheduledJobIDs(ids...)
}

// Where appends a list predicates to the JobTemplateUpdate builder.
func (jtuo *JobTemplateUpdateOne) Where(ps ...predicate.JobTemplate) *JobTemplateUpdateOne {
	jtuo.mutation.Where(ps...)
	return jtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jtuo *JobTemplateUpdateOne) Select(field string, fields ...string) *JobTemplateUpdateOne {
	jtuo.fields = append([]string{field}, fields...)
	return jtuo
}

// Save executes the query and returns the updated JobTemplate entity.
func (jtuo *JobTemplateUpdateOne) Save(ctx context.Context) (*JobTemplate, error) {
	if err := jtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jtuo.sqlSave, jtuo.mutation, jtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jtuo *JobTemplateUpdateOne) SaveX(ctx context.Context) *JobTemplate {
	node, err := jtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jtuo *JobTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := jtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtuo *JobTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := jtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtuo *JobTemplateUpdateOne) defaults() error {
	if _, ok := jtuo.mutation.UpdatedAt(); !ok && !jtuo.mutation.UpdatedAtCleared() {
		if jobtemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplate.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplate.UpdateDefaultUpdatedAt()
		jtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jtuo *JobTemplateUpdateOne) check() error {
	if v, ok := jtuo.mutation.Title(); ok {
		if err := jobtemplate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.title": %w`, err)}
		}
	}
	if v, ok := jtuo.mutation.Cron(); ok {
		if err := jobtemplate.CronValidator(string(v)); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.cron": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jtuo *JobTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobTemplateUpdateOne {
	jtuo.modifiers = append(jtuo.modifiers, modifiers...)
	return jtuo
}

func (jtuo *JobTemplateUpdateOne) sqlSave(ctx context.Context) (_node *JobTemplate, err error) {
	if err := jtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobtemplate.Table, jobtemplate.Columns, sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString))
	id, ok := jtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "JobTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobtemplate.FieldID)
		for _, f := range fields {
			if !jobtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != jobtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jtuo.mutation.CreatedAtCleared() {
		_spec.ClearField(jobtemplate.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if jtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobtemplate.FieldUpdatedAt, field.TypeTime)
	}
	if jtuo.mutation.CreatedByCleared() {
		_spec.ClearField(jobtemplate.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedBy, field.TypeString, value)
	}
	if jtuo.mutation.UpdatedByCleared() {
		_spec.ClearField(jobtemplate.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jtuo.mutation.DeletedAt(); ok {
		_spec.SetField(jobtemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if jtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobtemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jtuo.mutation.DeletedBy(); ok {
		_spec.SetField(jobtemplate.FieldDeletedBy, field.TypeString, value)
	}
	if jtuo.mutation.DeletedByCleared() {
		_spec.ClearField(jobtemplate.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jtuo.mutation.Tags(); ok {
		_spec.SetField(jobtemplate.FieldTags, field.TypeJSON, value)
	}
	if value, ok := jtuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplate.FieldTags, value)
		})
	}
	if jtuo.mutation.TagsCleared() {
		_spec.ClearField(jobtemplate.FieldTags, field.TypeJSON)
	}
	if jtuo.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobtemplate.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := jtuo.mutation.Title(); ok {
		_spec.SetField(jobtemplate.FieldTitle, field.TypeString, value)
	}
	if value, ok := jtuo.mutation.Description(); ok {
		_spec.SetField(jobtemplate.FieldDescription, field.TypeString, value)
	}
	if jtuo.mutation.DescriptionCleared() {
		_spec.ClearField(jobtemplate.FieldDescription, field.TypeString)
	}
	if value, ok := jtuo.mutation.WindmillPath(); ok {
		_spec.SetField(jobtemplate.FieldWindmillPath, field.TypeString, value)
	}
	if jtuo.mutation.WindmillPathCleared() {
		_spec.ClearField(jobtemplate.FieldWindmillPath, field.TypeString)
	}
	if value, ok := jtuo.mutation.DownloadURL(); ok {
		_spec.SetField(jobtemplate.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := jtuo.mutation.Configuration(); ok {
		_spec.SetField(jobtemplate.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := jtuo.mutation.AppendedConfiguration(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplate.FieldConfiguration, value)
		})
	}
	if jtuo.mutation.ConfigurationCleared() {
		_spec.ClearField(jobtemplate.FieldConfiguration, field.TypeJSON)
	}
	if value, ok := jtuo.mutation.Cron(); ok {
		_spec.SetField(jobtemplate.FieldCron, field.TypeString, value)
	}
	if jtuo.mutation.CronCleared() {
		_spec.ClearField(jobtemplate.FieldCron, field.TypeString)
	}
	if jtuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtuo.schemaConfig.JobTemplate
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtuo.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jtuo.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtuo.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtuo.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !jtuo.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtuo.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtuo.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtuo.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jtuo.schemaConfig.JobTemplate
	ctx = internal.NewSchemaConfigContext(ctx, jtuo.schemaConfig)
	_spec.AddModifiers(jtuo.modifiers...)
	_node = &JobTemplate{config: jtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jtuo.mutation.done = true
	return _node, nil
}
