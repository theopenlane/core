// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/entx/history"
)

// HushHistory is the model entity for the HushHistory schema.
type HushHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID string `json:"created_by_id,omitempty"`
	// UpdatedByID holds the value of the "updated_by_id" field.
	UpdatedByID string `json:"updated_by_id,omitempty"`
	// CreatedByUserID holds the value of the "created_by_user_id" field.
	CreatedByUserID string `json:"created_by_user_id,omitempty"`
	// UpdatedByUserID holds the value of the "updated_by_user_id" field.
	UpdatedByUserID string `json:"updated_by_user_id,omitempty"`
	// CreatedByServiceID holds the value of the "created_by_service_id" field.
	CreatedByServiceID string `json:"created_by_service_id,omitempty"`
	// UpdatedByServiceID holds the value of the "updated_by_service_id" field.
	UpdatedByServiceID string `json:"updated_by_service_id,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedByID holds the value of the "deleted_by_id" field.
	DeletedByID string `json:"deleted_by_id,omitempty"`
	// the logical name of the corresponding hush secret or it's general grouping
	Name string `json:"name,omitempty"`
	// a description of the hush value or purpose, such as github PAT
	Description string `json:"description,omitempty"`
	// the kind of secret, such as sshkey, certificate, api token, etc.
	Kind string `json:"kind,omitempty"`
	// the generic name of a secret associated with the organization
	SecretName string `json:"secret_name,omitempty"`
	// the secret value
	SecretValue  string `json:"-"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HushHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hushhistory.FieldOperation:
			values[i] = new(history.OpType)
		case hushhistory.FieldID, hushhistory.FieldRef, hushhistory.FieldUpdatedBy, hushhistory.FieldCreatedByID, hushhistory.FieldUpdatedByID, hushhistory.FieldCreatedByUserID, hushhistory.FieldUpdatedByUserID, hushhistory.FieldCreatedByServiceID, hushhistory.FieldUpdatedByServiceID, hushhistory.FieldMappingID, hushhistory.FieldDeletedByID, hushhistory.FieldName, hushhistory.FieldDescription, hushhistory.FieldKind, hushhistory.FieldSecretName, hushhistory.FieldSecretValue:
			values[i] = new(sql.NullString)
		case hushhistory.FieldHistoryTime, hushhistory.FieldCreatedAt, hushhistory.FieldUpdatedAt, hushhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HushHistory fields.
func (hh *HushHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hushhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				hh.ID = value.String
			}
		case hushhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				hh.HistoryTime = value.Time
			}
		case hushhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				hh.Ref = value.String
			}
		case hushhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				hh.Operation = *value
			}
		case hushhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				hh.UpdatedBy = new(string)
				*hh.UpdatedBy = value.String
			}
		case hushhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hh.CreatedAt = value.Time
			}
		case hushhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hh.UpdatedAt = value.Time
			}
		case hushhistory.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				hh.CreatedByID = value.String
			}
		case hushhistory.FieldUpdatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_id", values[i])
			} else if value.Valid {
				hh.UpdatedByID = value.String
			}
		case hushhistory.FieldCreatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_id", values[i])
			} else if value.Valid {
				hh.CreatedByUserID = value.String
			}
		case hushhistory.FieldUpdatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_user_id", values[i])
			} else if value.Valid {
				hh.UpdatedByUserID = value.String
			}
		case hushhistory.FieldCreatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_service_id", values[i])
			} else if value.Valid {
				hh.CreatedByServiceID = value.String
			}
		case hushhistory.FieldUpdatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_service_id", values[i])
			} else if value.Valid {
				hh.UpdatedByServiceID = value.String
			}
		case hushhistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				hh.MappingID = value.String
			}
		case hushhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				hh.DeletedAt = value.Time
			}
		case hushhistory.FieldDeletedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by_id", values[i])
			} else if value.Valid {
				hh.DeletedByID = value.String
			}
		case hushhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hh.Name = value.String
			}
		case hushhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hh.Description = value.String
			}
		case hushhistory.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				hh.Kind = value.String
			}
		case hushhistory.FieldSecretName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_name", values[i])
			} else if value.Valid {
				hh.SecretName = value.String
			}
		case hushhistory.FieldSecretValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_value", values[i])
			} else if value.Valid {
				hh.SecretValue = value.String
			}
		default:
			hh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HushHistory.
// This includes values selected through modifiers, order, etc.
func (hh *HushHistory) Value(name string) (ent.Value, error) {
	return hh.selectValues.Get(name)
}

// Update returns a builder for updating this HushHistory.
// Note that you need to call HushHistory.Unwrap() before calling this method if this HushHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (hh *HushHistory) Update() *HushHistoryUpdateOne {
	return NewHushHistoryClient(hh.config).UpdateOne(hh)
}

// Unwrap unwraps the HushHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hh *HushHistory) Unwrap() *HushHistory {
	_tx, ok := hh.config.driver.(*txDriver)
	if !ok {
		panic("generated: HushHistory is not a transactional entity")
	}
	hh.config.driver = _tx.drv
	return hh
}

// String implements the fmt.Stringer.
func (hh *HushHistory) String() string {
	var builder strings.Builder
	builder.WriteString("HushHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(hh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(hh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", hh.Operation))
	builder.WriteString(", ")
	if v := hh.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by_id=")
	builder.WriteString(hh.CreatedByID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_id=")
	builder.WriteString(hh.UpdatedByID)
	builder.WriteString(", ")
	builder.WriteString("created_by_user_id=")
	builder.WriteString(hh.CreatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_user_id=")
	builder.WriteString(hh.UpdatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("created_by_service_id=")
	builder.WriteString(hh.CreatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_service_id=")
	builder.WriteString(hh.UpdatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(hh.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(hh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by_id=")
	builder.WriteString(hh.DeletedByID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(hh.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hh.Description)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(hh.Kind)
	builder.WriteString(", ")
	builder.WriteString("secret_name=")
	builder.WriteString(hh.SecretName)
	builder.WriteString(", ")
	builder.WriteString("secret_value=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// HushHistories is a parsable slice of HushHistory.
type HushHistories []*HushHistory
