// Code generated by ent, DO NOT EDIT.

package generated

import (
	"errors"
	"fmt"
	"time"

	"github.com/theopenlane/core/internal/ent/customtypes"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/documentdatahistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/entitlementhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeaturehistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entityhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/eventhistory"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/featurehistory"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/integrationhistory"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/notehistory"
	"github.com/theopenlane/core/internal/ent/generated/oauthprovider"
	"github.com/theopenlane/core/internal/ent/generated/oauthproviderhistory"
	"github.com/theopenlane/core/internal/ent/generated/ohauthtootoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/organizationsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/userhistory"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/webhook"
	"github.com/theopenlane/core/internal/ent/generated/webhookhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// APITokenWhereInput represents a where input for filtering APIToken queries.
type APITokenWhereInput struct {
	Predicates []predicate.APIToken  `json:"-"`
	Not        *APITokenWhereInput   `json:"not,omitempty"`
	Or         []*APITokenWhereInput `json:"or,omitempty"`
	And        []*APITokenWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "expires_at" field predicates.
	ExpiresAt       *time.Time  `json:"expiresAt,omitempty"`
	ExpiresAtNEQ    *time.Time  `json:"expiresAtNEQ,omitempty"`
	ExpiresAtIn     []time.Time `json:"expiresAtIn,omitempty"`
	ExpiresAtNotIn  []time.Time `json:"expiresAtNotIn,omitempty"`
	ExpiresAtGT     *time.Time  `json:"expiresAtGT,omitempty"`
	ExpiresAtGTE    *time.Time  `json:"expiresAtGTE,omitempty"`
	ExpiresAtLT     *time.Time  `json:"expiresAtLT,omitempty"`
	ExpiresAtLTE    *time.Time  `json:"expiresAtLTE,omitempty"`
	ExpiresAtIsNil  bool        `json:"expiresAtIsNil,omitempty"`
	ExpiresAtNotNil bool        `json:"expiresAtNotNil,omitempty"`

	// "last_used_at" field predicates.
	LastUsedAt       *time.Time  `json:"lastUsedAt,omitempty"`
	LastUsedAtNEQ    *time.Time  `json:"lastUsedAtNEQ,omitempty"`
	LastUsedAtIn     []time.Time `json:"lastUsedAtIn,omitempty"`
	LastUsedAtNotIn  []time.Time `json:"lastUsedAtNotIn,omitempty"`
	LastUsedAtGT     *time.Time  `json:"lastUsedAtGT,omitempty"`
	LastUsedAtGTE    *time.Time  `json:"lastUsedAtGTE,omitempty"`
	LastUsedAtLT     *time.Time  `json:"lastUsedAtLT,omitempty"`
	LastUsedAtLTE    *time.Time  `json:"lastUsedAtLTE,omitempty"`
	LastUsedAtIsNil  bool        `json:"lastUsedAtIsNil,omitempty"`
	LastUsedAtNotNil bool        `json:"lastUsedAtNotNil,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *APITokenWhereInput) AddPredicates(predicates ...predicate.APIToken) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the APITokenWhereInput filter on the APITokenQuery builder.
func (i *APITokenWhereInput) Filter(q *APITokenQuery) (*APITokenQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAPITokenWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAPITokenWhereInput is returned in case the APITokenWhereInput is empty.
var ErrEmptyAPITokenWhereInput = errors.New("generated: empty predicate APITokenWhereInput")

// P returns a predicate for filtering apitokens.
// An error is returned if the input is empty or invalid.
func (i *APITokenWhereInput) P() (predicate.APIToken, error) {
	var predicates []predicate.APIToken
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, apitoken.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.APIToken, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, apitoken.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.APIToken, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, apitoken.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, apitoken.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, apitoken.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, apitoken.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, apitoken.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, apitoken.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, apitoken.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, apitoken.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, apitoken.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, apitoken.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, apitoken.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, apitoken.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, apitoken.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, apitoken.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, apitoken.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, apitoken.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, apitoken.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, apitoken.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, apitoken.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, apitoken.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, apitoken.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, apitoken.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, apitoken.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, apitoken.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, apitoken.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, apitoken.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, apitoken.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, apitoken.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, apitoken.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, apitoken.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, apitoken.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, apitoken.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, apitoken.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, apitoken.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, apitoken.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, apitoken.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, apitoken.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, apitoken.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, apitoken.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, apitoken.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, apitoken.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, apitoken.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, apitoken.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, apitoken.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, apitoken.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, apitoken.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, apitoken.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, apitoken.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, apitoken.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, apitoken.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, apitoken.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, apitoken.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, apitoken.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, apitoken.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, apitoken.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, apitoken.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, apitoken.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, apitoken.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, apitoken.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, apitoken.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, apitoken.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, apitoken.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, apitoken.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, apitoken.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, apitoken.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, apitoken.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, apitoken.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, apitoken.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, apitoken.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, apitoken.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, apitoken.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, apitoken.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, apitoken.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, apitoken.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, apitoken.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, apitoken.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, apitoken.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, apitoken.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, apitoken.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, apitoken.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, apitoken.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, apitoken.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, apitoken.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, apitoken.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, apitoken.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, apitoken.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, apitoken.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, apitoken.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, apitoken.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, apitoken.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, apitoken.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, apitoken.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, apitoken.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, apitoken.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, apitoken.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, apitoken.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, apitoken.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, apitoken.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, apitoken.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, apitoken.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, apitoken.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, apitoken.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, apitoken.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, apitoken.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, apitoken.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, apitoken.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, apitoken.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, apitoken.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, apitoken.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, apitoken.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, apitoken.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, apitoken.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, apitoken.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, apitoken.NameContainsFold(*i.NameContainsFold))
	}
	if i.ExpiresAt != nil {
		predicates = append(predicates, apitoken.ExpiresAtEQ(*i.ExpiresAt))
	}
	if i.ExpiresAtNEQ != nil {
		predicates = append(predicates, apitoken.ExpiresAtNEQ(*i.ExpiresAtNEQ))
	}
	if len(i.ExpiresAtIn) > 0 {
		predicates = append(predicates, apitoken.ExpiresAtIn(i.ExpiresAtIn...))
	}
	if len(i.ExpiresAtNotIn) > 0 {
		predicates = append(predicates, apitoken.ExpiresAtNotIn(i.ExpiresAtNotIn...))
	}
	if i.ExpiresAtGT != nil {
		predicates = append(predicates, apitoken.ExpiresAtGT(*i.ExpiresAtGT))
	}
	if i.ExpiresAtGTE != nil {
		predicates = append(predicates, apitoken.ExpiresAtGTE(*i.ExpiresAtGTE))
	}
	if i.ExpiresAtLT != nil {
		predicates = append(predicates, apitoken.ExpiresAtLT(*i.ExpiresAtLT))
	}
	if i.ExpiresAtLTE != nil {
		predicates = append(predicates, apitoken.ExpiresAtLTE(*i.ExpiresAtLTE))
	}
	if i.ExpiresAtIsNil {
		predicates = append(predicates, apitoken.ExpiresAtIsNil())
	}
	if i.ExpiresAtNotNil {
		predicates = append(predicates, apitoken.ExpiresAtNotNil())
	}
	if i.LastUsedAt != nil {
		predicates = append(predicates, apitoken.LastUsedAtEQ(*i.LastUsedAt))
	}
	if i.LastUsedAtNEQ != nil {
		predicates = append(predicates, apitoken.LastUsedAtNEQ(*i.LastUsedAtNEQ))
	}
	if len(i.LastUsedAtIn) > 0 {
		predicates = append(predicates, apitoken.LastUsedAtIn(i.LastUsedAtIn...))
	}
	if len(i.LastUsedAtNotIn) > 0 {
		predicates = append(predicates, apitoken.LastUsedAtNotIn(i.LastUsedAtNotIn...))
	}
	if i.LastUsedAtGT != nil {
		predicates = append(predicates, apitoken.LastUsedAtGT(*i.LastUsedAtGT))
	}
	if i.LastUsedAtGTE != nil {
		predicates = append(predicates, apitoken.LastUsedAtGTE(*i.LastUsedAtGTE))
	}
	if i.LastUsedAtLT != nil {
		predicates = append(predicates, apitoken.LastUsedAtLT(*i.LastUsedAtLT))
	}
	if i.LastUsedAtLTE != nil {
		predicates = append(predicates, apitoken.LastUsedAtLTE(*i.LastUsedAtLTE))
	}
	if i.LastUsedAtIsNil {
		predicates = append(predicates, apitoken.LastUsedAtIsNil())
	}
	if i.LastUsedAtNotNil {
		predicates = append(predicates, apitoken.LastUsedAtNotNil())
	}

	if i.HasOwner != nil {
		p := apitoken.HasOwner()
		if !*i.HasOwner {
			p = apitoken.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, apitoken.HasOwnerWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAPITokenWhereInput
	case 1:
		return predicates[0], nil
	default:
		return apitoken.And(predicates...), nil
	}
}

// ContactWhereInput represents a where input for filtering Contact queries.
type ContactWhereInput struct {
	Predicates []predicate.Contact  `json:"-"`
	Not        *ContactWhereInput   `json:"not,omitempty"`
	Or         []*ContactWhereInput `json:"or,omitempty"`
	And        []*ContactWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "full_name" field predicates.
	FullName             *string  `json:"fullName,omitempty"`
	FullNameNEQ          *string  `json:"fullNameNEQ,omitempty"`
	FullNameIn           []string `json:"fullNameIn,omitempty"`
	FullNameNotIn        []string `json:"fullNameNotIn,omitempty"`
	FullNameGT           *string  `json:"fullNameGT,omitempty"`
	FullNameGTE          *string  `json:"fullNameGTE,omitempty"`
	FullNameLT           *string  `json:"fullNameLT,omitempty"`
	FullNameLTE          *string  `json:"fullNameLTE,omitempty"`
	FullNameContains     *string  `json:"fullNameContains,omitempty"`
	FullNameHasPrefix    *string  `json:"fullNameHasPrefix,omitempty"`
	FullNameHasSuffix    *string  `json:"fullNameHasSuffix,omitempty"`
	FullNameEqualFold    *string  `json:"fullNameEqualFold,omitempty"`
	FullNameContainsFold *string  `json:"fullNameContainsFold,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleIsNil        bool     `json:"titleIsNil,omitempty"`
	TitleNotNil       bool     `json:"titleNotNil,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "company" field predicates.
	Company             *string  `json:"company,omitempty"`
	CompanyNEQ          *string  `json:"companyNEQ,omitempty"`
	CompanyIn           []string `json:"companyIn,omitempty"`
	CompanyNotIn        []string `json:"companyNotIn,omitempty"`
	CompanyGT           *string  `json:"companyGT,omitempty"`
	CompanyGTE          *string  `json:"companyGTE,omitempty"`
	CompanyLT           *string  `json:"companyLT,omitempty"`
	CompanyLTE          *string  `json:"companyLTE,omitempty"`
	CompanyContains     *string  `json:"companyContains,omitempty"`
	CompanyHasPrefix    *string  `json:"companyHasPrefix,omitempty"`
	CompanyHasSuffix    *string  `json:"companyHasSuffix,omitempty"`
	CompanyIsNil        bool     `json:"companyIsNil,omitempty"`
	CompanyNotNil       bool     `json:"companyNotNil,omitempty"`
	CompanyEqualFold    *string  `json:"companyEqualFold,omitempty"`
	CompanyContainsFold *string  `json:"companyContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "phone_number" field predicates.
	PhoneNumber             *string  `json:"phoneNumber,omitempty"`
	PhoneNumberNEQ          *string  `json:"phoneNumberNEQ,omitempty"`
	PhoneNumberIn           []string `json:"phoneNumberIn,omitempty"`
	PhoneNumberNotIn        []string `json:"phoneNumberNotIn,omitempty"`
	PhoneNumberGT           *string  `json:"phoneNumberGT,omitempty"`
	PhoneNumberGTE          *string  `json:"phoneNumberGTE,omitempty"`
	PhoneNumberLT           *string  `json:"phoneNumberLT,omitempty"`
	PhoneNumberLTE          *string  `json:"phoneNumberLTE,omitempty"`
	PhoneNumberContains     *string  `json:"phoneNumberContains,omitempty"`
	PhoneNumberHasPrefix    *string  `json:"phoneNumberHasPrefix,omitempty"`
	PhoneNumberHasSuffix    *string  `json:"phoneNumberHasSuffix,omitempty"`
	PhoneNumberIsNil        bool     `json:"phoneNumberIsNil,omitempty"`
	PhoneNumberNotNil       bool     `json:"phoneNumberNotNil,omitempty"`
	PhoneNumberEqualFold    *string  `json:"phoneNumberEqualFold,omitempty"`
	PhoneNumberContainsFold *string  `json:"phoneNumberContainsFold,omitempty"`

	// "address" field predicates.
	Address             *string  `json:"address,omitempty"`
	AddressNEQ          *string  `json:"addressNEQ,omitempty"`
	AddressIn           []string `json:"addressIn,omitempty"`
	AddressNotIn        []string `json:"addressNotIn,omitempty"`
	AddressGT           *string  `json:"addressGT,omitempty"`
	AddressGTE          *string  `json:"addressGTE,omitempty"`
	AddressLT           *string  `json:"addressLT,omitempty"`
	AddressLTE          *string  `json:"addressLTE,omitempty"`
	AddressContains     *string  `json:"addressContains,omitempty"`
	AddressHasPrefix    *string  `json:"addressHasPrefix,omitempty"`
	AddressHasSuffix    *string  `json:"addressHasSuffix,omitempty"`
	AddressIsNil        bool     `json:"addressIsNil,omitempty"`
	AddressNotNil       bool     `json:"addressNotNil,omitempty"`
	AddressEqualFold    *string  `json:"addressEqualFold,omitempty"`
	AddressContainsFold *string  `json:"addressContainsFold,omitempty"`

	// "status" field predicates.
	Status      *enums.UserStatus  `json:"status,omitempty"`
	StatusNEQ   *enums.UserStatus  `json:"statusNEQ,omitempty"`
	StatusIn    []enums.UserStatus `json:"statusIn,omitempty"`
	StatusNotIn []enums.UserStatus `json:"statusNotIn,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "entities" edge predicates.
	HasEntities     *bool               `json:"hasEntities,omitempty"`
	HasEntitiesWith []*EntityWhereInput `json:"hasEntitiesWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ContactWhereInput) AddPredicates(predicates ...predicate.Contact) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ContactWhereInput filter on the ContactQuery builder.
func (i *ContactWhereInput) Filter(q *ContactQuery) (*ContactQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyContactWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyContactWhereInput is returned in case the ContactWhereInput is empty.
var ErrEmptyContactWhereInput = errors.New("generated: empty predicate ContactWhereInput")

// P returns a predicate for filtering contacts.
// An error is returned if the input is empty or invalid.
func (i *ContactWhereInput) P() (predicate.Contact, error) {
	var predicates []predicate.Contact
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, contact.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Contact, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, contact.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Contact, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, contact.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, contact.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, contact.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, contact.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, contact.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, contact.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, contact.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, contact.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, contact.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, contact.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, contact.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, contact.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, contact.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, contact.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, contact.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, contact.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, contact.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, contact.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, contact.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, contact.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, contact.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, contact.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, contact.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, contact.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, contact.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, contact.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, contact.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, contact.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, contact.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, contact.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, contact.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, contact.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, contact.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, contact.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, contact.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, contact.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, contact.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, contact.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, contact.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, contact.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, contact.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, contact.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, contact.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, contact.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, contact.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, contact.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, contact.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, contact.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, contact.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, contact.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, contact.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, contact.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, contact.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, contact.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, contact.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, contact.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, contact.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, contact.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, contact.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, contact.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, contact.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, contact.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, contact.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, contact.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, contact.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, contact.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, contact.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, contact.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, contact.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, contact.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, contact.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, contact.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, contact.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, contact.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, contact.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, contact.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, contact.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, contact.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, contact.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, contact.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, contact.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, contact.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, contact.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, contact.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, contact.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, contact.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, contact.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, contact.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, contact.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, contact.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, contact.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, contact.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, contact.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, contact.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, contact.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, contact.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, contact.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, contact.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, contact.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, contact.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, contact.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.FullName != nil {
		predicates = append(predicates, contact.FullNameEQ(*i.FullName))
	}
	if i.FullNameNEQ != nil {
		predicates = append(predicates, contact.FullNameNEQ(*i.FullNameNEQ))
	}
	if len(i.FullNameIn) > 0 {
		predicates = append(predicates, contact.FullNameIn(i.FullNameIn...))
	}
	if len(i.FullNameNotIn) > 0 {
		predicates = append(predicates, contact.FullNameNotIn(i.FullNameNotIn...))
	}
	if i.FullNameGT != nil {
		predicates = append(predicates, contact.FullNameGT(*i.FullNameGT))
	}
	if i.FullNameGTE != nil {
		predicates = append(predicates, contact.FullNameGTE(*i.FullNameGTE))
	}
	if i.FullNameLT != nil {
		predicates = append(predicates, contact.FullNameLT(*i.FullNameLT))
	}
	if i.FullNameLTE != nil {
		predicates = append(predicates, contact.FullNameLTE(*i.FullNameLTE))
	}
	if i.FullNameContains != nil {
		predicates = append(predicates, contact.FullNameContains(*i.FullNameContains))
	}
	if i.FullNameHasPrefix != nil {
		predicates = append(predicates, contact.FullNameHasPrefix(*i.FullNameHasPrefix))
	}
	if i.FullNameHasSuffix != nil {
		predicates = append(predicates, contact.FullNameHasSuffix(*i.FullNameHasSuffix))
	}
	if i.FullNameEqualFold != nil {
		predicates = append(predicates, contact.FullNameEqualFold(*i.FullNameEqualFold))
	}
	if i.FullNameContainsFold != nil {
		predicates = append(predicates, contact.FullNameContainsFold(*i.FullNameContainsFold))
	}
	if i.Title != nil {
		predicates = append(predicates, contact.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, contact.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, contact.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, contact.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, contact.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, contact.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, contact.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, contact.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, contact.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, contact.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, contact.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleIsNil {
		predicates = append(predicates, contact.TitleIsNil())
	}
	if i.TitleNotNil {
		predicates = append(predicates, contact.TitleNotNil())
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, contact.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, contact.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Company != nil {
		predicates = append(predicates, contact.CompanyEQ(*i.Company))
	}
	if i.CompanyNEQ != nil {
		predicates = append(predicates, contact.CompanyNEQ(*i.CompanyNEQ))
	}
	if len(i.CompanyIn) > 0 {
		predicates = append(predicates, contact.CompanyIn(i.CompanyIn...))
	}
	if len(i.CompanyNotIn) > 0 {
		predicates = append(predicates, contact.CompanyNotIn(i.CompanyNotIn...))
	}
	if i.CompanyGT != nil {
		predicates = append(predicates, contact.CompanyGT(*i.CompanyGT))
	}
	if i.CompanyGTE != nil {
		predicates = append(predicates, contact.CompanyGTE(*i.CompanyGTE))
	}
	if i.CompanyLT != nil {
		predicates = append(predicates, contact.CompanyLT(*i.CompanyLT))
	}
	if i.CompanyLTE != nil {
		predicates = append(predicates, contact.CompanyLTE(*i.CompanyLTE))
	}
	if i.CompanyContains != nil {
		predicates = append(predicates, contact.CompanyContains(*i.CompanyContains))
	}
	if i.CompanyHasPrefix != nil {
		predicates = append(predicates, contact.CompanyHasPrefix(*i.CompanyHasPrefix))
	}
	if i.CompanyHasSuffix != nil {
		predicates = append(predicates, contact.CompanyHasSuffix(*i.CompanyHasSuffix))
	}
	if i.CompanyIsNil {
		predicates = append(predicates, contact.CompanyIsNil())
	}
	if i.CompanyNotNil {
		predicates = append(predicates, contact.CompanyNotNil())
	}
	if i.CompanyEqualFold != nil {
		predicates = append(predicates, contact.CompanyEqualFold(*i.CompanyEqualFold))
	}
	if i.CompanyContainsFold != nil {
		predicates = append(predicates, contact.CompanyContainsFold(*i.CompanyContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, contact.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, contact.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, contact.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, contact.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, contact.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, contact.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, contact.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, contact.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, contact.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, contact.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, contact.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, contact.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, contact.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, contact.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, contact.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.PhoneNumber != nil {
		predicates = append(predicates, contact.PhoneNumberEQ(*i.PhoneNumber))
	}
	if i.PhoneNumberNEQ != nil {
		predicates = append(predicates, contact.PhoneNumberNEQ(*i.PhoneNumberNEQ))
	}
	if len(i.PhoneNumberIn) > 0 {
		predicates = append(predicates, contact.PhoneNumberIn(i.PhoneNumberIn...))
	}
	if len(i.PhoneNumberNotIn) > 0 {
		predicates = append(predicates, contact.PhoneNumberNotIn(i.PhoneNumberNotIn...))
	}
	if i.PhoneNumberGT != nil {
		predicates = append(predicates, contact.PhoneNumberGT(*i.PhoneNumberGT))
	}
	if i.PhoneNumberGTE != nil {
		predicates = append(predicates, contact.PhoneNumberGTE(*i.PhoneNumberGTE))
	}
	if i.PhoneNumberLT != nil {
		predicates = append(predicates, contact.PhoneNumberLT(*i.PhoneNumberLT))
	}
	if i.PhoneNumberLTE != nil {
		predicates = append(predicates, contact.PhoneNumberLTE(*i.PhoneNumberLTE))
	}
	if i.PhoneNumberContains != nil {
		predicates = append(predicates, contact.PhoneNumberContains(*i.PhoneNumberContains))
	}
	if i.PhoneNumberHasPrefix != nil {
		predicates = append(predicates, contact.PhoneNumberHasPrefix(*i.PhoneNumberHasPrefix))
	}
	if i.PhoneNumberHasSuffix != nil {
		predicates = append(predicates, contact.PhoneNumberHasSuffix(*i.PhoneNumberHasSuffix))
	}
	if i.PhoneNumberIsNil {
		predicates = append(predicates, contact.PhoneNumberIsNil())
	}
	if i.PhoneNumberNotNil {
		predicates = append(predicates, contact.PhoneNumberNotNil())
	}
	if i.PhoneNumberEqualFold != nil {
		predicates = append(predicates, contact.PhoneNumberEqualFold(*i.PhoneNumberEqualFold))
	}
	if i.PhoneNumberContainsFold != nil {
		predicates = append(predicates, contact.PhoneNumberContainsFold(*i.PhoneNumberContainsFold))
	}
	if i.Address != nil {
		predicates = append(predicates, contact.AddressEQ(*i.Address))
	}
	if i.AddressNEQ != nil {
		predicates = append(predicates, contact.AddressNEQ(*i.AddressNEQ))
	}
	if len(i.AddressIn) > 0 {
		predicates = append(predicates, contact.AddressIn(i.AddressIn...))
	}
	if len(i.AddressNotIn) > 0 {
		predicates = append(predicates, contact.AddressNotIn(i.AddressNotIn...))
	}
	if i.AddressGT != nil {
		predicates = append(predicates, contact.AddressGT(*i.AddressGT))
	}
	if i.AddressGTE != nil {
		predicates = append(predicates, contact.AddressGTE(*i.AddressGTE))
	}
	if i.AddressLT != nil {
		predicates = append(predicates, contact.AddressLT(*i.AddressLT))
	}
	if i.AddressLTE != nil {
		predicates = append(predicates, contact.AddressLTE(*i.AddressLTE))
	}
	if i.AddressContains != nil {
		predicates = append(predicates, contact.AddressContains(*i.AddressContains))
	}
	if i.AddressHasPrefix != nil {
		predicates = append(predicates, contact.AddressHasPrefix(*i.AddressHasPrefix))
	}
	if i.AddressHasSuffix != nil {
		predicates = append(predicates, contact.AddressHasSuffix(*i.AddressHasSuffix))
	}
	if i.AddressIsNil {
		predicates = append(predicates, contact.AddressIsNil())
	}
	if i.AddressNotNil {
		predicates = append(predicates, contact.AddressNotNil())
	}
	if i.AddressEqualFold != nil {
		predicates = append(predicates, contact.AddressEqualFold(*i.AddressEqualFold))
	}
	if i.AddressContainsFold != nil {
		predicates = append(predicates, contact.AddressContainsFold(*i.AddressContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, contact.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, contact.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, contact.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, contact.StatusNotIn(i.StatusNotIn...))
	}

	if i.HasOwner != nil {
		p := contact.HasOwner()
		if !*i.HasOwner {
			p = contact.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, contact.HasOwnerWith(with...))
	}
	if i.HasEntities != nil {
		p := contact.HasEntities()
		if !*i.HasEntities {
			p = contact.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitiesWith) > 0 {
		with := make([]predicate.Entity, 0, len(i.HasEntitiesWith))
		for _, w := range i.HasEntitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitiesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, contact.HasEntitiesWith(with...))
	}
	if i.HasFiles != nil {
		p := contact.HasFiles()
		if !*i.HasFiles {
			p = contact.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, contact.HasFilesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyContactWhereInput
	case 1:
		return predicates[0], nil
	default:
		return contact.And(predicates...), nil
	}
}

// ContactHistoryWhereInput represents a where input for filtering ContactHistory queries.
type ContactHistoryWhereInput struct {
	Predicates []predicate.ContactHistory  `json:"-"`
	Not        *ContactHistoryWhereInput   `json:"not,omitempty"`
	Or         []*ContactHistoryWhereInput `json:"or,omitempty"`
	And        []*ContactHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "full_name" field predicates.
	FullName             *string  `json:"fullName,omitempty"`
	FullNameNEQ          *string  `json:"fullNameNEQ,omitempty"`
	FullNameIn           []string `json:"fullNameIn,omitempty"`
	FullNameNotIn        []string `json:"fullNameNotIn,omitempty"`
	FullNameGT           *string  `json:"fullNameGT,omitempty"`
	FullNameGTE          *string  `json:"fullNameGTE,omitempty"`
	FullNameLT           *string  `json:"fullNameLT,omitempty"`
	FullNameLTE          *string  `json:"fullNameLTE,omitempty"`
	FullNameContains     *string  `json:"fullNameContains,omitempty"`
	FullNameHasPrefix    *string  `json:"fullNameHasPrefix,omitempty"`
	FullNameHasSuffix    *string  `json:"fullNameHasSuffix,omitempty"`
	FullNameEqualFold    *string  `json:"fullNameEqualFold,omitempty"`
	FullNameContainsFold *string  `json:"fullNameContainsFold,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleIsNil        bool     `json:"titleIsNil,omitempty"`
	TitleNotNil       bool     `json:"titleNotNil,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "company" field predicates.
	Company             *string  `json:"company,omitempty"`
	CompanyNEQ          *string  `json:"companyNEQ,omitempty"`
	CompanyIn           []string `json:"companyIn,omitempty"`
	CompanyNotIn        []string `json:"companyNotIn,omitempty"`
	CompanyGT           *string  `json:"companyGT,omitempty"`
	CompanyGTE          *string  `json:"companyGTE,omitempty"`
	CompanyLT           *string  `json:"companyLT,omitempty"`
	CompanyLTE          *string  `json:"companyLTE,omitempty"`
	CompanyContains     *string  `json:"companyContains,omitempty"`
	CompanyHasPrefix    *string  `json:"companyHasPrefix,omitempty"`
	CompanyHasSuffix    *string  `json:"companyHasSuffix,omitempty"`
	CompanyIsNil        bool     `json:"companyIsNil,omitempty"`
	CompanyNotNil       bool     `json:"companyNotNil,omitempty"`
	CompanyEqualFold    *string  `json:"companyEqualFold,omitempty"`
	CompanyContainsFold *string  `json:"companyContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "phone_number" field predicates.
	PhoneNumber             *string  `json:"phoneNumber,omitempty"`
	PhoneNumberNEQ          *string  `json:"phoneNumberNEQ,omitempty"`
	PhoneNumberIn           []string `json:"phoneNumberIn,omitempty"`
	PhoneNumberNotIn        []string `json:"phoneNumberNotIn,omitempty"`
	PhoneNumberGT           *string  `json:"phoneNumberGT,omitempty"`
	PhoneNumberGTE          *string  `json:"phoneNumberGTE,omitempty"`
	PhoneNumberLT           *string  `json:"phoneNumberLT,omitempty"`
	PhoneNumberLTE          *string  `json:"phoneNumberLTE,omitempty"`
	PhoneNumberContains     *string  `json:"phoneNumberContains,omitempty"`
	PhoneNumberHasPrefix    *string  `json:"phoneNumberHasPrefix,omitempty"`
	PhoneNumberHasSuffix    *string  `json:"phoneNumberHasSuffix,omitempty"`
	PhoneNumberIsNil        bool     `json:"phoneNumberIsNil,omitempty"`
	PhoneNumberNotNil       bool     `json:"phoneNumberNotNil,omitempty"`
	PhoneNumberEqualFold    *string  `json:"phoneNumberEqualFold,omitempty"`
	PhoneNumberContainsFold *string  `json:"phoneNumberContainsFold,omitempty"`

	// "address" field predicates.
	Address             *string  `json:"address,omitempty"`
	AddressNEQ          *string  `json:"addressNEQ,omitempty"`
	AddressIn           []string `json:"addressIn,omitempty"`
	AddressNotIn        []string `json:"addressNotIn,omitempty"`
	AddressGT           *string  `json:"addressGT,omitempty"`
	AddressGTE          *string  `json:"addressGTE,omitempty"`
	AddressLT           *string  `json:"addressLT,omitempty"`
	AddressLTE          *string  `json:"addressLTE,omitempty"`
	AddressContains     *string  `json:"addressContains,omitempty"`
	AddressHasPrefix    *string  `json:"addressHasPrefix,omitempty"`
	AddressHasSuffix    *string  `json:"addressHasSuffix,omitempty"`
	AddressIsNil        bool     `json:"addressIsNil,omitempty"`
	AddressNotNil       bool     `json:"addressNotNil,omitempty"`
	AddressEqualFold    *string  `json:"addressEqualFold,omitempty"`
	AddressContainsFold *string  `json:"addressContainsFold,omitempty"`

	// "status" field predicates.
	Status      *enums.UserStatus  `json:"status,omitempty"`
	StatusNEQ   *enums.UserStatus  `json:"statusNEQ,omitempty"`
	StatusIn    []enums.UserStatus `json:"statusIn,omitempty"`
	StatusNotIn []enums.UserStatus `json:"statusNotIn,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ContactHistoryWhereInput) AddPredicates(predicates ...predicate.ContactHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ContactHistoryWhereInput filter on the ContactHistoryQuery builder.
func (i *ContactHistoryWhereInput) Filter(q *ContactHistoryQuery) (*ContactHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyContactHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyContactHistoryWhereInput is returned in case the ContactHistoryWhereInput is empty.
var ErrEmptyContactHistoryWhereInput = errors.New("generated: empty predicate ContactHistoryWhereInput")

// P returns a predicate for filtering contacthistories.
// An error is returned if the input is empty or invalid.
func (i *ContactHistoryWhereInput) P() (predicate.ContactHistory, error) {
	var predicates []predicate.ContactHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, contacthistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ContactHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, contacthistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ContactHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, contacthistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, contacthistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, contacthistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, contacthistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, contacthistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, contacthistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, contacthistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, contacthistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, contacthistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, contacthistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, contacthistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, contacthistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, contacthistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, contacthistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, contacthistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, contacthistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, contacthistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, contacthistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, contacthistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, contacthistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, contacthistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, contacthistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, contacthistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, contacthistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, contacthistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, contacthistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, contacthistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, contacthistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, contacthistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, contacthistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, contacthistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, contacthistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, contacthistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, contacthistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, contacthistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, contacthistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, contacthistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, contacthistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, contacthistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, contacthistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, contacthistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, contacthistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, contacthistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, contacthistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, contacthistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, contacthistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, contacthistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, contacthistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, contacthistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, contacthistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, contacthistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, contacthistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, contacthistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, contacthistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, contacthistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, contacthistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, contacthistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, contacthistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, contacthistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, contacthistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, contacthistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, contacthistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, contacthistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, contacthistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, contacthistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, contacthistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, contacthistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, contacthistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, contacthistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, contacthistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, contacthistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, contacthistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, contacthistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, contacthistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, contacthistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, contacthistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, contacthistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, contacthistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, contacthistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, contacthistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, contacthistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, contacthistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, contacthistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, contacthistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, contacthistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, contacthistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, contacthistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, contacthistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, contacthistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, contacthistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, contacthistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, contacthistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, contacthistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, contacthistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, contacthistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, contacthistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, contacthistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, contacthistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, contacthistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, contacthistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, contacthistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, contacthistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, contacthistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, contacthistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, contacthistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, contacthistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, contacthistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, contacthistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, contacthistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, contacthistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, contacthistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, contacthistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, contacthistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, contacthistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, contacthistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, contacthistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, contacthistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, contacthistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, contacthistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, contacthistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, contacthistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, contacthistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, contacthistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, contacthistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, contacthistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, contacthistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, contacthistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, contacthistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.FullName != nil {
		predicates = append(predicates, contacthistory.FullNameEQ(*i.FullName))
	}
	if i.FullNameNEQ != nil {
		predicates = append(predicates, contacthistory.FullNameNEQ(*i.FullNameNEQ))
	}
	if len(i.FullNameIn) > 0 {
		predicates = append(predicates, contacthistory.FullNameIn(i.FullNameIn...))
	}
	if len(i.FullNameNotIn) > 0 {
		predicates = append(predicates, contacthistory.FullNameNotIn(i.FullNameNotIn...))
	}
	if i.FullNameGT != nil {
		predicates = append(predicates, contacthistory.FullNameGT(*i.FullNameGT))
	}
	if i.FullNameGTE != nil {
		predicates = append(predicates, contacthistory.FullNameGTE(*i.FullNameGTE))
	}
	if i.FullNameLT != nil {
		predicates = append(predicates, contacthistory.FullNameLT(*i.FullNameLT))
	}
	if i.FullNameLTE != nil {
		predicates = append(predicates, contacthistory.FullNameLTE(*i.FullNameLTE))
	}
	if i.FullNameContains != nil {
		predicates = append(predicates, contacthistory.FullNameContains(*i.FullNameContains))
	}
	if i.FullNameHasPrefix != nil {
		predicates = append(predicates, contacthistory.FullNameHasPrefix(*i.FullNameHasPrefix))
	}
	if i.FullNameHasSuffix != nil {
		predicates = append(predicates, contacthistory.FullNameHasSuffix(*i.FullNameHasSuffix))
	}
	if i.FullNameEqualFold != nil {
		predicates = append(predicates, contacthistory.FullNameEqualFold(*i.FullNameEqualFold))
	}
	if i.FullNameContainsFold != nil {
		predicates = append(predicates, contacthistory.FullNameContainsFold(*i.FullNameContainsFold))
	}
	if i.Title != nil {
		predicates = append(predicates, contacthistory.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, contacthistory.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, contacthistory.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, contacthistory.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, contacthistory.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, contacthistory.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, contacthistory.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, contacthistory.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, contacthistory.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, contacthistory.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, contacthistory.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleIsNil {
		predicates = append(predicates, contacthistory.TitleIsNil())
	}
	if i.TitleNotNil {
		predicates = append(predicates, contacthistory.TitleNotNil())
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, contacthistory.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, contacthistory.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Company != nil {
		predicates = append(predicates, contacthistory.CompanyEQ(*i.Company))
	}
	if i.CompanyNEQ != nil {
		predicates = append(predicates, contacthistory.CompanyNEQ(*i.CompanyNEQ))
	}
	if len(i.CompanyIn) > 0 {
		predicates = append(predicates, contacthistory.CompanyIn(i.CompanyIn...))
	}
	if len(i.CompanyNotIn) > 0 {
		predicates = append(predicates, contacthistory.CompanyNotIn(i.CompanyNotIn...))
	}
	if i.CompanyGT != nil {
		predicates = append(predicates, contacthistory.CompanyGT(*i.CompanyGT))
	}
	if i.CompanyGTE != nil {
		predicates = append(predicates, contacthistory.CompanyGTE(*i.CompanyGTE))
	}
	if i.CompanyLT != nil {
		predicates = append(predicates, contacthistory.CompanyLT(*i.CompanyLT))
	}
	if i.CompanyLTE != nil {
		predicates = append(predicates, contacthistory.CompanyLTE(*i.CompanyLTE))
	}
	if i.CompanyContains != nil {
		predicates = append(predicates, contacthistory.CompanyContains(*i.CompanyContains))
	}
	if i.CompanyHasPrefix != nil {
		predicates = append(predicates, contacthistory.CompanyHasPrefix(*i.CompanyHasPrefix))
	}
	if i.CompanyHasSuffix != nil {
		predicates = append(predicates, contacthistory.CompanyHasSuffix(*i.CompanyHasSuffix))
	}
	if i.CompanyIsNil {
		predicates = append(predicates, contacthistory.CompanyIsNil())
	}
	if i.CompanyNotNil {
		predicates = append(predicates, contacthistory.CompanyNotNil())
	}
	if i.CompanyEqualFold != nil {
		predicates = append(predicates, contacthistory.CompanyEqualFold(*i.CompanyEqualFold))
	}
	if i.CompanyContainsFold != nil {
		predicates = append(predicates, contacthistory.CompanyContainsFold(*i.CompanyContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, contacthistory.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, contacthistory.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, contacthistory.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, contacthistory.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, contacthistory.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, contacthistory.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, contacthistory.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, contacthistory.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, contacthistory.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, contacthistory.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, contacthistory.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, contacthistory.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, contacthistory.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, contacthistory.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, contacthistory.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.PhoneNumber != nil {
		predicates = append(predicates, contacthistory.PhoneNumberEQ(*i.PhoneNumber))
	}
	if i.PhoneNumberNEQ != nil {
		predicates = append(predicates, contacthistory.PhoneNumberNEQ(*i.PhoneNumberNEQ))
	}
	if len(i.PhoneNumberIn) > 0 {
		predicates = append(predicates, contacthistory.PhoneNumberIn(i.PhoneNumberIn...))
	}
	if len(i.PhoneNumberNotIn) > 0 {
		predicates = append(predicates, contacthistory.PhoneNumberNotIn(i.PhoneNumberNotIn...))
	}
	if i.PhoneNumberGT != nil {
		predicates = append(predicates, contacthistory.PhoneNumberGT(*i.PhoneNumberGT))
	}
	if i.PhoneNumberGTE != nil {
		predicates = append(predicates, contacthistory.PhoneNumberGTE(*i.PhoneNumberGTE))
	}
	if i.PhoneNumberLT != nil {
		predicates = append(predicates, contacthistory.PhoneNumberLT(*i.PhoneNumberLT))
	}
	if i.PhoneNumberLTE != nil {
		predicates = append(predicates, contacthistory.PhoneNumberLTE(*i.PhoneNumberLTE))
	}
	if i.PhoneNumberContains != nil {
		predicates = append(predicates, contacthistory.PhoneNumberContains(*i.PhoneNumberContains))
	}
	if i.PhoneNumberHasPrefix != nil {
		predicates = append(predicates, contacthistory.PhoneNumberHasPrefix(*i.PhoneNumberHasPrefix))
	}
	if i.PhoneNumberHasSuffix != nil {
		predicates = append(predicates, contacthistory.PhoneNumberHasSuffix(*i.PhoneNumberHasSuffix))
	}
	if i.PhoneNumberIsNil {
		predicates = append(predicates, contacthistory.PhoneNumberIsNil())
	}
	if i.PhoneNumberNotNil {
		predicates = append(predicates, contacthistory.PhoneNumberNotNil())
	}
	if i.PhoneNumberEqualFold != nil {
		predicates = append(predicates, contacthistory.PhoneNumberEqualFold(*i.PhoneNumberEqualFold))
	}
	if i.PhoneNumberContainsFold != nil {
		predicates = append(predicates, contacthistory.PhoneNumberContainsFold(*i.PhoneNumberContainsFold))
	}
	if i.Address != nil {
		predicates = append(predicates, contacthistory.AddressEQ(*i.Address))
	}
	if i.AddressNEQ != nil {
		predicates = append(predicates, contacthistory.AddressNEQ(*i.AddressNEQ))
	}
	if len(i.AddressIn) > 0 {
		predicates = append(predicates, contacthistory.AddressIn(i.AddressIn...))
	}
	if len(i.AddressNotIn) > 0 {
		predicates = append(predicates, contacthistory.AddressNotIn(i.AddressNotIn...))
	}
	if i.AddressGT != nil {
		predicates = append(predicates, contacthistory.AddressGT(*i.AddressGT))
	}
	if i.AddressGTE != nil {
		predicates = append(predicates, contacthistory.AddressGTE(*i.AddressGTE))
	}
	if i.AddressLT != nil {
		predicates = append(predicates, contacthistory.AddressLT(*i.AddressLT))
	}
	if i.AddressLTE != nil {
		predicates = append(predicates, contacthistory.AddressLTE(*i.AddressLTE))
	}
	if i.AddressContains != nil {
		predicates = append(predicates, contacthistory.AddressContains(*i.AddressContains))
	}
	if i.AddressHasPrefix != nil {
		predicates = append(predicates, contacthistory.AddressHasPrefix(*i.AddressHasPrefix))
	}
	if i.AddressHasSuffix != nil {
		predicates = append(predicates, contacthistory.AddressHasSuffix(*i.AddressHasSuffix))
	}
	if i.AddressIsNil {
		predicates = append(predicates, contacthistory.AddressIsNil())
	}
	if i.AddressNotNil {
		predicates = append(predicates, contacthistory.AddressNotNil())
	}
	if i.AddressEqualFold != nil {
		predicates = append(predicates, contacthistory.AddressEqualFold(*i.AddressEqualFold))
	}
	if i.AddressContainsFold != nil {
		predicates = append(predicates, contacthistory.AddressContainsFold(*i.AddressContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, contacthistory.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, contacthistory.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, contacthistory.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, contacthistory.StatusNotIn(i.StatusNotIn...))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyContactHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return contacthistory.And(predicates...), nil
	}
}

// DocumentDataWhereInput represents a where input for filtering DocumentData queries.
type DocumentDataWhereInput struct {
	Predicates []predicate.DocumentData  `json:"-"`
	Not        *DocumentDataWhereInput   `json:"not,omitempty"`
	Or         []*DocumentDataWhereInput `json:"or,omitempty"`
	And        []*DocumentDataWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "template_id" field predicates.
	TemplateID             *string  `json:"templateID,omitempty"`
	TemplateIDNEQ          *string  `json:"templateIDNEQ,omitempty"`
	TemplateIDIn           []string `json:"templateIDIn,omitempty"`
	TemplateIDNotIn        []string `json:"templateIDNotIn,omitempty"`
	TemplateIDGT           *string  `json:"templateIDGT,omitempty"`
	TemplateIDGTE          *string  `json:"templateIDGTE,omitempty"`
	TemplateIDLT           *string  `json:"templateIDLT,omitempty"`
	TemplateIDLTE          *string  `json:"templateIDLTE,omitempty"`
	TemplateIDContains     *string  `json:"templateIDContains,omitempty"`
	TemplateIDHasPrefix    *string  `json:"templateIDHasPrefix,omitempty"`
	TemplateIDHasSuffix    *string  `json:"templateIDHasSuffix,omitempty"`
	TemplateIDEqualFold    *string  `json:"templateIDEqualFold,omitempty"`
	TemplateIDContainsFold *string  `json:"templateIDContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "template" edge predicates.
	HasTemplate     *bool                 `json:"hasTemplate,omitempty"`
	HasTemplateWith []*TemplateWhereInput `json:"hasTemplateWith,omitempty"`

	// "entity" edge predicates.
	HasEntity     *bool               `json:"hasEntity,omitempty"`
	HasEntityWith []*EntityWhereInput `json:"hasEntityWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DocumentDataWhereInput) AddPredicates(predicates ...predicate.DocumentData) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DocumentDataWhereInput filter on the DocumentDataQuery builder.
func (i *DocumentDataWhereInput) Filter(q *DocumentDataQuery) (*DocumentDataQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDocumentDataWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDocumentDataWhereInput is returned in case the DocumentDataWhereInput is empty.
var ErrEmptyDocumentDataWhereInput = errors.New("generated: empty predicate DocumentDataWhereInput")

// P returns a predicate for filtering documentdataslice.
// An error is returned if the input is empty or invalid.
func (i *DocumentDataWhereInput) P() (predicate.DocumentData, error) {
	var predicates []predicate.DocumentData
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, documentdata.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.DocumentData, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, documentdata.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.DocumentData, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, documentdata.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, documentdata.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, documentdata.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, documentdata.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, documentdata.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, documentdata.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, documentdata.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, documentdata.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, documentdata.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, documentdata.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, documentdata.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, documentdata.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, documentdata.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, documentdata.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, documentdata.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, documentdata.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, documentdata.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, documentdata.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, documentdata.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, documentdata.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, documentdata.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, documentdata.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, documentdata.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, documentdata.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, documentdata.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, documentdata.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, documentdata.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, documentdata.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, documentdata.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, documentdata.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, documentdata.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, documentdata.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, documentdata.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, documentdata.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, documentdata.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, documentdata.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, documentdata.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, documentdata.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, documentdata.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, documentdata.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, documentdata.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, documentdata.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, documentdata.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, documentdata.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, documentdata.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, documentdata.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, documentdata.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, documentdata.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, documentdata.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, documentdata.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, documentdata.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, documentdata.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, documentdata.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, documentdata.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, documentdata.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, documentdata.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, documentdata.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, documentdata.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, documentdata.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, documentdata.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, documentdata.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, documentdata.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, documentdata.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, documentdata.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, documentdata.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, documentdata.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, documentdata.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, documentdata.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, documentdata.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, documentdata.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, documentdata.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, documentdata.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, documentdata.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, documentdata.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, documentdata.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, documentdata.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, documentdata.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, documentdata.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, documentdata.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, documentdata.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, documentdata.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, documentdata.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, documentdata.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, documentdata.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, documentdata.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, documentdata.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, documentdata.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, documentdata.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, documentdata.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, documentdata.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, documentdata.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, documentdata.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, documentdata.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, documentdata.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, documentdata.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, documentdata.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, documentdata.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, documentdata.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, documentdata.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, documentdata.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, documentdata.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.TemplateID != nil {
		predicates = append(predicates, documentdata.TemplateIDEQ(*i.TemplateID))
	}
	if i.TemplateIDNEQ != nil {
		predicates = append(predicates, documentdata.TemplateIDNEQ(*i.TemplateIDNEQ))
	}
	if len(i.TemplateIDIn) > 0 {
		predicates = append(predicates, documentdata.TemplateIDIn(i.TemplateIDIn...))
	}
	if len(i.TemplateIDNotIn) > 0 {
		predicates = append(predicates, documentdata.TemplateIDNotIn(i.TemplateIDNotIn...))
	}
	if i.TemplateIDGT != nil {
		predicates = append(predicates, documentdata.TemplateIDGT(*i.TemplateIDGT))
	}
	if i.TemplateIDGTE != nil {
		predicates = append(predicates, documentdata.TemplateIDGTE(*i.TemplateIDGTE))
	}
	if i.TemplateIDLT != nil {
		predicates = append(predicates, documentdata.TemplateIDLT(*i.TemplateIDLT))
	}
	if i.TemplateIDLTE != nil {
		predicates = append(predicates, documentdata.TemplateIDLTE(*i.TemplateIDLTE))
	}
	if i.TemplateIDContains != nil {
		predicates = append(predicates, documentdata.TemplateIDContains(*i.TemplateIDContains))
	}
	if i.TemplateIDHasPrefix != nil {
		predicates = append(predicates, documentdata.TemplateIDHasPrefix(*i.TemplateIDHasPrefix))
	}
	if i.TemplateIDHasSuffix != nil {
		predicates = append(predicates, documentdata.TemplateIDHasSuffix(*i.TemplateIDHasSuffix))
	}
	if i.TemplateIDEqualFold != nil {
		predicates = append(predicates, documentdata.TemplateIDEqualFold(*i.TemplateIDEqualFold))
	}
	if i.TemplateIDContainsFold != nil {
		predicates = append(predicates, documentdata.TemplateIDContainsFold(*i.TemplateIDContainsFold))
	}

	if i.HasOwner != nil {
		p := documentdata.HasOwner()
		if !*i.HasOwner {
			p = documentdata.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, documentdata.HasOwnerWith(with...))
	}
	if i.HasTemplate != nil {
		p := documentdata.HasTemplate()
		if !*i.HasTemplate {
			p = documentdata.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTemplateWith) > 0 {
		with := make([]predicate.Template, 0, len(i.HasTemplateWith))
		for _, w := range i.HasTemplateWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTemplateWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, documentdata.HasTemplateWith(with...))
	}
	if i.HasEntity != nil {
		p := documentdata.HasEntity()
		if !*i.HasEntity {
			p = documentdata.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntityWith) > 0 {
		with := make([]predicate.Entity, 0, len(i.HasEntityWith))
		for _, w := range i.HasEntityWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntityWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, documentdata.HasEntityWith(with...))
	}
	if i.HasFiles != nil {
		p := documentdata.HasFiles()
		if !*i.HasFiles {
			p = documentdata.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, documentdata.HasFilesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDocumentDataWhereInput
	case 1:
		return predicates[0], nil
	default:
		return documentdata.And(predicates...), nil
	}
}

// DocumentDataHistoryWhereInput represents a where input for filtering DocumentDataHistory queries.
type DocumentDataHistoryWhereInput struct {
	Predicates []predicate.DocumentDataHistory  `json:"-"`
	Not        *DocumentDataHistoryWhereInput   `json:"not,omitempty"`
	Or         []*DocumentDataHistoryWhereInput `json:"or,omitempty"`
	And        []*DocumentDataHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "template_id" field predicates.
	TemplateID             *string  `json:"templateID,omitempty"`
	TemplateIDNEQ          *string  `json:"templateIDNEQ,omitempty"`
	TemplateIDIn           []string `json:"templateIDIn,omitempty"`
	TemplateIDNotIn        []string `json:"templateIDNotIn,omitempty"`
	TemplateIDGT           *string  `json:"templateIDGT,omitempty"`
	TemplateIDGTE          *string  `json:"templateIDGTE,omitempty"`
	TemplateIDLT           *string  `json:"templateIDLT,omitempty"`
	TemplateIDLTE          *string  `json:"templateIDLTE,omitempty"`
	TemplateIDContains     *string  `json:"templateIDContains,omitempty"`
	TemplateIDHasPrefix    *string  `json:"templateIDHasPrefix,omitempty"`
	TemplateIDHasSuffix    *string  `json:"templateIDHasSuffix,omitempty"`
	TemplateIDEqualFold    *string  `json:"templateIDEqualFold,omitempty"`
	TemplateIDContainsFold *string  `json:"templateIDContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DocumentDataHistoryWhereInput) AddPredicates(predicates ...predicate.DocumentDataHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DocumentDataHistoryWhereInput filter on the DocumentDataHistoryQuery builder.
func (i *DocumentDataHistoryWhereInput) Filter(q *DocumentDataHistoryQuery) (*DocumentDataHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDocumentDataHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDocumentDataHistoryWhereInput is returned in case the DocumentDataHistoryWhereInput is empty.
var ErrEmptyDocumentDataHistoryWhereInput = errors.New("generated: empty predicate DocumentDataHistoryWhereInput")

// P returns a predicate for filtering documentdatahistories.
// An error is returned if the input is empty or invalid.
func (i *DocumentDataHistoryWhereInput) P() (predicate.DocumentDataHistory, error) {
	var predicates []predicate.DocumentDataHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, documentdatahistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.DocumentDataHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, documentdatahistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.DocumentDataHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, documentdatahistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, documentdatahistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, documentdatahistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, documentdatahistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, documentdatahistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, documentdatahistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, documentdatahistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, documentdatahistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, documentdatahistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, documentdatahistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, documentdatahistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, documentdatahistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, documentdatahistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, documentdatahistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, documentdatahistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, documentdatahistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, documentdatahistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, documentdatahistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, documentdatahistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, documentdatahistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, documentdatahistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, documentdatahistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, documentdatahistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, documentdatahistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, documentdatahistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, documentdatahistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, documentdatahistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, documentdatahistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, documentdatahistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, documentdatahistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, documentdatahistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, documentdatahistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, documentdatahistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, documentdatahistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, documentdatahistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, documentdatahistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, documentdatahistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, documentdatahistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, documentdatahistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, documentdatahistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, documentdatahistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, documentdatahistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, documentdatahistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, documentdatahistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, documentdatahistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, documentdatahistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, documentdatahistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, documentdatahistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, documentdatahistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, documentdatahistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, documentdatahistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, documentdatahistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, documentdatahistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, documentdatahistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, documentdatahistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, documentdatahistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, documentdatahistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, documentdatahistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, documentdatahistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, documentdatahistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, documentdatahistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, documentdatahistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, documentdatahistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, documentdatahistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, documentdatahistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, documentdatahistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, documentdatahistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, documentdatahistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, documentdatahistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, documentdatahistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, documentdatahistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, documentdatahistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, documentdatahistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, documentdatahistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, documentdatahistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, documentdatahistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, documentdatahistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, documentdatahistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, documentdatahistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, documentdatahistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, documentdatahistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, documentdatahistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, documentdatahistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, documentdatahistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, documentdatahistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, documentdatahistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, documentdatahistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, documentdatahistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, documentdatahistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, documentdatahistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, documentdatahistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, documentdatahistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, documentdatahistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, documentdatahistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, documentdatahistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, documentdatahistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, documentdatahistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.TemplateID != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDEQ(*i.TemplateID))
	}
	if i.TemplateIDNEQ != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDNEQ(*i.TemplateIDNEQ))
	}
	if len(i.TemplateIDIn) > 0 {
		predicates = append(predicates, documentdatahistory.TemplateIDIn(i.TemplateIDIn...))
	}
	if len(i.TemplateIDNotIn) > 0 {
		predicates = append(predicates, documentdatahistory.TemplateIDNotIn(i.TemplateIDNotIn...))
	}
	if i.TemplateIDGT != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDGT(*i.TemplateIDGT))
	}
	if i.TemplateIDGTE != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDGTE(*i.TemplateIDGTE))
	}
	if i.TemplateIDLT != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDLT(*i.TemplateIDLT))
	}
	if i.TemplateIDLTE != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDLTE(*i.TemplateIDLTE))
	}
	if i.TemplateIDContains != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDContains(*i.TemplateIDContains))
	}
	if i.TemplateIDHasPrefix != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDHasPrefix(*i.TemplateIDHasPrefix))
	}
	if i.TemplateIDHasSuffix != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDHasSuffix(*i.TemplateIDHasSuffix))
	}
	if i.TemplateIDEqualFold != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDEqualFold(*i.TemplateIDEqualFold))
	}
	if i.TemplateIDContainsFold != nil {
		predicates = append(predicates, documentdatahistory.TemplateIDContainsFold(*i.TemplateIDContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDocumentDataHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return documentdatahistory.And(predicates...), nil
	}
}

// EntitlementWhereInput represents a where input for filtering Entitlement queries.
type EntitlementWhereInput struct {
	Predicates []predicate.Entitlement  `json:"-"`
	Not        *EntitlementWhereInput   `json:"not,omitempty"`
	Or         []*EntitlementWhereInput `json:"or,omitempty"`
	And        []*EntitlementWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "plan_id" field predicates.
	PlanID             *string  `json:"planID,omitempty"`
	PlanIDNEQ          *string  `json:"planIDNEQ,omitempty"`
	PlanIDIn           []string `json:"planIDIn,omitempty"`
	PlanIDNotIn        []string `json:"planIDNotIn,omitempty"`
	PlanIDGT           *string  `json:"planIDGT,omitempty"`
	PlanIDGTE          *string  `json:"planIDGTE,omitempty"`
	PlanIDLT           *string  `json:"planIDLT,omitempty"`
	PlanIDLTE          *string  `json:"planIDLTE,omitempty"`
	PlanIDContains     *string  `json:"planIDContains,omitempty"`
	PlanIDHasPrefix    *string  `json:"planIDHasPrefix,omitempty"`
	PlanIDHasSuffix    *string  `json:"planIDHasSuffix,omitempty"`
	PlanIDEqualFold    *string  `json:"planIDEqualFold,omitempty"`
	PlanIDContainsFold *string  `json:"planIDContainsFold,omitempty"`

	// "organization_id" field predicates.
	OrganizationID             *string  `json:"organizationID,omitempty"`
	OrganizationIDNEQ          *string  `json:"organizationIDNEQ,omitempty"`
	OrganizationIDIn           []string `json:"organizationIDIn,omitempty"`
	OrganizationIDNotIn        []string `json:"organizationIDNotIn,omitempty"`
	OrganizationIDGT           *string  `json:"organizationIDGT,omitempty"`
	OrganizationIDGTE          *string  `json:"organizationIDGTE,omitempty"`
	OrganizationIDLT           *string  `json:"organizationIDLT,omitempty"`
	OrganizationIDLTE          *string  `json:"organizationIDLTE,omitempty"`
	OrganizationIDContains     *string  `json:"organizationIDContains,omitempty"`
	OrganizationIDHasPrefix    *string  `json:"organizationIDHasPrefix,omitempty"`
	OrganizationIDHasSuffix    *string  `json:"organizationIDHasSuffix,omitempty"`
	OrganizationIDEqualFold    *string  `json:"organizationIDEqualFold,omitempty"`
	OrganizationIDContainsFold *string  `json:"organizationIDContainsFold,omitempty"`

	// "external_customer_id" field predicates.
	ExternalCustomerID             *string  `json:"externalCustomerID,omitempty"`
	ExternalCustomerIDNEQ          *string  `json:"externalCustomerIDNEQ,omitempty"`
	ExternalCustomerIDIn           []string `json:"externalCustomerIDIn,omitempty"`
	ExternalCustomerIDNotIn        []string `json:"externalCustomerIDNotIn,omitempty"`
	ExternalCustomerIDGT           *string  `json:"externalCustomerIDGT,omitempty"`
	ExternalCustomerIDGTE          *string  `json:"externalCustomerIDGTE,omitempty"`
	ExternalCustomerIDLT           *string  `json:"externalCustomerIDLT,omitempty"`
	ExternalCustomerIDLTE          *string  `json:"externalCustomerIDLTE,omitempty"`
	ExternalCustomerIDContains     *string  `json:"externalCustomerIDContains,omitempty"`
	ExternalCustomerIDHasPrefix    *string  `json:"externalCustomerIDHasPrefix,omitempty"`
	ExternalCustomerIDHasSuffix    *string  `json:"externalCustomerIDHasSuffix,omitempty"`
	ExternalCustomerIDIsNil        bool     `json:"externalCustomerIDIsNil,omitempty"`
	ExternalCustomerIDNotNil       bool     `json:"externalCustomerIDNotNil,omitempty"`
	ExternalCustomerIDEqualFold    *string  `json:"externalCustomerIDEqualFold,omitempty"`
	ExternalCustomerIDContainsFold *string  `json:"externalCustomerIDContainsFold,omitempty"`

	// "external_subscription_id" field predicates.
	ExternalSubscriptionID             *string  `json:"externalSubscriptionID,omitempty"`
	ExternalSubscriptionIDNEQ          *string  `json:"externalSubscriptionIDNEQ,omitempty"`
	ExternalSubscriptionIDIn           []string `json:"externalSubscriptionIDIn,omitempty"`
	ExternalSubscriptionIDNotIn        []string `json:"externalSubscriptionIDNotIn,omitempty"`
	ExternalSubscriptionIDGT           *string  `json:"externalSubscriptionIDGT,omitempty"`
	ExternalSubscriptionIDGTE          *string  `json:"externalSubscriptionIDGTE,omitempty"`
	ExternalSubscriptionIDLT           *string  `json:"externalSubscriptionIDLT,omitempty"`
	ExternalSubscriptionIDLTE          *string  `json:"externalSubscriptionIDLTE,omitempty"`
	ExternalSubscriptionIDContains     *string  `json:"externalSubscriptionIDContains,omitempty"`
	ExternalSubscriptionIDHasPrefix    *string  `json:"externalSubscriptionIDHasPrefix,omitempty"`
	ExternalSubscriptionIDHasSuffix    *string  `json:"externalSubscriptionIDHasSuffix,omitempty"`
	ExternalSubscriptionIDIsNil        bool     `json:"externalSubscriptionIDIsNil,omitempty"`
	ExternalSubscriptionIDNotNil       bool     `json:"externalSubscriptionIDNotNil,omitempty"`
	ExternalSubscriptionIDEqualFold    *string  `json:"externalSubscriptionIDEqualFold,omitempty"`
	ExternalSubscriptionIDContainsFold *string  `json:"externalSubscriptionIDContainsFold,omitempty"`

	// "expires" field predicates.
	Expires    *bool `json:"expires,omitempty"`
	ExpiresNEQ *bool `json:"expiresNEQ,omitempty"`

	// "expires_at" field predicates.
	ExpiresAt       *time.Time  `json:"expiresAt,omitempty"`
	ExpiresAtNEQ    *time.Time  `json:"expiresAtNEQ,omitempty"`
	ExpiresAtIn     []time.Time `json:"expiresAtIn,omitempty"`
	ExpiresAtNotIn  []time.Time `json:"expiresAtNotIn,omitempty"`
	ExpiresAtGT     *time.Time  `json:"expiresAtGT,omitempty"`
	ExpiresAtGTE    *time.Time  `json:"expiresAtGTE,omitempty"`
	ExpiresAtLT     *time.Time  `json:"expiresAtLT,omitempty"`
	ExpiresAtLTE    *time.Time  `json:"expiresAtLTE,omitempty"`
	ExpiresAtIsNil  bool        `json:"expiresAtIsNil,omitempty"`
	ExpiresAtNotNil bool        `json:"expiresAtNotNil,omitempty"`

	// "cancelled" field predicates.
	Cancelled    *bool `json:"cancelled,omitempty"`
	CancelledNEQ *bool `json:"cancelledNEQ,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "plan" edge predicates.
	HasPlan     *bool                        `json:"hasPlan,omitempty"`
	HasPlanWith []*EntitlementPlanWhereInput `json:"hasPlanWith,omitempty"`

	// "organization" edge predicates.
	HasOrganization     *bool                     `json:"hasOrganization,omitempty"`
	HasOrganizationWith []*OrganizationWhereInput `json:"hasOrganizationWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntitlementWhereInput) AddPredicates(predicates ...predicate.Entitlement) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntitlementWhereInput filter on the EntitlementQuery builder.
func (i *EntitlementWhereInput) Filter(q *EntitlementQuery) (*EntitlementQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntitlementWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntitlementWhereInput is returned in case the EntitlementWhereInput is empty.
var ErrEmptyEntitlementWhereInput = errors.New("generated: empty predicate EntitlementWhereInput")

// P returns a predicate for filtering entitlements.
// An error is returned if the input is empty or invalid.
func (i *EntitlementWhereInput) P() (predicate.Entitlement, error) {
	var predicates []predicate.Entitlement
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entitlement.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Entitlement, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entitlement.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Entitlement, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entitlement.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entitlement.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entitlement.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entitlement.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entitlement.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entitlement.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entitlement.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entitlement.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entitlement.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entitlement.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entitlement.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entitlement.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entitlement.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entitlement.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entitlement.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entitlement.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entitlement.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entitlement.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entitlement.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entitlement.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entitlement.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entitlement.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entitlement.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entitlement.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entitlement.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entitlement.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entitlement.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entitlement.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entitlement.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entitlement.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entitlement.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entitlement.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entitlement.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entitlement.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entitlement.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entitlement.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entitlement.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entitlement.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entitlement.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entitlement.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entitlement.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entitlement.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entitlement.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entitlement.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entitlement.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entitlement.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entitlement.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entitlement.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entitlement.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entitlement.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entitlement.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entitlement.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entitlement.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entitlement.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entitlement.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entitlement.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entitlement.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entitlement.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entitlement.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entitlement.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entitlement.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entitlement.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entitlement.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entitlement.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entitlement.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entitlement.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entitlement.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entitlement.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entitlement.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entitlement.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entitlement.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entitlement.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entitlement.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entitlement.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entitlement.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entitlement.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entitlement.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entitlement.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entitlement.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entitlement.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entitlement.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entitlement.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entitlement.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entitlement.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entitlement.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entitlement.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entitlement.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entitlement.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entitlement.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entitlement.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entitlement.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entitlement.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entitlement.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entitlement.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entitlement.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entitlement.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entitlement.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entitlement.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entitlement.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entitlement.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entitlement.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.PlanID != nil {
		predicates = append(predicates, entitlement.PlanIDEQ(*i.PlanID))
	}
	if i.PlanIDNEQ != nil {
		predicates = append(predicates, entitlement.PlanIDNEQ(*i.PlanIDNEQ))
	}
	if len(i.PlanIDIn) > 0 {
		predicates = append(predicates, entitlement.PlanIDIn(i.PlanIDIn...))
	}
	if len(i.PlanIDNotIn) > 0 {
		predicates = append(predicates, entitlement.PlanIDNotIn(i.PlanIDNotIn...))
	}
	if i.PlanIDGT != nil {
		predicates = append(predicates, entitlement.PlanIDGT(*i.PlanIDGT))
	}
	if i.PlanIDGTE != nil {
		predicates = append(predicates, entitlement.PlanIDGTE(*i.PlanIDGTE))
	}
	if i.PlanIDLT != nil {
		predicates = append(predicates, entitlement.PlanIDLT(*i.PlanIDLT))
	}
	if i.PlanIDLTE != nil {
		predicates = append(predicates, entitlement.PlanIDLTE(*i.PlanIDLTE))
	}
	if i.PlanIDContains != nil {
		predicates = append(predicates, entitlement.PlanIDContains(*i.PlanIDContains))
	}
	if i.PlanIDHasPrefix != nil {
		predicates = append(predicates, entitlement.PlanIDHasPrefix(*i.PlanIDHasPrefix))
	}
	if i.PlanIDHasSuffix != nil {
		predicates = append(predicates, entitlement.PlanIDHasSuffix(*i.PlanIDHasSuffix))
	}
	if i.PlanIDEqualFold != nil {
		predicates = append(predicates, entitlement.PlanIDEqualFold(*i.PlanIDEqualFold))
	}
	if i.PlanIDContainsFold != nil {
		predicates = append(predicates, entitlement.PlanIDContainsFold(*i.PlanIDContainsFold))
	}
	if i.OrganizationID != nil {
		predicates = append(predicates, entitlement.OrganizationIDEQ(*i.OrganizationID))
	}
	if i.OrganizationIDNEQ != nil {
		predicates = append(predicates, entitlement.OrganizationIDNEQ(*i.OrganizationIDNEQ))
	}
	if len(i.OrganizationIDIn) > 0 {
		predicates = append(predicates, entitlement.OrganizationIDIn(i.OrganizationIDIn...))
	}
	if len(i.OrganizationIDNotIn) > 0 {
		predicates = append(predicates, entitlement.OrganizationIDNotIn(i.OrganizationIDNotIn...))
	}
	if i.OrganizationIDGT != nil {
		predicates = append(predicates, entitlement.OrganizationIDGT(*i.OrganizationIDGT))
	}
	if i.OrganizationIDGTE != nil {
		predicates = append(predicates, entitlement.OrganizationIDGTE(*i.OrganizationIDGTE))
	}
	if i.OrganizationIDLT != nil {
		predicates = append(predicates, entitlement.OrganizationIDLT(*i.OrganizationIDLT))
	}
	if i.OrganizationIDLTE != nil {
		predicates = append(predicates, entitlement.OrganizationIDLTE(*i.OrganizationIDLTE))
	}
	if i.OrganizationIDContains != nil {
		predicates = append(predicates, entitlement.OrganizationIDContains(*i.OrganizationIDContains))
	}
	if i.OrganizationIDHasPrefix != nil {
		predicates = append(predicates, entitlement.OrganizationIDHasPrefix(*i.OrganizationIDHasPrefix))
	}
	if i.OrganizationIDHasSuffix != nil {
		predicates = append(predicates, entitlement.OrganizationIDHasSuffix(*i.OrganizationIDHasSuffix))
	}
	if i.OrganizationIDEqualFold != nil {
		predicates = append(predicates, entitlement.OrganizationIDEqualFold(*i.OrganizationIDEqualFold))
	}
	if i.OrganizationIDContainsFold != nil {
		predicates = append(predicates, entitlement.OrganizationIDContainsFold(*i.OrganizationIDContainsFold))
	}
	if i.ExternalCustomerID != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDEQ(*i.ExternalCustomerID))
	}
	if i.ExternalCustomerIDNEQ != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDNEQ(*i.ExternalCustomerIDNEQ))
	}
	if len(i.ExternalCustomerIDIn) > 0 {
		predicates = append(predicates, entitlement.ExternalCustomerIDIn(i.ExternalCustomerIDIn...))
	}
	if len(i.ExternalCustomerIDNotIn) > 0 {
		predicates = append(predicates, entitlement.ExternalCustomerIDNotIn(i.ExternalCustomerIDNotIn...))
	}
	if i.ExternalCustomerIDGT != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDGT(*i.ExternalCustomerIDGT))
	}
	if i.ExternalCustomerIDGTE != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDGTE(*i.ExternalCustomerIDGTE))
	}
	if i.ExternalCustomerIDLT != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDLT(*i.ExternalCustomerIDLT))
	}
	if i.ExternalCustomerIDLTE != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDLTE(*i.ExternalCustomerIDLTE))
	}
	if i.ExternalCustomerIDContains != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDContains(*i.ExternalCustomerIDContains))
	}
	if i.ExternalCustomerIDHasPrefix != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDHasPrefix(*i.ExternalCustomerIDHasPrefix))
	}
	if i.ExternalCustomerIDHasSuffix != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDHasSuffix(*i.ExternalCustomerIDHasSuffix))
	}
	if i.ExternalCustomerIDIsNil {
		predicates = append(predicates, entitlement.ExternalCustomerIDIsNil())
	}
	if i.ExternalCustomerIDNotNil {
		predicates = append(predicates, entitlement.ExternalCustomerIDNotNil())
	}
	if i.ExternalCustomerIDEqualFold != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDEqualFold(*i.ExternalCustomerIDEqualFold))
	}
	if i.ExternalCustomerIDContainsFold != nil {
		predicates = append(predicates, entitlement.ExternalCustomerIDContainsFold(*i.ExternalCustomerIDContainsFold))
	}
	if i.ExternalSubscriptionID != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDEQ(*i.ExternalSubscriptionID))
	}
	if i.ExternalSubscriptionIDNEQ != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDNEQ(*i.ExternalSubscriptionIDNEQ))
	}
	if len(i.ExternalSubscriptionIDIn) > 0 {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDIn(i.ExternalSubscriptionIDIn...))
	}
	if len(i.ExternalSubscriptionIDNotIn) > 0 {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDNotIn(i.ExternalSubscriptionIDNotIn...))
	}
	if i.ExternalSubscriptionIDGT != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDGT(*i.ExternalSubscriptionIDGT))
	}
	if i.ExternalSubscriptionIDGTE != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDGTE(*i.ExternalSubscriptionIDGTE))
	}
	if i.ExternalSubscriptionIDLT != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDLT(*i.ExternalSubscriptionIDLT))
	}
	if i.ExternalSubscriptionIDLTE != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDLTE(*i.ExternalSubscriptionIDLTE))
	}
	if i.ExternalSubscriptionIDContains != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDContains(*i.ExternalSubscriptionIDContains))
	}
	if i.ExternalSubscriptionIDHasPrefix != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDHasPrefix(*i.ExternalSubscriptionIDHasPrefix))
	}
	if i.ExternalSubscriptionIDHasSuffix != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDHasSuffix(*i.ExternalSubscriptionIDHasSuffix))
	}
	if i.ExternalSubscriptionIDIsNil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDIsNil())
	}
	if i.ExternalSubscriptionIDNotNil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDNotNil())
	}
	if i.ExternalSubscriptionIDEqualFold != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDEqualFold(*i.ExternalSubscriptionIDEqualFold))
	}
	if i.ExternalSubscriptionIDContainsFold != nil {
		predicates = append(predicates, entitlement.ExternalSubscriptionIDContainsFold(*i.ExternalSubscriptionIDContainsFold))
	}
	if i.Expires != nil {
		predicates = append(predicates, entitlement.ExpiresEQ(*i.Expires))
	}
	if i.ExpiresNEQ != nil {
		predicates = append(predicates, entitlement.ExpiresNEQ(*i.ExpiresNEQ))
	}
	if i.ExpiresAt != nil {
		predicates = append(predicates, entitlement.ExpiresAtEQ(*i.ExpiresAt))
	}
	if i.ExpiresAtNEQ != nil {
		predicates = append(predicates, entitlement.ExpiresAtNEQ(*i.ExpiresAtNEQ))
	}
	if len(i.ExpiresAtIn) > 0 {
		predicates = append(predicates, entitlement.ExpiresAtIn(i.ExpiresAtIn...))
	}
	if len(i.ExpiresAtNotIn) > 0 {
		predicates = append(predicates, entitlement.ExpiresAtNotIn(i.ExpiresAtNotIn...))
	}
	if i.ExpiresAtGT != nil {
		predicates = append(predicates, entitlement.ExpiresAtGT(*i.ExpiresAtGT))
	}
	if i.ExpiresAtGTE != nil {
		predicates = append(predicates, entitlement.ExpiresAtGTE(*i.ExpiresAtGTE))
	}
	if i.ExpiresAtLT != nil {
		predicates = append(predicates, entitlement.ExpiresAtLT(*i.ExpiresAtLT))
	}
	if i.ExpiresAtLTE != nil {
		predicates = append(predicates, entitlement.ExpiresAtLTE(*i.ExpiresAtLTE))
	}
	if i.ExpiresAtIsNil {
		predicates = append(predicates, entitlement.ExpiresAtIsNil())
	}
	if i.ExpiresAtNotNil {
		predicates = append(predicates, entitlement.ExpiresAtNotNil())
	}
	if i.Cancelled != nil {
		predicates = append(predicates, entitlement.CancelledEQ(*i.Cancelled))
	}
	if i.CancelledNEQ != nil {
		predicates = append(predicates, entitlement.CancelledNEQ(*i.CancelledNEQ))
	}

	if i.HasOwner != nil {
		p := entitlement.HasOwner()
		if !*i.HasOwner {
			p = entitlement.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlement.HasOwnerWith(with...))
	}
	if i.HasPlan != nil {
		p := entitlement.HasPlan()
		if !*i.HasPlan {
			p = entitlement.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPlanWith) > 0 {
		with := make([]predicate.EntitlementPlan, 0, len(i.HasPlanWith))
		for _, w := range i.HasPlanWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPlanWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlement.HasPlanWith(with...))
	}
	if i.HasOrganization != nil {
		p := entitlement.HasOrganization()
		if !*i.HasOrganization {
			p = entitlement.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOrganizationWith))
		for _, w := range i.HasOrganizationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlement.HasOrganizationWith(with...))
	}
	if i.HasEvents != nil {
		p := entitlement.HasEvents()
		if !*i.HasEvents {
			p = entitlement.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlement.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntitlementWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entitlement.And(predicates...), nil
	}
}

// EntitlementHistoryWhereInput represents a where input for filtering EntitlementHistory queries.
type EntitlementHistoryWhereInput struct {
	Predicates []predicate.EntitlementHistory  `json:"-"`
	Not        *EntitlementHistoryWhereInput   `json:"not,omitempty"`
	Or         []*EntitlementHistoryWhereInput `json:"or,omitempty"`
	And        []*EntitlementHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "plan_id" field predicates.
	PlanID             *string  `json:"planID,omitempty"`
	PlanIDNEQ          *string  `json:"planIDNEQ,omitempty"`
	PlanIDIn           []string `json:"planIDIn,omitempty"`
	PlanIDNotIn        []string `json:"planIDNotIn,omitempty"`
	PlanIDGT           *string  `json:"planIDGT,omitempty"`
	PlanIDGTE          *string  `json:"planIDGTE,omitempty"`
	PlanIDLT           *string  `json:"planIDLT,omitempty"`
	PlanIDLTE          *string  `json:"planIDLTE,omitempty"`
	PlanIDContains     *string  `json:"planIDContains,omitempty"`
	PlanIDHasPrefix    *string  `json:"planIDHasPrefix,omitempty"`
	PlanIDHasSuffix    *string  `json:"planIDHasSuffix,omitempty"`
	PlanIDEqualFold    *string  `json:"planIDEqualFold,omitempty"`
	PlanIDContainsFold *string  `json:"planIDContainsFold,omitempty"`

	// "organization_id" field predicates.
	OrganizationID             *string  `json:"organizationID,omitempty"`
	OrganizationIDNEQ          *string  `json:"organizationIDNEQ,omitempty"`
	OrganizationIDIn           []string `json:"organizationIDIn,omitempty"`
	OrganizationIDNotIn        []string `json:"organizationIDNotIn,omitempty"`
	OrganizationIDGT           *string  `json:"organizationIDGT,omitempty"`
	OrganizationIDGTE          *string  `json:"organizationIDGTE,omitempty"`
	OrganizationIDLT           *string  `json:"organizationIDLT,omitempty"`
	OrganizationIDLTE          *string  `json:"organizationIDLTE,omitempty"`
	OrganizationIDContains     *string  `json:"organizationIDContains,omitempty"`
	OrganizationIDHasPrefix    *string  `json:"organizationIDHasPrefix,omitempty"`
	OrganizationIDHasSuffix    *string  `json:"organizationIDHasSuffix,omitempty"`
	OrganizationIDEqualFold    *string  `json:"organizationIDEqualFold,omitempty"`
	OrganizationIDContainsFold *string  `json:"organizationIDContainsFold,omitempty"`

	// "external_customer_id" field predicates.
	ExternalCustomerID             *string  `json:"externalCustomerID,omitempty"`
	ExternalCustomerIDNEQ          *string  `json:"externalCustomerIDNEQ,omitempty"`
	ExternalCustomerIDIn           []string `json:"externalCustomerIDIn,omitempty"`
	ExternalCustomerIDNotIn        []string `json:"externalCustomerIDNotIn,omitempty"`
	ExternalCustomerIDGT           *string  `json:"externalCustomerIDGT,omitempty"`
	ExternalCustomerIDGTE          *string  `json:"externalCustomerIDGTE,omitempty"`
	ExternalCustomerIDLT           *string  `json:"externalCustomerIDLT,omitempty"`
	ExternalCustomerIDLTE          *string  `json:"externalCustomerIDLTE,omitempty"`
	ExternalCustomerIDContains     *string  `json:"externalCustomerIDContains,omitempty"`
	ExternalCustomerIDHasPrefix    *string  `json:"externalCustomerIDHasPrefix,omitempty"`
	ExternalCustomerIDHasSuffix    *string  `json:"externalCustomerIDHasSuffix,omitempty"`
	ExternalCustomerIDIsNil        bool     `json:"externalCustomerIDIsNil,omitempty"`
	ExternalCustomerIDNotNil       bool     `json:"externalCustomerIDNotNil,omitempty"`
	ExternalCustomerIDEqualFold    *string  `json:"externalCustomerIDEqualFold,omitempty"`
	ExternalCustomerIDContainsFold *string  `json:"externalCustomerIDContainsFold,omitempty"`

	// "external_subscription_id" field predicates.
	ExternalSubscriptionID             *string  `json:"externalSubscriptionID,omitempty"`
	ExternalSubscriptionIDNEQ          *string  `json:"externalSubscriptionIDNEQ,omitempty"`
	ExternalSubscriptionIDIn           []string `json:"externalSubscriptionIDIn,omitempty"`
	ExternalSubscriptionIDNotIn        []string `json:"externalSubscriptionIDNotIn,omitempty"`
	ExternalSubscriptionIDGT           *string  `json:"externalSubscriptionIDGT,omitempty"`
	ExternalSubscriptionIDGTE          *string  `json:"externalSubscriptionIDGTE,omitempty"`
	ExternalSubscriptionIDLT           *string  `json:"externalSubscriptionIDLT,omitempty"`
	ExternalSubscriptionIDLTE          *string  `json:"externalSubscriptionIDLTE,omitempty"`
	ExternalSubscriptionIDContains     *string  `json:"externalSubscriptionIDContains,omitempty"`
	ExternalSubscriptionIDHasPrefix    *string  `json:"externalSubscriptionIDHasPrefix,omitempty"`
	ExternalSubscriptionIDHasSuffix    *string  `json:"externalSubscriptionIDHasSuffix,omitempty"`
	ExternalSubscriptionIDIsNil        bool     `json:"externalSubscriptionIDIsNil,omitempty"`
	ExternalSubscriptionIDNotNil       bool     `json:"externalSubscriptionIDNotNil,omitempty"`
	ExternalSubscriptionIDEqualFold    *string  `json:"externalSubscriptionIDEqualFold,omitempty"`
	ExternalSubscriptionIDContainsFold *string  `json:"externalSubscriptionIDContainsFold,omitempty"`

	// "expires" field predicates.
	Expires    *bool `json:"expires,omitempty"`
	ExpiresNEQ *bool `json:"expiresNEQ,omitempty"`

	// "expires_at" field predicates.
	ExpiresAt       *time.Time  `json:"expiresAt,omitempty"`
	ExpiresAtNEQ    *time.Time  `json:"expiresAtNEQ,omitempty"`
	ExpiresAtIn     []time.Time `json:"expiresAtIn,omitempty"`
	ExpiresAtNotIn  []time.Time `json:"expiresAtNotIn,omitempty"`
	ExpiresAtGT     *time.Time  `json:"expiresAtGT,omitempty"`
	ExpiresAtGTE    *time.Time  `json:"expiresAtGTE,omitempty"`
	ExpiresAtLT     *time.Time  `json:"expiresAtLT,omitempty"`
	ExpiresAtLTE    *time.Time  `json:"expiresAtLTE,omitempty"`
	ExpiresAtIsNil  bool        `json:"expiresAtIsNil,omitempty"`
	ExpiresAtNotNil bool        `json:"expiresAtNotNil,omitempty"`

	// "cancelled" field predicates.
	Cancelled    *bool `json:"cancelled,omitempty"`
	CancelledNEQ *bool `json:"cancelledNEQ,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntitlementHistoryWhereInput) AddPredicates(predicates ...predicate.EntitlementHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntitlementHistoryWhereInput filter on the EntitlementHistoryQuery builder.
func (i *EntitlementHistoryWhereInput) Filter(q *EntitlementHistoryQuery) (*EntitlementHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntitlementHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntitlementHistoryWhereInput is returned in case the EntitlementHistoryWhereInput is empty.
var ErrEmptyEntitlementHistoryWhereInput = errors.New("generated: empty predicate EntitlementHistoryWhereInput")

// P returns a predicate for filtering entitlementhistories.
// An error is returned if the input is empty or invalid.
func (i *EntitlementHistoryWhereInput) P() (predicate.EntitlementHistory, error) {
	var predicates []predicate.EntitlementHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entitlementhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntitlementHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entitlementhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntitlementHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entitlementhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entitlementhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entitlementhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entitlementhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entitlementhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entitlementhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entitlementhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entitlementhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entitlementhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entitlementhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, entitlementhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, entitlementhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, entitlementhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, entitlementhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, entitlementhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, entitlementhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, entitlementhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, entitlementhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, entitlementhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, entitlementhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, entitlementhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, entitlementhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, entitlementhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, entitlementhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, entitlementhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, entitlementhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, entitlementhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, entitlementhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, entitlementhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, entitlementhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, entitlementhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, entitlementhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entitlementhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entitlementhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entitlementhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entitlementhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entitlementhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entitlementhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entitlementhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entitlementhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entitlementhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entitlementhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entitlementhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entitlementhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entitlementhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entitlementhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entitlementhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entitlementhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entitlementhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entitlementhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entitlementhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entitlementhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entitlementhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entitlementhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entitlementhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entitlementhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entitlementhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entitlementhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entitlementhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entitlementhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entitlementhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entitlementhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entitlementhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entitlementhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entitlementhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entitlementhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entitlementhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entitlementhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entitlementhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entitlementhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entitlementhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entitlementhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entitlementhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entitlementhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entitlementhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entitlementhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entitlementhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entitlementhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entitlementhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entitlementhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entitlementhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entitlementhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entitlementhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entitlementhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entitlementhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entitlementhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entitlementhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entitlementhistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entitlementhistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entitlementhistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entitlementhistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.PlanID != nil {
		predicates = append(predicates, entitlementhistory.PlanIDEQ(*i.PlanID))
	}
	if i.PlanIDNEQ != nil {
		predicates = append(predicates, entitlementhistory.PlanIDNEQ(*i.PlanIDNEQ))
	}
	if len(i.PlanIDIn) > 0 {
		predicates = append(predicates, entitlementhistory.PlanIDIn(i.PlanIDIn...))
	}
	if len(i.PlanIDNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.PlanIDNotIn(i.PlanIDNotIn...))
	}
	if i.PlanIDGT != nil {
		predicates = append(predicates, entitlementhistory.PlanIDGT(*i.PlanIDGT))
	}
	if i.PlanIDGTE != nil {
		predicates = append(predicates, entitlementhistory.PlanIDGTE(*i.PlanIDGTE))
	}
	if i.PlanIDLT != nil {
		predicates = append(predicates, entitlementhistory.PlanIDLT(*i.PlanIDLT))
	}
	if i.PlanIDLTE != nil {
		predicates = append(predicates, entitlementhistory.PlanIDLTE(*i.PlanIDLTE))
	}
	if i.PlanIDContains != nil {
		predicates = append(predicates, entitlementhistory.PlanIDContains(*i.PlanIDContains))
	}
	if i.PlanIDHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.PlanIDHasPrefix(*i.PlanIDHasPrefix))
	}
	if i.PlanIDHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.PlanIDHasSuffix(*i.PlanIDHasSuffix))
	}
	if i.PlanIDEqualFold != nil {
		predicates = append(predicates, entitlementhistory.PlanIDEqualFold(*i.PlanIDEqualFold))
	}
	if i.PlanIDContainsFold != nil {
		predicates = append(predicates, entitlementhistory.PlanIDContainsFold(*i.PlanIDContainsFold))
	}
	if i.OrganizationID != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDEQ(*i.OrganizationID))
	}
	if i.OrganizationIDNEQ != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDNEQ(*i.OrganizationIDNEQ))
	}
	if len(i.OrganizationIDIn) > 0 {
		predicates = append(predicates, entitlementhistory.OrganizationIDIn(i.OrganizationIDIn...))
	}
	if len(i.OrganizationIDNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.OrganizationIDNotIn(i.OrganizationIDNotIn...))
	}
	if i.OrganizationIDGT != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDGT(*i.OrganizationIDGT))
	}
	if i.OrganizationIDGTE != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDGTE(*i.OrganizationIDGTE))
	}
	if i.OrganizationIDLT != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDLT(*i.OrganizationIDLT))
	}
	if i.OrganizationIDLTE != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDLTE(*i.OrganizationIDLTE))
	}
	if i.OrganizationIDContains != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDContains(*i.OrganizationIDContains))
	}
	if i.OrganizationIDHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDHasPrefix(*i.OrganizationIDHasPrefix))
	}
	if i.OrganizationIDHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDHasSuffix(*i.OrganizationIDHasSuffix))
	}
	if i.OrganizationIDEqualFold != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDEqualFold(*i.OrganizationIDEqualFold))
	}
	if i.OrganizationIDContainsFold != nil {
		predicates = append(predicates, entitlementhistory.OrganizationIDContainsFold(*i.OrganizationIDContainsFold))
	}
	if i.ExternalCustomerID != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDEQ(*i.ExternalCustomerID))
	}
	if i.ExternalCustomerIDNEQ != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDNEQ(*i.ExternalCustomerIDNEQ))
	}
	if len(i.ExternalCustomerIDIn) > 0 {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDIn(i.ExternalCustomerIDIn...))
	}
	if len(i.ExternalCustomerIDNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDNotIn(i.ExternalCustomerIDNotIn...))
	}
	if i.ExternalCustomerIDGT != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDGT(*i.ExternalCustomerIDGT))
	}
	if i.ExternalCustomerIDGTE != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDGTE(*i.ExternalCustomerIDGTE))
	}
	if i.ExternalCustomerIDLT != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDLT(*i.ExternalCustomerIDLT))
	}
	if i.ExternalCustomerIDLTE != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDLTE(*i.ExternalCustomerIDLTE))
	}
	if i.ExternalCustomerIDContains != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDContains(*i.ExternalCustomerIDContains))
	}
	if i.ExternalCustomerIDHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDHasPrefix(*i.ExternalCustomerIDHasPrefix))
	}
	if i.ExternalCustomerIDHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDHasSuffix(*i.ExternalCustomerIDHasSuffix))
	}
	if i.ExternalCustomerIDIsNil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDIsNil())
	}
	if i.ExternalCustomerIDNotNil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDNotNil())
	}
	if i.ExternalCustomerIDEqualFold != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDEqualFold(*i.ExternalCustomerIDEqualFold))
	}
	if i.ExternalCustomerIDContainsFold != nil {
		predicates = append(predicates, entitlementhistory.ExternalCustomerIDContainsFold(*i.ExternalCustomerIDContainsFold))
	}
	if i.ExternalSubscriptionID != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDEQ(*i.ExternalSubscriptionID))
	}
	if i.ExternalSubscriptionIDNEQ != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDNEQ(*i.ExternalSubscriptionIDNEQ))
	}
	if len(i.ExternalSubscriptionIDIn) > 0 {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDIn(i.ExternalSubscriptionIDIn...))
	}
	if len(i.ExternalSubscriptionIDNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDNotIn(i.ExternalSubscriptionIDNotIn...))
	}
	if i.ExternalSubscriptionIDGT != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDGT(*i.ExternalSubscriptionIDGT))
	}
	if i.ExternalSubscriptionIDGTE != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDGTE(*i.ExternalSubscriptionIDGTE))
	}
	if i.ExternalSubscriptionIDLT != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDLT(*i.ExternalSubscriptionIDLT))
	}
	if i.ExternalSubscriptionIDLTE != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDLTE(*i.ExternalSubscriptionIDLTE))
	}
	if i.ExternalSubscriptionIDContains != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDContains(*i.ExternalSubscriptionIDContains))
	}
	if i.ExternalSubscriptionIDHasPrefix != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDHasPrefix(*i.ExternalSubscriptionIDHasPrefix))
	}
	if i.ExternalSubscriptionIDHasSuffix != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDHasSuffix(*i.ExternalSubscriptionIDHasSuffix))
	}
	if i.ExternalSubscriptionIDIsNil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDIsNil())
	}
	if i.ExternalSubscriptionIDNotNil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDNotNil())
	}
	if i.ExternalSubscriptionIDEqualFold != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDEqualFold(*i.ExternalSubscriptionIDEqualFold))
	}
	if i.ExternalSubscriptionIDContainsFold != nil {
		predicates = append(predicates, entitlementhistory.ExternalSubscriptionIDContainsFold(*i.ExternalSubscriptionIDContainsFold))
	}
	if i.Expires != nil {
		predicates = append(predicates, entitlementhistory.ExpiresEQ(*i.Expires))
	}
	if i.ExpiresNEQ != nil {
		predicates = append(predicates, entitlementhistory.ExpiresNEQ(*i.ExpiresNEQ))
	}
	if i.ExpiresAt != nil {
		predicates = append(predicates, entitlementhistory.ExpiresAtEQ(*i.ExpiresAt))
	}
	if i.ExpiresAtNEQ != nil {
		predicates = append(predicates, entitlementhistory.ExpiresAtNEQ(*i.ExpiresAtNEQ))
	}
	if len(i.ExpiresAtIn) > 0 {
		predicates = append(predicates, entitlementhistory.ExpiresAtIn(i.ExpiresAtIn...))
	}
	if len(i.ExpiresAtNotIn) > 0 {
		predicates = append(predicates, entitlementhistory.ExpiresAtNotIn(i.ExpiresAtNotIn...))
	}
	if i.ExpiresAtGT != nil {
		predicates = append(predicates, entitlementhistory.ExpiresAtGT(*i.ExpiresAtGT))
	}
	if i.ExpiresAtGTE != nil {
		predicates = append(predicates, entitlementhistory.ExpiresAtGTE(*i.ExpiresAtGTE))
	}
	if i.ExpiresAtLT != nil {
		predicates = append(predicates, entitlementhistory.ExpiresAtLT(*i.ExpiresAtLT))
	}
	if i.ExpiresAtLTE != nil {
		predicates = append(predicates, entitlementhistory.ExpiresAtLTE(*i.ExpiresAtLTE))
	}
	if i.ExpiresAtIsNil {
		predicates = append(predicates, entitlementhistory.ExpiresAtIsNil())
	}
	if i.ExpiresAtNotNil {
		predicates = append(predicates, entitlementhistory.ExpiresAtNotNil())
	}
	if i.Cancelled != nil {
		predicates = append(predicates, entitlementhistory.CancelledEQ(*i.Cancelled))
	}
	if i.CancelledNEQ != nil {
		predicates = append(predicates, entitlementhistory.CancelledNEQ(*i.CancelledNEQ))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntitlementHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entitlementhistory.And(predicates...), nil
	}
}

// EntitlementPlanWhereInput represents a where input for filtering EntitlementPlan queries.
type EntitlementPlanWhereInput struct {
	Predicates []predicate.EntitlementPlan  `json:"-"`
	Not        *EntitlementPlanWhereInput   `json:"not,omitempty"`
	Or         []*EntitlementPlanWhereInput `json:"or,omitempty"`
	And        []*EntitlementPlanWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameIsNil        bool     `json:"displayNameIsNil,omitempty"`
	DisplayNameNotNil       bool     `json:"displayNameNotNil,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "version" field predicates.
	Version             *string  `json:"version,omitempty"`
	VersionNEQ          *string  `json:"versionNEQ,omitempty"`
	VersionIn           []string `json:"versionIn,omitempty"`
	VersionNotIn        []string `json:"versionNotIn,omitempty"`
	VersionGT           *string  `json:"versionGT,omitempty"`
	VersionGTE          *string  `json:"versionGTE,omitempty"`
	VersionLT           *string  `json:"versionLT,omitempty"`
	VersionLTE          *string  `json:"versionLTE,omitempty"`
	VersionContains     *string  `json:"versionContains,omitempty"`
	VersionHasPrefix    *string  `json:"versionHasPrefix,omitempty"`
	VersionHasSuffix    *string  `json:"versionHasSuffix,omitempty"`
	VersionEqualFold    *string  `json:"versionEqualFold,omitempty"`
	VersionContainsFold *string  `json:"versionContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "entitlements" edge predicates.
	HasEntitlements     *bool                    `json:"hasEntitlements,omitempty"`
	HasEntitlementsWith []*EntitlementWhereInput `json:"hasEntitlementsWith,omitempty"`

	// "base_features" edge predicates.
	HasBaseFeatures     *bool                `json:"hasBaseFeatures,omitempty"`
	HasBaseFeaturesWith []*FeatureWhereInput `json:"hasBaseFeaturesWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`

	// "features" edge predicates.
	HasFeatures     *bool                               `json:"hasFeatures,omitempty"`
	HasFeaturesWith []*EntitlementPlanFeatureWhereInput `json:"hasFeaturesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntitlementPlanWhereInput) AddPredicates(predicates ...predicate.EntitlementPlan) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntitlementPlanWhereInput filter on the EntitlementPlanQuery builder.
func (i *EntitlementPlanWhereInput) Filter(q *EntitlementPlanQuery) (*EntitlementPlanQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntitlementPlanWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntitlementPlanWhereInput is returned in case the EntitlementPlanWhereInput is empty.
var ErrEmptyEntitlementPlanWhereInput = errors.New("generated: empty predicate EntitlementPlanWhereInput")

// P returns a predicate for filtering entitlementplans.
// An error is returned if the input is empty or invalid.
func (i *EntitlementPlanWhereInput) P() (predicate.EntitlementPlan, error) {
	var predicates []predicate.EntitlementPlan
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entitlementplan.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntitlementPlan, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entitlementplan.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntitlementPlan, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entitlementplan.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entitlementplan.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entitlementplan.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entitlementplan.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entitlementplan.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entitlementplan.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entitlementplan.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entitlementplan.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entitlementplan.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entitlementplan.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entitlementplan.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entitlementplan.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entitlementplan.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entitlementplan.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplan.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entitlementplan.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entitlementplan.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entitlementplan.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entitlementplan.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entitlementplan.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entitlementplan.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entitlementplan.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entitlementplan.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entitlementplan.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplan.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entitlementplan.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entitlementplan.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entitlementplan.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entitlementplan.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entitlementplan.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entitlementplan.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entitlementplan.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entitlementplan.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entitlementplan.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entitlementplan.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entitlementplan.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entitlementplan.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entitlementplan.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entitlementplan.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entitlementplan.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entitlementplan.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entitlementplan.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entitlementplan.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entitlementplan.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entitlementplan.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entitlementplan.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entitlementplan.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entitlementplan.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entitlementplan.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entitlementplan.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entitlementplan.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entitlementplan.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entitlementplan.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entitlementplan.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entitlementplan.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entitlementplan.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entitlementplan.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entitlementplan.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entitlementplan.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entitlementplan.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entitlementplan.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entitlementplan.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entitlementplan.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entitlementplan.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplan.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entitlementplan.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entitlementplan.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entitlementplan.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entitlementplan.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entitlementplan.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entitlementplan.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entitlementplan.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entitlementplan.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entitlementplan.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entitlementplan.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entitlementplan.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entitlementplan.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entitlementplan.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entitlementplan.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entitlementplan.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entitlementplan.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entitlementplan.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entitlementplan.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entitlementplan.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entitlementplan.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entitlementplan.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entitlementplan.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entitlementplan.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entitlementplan.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entitlementplan.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entitlementplan.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entitlementplan.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entitlementplan.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entitlementplan.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entitlementplan.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entitlementplan.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entitlementplan.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entitlementplan.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entitlementplan.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entitlementplan.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entitlementplan.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, entitlementplan.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, entitlementplan.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, entitlementplan.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, entitlementplan.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, entitlementplan.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, entitlementplan.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, entitlementplan.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, entitlementplan.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, entitlementplan.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, entitlementplan.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, entitlementplan.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameIsNil {
		predicates = append(predicates, entitlementplan.DisplayNameIsNil())
	}
	if i.DisplayNameNotNil {
		predicates = append(predicates, entitlementplan.DisplayNameNotNil())
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, entitlementplan.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, entitlementplan.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, entitlementplan.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, entitlementplan.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, entitlementplan.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, entitlementplan.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, entitlementplan.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, entitlementplan.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, entitlementplan.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, entitlementplan.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, entitlementplan.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, entitlementplan.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, entitlementplan.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, entitlementplan.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, entitlementplan.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, entitlementplan.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, entitlementplan.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, entitlementplan.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, entitlementplan.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, entitlementplan.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, entitlementplan.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, entitlementplan.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, entitlementplan.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, entitlementplan.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, entitlementplan.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, entitlementplan.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, entitlementplan.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, entitlementplan.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, entitlementplan.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, entitlementplan.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Version != nil {
		predicates = append(predicates, entitlementplan.VersionEQ(*i.Version))
	}
	if i.VersionNEQ != nil {
		predicates = append(predicates, entitlementplan.VersionNEQ(*i.VersionNEQ))
	}
	if len(i.VersionIn) > 0 {
		predicates = append(predicates, entitlementplan.VersionIn(i.VersionIn...))
	}
	if len(i.VersionNotIn) > 0 {
		predicates = append(predicates, entitlementplan.VersionNotIn(i.VersionNotIn...))
	}
	if i.VersionGT != nil {
		predicates = append(predicates, entitlementplan.VersionGT(*i.VersionGT))
	}
	if i.VersionGTE != nil {
		predicates = append(predicates, entitlementplan.VersionGTE(*i.VersionGTE))
	}
	if i.VersionLT != nil {
		predicates = append(predicates, entitlementplan.VersionLT(*i.VersionLT))
	}
	if i.VersionLTE != nil {
		predicates = append(predicates, entitlementplan.VersionLTE(*i.VersionLTE))
	}
	if i.VersionContains != nil {
		predicates = append(predicates, entitlementplan.VersionContains(*i.VersionContains))
	}
	if i.VersionHasPrefix != nil {
		predicates = append(predicates, entitlementplan.VersionHasPrefix(*i.VersionHasPrefix))
	}
	if i.VersionHasSuffix != nil {
		predicates = append(predicates, entitlementplan.VersionHasSuffix(*i.VersionHasSuffix))
	}
	if i.VersionEqualFold != nil {
		predicates = append(predicates, entitlementplan.VersionEqualFold(*i.VersionEqualFold))
	}
	if i.VersionContainsFold != nil {
		predicates = append(predicates, entitlementplan.VersionContainsFold(*i.VersionContainsFold))
	}

	if i.HasOwner != nil {
		p := entitlementplan.HasOwner()
		if !*i.HasOwner {
			p = entitlementplan.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplan.HasOwnerWith(with...))
	}
	if i.HasEntitlements != nil {
		p := entitlementplan.HasEntitlements()
		if !*i.HasEntitlements {
			p = entitlementplan.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitlementsWith) > 0 {
		with := make([]predicate.Entitlement, 0, len(i.HasEntitlementsWith))
		for _, w := range i.HasEntitlementsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitlementsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplan.HasEntitlementsWith(with...))
	}
	if i.HasBaseFeatures != nil {
		p := entitlementplan.HasBaseFeatures()
		if !*i.HasBaseFeatures {
			p = entitlementplan.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBaseFeaturesWith) > 0 {
		with := make([]predicate.Feature, 0, len(i.HasBaseFeaturesWith))
		for _, w := range i.HasBaseFeaturesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBaseFeaturesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplan.HasBaseFeaturesWith(with...))
	}
	if i.HasEvents != nil {
		p := entitlementplan.HasEvents()
		if !*i.HasEvents {
			p = entitlementplan.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplan.HasEventsWith(with...))
	}
	if i.HasFeatures != nil {
		p := entitlementplan.HasFeatures()
		if !*i.HasFeatures {
			p = entitlementplan.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFeaturesWith) > 0 {
		with := make([]predicate.EntitlementPlanFeature, 0, len(i.HasFeaturesWith))
		for _, w := range i.HasFeaturesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFeaturesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplan.HasFeaturesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntitlementPlanWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entitlementplan.And(predicates...), nil
	}
}

// EntitlementPlanFeatureWhereInput represents a where input for filtering EntitlementPlanFeature queries.
type EntitlementPlanFeatureWhereInput struct {
	Predicates []predicate.EntitlementPlanFeature  `json:"-"`
	Not        *EntitlementPlanFeatureWhereInput   `json:"not,omitempty"`
	Or         []*EntitlementPlanFeatureWhereInput `json:"or,omitempty"`
	And        []*EntitlementPlanFeatureWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "plan_id" field predicates.
	PlanID             *string  `json:"planID,omitempty"`
	PlanIDNEQ          *string  `json:"planIDNEQ,omitempty"`
	PlanIDIn           []string `json:"planIDIn,omitempty"`
	PlanIDNotIn        []string `json:"planIDNotIn,omitempty"`
	PlanIDGT           *string  `json:"planIDGT,omitempty"`
	PlanIDGTE          *string  `json:"planIDGTE,omitempty"`
	PlanIDLT           *string  `json:"planIDLT,omitempty"`
	PlanIDLTE          *string  `json:"planIDLTE,omitempty"`
	PlanIDContains     *string  `json:"planIDContains,omitempty"`
	PlanIDHasPrefix    *string  `json:"planIDHasPrefix,omitempty"`
	PlanIDHasSuffix    *string  `json:"planIDHasSuffix,omitempty"`
	PlanIDEqualFold    *string  `json:"planIDEqualFold,omitempty"`
	PlanIDContainsFold *string  `json:"planIDContainsFold,omitempty"`

	// "feature_id" field predicates.
	FeatureID             *string  `json:"featureID,omitempty"`
	FeatureIDNEQ          *string  `json:"featureIDNEQ,omitempty"`
	FeatureIDIn           []string `json:"featureIDIn,omitempty"`
	FeatureIDNotIn        []string `json:"featureIDNotIn,omitempty"`
	FeatureIDGT           *string  `json:"featureIDGT,omitempty"`
	FeatureIDGTE          *string  `json:"featureIDGTE,omitempty"`
	FeatureIDLT           *string  `json:"featureIDLT,omitempty"`
	FeatureIDLTE          *string  `json:"featureIDLTE,omitempty"`
	FeatureIDContains     *string  `json:"featureIDContains,omitempty"`
	FeatureIDHasPrefix    *string  `json:"featureIDHasPrefix,omitempty"`
	FeatureIDHasSuffix    *string  `json:"featureIDHasSuffix,omitempty"`
	FeatureIDEqualFold    *string  `json:"featureIDEqualFold,omitempty"`
	FeatureIDContainsFold *string  `json:"featureIDContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "plan" edge predicates.
	HasPlan     *bool                        `json:"hasPlan,omitempty"`
	HasPlanWith []*EntitlementPlanWhereInput `json:"hasPlanWith,omitempty"`

	// "feature" edge predicates.
	HasFeature     *bool                `json:"hasFeature,omitempty"`
	HasFeatureWith []*FeatureWhereInput `json:"hasFeatureWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntitlementPlanFeatureWhereInput) AddPredicates(predicates ...predicate.EntitlementPlanFeature) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntitlementPlanFeatureWhereInput filter on the EntitlementPlanFeatureQuery builder.
func (i *EntitlementPlanFeatureWhereInput) Filter(q *EntitlementPlanFeatureQuery) (*EntitlementPlanFeatureQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntitlementPlanFeatureWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntitlementPlanFeatureWhereInput is returned in case the EntitlementPlanFeatureWhereInput is empty.
var ErrEmptyEntitlementPlanFeatureWhereInput = errors.New("generated: empty predicate EntitlementPlanFeatureWhereInput")

// P returns a predicate for filtering entitlementplanfeatures.
// An error is returned if the input is empty or invalid.
func (i *EntitlementPlanFeatureWhereInput) P() (predicate.EntitlementPlanFeature, error) {
	var predicates []predicate.EntitlementPlanFeature
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entitlementplanfeature.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntitlementPlanFeature, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entitlementplanfeature.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntitlementPlanFeature, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entitlementplanfeature.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entitlementplanfeature.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entitlementplanfeature.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entitlementplanfeature.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entitlementplanfeature.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entitlementplanfeature.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entitlementplanfeature.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entitlementplanfeature.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entitlementplanfeature.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entitlementplanfeature.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entitlementplanfeature.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entitlementplanfeature.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entitlementplanfeature.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entitlementplanfeature.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entitlementplanfeature.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entitlementplanfeature.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entitlementplanfeature.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entitlementplanfeature.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entitlementplanfeature.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entitlementplanfeature.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entitlementplanfeature.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.PlanID != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDEQ(*i.PlanID))
	}
	if i.PlanIDNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDNEQ(*i.PlanIDNEQ))
	}
	if len(i.PlanIDIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.PlanIDIn(i.PlanIDIn...))
	}
	if len(i.PlanIDNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.PlanIDNotIn(i.PlanIDNotIn...))
	}
	if i.PlanIDGT != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDGT(*i.PlanIDGT))
	}
	if i.PlanIDGTE != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDGTE(*i.PlanIDGTE))
	}
	if i.PlanIDLT != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDLT(*i.PlanIDLT))
	}
	if i.PlanIDLTE != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDLTE(*i.PlanIDLTE))
	}
	if i.PlanIDContains != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDContains(*i.PlanIDContains))
	}
	if i.PlanIDHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDHasPrefix(*i.PlanIDHasPrefix))
	}
	if i.PlanIDHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDHasSuffix(*i.PlanIDHasSuffix))
	}
	if i.PlanIDEqualFold != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDEqualFold(*i.PlanIDEqualFold))
	}
	if i.PlanIDContainsFold != nil {
		predicates = append(predicates, entitlementplanfeature.PlanIDContainsFold(*i.PlanIDContainsFold))
	}
	if i.FeatureID != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDEQ(*i.FeatureID))
	}
	if i.FeatureIDNEQ != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDNEQ(*i.FeatureIDNEQ))
	}
	if len(i.FeatureIDIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.FeatureIDIn(i.FeatureIDIn...))
	}
	if len(i.FeatureIDNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeature.FeatureIDNotIn(i.FeatureIDNotIn...))
	}
	if i.FeatureIDGT != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDGT(*i.FeatureIDGT))
	}
	if i.FeatureIDGTE != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDGTE(*i.FeatureIDGTE))
	}
	if i.FeatureIDLT != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDLT(*i.FeatureIDLT))
	}
	if i.FeatureIDLTE != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDLTE(*i.FeatureIDLTE))
	}
	if i.FeatureIDContains != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDContains(*i.FeatureIDContains))
	}
	if i.FeatureIDHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDHasPrefix(*i.FeatureIDHasPrefix))
	}
	if i.FeatureIDHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDHasSuffix(*i.FeatureIDHasSuffix))
	}
	if i.FeatureIDEqualFold != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDEqualFold(*i.FeatureIDEqualFold))
	}
	if i.FeatureIDContainsFold != nil {
		predicates = append(predicates, entitlementplanfeature.FeatureIDContainsFold(*i.FeatureIDContainsFold))
	}

	if i.HasOwner != nil {
		p := entitlementplanfeature.HasOwner()
		if !*i.HasOwner {
			p = entitlementplanfeature.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplanfeature.HasOwnerWith(with...))
	}
	if i.HasPlan != nil {
		p := entitlementplanfeature.HasPlan()
		if !*i.HasPlan {
			p = entitlementplanfeature.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPlanWith) > 0 {
		with := make([]predicate.EntitlementPlan, 0, len(i.HasPlanWith))
		for _, w := range i.HasPlanWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPlanWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplanfeature.HasPlanWith(with...))
	}
	if i.HasFeature != nil {
		p := entitlementplanfeature.HasFeature()
		if !*i.HasFeature {
			p = entitlementplanfeature.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFeatureWith) > 0 {
		with := make([]predicate.Feature, 0, len(i.HasFeatureWith))
		for _, w := range i.HasFeatureWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFeatureWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplanfeature.HasFeatureWith(with...))
	}
	if i.HasEvents != nil {
		p := entitlementplanfeature.HasEvents()
		if !*i.HasEvents {
			p = entitlementplanfeature.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitlementplanfeature.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntitlementPlanFeatureWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entitlementplanfeature.And(predicates...), nil
	}
}

// EntitlementPlanFeatureHistoryWhereInput represents a where input for filtering EntitlementPlanFeatureHistory queries.
type EntitlementPlanFeatureHistoryWhereInput struct {
	Predicates []predicate.EntitlementPlanFeatureHistory  `json:"-"`
	Not        *EntitlementPlanFeatureHistoryWhereInput   `json:"not,omitempty"`
	Or         []*EntitlementPlanFeatureHistoryWhereInput `json:"or,omitempty"`
	And        []*EntitlementPlanFeatureHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "plan_id" field predicates.
	PlanID             *string  `json:"planID,omitempty"`
	PlanIDNEQ          *string  `json:"planIDNEQ,omitempty"`
	PlanIDIn           []string `json:"planIDIn,omitempty"`
	PlanIDNotIn        []string `json:"planIDNotIn,omitempty"`
	PlanIDGT           *string  `json:"planIDGT,omitempty"`
	PlanIDGTE          *string  `json:"planIDGTE,omitempty"`
	PlanIDLT           *string  `json:"planIDLT,omitempty"`
	PlanIDLTE          *string  `json:"planIDLTE,omitempty"`
	PlanIDContains     *string  `json:"planIDContains,omitempty"`
	PlanIDHasPrefix    *string  `json:"planIDHasPrefix,omitempty"`
	PlanIDHasSuffix    *string  `json:"planIDHasSuffix,omitempty"`
	PlanIDEqualFold    *string  `json:"planIDEqualFold,omitempty"`
	PlanIDContainsFold *string  `json:"planIDContainsFold,omitempty"`

	// "feature_id" field predicates.
	FeatureID             *string  `json:"featureID,omitempty"`
	FeatureIDNEQ          *string  `json:"featureIDNEQ,omitempty"`
	FeatureIDIn           []string `json:"featureIDIn,omitempty"`
	FeatureIDNotIn        []string `json:"featureIDNotIn,omitempty"`
	FeatureIDGT           *string  `json:"featureIDGT,omitempty"`
	FeatureIDGTE          *string  `json:"featureIDGTE,omitempty"`
	FeatureIDLT           *string  `json:"featureIDLT,omitempty"`
	FeatureIDLTE          *string  `json:"featureIDLTE,omitempty"`
	FeatureIDContains     *string  `json:"featureIDContains,omitempty"`
	FeatureIDHasPrefix    *string  `json:"featureIDHasPrefix,omitempty"`
	FeatureIDHasSuffix    *string  `json:"featureIDHasSuffix,omitempty"`
	FeatureIDEqualFold    *string  `json:"featureIDEqualFold,omitempty"`
	FeatureIDContainsFold *string  `json:"featureIDContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntitlementPlanFeatureHistoryWhereInput) AddPredicates(predicates ...predicate.EntitlementPlanFeatureHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntitlementPlanFeatureHistoryWhereInput filter on the EntitlementPlanFeatureHistoryQuery builder.
func (i *EntitlementPlanFeatureHistoryWhereInput) Filter(q *EntitlementPlanFeatureHistoryQuery) (*EntitlementPlanFeatureHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntitlementPlanFeatureHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntitlementPlanFeatureHistoryWhereInput is returned in case the EntitlementPlanFeatureHistoryWhereInput is empty.
var ErrEmptyEntitlementPlanFeatureHistoryWhereInput = errors.New("generated: empty predicate EntitlementPlanFeatureHistoryWhereInput")

// P returns a predicate for filtering entitlementplanfeaturehistories.
// An error is returned if the input is empty or invalid.
func (i *EntitlementPlanFeatureHistoryWhereInput) P() (predicate.EntitlementPlanFeatureHistory, error) {
	var predicates []predicate.EntitlementPlanFeatureHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entitlementplanfeaturehistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntitlementPlanFeatureHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entitlementplanfeaturehistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntitlementPlanFeatureHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entitlementplanfeaturehistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.PlanID != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDEQ(*i.PlanID))
	}
	if i.PlanIDNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDNEQ(*i.PlanIDNEQ))
	}
	if len(i.PlanIDIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDIn(i.PlanIDIn...))
	}
	if len(i.PlanIDNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDNotIn(i.PlanIDNotIn...))
	}
	if i.PlanIDGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDGT(*i.PlanIDGT))
	}
	if i.PlanIDGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDGTE(*i.PlanIDGTE))
	}
	if i.PlanIDLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDLT(*i.PlanIDLT))
	}
	if i.PlanIDLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDLTE(*i.PlanIDLTE))
	}
	if i.PlanIDContains != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDContains(*i.PlanIDContains))
	}
	if i.PlanIDHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDHasPrefix(*i.PlanIDHasPrefix))
	}
	if i.PlanIDHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDHasSuffix(*i.PlanIDHasSuffix))
	}
	if i.PlanIDEqualFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDEqualFold(*i.PlanIDEqualFold))
	}
	if i.PlanIDContainsFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.PlanIDContainsFold(*i.PlanIDContainsFold))
	}
	if i.FeatureID != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDEQ(*i.FeatureID))
	}
	if i.FeatureIDNEQ != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDNEQ(*i.FeatureIDNEQ))
	}
	if len(i.FeatureIDIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDIn(i.FeatureIDIn...))
	}
	if len(i.FeatureIDNotIn) > 0 {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDNotIn(i.FeatureIDNotIn...))
	}
	if i.FeatureIDGT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDGT(*i.FeatureIDGT))
	}
	if i.FeatureIDGTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDGTE(*i.FeatureIDGTE))
	}
	if i.FeatureIDLT != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDLT(*i.FeatureIDLT))
	}
	if i.FeatureIDLTE != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDLTE(*i.FeatureIDLTE))
	}
	if i.FeatureIDContains != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDContains(*i.FeatureIDContains))
	}
	if i.FeatureIDHasPrefix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDHasPrefix(*i.FeatureIDHasPrefix))
	}
	if i.FeatureIDHasSuffix != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDHasSuffix(*i.FeatureIDHasSuffix))
	}
	if i.FeatureIDEqualFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDEqualFold(*i.FeatureIDEqualFold))
	}
	if i.FeatureIDContainsFold != nil {
		predicates = append(predicates, entitlementplanfeaturehistory.FeatureIDContainsFold(*i.FeatureIDContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntitlementPlanFeatureHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entitlementplanfeaturehistory.And(predicates...), nil
	}
}

// EntitlementPlanHistoryWhereInput represents a where input for filtering EntitlementPlanHistory queries.
type EntitlementPlanHistoryWhereInput struct {
	Predicates []predicate.EntitlementPlanHistory  `json:"-"`
	Not        *EntitlementPlanHistoryWhereInput   `json:"not,omitempty"`
	Or         []*EntitlementPlanHistoryWhereInput `json:"or,omitempty"`
	And        []*EntitlementPlanHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameIsNil        bool     `json:"displayNameIsNil,omitempty"`
	DisplayNameNotNil       bool     `json:"displayNameNotNil,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "version" field predicates.
	Version             *string  `json:"version,omitempty"`
	VersionNEQ          *string  `json:"versionNEQ,omitempty"`
	VersionIn           []string `json:"versionIn,omitempty"`
	VersionNotIn        []string `json:"versionNotIn,omitempty"`
	VersionGT           *string  `json:"versionGT,omitempty"`
	VersionGTE          *string  `json:"versionGTE,omitempty"`
	VersionLT           *string  `json:"versionLT,omitempty"`
	VersionLTE          *string  `json:"versionLTE,omitempty"`
	VersionContains     *string  `json:"versionContains,omitempty"`
	VersionHasPrefix    *string  `json:"versionHasPrefix,omitempty"`
	VersionHasSuffix    *string  `json:"versionHasSuffix,omitempty"`
	VersionEqualFold    *string  `json:"versionEqualFold,omitempty"`
	VersionContainsFold *string  `json:"versionContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntitlementPlanHistoryWhereInput) AddPredicates(predicates ...predicate.EntitlementPlanHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntitlementPlanHistoryWhereInput filter on the EntitlementPlanHistoryQuery builder.
func (i *EntitlementPlanHistoryWhereInput) Filter(q *EntitlementPlanHistoryQuery) (*EntitlementPlanHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntitlementPlanHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntitlementPlanHistoryWhereInput is returned in case the EntitlementPlanHistoryWhereInput is empty.
var ErrEmptyEntitlementPlanHistoryWhereInput = errors.New("generated: empty predicate EntitlementPlanHistoryWhereInput")

// P returns a predicate for filtering entitlementplanhistories.
// An error is returned if the input is empty or invalid.
func (i *EntitlementPlanHistoryWhereInput) P() (predicate.EntitlementPlanHistory, error) {
	var predicates []predicate.EntitlementPlanHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entitlementplanhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntitlementPlanHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entitlementplanhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntitlementPlanHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entitlementplanhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entitlementplanhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entitlementplanhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entitlementplanhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entitlementplanhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entitlementplanhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, entitlementplanhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, entitlementplanhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, entitlementplanhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, entitlementplanhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, entitlementplanhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, entitlementplanhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, entitlementplanhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, entitlementplanhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, entitlementplanhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, entitlementplanhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, entitlementplanhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, entitlementplanhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, entitlementplanhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, entitlementplanhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entitlementplanhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entitlementplanhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entitlementplanhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entitlementplanhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entitlementplanhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entitlementplanhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entitlementplanhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entitlementplanhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entitlementplanhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameIsNil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameIsNil())
	}
	if i.DisplayNameNotNil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameNotNil())
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, entitlementplanhistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, entitlementplanhistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, entitlementplanhistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, entitlementplanhistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, entitlementplanhistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, entitlementplanhistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, entitlementplanhistory.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, entitlementplanhistory.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Version != nil {
		predicates = append(predicates, entitlementplanhistory.VersionEQ(*i.Version))
	}
	if i.VersionNEQ != nil {
		predicates = append(predicates, entitlementplanhistory.VersionNEQ(*i.VersionNEQ))
	}
	if len(i.VersionIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.VersionIn(i.VersionIn...))
	}
	if len(i.VersionNotIn) > 0 {
		predicates = append(predicates, entitlementplanhistory.VersionNotIn(i.VersionNotIn...))
	}
	if i.VersionGT != nil {
		predicates = append(predicates, entitlementplanhistory.VersionGT(*i.VersionGT))
	}
	if i.VersionGTE != nil {
		predicates = append(predicates, entitlementplanhistory.VersionGTE(*i.VersionGTE))
	}
	if i.VersionLT != nil {
		predicates = append(predicates, entitlementplanhistory.VersionLT(*i.VersionLT))
	}
	if i.VersionLTE != nil {
		predicates = append(predicates, entitlementplanhistory.VersionLTE(*i.VersionLTE))
	}
	if i.VersionContains != nil {
		predicates = append(predicates, entitlementplanhistory.VersionContains(*i.VersionContains))
	}
	if i.VersionHasPrefix != nil {
		predicates = append(predicates, entitlementplanhistory.VersionHasPrefix(*i.VersionHasPrefix))
	}
	if i.VersionHasSuffix != nil {
		predicates = append(predicates, entitlementplanhistory.VersionHasSuffix(*i.VersionHasSuffix))
	}
	if i.VersionEqualFold != nil {
		predicates = append(predicates, entitlementplanhistory.VersionEqualFold(*i.VersionEqualFold))
	}
	if i.VersionContainsFold != nil {
		predicates = append(predicates, entitlementplanhistory.VersionContainsFold(*i.VersionContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntitlementPlanHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entitlementplanhistory.And(predicates...), nil
	}
}

// EntityWhereInput represents a where input for filtering Entity queries.
type EntityWhereInput struct {
	Predicates []predicate.Entity  `json:"-"`
	Not        *EntityWhereInput   `json:"not,omitempty"`
	Or         []*EntityWhereInput `json:"or,omitempty"`
	And        []*EntityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameIsNil        bool     `json:"displayNameIsNil,omitempty"`
	DisplayNameNotNil       bool     `json:"displayNameNotNil,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "entity_type_id" field predicates.
	EntityTypeID             *string  `json:"entityTypeID,omitempty"`
	EntityTypeIDNEQ          *string  `json:"entityTypeIDNEQ,omitempty"`
	EntityTypeIDIn           []string `json:"entityTypeIDIn,omitempty"`
	EntityTypeIDNotIn        []string `json:"entityTypeIDNotIn,omitempty"`
	EntityTypeIDGT           *string  `json:"entityTypeIDGT,omitempty"`
	EntityTypeIDGTE          *string  `json:"entityTypeIDGTE,omitempty"`
	EntityTypeIDLT           *string  `json:"entityTypeIDLT,omitempty"`
	EntityTypeIDLTE          *string  `json:"entityTypeIDLTE,omitempty"`
	EntityTypeIDContains     *string  `json:"entityTypeIDContains,omitempty"`
	EntityTypeIDHasPrefix    *string  `json:"entityTypeIDHasPrefix,omitempty"`
	EntityTypeIDHasSuffix    *string  `json:"entityTypeIDHasSuffix,omitempty"`
	EntityTypeIDIsNil        bool     `json:"entityTypeIDIsNil,omitempty"`
	EntityTypeIDNotNil       bool     `json:"entityTypeIDNotNil,omitempty"`
	EntityTypeIDEqualFold    *string  `json:"entityTypeIDEqualFold,omitempty"`
	EntityTypeIDContainsFold *string  `json:"entityTypeIDContainsFold,omitempty"`

	// "status" field predicates.
	Status             *string  `json:"status,omitempty"`
	StatusNEQ          *string  `json:"statusNEQ,omitempty"`
	StatusIn           []string `json:"statusIn,omitempty"`
	StatusNotIn        []string `json:"statusNotIn,omitempty"`
	StatusGT           *string  `json:"statusGT,omitempty"`
	StatusGTE          *string  `json:"statusGTE,omitempty"`
	StatusLT           *string  `json:"statusLT,omitempty"`
	StatusLTE          *string  `json:"statusLTE,omitempty"`
	StatusContains     *string  `json:"statusContains,omitempty"`
	StatusHasPrefix    *string  `json:"statusHasPrefix,omitempty"`
	StatusHasSuffix    *string  `json:"statusHasSuffix,omitempty"`
	StatusIsNil        bool     `json:"statusIsNil,omitempty"`
	StatusNotNil       bool     `json:"statusNotNil,omitempty"`
	StatusEqualFold    *string  `json:"statusEqualFold,omitempty"`
	StatusContainsFold *string  `json:"statusContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "contacts" edge predicates.
	HasContacts     *bool                `json:"hasContacts,omitempty"`
	HasContactsWith []*ContactWhereInput `json:"hasContactsWith,omitempty"`

	// "documents" edge predicates.
	HasDocuments     *bool                     `json:"hasDocuments,omitempty"`
	HasDocumentsWith []*DocumentDataWhereInput `json:"hasDocumentsWith,omitempty"`

	// "notes" edge predicates.
	HasNotes     *bool             `json:"hasNotes,omitempty"`
	HasNotesWith []*NoteWhereInput `json:"hasNotesWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`

	// "entity_type" edge predicates.
	HasEntityType     *bool                   `json:"hasEntityType,omitempty"`
	HasEntityTypeWith []*EntityTypeWhereInput `json:"hasEntityTypeWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntityWhereInput) AddPredicates(predicates ...predicate.Entity) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntityWhereInput filter on the EntityQuery builder.
func (i *EntityWhereInput) Filter(q *EntityQuery) (*EntityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntityWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntityWhereInput is returned in case the EntityWhereInput is empty.
var ErrEmptyEntityWhereInput = errors.New("generated: empty predicate EntityWhereInput")

// P returns a predicate for filtering entities.
// An error is returned if the input is empty or invalid.
func (i *EntityWhereInput) P() (predicate.Entity, error) {
	var predicates []predicate.Entity
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entity.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Entity, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entity.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Entity, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entity.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entity.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entity.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entity.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entity.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entity.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entity.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entity.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entity.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entity.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entity.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entity.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entity.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entity.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entity.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entity.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entity.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entity.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entity.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entity.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entity.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entity.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entity.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entity.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entity.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entity.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entity.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entity.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entity.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entity.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entity.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entity.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entity.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entity.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entity.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entity.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entity.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entity.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entity.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entity.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entity.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entity.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entity.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entity.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entity.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entity.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entity.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entity.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entity.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entity.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entity.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entity.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entity.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entity.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entity.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entity.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entity.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entity.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entity.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entity.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entity.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entity.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entity.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entity.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entity.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entity.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entity.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entity.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entity.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entity.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entity.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entity.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entity.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entity.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entity.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entity.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entity.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entity.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entity.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entity.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entity.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entity.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entity.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entity.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entity.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entity.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entity.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entity.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entity.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entity.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entity.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entity.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entity.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entity.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entity.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entity.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entity.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entity.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entity.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entity.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entity.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, entity.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, entity.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, entity.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, entity.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, entity.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, entity.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, entity.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, entity.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, entity.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, entity.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, entity.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, entity.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, entity.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, entity.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, entity.NameContainsFold(*i.NameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, entity.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, entity.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, entity.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, entity.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, entity.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, entity.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, entity.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, entity.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, entity.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, entity.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, entity.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameIsNil {
		predicates = append(predicates, entity.DisplayNameIsNil())
	}
	if i.DisplayNameNotNil {
		predicates = append(predicates, entity.DisplayNameNotNil())
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, entity.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, entity.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.EntityTypeID != nil {
		predicates = append(predicates, entity.EntityTypeIDEQ(*i.EntityTypeID))
	}
	if i.EntityTypeIDNEQ != nil {
		predicates = append(predicates, entity.EntityTypeIDNEQ(*i.EntityTypeIDNEQ))
	}
	if len(i.EntityTypeIDIn) > 0 {
		predicates = append(predicates, entity.EntityTypeIDIn(i.EntityTypeIDIn...))
	}
	if len(i.EntityTypeIDNotIn) > 0 {
		predicates = append(predicates, entity.EntityTypeIDNotIn(i.EntityTypeIDNotIn...))
	}
	if i.EntityTypeIDGT != nil {
		predicates = append(predicates, entity.EntityTypeIDGT(*i.EntityTypeIDGT))
	}
	if i.EntityTypeIDGTE != nil {
		predicates = append(predicates, entity.EntityTypeIDGTE(*i.EntityTypeIDGTE))
	}
	if i.EntityTypeIDLT != nil {
		predicates = append(predicates, entity.EntityTypeIDLT(*i.EntityTypeIDLT))
	}
	if i.EntityTypeIDLTE != nil {
		predicates = append(predicates, entity.EntityTypeIDLTE(*i.EntityTypeIDLTE))
	}
	if i.EntityTypeIDContains != nil {
		predicates = append(predicates, entity.EntityTypeIDContains(*i.EntityTypeIDContains))
	}
	if i.EntityTypeIDHasPrefix != nil {
		predicates = append(predicates, entity.EntityTypeIDHasPrefix(*i.EntityTypeIDHasPrefix))
	}
	if i.EntityTypeIDHasSuffix != nil {
		predicates = append(predicates, entity.EntityTypeIDHasSuffix(*i.EntityTypeIDHasSuffix))
	}
	if i.EntityTypeIDIsNil {
		predicates = append(predicates, entity.EntityTypeIDIsNil())
	}
	if i.EntityTypeIDNotNil {
		predicates = append(predicates, entity.EntityTypeIDNotNil())
	}
	if i.EntityTypeIDEqualFold != nil {
		predicates = append(predicates, entity.EntityTypeIDEqualFold(*i.EntityTypeIDEqualFold))
	}
	if i.EntityTypeIDContainsFold != nil {
		predicates = append(predicates, entity.EntityTypeIDContainsFold(*i.EntityTypeIDContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, entity.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, entity.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, entity.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, entity.StatusNotIn(i.StatusNotIn...))
	}
	if i.StatusGT != nil {
		predicates = append(predicates, entity.StatusGT(*i.StatusGT))
	}
	if i.StatusGTE != nil {
		predicates = append(predicates, entity.StatusGTE(*i.StatusGTE))
	}
	if i.StatusLT != nil {
		predicates = append(predicates, entity.StatusLT(*i.StatusLT))
	}
	if i.StatusLTE != nil {
		predicates = append(predicates, entity.StatusLTE(*i.StatusLTE))
	}
	if i.StatusContains != nil {
		predicates = append(predicates, entity.StatusContains(*i.StatusContains))
	}
	if i.StatusHasPrefix != nil {
		predicates = append(predicates, entity.StatusHasPrefix(*i.StatusHasPrefix))
	}
	if i.StatusHasSuffix != nil {
		predicates = append(predicates, entity.StatusHasSuffix(*i.StatusHasSuffix))
	}
	if i.StatusIsNil {
		predicates = append(predicates, entity.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, entity.StatusNotNil())
	}
	if i.StatusEqualFold != nil {
		predicates = append(predicates, entity.StatusEqualFold(*i.StatusEqualFold))
	}
	if i.StatusContainsFold != nil {
		predicates = append(predicates, entity.StatusContainsFold(*i.StatusContainsFold))
	}

	if i.HasOwner != nil {
		p := entity.HasOwner()
		if !*i.HasOwner {
			p = entity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entity.HasOwnerWith(with...))
	}
	if i.HasContacts != nil {
		p := entity.HasContacts()
		if !*i.HasContacts {
			p = entity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasContactsWith) > 0 {
		with := make([]predicate.Contact, 0, len(i.HasContactsWith))
		for _, w := range i.HasContactsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasContactsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entity.HasContactsWith(with...))
	}
	if i.HasDocuments != nil {
		p := entity.HasDocuments()
		if !*i.HasDocuments {
			p = entity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDocumentsWith) > 0 {
		with := make([]predicate.DocumentData, 0, len(i.HasDocumentsWith))
		for _, w := range i.HasDocumentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDocumentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entity.HasDocumentsWith(with...))
	}
	if i.HasNotes != nil {
		p := entity.HasNotes()
		if !*i.HasNotes {
			p = entity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasNotesWith) > 0 {
		with := make([]predicate.Note, 0, len(i.HasNotesWith))
		for _, w := range i.HasNotesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasNotesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entity.HasNotesWith(with...))
	}
	if i.HasFiles != nil {
		p := entity.HasFiles()
		if !*i.HasFiles {
			p = entity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entity.HasFilesWith(with...))
	}
	if i.HasEntityType != nil {
		p := entity.HasEntityType()
		if !*i.HasEntityType {
			p = entity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntityTypeWith) > 0 {
		with := make([]predicate.EntityType, 0, len(i.HasEntityTypeWith))
		for _, w := range i.HasEntityTypeWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntityTypeWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entity.HasEntityTypeWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntityWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entity.And(predicates...), nil
	}
}

// EntityHistoryWhereInput represents a where input for filtering EntityHistory queries.
type EntityHistoryWhereInput struct {
	Predicates []predicate.EntityHistory  `json:"-"`
	Not        *EntityHistoryWhereInput   `json:"not,omitempty"`
	Or         []*EntityHistoryWhereInput `json:"or,omitempty"`
	And        []*EntityHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameIsNil        bool     `json:"displayNameIsNil,omitempty"`
	DisplayNameNotNil       bool     `json:"displayNameNotNil,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "entity_type_id" field predicates.
	EntityTypeID             *string  `json:"entityTypeID,omitempty"`
	EntityTypeIDNEQ          *string  `json:"entityTypeIDNEQ,omitempty"`
	EntityTypeIDIn           []string `json:"entityTypeIDIn,omitempty"`
	EntityTypeIDNotIn        []string `json:"entityTypeIDNotIn,omitempty"`
	EntityTypeIDGT           *string  `json:"entityTypeIDGT,omitempty"`
	EntityTypeIDGTE          *string  `json:"entityTypeIDGTE,omitempty"`
	EntityTypeIDLT           *string  `json:"entityTypeIDLT,omitempty"`
	EntityTypeIDLTE          *string  `json:"entityTypeIDLTE,omitempty"`
	EntityTypeIDContains     *string  `json:"entityTypeIDContains,omitempty"`
	EntityTypeIDHasPrefix    *string  `json:"entityTypeIDHasPrefix,omitempty"`
	EntityTypeIDHasSuffix    *string  `json:"entityTypeIDHasSuffix,omitempty"`
	EntityTypeIDIsNil        bool     `json:"entityTypeIDIsNil,omitempty"`
	EntityTypeIDNotNil       bool     `json:"entityTypeIDNotNil,omitempty"`
	EntityTypeIDEqualFold    *string  `json:"entityTypeIDEqualFold,omitempty"`
	EntityTypeIDContainsFold *string  `json:"entityTypeIDContainsFold,omitempty"`

	// "status" field predicates.
	Status             *string  `json:"status,omitempty"`
	StatusNEQ          *string  `json:"statusNEQ,omitempty"`
	StatusIn           []string `json:"statusIn,omitempty"`
	StatusNotIn        []string `json:"statusNotIn,omitempty"`
	StatusGT           *string  `json:"statusGT,omitempty"`
	StatusGTE          *string  `json:"statusGTE,omitempty"`
	StatusLT           *string  `json:"statusLT,omitempty"`
	StatusLTE          *string  `json:"statusLTE,omitempty"`
	StatusContains     *string  `json:"statusContains,omitempty"`
	StatusHasPrefix    *string  `json:"statusHasPrefix,omitempty"`
	StatusHasSuffix    *string  `json:"statusHasSuffix,omitempty"`
	StatusIsNil        bool     `json:"statusIsNil,omitempty"`
	StatusNotNil       bool     `json:"statusNotNil,omitempty"`
	StatusEqualFold    *string  `json:"statusEqualFold,omitempty"`
	StatusContainsFold *string  `json:"statusContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntityHistoryWhereInput) AddPredicates(predicates ...predicate.EntityHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntityHistoryWhereInput filter on the EntityHistoryQuery builder.
func (i *EntityHistoryWhereInput) Filter(q *EntityHistoryQuery) (*EntityHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntityHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntityHistoryWhereInput is returned in case the EntityHistoryWhereInput is empty.
var ErrEmptyEntityHistoryWhereInput = errors.New("generated: empty predicate EntityHistoryWhereInput")

// P returns a predicate for filtering entityhistories.
// An error is returned if the input is empty or invalid.
func (i *EntityHistoryWhereInput) P() (predicate.EntityHistory, error) {
	var predicates []predicate.EntityHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entityhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntityHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entityhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntityHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entityhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entityhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entityhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entityhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entityhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entityhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entityhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entityhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entityhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entityhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entityhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, entityhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, entityhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, entityhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, entityhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, entityhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, entityhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, entityhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, entityhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, entityhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, entityhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, entityhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, entityhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, entityhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, entityhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, entityhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, entityhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, entityhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, entityhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, entityhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, entityhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, entityhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, entityhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, entityhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, entityhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, entityhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, entityhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, entityhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entityhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entityhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entityhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entityhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entityhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entityhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entityhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entityhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entityhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entityhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entityhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entityhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entityhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entityhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entityhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entityhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entityhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entityhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entityhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entityhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entityhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entityhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entityhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entityhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entityhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entityhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entityhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entityhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entityhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entityhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entityhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entityhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entityhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entityhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entityhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entityhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entityhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entityhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entityhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entityhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entityhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entityhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entityhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entityhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entityhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entityhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entityhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entityhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entityhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entityhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entityhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entityhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entityhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entityhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entityhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entityhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entityhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entityhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entityhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entityhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entityhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entityhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entityhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entityhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entityhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entityhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entityhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entityhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entityhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entityhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entityhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entityhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entityhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entityhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entityhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entityhistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entityhistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entityhistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entityhistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entityhistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entityhistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entityhistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entityhistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entityhistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entityhistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entityhistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entityhistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entityhistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entityhistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entityhistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, entityhistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, entityhistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, entityhistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, entityhistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, entityhistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, entityhistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, entityhistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, entityhistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, entityhistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, entityhistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, entityhistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, entityhistory.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, entityhistory.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, entityhistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, entityhistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, entityhistory.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, entityhistory.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, entityhistory.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, entityhistory.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, entityhistory.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, entityhistory.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, entityhistory.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, entityhistory.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, entityhistory.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, entityhistory.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, entityhistory.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameIsNil {
		predicates = append(predicates, entityhistory.DisplayNameIsNil())
	}
	if i.DisplayNameNotNil {
		predicates = append(predicates, entityhistory.DisplayNameNotNil())
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, entityhistory.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, entityhistory.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.EntityTypeID != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDEQ(*i.EntityTypeID))
	}
	if i.EntityTypeIDNEQ != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDNEQ(*i.EntityTypeIDNEQ))
	}
	if len(i.EntityTypeIDIn) > 0 {
		predicates = append(predicates, entityhistory.EntityTypeIDIn(i.EntityTypeIDIn...))
	}
	if len(i.EntityTypeIDNotIn) > 0 {
		predicates = append(predicates, entityhistory.EntityTypeIDNotIn(i.EntityTypeIDNotIn...))
	}
	if i.EntityTypeIDGT != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDGT(*i.EntityTypeIDGT))
	}
	if i.EntityTypeIDGTE != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDGTE(*i.EntityTypeIDGTE))
	}
	if i.EntityTypeIDLT != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDLT(*i.EntityTypeIDLT))
	}
	if i.EntityTypeIDLTE != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDLTE(*i.EntityTypeIDLTE))
	}
	if i.EntityTypeIDContains != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDContains(*i.EntityTypeIDContains))
	}
	if i.EntityTypeIDHasPrefix != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDHasPrefix(*i.EntityTypeIDHasPrefix))
	}
	if i.EntityTypeIDHasSuffix != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDHasSuffix(*i.EntityTypeIDHasSuffix))
	}
	if i.EntityTypeIDIsNil {
		predicates = append(predicates, entityhistory.EntityTypeIDIsNil())
	}
	if i.EntityTypeIDNotNil {
		predicates = append(predicates, entityhistory.EntityTypeIDNotNil())
	}
	if i.EntityTypeIDEqualFold != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDEqualFold(*i.EntityTypeIDEqualFold))
	}
	if i.EntityTypeIDContainsFold != nil {
		predicates = append(predicates, entityhistory.EntityTypeIDContainsFold(*i.EntityTypeIDContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, entityhistory.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, entityhistory.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, entityhistory.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, entityhistory.StatusNotIn(i.StatusNotIn...))
	}
	if i.StatusGT != nil {
		predicates = append(predicates, entityhistory.StatusGT(*i.StatusGT))
	}
	if i.StatusGTE != nil {
		predicates = append(predicates, entityhistory.StatusGTE(*i.StatusGTE))
	}
	if i.StatusLT != nil {
		predicates = append(predicates, entityhistory.StatusLT(*i.StatusLT))
	}
	if i.StatusLTE != nil {
		predicates = append(predicates, entityhistory.StatusLTE(*i.StatusLTE))
	}
	if i.StatusContains != nil {
		predicates = append(predicates, entityhistory.StatusContains(*i.StatusContains))
	}
	if i.StatusHasPrefix != nil {
		predicates = append(predicates, entityhistory.StatusHasPrefix(*i.StatusHasPrefix))
	}
	if i.StatusHasSuffix != nil {
		predicates = append(predicates, entityhistory.StatusHasSuffix(*i.StatusHasSuffix))
	}
	if i.StatusIsNil {
		predicates = append(predicates, entityhistory.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, entityhistory.StatusNotNil())
	}
	if i.StatusEqualFold != nil {
		predicates = append(predicates, entityhistory.StatusEqualFold(*i.StatusEqualFold))
	}
	if i.StatusContainsFold != nil {
		predicates = append(predicates, entityhistory.StatusContainsFold(*i.StatusContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntityHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entityhistory.And(predicates...), nil
	}
}

// EntityTypeWhereInput represents a where input for filtering EntityType queries.
type EntityTypeWhereInput struct {
	Predicates []predicate.EntityType  `json:"-"`
	Not        *EntityTypeWhereInput   `json:"not,omitempty"`
	Or         []*EntityTypeWhereInput `json:"or,omitempty"`
	And        []*EntityTypeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "entities" edge predicates.
	HasEntities     *bool               `json:"hasEntities,omitempty"`
	HasEntitiesWith []*EntityWhereInput `json:"hasEntitiesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntityTypeWhereInput) AddPredicates(predicates ...predicate.EntityType) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntityTypeWhereInput filter on the EntityTypeQuery builder.
func (i *EntityTypeWhereInput) Filter(q *EntityTypeQuery) (*EntityTypeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntityTypeWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntityTypeWhereInput is returned in case the EntityTypeWhereInput is empty.
var ErrEmptyEntityTypeWhereInput = errors.New("generated: empty predicate EntityTypeWhereInput")

// P returns a predicate for filtering entitytypes.
// An error is returned if the input is empty or invalid.
func (i *EntityTypeWhereInput) P() (predicate.EntityType, error) {
	var predicates []predicate.EntityType
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entitytype.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntityType, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entitytype.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntityType, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entitytype.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entitytype.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entitytype.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entitytype.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entitytype.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entitytype.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entitytype.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entitytype.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entitytype.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entitytype.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entitytype.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entitytype.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entitytype.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entitytype.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entitytype.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entitytype.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entitytype.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entitytype.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entitytype.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entitytype.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entitytype.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entitytype.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entitytype.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entitytype.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entitytype.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entitytype.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entitytype.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entitytype.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entitytype.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entitytype.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entitytype.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entitytype.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entitytype.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entitytype.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entitytype.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entitytype.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entitytype.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entitytype.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entitytype.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entitytype.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entitytype.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entitytype.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entitytype.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entitytype.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entitytype.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entitytype.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entitytype.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entitytype.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entitytype.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entitytype.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entitytype.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entitytype.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entitytype.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entitytype.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entitytype.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entitytype.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entitytype.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entitytype.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entitytype.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entitytype.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entitytype.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entitytype.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entitytype.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entitytype.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entitytype.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entitytype.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entitytype.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entitytype.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entitytype.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entitytype.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entitytype.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entitytype.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entitytype.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entitytype.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entitytype.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entitytype.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entitytype.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entitytype.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entitytype.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entitytype.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entitytype.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entitytype.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entitytype.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entitytype.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entitytype.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entitytype.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entitytype.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entitytype.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entitytype.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entitytype.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entitytype.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entitytype.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entitytype.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entitytype.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entitytype.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entitytype.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entitytype.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entitytype.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entitytype.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entitytype.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entitytype.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, entitytype.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, entitytype.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, entitytype.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, entitytype.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, entitytype.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, entitytype.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, entitytype.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, entitytype.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, entitytype.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, entitytype.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, entitytype.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, entitytype.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, entitytype.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasOwner != nil {
		p := entitytype.HasOwner()
		if !*i.HasOwner {
			p = entitytype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitytype.HasOwnerWith(with...))
	}
	if i.HasEntities != nil {
		p := entitytype.HasEntities()
		if !*i.HasEntities {
			p = entitytype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitiesWith) > 0 {
		with := make([]predicate.Entity, 0, len(i.HasEntitiesWith))
		for _, w := range i.HasEntitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitiesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entitytype.HasEntitiesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntityTypeWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entitytype.And(predicates...), nil
	}
}

// EntityTypeHistoryWhereInput represents a where input for filtering EntityTypeHistory queries.
type EntityTypeHistoryWhereInput struct {
	Predicates []predicate.EntityTypeHistory  `json:"-"`
	Not        *EntityTypeHistoryWhereInput   `json:"not,omitempty"`
	Or         []*EntityTypeHistoryWhereInput `json:"or,omitempty"`
	And        []*EntityTypeHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntityTypeHistoryWhereInput) AddPredicates(predicates ...predicate.EntityTypeHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntityTypeHistoryWhereInput filter on the EntityTypeHistoryQuery builder.
func (i *EntityTypeHistoryWhereInput) Filter(q *EntityTypeHistoryQuery) (*EntityTypeHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntityTypeHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntityTypeHistoryWhereInput is returned in case the EntityTypeHistoryWhereInput is empty.
var ErrEmptyEntityTypeHistoryWhereInput = errors.New("generated: empty predicate EntityTypeHistoryWhereInput")

// P returns a predicate for filtering entitytypehistories.
// An error is returned if the input is empty or invalid.
func (i *EntityTypeHistoryWhereInput) P() (predicate.EntityTypeHistory, error) {
	var predicates []predicate.EntityTypeHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entitytypehistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntityTypeHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entitytypehistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntityTypeHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entitytypehistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entitytypehistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entitytypehistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entitytypehistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entitytypehistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entitytypehistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entitytypehistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entitytypehistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, entitytypehistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, entitytypehistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, entitytypehistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, entitytypehistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, entitytypehistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, entitytypehistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, entitytypehistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, entitytypehistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, entitytypehistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, entitytypehistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, entitytypehistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, entitytypehistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, entitytypehistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, entitytypehistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, entitytypehistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, entitytypehistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, entitytypehistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, entitytypehistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, entitytypehistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, entitytypehistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, entitytypehistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, entitytypehistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, entitytypehistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, entitytypehistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, entitytypehistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, entitytypehistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entitytypehistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entitytypehistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entitytypehistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entitytypehistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entitytypehistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entitytypehistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entitytypehistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, entitytypehistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, entitytypehistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entitytypehistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entitytypehistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entitytypehistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entitytypehistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entitytypehistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entitytypehistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entitytypehistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, entitytypehistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, entitytypehistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entitytypehistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entitytypehistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entitytypehistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entitytypehistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entitytypehistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entitytypehistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entitytypehistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, entitytypehistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, entitytypehistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, entitytypehistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, entitytypehistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, entitytypehistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, entitytypehistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, entitytypehistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, entitytypehistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, entitytypehistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, entitytypehistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, entitytypehistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, entitytypehistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, entitytypehistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, entitytypehistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, entitytypehistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, entitytypehistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, entitytypehistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, entitytypehistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, entitytypehistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, entitytypehistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, entitytypehistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, entitytypehistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, entitytypehistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, entitytypehistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, entitytypehistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, entitytypehistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, entitytypehistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, entitytypehistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, entitytypehistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, entitytypehistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, entitytypehistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, entitytypehistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, entitytypehistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, entitytypehistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, entitytypehistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, entitytypehistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, entitytypehistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, entitytypehistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, entitytypehistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, entitytypehistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, entitytypehistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, entitytypehistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, entitytypehistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, entitytypehistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, entitytypehistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, entitytypehistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, entitytypehistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, entitytypehistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, entitytypehistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, entitytypehistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, entitytypehistory.NameContainsFold(*i.NameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntityTypeHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entitytypehistory.And(predicates...), nil
	}
}

// EventWhereInput represents a where input for filtering Event queries.
type EventWhereInput struct {
	Predicates []predicate.Event  `json:"-"`
	Not        *EventWhereInput   `json:"not,omitempty"`
	Or         []*EventWhereInput `json:"or,omitempty"`
	And        []*EventWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "event_id" field predicates.
	EventID             *string  `json:"eventID,omitempty"`
	EventIDNEQ          *string  `json:"eventIDNEQ,omitempty"`
	EventIDIn           []string `json:"eventIDIn,omitempty"`
	EventIDNotIn        []string `json:"eventIDNotIn,omitempty"`
	EventIDGT           *string  `json:"eventIDGT,omitempty"`
	EventIDGTE          *string  `json:"eventIDGTE,omitempty"`
	EventIDLT           *string  `json:"eventIDLT,omitempty"`
	EventIDLTE          *string  `json:"eventIDLTE,omitempty"`
	EventIDContains     *string  `json:"eventIDContains,omitempty"`
	EventIDHasPrefix    *string  `json:"eventIDHasPrefix,omitempty"`
	EventIDHasSuffix    *string  `json:"eventIDHasSuffix,omitempty"`
	EventIDIsNil        bool     `json:"eventIDIsNil,omitempty"`
	EventIDNotNil       bool     `json:"eventIDNotNil,omitempty"`
	EventIDEqualFold    *string  `json:"eventIDEqualFold,omitempty"`
	EventIDContainsFold *string  `json:"eventIDContainsFold,omitempty"`

	// "correlation_id" field predicates.
	CorrelationID             *string  `json:"correlationID,omitempty"`
	CorrelationIDNEQ          *string  `json:"correlationIDNEQ,omitempty"`
	CorrelationIDIn           []string `json:"correlationIDIn,omitempty"`
	CorrelationIDNotIn        []string `json:"correlationIDNotIn,omitempty"`
	CorrelationIDGT           *string  `json:"correlationIDGT,omitempty"`
	CorrelationIDGTE          *string  `json:"correlationIDGTE,omitempty"`
	CorrelationIDLT           *string  `json:"correlationIDLT,omitempty"`
	CorrelationIDLTE          *string  `json:"correlationIDLTE,omitempty"`
	CorrelationIDContains     *string  `json:"correlationIDContains,omitempty"`
	CorrelationIDHasPrefix    *string  `json:"correlationIDHasPrefix,omitempty"`
	CorrelationIDHasSuffix    *string  `json:"correlationIDHasSuffix,omitempty"`
	CorrelationIDIsNil        bool     `json:"correlationIDIsNil,omitempty"`
	CorrelationIDNotNil       bool     `json:"correlationIDNotNil,omitempty"`
	CorrelationIDEqualFold    *string  `json:"correlationIDEqualFold,omitempty"`
	CorrelationIDContainsFold *string  `json:"correlationIDContainsFold,omitempty"`

	// "event_type" field predicates.
	EventType             *string  `json:"eventType,omitempty"`
	EventTypeNEQ          *string  `json:"eventTypeNEQ,omitempty"`
	EventTypeIn           []string `json:"eventTypeIn,omitempty"`
	EventTypeNotIn        []string `json:"eventTypeNotIn,omitempty"`
	EventTypeGT           *string  `json:"eventTypeGT,omitempty"`
	EventTypeGTE          *string  `json:"eventTypeGTE,omitempty"`
	EventTypeLT           *string  `json:"eventTypeLT,omitempty"`
	EventTypeLTE          *string  `json:"eventTypeLTE,omitempty"`
	EventTypeContains     *string  `json:"eventTypeContains,omitempty"`
	EventTypeHasPrefix    *string  `json:"eventTypeHasPrefix,omitempty"`
	EventTypeHasSuffix    *string  `json:"eventTypeHasSuffix,omitempty"`
	EventTypeEqualFold    *string  `json:"eventTypeEqualFold,omitempty"`
	EventTypeContainsFold *string  `json:"eventTypeContainsFold,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "group" edge predicates.
	HasGroup     *bool              `json:"hasGroup,omitempty"`
	HasGroupWith []*GroupWhereInput `json:"hasGroupWith,omitempty"`

	// "integration" edge predicates.
	HasIntegration     *bool                    `json:"hasIntegration,omitempty"`
	HasIntegrationWith []*IntegrationWhereInput `json:"hasIntegrationWith,omitempty"`

	// "organization" edge predicates.
	HasOrganization     *bool                     `json:"hasOrganization,omitempty"`
	HasOrganizationWith []*OrganizationWhereInput `json:"hasOrganizationWith,omitempty"`

	// "invite" edge predicates.
	HasInvite     *bool               `json:"hasInvite,omitempty"`
	HasInviteWith []*InviteWhereInput `json:"hasInviteWith,omitempty"`

	// "feature" edge predicates.
	HasFeature     *bool                `json:"hasFeature,omitempty"`
	HasFeatureWith []*FeatureWhereInput `json:"hasFeatureWith,omitempty"`

	// "entitlementplan" edge predicates.
	HasEntitlementplan     *bool                        `json:"hasEntitlementplan,omitempty"`
	HasEntitlementplanWith []*EntitlementPlanWhereInput `json:"hasEntitlementplanWith,omitempty"`

	// "entitlementplanfeature" edge predicates.
	HasEntitlementplanfeature     *bool                               `json:"hasEntitlementplanfeature,omitempty"`
	HasEntitlementplanfeatureWith []*EntitlementPlanFeatureWhereInput `json:"hasEntitlementplanfeatureWith,omitempty"`

	// "personal_access_token" edge predicates.
	HasPersonalAccessToken     *bool                            `json:"hasPersonalAccessToken,omitempty"`
	HasPersonalAccessTokenWith []*PersonalAccessTokenWhereInput `json:"hasPersonalAccessTokenWith,omitempty"`

	// "oauth2token" edge predicates.
	HasOauth2token     *bool                       `json:"hasOauth2token,omitempty"`
	HasOauth2tokenWith []*OhAuthTooTokenWhereInput `json:"hasOauth2tokenWith,omitempty"`

	// "hush" edge predicates.
	HasHush     *bool             `json:"hasHush,omitempty"`
	HasHushWith []*HushWhereInput `json:"hasHushWith,omitempty"`

	// "orgmembership" edge predicates.
	HasOrgmembership     *bool                      `json:"hasOrgmembership,omitempty"`
	HasOrgmembershipWith []*OrgMembershipWhereInput `json:"hasOrgmembershipWith,omitempty"`

	// "groupmembership" edge predicates.
	HasGroupmembership     *bool                        `json:"hasGroupmembership,omitempty"`
	HasGroupmembershipWith []*GroupMembershipWhereInput `json:"hasGroupmembershipWith,omitempty"`

	// "entitlement" edge predicates.
	HasEntitlement     *bool                    `json:"hasEntitlement,omitempty"`
	HasEntitlementWith []*EntitlementWhereInput `json:"hasEntitlementWith,omitempty"`

	// "webhook" edge predicates.
	HasWebhook     *bool                `json:"hasWebhook,omitempty"`
	HasWebhookWith []*WebhookWhereInput `json:"hasWebhookWith,omitempty"`

	// "subscriber" edge predicates.
	HasSubscriber     *bool                   `json:"hasSubscriber,omitempty"`
	HasSubscriberWith []*SubscriberWhereInput `json:"hasSubscriberWith,omitempty"`

	// "file" edge predicates.
	HasFile     *bool             `json:"hasFile,omitempty"`
	HasFileWith []*FileWhereInput `json:"hasFileWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EventWhereInput) AddPredicates(predicates ...predicate.Event) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EventWhereInput filter on the EventQuery builder.
func (i *EventWhereInput) Filter(q *EventQuery) (*EventQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEventWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEventWhereInput is returned in case the EventWhereInput is empty.
var ErrEmptyEventWhereInput = errors.New("generated: empty predicate EventWhereInput")

// P returns a predicate for filtering events.
// An error is returned if the input is empty or invalid.
func (i *EventWhereInput) P() (predicate.Event, error) {
	var predicates []predicate.Event
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, event.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Event, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, event.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Event, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, event.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, event.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, event.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, event.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, event.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, event.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, event.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, event.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, event.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, event.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, event.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, event.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, event.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, event.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, event.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, event.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, event.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, event.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, event.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, event.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, event.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, event.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, event.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, event.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, event.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, event.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, event.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, event.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, event.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, event.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, event.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, event.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, event.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, event.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, event.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, event.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, event.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, event.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, event.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, event.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, event.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, event.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, event.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, event.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, event.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, event.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, event.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, event.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, event.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, event.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, event.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, event.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, event.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, event.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, event.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, event.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, event.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, event.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, event.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, event.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, event.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.EventID != nil {
		predicates = append(predicates, event.EventIDEQ(*i.EventID))
	}
	if i.EventIDNEQ != nil {
		predicates = append(predicates, event.EventIDNEQ(*i.EventIDNEQ))
	}
	if len(i.EventIDIn) > 0 {
		predicates = append(predicates, event.EventIDIn(i.EventIDIn...))
	}
	if len(i.EventIDNotIn) > 0 {
		predicates = append(predicates, event.EventIDNotIn(i.EventIDNotIn...))
	}
	if i.EventIDGT != nil {
		predicates = append(predicates, event.EventIDGT(*i.EventIDGT))
	}
	if i.EventIDGTE != nil {
		predicates = append(predicates, event.EventIDGTE(*i.EventIDGTE))
	}
	if i.EventIDLT != nil {
		predicates = append(predicates, event.EventIDLT(*i.EventIDLT))
	}
	if i.EventIDLTE != nil {
		predicates = append(predicates, event.EventIDLTE(*i.EventIDLTE))
	}
	if i.EventIDContains != nil {
		predicates = append(predicates, event.EventIDContains(*i.EventIDContains))
	}
	if i.EventIDHasPrefix != nil {
		predicates = append(predicates, event.EventIDHasPrefix(*i.EventIDHasPrefix))
	}
	if i.EventIDHasSuffix != nil {
		predicates = append(predicates, event.EventIDHasSuffix(*i.EventIDHasSuffix))
	}
	if i.EventIDIsNil {
		predicates = append(predicates, event.EventIDIsNil())
	}
	if i.EventIDNotNil {
		predicates = append(predicates, event.EventIDNotNil())
	}
	if i.EventIDEqualFold != nil {
		predicates = append(predicates, event.EventIDEqualFold(*i.EventIDEqualFold))
	}
	if i.EventIDContainsFold != nil {
		predicates = append(predicates, event.EventIDContainsFold(*i.EventIDContainsFold))
	}
	if i.CorrelationID != nil {
		predicates = append(predicates, event.CorrelationIDEQ(*i.CorrelationID))
	}
	if i.CorrelationIDNEQ != nil {
		predicates = append(predicates, event.CorrelationIDNEQ(*i.CorrelationIDNEQ))
	}
	if len(i.CorrelationIDIn) > 0 {
		predicates = append(predicates, event.CorrelationIDIn(i.CorrelationIDIn...))
	}
	if len(i.CorrelationIDNotIn) > 0 {
		predicates = append(predicates, event.CorrelationIDNotIn(i.CorrelationIDNotIn...))
	}
	if i.CorrelationIDGT != nil {
		predicates = append(predicates, event.CorrelationIDGT(*i.CorrelationIDGT))
	}
	if i.CorrelationIDGTE != nil {
		predicates = append(predicates, event.CorrelationIDGTE(*i.CorrelationIDGTE))
	}
	if i.CorrelationIDLT != nil {
		predicates = append(predicates, event.CorrelationIDLT(*i.CorrelationIDLT))
	}
	if i.CorrelationIDLTE != nil {
		predicates = append(predicates, event.CorrelationIDLTE(*i.CorrelationIDLTE))
	}
	if i.CorrelationIDContains != nil {
		predicates = append(predicates, event.CorrelationIDContains(*i.CorrelationIDContains))
	}
	if i.CorrelationIDHasPrefix != nil {
		predicates = append(predicates, event.CorrelationIDHasPrefix(*i.CorrelationIDHasPrefix))
	}
	if i.CorrelationIDHasSuffix != nil {
		predicates = append(predicates, event.CorrelationIDHasSuffix(*i.CorrelationIDHasSuffix))
	}
	if i.CorrelationIDIsNil {
		predicates = append(predicates, event.CorrelationIDIsNil())
	}
	if i.CorrelationIDNotNil {
		predicates = append(predicates, event.CorrelationIDNotNil())
	}
	if i.CorrelationIDEqualFold != nil {
		predicates = append(predicates, event.CorrelationIDEqualFold(*i.CorrelationIDEqualFold))
	}
	if i.CorrelationIDContainsFold != nil {
		predicates = append(predicates, event.CorrelationIDContainsFold(*i.CorrelationIDContainsFold))
	}
	if i.EventType != nil {
		predicates = append(predicates, event.EventTypeEQ(*i.EventType))
	}
	if i.EventTypeNEQ != nil {
		predicates = append(predicates, event.EventTypeNEQ(*i.EventTypeNEQ))
	}
	if len(i.EventTypeIn) > 0 {
		predicates = append(predicates, event.EventTypeIn(i.EventTypeIn...))
	}
	if len(i.EventTypeNotIn) > 0 {
		predicates = append(predicates, event.EventTypeNotIn(i.EventTypeNotIn...))
	}
	if i.EventTypeGT != nil {
		predicates = append(predicates, event.EventTypeGT(*i.EventTypeGT))
	}
	if i.EventTypeGTE != nil {
		predicates = append(predicates, event.EventTypeGTE(*i.EventTypeGTE))
	}
	if i.EventTypeLT != nil {
		predicates = append(predicates, event.EventTypeLT(*i.EventTypeLT))
	}
	if i.EventTypeLTE != nil {
		predicates = append(predicates, event.EventTypeLTE(*i.EventTypeLTE))
	}
	if i.EventTypeContains != nil {
		predicates = append(predicates, event.EventTypeContains(*i.EventTypeContains))
	}
	if i.EventTypeHasPrefix != nil {
		predicates = append(predicates, event.EventTypeHasPrefix(*i.EventTypeHasPrefix))
	}
	if i.EventTypeHasSuffix != nil {
		predicates = append(predicates, event.EventTypeHasSuffix(*i.EventTypeHasSuffix))
	}
	if i.EventTypeEqualFold != nil {
		predicates = append(predicates, event.EventTypeEqualFold(*i.EventTypeEqualFold))
	}
	if i.EventTypeContainsFold != nil {
		predicates = append(predicates, event.EventTypeContainsFold(*i.EventTypeContainsFold))
	}

	if i.HasUser != nil {
		p := event.HasUser()
		if !*i.HasUser {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasUserWith(with...))
	}
	if i.HasGroup != nil {
		p := event.HasGroup()
		if !*i.HasGroup {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupWith))
		for _, w := range i.HasGroupWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasGroupWith(with...))
	}
	if i.HasIntegration != nil {
		p := event.HasIntegration()
		if !*i.HasIntegration {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIntegrationWith) > 0 {
		with := make([]predicate.Integration, 0, len(i.HasIntegrationWith))
		for _, w := range i.HasIntegrationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIntegrationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasIntegrationWith(with...))
	}
	if i.HasOrganization != nil {
		p := event.HasOrganization()
		if !*i.HasOrganization {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOrganizationWith))
		for _, w := range i.HasOrganizationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasOrganizationWith(with...))
	}
	if i.HasInvite != nil {
		p := event.HasInvite()
		if !*i.HasInvite {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasInviteWith) > 0 {
		with := make([]predicate.Invite, 0, len(i.HasInviteWith))
		for _, w := range i.HasInviteWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasInviteWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasInviteWith(with...))
	}
	if i.HasFeature != nil {
		p := event.HasFeature()
		if !*i.HasFeature {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFeatureWith) > 0 {
		with := make([]predicate.Feature, 0, len(i.HasFeatureWith))
		for _, w := range i.HasFeatureWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFeatureWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasFeatureWith(with...))
	}
	if i.HasEntitlementplan != nil {
		p := event.HasEntitlementplan()
		if !*i.HasEntitlementplan {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitlementplanWith) > 0 {
		with := make([]predicate.EntitlementPlan, 0, len(i.HasEntitlementplanWith))
		for _, w := range i.HasEntitlementplanWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitlementplanWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasEntitlementplanWith(with...))
	}
	if i.HasEntitlementplanfeature != nil {
		p := event.HasEntitlementplanfeature()
		if !*i.HasEntitlementplanfeature {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitlementplanfeatureWith) > 0 {
		with := make([]predicate.EntitlementPlanFeature, 0, len(i.HasEntitlementplanfeatureWith))
		for _, w := range i.HasEntitlementplanfeatureWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitlementplanfeatureWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasEntitlementplanfeatureWith(with...))
	}
	if i.HasPersonalAccessToken != nil {
		p := event.HasPersonalAccessToken()
		if !*i.HasPersonalAccessToken {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPersonalAccessTokenWith) > 0 {
		with := make([]predicate.PersonalAccessToken, 0, len(i.HasPersonalAccessTokenWith))
		for _, w := range i.HasPersonalAccessTokenWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPersonalAccessTokenWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasPersonalAccessTokenWith(with...))
	}
	if i.HasOauth2token != nil {
		p := event.HasOauth2token()
		if !*i.HasOauth2token {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOauth2tokenWith) > 0 {
		with := make([]predicate.OhAuthTooToken, 0, len(i.HasOauth2tokenWith))
		for _, w := range i.HasOauth2tokenWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOauth2tokenWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasOauth2tokenWith(with...))
	}
	if i.HasHush != nil {
		p := event.HasHush()
		if !*i.HasHush {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasHushWith) > 0 {
		with := make([]predicate.Hush, 0, len(i.HasHushWith))
		for _, w := range i.HasHushWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasHushWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasHushWith(with...))
	}
	if i.HasOrgmembership != nil {
		p := event.HasOrgmembership()
		if !*i.HasOrgmembership {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrgmembershipWith) > 0 {
		with := make([]predicate.OrgMembership, 0, len(i.HasOrgmembershipWith))
		for _, w := range i.HasOrgmembershipWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrgmembershipWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasOrgmembershipWith(with...))
	}
	if i.HasGroupmembership != nil {
		p := event.HasGroupmembership()
		if !*i.HasGroupmembership {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupmembershipWith) > 0 {
		with := make([]predicate.GroupMembership, 0, len(i.HasGroupmembershipWith))
		for _, w := range i.HasGroupmembershipWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupmembershipWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasGroupmembershipWith(with...))
	}
	if i.HasEntitlement != nil {
		p := event.HasEntitlement()
		if !*i.HasEntitlement {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitlementWith) > 0 {
		with := make([]predicate.Entitlement, 0, len(i.HasEntitlementWith))
		for _, w := range i.HasEntitlementWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitlementWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasEntitlementWith(with...))
	}
	if i.HasWebhook != nil {
		p := event.HasWebhook()
		if !*i.HasWebhook {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWebhookWith) > 0 {
		with := make([]predicate.Webhook, 0, len(i.HasWebhookWith))
		for _, w := range i.HasWebhookWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWebhookWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasWebhookWith(with...))
	}
	if i.HasSubscriber != nil {
		p := event.HasSubscriber()
		if !*i.HasSubscriber {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSubscriberWith) > 0 {
		with := make([]predicate.Subscriber, 0, len(i.HasSubscriberWith))
		for _, w := range i.HasSubscriberWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSubscriberWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasSubscriberWith(with...))
	}
	if i.HasFile != nil {
		p := event.HasFile()
		if !*i.HasFile {
			p = event.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFileWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFileWith))
		for _, w := range i.HasFileWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFileWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, event.HasFileWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEventWhereInput
	case 1:
		return predicates[0], nil
	default:
		return event.And(predicates...), nil
	}
}

// EventHistoryWhereInput represents a where input for filtering EventHistory queries.
type EventHistoryWhereInput struct {
	Predicates []predicate.EventHistory  `json:"-"`
	Not        *EventHistoryWhereInput   `json:"not,omitempty"`
	Or         []*EventHistoryWhereInput `json:"or,omitempty"`
	And        []*EventHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "event_id" field predicates.
	EventID             *string  `json:"eventID,omitempty"`
	EventIDNEQ          *string  `json:"eventIDNEQ,omitempty"`
	EventIDIn           []string `json:"eventIDIn,omitempty"`
	EventIDNotIn        []string `json:"eventIDNotIn,omitempty"`
	EventIDGT           *string  `json:"eventIDGT,omitempty"`
	EventIDGTE          *string  `json:"eventIDGTE,omitempty"`
	EventIDLT           *string  `json:"eventIDLT,omitempty"`
	EventIDLTE          *string  `json:"eventIDLTE,omitempty"`
	EventIDContains     *string  `json:"eventIDContains,omitempty"`
	EventIDHasPrefix    *string  `json:"eventIDHasPrefix,omitempty"`
	EventIDHasSuffix    *string  `json:"eventIDHasSuffix,omitempty"`
	EventIDIsNil        bool     `json:"eventIDIsNil,omitempty"`
	EventIDNotNil       bool     `json:"eventIDNotNil,omitempty"`
	EventIDEqualFold    *string  `json:"eventIDEqualFold,omitempty"`
	EventIDContainsFold *string  `json:"eventIDContainsFold,omitempty"`

	// "correlation_id" field predicates.
	CorrelationID             *string  `json:"correlationID,omitempty"`
	CorrelationIDNEQ          *string  `json:"correlationIDNEQ,omitempty"`
	CorrelationIDIn           []string `json:"correlationIDIn,omitempty"`
	CorrelationIDNotIn        []string `json:"correlationIDNotIn,omitempty"`
	CorrelationIDGT           *string  `json:"correlationIDGT,omitempty"`
	CorrelationIDGTE          *string  `json:"correlationIDGTE,omitempty"`
	CorrelationIDLT           *string  `json:"correlationIDLT,omitempty"`
	CorrelationIDLTE          *string  `json:"correlationIDLTE,omitempty"`
	CorrelationIDContains     *string  `json:"correlationIDContains,omitempty"`
	CorrelationIDHasPrefix    *string  `json:"correlationIDHasPrefix,omitempty"`
	CorrelationIDHasSuffix    *string  `json:"correlationIDHasSuffix,omitempty"`
	CorrelationIDIsNil        bool     `json:"correlationIDIsNil,omitempty"`
	CorrelationIDNotNil       bool     `json:"correlationIDNotNil,omitempty"`
	CorrelationIDEqualFold    *string  `json:"correlationIDEqualFold,omitempty"`
	CorrelationIDContainsFold *string  `json:"correlationIDContainsFold,omitempty"`

	// "event_type" field predicates.
	EventType             *string  `json:"eventType,omitempty"`
	EventTypeNEQ          *string  `json:"eventTypeNEQ,omitempty"`
	EventTypeIn           []string `json:"eventTypeIn,omitempty"`
	EventTypeNotIn        []string `json:"eventTypeNotIn,omitempty"`
	EventTypeGT           *string  `json:"eventTypeGT,omitempty"`
	EventTypeGTE          *string  `json:"eventTypeGTE,omitempty"`
	EventTypeLT           *string  `json:"eventTypeLT,omitempty"`
	EventTypeLTE          *string  `json:"eventTypeLTE,omitempty"`
	EventTypeContains     *string  `json:"eventTypeContains,omitempty"`
	EventTypeHasPrefix    *string  `json:"eventTypeHasPrefix,omitempty"`
	EventTypeHasSuffix    *string  `json:"eventTypeHasSuffix,omitempty"`
	EventTypeEqualFold    *string  `json:"eventTypeEqualFold,omitempty"`
	EventTypeContainsFold *string  `json:"eventTypeContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EventHistoryWhereInput) AddPredicates(predicates ...predicate.EventHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EventHistoryWhereInput filter on the EventHistoryQuery builder.
func (i *EventHistoryWhereInput) Filter(q *EventHistoryQuery) (*EventHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEventHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEventHistoryWhereInput is returned in case the EventHistoryWhereInput is empty.
var ErrEmptyEventHistoryWhereInput = errors.New("generated: empty predicate EventHistoryWhereInput")

// P returns a predicate for filtering eventhistories.
// An error is returned if the input is empty or invalid.
func (i *EventHistoryWhereInput) P() (predicate.EventHistory, error) {
	var predicates []predicate.EventHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, eventhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EventHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, eventhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EventHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, eventhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, eventhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, eventhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, eventhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, eventhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, eventhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, eventhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, eventhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, eventhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, eventhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, eventhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, eventhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, eventhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, eventhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, eventhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, eventhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, eventhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, eventhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, eventhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, eventhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, eventhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, eventhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, eventhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, eventhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, eventhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, eventhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, eventhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, eventhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, eventhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, eventhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, eventhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, eventhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, eventhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, eventhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, eventhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, eventhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, eventhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, eventhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, eventhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, eventhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, eventhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, eventhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, eventhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, eventhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, eventhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, eventhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, eventhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, eventhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, eventhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, eventhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, eventhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, eventhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, eventhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, eventhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, eventhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, eventhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, eventhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, eventhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, eventhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, eventhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, eventhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, eventhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, eventhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, eventhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, eventhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, eventhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, eventhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, eventhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, eventhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, eventhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, eventhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, eventhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, eventhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, eventhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, eventhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, eventhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, eventhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, eventhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, eventhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, eventhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, eventhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, eventhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, eventhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, eventhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, eventhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, eventhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, eventhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, eventhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.EventID != nil {
		predicates = append(predicates, eventhistory.EventIDEQ(*i.EventID))
	}
	if i.EventIDNEQ != nil {
		predicates = append(predicates, eventhistory.EventIDNEQ(*i.EventIDNEQ))
	}
	if len(i.EventIDIn) > 0 {
		predicates = append(predicates, eventhistory.EventIDIn(i.EventIDIn...))
	}
	if len(i.EventIDNotIn) > 0 {
		predicates = append(predicates, eventhistory.EventIDNotIn(i.EventIDNotIn...))
	}
	if i.EventIDGT != nil {
		predicates = append(predicates, eventhistory.EventIDGT(*i.EventIDGT))
	}
	if i.EventIDGTE != nil {
		predicates = append(predicates, eventhistory.EventIDGTE(*i.EventIDGTE))
	}
	if i.EventIDLT != nil {
		predicates = append(predicates, eventhistory.EventIDLT(*i.EventIDLT))
	}
	if i.EventIDLTE != nil {
		predicates = append(predicates, eventhistory.EventIDLTE(*i.EventIDLTE))
	}
	if i.EventIDContains != nil {
		predicates = append(predicates, eventhistory.EventIDContains(*i.EventIDContains))
	}
	if i.EventIDHasPrefix != nil {
		predicates = append(predicates, eventhistory.EventIDHasPrefix(*i.EventIDHasPrefix))
	}
	if i.EventIDHasSuffix != nil {
		predicates = append(predicates, eventhistory.EventIDHasSuffix(*i.EventIDHasSuffix))
	}
	if i.EventIDIsNil {
		predicates = append(predicates, eventhistory.EventIDIsNil())
	}
	if i.EventIDNotNil {
		predicates = append(predicates, eventhistory.EventIDNotNil())
	}
	if i.EventIDEqualFold != nil {
		predicates = append(predicates, eventhistory.EventIDEqualFold(*i.EventIDEqualFold))
	}
	if i.EventIDContainsFold != nil {
		predicates = append(predicates, eventhistory.EventIDContainsFold(*i.EventIDContainsFold))
	}
	if i.CorrelationID != nil {
		predicates = append(predicates, eventhistory.CorrelationIDEQ(*i.CorrelationID))
	}
	if i.CorrelationIDNEQ != nil {
		predicates = append(predicates, eventhistory.CorrelationIDNEQ(*i.CorrelationIDNEQ))
	}
	if len(i.CorrelationIDIn) > 0 {
		predicates = append(predicates, eventhistory.CorrelationIDIn(i.CorrelationIDIn...))
	}
	if len(i.CorrelationIDNotIn) > 0 {
		predicates = append(predicates, eventhistory.CorrelationIDNotIn(i.CorrelationIDNotIn...))
	}
	if i.CorrelationIDGT != nil {
		predicates = append(predicates, eventhistory.CorrelationIDGT(*i.CorrelationIDGT))
	}
	if i.CorrelationIDGTE != nil {
		predicates = append(predicates, eventhistory.CorrelationIDGTE(*i.CorrelationIDGTE))
	}
	if i.CorrelationIDLT != nil {
		predicates = append(predicates, eventhistory.CorrelationIDLT(*i.CorrelationIDLT))
	}
	if i.CorrelationIDLTE != nil {
		predicates = append(predicates, eventhistory.CorrelationIDLTE(*i.CorrelationIDLTE))
	}
	if i.CorrelationIDContains != nil {
		predicates = append(predicates, eventhistory.CorrelationIDContains(*i.CorrelationIDContains))
	}
	if i.CorrelationIDHasPrefix != nil {
		predicates = append(predicates, eventhistory.CorrelationIDHasPrefix(*i.CorrelationIDHasPrefix))
	}
	if i.CorrelationIDHasSuffix != nil {
		predicates = append(predicates, eventhistory.CorrelationIDHasSuffix(*i.CorrelationIDHasSuffix))
	}
	if i.CorrelationIDIsNil {
		predicates = append(predicates, eventhistory.CorrelationIDIsNil())
	}
	if i.CorrelationIDNotNil {
		predicates = append(predicates, eventhistory.CorrelationIDNotNil())
	}
	if i.CorrelationIDEqualFold != nil {
		predicates = append(predicates, eventhistory.CorrelationIDEqualFold(*i.CorrelationIDEqualFold))
	}
	if i.CorrelationIDContainsFold != nil {
		predicates = append(predicates, eventhistory.CorrelationIDContainsFold(*i.CorrelationIDContainsFold))
	}
	if i.EventType != nil {
		predicates = append(predicates, eventhistory.EventTypeEQ(*i.EventType))
	}
	if i.EventTypeNEQ != nil {
		predicates = append(predicates, eventhistory.EventTypeNEQ(*i.EventTypeNEQ))
	}
	if len(i.EventTypeIn) > 0 {
		predicates = append(predicates, eventhistory.EventTypeIn(i.EventTypeIn...))
	}
	if len(i.EventTypeNotIn) > 0 {
		predicates = append(predicates, eventhistory.EventTypeNotIn(i.EventTypeNotIn...))
	}
	if i.EventTypeGT != nil {
		predicates = append(predicates, eventhistory.EventTypeGT(*i.EventTypeGT))
	}
	if i.EventTypeGTE != nil {
		predicates = append(predicates, eventhistory.EventTypeGTE(*i.EventTypeGTE))
	}
	if i.EventTypeLT != nil {
		predicates = append(predicates, eventhistory.EventTypeLT(*i.EventTypeLT))
	}
	if i.EventTypeLTE != nil {
		predicates = append(predicates, eventhistory.EventTypeLTE(*i.EventTypeLTE))
	}
	if i.EventTypeContains != nil {
		predicates = append(predicates, eventhistory.EventTypeContains(*i.EventTypeContains))
	}
	if i.EventTypeHasPrefix != nil {
		predicates = append(predicates, eventhistory.EventTypeHasPrefix(*i.EventTypeHasPrefix))
	}
	if i.EventTypeHasSuffix != nil {
		predicates = append(predicates, eventhistory.EventTypeHasSuffix(*i.EventTypeHasSuffix))
	}
	if i.EventTypeEqualFold != nil {
		predicates = append(predicates, eventhistory.EventTypeEqualFold(*i.EventTypeEqualFold))
	}
	if i.EventTypeContainsFold != nil {
		predicates = append(predicates, eventhistory.EventTypeContainsFold(*i.EventTypeContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEventHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return eventhistory.And(predicates...), nil
	}
}

// FeatureWhereInput represents a where input for filtering Feature queries.
type FeatureWhereInput struct {
	Predicates []predicate.Feature  `json:"-"`
	Not        *FeatureWhereInput   `json:"not,omitempty"`
	Or         []*FeatureWhereInput `json:"or,omitempty"`
	And        []*FeatureWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameIsNil        bool     `json:"displayNameIsNil,omitempty"`
	DisplayNameNotNil       bool     `json:"displayNameNotNil,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "enabled" field predicates.
	Enabled    *bool `json:"enabled,omitempty"`
	EnabledNEQ *bool `json:"enabledNEQ,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "plans" edge predicates.
	HasPlans     *bool                        `json:"hasPlans,omitempty"`
	HasPlansWith []*EntitlementPlanWhereInput `json:"hasPlansWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`

	// "features" edge predicates.
	HasFeatures     *bool                               `json:"hasFeatures,omitempty"`
	HasFeaturesWith []*EntitlementPlanFeatureWhereInput `json:"hasFeaturesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FeatureWhereInput) AddPredicates(predicates ...predicate.Feature) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FeatureWhereInput filter on the FeatureQuery builder.
func (i *FeatureWhereInput) Filter(q *FeatureQuery) (*FeatureQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFeatureWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFeatureWhereInput is returned in case the FeatureWhereInput is empty.
var ErrEmptyFeatureWhereInput = errors.New("generated: empty predicate FeatureWhereInput")

// P returns a predicate for filtering features.
// An error is returned if the input is empty or invalid.
func (i *FeatureWhereInput) P() (predicate.Feature, error) {
	var predicates []predicate.Feature
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, feature.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Feature, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, feature.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Feature, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, feature.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, feature.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, feature.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, feature.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, feature.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, feature.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, feature.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, feature.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, feature.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, feature.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, feature.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, feature.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, feature.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, feature.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, feature.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, feature.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, feature.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, feature.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, feature.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, feature.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, feature.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, feature.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, feature.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, feature.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, feature.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, feature.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, feature.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, feature.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, feature.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, feature.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, feature.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, feature.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, feature.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, feature.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, feature.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, feature.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, feature.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, feature.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, feature.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, feature.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, feature.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, feature.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, feature.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, feature.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, feature.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, feature.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, feature.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, feature.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, feature.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, feature.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, feature.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, feature.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, feature.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, feature.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, feature.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, feature.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, feature.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, feature.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, feature.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, feature.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, feature.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, feature.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, feature.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, feature.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, feature.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, feature.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, feature.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, feature.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, feature.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, feature.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, feature.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, feature.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, feature.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, feature.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, feature.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, feature.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, feature.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, feature.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, feature.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, feature.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, feature.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, feature.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, feature.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, feature.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, feature.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, feature.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, feature.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, feature.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, feature.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, feature.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, feature.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, feature.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, feature.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, feature.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, feature.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, feature.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, feature.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, feature.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, feature.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, feature.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, feature.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, feature.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, feature.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, feature.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, feature.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, feature.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, feature.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, feature.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, feature.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, feature.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, feature.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, feature.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, feature.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, feature.NameContainsFold(*i.NameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, feature.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, feature.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, feature.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, feature.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, feature.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, feature.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, feature.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, feature.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, feature.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, feature.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, feature.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameIsNil {
		predicates = append(predicates, feature.DisplayNameIsNil())
	}
	if i.DisplayNameNotNil {
		predicates = append(predicates, feature.DisplayNameNotNil())
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, feature.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, feature.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.Enabled != nil {
		predicates = append(predicates, feature.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, feature.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.Description != nil {
		predicates = append(predicates, feature.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, feature.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, feature.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, feature.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, feature.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, feature.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, feature.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, feature.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, feature.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, feature.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, feature.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, feature.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, feature.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, feature.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, feature.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasOwner != nil {
		p := feature.HasOwner()
		if !*i.HasOwner {
			p = feature.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, feature.HasOwnerWith(with...))
	}
	if i.HasPlans != nil {
		p := feature.HasPlans()
		if !*i.HasPlans {
			p = feature.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPlansWith) > 0 {
		with := make([]predicate.EntitlementPlan, 0, len(i.HasPlansWith))
		for _, w := range i.HasPlansWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPlansWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, feature.HasPlansWith(with...))
	}
	if i.HasEvents != nil {
		p := feature.HasEvents()
		if !*i.HasEvents {
			p = feature.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, feature.HasEventsWith(with...))
	}
	if i.HasFeatures != nil {
		p := feature.HasFeatures()
		if !*i.HasFeatures {
			p = feature.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFeaturesWith) > 0 {
		with := make([]predicate.EntitlementPlanFeature, 0, len(i.HasFeaturesWith))
		for _, w := range i.HasFeaturesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFeaturesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, feature.HasFeaturesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFeatureWhereInput
	case 1:
		return predicates[0], nil
	default:
		return feature.And(predicates...), nil
	}
}

// FeatureHistoryWhereInput represents a where input for filtering FeatureHistory queries.
type FeatureHistoryWhereInput struct {
	Predicates []predicate.FeatureHistory  `json:"-"`
	Not        *FeatureHistoryWhereInput   `json:"not,omitempty"`
	Or         []*FeatureHistoryWhereInput `json:"or,omitempty"`
	And        []*FeatureHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameIsNil        bool     `json:"displayNameIsNil,omitempty"`
	DisplayNameNotNil       bool     `json:"displayNameNotNil,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "enabled" field predicates.
	Enabled    *bool `json:"enabled,omitempty"`
	EnabledNEQ *bool `json:"enabledNEQ,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FeatureHistoryWhereInput) AddPredicates(predicates ...predicate.FeatureHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FeatureHistoryWhereInput filter on the FeatureHistoryQuery builder.
func (i *FeatureHistoryWhereInput) Filter(q *FeatureHistoryQuery) (*FeatureHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFeatureHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFeatureHistoryWhereInput is returned in case the FeatureHistoryWhereInput is empty.
var ErrEmptyFeatureHistoryWhereInput = errors.New("generated: empty predicate FeatureHistoryWhereInput")

// P returns a predicate for filtering featurehistories.
// An error is returned if the input is empty or invalid.
func (i *FeatureHistoryWhereInput) P() (predicate.FeatureHistory, error) {
	var predicates []predicate.FeatureHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, featurehistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FeatureHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, featurehistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FeatureHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, featurehistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, featurehistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, featurehistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, featurehistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, featurehistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, featurehistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, featurehistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, featurehistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, featurehistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, featurehistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, featurehistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, featurehistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, featurehistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, featurehistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, featurehistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, featurehistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, featurehistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, featurehistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, featurehistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, featurehistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, featurehistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, featurehistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, featurehistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, featurehistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, featurehistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, featurehistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, featurehistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, featurehistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, featurehistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, featurehistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, featurehistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, featurehistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, featurehistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, featurehistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, featurehistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, featurehistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, featurehistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, featurehistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, featurehistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, featurehistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, featurehistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, featurehistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, featurehistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, featurehistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, featurehistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, featurehistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, featurehistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, featurehistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, featurehistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, featurehistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, featurehistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, featurehistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, featurehistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, featurehistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, featurehistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, featurehistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, featurehistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, featurehistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, featurehistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, featurehistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, featurehistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, featurehistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, featurehistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, featurehistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, featurehistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, featurehistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, featurehistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, featurehistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, featurehistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, featurehistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, featurehistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, featurehistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, featurehistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, featurehistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, featurehistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, featurehistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, featurehistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, featurehistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, featurehistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, featurehistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, featurehistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, featurehistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, featurehistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, featurehistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, featurehistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, featurehistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, featurehistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, featurehistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, featurehistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, featurehistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, featurehistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, featurehistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, featurehistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, featurehistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, featurehistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, featurehistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, featurehistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, featurehistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, featurehistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, featurehistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, featurehistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, featurehistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, featurehistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, featurehistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, featurehistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, featurehistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, featurehistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, featurehistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, featurehistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, featurehistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, featurehistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, featurehistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, featurehistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, featurehistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, featurehistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, featurehistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, featurehistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, featurehistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, featurehistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, featurehistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, featurehistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, featurehistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, featurehistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, featurehistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, featurehistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, featurehistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, featurehistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, featurehistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, featurehistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, featurehistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, featurehistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, featurehistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, featurehistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, featurehistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, featurehistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, featurehistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, featurehistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, featurehistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, featurehistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, featurehistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, featurehistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, featurehistory.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, featurehistory.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, featurehistory.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, featurehistory.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, featurehistory.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, featurehistory.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, featurehistory.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, featurehistory.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, featurehistory.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, featurehistory.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, featurehistory.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameIsNil {
		predicates = append(predicates, featurehistory.DisplayNameIsNil())
	}
	if i.DisplayNameNotNil {
		predicates = append(predicates, featurehistory.DisplayNameNotNil())
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, featurehistory.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, featurehistory.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.Enabled != nil {
		predicates = append(predicates, featurehistory.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, featurehistory.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.Description != nil {
		predicates = append(predicates, featurehistory.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, featurehistory.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, featurehistory.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, featurehistory.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, featurehistory.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, featurehistory.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, featurehistory.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, featurehistory.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, featurehistory.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, featurehistory.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, featurehistory.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, featurehistory.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, featurehistory.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, featurehistory.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, featurehistory.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFeatureHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return featurehistory.And(predicates...), nil
	}
}

// FileWhereInput represents a where input for filtering File queries.
type FileWhereInput struct {
	Predicates []predicate.File  `json:"-"`
	Not        *FileWhereInput   `json:"not,omitempty"`
	Or         []*FileWhereInput `json:"or,omitempty"`
	And        []*FileWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "provided_file_name" field predicates.
	ProvidedFileName             *string  `json:"providedFileName,omitempty"`
	ProvidedFileNameNEQ          *string  `json:"providedFileNameNEQ,omitempty"`
	ProvidedFileNameIn           []string `json:"providedFileNameIn,omitempty"`
	ProvidedFileNameNotIn        []string `json:"providedFileNameNotIn,omitempty"`
	ProvidedFileNameGT           *string  `json:"providedFileNameGT,omitempty"`
	ProvidedFileNameGTE          *string  `json:"providedFileNameGTE,omitempty"`
	ProvidedFileNameLT           *string  `json:"providedFileNameLT,omitempty"`
	ProvidedFileNameLTE          *string  `json:"providedFileNameLTE,omitempty"`
	ProvidedFileNameContains     *string  `json:"providedFileNameContains,omitempty"`
	ProvidedFileNameHasPrefix    *string  `json:"providedFileNameHasPrefix,omitempty"`
	ProvidedFileNameHasSuffix    *string  `json:"providedFileNameHasSuffix,omitempty"`
	ProvidedFileNameEqualFold    *string  `json:"providedFileNameEqualFold,omitempty"`
	ProvidedFileNameContainsFold *string  `json:"providedFileNameContainsFold,omitempty"`

	// "provided_file_extension" field predicates.
	ProvidedFileExtension             *string  `json:"providedFileExtension,omitempty"`
	ProvidedFileExtensionNEQ          *string  `json:"providedFileExtensionNEQ,omitempty"`
	ProvidedFileExtensionIn           []string `json:"providedFileExtensionIn,omitempty"`
	ProvidedFileExtensionNotIn        []string `json:"providedFileExtensionNotIn,omitempty"`
	ProvidedFileExtensionGT           *string  `json:"providedFileExtensionGT,omitempty"`
	ProvidedFileExtensionGTE          *string  `json:"providedFileExtensionGTE,omitempty"`
	ProvidedFileExtensionLT           *string  `json:"providedFileExtensionLT,omitempty"`
	ProvidedFileExtensionLTE          *string  `json:"providedFileExtensionLTE,omitempty"`
	ProvidedFileExtensionContains     *string  `json:"providedFileExtensionContains,omitempty"`
	ProvidedFileExtensionHasPrefix    *string  `json:"providedFileExtensionHasPrefix,omitempty"`
	ProvidedFileExtensionHasSuffix    *string  `json:"providedFileExtensionHasSuffix,omitempty"`
	ProvidedFileExtensionEqualFold    *string  `json:"providedFileExtensionEqualFold,omitempty"`
	ProvidedFileExtensionContainsFold *string  `json:"providedFileExtensionContainsFold,omitempty"`

	// "provided_file_size" field predicates.
	ProvidedFileSize       *int64  `json:"providedFileSize,omitempty"`
	ProvidedFileSizeNEQ    *int64  `json:"providedFileSizeNEQ,omitempty"`
	ProvidedFileSizeIn     []int64 `json:"providedFileSizeIn,omitempty"`
	ProvidedFileSizeNotIn  []int64 `json:"providedFileSizeNotIn,omitempty"`
	ProvidedFileSizeGT     *int64  `json:"providedFileSizeGT,omitempty"`
	ProvidedFileSizeGTE    *int64  `json:"providedFileSizeGTE,omitempty"`
	ProvidedFileSizeLT     *int64  `json:"providedFileSizeLT,omitempty"`
	ProvidedFileSizeLTE    *int64  `json:"providedFileSizeLTE,omitempty"`
	ProvidedFileSizeIsNil  bool    `json:"providedFileSizeIsNil,omitempty"`
	ProvidedFileSizeNotNil bool    `json:"providedFileSizeNotNil,omitempty"`

	// "persisted_file_size" field predicates.
	PersistedFileSize       *int64  `json:"persistedFileSize,omitempty"`
	PersistedFileSizeNEQ    *int64  `json:"persistedFileSizeNEQ,omitempty"`
	PersistedFileSizeIn     []int64 `json:"persistedFileSizeIn,omitempty"`
	PersistedFileSizeNotIn  []int64 `json:"persistedFileSizeNotIn,omitempty"`
	PersistedFileSizeGT     *int64  `json:"persistedFileSizeGT,omitempty"`
	PersistedFileSizeGTE    *int64  `json:"persistedFileSizeGTE,omitempty"`
	PersistedFileSizeLT     *int64  `json:"persistedFileSizeLT,omitempty"`
	PersistedFileSizeLTE    *int64  `json:"persistedFileSizeLTE,omitempty"`
	PersistedFileSizeIsNil  bool    `json:"persistedFileSizeIsNil,omitempty"`
	PersistedFileSizeNotNil bool    `json:"persistedFileSizeNotNil,omitempty"`

	// "detected_mime_type" field predicates.
	DetectedMimeType             *string  `json:"detectedMimeType,omitempty"`
	DetectedMimeTypeNEQ          *string  `json:"detectedMimeTypeNEQ,omitempty"`
	DetectedMimeTypeIn           []string `json:"detectedMimeTypeIn,omitempty"`
	DetectedMimeTypeNotIn        []string `json:"detectedMimeTypeNotIn,omitempty"`
	DetectedMimeTypeGT           *string  `json:"detectedMimeTypeGT,omitempty"`
	DetectedMimeTypeGTE          *string  `json:"detectedMimeTypeGTE,omitempty"`
	DetectedMimeTypeLT           *string  `json:"detectedMimeTypeLT,omitempty"`
	DetectedMimeTypeLTE          *string  `json:"detectedMimeTypeLTE,omitempty"`
	DetectedMimeTypeContains     *string  `json:"detectedMimeTypeContains,omitempty"`
	DetectedMimeTypeHasPrefix    *string  `json:"detectedMimeTypeHasPrefix,omitempty"`
	DetectedMimeTypeHasSuffix    *string  `json:"detectedMimeTypeHasSuffix,omitempty"`
	DetectedMimeTypeIsNil        bool     `json:"detectedMimeTypeIsNil,omitempty"`
	DetectedMimeTypeNotNil       bool     `json:"detectedMimeTypeNotNil,omitempty"`
	DetectedMimeTypeEqualFold    *string  `json:"detectedMimeTypeEqualFold,omitempty"`
	DetectedMimeTypeContainsFold *string  `json:"detectedMimeTypeContainsFold,omitempty"`

	// "md5_hash" field predicates.
	Md5Hash             *string  `json:"md5Hash,omitempty"`
	Md5HashNEQ          *string  `json:"md5HashNEQ,omitempty"`
	Md5HashIn           []string `json:"md5HashIn,omitempty"`
	Md5HashNotIn        []string `json:"md5HashNotIn,omitempty"`
	Md5HashGT           *string  `json:"md5HashGT,omitempty"`
	Md5HashGTE          *string  `json:"md5HashGTE,omitempty"`
	Md5HashLT           *string  `json:"md5HashLT,omitempty"`
	Md5HashLTE          *string  `json:"md5HashLTE,omitempty"`
	Md5HashContains     *string  `json:"md5HashContains,omitempty"`
	Md5HashHasPrefix    *string  `json:"md5HashHasPrefix,omitempty"`
	Md5HashHasSuffix    *string  `json:"md5HashHasSuffix,omitempty"`
	Md5HashIsNil        bool     `json:"md5HashIsNil,omitempty"`
	Md5HashNotNil       bool     `json:"md5HashNotNil,omitempty"`
	Md5HashEqualFold    *string  `json:"md5HashEqualFold,omitempty"`
	Md5HashContainsFold *string  `json:"md5HashContainsFold,omitempty"`

	// "detected_content_type" field predicates.
	DetectedContentType             *string  `json:"detectedContentType,omitempty"`
	DetectedContentTypeNEQ          *string  `json:"detectedContentTypeNEQ,omitempty"`
	DetectedContentTypeIn           []string `json:"detectedContentTypeIn,omitempty"`
	DetectedContentTypeNotIn        []string `json:"detectedContentTypeNotIn,omitempty"`
	DetectedContentTypeGT           *string  `json:"detectedContentTypeGT,omitempty"`
	DetectedContentTypeGTE          *string  `json:"detectedContentTypeGTE,omitempty"`
	DetectedContentTypeLT           *string  `json:"detectedContentTypeLT,omitempty"`
	DetectedContentTypeLTE          *string  `json:"detectedContentTypeLTE,omitempty"`
	DetectedContentTypeContains     *string  `json:"detectedContentTypeContains,omitempty"`
	DetectedContentTypeHasPrefix    *string  `json:"detectedContentTypeHasPrefix,omitempty"`
	DetectedContentTypeHasSuffix    *string  `json:"detectedContentTypeHasSuffix,omitempty"`
	DetectedContentTypeEqualFold    *string  `json:"detectedContentTypeEqualFold,omitempty"`
	DetectedContentTypeContainsFold *string  `json:"detectedContentTypeContainsFold,omitempty"`

	// "store_key" field predicates.
	StoreKey             *string  `json:"storeKey,omitempty"`
	StoreKeyNEQ          *string  `json:"storeKeyNEQ,omitempty"`
	StoreKeyIn           []string `json:"storeKeyIn,omitempty"`
	StoreKeyNotIn        []string `json:"storeKeyNotIn,omitempty"`
	StoreKeyGT           *string  `json:"storeKeyGT,omitempty"`
	StoreKeyGTE          *string  `json:"storeKeyGTE,omitempty"`
	StoreKeyLT           *string  `json:"storeKeyLT,omitempty"`
	StoreKeyLTE          *string  `json:"storeKeyLTE,omitempty"`
	StoreKeyContains     *string  `json:"storeKeyContains,omitempty"`
	StoreKeyHasPrefix    *string  `json:"storeKeyHasPrefix,omitempty"`
	StoreKeyHasSuffix    *string  `json:"storeKeyHasSuffix,omitempty"`
	StoreKeyIsNil        bool     `json:"storeKeyIsNil,omitempty"`
	StoreKeyNotNil       bool     `json:"storeKeyNotNil,omitempty"`
	StoreKeyEqualFold    *string  `json:"storeKeyEqualFold,omitempty"`
	StoreKeyContainsFold *string  `json:"storeKeyContainsFold,omitempty"`

	// "category_type" field predicates.
	CategoryType             *string  `json:"categoryType,omitempty"`
	CategoryTypeNEQ          *string  `json:"categoryTypeNEQ,omitempty"`
	CategoryTypeIn           []string `json:"categoryTypeIn,omitempty"`
	CategoryTypeNotIn        []string `json:"categoryTypeNotIn,omitempty"`
	CategoryTypeGT           *string  `json:"categoryTypeGT,omitempty"`
	CategoryTypeGTE          *string  `json:"categoryTypeGTE,omitempty"`
	CategoryTypeLT           *string  `json:"categoryTypeLT,omitempty"`
	CategoryTypeLTE          *string  `json:"categoryTypeLTE,omitempty"`
	CategoryTypeContains     *string  `json:"categoryTypeContains,omitempty"`
	CategoryTypeHasPrefix    *string  `json:"categoryTypeHasPrefix,omitempty"`
	CategoryTypeHasSuffix    *string  `json:"categoryTypeHasSuffix,omitempty"`
	CategoryTypeIsNil        bool     `json:"categoryTypeIsNil,omitempty"`
	CategoryTypeNotNil       bool     `json:"categoryTypeNotNil,omitempty"`
	CategoryTypeEqualFold    *string  `json:"categoryTypeEqualFold,omitempty"`
	CategoryTypeContainsFold *string  `json:"categoryTypeContainsFold,omitempty"`

	// "uri" field predicates.
	URI             *string  `json:"uri,omitempty"`
	URINEQ          *string  `json:"uriNEQ,omitempty"`
	URIIn           []string `json:"uriIn,omitempty"`
	URINotIn        []string `json:"uriNotIn,omitempty"`
	URIGT           *string  `json:"uriGT,omitempty"`
	URIGTE          *string  `json:"uriGTE,omitempty"`
	URILT           *string  `json:"uriLT,omitempty"`
	URILTE          *string  `json:"uriLTE,omitempty"`
	URIContains     *string  `json:"uriContains,omitempty"`
	URIHasPrefix    *string  `json:"uriHasPrefix,omitempty"`
	URIHasSuffix    *string  `json:"uriHasSuffix,omitempty"`
	URIIsNil        bool     `json:"uriIsNil,omitempty"`
	URINotNil       bool     `json:"uriNotNil,omitempty"`
	URIEqualFold    *string  `json:"uriEqualFold,omitempty"`
	URIContainsFold *string  `json:"uriContainsFold,omitempty"`

	// "storage_scheme" field predicates.
	StorageScheme             *string  `json:"storageScheme,omitempty"`
	StorageSchemeNEQ          *string  `json:"storageSchemeNEQ,omitempty"`
	StorageSchemeIn           []string `json:"storageSchemeIn,omitempty"`
	StorageSchemeNotIn        []string `json:"storageSchemeNotIn,omitempty"`
	StorageSchemeGT           *string  `json:"storageSchemeGT,omitempty"`
	StorageSchemeGTE          *string  `json:"storageSchemeGTE,omitempty"`
	StorageSchemeLT           *string  `json:"storageSchemeLT,omitempty"`
	StorageSchemeLTE          *string  `json:"storageSchemeLTE,omitempty"`
	StorageSchemeContains     *string  `json:"storageSchemeContains,omitempty"`
	StorageSchemeHasPrefix    *string  `json:"storageSchemeHasPrefix,omitempty"`
	StorageSchemeHasSuffix    *string  `json:"storageSchemeHasSuffix,omitempty"`
	StorageSchemeIsNil        bool     `json:"storageSchemeIsNil,omitempty"`
	StorageSchemeNotNil       bool     `json:"storageSchemeNotNil,omitempty"`
	StorageSchemeEqualFold    *string  `json:"storageSchemeEqualFold,omitempty"`
	StorageSchemeContainsFold *string  `json:"storageSchemeContainsFold,omitempty"`

	// "storage_volume" field predicates.
	StorageVolume             *string  `json:"storageVolume,omitempty"`
	StorageVolumeNEQ          *string  `json:"storageVolumeNEQ,omitempty"`
	StorageVolumeIn           []string `json:"storageVolumeIn,omitempty"`
	StorageVolumeNotIn        []string `json:"storageVolumeNotIn,omitempty"`
	StorageVolumeGT           *string  `json:"storageVolumeGT,omitempty"`
	StorageVolumeGTE          *string  `json:"storageVolumeGTE,omitempty"`
	StorageVolumeLT           *string  `json:"storageVolumeLT,omitempty"`
	StorageVolumeLTE          *string  `json:"storageVolumeLTE,omitempty"`
	StorageVolumeContains     *string  `json:"storageVolumeContains,omitempty"`
	StorageVolumeHasPrefix    *string  `json:"storageVolumeHasPrefix,omitempty"`
	StorageVolumeHasSuffix    *string  `json:"storageVolumeHasSuffix,omitempty"`
	StorageVolumeIsNil        bool     `json:"storageVolumeIsNil,omitempty"`
	StorageVolumeNotNil       bool     `json:"storageVolumeNotNil,omitempty"`
	StorageVolumeEqualFold    *string  `json:"storageVolumeEqualFold,omitempty"`
	StorageVolumeContainsFold *string  `json:"storageVolumeContainsFold,omitempty"`

	// "storage_path" field predicates.
	StoragePath             *string  `json:"storagePath,omitempty"`
	StoragePathNEQ          *string  `json:"storagePathNEQ,omitempty"`
	StoragePathIn           []string `json:"storagePathIn,omitempty"`
	StoragePathNotIn        []string `json:"storagePathNotIn,omitempty"`
	StoragePathGT           *string  `json:"storagePathGT,omitempty"`
	StoragePathGTE          *string  `json:"storagePathGTE,omitempty"`
	StoragePathLT           *string  `json:"storagePathLT,omitempty"`
	StoragePathLTE          *string  `json:"storagePathLTE,omitempty"`
	StoragePathContains     *string  `json:"storagePathContains,omitempty"`
	StoragePathHasPrefix    *string  `json:"storagePathHasPrefix,omitempty"`
	StoragePathHasSuffix    *string  `json:"storagePathHasSuffix,omitempty"`
	StoragePathIsNil        bool     `json:"storagePathIsNil,omitempty"`
	StoragePathNotNil       bool     `json:"storagePathNotNil,omitempty"`
	StoragePathEqualFold    *string  `json:"storagePathEqualFold,omitempty"`
	StoragePathContainsFold *string  `json:"storagePathContainsFold,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "organization" edge predicates.
	HasOrganization     *bool                     `json:"hasOrganization,omitempty"`
	HasOrganizationWith []*OrganizationWhereInput `json:"hasOrganizationWith,omitempty"`

	// "group" edge predicates.
	HasGroup     *bool              `json:"hasGroup,omitempty"`
	HasGroupWith []*GroupWhereInput `json:"hasGroupWith,omitempty"`

	// "contact" edge predicates.
	HasContact     *bool                `json:"hasContact,omitempty"`
	HasContactWith []*ContactWhereInput `json:"hasContactWith,omitempty"`

	// "entity" edge predicates.
	HasEntity     *bool               `json:"hasEntity,omitempty"`
	HasEntityWith []*EntityWhereInput `json:"hasEntityWith,omitempty"`

	// "usersetting" edge predicates.
	HasUsersetting     *bool                    `json:"hasUsersetting,omitempty"`
	HasUsersettingWith []*UserSettingWhereInput `json:"hasUsersettingWith,omitempty"`

	// "organizationsetting" edge predicates.
	HasOrganizationsetting     *bool                            `json:"hasOrganizationsetting,omitempty"`
	HasOrganizationsettingWith []*OrganizationSettingWhereInput `json:"hasOrganizationsettingWith,omitempty"`

	// "template" edge predicates.
	HasTemplate     *bool                 `json:"hasTemplate,omitempty"`
	HasTemplateWith []*TemplateWhereInput `json:"hasTemplateWith,omitempty"`

	// "documentdata" edge predicates.
	HasDocumentdata     *bool                     `json:"hasDocumentdata,omitempty"`
	HasDocumentdataWith []*DocumentDataWhereInput `json:"hasDocumentdataWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FileWhereInput) AddPredicates(predicates ...predicate.File) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FileWhereInput filter on the FileQuery builder.
func (i *FileWhereInput) Filter(q *FileQuery) (*FileQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFileWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFileWhereInput is returned in case the FileWhereInput is empty.
var ErrEmptyFileWhereInput = errors.New("generated: empty predicate FileWhereInput")

// P returns a predicate for filtering files.
// An error is returned if the input is empty or invalid.
func (i *FileWhereInput) P() (predicate.File, error) {
	var predicates []predicate.File
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, file.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.File, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, file.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.File, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, file.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, file.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, file.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, file.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, file.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, file.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, file.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, file.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, file.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, file.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, file.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, file.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, file.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, file.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, file.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, file.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, file.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, file.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, file.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, file.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, file.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, file.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, file.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, file.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, file.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, file.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, file.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, file.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, file.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, file.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, file.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, file.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, file.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, file.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, file.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, file.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, file.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, file.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, file.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, file.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, file.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, file.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, file.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, file.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, file.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, file.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, file.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, file.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, file.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, file.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, file.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, file.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, file.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, file.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, file.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, file.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, file.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, file.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, file.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, file.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, file.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, file.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, file.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, file.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, file.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, file.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, file.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, file.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, file.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, file.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, file.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, file.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, file.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, file.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, file.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, file.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, file.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, file.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, file.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, file.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, file.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, file.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, file.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, file.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, file.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, file.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.ProvidedFileName != nil {
		predicates = append(predicates, file.ProvidedFileNameEQ(*i.ProvidedFileName))
	}
	if i.ProvidedFileNameNEQ != nil {
		predicates = append(predicates, file.ProvidedFileNameNEQ(*i.ProvidedFileNameNEQ))
	}
	if len(i.ProvidedFileNameIn) > 0 {
		predicates = append(predicates, file.ProvidedFileNameIn(i.ProvidedFileNameIn...))
	}
	if len(i.ProvidedFileNameNotIn) > 0 {
		predicates = append(predicates, file.ProvidedFileNameNotIn(i.ProvidedFileNameNotIn...))
	}
	if i.ProvidedFileNameGT != nil {
		predicates = append(predicates, file.ProvidedFileNameGT(*i.ProvidedFileNameGT))
	}
	if i.ProvidedFileNameGTE != nil {
		predicates = append(predicates, file.ProvidedFileNameGTE(*i.ProvidedFileNameGTE))
	}
	if i.ProvidedFileNameLT != nil {
		predicates = append(predicates, file.ProvidedFileNameLT(*i.ProvidedFileNameLT))
	}
	if i.ProvidedFileNameLTE != nil {
		predicates = append(predicates, file.ProvidedFileNameLTE(*i.ProvidedFileNameLTE))
	}
	if i.ProvidedFileNameContains != nil {
		predicates = append(predicates, file.ProvidedFileNameContains(*i.ProvidedFileNameContains))
	}
	if i.ProvidedFileNameHasPrefix != nil {
		predicates = append(predicates, file.ProvidedFileNameHasPrefix(*i.ProvidedFileNameHasPrefix))
	}
	if i.ProvidedFileNameHasSuffix != nil {
		predicates = append(predicates, file.ProvidedFileNameHasSuffix(*i.ProvidedFileNameHasSuffix))
	}
	if i.ProvidedFileNameEqualFold != nil {
		predicates = append(predicates, file.ProvidedFileNameEqualFold(*i.ProvidedFileNameEqualFold))
	}
	if i.ProvidedFileNameContainsFold != nil {
		predicates = append(predicates, file.ProvidedFileNameContainsFold(*i.ProvidedFileNameContainsFold))
	}
	if i.ProvidedFileExtension != nil {
		predicates = append(predicates, file.ProvidedFileExtensionEQ(*i.ProvidedFileExtension))
	}
	if i.ProvidedFileExtensionNEQ != nil {
		predicates = append(predicates, file.ProvidedFileExtensionNEQ(*i.ProvidedFileExtensionNEQ))
	}
	if len(i.ProvidedFileExtensionIn) > 0 {
		predicates = append(predicates, file.ProvidedFileExtensionIn(i.ProvidedFileExtensionIn...))
	}
	if len(i.ProvidedFileExtensionNotIn) > 0 {
		predicates = append(predicates, file.ProvidedFileExtensionNotIn(i.ProvidedFileExtensionNotIn...))
	}
	if i.ProvidedFileExtensionGT != nil {
		predicates = append(predicates, file.ProvidedFileExtensionGT(*i.ProvidedFileExtensionGT))
	}
	if i.ProvidedFileExtensionGTE != nil {
		predicates = append(predicates, file.ProvidedFileExtensionGTE(*i.ProvidedFileExtensionGTE))
	}
	if i.ProvidedFileExtensionLT != nil {
		predicates = append(predicates, file.ProvidedFileExtensionLT(*i.ProvidedFileExtensionLT))
	}
	if i.ProvidedFileExtensionLTE != nil {
		predicates = append(predicates, file.ProvidedFileExtensionLTE(*i.ProvidedFileExtensionLTE))
	}
	if i.ProvidedFileExtensionContains != nil {
		predicates = append(predicates, file.ProvidedFileExtensionContains(*i.ProvidedFileExtensionContains))
	}
	if i.ProvidedFileExtensionHasPrefix != nil {
		predicates = append(predicates, file.ProvidedFileExtensionHasPrefix(*i.ProvidedFileExtensionHasPrefix))
	}
	if i.ProvidedFileExtensionHasSuffix != nil {
		predicates = append(predicates, file.ProvidedFileExtensionHasSuffix(*i.ProvidedFileExtensionHasSuffix))
	}
	if i.ProvidedFileExtensionEqualFold != nil {
		predicates = append(predicates, file.ProvidedFileExtensionEqualFold(*i.ProvidedFileExtensionEqualFold))
	}
	if i.ProvidedFileExtensionContainsFold != nil {
		predicates = append(predicates, file.ProvidedFileExtensionContainsFold(*i.ProvidedFileExtensionContainsFold))
	}
	if i.ProvidedFileSize != nil {
		predicates = append(predicates, file.ProvidedFileSizeEQ(*i.ProvidedFileSize))
	}
	if i.ProvidedFileSizeNEQ != nil {
		predicates = append(predicates, file.ProvidedFileSizeNEQ(*i.ProvidedFileSizeNEQ))
	}
	if len(i.ProvidedFileSizeIn) > 0 {
		predicates = append(predicates, file.ProvidedFileSizeIn(i.ProvidedFileSizeIn...))
	}
	if len(i.ProvidedFileSizeNotIn) > 0 {
		predicates = append(predicates, file.ProvidedFileSizeNotIn(i.ProvidedFileSizeNotIn...))
	}
	if i.ProvidedFileSizeGT != nil {
		predicates = append(predicates, file.ProvidedFileSizeGT(*i.ProvidedFileSizeGT))
	}
	if i.ProvidedFileSizeGTE != nil {
		predicates = append(predicates, file.ProvidedFileSizeGTE(*i.ProvidedFileSizeGTE))
	}
	if i.ProvidedFileSizeLT != nil {
		predicates = append(predicates, file.ProvidedFileSizeLT(*i.ProvidedFileSizeLT))
	}
	if i.ProvidedFileSizeLTE != nil {
		predicates = append(predicates, file.ProvidedFileSizeLTE(*i.ProvidedFileSizeLTE))
	}
	if i.ProvidedFileSizeIsNil {
		predicates = append(predicates, file.ProvidedFileSizeIsNil())
	}
	if i.ProvidedFileSizeNotNil {
		predicates = append(predicates, file.ProvidedFileSizeNotNil())
	}
	if i.PersistedFileSize != nil {
		predicates = append(predicates, file.PersistedFileSizeEQ(*i.PersistedFileSize))
	}
	if i.PersistedFileSizeNEQ != nil {
		predicates = append(predicates, file.PersistedFileSizeNEQ(*i.PersistedFileSizeNEQ))
	}
	if len(i.PersistedFileSizeIn) > 0 {
		predicates = append(predicates, file.PersistedFileSizeIn(i.PersistedFileSizeIn...))
	}
	if len(i.PersistedFileSizeNotIn) > 0 {
		predicates = append(predicates, file.PersistedFileSizeNotIn(i.PersistedFileSizeNotIn...))
	}
	if i.PersistedFileSizeGT != nil {
		predicates = append(predicates, file.PersistedFileSizeGT(*i.PersistedFileSizeGT))
	}
	if i.PersistedFileSizeGTE != nil {
		predicates = append(predicates, file.PersistedFileSizeGTE(*i.PersistedFileSizeGTE))
	}
	if i.PersistedFileSizeLT != nil {
		predicates = append(predicates, file.PersistedFileSizeLT(*i.PersistedFileSizeLT))
	}
	if i.PersistedFileSizeLTE != nil {
		predicates = append(predicates, file.PersistedFileSizeLTE(*i.PersistedFileSizeLTE))
	}
	if i.PersistedFileSizeIsNil {
		predicates = append(predicates, file.PersistedFileSizeIsNil())
	}
	if i.PersistedFileSizeNotNil {
		predicates = append(predicates, file.PersistedFileSizeNotNil())
	}
	if i.DetectedMimeType != nil {
		predicates = append(predicates, file.DetectedMimeTypeEQ(*i.DetectedMimeType))
	}
	if i.DetectedMimeTypeNEQ != nil {
		predicates = append(predicates, file.DetectedMimeTypeNEQ(*i.DetectedMimeTypeNEQ))
	}
	if len(i.DetectedMimeTypeIn) > 0 {
		predicates = append(predicates, file.DetectedMimeTypeIn(i.DetectedMimeTypeIn...))
	}
	if len(i.DetectedMimeTypeNotIn) > 0 {
		predicates = append(predicates, file.DetectedMimeTypeNotIn(i.DetectedMimeTypeNotIn...))
	}
	if i.DetectedMimeTypeGT != nil {
		predicates = append(predicates, file.DetectedMimeTypeGT(*i.DetectedMimeTypeGT))
	}
	if i.DetectedMimeTypeGTE != nil {
		predicates = append(predicates, file.DetectedMimeTypeGTE(*i.DetectedMimeTypeGTE))
	}
	if i.DetectedMimeTypeLT != nil {
		predicates = append(predicates, file.DetectedMimeTypeLT(*i.DetectedMimeTypeLT))
	}
	if i.DetectedMimeTypeLTE != nil {
		predicates = append(predicates, file.DetectedMimeTypeLTE(*i.DetectedMimeTypeLTE))
	}
	if i.DetectedMimeTypeContains != nil {
		predicates = append(predicates, file.DetectedMimeTypeContains(*i.DetectedMimeTypeContains))
	}
	if i.DetectedMimeTypeHasPrefix != nil {
		predicates = append(predicates, file.DetectedMimeTypeHasPrefix(*i.DetectedMimeTypeHasPrefix))
	}
	if i.DetectedMimeTypeHasSuffix != nil {
		predicates = append(predicates, file.DetectedMimeTypeHasSuffix(*i.DetectedMimeTypeHasSuffix))
	}
	if i.DetectedMimeTypeIsNil {
		predicates = append(predicates, file.DetectedMimeTypeIsNil())
	}
	if i.DetectedMimeTypeNotNil {
		predicates = append(predicates, file.DetectedMimeTypeNotNil())
	}
	if i.DetectedMimeTypeEqualFold != nil {
		predicates = append(predicates, file.DetectedMimeTypeEqualFold(*i.DetectedMimeTypeEqualFold))
	}
	if i.DetectedMimeTypeContainsFold != nil {
		predicates = append(predicates, file.DetectedMimeTypeContainsFold(*i.DetectedMimeTypeContainsFold))
	}
	if i.Md5Hash != nil {
		predicates = append(predicates, file.Md5HashEQ(*i.Md5Hash))
	}
	if i.Md5HashNEQ != nil {
		predicates = append(predicates, file.Md5HashNEQ(*i.Md5HashNEQ))
	}
	if len(i.Md5HashIn) > 0 {
		predicates = append(predicates, file.Md5HashIn(i.Md5HashIn...))
	}
	if len(i.Md5HashNotIn) > 0 {
		predicates = append(predicates, file.Md5HashNotIn(i.Md5HashNotIn...))
	}
	if i.Md5HashGT != nil {
		predicates = append(predicates, file.Md5HashGT(*i.Md5HashGT))
	}
	if i.Md5HashGTE != nil {
		predicates = append(predicates, file.Md5HashGTE(*i.Md5HashGTE))
	}
	if i.Md5HashLT != nil {
		predicates = append(predicates, file.Md5HashLT(*i.Md5HashLT))
	}
	if i.Md5HashLTE != nil {
		predicates = append(predicates, file.Md5HashLTE(*i.Md5HashLTE))
	}
	if i.Md5HashContains != nil {
		predicates = append(predicates, file.Md5HashContains(*i.Md5HashContains))
	}
	if i.Md5HashHasPrefix != nil {
		predicates = append(predicates, file.Md5HashHasPrefix(*i.Md5HashHasPrefix))
	}
	if i.Md5HashHasSuffix != nil {
		predicates = append(predicates, file.Md5HashHasSuffix(*i.Md5HashHasSuffix))
	}
	if i.Md5HashIsNil {
		predicates = append(predicates, file.Md5HashIsNil())
	}
	if i.Md5HashNotNil {
		predicates = append(predicates, file.Md5HashNotNil())
	}
	if i.Md5HashEqualFold != nil {
		predicates = append(predicates, file.Md5HashEqualFold(*i.Md5HashEqualFold))
	}
	if i.Md5HashContainsFold != nil {
		predicates = append(predicates, file.Md5HashContainsFold(*i.Md5HashContainsFold))
	}
	if i.DetectedContentType != nil {
		predicates = append(predicates, file.DetectedContentTypeEQ(*i.DetectedContentType))
	}
	if i.DetectedContentTypeNEQ != nil {
		predicates = append(predicates, file.DetectedContentTypeNEQ(*i.DetectedContentTypeNEQ))
	}
	if len(i.DetectedContentTypeIn) > 0 {
		predicates = append(predicates, file.DetectedContentTypeIn(i.DetectedContentTypeIn...))
	}
	if len(i.DetectedContentTypeNotIn) > 0 {
		predicates = append(predicates, file.DetectedContentTypeNotIn(i.DetectedContentTypeNotIn...))
	}
	if i.DetectedContentTypeGT != nil {
		predicates = append(predicates, file.DetectedContentTypeGT(*i.DetectedContentTypeGT))
	}
	if i.DetectedContentTypeGTE != nil {
		predicates = append(predicates, file.DetectedContentTypeGTE(*i.DetectedContentTypeGTE))
	}
	if i.DetectedContentTypeLT != nil {
		predicates = append(predicates, file.DetectedContentTypeLT(*i.DetectedContentTypeLT))
	}
	if i.DetectedContentTypeLTE != nil {
		predicates = append(predicates, file.DetectedContentTypeLTE(*i.DetectedContentTypeLTE))
	}
	if i.DetectedContentTypeContains != nil {
		predicates = append(predicates, file.DetectedContentTypeContains(*i.DetectedContentTypeContains))
	}
	if i.DetectedContentTypeHasPrefix != nil {
		predicates = append(predicates, file.DetectedContentTypeHasPrefix(*i.DetectedContentTypeHasPrefix))
	}
	if i.DetectedContentTypeHasSuffix != nil {
		predicates = append(predicates, file.DetectedContentTypeHasSuffix(*i.DetectedContentTypeHasSuffix))
	}
	if i.DetectedContentTypeEqualFold != nil {
		predicates = append(predicates, file.DetectedContentTypeEqualFold(*i.DetectedContentTypeEqualFold))
	}
	if i.DetectedContentTypeContainsFold != nil {
		predicates = append(predicates, file.DetectedContentTypeContainsFold(*i.DetectedContentTypeContainsFold))
	}
	if i.StoreKey != nil {
		predicates = append(predicates, file.StoreKeyEQ(*i.StoreKey))
	}
	if i.StoreKeyNEQ != nil {
		predicates = append(predicates, file.StoreKeyNEQ(*i.StoreKeyNEQ))
	}
	if len(i.StoreKeyIn) > 0 {
		predicates = append(predicates, file.StoreKeyIn(i.StoreKeyIn...))
	}
	if len(i.StoreKeyNotIn) > 0 {
		predicates = append(predicates, file.StoreKeyNotIn(i.StoreKeyNotIn...))
	}
	if i.StoreKeyGT != nil {
		predicates = append(predicates, file.StoreKeyGT(*i.StoreKeyGT))
	}
	if i.StoreKeyGTE != nil {
		predicates = append(predicates, file.StoreKeyGTE(*i.StoreKeyGTE))
	}
	if i.StoreKeyLT != nil {
		predicates = append(predicates, file.StoreKeyLT(*i.StoreKeyLT))
	}
	if i.StoreKeyLTE != nil {
		predicates = append(predicates, file.StoreKeyLTE(*i.StoreKeyLTE))
	}
	if i.StoreKeyContains != nil {
		predicates = append(predicates, file.StoreKeyContains(*i.StoreKeyContains))
	}
	if i.StoreKeyHasPrefix != nil {
		predicates = append(predicates, file.StoreKeyHasPrefix(*i.StoreKeyHasPrefix))
	}
	if i.StoreKeyHasSuffix != nil {
		predicates = append(predicates, file.StoreKeyHasSuffix(*i.StoreKeyHasSuffix))
	}
	if i.StoreKeyIsNil {
		predicates = append(predicates, file.StoreKeyIsNil())
	}
	if i.StoreKeyNotNil {
		predicates = append(predicates, file.StoreKeyNotNil())
	}
	if i.StoreKeyEqualFold != nil {
		predicates = append(predicates, file.StoreKeyEqualFold(*i.StoreKeyEqualFold))
	}
	if i.StoreKeyContainsFold != nil {
		predicates = append(predicates, file.StoreKeyContainsFold(*i.StoreKeyContainsFold))
	}
	if i.CategoryType != nil {
		predicates = append(predicates, file.CategoryTypeEQ(*i.CategoryType))
	}
	if i.CategoryTypeNEQ != nil {
		predicates = append(predicates, file.CategoryTypeNEQ(*i.CategoryTypeNEQ))
	}
	if len(i.CategoryTypeIn) > 0 {
		predicates = append(predicates, file.CategoryTypeIn(i.CategoryTypeIn...))
	}
	if len(i.CategoryTypeNotIn) > 0 {
		predicates = append(predicates, file.CategoryTypeNotIn(i.CategoryTypeNotIn...))
	}
	if i.CategoryTypeGT != nil {
		predicates = append(predicates, file.CategoryTypeGT(*i.CategoryTypeGT))
	}
	if i.CategoryTypeGTE != nil {
		predicates = append(predicates, file.CategoryTypeGTE(*i.CategoryTypeGTE))
	}
	if i.CategoryTypeLT != nil {
		predicates = append(predicates, file.CategoryTypeLT(*i.CategoryTypeLT))
	}
	if i.CategoryTypeLTE != nil {
		predicates = append(predicates, file.CategoryTypeLTE(*i.CategoryTypeLTE))
	}
	if i.CategoryTypeContains != nil {
		predicates = append(predicates, file.CategoryTypeContains(*i.CategoryTypeContains))
	}
	if i.CategoryTypeHasPrefix != nil {
		predicates = append(predicates, file.CategoryTypeHasPrefix(*i.CategoryTypeHasPrefix))
	}
	if i.CategoryTypeHasSuffix != nil {
		predicates = append(predicates, file.CategoryTypeHasSuffix(*i.CategoryTypeHasSuffix))
	}
	if i.CategoryTypeIsNil {
		predicates = append(predicates, file.CategoryTypeIsNil())
	}
	if i.CategoryTypeNotNil {
		predicates = append(predicates, file.CategoryTypeNotNil())
	}
	if i.CategoryTypeEqualFold != nil {
		predicates = append(predicates, file.CategoryTypeEqualFold(*i.CategoryTypeEqualFold))
	}
	if i.CategoryTypeContainsFold != nil {
		predicates = append(predicates, file.CategoryTypeContainsFold(*i.CategoryTypeContainsFold))
	}
	if i.URI != nil {
		predicates = append(predicates, file.URIEQ(*i.URI))
	}
	if i.URINEQ != nil {
		predicates = append(predicates, file.URINEQ(*i.URINEQ))
	}
	if len(i.URIIn) > 0 {
		predicates = append(predicates, file.URIIn(i.URIIn...))
	}
	if len(i.URINotIn) > 0 {
		predicates = append(predicates, file.URINotIn(i.URINotIn...))
	}
	if i.URIGT != nil {
		predicates = append(predicates, file.URIGT(*i.URIGT))
	}
	if i.URIGTE != nil {
		predicates = append(predicates, file.URIGTE(*i.URIGTE))
	}
	if i.URILT != nil {
		predicates = append(predicates, file.URILT(*i.URILT))
	}
	if i.URILTE != nil {
		predicates = append(predicates, file.URILTE(*i.URILTE))
	}
	if i.URIContains != nil {
		predicates = append(predicates, file.URIContains(*i.URIContains))
	}
	if i.URIHasPrefix != nil {
		predicates = append(predicates, file.URIHasPrefix(*i.URIHasPrefix))
	}
	if i.URIHasSuffix != nil {
		predicates = append(predicates, file.URIHasSuffix(*i.URIHasSuffix))
	}
	if i.URIIsNil {
		predicates = append(predicates, file.URIIsNil())
	}
	if i.URINotNil {
		predicates = append(predicates, file.URINotNil())
	}
	if i.URIEqualFold != nil {
		predicates = append(predicates, file.URIEqualFold(*i.URIEqualFold))
	}
	if i.URIContainsFold != nil {
		predicates = append(predicates, file.URIContainsFold(*i.URIContainsFold))
	}
	if i.StorageScheme != nil {
		predicates = append(predicates, file.StorageSchemeEQ(*i.StorageScheme))
	}
	if i.StorageSchemeNEQ != nil {
		predicates = append(predicates, file.StorageSchemeNEQ(*i.StorageSchemeNEQ))
	}
	if len(i.StorageSchemeIn) > 0 {
		predicates = append(predicates, file.StorageSchemeIn(i.StorageSchemeIn...))
	}
	if len(i.StorageSchemeNotIn) > 0 {
		predicates = append(predicates, file.StorageSchemeNotIn(i.StorageSchemeNotIn...))
	}
	if i.StorageSchemeGT != nil {
		predicates = append(predicates, file.StorageSchemeGT(*i.StorageSchemeGT))
	}
	if i.StorageSchemeGTE != nil {
		predicates = append(predicates, file.StorageSchemeGTE(*i.StorageSchemeGTE))
	}
	if i.StorageSchemeLT != nil {
		predicates = append(predicates, file.StorageSchemeLT(*i.StorageSchemeLT))
	}
	if i.StorageSchemeLTE != nil {
		predicates = append(predicates, file.StorageSchemeLTE(*i.StorageSchemeLTE))
	}
	if i.StorageSchemeContains != nil {
		predicates = append(predicates, file.StorageSchemeContains(*i.StorageSchemeContains))
	}
	if i.StorageSchemeHasPrefix != nil {
		predicates = append(predicates, file.StorageSchemeHasPrefix(*i.StorageSchemeHasPrefix))
	}
	if i.StorageSchemeHasSuffix != nil {
		predicates = append(predicates, file.StorageSchemeHasSuffix(*i.StorageSchemeHasSuffix))
	}
	if i.StorageSchemeIsNil {
		predicates = append(predicates, file.StorageSchemeIsNil())
	}
	if i.StorageSchemeNotNil {
		predicates = append(predicates, file.StorageSchemeNotNil())
	}
	if i.StorageSchemeEqualFold != nil {
		predicates = append(predicates, file.StorageSchemeEqualFold(*i.StorageSchemeEqualFold))
	}
	if i.StorageSchemeContainsFold != nil {
		predicates = append(predicates, file.StorageSchemeContainsFold(*i.StorageSchemeContainsFold))
	}
	if i.StorageVolume != nil {
		predicates = append(predicates, file.StorageVolumeEQ(*i.StorageVolume))
	}
	if i.StorageVolumeNEQ != nil {
		predicates = append(predicates, file.StorageVolumeNEQ(*i.StorageVolumeNEQ))
	}
	if len(i.StorageVolumeIn) > 0 {
		predicates = append(predicates, file.StorageVolumeIn(i.StorageVolumeIn...))
	}
	if len(i.StorageVolumeNotIn) > 0 {
		predicates = append(predicates, file.StorageVolumeNotIn(i.StorageVolumeNotIn...))
	}
	if i.StorageVolumeGT != nil {
		predicates = append(predicates, file.StorageVolumeGT(*i.StorageVolumeGT))
	}
	if i.StorageVolumeGTE != nil {
		predicates = append(predicates, file.StorageVolumeGTE(*i.StorageVolumeGTE))
	}
	if i.StorageVolumeLT != nil {
		predicates = append(predicates, file.StorageVolumeLT(*i.StorageVolumeLT))
	}
	if i.StorageVolumeLTE != nil {
		predicates = append(predicates, file.StorageVolumeLTE(*i.StorageVolumeLTE))
	}
	if i.StorageVolumeContains != nil {
		predicates = append(predicates, file.StorageVolumeContains(*i.StorageVolumeContains))
	}
	if i.StorageVolumeHasPrefix != nil {
		predicates = append(predicates, file.StorageVolumeHasPrefix(*i.StorageVolumeHasPrefix))
	}
	if i.StorageVolumeHasSuffix != nil {
		predicates = append(predicates, file.StorageVolumeHasSuffix(*i.StorageVolumeHasSuffix))
	}
	if i.StorageVolumeIsNil {
		predicates = append(predicates, file.StorageVolumeIsNil())
	}
	if i.StorageVolumeNotNil {
		predicates = append(predicates, file.StorageVolumeNotNil())
	}
	if i.StorageVolumeEqualFold != nil {
		predicates = append(predicates, file.StorageVolumeEqualFold(*i.StorageVolumeEqualFold))
	}
	if i.StorageVolumeContainsFold != nil {
		predicates = append(predicates, file.StorageVolumeContainsFold(*i.StorageVolumeContainsFold))
	}
	if i.StoragePath != nil {
		predicates = append(predicates, file.StoragePathEQ(*i.StoragePath))
	}
	if i.StoragePathNEQ != nil {
		predicates = append(predicates, file.StoragePathNEQ(*i.StoragePathNEQ))
	}
	if len(i.StoragePathIn) > 0 {
		predicates = append(predicates, file.StoragePathIn(i.StoragePathIn...))
	}
	if len(i.StoragePathNotIn) > 0 {
		predicates = append(predicates, file.StoragePathNotIn(i.StoragePathNotIn...))
	}
	if i.StoragePathGT != nil {
		predicates = append(predicates, file.StoragePathGT(*i.StoragePathGT))
	}
	if i.StoragePathGTE != nil {
		predicates = append(predicates, file.StoragePathGTE(*i.StoragePathGTE))
	}
	if i.StoragePathLT != nil {
		predicates = append(predicates, file.StoragePathLT(*i.StoragePathLT))
	}
	if i.StoragePathLTE != nil {
		predicates = append(predicates, file.StoragePathLTE(*i.StoragePathLTE))
	}
	if i.StoragePathContains != nil {
		predicates = append(predicates, file.StoragePathContains(*i.StoragePathContains))
	}
	if i.StoragePathHasPrefix != nil {
		predicates = append(predicates, file.StoragePathHasPrefix(*i.StoragePathHasPrefix))
	}
	if i.StoragePathHasSuffix != nil {
		predicates = append(predicates, file.StoragePathHasSuffix(*i.StoragePathHasSuffix))
	}
	if i.StoragePathIsNil {
		predicates = append(predicates, file.StoragePathIsNil())
	}
	if i.StoragePathNotNil {
		predicates = append(predicates, file.StoragePathNotNil())
	}
	if i.StoragePathEqualFold != nil {
		predicates = append(predicates, file.StoragePathEqualFold(*i.StoragePathEqualFold))
	}
	if i.StoragePathContainsFold != nil {
		predicates = append(predicates, file.StoragePathContainsFold(*i.StoragePathContainsFold))
	}

	if i.HasUser != nil {
		p := file.HasUser()
		if !*i.HasUser {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasUserWith(with...))
	}
	if i.HasOrganization != nil {
		p := file.HasOrganization()
		if !*i.HasOrganization {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOrganizationWith))
		for _, w := range i.HasOrganizationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasOrganizationWith(with...))
	}
	if i.HasGroup != nil {
		p := file.HasGroup()
		if !*i.HasGroup {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupWith))
		for _, w := range i.HasGroupWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasGroupWith(with...))
	}
	if i.HasContact != nil {
		p := file.HasContact()
		if !*i.HasContact {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasContactWith) > 0 {
		with := make([]predicate.Contact, 0, len(i.HasContactWith))
		for _, w := range i.HasContactWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasContactWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasContactWith(with...))
	}
	if i.HasEntity != nil {
		p := file.HasEntity()
		if !*i.HasEntity {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntityWith) > 0 {
		with := make([]predicate.Entity, 0, len(i.HasEntityWith))
		for _, w := range i.HasEntityWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntityWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasEntityWith(with...))
	}
	if i.HasUsersetting != nil {
		p := file.HasUsersetting()
		if !*i.HasUsersetting {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersettingWith) > 0 {
		with := make([]predicate.UserSetting, 0, len(i.HasUsersettingWith))
		for _, w := range i.HasUsersettingWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersettingWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasUsersettingWith(with...))
	}
	if i.HasOrganizationsetting != nil {
		p := file.HasOrganizationsetting()
		if !*i.HasOrganizationsetting {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationsettingWith) > 0 {
		with := make([]predicate.OrganizationSetting, 0, len(i.HasOrganizationsettingWith))
		for _, w := range i.HasOrganizationsettingWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationsettingWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasOrganizationsettingWith(with...))
	}
	if i.HasTemplate != nil {
		p := file.HasTemplate()
		if !*i.HasTemplate {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTemplateWith) > 0 {
		with := make([]predicate.Template, 0, len(i.HasTemplateWith))
		for _, w := range i.HasTemplateWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTemplateWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasTemplateWith(with...))
	}
	if i.HasDocumentdata != nil {
		p := file.HasDocumentdata()
		if !*i.HasDocumentdata {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDocumentdataWith) > 0 {
		with := make([]predicate.DocumentData, 0, len(i.HasDocumentdataWith))
		for _, w := range i.HasDocumentdataWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDocumentdataWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasDocumentdataWith(with...))
	}
	if i.HasEvents != nil {
		p := file.HasEvents()
		if !*i.HasEvents {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFileWhereInput
	case 1:
		return predicates[0], nil
	default:
		return file.And(predicates...), nil
	}
}

// FileHistoryWhereInput represents a where input for filtering FileHistory queries.
type FileHistoryWhereInput struct {
	Predicates []predicate.FileHistory  `json:"-"`
	Not        *FileHistoryWhereInput   `json:"not,omitempty"`
	Or         []*FileHistoryWhereInput `json:"or,omitempty"`
	And        []*FileHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "provided_file_name" field predicates.
	ProvidedFileName             *string  `json:"providedFileName,omitempty"`
	ProvidedFileNameNEQ          *string  `json:"providedFileNameNEQ,omitempty"`
	ProvidedFileNameIn           []string `json:"providedFileNameIn,omitempty"`
	ProvidedFileNameNotIn        []string `json:"providedFileNameNotIn,omitempty"`
	ProvidedFileNameGT           *string  `json:"providedFileNameGT,omitempty"`
	ProvidedFileNameGTE          *string  `json:"providedFileNameGTE,omitempty"`
	ProvidedFileNameLT           *string  `json:"providedFileNameLT,omitempty"`
	ProvidedFileNameLTE          *string  `json:"providedFileNameLTE,omitempty"`
	ProvidedFileNameContains     *string  `json:"providedFileNameContains,omitempty"`
	ProvidedFileNameHasPrefix    *string  `json:"providedFileNameHasPrefix,omitempty"`
	ProvidedFileNameHasSuffix    *string  `json:"providedFileNameHasSuffix,omitempty"`
	ProvidedFileNameEqualFold    *string  `json:"providedFileNameEqualFold,omitempty"`
	ProvidedFileNameContainsFold *string  `json:"providedFileNameContainsFold,omitempty"`

	// "provided_file_extension" field predicates.
	ProvidedFileExtension             *string  `json:"providedFileExtension,omitempty"`
	ProvidedFileExtensionNEQ          *string  `json:"providedFileExtensionNEQ,omitempty"`
	ProvidedFileExtensionIn           []string `json:"providedFileExtensionIn,omitempty"`
	ProvidedFileExtensionNotIn        []string `json:"providedFileExtensionNotIn,omitempty"`
	ProvidedFileExtensionGT           *string  `json:"providedFileExtensionGT,omitempty"`
	ProvidedFileExtensionGTE          *string  `json:"providedFileExtensionGTE,omitempty"`
	ProvidedFileExtensionLT           *string  `json:"providedFileExtensionLT,omitempty"`
	ProvidedFileExtensionLTE          *string  `json:"providedFileExtensionLTE,omitempty"`
	ProvidedFileExtensionContains     *string  `json:"providedFileExtensionContains,omitempty"`
	ProvidedFileExtensionHasPrefix    *string  `json:"providedFileExtensionHasPrefix,omitempty"`
	ProvidedFileExtensionHasSuffix    *string  `json:"providedFileExtensionHasSuffix,omitempty"`
	ProvidedFileExtensionEqualFold    *string  `json:"providedFileExtensionEqualFold,omitempty"`
	ProvidedFileExtensionContainsFold *string  `json:"providedFileExtensionContainsFold,omitempty"`

	// "provided_file_size" field predicates.
	ProvidedFileSize       *int64  `json:"providedFileSize,omitempty"`
	ProvidedFileSizeNEQ    *int64  `json:"providedFileSizeNEQ,omitempty"`
	ProvidedFileSizeIn     []int64 `json:"providedFileSizeIn,omitempty"`
	ProvidedFileSizeNotIn  []int64 `json:"providedFileSizeNotIn,omitempty"`
	ProvidedFileSizeGT     *int64  `json:"providedFileSizeGT,omitempty"`
	ProvidedFileSizeGTE    *int64  `json:"providedFileSizeGTE,omitempty"`
	ProvidedFileSizeLT     *int64  `json:"providedFileSizeLT,omitempty"`
	ProvidedFileSizeLTE    *int64  `json:"providedFileSizeLTE,omitempty"`
	ProvidedFileSizeIsNil  bool    `json:"providedFileSizeIsNil,omitempty"`
	ProvidedFileSizeNotNil bool    `json:"providedFileSizeNotNil,omitempty"`

	// "persisted_file_size" field predicates.
	PersistedFileSize       *int64  `json:"persistedFileSize,omitempty"`
	PersistedFileSizeNEQ    *int64  `json:"persistedFileSizeNEQ,omitempty"`
	PersistedFileSizeIn     []int64 `json:"persistedFileSizeIn,omitempty"`
	PersistedFileSizeNotIn  []int64 `json:"persistedFileSizeNotIn,omitempty"`
	PersistedFileSizeGT     *int64  `json:"persistedFileSizeGT,omitempty"`
	PersistedFileSizeGTE    *int64  `json:"persistedFileSizeGTE,omitempty"`
	PersistedFileSizeLT     *int64  `json:"persistedFileSizeLT,omitempty"`
	PersistedFileSizeLTE    *int64  `json:"persistedFileSizeLTE,omitempty"`
	PersistedFileSizeIsNil  bool    `json:"persistedFileSizeIsNil,omitempty"`
	PersistedFileSizeNotNil bool    `json:"persistedFileSizeNotNil,omitempty"`

	// "detected_mime_type" field predicates.
	DetectedMimeType             *string  `json:"detectedMimeType,omitempty"`
	DetectedMimeTypeNEQ          *string  `json:"detectedMimeTypeNEQ,omitempty"`
	DetectedMimeTypeIn           []string `json:"detectedMimeTypeIn,omitempty"`
	DetectedMimeTypeNotIn        []string `json:"detectedMimeTypeNotIn,omitempty"`
	DetectedMimeTypeGT           *string  `json:"detectedMimeTypeGT,omitempty"`
	DetectedMimeTypeGTE          *string  `json:"detectedMimeTypeGTE,omitempty"`
	DetectedMimeTypeLT           *string  `json:"detectedMimeTypeLT,omitempty"`
	DetectedMimeTypeLTE          *string  `json:"detectedMimeTypeLTE,omitempty"`
	DetectedMimeTypeContains     *string  `json:"detectedMimeTypeContains,omitempty"`
	DetectedMimeTypeHasPrefix    *string  `json:"detectedMimeTypeHasPrefix,omitempty"`
	DetectedMimeTypeHasSuffix    *string  `json:"detectedMimeTypeHasSuffix,omitempty"`
	DetectedMimeTypeIsNil        bool     `json:"detectedMimeTypeIsNil,omitempty"`
	DetectedMimeTypeNotNil       bool     `json:"detectedMimeTypeNotNil,omitempty"`
	DetectedMimeTypeEqualFold    *string  `json:"detectedMimeTypeEqualFold,omitempty"`
	DetectedMimeTypeContainsFold *string  `json:"detectedMimeTypeContainsFold,omitempty"`

	// "md5_hash" field predicates.
	Md5Hash             *string  `json:"md5Hash,omitempty"`
	Md5HashNEQ          *string  `json:"md5HashNEQ,omitempty"`
	Md5HashIn           []string `json:"md5HashIn,omitempty"`
	Md5HashNotIn        []string `json:"md5HashNotIn,omitempty"`
	Md5HashGT           *string  `json:"md5HashGT,omitempty"`
	Md5HashGTE          *string  `json:"md5HashGTE,omitempty"`
	Md5HashLT           *string  `json:"md5HashLT,omitempty"`
	Md5HashLTE          *string  `json:"md5HashLTE,omitempty"`
	Md5HashContains     *string  `json:"md5HashContains,omitempty"`
	Md5HashHasPrefix    *string  `json:"md5HashHasPrefix,omitempty"`
	Md5HashHasSuffix    *string  `json:"md5HashHasSuffix,omitempty"`
	Md5HashIsNil        bool     `json:"md5HashIsNil,omitempty"`
	Md5HashNotNil       bool     `json:"md5HashNotNil,omitempty"`
	Md5HashEqualFold    *string  `json:"md5HashEqualFold,omitempty"`
	Md5HashContainsFold *string  `json:"md5HashContainsFold,omitempty"`

	// "detected_content_type" field predicates.
	DetectedContentType             *string  `json:"detectedContentType,omitempty"`
	DetectedContentTypeNEQ          *string  `json:"detectedContentTypeNEQ,omitempty"`
	DetectedContentTypeIn           []string `json:"detectedContentTypeIn,omitempty"`
	DetectedContentTypeNotIn        []string `json:"detectedContentTypeNotIn,omitempty"`
	DetectedContentTypeGT           *string  `json:"detectedContentTypeGT,omitempty"`
	DetectedContentTypeGTE          *string  `json:"detectedContentTypeGTE,omitempty"`
	DetectedContentTypeLT           *string  `json:"detectedContentTypeLT,omitempty"`
	DetectedContentTypeLTE          *string  `json:"detectedContentTypeLTE,omitempty"`
	DetectedContentTypeContains     *string  `json:"detectedContentTypeContains,omitempty"`
	DetectedContentTypeHasPrefix    *string  `json:"detectedContentTypeHasPrefix,omitempty"`
	DetectedContentTypeHasSuffix    *string  `json:"detectedContentTypeHasSuffix,omitempty"`
	DetectedContentTypeEqualFold    *string  `json:"detectedContentTypeEqualFold,omitempty"`
	DetectedContentTypeContainsFold *string  `json:"detectedContentTypeContainsFold,omitempty"`

	// "store_key" field predicates.
	StoreKey             *string  `json:"storeKey,omitempty"`
	StoreKeyNEQ          *string  `json:"storeKeyNEQ,omitempty"`
	StoreKeyIn           []string `json:"storeKeyIn,omitempty"`
	StoreKeyNotIn        []string `json:"storeKeyNotIn,omitempty"`
	StoreKeyGT           *string  `json:"storeKeyGT,omitempty"`
	StoreKeyGTE          *string  `json:"storeKeyGTE,omitempty"`
	StoreKeyLT           *string  `json:"storeKeyLT,omitempty"`
	StoreKeyLTE          *string  `json:"storeKeyLTE,omitempty"`
	StoreKeyContains     *string  `json:"storeKeyContains,omitempty"`
	StoreKeyHasPrefix    *string  `json:"storeKeyHasPrefix,omitempty"`
	StoreKeyHasSuffix    *string  `json:"storeKeyHasSuffix,omitempty"`
	StoreKeyIsNil        bool     `json:"storeKeyIsNil,omitempty"`
	StoreKeyNotNil       bool     `json:"storeKeyNotNil,omitempty"`
	StoreKeyEqualFold    *string  `json:"storeKeyEqualFold,omitempty"`
	StoreKeyContainsFold *string  `json:"storeKeyContainsFold,omitempty"`

	// "category_type" field predicates.
	CategoryType             *string  `json:"categoryType,omitempty"`
	CategoryTypeNEQ          *string  `json:"categoryTypeNEQ,omitempty"`
	CategoryTypeIn           []string `json:"categoryTypeIn,omitempty"`
	CategoryTypeNotIn        []string `json:"categoryTypeNotIn,omitempty"`
	CategoryTypeGT           *string  `json:"categoryTypeGT,omitempty"`
	CategoryTypeGTE          *string  `json:"categoryTypeGTE,omitempty"`
	CategoryTypeLT           *string  `json:"categoryTypeLT,omitempty"`
	CategoryTypeLTE          *string  `json:"categoryTypeLTE,omitempty"`
	CategoryTypeContains     *string  `json:"categoryTypeContains,omitempty"`
	CategoryTypeHasPrefix    *string  `json:"categoryTypeHasPrefix,omitempty"`
	CategoryTypeHasSuffix    *string  `json:"categoryTypeHasSuffix,omitempty"`
	CategoryTypeIsNil        bool     `json:"categoryTypeIsNil,omitempty"`
	CategoryTypeNotNil       bool     `json:"categoryTypeNotNil,omitempty"`
	CategoryTypeEqualFold    *string  `json:"categoryTypeEqualFold,omitempty"`
	CategoryTypeContainsFold *string  `json:"categoryTypeContainsFold,omitempty"`

	// "uri" field predicates.
	URI             *string  `json:"uri,omitempty"`
	URINEQ          *string  `json:"uriNEQ,omitempty"`
	URIIn           []string `json:"uriIn,omitempty"`
	URINotIn        []string `json:"uriNotIn,omitempty"`
	URIGT           *string  `json:"uriGT,omitempty"`
	URIGTE          *string  `json:"uriGTE,omitempty"`
	URILT           *string  `json:"uriLT,omitempty"`
	URILTE          *string  `json:"uriLTE,omitempty"`
	URIContains     *string  `json:"uriContains,omitempty"`
	URIHasPrefix    *string  `json:"uriHasPrefix,omitempty"`
	URIHasSuffix    *string  `json:"uriHasSuffix,omitempty"`
	URIIsNil        bool     `json:"uriIsNil,omitempty"`
	URINotNil       bool     `json:"uriNotNil,omitempty"`
	URIEqualFold    *string  `json:"uriEqualFold,omitempty"`
	URIContainsFold *string  `json:"uriContainsFold,omitempty"`

	// "storage_scheme" field predicates.
	StorageScheme             *string  `json:"storageScheme,omitempty"`
	StorageSchemeNEQ          *string  `json:"storageSchemeNEQ,omitempty"`
	StorageSchemeIn           []string `json:"storageSchemeIn,omitempty"`
	StorageSchemeNotIn        []string `json:"storageSchemeNotIn,omitempty"`
	StorageSchemeGT           *string  `json:"storageSchemeGT,omitempty"`
	StorageSchemeGTE          *string  `json:"storageSchemeGTE,omitempty"`
	StorageSchemeLT           *string  `json:"storageSchemeLT,omitempty"`
	StorageSchemeLTE          *string  `json:"storageSchemeLTE,omitempty"`
	StorageSchemeContains     *string  `json:"storageSchemeContains,omitempty"`
	StorageSchemeHasPrefix    *string  `json:"storageSchemeHasPrefix,omitempty"`
	StorageSchemeHasSuffix    *string  `json:"storageSchemeHasSuffix,omitempty"`
	StorageSchemeIsNil        bool     `json:"storageSchemeIsNil,omitempty"`
	StorageSchemeNotNil       bool     `json:"storageSchemeNotNil,omitempty"`
	StorageSchemeEqualFold    *string  `json:"storageSchemeEqualFold,omitempty"`
	StorageSchemeContainsFold *string  `json:"storageSchemeContainsFold,omitempty"`

	// "storage_volume" field predicates.
	StorageVolume             *string  `json:"storageVolume,omitempty"`
	StorageVolumeNEQ          *string  `json:"storageVolumeNEQ,omitempty"`
	StorageVolumeIn           []string `json:"storageVolumeIn,omitempty"`
	StorageVolumeNotIn        []string `json:"storageVolumeNotIn,omitempty"`
	StorageVolumeGT           *string  `json:"storageVolumeGT,omitempty"`
	StorageVolumeGTE          *string  `json:"storageVolumeGTE,omitempty"`
	StorageVolumeLT           *string  `json:"storageVolumeLT,omitempty"`
	StorageVolumeLTE          *string  `json:"storageVolumeLTE,omitempty"`
	StorageVolumeContains     *string  `json:"storageVolumeContains,omitempty"`
	StorageVolumeHasPrefix    *string  `json:"storageVolumeHasPrefix,omitempty"`
	StorageVolumeHasSuffix    *string  `json:"storageVolumeHasSuffix,omitempty"`
	StorageVolumeIsNil        bool     `json:"storageVolumeIsNil,omitempty"`
	StorageVolumeNotNil       bool     `json:"storageVolumeNotNil,omitempty"`
	StorageVolumeEqualFold    *string  `json:"storageVolumeEqualFold,omitempty"`
	StorageVolumeContainsFold *string  `json:"storageVolumeContainsFold,omitempty"`

	// "storage_path" field predicates.
	StoragePath             *string  `json:"storagePath,omitempty"`
	StoragePathNEQ          *string  `json:"storagePathNEQ,omitempty"`
	StoragePathIn           []string `json:"storagePathIn,omitempty"`
	StoragePathNotIn        []string `json:"storagePathNotIn,omitempty"`
	StoragePathGT           *string  `json:"storagePathGT,omitempty"`
	StoragePathGTE          *string  `json:"storagePathGTE,omitempty"`
	StoragePathLT           *string  `json:"storagePathLT,omitempty"`
	StoragePathLTE          *string  `json:"storagePathLTE,omitempty"`
	StoragePathContains     *string  `json:"storagePathContains,omitempty"`
	StoragePathHasPrefix    *string  `json:"storagePathHasPrefix,omitempty"`
	StoragePathHasSuffix    *string  `json:"storagePathHasSuffix,omitempty"`
	StoragePathIsNil        bool     `json:"storagePathIsNil,omitempty"`
	StoragePathNotNil       bool     `json:"storagePathNotNil,omitempty"`
	StoragePathEqualFold    *string  `json:"storagePathEqualFold,omitempty"`
	StoragePathContainsFold *string  `json:"storagePathContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FileHistoryWhereInput) AddPredicates(predicates ...predicate.FileHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FileHistoryWhereInput filter on the FileHistoryQuery builder.
func (i *FileHistoryWhereInput) Filter(q *FileHistoryQuery) (*FileHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFileHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFileHistoryWhereInput is returned in case the FileHistoryWhereInput is empty.
var ErrEmptyFileHistoryWhereInput = errors.New("generated: empty predicate FileHistoryWhereInput")

// P returns a predicate for filtering filehistories.
// An error is returned if the input is empty or invalid.
func (i *FileHistoryWhereInput) P() (predicate.FileHistory, error) {
	var predicates []predicate.FileHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, filehistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FileHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, filehistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FileHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, filehistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, filehistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, filehistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, filehistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, filehistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, filehistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, filehistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, filehistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, filehistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, filehistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, filehistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, filehistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, filehistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, filehistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, filehistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, filehistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, filehistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, filehistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, filehistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, filehistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, filehistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, filehistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, filehistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, filehistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, filehistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, filehistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, filehistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, filehistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, filehistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, filehistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, filehistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, filehistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, filehistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, filehistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, filehistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, filehistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, filehistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, filehistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, filehistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, filehistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, filehistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, filehistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, filehistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, filehistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, filehistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, filehistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, filehistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, filehistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, filehistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, filehistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, filehistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, filehistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, filehistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, filehistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, filehistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, filehistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, filehistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, filehistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, filehistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, filehistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, filehistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, filehistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, filehistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, filehistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, filehistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, filehistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, filehistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, filehistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, filehistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, filehistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, filehistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, filehistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, filehistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, filehistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, filehistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, filehistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, filehistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, filehistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, filehistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, filehistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, filehistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, filehistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, filehistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, filehistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, filehistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, filehistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, filehistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, filehistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, filehistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, filehistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, filehistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, filehistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, filehistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, filehistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, filehistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, filehistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, filehistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, filehistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, filehistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, filehistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, filehistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, filehistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, filehistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, filehistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, filehistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, filehistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, filehistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, filehistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, filehistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, filehistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, filehistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, filehistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, filehistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.ProvidedFileName != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameEQ(*i.ProvidedFileName))
	}
	if i.ProvidedFileNameNEQ != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameNEQ(*i.ProvidedFileNameNEQ))
	}
	if len(i.ProvidedFileNameIn) > 0 {
		predicates = append(predicates, filehistory.ProvidedFileNameIn(i.ProvidedFileNameIn...))
	}
	if len(i.ProvidedFileNameNotIn) > 0 {
		predicates = append(predicates, filehistory.ProvidedFileNameNotIn(i.ProvidedFileNameNotIn...))
	}
	if i.ProvidedFileNameGT != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameGT(*i.ProvidedFileNameGT))
	}
	if i.ProvidedFileNameGTE != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameGTE(*i.ProvidedFileNameGTE))
	}
	if i.ProvidedFileNameLT != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameLT(*i.ProvidedFileNameLT))
	}
	if i.ProvidedFileNameLTE != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameLTE(*i.ProvidedFileNameLTE))
	}
	if i.ProvidedFileNameContains != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameContains(*i.ProvidedFileNameContains))
	}
	if i.ProvidedFileNameHasPrefix != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameHasPrefix(*i.ProvidedFileNameHasPrefix))
	}
	if i.ProvidedFileNameHasSuffix != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameHasSuffix(*i.ProvidedFileNameHasSuffix))
	}
	if i.ProvidedFileNameEqualFold != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameEqualFold(*i.ProvidedFileNameEqualFold))
	}
	if i.ProvidedFileNameContainsFold != nil {
		predicates = append(predicates, filehistory.ProvidedFileNameContainsFold(*i.ProvidedFileNameContainsFold))
	}
	if i.ProvidedFileExtension != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionEQ(*i.ProvidedFileExtension))
	}
	if i.ProvidedFileExtensionNEQ != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionNEQ(*i.ProvidedFileExtensionNEQ))
	}
	if len(i.ProvidedFileExtensionIn) > 0 {
		predicates = append(predicates, filehistory.ProvidedFileExtensionIn(i.ProvidedFileExtensionIn...))
	}
	if len(i.ProvidedFileExtensionNotIn) > 0 {
		predicates = append(predicates, filehistory.ProvidedFileExtensionNotIn(i.ProvidedFileExtensionNotIn...))
	}
	if i.ProvidedFileExtensionGT != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionGT(*i.ProvidedFileExtensionGT))
	}
	if i.ProvidedFileExtensionGTE != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionGTE(*i.ProvidedFileExtensionGTE))
	}
	if i.ProvidedFileExtensionLT != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionLT(*i.ProvidedFileExtensionLT))
	}
	if i.ProvidedFileExtensionLTE != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionLTE(*i.ProvidedFileExtensionLTE))
	}
	if i.ProvidedFileExtensionContains != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionContains(*i.ProvidedFileExtensionContains))
	}
	if i.ProvidedFileExtensionHasPrefix != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionHasPrefix(*i.ProvidedFileExtensionHasPrefix))
	}
	if i.ProvidedFileExtensionHasSuffix != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionHasSuffix(*i.ProvidedFileExtensionHasSuffix))
	}
	if i.ProvidedFileExtensionEqualFold != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionEqualFold(*i.ProvidedFileExtensionEqualFold))
	}
	if i.ProvidedFileExtensionContainsFold != nil {
		predicates = append(predicates, filehistory.ProvidedFileExtensionContainsFold(*i.ProvidedFileExtensionContainsFold))
	}
	if i.ProvidedFileSize != nil {
		predicates = append(predicates, filehistory.ProvidedFileSizeEQ(*i.ProvidedFileSize))
	}
	if i.ProvidedFileSizeNEQ != nil {
		predicates = append(predicates, filehistory.ProvidedFileSizeNEQ(*i.ProvidedFileSizeNEQ))
	}
	if len(i.ProvidedFileSizeIn) > 0 {
		predicates = append(predicates, filehistory.ProvidedFileSizeIn(i.ProvidedFileSizeIn...))
	}
	if len(i.ProvidedFileSizeNotIn) > 0 {
		predicates = append(predicates, filehistory.ProvidedFileSizeNotIn(i.ProvidedFileSizeNotIn...))
	}
	if i.ProvidedFileSizeGT != nil {
		predicates = append(predicates, filehistory.ProvidedFileSizeGT(*i.ProvidedFileSizeGT))
	}
	if i.ProvidedFileSizeGTE != nil {
		predicates = append(predicates, filehistory.ProvidedFileSizeGTE(*i.ProvidedFileSizeGTE))
	}
	if i.ProvidedFileSizeLT != nil {
		predicates = append(predicates, filehistory.ProvidedFileSizeLT(*i.ProvidedFileSizeLT))
	}
	if i.ProvidedFileSizeLTE != nil {
		predicates = append(predicates, filehistory.ProvidedFileSizeLTE(*i.ProvidedFileSizeLTE))
	}
	if i.ProvidedFileSizeIsNil {
		predicates = append(predicates, filehistory.ProvidedFileSizeIsNil())
	}
	if i.ProvidedFileSizeNotNil {
		predicates = append(predicates, filehistory.ProvidedFileSizeNotNil())
	}
	if i.PersistedFileSize != nil {
		predicates = append(predicates, filehistory.PersistedFileSizeEQ(*i.PersistedFileSize))
	}
	if i.PersistedFileSizeNEQ != nil {
		predicates = append(predicates, filehistory.PersistedFileSizeNEQ(*i.PersistedFileSizeNEQ))
	}
	if len(i.PersistedFileSizeIn) > 0 {
		predicates = append(predicates, filehistory.PersistedFileSizeIn(i.PersistedFileSizeIn...))
	}
	if len(i.PersistedFileSizeNotIn) > 0 {
		predicates = append(predicates, filehistory.PersistedFileSizeNotIn(i.PersistedFileSizeNotIn...))
	}
	if i.PersistedFileSizeGT != nil {
		predicates = append(predicates, filehistory.PersistedFileSizeGT(*i.PersistedFileSizeGT))
	}
	if i.PersistedFileSizeGTE != nil {
		predicates = append(predicates, filehistory.PersistedFileSizeGTE(*i.PersistedFileSizeGTE))
	}
	if i.PersistedFileSizeLT != nil {
		predicates = append(predicates, filehistory.PersistedFileSizeLT(*i.PersistedFileSizeLT))
	}
	if i.PersistedFileSizeLTE != nil {
		predicates = append(predicates, filehistory.PersistedFileSizeLTE(*i.PersistedFileSizeLTE))
	}
	if i.PersistedFileSizeIsNil {
		predicates = append(predicates, filehistory.PersistedFileSizeIsNil())
	}
	if i.PersistedFileSizeNotNil {
		predicates = append(predicates, filehistory.PersistedFileSizeNotNil())
	}
	if i.DetectedMimeType != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeEQ(*i.DetectedMimeType))
	}
	if i.DetectedMimeTypeNEQ != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeNEQ(*i.DetectedMimeTypeNEQ))
	}
	if len(i.DetectedMimeTypeIn) > 0 {
		predicates = append(predicates, filehistory.DetectedMimeTypeIn(i.DetectedMimeTypeIn...))
	}
	if len(i.DetectedMimeTypeNotIn) > 0 {
		predicates = append(predicates, filehistory.DetectedMimeTypeNotIn(i.DetectedMimeTypeNotIn...))
	}
	if i.DetectedMimeTypeGT != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeGT(*i.DetectedMimeTypeGT))
	}
	if i.DetectedMimeTypeGTE != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeGTE(*i.DetectedMimeTypeGTE))
	}
	if i.DetectedMimeTypeLT != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeLT(*i.DetectedMimeTypeLT))
	}
	if i.DetectedMimeTypeLTE != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeLTE(*i.DetectedMimeTypeLTE))
	}
	if i.DetectedMimeTypeContains != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeContains(*i.DetectedMimeTypeContains))
	}
	if i.DetectedMimeTypeHasPrefix != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeHasPrefix(*i.DetectedMimeTypeHasPrefix))
	}
	if i.DetectedMimeTypeHasSuffix != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeHasSuffix(*i.DetectedMimeTypeHasSuffix))
	}
	if i.DetectedMimeTypeIsNil {
		predicates = append(predicates, filehistory.DetectedMimeTypeIsNil())
	}
	if i.DetectedMimeTypeNotNil {
		predicates = append(predicates, filehistory.DetectedMimeTypeNotNil())
	}
	if i.DetectedMimeTypeEqualFold != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeEqualFold(*i.DetectedMimeTypeEqualFold))
	}
	if i.DetectedMimeTypeContainsFold != nil {
		predicates = append(predicates, filehistory.DetectedMimeTypeContainsFold(*i.DetectedMimeTypeContainsFold))
	}
	if i.Md5Hash != nil {
		predicates = append(predicates, filehistory.Md5HashEQ(*i.Md5Hash))
	}
	if i.Md5HashNEQ != nil {
		predicates = append(predicates, filehistory.Md5HashNEQ(*i.Md5HashNEQ))
	}
	if len(i.Md5HashIn) > 0 {
		predicates = append(predicates, filehistory.Md5HashIn(i.Md5HashIn...))
	}
	if len(i.Md5HashNotIn) > 0 {
		predicates = append(predicates, filehistory.Md5HashNotIn(i.Md5HashNotIn...))
	}
	if i.Md5HashGT != nil {
		predicates = append(predicates, filehistory.Md5HashGT(*i.Md5HashGT))
	}
	if i.Md5HashGTE != nil {
		predicates = append(predicates, filehistory.Md5HashGTE(*i.Md5HashGTE))
	}
	if i.Md5HashLT != nil {
		predicates = append(predicates, filehistory.Md5HashLT(*i.Md5HashLT))
	}
	if i.Md5HashLTE != nil {
		predicates = append(predicates, filehistory.Md5HashLTE(*i.Md5HashLTE))
	}
	if i.Md5HashContains != nil {
		predicates = append(predicates, filehistory.Md5HashContains(*i.Md5HashContains))
	}
	if i.Md5HashHasPrefix != nil {
		predicates = append(predicates, filehistory.Md5HashHasPrefix(*i.Md5HashHasPrefix))
	}
	if i.Md5HashHasSuffix != nil {
		predicates = append(predicates, filehistory.Md5HashHasSuffix(*i.Md5HashHasSuffix))
	}
	if i.Md5HashIsNil {
		predicates = append(predicates, filehistory.Md5HashIsNil())
	}
	if i.Md5HashNotNil {
		predicates = append(predicates, filehistory.Md5HashNotNil())
	}
	if i.Md5HashEqualFold != nil {
		predicates = append(predicates, filehistory.Md5HashEqualFold(*i.Md5HashEqualFold))
	}
	if i.Md5HashContainsFold != nil {
		predicates = append(predicates, filehistory.Md5HashContainsFold(*i.Md5HashContainsFold))
	}
	if i.DetectedContentType != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeEQ(*i.DetectedContentType))
	}
	if i.DetectedContentTypeNEQ != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeNEQ(*i.DetectedContentTypeNEQ))
	}
	if len(i.DetectedContentTypeIn) > 0 {
		predicates = append(predicates, filehistory.DetectedContentTypeIn(i.DetectedContentTypeIn...))
	}
	if len(i.DetectedContentTypeNotIn) > 0 {
		predicates = append(predicates, filehistory.DetectedContentTypeNotIn(i.DetectedContentTypeNotIn...))
	}
	if i.DetectedContentTypeGT != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeGT(*i.DetectedContentTypeGT))
	}
	if i.DetectedContentTypeGTE != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeGTE(*i.DetectedContentTypeGTE))
	}
	if i.DetectedContentTypeLT != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeLT(*i.DetectedContentTypeLT))
	}
	if i.DetectedContentTypeLTE != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeLTE(*i.DetectedContentTypeLTE))
	}
	if i.DetectedContentTypeContains != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeContains(*i.DetectedContentTypeContains))
	}
	if i.DetectedContentTypeHasPrefix != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeHasPrefix(*i.DetectedContentTypeHasPrefix))
	}
	if i.DetectedContentTypeHasSuffix != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeHasSuffix(*i.DetectedContentTypeHasSuffix))
	}
	if i.DetectedContentTypeEqualFold != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeEqualFold(*i.DetectedContentTypeEqualFold))
	}
	if i.DetectedContentTypeContainsFold != nil {
		predicates = append(predicates, filehistory.DetectedContentTypeContainsFold(*i.DetectedContentTypeContainsFold))
	}
	if i.StoreKey != nil {
		predicates = append(predicates, filehistory.StoreKeyEQ(*i.StoreKey))
	}
	if i.StoreKeyNEQ != nil {
		predicates = append(predicates, filehistory.StoreKeyNEQ(*i.StoreKeyNEQ))
	}
	if len(i.StoreKeyIn) > 0 {
		predicates = append(predicates, filehistory.StoreKeyIn(i.StoreKeyIn...))
	}
	if len(i.StoreKeyNotIn) > 0 {
		predicates = append(predicates, filehistory.StoreKeyNotIn(i.StoreKeyNotIn...))
	}
	if i.StoreKeyGT != nil {
		predicates = append(predicates, filehistory.StoreKeyGT(*i.StoreKeyGT))
	}
	if i.StoreKeyGTE != nil {
		predicates = append(predicates, filehistory.StoreKeyGTE(*i.StoreKeyGTE))
	}
	if i.StoreKeyLT != nil {
		predicates = append(predicates, filehistory.StoreKeyLT(*i.StoreKeyLT))
	}
	if i.StoreKeyLTE != nil {
		predicates = append(predicates, filehistory.StoreKeyLTE(*i.StoreKeyLTE))
	}
	if i.StoreKeyContains != nil {
		predicates = append(predicates, filehistory.StoreKeyContains(*i.StoreKeyContains))
	}
	if i.StoreKeyHasPrefix != nil {
		predicates = append(predicates, filehistory.StoreKeyHasPrefix(*i.StoreKeyHasPrefix))
	}
	if i.StoreKeyHasSuffix != nil {
		predicates = append(predicates, filehistory.StoreKeyHasSuffix(*i.StoreKeyHasSuffix))
	}
	if i.StoreKeyIsNil {
		predicates = append(predicates, filehistory.StoreKeyIsNil())
	}
	if i.StoreKeyNotNil {
		predicates = append(predicates, filehistory.StoreKeyNotNil())
	}
	if i.StoreKeyEqualFold != nil {
		predicates = append(predicates, filehistory.StoreKeyEqualFold(*i.StoreKeyEqualFold))
	}
	if i.StoreKeyContainsFold != nil {
		predicates = append(predicates, filehistory.StoreKeyContainsFold(*i.StoreKeyContainsFold))
	}
	if i.CategoryType != nil {
		predicates = append(predicates, filehistory.CategoryTypeEQ(*i.CategoryType))
	}
	if i.CategoryTypeNEQ != nil {
		predicates = append(predicates, filehistory.CategoryTypeNEQ(*i.CategoryTypeNEQ))
	}
	if len(i.CategoryTypeIn) > 0 {
		predicates = append(predicates, filehistory.CategoryTypeIn(i.CategoryTypeIn...))
	}
	if len(i.CategoryTypeNotIn) > 0 {
		predicates = append(predicates, filehistory.CategoryTypeNotIn(i.CategoryTypeNotIn...))
	}
	if i.CategoryTypeGT != nil {
		predicates = append(predicates, filehistory.CategoryTypeGT(*i.CategoryTypeGT))
	}
	if i.CategoryTypeGTE != nil {
		predicates = append(predicates, filehistory.CategoryTypeGTE(*i.CategoryTypeGTE))
	}
	if i.CategoryTypeLT != nil {
		predicates = append(predicates, filehistory.CategoryTypeLT(*i.CategoryTypeLT))
	}
	if i.CategoryTypeLTE != nil {
		predicates = append(predicates, filehistory.CategoryTypeLTE(*i.CategoryTypeLTE))
	}
	if i.CategoryTypeContains != nil {
		predicates = append(predicates, filehistory.CategoryTypeContains(*i.CategoryTypeContains))
	}
	if i.CategoryTypeHasPrefix != nil {
		predicates = append(predicates, filehistory.CategoryTypeHasPrefix(*i.CategoryTypeHasPrefix))
	}
	if i.CategoryTypeHasSuffix != nil {
		predicates = append(predicates, filehistory.CategoryTypeHasSuffix(*i.CategoryTypeHasSuffix))
	}
	if i.CategoryTypeIsNil {
		predicates = append(predicates, filehistory.CategoryTypeIsNil())
	}
	if i.CategoryTypeNotNil {
		predicates = append(predicates, filehistory.CategoryTypeNotNil())
	}
	if i.CategoryTypeEqualFold != nil {
		predicates = append(predicates, filehistory.CategoryTypeEqualFold(*i.CategoryTypeEqualFold))
	}
	if i.CategoryTypeContainsFold != nil {
		predicates = append(predicates, filehistory.CategoryTypeContainsFold(*i.CategoryTypeContainsFold))
	}
	if i.URI != nil {
		predicates = append(predicates, filehistory.URIEQ(*i.URI))
	}
	if i.URINEQ != nil {
		predicates = append(predicates, filehistory.URINEQ(*i.URINEQ))
	}
	if len(i.URIIn) > 0 {
		predicates = append(predicates, filehistory.URIIn(i.URIIn...))
	}
	if len(i.URINotIn) > 0 {
		predicates = append(predicates, filehistory.URINotIn(i.URINotIn...))
	}
	if i.URIGT != nil {
		predicates = append(predicates, filehistory.URIGT(*i.URIGT))
	}
	if i.URIGTE != nil {
		predicates = append(predicates, filehistory.URIGTE(*i.URIGTE))
	}
	if i.URILT != nil {
		predicates = append(predicates, filehistory.URILT(*i.URILT))
	}
	if i.URILTE != nil {
		predicates = append(predicates, filehistory.URILTE(*i.URILTE))
	}
	if i.URIContains != nil {
		predicates = append(predicates, filehistory.URIContains(*i.URIContains))
	}
	if i.URIHasPrefix != nil {
		predicates = append(predicates, filehistory.URIHasPrefix(*i.URIHasPrefix))
	}
	if i.URIHasSuffix != nil {
		predicates = append(predicates, filehistory.URIHasSuffix(*i.URIHasSuffix))
	}
	if i.URIIsNil {
		predicates = append(predicates, filehistory.URIIsNil())
	}
	if i.URINotNil {
		predicates = append(predicates, filehistory.URINotNil())
	}
	if i.URIEqualFold != nil {
		predicates = append(predicates, filehistory.URIEqualFold(*i.URIEqualFold))
	}
	if i.URIContainsFold != nil {
		predicates = append(predicates, filehistory.URIContainsFold(*i.URIContainsFold))
	}
	if i.StorageScheme != nil {
		predicates = append(predicates, filehistory.StorageSchemeEQ(*i.StorageScheme))
	}
	if i.StorageSchemeNEQ != nil {
		predicates = append(predicates, filehistory.StorageSchemeNEQ(*i.StorageSchemeNEQ))
	}
	if len(i.StorageSchemeIn) > 0 {
		predicates = append(predicates, filehistory.StorageSchemeIn(i.StorageSchemeIn...))
	}
	if len(i.StorageSchemeNotIn) > 0 {
		predicates = append(predicates, filehistory.StorageSchemeNotIn(i.StorageSchemeNotIn...))
	}
	if i.StorageSchemeGT != nil {
		predicates = append(predicates, filehistory.StorageSchemeGT(*i.StorageSchemeGT))
	}
	if i.StorageSchemeGTE != nil {
		predicates = append(predicates, filehistory.StorageSchemeGTE(*i.StorageSchemeGTE))
	}
	if i.StorageSchemeLT != nil {
		predicates = append(predicates, filehistory.StorageSchemeLT(*i.StorageSchemeLT))
	}
	if i.StorageSchemeLTE != nil {
		predicates = append(predicates, filehistory.StorageSchemeLTE(*i.StorageSchemeLTE))
	}
	if i.StorageSchemeContains != nil {
		predicates = append(predicates, filehistory.StorageSchemeContains(*i.StorageSchemeContains))
	}
	if i.StorageSchemeHasPrefix != nil {
		predicates = append(predicates, filehistory.StorageSchemeHasPrefix(*i.StorageSchemeHasPrefix))
	}
	if i.StorageSchemeHasSuffix != nil {
		predicates = append(predicates, filehistory.StorageSchemeHasSuffix(*i.StorageSchemeHasSuffix))
	}
	if i.StorageSchemeIsNil {
		predicates = append(predicates, filehistory.StorageSchemeIsNil())
	}
	if i.StorageSchemeNotNil {
		predicates = append(predicates, filehistory.StorageSchemeNotNil())
	}
	if i.StorageSchemeEqualFold != nil {
		predicates = append(predicates, filehistory.StorageSchemeEqualFold(*i.StorageSchemeEqualFold))
	}
	if i.StorageSchemeContainsFold != nil {
		predicates = append(predicates, filehistory.StorageSchemeContainsFold(*i.StorageSchemeContainsFold))
	}
	if i.StorageVolume != nil {
		predicates = append(predicates, filehistory.StorageVolumeEQ(*i.StorageVolume))
	}
	if i.StorageVolumeNEQ != nil {
		predicates = append(predicates, filehistory.StorageVolumeNEQ(*i.StorageVolumeNEQ))
	}
	if len(i.StorageVolumeIn) > 0 {
		predicates = append(predicates, filehistory.StorageVolumeIn(i.StorageVolumeIn...))
	}
	if len(i.StorageVolumeNotIn) > 0 {
		predicates = append(predicates, filehistory.StorageVolumeNotIn(i.StorageVolumeNotIn...))
	}
	if i.StorageVolumeGT != nil {
		predicates = append(predicates, filehistory.StorageVolumeGT(*i.StorageVolumeGT))
	}
	if i.StorageVolumeGTE != nil {
		predicates = append(predicates, filehistory.StorageVolumeGTE(*i.StorageVolumeGTE))
	}
	if i.StorageVolumeLT != nil {
		predicates = append(predicates, filehistory.StorageVolumeLT(*i.StorageVolumeLT))
	}
	if i.StorageVolumeLTE != nil {
		predicates = append(predicates, filehistory.StorageVolumeLTE(*i.StorageVolumeLTE))
	}
	if i.StorageVolumeContains != nil {
		predicates = append(predicates, filehistory.StorageVolumeContains(*i.StorageVolumeContains))
	}
	if i.StorageVolumeHasPrefix != nil {
		predicates = append(predicates, filehistory.StorageVolumeHasPrefix(*i.StorageVolumeHasPrefix))
	}
	if i.StorageVolumeHasSuffix != nil {
		predicates = append(predicates, filehistory.StorageVolumeHasSuffix(*i.StorageVolumeHasSuffix))
	}
	if i.StorageVolumeIsNil {
		predicates = append(predicates, filehistory.StorageVolumeIsNil())
	}
	if i.StorageVolumeNotNil {
		predicates = append(predicates, filehistory.StorageVolumeNotNil())
	}
	if i.StorageVolumeEqualFold != nil {
		predicates = append(predicates, filehistory.StorageVolumeEqualFold(*i.StorageVolumeEqualFold))
	}
	if i.StorageVolumeContainsFold != nil {
		predicates = append(predicates, filehistory.StorageVolumeContainsFold(*i.StorageVolumeContainsFold))
	}
	if i.StoragePath != nil {
		predicates = append(predicates, filehistory.StoragePathEQ(*i.StoragePath))
	}
	if i.StoragePathNEQ != nil {
		predicates = append(predicates, filehistory.StoragePathNEQ(*i.StoragePathNEQ))
	}
	if len(i.StoragePathIn) > 0 {
		predicates = append(predicates, filehistory.StoragePathIn(i.StoragePathIn...))
	}
	if len(i.StoragePathNotIn) > 0 {
		predicates = append(predicates, filehistory.StoragePathNotIn(i.StoragePathNotIn...))
	}
	if i.StoragePathGT != nil {
		predicates = append(predicates, filehistory.StoragePathGT(*i.StoragePathGT))
	}
	if i.StoragePathGTE != nil {
		predicates = append(predicates, filehistory.StoragePathGTE(*i.StoragePathGTE))
	}
	if i.StoragePathLT != nil {
		predicates = append(predicates, filehistory.StoragePathLT(*i.StoragePathLT))
	}
	if i.StoragePathLTE != nil {
		predicates = append(predicates, filehistory.StoragePathLTE(*i.StoragePathLTE))
	}
	if i.StoragePathContains != nil {
		predicates = append(predicates, filehistory.StoragePathContains(*i.StoragePathContains))
	}
	if i.StoragePathHasPrefix != nil {
		predicates = append(predicates, filehistory.StoragePathHasPrefix(*i.StoragePathHasPrefix))
	}
	if i.StoragePathHasSuffix != nil {
		predicates = append(predicates, filehistory.StoragePathHasSuffix(*i.StoragePathHasSuffix))
	}
	if i.StoragePathIsNil {
		predicates = append(predicates, filehistory.StoragePathIsNil())
	}
	if i.StoragePathNotNil {
		predicates = append(predicates, filehistory.StoragePathNotNil())
	}
	if i.StoragePathEqualFold != nil {
		predicates = append(predicates, filehistory.StoragePathEqualFold(*i.StoragePathEqualFold))
	}
	if i.StoragePathContainsFold != nil {
		predicates = append(predicates, filehistory.StoragePathContainsFold(*i.StoragePathContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFileHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return filehistory.And(predicates...), nil
	}
}

// GroupWhereInput represents a where input for filtering Group queries.
type GroupWhereInput struct {
	Predicates []predicate.Group  `json:"-"`
	Not        *GroupWhereInput   `json:"not,omitempty"`
	Or         []*GroupWhereInput `json:"or,omitempty"`
	And        []*GroupWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "setting" edge predicates.
	HasSetting     *bool                     `json:"hasSetting,omitempty"`
	HasSettingWith []*GroupSettingWhereInput `json:"hasSettingWith,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`

	// "integrations" edge predicates.
	HasIntegrations     *bool                    `json:"hasIntegrations,omitempty"`
	HasIntegrationsWith []*IntegrationWhereInput `json:"hasIntegrationsWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`

	// "members" edge predicates.
	HasMembers     *bool                        `json:"hasMembers,omitempty"`
	HasMembersWith []*GroupMembershipWhereInput `json:"hasMembersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GroupWhereInput) AddPredicates(predicates ...predicate.Group) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GroupWhereInput filter on the GroupQuery builder.
func (i *GroupWhereInput) Filter(q *GroupQuery) (*GroupQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGroupWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGroupWhereInput is returned in case the GroupWhereInput is empty.
var ErrEmptyGroupWhereInput = errors.New("generated: empty predicate GroupWhereInput")

// P returns a predicate for filtering groups.
// An error is returned if the input is empty or invalid.
func (i *GroupWhereInput) P() (predicate.Group, error) {
	var predicates []predicate.Group
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, group.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Group, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, group.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Group, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, group.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, group.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, group.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, group.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, group.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, group.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, group.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, group.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, group.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, group.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, group.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, group.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, group.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, group.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, group.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, group.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, group.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, group.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, group.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, group.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, group.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, group.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, group.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, group.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, group.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, group.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, group.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, group.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, group.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, group.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, group.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, group.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, group.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, group.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, group.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, group.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, group.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, group.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, group.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, group.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, group.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, group.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, group.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, group.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, group.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, group.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, group.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, group.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, group.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, group.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, group.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, group.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, group.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, group.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, group.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, group.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, group.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, group.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, group.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, group.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, group.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, group.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, group.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, group.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, group.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, group.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, group.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, group.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, group.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, group.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, group.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, group.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, group.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, group.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, group.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, group.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, group.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, group.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, group.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, group.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, group.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, group.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, group.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, group.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, group.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, group.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, group.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, group.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, group.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, group.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, group.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, group.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, group.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, group.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, group.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, group.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, group.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, group.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, group.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, group.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, group.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, group.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, group.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, group.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, group.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, group.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, group.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, group.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, group.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, group.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, group.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, group.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, group.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, group.NameContainsFold(*i.NameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, group.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, group.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, group.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, group.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, group.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, group.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, group.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, group.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, group.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, group.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, group.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, group.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, group.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}

	if i.HasOwner != nil {
		p := group.HasOwner()
		if !*i.HasOwner {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasOwnerWith(with...))
	}
	if i.HasSetting != nil {
		p := group.HasSetting()
		if !*i.HasSetting {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSettingWith) > 0 {
		with := make([]predicate.GroupSetting, 0, len(i.HasSettingWith))
		for _, w := range i.HasSettingWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSettingWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasSettingWith(with...))
	}
	if i.HasUsers != nil {
		p := group.HasUsers()
		if !*i.HasUsers {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasUsersWith(with...))
	}
	if i.HasEvents != nil {
		p := group.HasEvents()
		if !*i.HasEvents {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasEventsWith(with...))
	}
	if i.HasIntegrations != nil {
		p := group.HasIntegrations()
		if !*i.HasIntegrations {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIntegrationsWith) > 0 {
		with := make([]predicate.Integration, 0, len(i.HasIntegrationsWith))
		for _, w := range i.HasIntegrationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIntegrationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasIntegrationsWith(with...))
	}
	if i.HasFiles != nil {
		p := group.HasFiles()
		if !*i.HasFiles {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasFilesWith(with...))
	}
	if i.HasMembers != nil {
		p := group.HasMembers()
		if !*i.HasMembers {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMembersWith) > 0 {
		with := make([]predicate.GroupMembership, 0, len(i.HasMembersWith))
		for _, w := range i.HasMembersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMembersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasMembersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGroupWhereInput
	case 1:
		return predicates[0], nil
	default:
		return group.And(predicates...), nil
	}
}

// GroupHistoryWhereInput represents a where input for filtering GroupHistory queries.
type GroupHistoryWhereInput struct {
	Predicates []predicate.GroupHistory  `json:"-"`
	Not        *GroupHistoryWhereInput   `json:"not,omitempty"`
	Or         []*GroupHistoryWhereInput `json:"or,omitempty"`
	And        []*GroupHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GroupHistoryWhereInput) AddPredicates(predicates ...predicate.GroupHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GroupHistoryWhereInput filter on the GroupHistoryQuery builder.
func (i *GroupHistoryWhereInput) Filter(q *GroupHistoryQuery) (*GroupHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGroupHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGroupHistoryWhereInput is returned in case the GroupHistoryWhereInput is empty.
var ErrEmptyGroupHistoryWhereInput = errors.New("generated: empty predicate GroupHistoryWhereInput")

// P returns a predicate for filtering grouphistories.
// An error is returned if the input is empty or invalid.
func (i *GroupHistoryWhereInput) P() (predicate.GroupHistory, error) {
	var predicates []predicate.GroupHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, grouphistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GroupHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, grouphistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GroupHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, grouphistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, grouphistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, grouphistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, grouphistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, grouphistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, grouphistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, grouphistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, grouphistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, grouphistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, grouphistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, grouphistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, grouphistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, grouphistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, grouphistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, grouphistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, grouphistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, grouphistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, grouphistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, grouphistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, grouphistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, grouphistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, grouphistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, grouphistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, grouphistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, grouphistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, grouphistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, grouphistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, grouphistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, grouphistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, grouphistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, grouphistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, grouphistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, grouphistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, grouphistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, grouphistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, grouphistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, grouphistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, grouphistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, grouphistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, grouphistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, grouphistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, grouphistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, grouphistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, grouphistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, grouphistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, grouphistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, grouphistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, grouphistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, grouphistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, grouphistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, grouphistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, grouphistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, grouphistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, grouphistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, grouphistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, grouphistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, grouphistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, grouphistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, grouphistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, grouphistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, grouphistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, grouphistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, grouphistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, grouphistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, grouphistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, grouphistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, grouphistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, grouphistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, grouphistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, grouphistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, grouphistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, grouphistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, grouphistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, grouphistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, grouphistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, grouphistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, grouphistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, grouphistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, grouphistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, grouphistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, grouphistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, grouphistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, grouphistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, grouphistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, grouphistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, grouphistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, grouphistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, grouphistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, grouphistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, grouphistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, grouphistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, grouphistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, grouphistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, grouphistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, grouphistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, grouphistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, grouphistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, grouphistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, grouphistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, grouphistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, grouphistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, grouphistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, grouphistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, grouphistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, grouphistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, grouphistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, grouphistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, grouphistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, grouphistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, grouphistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, grouphistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, grouphistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, grouphistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, grouphistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, grouphistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, grouphistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, grouphistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, grouphistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, grouphistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, grouphistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, grouphistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, grouphistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, grouphistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, grouphistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, grouphistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, grouphistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, grouphistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, grouphistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, grouphistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, grouphistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, grouphistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, grouphistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, grouphistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, grouphistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, grouphistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, grouphistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, grouphistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, grouphistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, grouphistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, grouphistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, grouphistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, grouphistory.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, grouphistory.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, grouphistory.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, grouphistory.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, grouphistory.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, grouphistory.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, grouphistory.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, grouphistory.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, grouphistory.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, grouphistory.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, grouphistory.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, grouphistory.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, grouphistory.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGroupHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return grouphistory.And(predicates...), nil
	}
}

// GroupMembershipWhereInput represents a where input for filtering GroupMembership queries.
type GroupMembershipWhereInput struct {
	Predicates []predicate.GroupMembership  `json:"-"`
	Not        *GroupMembershipWhereInput   `json:"not,omitempty"`
	Or         []*GroupMembershipWhereInput `json:"or,omitempty"`
	And        []*GroupMembershipWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "role" field predicates.
	Role      *enums.Role  `json:"role,omitempty"`
	RoleNEQ   *enums.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []enums.Role `json:"roleIn,omitempty"`
	RoleNotIn []enums.Role `json:"roleNotIn,omitempty"`

	// "group_id" field predicates.
	GroupID             *string  `json:"groupID,omitempty"`
	GroupIDNEQ          *string  `json:"groupIDNEQ,omitempty"`
	GroupIDIn           []string `json:"groupIDIn,omitempty"`
	GroupIDNotIn        []string `json:"groupIDNotIn,omitempty"`
	GroupIDGT           *string  `json:"groupIDGT,omitempty"`
	GroupIDGTE          *string  `json:"groupIDGTE,omitempty"`
	GroupIDLT           *string  `json:"groupIDLT,omitempty"`
	GroupIDLTE          *string  `json:"groupIDLTE,omitempty"`
	GroupIDContains     *string  `json:"groupIDContains,omitempty"`
	GroupIDHasPrefix    *string  `json:"groupIDHasPrefix,omitempty"`
	GroupIDHasSuffix    *string  `json:"groupIDHasSuffix,omitempty"`
	GroupIDEqualFold    *string  `json:"groupIDEqualFold,omitempty"`
	GroupIDContainsFold *string  `json:"groupIDContainsFold,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`

	// "group" edge predicates.
	HasGroup     *bool              `json:"hasGroup,omitempty"`
	HasGroupWith []*GroupWhereInput `json:"hasGroupWith,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GroupMembershipWhereInput) AddPredicates(predicates ...predicate.GroupMembership) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GroupMembershipWhereInput filter on the GroupMembershipQuery builder.
func (i *GroupMembershipWhereInput) Filter(q *GroupMembershipQuery) (*GroupMembershipQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGroupMembershipWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGroupMembershipWhereInput is returned in case the GroupMembershipWhereInput is empty.
var ErrEmptyGroupMembershipWhereInput = errors.New("generated: empty predicate GroupMembershipWhereInput")

// P returns a predicate for filtering groupmemberships.
// An error is returned if the input is empty or invalid.
func (i *GroupMembershipWhereInput) P() (predicate.GroupMembership, error) {
	var predicates []predicate.GroupMembership
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, groupmembership.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GroupMembership, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, groupmembership.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GroupMembership, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, groupmembership.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, groupmembership.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, groupmembership.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, groupmembership.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, groupmembership.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, groupmembership.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, groupmembership.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, groupmembership.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, groupmembership.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, groupmembership.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, groupmembership.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, groupmembership.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, groupmembership.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, groupmembership.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, groupmembership.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, groupmembership.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, groupmembership.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, groupmembership.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, groupmembership.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, groupmembership.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, groupmembership.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, groupmembership.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, groupmembership.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, groupmembership.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, groupmembership.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, groupmembership.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, groupmembership.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, groupmembership.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, groupmembership.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, groupmembership.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, groupmembership.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, groupmembership.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, groupmembership.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, groupmembership.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, groupmembership.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, groupmembership.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, groupmembership.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, groupmembership.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, groupmembership.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, groupmembership.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, groupmembership.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, groupmembership.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, groupmembership.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, groupmembership.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, groupmembership.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, groupmembership.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, groupmembership.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, groupmembership.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, groupmembership.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, groupmembership.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, groupmembership.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, groupmembership.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, groupmembership.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, groupmembership.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, groupmembership.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, groupmembership.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, groupmembership.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, groupmembership.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, groupmembership.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, groupmembership.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, groupmembership.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, groupmembership.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, groupmembership.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, groupmembership.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, groupmembership.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, groupmembership.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, groupmembership.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, groupmembership.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, groupmembership.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, groupmembership.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, groupmembership.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, groupmembership.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, groupmembership.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, groupmembership.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, groupmembership.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, groupmembership.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, groupmembership.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, groupmembership.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, groupmembership.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, groupmembership.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, groupmembership.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, groupmembership.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, groupmembership.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, groupmembership.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, groupmembership.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, groupmembership.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, groupmembership.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, groupmembership.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, groupmembership.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, groupmembership.RoleNotIn(i.RoleNotIn...))
	}
	if i.GroupID != nil {
		predicates = append(predicates, groupmembership.GroupIDEQ(*i.GroupID))
	}
	if i.GroupIDNEQ != nil {
		predicates = append(predicates, groupmembership.GroupIDNEQ(*i.GroupIDNEQ))
	}
	if len(i.GroupIDIn) > 0 {
		predicates = append(predicates, groupmembership.GroupIDIn(i.GroupIDIn...))
	}
	if len(i.GroupIDNotIn) > 0 {
		predicates = append(predicates, groupmembership.GroupIDNotIn(i.GroupIDNotIn...))
	}
	if i.GroupIDGT != nil {
		predicates = append(predicates, groupmembership.GroupIDGT(*i.GroupIDGT))
	}
	if i.GroupIDGTE != nil {
		predicates = append(predicates, groupmembership.GroupIDGTE(*i.GroupIDGTE))
	}
	if i.GroupIDLT != nil {
		predicates = append(predicates, groupmembership.GroupIDLT(*i.GroupIDLT))
	}
	if i.GroupIDLTE != nil {
		predicates = append(predicates, groupmembership.GroupIDLTE(*i.GroupIDLTE))
	}
	if i.GroupIDContains != nil {
		predicates = append(predicates, groupmembership.GroupIDContains(*i.GroupIDContains))
	}
	if i.GroupIDHasPrefix != nil {
		predicates = append(predicates, groupmembership.GroupIDHasPrefix(*i.GroupIDHasPrefix))
	}
	if i.GroupIDHasSuffix != nil {
		predicates = append(predicates, groupmembership.GroupIDHasSuffix(*i.GroupIDHasSuffix))
	}
	if i.GroupIDEqualFold != nil {
		predicates = append(predicates, groupmembership.GroupIDEqualFold(*i.GroupIDEqualFold))
	}
	if i.GroupIDContainsFold != nil {
		predicates = append(predicates, groupmembership.GroupIDContainsFold(*i.GroupIDContainsFold))
	}
	if i.UserID != nil {
		predicates = append(predicates, groupmembership.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, groupmembership.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, groupmembership.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, groupmembership.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, groupmembership.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, groupmembership.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, groupmembership.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, groupmembership.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, groupmembership.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, groupmembership.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, groupmembership.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, groupmembership.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, groupmembership.UserIDContainsFold(*i.UserIDContainsFold))
	}

	if i.HasGroup != nil {
		p := groupmembership.HasGroup()
		if !*i.HasGroup {
			p = groupmembership.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupWith))
		for _, w := range i.HasGroupWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, groupmembership.HasGroupWith(with...))
	}
	if i.HasUser != nil {
		p := groupmembership.HasUser()
		if !*i.HasUser {
			p = groupmembership.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, groupmembership.HasUserWith(with...))
	}
	if i.HasEvents != nil {
		p := groupmembership.HasEvents()
		if !*i.HasEvents {
			p = groupmembership.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, groupmembership.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGroupMembershipWhereInput
	case 1:
		return predicates[0], nil
	default:
		return groupmembership.And(predicates...), nil
	}
}

// GroupMembershipHistoryWhereInput represents a where input for filtering GroupMembershipHistory queries.
type GroupMembershipHistoryWhereInput struct {
	Predicates []predicate.GroupMembershipHistory  `json:"-"`
	Not        *GroupMembershipHistoryWhereInput   `json:"not,omitempty"`
	Or         []*GroupMembershipHistoryWhereInput `json:"or,omitempty"`
	And        []*GroupMembershipHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "role" field predicates.
	Role      *enums.Role  `json:"role,omitempty"`
	RoleNEQ   *enums.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []enums.Role `json:"roleIn,omitempty"`
	RoleNotIn []enums.Role `json:"roleNotIn,omitempty"`

	// "group_id" field predicates.
	GroupID             *string  `json:"groupID,omitempty"`
	GroupIDNEQ          *string  `json:"groupIDNEQ,omitempty"`
	GroupIDIn           []string `json:"groupIDIn,omitempty"`
	GroupIDNotIn        []string `json:"groupIDNotIn,omitempty"`
	GroupIDGT           *string  `json:"groupIDGT,omitempty"`
	GroupIDGTE          *string  `json:"groupIDGTE,omitempty"`
	GroupIDLT           *string  `json:"groupIDLT,omitempty"`
	GroupIDLTE          *string  `json:"groupIDLTE,omitempty"`
	GroupIDContains     *string  `json:"groupIDContains,omitempty"`
	GroupIDHasPrefix    *string  `json:"groupIDHasPrefix,omitempty"`
	GroupIDHasSuffix    *string  `json:"groupIDHasSuffix,omitempty"`
	GroupIDEqualFold    *string  `json:"groupIDEqualFold,omitempty"`
	GroupIDContainsFold *string  `json:"groupIDContainsFold,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GroupMembershipHistoryWhereInput) AddPredicates(predicates ...predicate.GroupMembershipHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GroupMembershipHistoryWhereInput filter on the GroupMembershipHistoryQuery builder.
func (i *GroupMembershipHistoryWhereInput) Filter(q *GroupMembershipHistoryQuery) (*GroupMembershipHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGroupMembershipHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGroupMembershipHistoryWhereInput is returned in case the GroupMembershipHistoryWhereInput is empty.
var ErrEmptyGroupMembershipHistoryWhereInput = errors.New("generated: empty predicate GroupMembershipHistoryWhereInput")

// P returns a predicate for filtering groupmembershiphistories.
// An error is returned if the input is empty or invalid.
func (i *GroupMembershipHistoryWhereInput) P() (predicate.GroupMembershipHistory, error) {
	var predicates []predicate.GroupMembershipHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, groupmembershiphistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GroupMembershipHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, groupmembershiphistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GroupMembershipHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, groupmembershiphistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, groupmembershiphistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, groupmembershiphistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, groupmembershiphistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, groupmembershiphistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, groupmembershiphistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, groupmembershiphistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, groupmembershiphistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, groupmembershiphistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, groupmembershiphistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, groupmembershiphistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, groupmembershiphistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, groupmembershiphistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, groupmembershiphistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, groupmembershiphistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, groupmembershiphistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, groupmembershiphistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, groupmembershiphistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, groupmembershiphistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, groupmembershiphistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, groupmembershiphistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, groupmembershiphistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, groupmembershiphistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, groupmembershiphistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, groupmembershiphistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, groupmembershiphistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, groupmembershiphistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, groupmembershiphistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, groupmembershiphistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, groupmembershiphistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, groupmembershiphistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, groupmembershiphistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, groupmembershiphistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, groupmembershiphistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, groupmembershiphistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, groupmembershiphistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, groupmembershiphistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, groupmembershiphistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, groupmembershiphistory.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.RoleNotIn(i.RoleNotIn...))
	}
	if i.GroupID != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDEQ(*i.GroupID))
	}
	if i.GroupIDNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDNEQ(*i.GroupIDNEQ))
	}
	if len(i.GroupIDIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.GroupIDIn(i.GroupIDIn...))
	}
	if len(i.GroupIDNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.GroupIDNotIn(i.GroupIDNotIn...))
	}
	if i.GroupIDGT != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDGT(*i.GroupIDGT))
	}
	if i.GroupIDGTE != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDGTE(*i.GroupIDGTE))
	}
	if i.GroupIDLT != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDLT(*i.GroupIDLT))
	}
	if i.GroupIDLTE != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDLTE(*i.GroupIDLTE))
	}
	if i.GroupIDContains != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDContains(*i.GroupIDContains))
	}
	if i.GroupIDHasPrefix != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDHasPrefix(*i.GroupIDHasPrefix))
	}
	if i.GroupIDHasSuffix != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDHasSuffix(*i.GroupIDHasSuffix))
	}
	if i.GroupIDEqualFold != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDEqualFold(*i.GroupIDEqualFold))
	}
	if i.GroupIDContainsFold != nil {
		predicates = append(predicates, groupmembershiphistory.GroupIDContainsFold(*i.GroupIDContainsFold))
	}
	if i.UserID != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, groupmembershiphistory.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, groupmembershiphistory.UserIDContainsFold(*i.UserIDContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGroupMembershipHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return groupmembershiphistory.And(predicates...), nil
	}
}

// GroupSettingWhereInput represents a where input for filtering GroupSetting queries.
type GroupSettingWhereInput struct {
	Predicates []predicate.GroupSetting  `json:"-"`
	Not        *GroupSettingWhereInput   `json:"not,omitempty"`
	Or         []*GroupSettingWhereInput `json:"or,omitempty"`
	And        []*GroupSettingWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "visibility" field predicates.
	Visibility      *enums.Visibility  `json:"visibility,omitempty"`
	VisibilityNEQ   *enums.Visibility  `json:"visibilityNEQ,omitempty"`
	VisibilityIn    []enums.Visibility `json:"visibilityIn,omitempty"`
	VisibilityNotIn []enums.Visibility `json:"visibilityNotIn,omitempty"`

	// "join_policy" field predicates.
	JoinPolicy      *enums.JoinPolicy  `json:"joinPolicy,omitempty"`
	JoinPolicyNEQ   *enums.JoinPolicy  `json:"joinPolicyNEQ,omitempty"`
	JoinPolicyIn    []enums.JoinPolicy `json:"joinPolicyIn,omitempty"`
	JoinPolicyNotIn []enums.JoinPolicy `json:"joinPolicyNotIn,omitempty"`

	// "sync_to_slack" field predicates.
	SyncToSlack       *bool `json:"syncToSlack,omitempty"`
	SyncToSlackNEQ    *bool `json:"syncToSlackNEQ,omitempty"`
	SyncToSlackIsNil  bool  `json:"syncToSlackIsNil,omitempty"`
	SyncToSlackNotNil bool  `json:"syncToSlackNotNil,omitempty"`

	// "sync_to_github" field predicates.
	SyncToGithub       *bool `json:"syncToGithub,omitempty"`
	SyncToGithubNEQ    *bool `json:"syncToGithubNEQ,omitempty"`
	SyncToGithubIsNil  bool  `json:"syncToGithubIsNil,omitempty"`
	SyncToGithubNotNil bool  `json:"syncToGithubNotNil,omitempty"`

	// "group_id" field predicates.
	GroupID             *string  `json:"groupID,omitempty"`
	GroupIDNEQ          *string  `json:"groupIDNEQ,omitempty"`
	GroupIDIn           []string `json:"groupIDIn,omitempty"`
	GroupIDNotIn        []string `json:"groupIDNotIn,omitempty"`
	GroupIDGT           *string  `json:"groupIDGT,omitempty"`
	GroupIDGTE          *string  `json:"groupIDGTE,omitempty"`
	GroupIDLT           *string  `json:"groupIDLT,omitempty"`
	GroupIDLTE          *string  `json:"groupIDLTE,omitempty"`
	GroupIDContains     *string  `json:"groupIDContains,omitempty"`
	GroupIDHasPrefix    *string  `json:"groupIDHasPrefix,omitempty"`
	GroupIDHasSuffix    *string  `json:"groupIDHasSuffix,omitempty"`
	GroupIDIsNil        bool     `json:"groupIDIsNil,omitempty"`
	GroupIDNotNil       bool     `json:"groupIDNotNil,omitempty"`
	GroupIDEqualFold    *string  `json:"groupIDEqualFold,omitempty"`
	GroupIDContainsFold *string  `json:"groupIDContainsFold,omitempty"`

	// "group" edge predicates.
	HasGroup     *bool              `json:"hasGroup,omitempty"`
	HasGroupWith []*GroupWhereInput `json:"hasGroupWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GroupSettingWhereInput) AddPredicates(predicates ...predicate.GroupSetting) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GroupSettingWhereInput filter on the GroupSettingQuery builder.
func (i *GroupSettingWhereInput) Filter(q *GroupSettingQuery) (*GroupSettingQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGroupSettingWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGroupSettingWhereInput is returned in case the GroupSettingWhereInput is empty.
var ErrEmptyGroupSettingWhereInput = errors.New("generated: empty predicate GroupSettingWhereInput")

// P returns a predicate for filtering groupsettings.
// An error is returned if the input is empty or invalid.
func (i *GroupSettingWhereInput) P() (predicate.GroupSetting, error) {
	var predicates []predicate.GroupSetting
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, groupsetting.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GroupSetting, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, groupsetting.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GroupSetting, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, groupsetting.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, groupsetting.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, groupsetting.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, groupsetting.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, groupsetting.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, groupsetting.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, groupsetting.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, groupsetting.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, groupsetting.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, groupsetting.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, groupsetting.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, groupsetting.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, groupsetting.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, groupsetting.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, groupsetting.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, groupsetting.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, groupsetting.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, groupsetting.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, groupsetting.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, groupsetting.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, groupsetting.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, groupsetting.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, groupsetting.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, groupsetting.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, groupsetting.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, groupsetting.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, groupsetting.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, groupsetting.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, groupsetting.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, groupsetting.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, groupsetting.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, groupsetting.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, groupsetting.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, groupsetting.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, groupsetting.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, groupsetting.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, groupsetting.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, groupsetting.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, groupsetting.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, groupsetting.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, groupsetting.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, groupsetting.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, groupsetting.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, groupsetting.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, groupsetting.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, groupsetting.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, groupsetting.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, groupsetting.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, groupsetting.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, groupsetting.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, groupsetting.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, groupsetting.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, groupsetting.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, groupsetting.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, groupsetting.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, groupsetting.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, groupsetting.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, groupsetting.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, groupsetting.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, groupsetting.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, groupsetting.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, groupsetting.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, groupsetting.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, groupsetting.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, groupsetting.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, groupsetting.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, groupsetting.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, groupsetting.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, groupsetting.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, groupsetting.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, groupsetting.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, groupsetting.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, groupsetting.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, groupsetting.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, groupsetting.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, groupsetting.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, groupsetting.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, groupsetting.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, groupsetting.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, groupsetting.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, groupsetting.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, groupsetting.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, groupsetting.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, groupsetting.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, groupsetting.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, groupsetting.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Visibility != nil {
		predicates = append(predicates, groupsetting.VisibilityEQ(*i.Visibility))
	}
	if i.VisibilityNEQ != nil {
		predicates = append(predicates, groupsetting.VisibilityNEQ(*i.VisibilityNEQ))
	}
	if len(i.VisibilityIn) > 0 {
		predicates = append(predicates, groupsetting.VisibilityIn(i.VisibilityIn...))
	}
	if len(i.VisibilityNotIn) > 0 {
		predicates = append(predicates, groupsetting.VisibilityNotIn(i.VisibilityNotIn...))
	}
	if i.JoinPolicy != nil {
		predicates = append(predicates, groupsetting.JoinPolicyEQ(*i.JoinPolicy))
	}
	if i.JoinPolicyNEQ != nil {
		predicates = append(predicates, groupsetting.JoinPolicyNEQ(*i.JoinPolicyNEQ))
	}
	if len(i.JoinPolicyIn) > 0 {
		predicates = append(predicates, groupsetting.JoinPolicyIn(i.JoinPolicyIn...))
	}
	if len(i.JoinPolicyNotIn) > 0 {
		predicates = append(predicates, groupsetting.JoinPolicyNotIn(i.JoinPolicyNotIn...))
	}
	if i.SyncToSlack != nil {
		predicates = append(predicates, groupsetting.SyncToSlackEQ(*i.SyncToSlack))
	}
	if i.SyncToSlackNEQ != nil {
		predicates = append(predicates, groupsetting.SyncToSlackNEQ(*i.SyncToSlackNEQ))
	}
	if i.SyncToSlackIsNil {
		predicates = append(predicates, groupsetting.SyncToSlackIsNil())
	}
	if i.SyncToSlackNotNil {
		predicates = append(predicates, groupsetting.SyncToSlackNotNil())
	}
	if i.SyncToGithub != nil {
		predicates = append(predicates, groupsetting.SyncToGithubEQ(*i.SyncToGithub))
	}
	if i.SyncToGithubNEQ != nil {
		predicates = append(predicates, groupsetting.SyncToGithubNEQ(*i.SyncToGithubNEQ))
	}
	if i.SyncToGithubIsNil {
		predicates = append(predicates, groupsetting.SyncToGithubIsNil())
	}
	if i.SyncToGithubNotNil {
		predicates = append(predicates, groupsetting.SyncToGithubNotNil())
	}
	if i.GroupID != nil {
		predicates = append(predicates, groupsetting.GroupIDEQ(*i.GroupID))
	}
	if i.GroupIDNEQ != nil {
		predicates = append(predicates, groupsetting.GroupIDNEQ(*i.GroupIDNEQ))
	}
	if len(i.GroupIDIn) > 0 {
		predicates = append(predicates, groupsetting.GroupIDIn(i.GroupIDIn...))
	}
	if len(i.GroupIDNotIn) > 0 {
		predicates = append(predicates, groupsetting.GroupIDNotIn(i.GroupIDNotIn...))
	}
	if i.GroupIDGT != nil {
		predicates = append(predicates, groupsetting.GroupIDGT(*i.GroupIDGT))
	}
	if i.GroupIDGTE != nil {
		predicates = append(predicates, groupsetting.GroupIDGTE(*i.GroupIDGTE))
	}
	if i.GroupIDLT != nil {
		predicates = append(predicates, groupsetting.GroupIDLT(*i.GroupIDLT))
	}
	if i.GroupIDLTE != nil {
		predicates = append(predicates, groupsetting.GroupIDLTE(*i.GroupIDLTE))
	}
	if i.GroupIDContains != nil {
		predicates = append(predicates, groupsetting.GroupIDContains(*i.GroupIDContains))
	}
	if i.GroupIDHasPrefix != nil {
		predicates = append(predicates, groupsetting.GroupIDHasPrefix(*i.GroupIDHasPrefix))
	}
	if i.GroupIDHasSuffix != nil {
		predicates = append(predicates, groupsetting.GroupIDHasSuffix(*i.GroupIDHasSuffix))
	}
	if i.GroupIDIsNil {
		predicates = append(predicates, groupsetting.GroupIDIsNil())
	}
	if i.GroupIDNotNil {
		predicates = append(predicates, groupsetting.GroupIDNotNil())
	}
	if i.GroupIDEqualFold != nil {
		predicates = append(predicates, groupsetting.GroupIDEqualFold(*i.GroupIDEqualFold))
	}
	if i.GroupIDContainsFold != nil {
		predicates = append(predicates, groupsetting.GroupIDContainsFold(*i.GroupIDContainsFold))
	}

	if i.HasGroup != nil {
		p := groupsetting.HasGroup()
		if !*i.HasGroup {
			p = groupsetting.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupWith))
		for _, w := range i.HasGroupWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, groupsetting.HasGroupWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGroupSettingWhereInput
	case 1:
		return predicates[0], nil
	default:
		return groupsetting.And(predicates...), nil
	}
}

// GroupSettingHistoryWhereInput represents a where input for filtering GroupSettingHistory queries.
type GroupSettingHistoryWhereInput struct {
	Predicates []predicate.GroupSettingHistory  `json:"-"`
	Not        *GroupSettingHistoryWhereInput   `json:"not,omitempty"`
	Or         []*GroupSettingHistoryWhereInput `json:"or,omitempty"`
	And        []*GroupSettingHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "visibility" field predicates.
	Visibility      *enums.Visibility  `json:"visibility,omitempty"`
	VisibilityNEQ   *enums.Visibility  `json:"visibilityNEQ,omitempty"`
	VisibilityIn    []enums.Visibility `json:"visibilityIn,omitempty"`
	VisibilityNotIn []enums.Visibility `json:"visibilityNotIn,omitempty"`

	// "join_policy" field predicates.
	JoinPolicy      *enums.JoinPolicy  `json:"joinPolicy,omitempty"`
	JoinPolicyNEQ   *enums.JoinPolicy  `json:"joinPolicyNEQ,omitempty"`
	JoinPolicyIn    []enums.JoinPolicy `json:"joinPolicyIn,omitempty"`
	JoinPolicyNotIn []enums.JoinPolicy `json:"joinPolicyNotIn,omitempty"`

	// "sync_to_slack" field predicates.
	SyncToSlack       *bool `json:"syncToSlack,omitempty"`
	SyncToSlackNEQ    *bool `json:"syncToSlackNEQ,omitempty"`
	SyncToSlackIsNil  bool  `json:"syncToSlackIsNil,omitempty"`
	SyncToSlackNotNil bool  `json:"syncToSlackNotNil,omitempty"`

	// "sync_to_github" field predicates.
	SyncToGithub       *bool `json:"syncToGithub,omitempty"`
	SyncToGithubNEQ    *bool `json:"syncToGithubNEQ,omitempty"`
	SyncToGithubIsNil  bool  `json:"syncToGithubIsNil,omitempty"`
	SyncToGithubNotNil bool  `json:"syncToGithubNotNil,omitempty"`

	// "group_id" field predicates.
	GroupID             *string  `json:"groupID,omitempty"`
	GroupIDNEQ          *string  `json:"groupIDNEQ,omitempty"`
	GroupIDIn           []string `json:"groupIDIn,omitempty"`
	GroupIDNotIn        []string `json:"groupIDNotIn,omitempty"`
	GroupIDGT           *string  `json:"groupIDGT,omitempty"`
	GroupIDGTE          *string  `json:"groupIDGTE,omitempty"`
	GroupIDLT           *string  `json:"groupIDLT,omitempty"`
	GroupIDLTE          *string  `json:"groupIDLTE,omitempty"`
	GroupIDContains     *string  `json:"groupIDContains,omitempty"`
	GroupIDHasPrefix    *string  `json:"groupIDHasPrefix,omitempty"`
	GroupIDHasSuffix    *string  `json:"groupIDHasSuffix,omitempty"`
	GroupIDIsNil        bool     `json:"groupIDIsNil,omitempty"`
	GroupIDNotNil       bool     `json:"groupIDNotNil,omitempty"`
	GroupIDEqualFold    *string  `json:"groupIDEqualFold,omitempty"`
	GroupIDContainsFold *string  `json:"groupIDContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GroupSettingHistoryWhereInput) AddPredicates(predicates ...predicate.GroupSettingHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GroupSettingHistoryWhereInput filter on the GroupSettingHistoryQuery builder.
func (i *GroupSettingHistoryWhereInput) Filter(q *GroupSettingHistoryQuery) (*GroupSettingHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGroupSettingHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGroupSettingHistoryWhereInput is returned in case the GroupSettingHistoryWhereInput is empty.
var ErrEmptyGroupSettingHistoryWhereInput = errors.New("generated: empty predicate GroupSettingHistoryWhereInput")

// P returns a predicate for filtering groupsettinghistories.
// An error is returned if the input is empty or invalid.
func (i *GroupSettingHistoryWhereInput) P() (predicate.GroupSettingHistory, error) {
	var predicates []predicate.GroupSettingHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, groupsettinghistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GroupSettingHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, groupsettinghistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GroupSettingHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, groupsettinghistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, groupsettinghistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, groupsettinghistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, groupsettinghistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, groupsettinghistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, groupsettinghistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, groupsettinghistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, groupsettinghistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, groupsettinghistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, groupsettinghistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, groupsettinghistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, groupsettinghistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, groupsettinghistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, groupsettinghistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, groupsettinghistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, groupsettinghistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, groupsettinghistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, groupsettinghistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, groupsettinghistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, groupsettinghistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, groupsettinghistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, groupsettinghistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, groupsettinghistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, groupsettinghistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, groupsettinghistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, groupsettinghistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, groupsettinghistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, groupsettinghistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, groupsettinghistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, groupsettinghistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, groupsettinghistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, groupsettinghistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, groupsettinghistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, groupsettinghistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, groupsettinghistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, groupsettinghistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, groupsettinghistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, groupsettinghistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, groupsettinghistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, groupsettinghistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, groupsettinghistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, groupsettinghistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, groupsettinghistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, groupsettinghistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, groupsettinghistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, groupsettinghistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, groupsettinghistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, groupsettinghistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, groupsettinghistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, groupsettinghistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, groupsettinghistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, groupsettinghistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, groupsettinghistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, groupsettinghistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, groupsettinghistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, groupsettinghistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, groupsettinghistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, groupsettinghistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, groupsettinghistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, groupsettinghistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, groupsettinghistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, groupsettinghistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, groupsettinghistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, groupsettinghistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, groupsettinghistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, groupsettinghistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, groupsettinghistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Visibility != nil {
		predicates = append(predicates, groupsettinghistory.VisibilityEQ(*i.Visibility))
	}
	if i.VisibilityNEQ != nil {
		predicates = append(predicates, groupsettinghistory.VisibilityNEQ(*i.VisibilityNEQ))
	}
	if len(i.VisibilityIn) > 0 {
		predicates = append(predicates, groupsettinghistory.VisibilityIn(i.VisibilityIn...))
	}
	if len(i.VisibilityNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.VisibilityNotIn(i.VisibilityNotIn...))
	}
	if i.JoinPolicy != nil {
		predicates = append(predicates, groupsettinghistory.JoinPolicyEQ(*i.JoinPolicy))
	}
	if i.JoinPolicyNEQ != nil {
		predicates = append(predicates, groupsettinghistory.JoinPolicyNEQ(*i.JoinPolicyNEQ))
	}
	if len(i.JoinPolicyIn) > 0 {
		predicates = append(predicates, groupsettinghistory.JoinPolicyIn(i.JoinPolicyIn...))
	}
	if len(i.JoinPolicyNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.JoinPolicyNotIn(i.JoinPolicyNotIn...))
	}
	if i.SyncToSlack != nil {
		predicates = append(predicates, groupsettinghistory.SyncToSlackEQ(*i.SyncToSlack))
	}
	if i.SyncToSlackNEQ != nil {
		predicates = append(predicates, groupsettinghistory.SyncToSlackNEQ(*i.SyncToSlackNEQ))
	}
	if i.SyncToSlackIsNil {
		predicates = append(predicates, groupsettinghistory.SyncToSlackIsNil())
	}
	if i.SyncToSlackNotNil {
		predicates = append(predicates, groupsettinghistory.SyncToSlackNotNil())
	}
	if i.SyncToGithub != nil {
		predicates = append(predicates, groupsettinghistory.SyncToGithubEQ(*i.SyncToGithub))
	}
	if i.SyncToGithubNEQ != nil {
		predicates = append(predicates, groupsettinghistory.SyncToGithubNEQ(*i.SyncToGithubNEQ))
	}
	if i.SyncToGithubIsNil {
		predicates = append(predicates, groupsettinghistory.SyncToGithubIsNil())
	}
	if i.SyncToGithubNotNil {
		predicates = append(predicates, groupsettinghistory.SyncToGithubNotNil())
	}
	if i.GroupID != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDEQ(*i.GroupID))
	}
	if i.GroupIDNEQ != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDNEQ(*i.GroupIDNEQ))
	}
	if len(i.GroupIDIn) > 0 {
		predicates = append(predicates, groupsettinghistory.GroupIDIn(i.GroupIDIn...))
	}
	if len(i.GroupIDNotIn) > 0 {
		predicates = append(predicates, groupsettinghistory.GroupIDNotIn(i.GroupIDNotIn...))
	}
	if i.GroupIDGT != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDGT(*i.GroupIDGT))
	}
	if i.GroupIDGTE != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDGTE(*i.GroupIDGTE))
	}
	if i.GroupIDLT != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDLT(*i.GroupIDLT))
	}
	if i.GroupIDLTE != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDLTE(*i.GroupIDLTE))
	}
	if i.GroupIDContains != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDContains(*i.GroupIDContains))
	}
	if i.GroupIDHasPrefix != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDHasPrefix(*i.GroupIDHasPrefix))
	}
	if i.GroupIDHasSuffix != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDHasSuffix(*i.GroupIDHasSuffix))
	}
	if i.GroupIDIsNil {
		predicates = append(predicates, groupsettinghistory.GroupIDIsNil())
	}
	if i.GroupIDNotNil {
		predicates = append(predicates, groupsettinghistory.GroupIDNotNil())
	}
	if i.GroupIDEqualFold != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDEqualFold(*i.GroupIDEqualFold))
	}
	if i.GroupIDContainsFold != nil {
		predicates = append(predicates, groupsettinghistory.GroupIDContainsFold(*i.GroupIDContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGroupSettingHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return groupsettinghistory.And(predicates...), nil
	}
}

// HushWhereInput represents a where input for filtering Hush queries.
type HushWhereInput struct {
	Predicates []predicate.Hush  `json:"-"`
	Not        *HushWhereInput   `json:"not,omitempty"`
	Or         []*HushWhereInput `json:"or,omitempty"`
	And        []*HushWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "kind" field predicates.
	Kind             *string  `json:"kind,omitempty"`
	KindNEQ          *string  `json:"kindNEQ,omitempty"`
	KindIn           []string `json:"kindIn,omitempty"`
	KindNotIn        []string `json:"kindNotIn,omitempty"`
	KindGT           *string  `json:"kindGT,omitempty"`
	KindGTE          *string  `json:"kindGTE,omitempty"`
	KindLT           *string  `json:"kindLT,omitempty"`
	KindLTE          *string  `json:"kindLTE,omitempty"`
	KindContains     *string  `json:"kindContains,omitempty"`
	KindHasPrefix    *string  `json:"kindHasPrefix,omitempty"`
	KindHasSuffix    *string  `json:"kindHasSuffix,omitempty"`
	KindIsNil        bool     `json:"kindIsNil,omitempty"`
	KindNotNil       bool     `json:"kindNotNil,omitempty"`
	KindEqualFold    *string  `json:"kindEqualFold,omitempty"`
	KindContainsFold *string  `json:"kindContainsFold,omitempty"`

	// "secret_name" field predicates.
	SecretName             *string  `json:"secretName,omitempty"`
	SecretNameNEQ          *string  `json:"secretNameNEQ,omitempty"`
	SecretNameIn           []string `json:"secretNameIn,omitempty"`
	SecretNameNotIn        []string `json:"secretNameNotIn,omitempty"`
	SecretNameGT           *string  `json:"secretNameGT,omitempty"`
	SecretNameGTE          *string  `json:"secretNameGTE,omitempty"`
	SecretNameLT           *string  `json:"secretNameLT,omitempty"`
	SecretNameLTE          *string  `json:"secretNameLTE,omitempty"`
	SecretNameContains     *string  `json:"secretNameContains,omitempty"`
	SecretNameHasPrefix    *string  `json:"secretNameHasPrefix,omitempty"`
	SecretNameHasSuffix    *string  `json:"secretNameHasSuffix,omitempty"`
	SecretNameIsNil        bool     `json:"secretNameIsNil,omitempty"`
	SecretNameNotNil       bool     `json:"secretNameNotNil,omitempty"`
	SecretNameEqualFold    *string  `json:"secretNameEqualFold,omitempty"`
	SecretNameContainsFold *string  `json:"secretNameContainsFold,omitempty"`

	// "integrations" edge predicates.
	HasIntegrations     *bool                    `json:"hasIntegrations,omitempty"`
	HasIntegrationsWith []*IntegrationWhereInput `json:"hasIntegrationsWith,omitempty"`

	// "organization" edge predicates.
	HasOrganization     *bool                     `json:"hasOrganization,omitempty"`
	HasOrganizationWith []*OrganizationWhereInput `json:"hasOrganizationWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *HushWhereInput) AddPredicates(predicates ...predicate.Hush) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the HushWhereInput filter on the HushQuery builder.
func (i *HushWhereInput) Filter(q *HushQuery) (*HushQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyHushWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyHushWhereInput is returned in case the HushWhereInput is empty.
var ErrEmptyHushWhereInput = errors.New("generated: empty predicate HushWhereInput")

// P returns a predicate for filtering hushes.
// An error is returned if the input is empty or invalid.
func (i *HushWhereInput) P() (predicate.Hush, error) {
	var predicates []predicate.Hush
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, hush.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Hush, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, hush.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Hush, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, hush.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, hush.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, hush.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, hush.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, hush.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, hush.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, hush.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, hush.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, hush.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, hush.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, hush.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, hush.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, hush.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, hush.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, hush.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, hush.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, hush.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, hush.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, hush.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, hush.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, hush.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, hush.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, hush.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, hush.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, hush.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, hush.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, hush.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, hush.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, hush.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, hush.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, hush.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, hush.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, hush.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, hush.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, hush.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, hush.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, hush.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, hush.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, hush.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, hush.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, hush.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, hush.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, hush.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, hush.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, hush.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, hush.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, hush.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, hush.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, hush.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, hush.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, hush.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, hush.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, hush.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, hush.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, hush.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, hush.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, hush.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, hush.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, hush.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, hush.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, hush.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, hush.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, hush.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, hush.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, hush.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, hush.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, hush.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, hush.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, hush.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, hush.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, hush.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, hush.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, hush.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, hush.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, hush.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, hush.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, hush.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, hush.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, hush.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, hush.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, hush.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, hush.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, hush.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, hush.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, hush.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, hush.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, hush.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, hush.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, hush.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, hush.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, hush.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, hush.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, hush.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, hush.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, hush.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, hush.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, hush.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, hush.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, hush.NameContainsFold(*i.NameContainsFold))
	}
	if i.Kind != nil {
		predicates = append(predicates, hush.KindEQ(*i.Kind))
	}
	if i.KindNEQ != nil {
		predicates = append(predicates, hush.KindNEQ(*i.KindNEQ))
	}
	if len(i.KindIn) > 0 {
		predicates = append(predicates, hush.KindIn(i.KindIn...))
	}
	if len(i.KindNotIn) > 0 {
		predicates = append(predicates, hush.KindNotIn(i.KindNotIn...))
	}
	if i.KindGT != nil {
		predicates = append(predicates, hush.KindGT(*i.KindGT))
	}
	if i.KindGTE != nil {
		predicates = append(predicates, hush.KindGTE(*i.KindGTE))
	}
	if i.KindLT != nil {
		predicates = append(predicates, hush.KindLT(*i.KindLT))
	}
	if i.KindLTE != nil {
		predicates = append(predicates, hush.KindLTE(*i.KindLTE))
	}
	if i.KindContains != nil {
		predicates = append(predicates, hush.KindContains(*i.KindContains))
	}
	if i.KindHasPrefix != nil {
		predicates = append(predicates, hush.KindHasPrefix(*i.KindHasPrefix))
	}
	if i.KindHasSuffix != nil {
		predicates = append(predicates, hush.KindHasSuffix(*i.KindHasSuffix))
	}
	if i.KindIsNil {
		predicates = append(predicates, hush.KindIsNil())
	}
	if i.KindNotNil {
		predicates = append(predicates, hush.KindNotNil())
	}
	if i.KindEqualFold != nil {
		predicates = append(predicates, hush.KindEqualFold(*i.KindEqualFold))
	}
	if i.KindContainsFold != nil {
		predicates = append(predicates, hush.KindContainsFold(*i.KindContainsFold))
	}
	if i.SecretName != nil {
		predicates = append(predicates, hush.SecretNameEQ(*i.SecretName))
	}
	if i.SecretNameNEQ != nil {
		predicates = append(predicates, hush.SecretNameNEQ(*i.SecretNameNEQ))
	}
	if len(i.SecretNameIn) > 0 {
		predicates = append(predicates, hush.SecretNameIn(i.SecretNameIn...))
	}
	if len(i.SecretNameNotIn) > 0 {
		predicates = append(predicates, hush.SecretNameNotIn(i.SecretNameNotIn...))
	}
	if i.SecretNameGT != nil {
		predicates = append(predicates, hush.SecretNameGT(*i.SecretNameGT))
	}
	if i.SecretNameGTE != nil {
		predicates = append(predicates, hush.SecretNameGTE(*i.SecretNameGTE))
	}
	if i.SecretNameLT != nil {
		predicates = append(predicates, hush.SecretNameLT(*i.SecretNameLT))
	}
	if i.SecretNameLTE != nil {
		predicates = append(predicates, hush.SecretNameLTE(*i.SecretNameLTE))
	}
	if i.SecretNameContains != nil {
		predicates = append(predicates, hush.SecretNameContains(*i.SecretNameContains))
	}
	if i.SecretNameHasPrefix != nil {
		predicates = append(predicates, hush.SecretNameHasPrefix(*i.SecretNameHasPrefix))
	}
	if i.SecretNameHasSuffix != nil {
		predicates = append(predicates, hush.SecretNameHasSuffix(*i.SecretNameHasSuffix))
	}
	if i.SecretNameIsNil {
		predicates = append(predicates, hush.SecretNameIsNil())
	}
	if i.SecretNameNotNil {
		predicates = append(predicates, hush.SecretNameNotNil())
	}
	if i.SecretNameEqualFold != nil {
		predicates = append(predicates, hush.SecretNameEqualFold(*i.SecretNameEqualFold))
	}
	if i.SecretNameContainsFold != nil {
		predicates = append(predicates, hush.SecretNameContainsFold(*i.SecretNameContainsFold))
	}

	if i.HasIntegrations != nil {
		p := hush.HasIntegrations()
		if !*i.HasIntegrations {
			p = hush.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIntegrationsWith) > 0 {
		with := make([]predicate.Integration, 0, len(i.HasIntegrationsWith))
		for _, w := range i.HasIntegrationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIntegrationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, hush.HasIntegrationsWith(with...))
	}
	if i.HasOrganization != nil {
		p := hush.HasOrganization()
		if !*i.HasOrganization {
			p = hush.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOrganizationWith))
		for _, w := range i.HasOrganizationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, hush.HasOrganizationWith(with...))
	}
	if i.HasEvents != nil {
		p := hush.HasEvents()
		if !*i.HasEvents {
			p = hush.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, hush.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyHushWhereInput
	case 1:
		return predicates[0], nil
	default:
		return hush.And(predicates...), nil
	}
}

// HushHistoryWhereInput represents a where input for filtering HushHistory queries.
type HushHistoryWhereInput struct {
	Predicates []predicate.HushHistory  `json:"-"`
	Not        *HushHistoryWhereInput   `json:"not,omitempty"`
	Or         []*HushHistoryWhereInput `json:"or,omitempty"`
	And        []*HushHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "kind" field predicates.
	Kind             *string  `json:"kind,omitempty"`
	KindNEQ          *string  `json:"kindNEQ,omitempty"`
	KindIn           []string `json:"kindIn,omitempty"`
	KindNotIn        []string `json:"kindNotIn,omitempty"`
	KindGT           *string  `json:"kindGT,omitempty"`
	KindGTE          *string  `json:"kindGTE,omitempty"`
	KindLT           *string  `json:"kindLT,omitempty"`
	KindLTE          *string  `json:"kindLTE,omitempty"`
	KindContains     *string  `json:"kindContains,omitempty"`
	KindHasPrefix    *string  `json:"kindHasPrefix,omitempty"`
	KindHasSuffix    *string  `json:"kindHasSuffix,omitempty"`
	KindIsNil        bool     `json:"kindIsNil,omitempty"`
	KindNotNil       bool     `json:"kindNotNil,omitempty"`
	KindEqualFold    *string  `json:"kindEqualFold,omitempty"`
	KindContainsFold *string  `json:"kindContainsFold,omitempty"`

	// "secret_name" field predicates.
	SecretName             *string  `json:"secretName,omitempty"`
	SecretNameNEQ          *string  `json:"secretNameNEQ,omitempty"`
	SecretNameIn           []string `json:"secretNameIn,omitempty"`
	SecretNameNotIn        []string `json:"secretNameNotIn,omitempty"`
	SecretNameGT           *string  `json:"secretNameGT,omitempty"`
	SecretNameGTE          *string  `json:"secretNameGTE,omitempty"`
	SecretNameLT           *string  `json:"secretNameLT,omitempty"`
	SecretNameLTE          *string  `json:"secretNameLTE,omitempty"`
	SecretNameContains     *string  `json:"secretNameContains,omitempty"`
	SecretNameHasPrefix    *string  `json:"secretNameHasPrefix,omitempty"`
	SecretNameHasSuffix    *string  `json:"secretNameHasSuffix,omitempty"`
	SecretNameIsNil        bool     `json:"secretNameIsNil,omitempty"`
	SecretNameNotNil       bool     `json:"secretNameNotNil,omitempty"`
	SecretNameEqualFold    *string  `json:"secretNameEqualFold,omitempty"`
	SecretNameContainsFold *string  `json:"secretNameContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *HushHistoryWhereInput) AddPredicates(predicates ...predicate.HushHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the HushHistoryWhereInput filter on the HushHistoryQuery builder.
func (i *HushHistoryWhereInput) Filter(q *HushHistoryQuery) (*HushHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyHushHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyHushHistoryWhereInput is returned in case the HushHistoryWhereInput is empty.
var ErrEmptyHushHistoryWhereInput = errors.New("generated: empty predicate HushHistoryWhereInput")

// P returns a predicate for filtering hushhistories.
// An error is returned if the input is empty or invalid.
func (i *HushHistoryWhereInput) P() (predicate.HushHistory, error) {
	var predicates []predicate.HushHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, hushhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.HushHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, hushhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.HushHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, hushhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, hushhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, hushhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, hushhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, hushhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, hushhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, hushhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, hushhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, hushhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, hushhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, hushhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, hushhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, hushhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, hushhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, hushhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, hushhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, hushhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, hushhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, hushhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, hushhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, hushhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, hushhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, hushhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, hushhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, hushhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, hushhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, hushhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, hushhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, hushhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, hushhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, hushhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, hushhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, hushhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, hushhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, hushhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, hushhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, hushhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, hushhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, hushhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, hushhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, hushhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, hushhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, hushhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, hushhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, hushhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, hushhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, hushhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, hushhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, hushhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, hushhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, hushhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, hushhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, hushhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, hushhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, hushhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, hushhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, hushhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, hushhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, hushhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, hushhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, hushhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, hushhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, hushhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, hushhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, hushhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, hushhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, hushhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, hushhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, hushhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, hushhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, hushhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, hushhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, hushhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, hushhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, hushhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, hushhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, hushhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, hushhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, hushhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, hushhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, hushhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, hushhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, hushhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, hushhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, hushhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, hushhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, hushhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, hushhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, hushhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, hushhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, hushhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, hushhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, hushhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, hushhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, hushhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, hushhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, hushhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, hushhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, hushhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, hushhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, hushhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, hushhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, hushhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, hushhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, hushhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, hushhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, hushhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, hushhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, hushhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, hushhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, hushhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, hushhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, hushhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, hushhistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, hushhistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, hushhistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, hushhistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, hushhistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, hushhistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, hushhistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, hushhistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, hushhistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, hushhistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, hushhistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, hushhistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, hushhistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.Kind != nil {
		predicates = append(predicates, hushhistory.KindEQ(*i.Kind))
	}
	if i.KindNEQ != nil {
		predicates = append(predicates, hushhistory.KindNEQ(*i.KindNEQ))
	}
	if len(i.KindIn) > 0 {
		predicates = append(predicates, hushhistory.KindIn(i.KindIn...))
	}
	if len(i.KindNotIn) > 0 {
		predicates = append(predicates, hushhistory.KindNotIn(i.KindNotIn...))
	}
	if i.KindGT != nil {
		predicates = append(predicates, hushhistory.KindGT(*i.KindGT))
	}
	if i.KindGTE != nil {
		predicates = append(predicates, hushhistory.KindGTE(*i.KindGTE))
	}
	if i.KindLT != nil {
		predicates = append(predicates, hushhistory.KindLT(*i.KindLT))
	}
	if i.KindLTE != nil {
		predicates = append(predicates, hushhistory.KindLTE(*i.KindLTE))
	}
	if i.KindContains != nil {
		predicates = append(predicates, hushhistory.KindContains(*i.KindContains))
	}
	if i.KindHasPrefix != nil {
		predicates = append(predicates, hushhistory.KindHasPrefix(*i.KindHasPrefix))
	}
	if i.KindHasSuffix != nil {
		predicates = append(predicates, hushhistory.KindHasSuffix(*i.KindHasSuffix))
	}
	if i.KindIsNil {
		predicates = append(predicates, hushhistory.KindIsNil())
	}
	if i.KindNotNil {
		predicates = append(predicates, hushhistory.KindNotNil())
	}
	if i.KindEqualFold != nil {
		predicates = append(predicates, hushhistory.KindEqualFold(*i.KindEqualFold))
	}
	if i.KindContainsFold != nil {
		predicates = append(predicates, hushhistory.KindContainsFold(*i.KindContainsFold))
	}
	if i.SecretName != nil {
		predicates = append(predicates, hushhistory.SecretNameEQ(*i.SecretName))
	}
	if i.SecretNameNEQ != nil {
		predicates = append(predicates, hushhistory.SecretNameNEQ(*i.SecretNameNEQ))
	}
	if len(i.SecretNameIn) > 0 {
		predicates = append(predicates, hushhistory.SecretNameIn(i.SecretNameIn...))
	}
	if len(i.SecretNameNotIn) > 0 {
		predicates = append(predicates, hushhistory.SecretNameNotIn(i.SecretNameNotIn...))
	}
	if i.SecretNameGT != nil {
		predicates = append(predicates, hushhistory.SecretNameGT(*i.SecretNameGT))
	}
	if i.SecretNameGTE != nil {
		predicates = append(predicates, hushhistory.SecretNameGTE(*i.SecretNameGTE))
	}
	if i.SecretNameLT != nil {
		predicates = append(predicates, hushhistory.SecretNameLT(*i.SecretNameLT))
	}
	if i.SecretNameLTE != nil {
		predicates = append(predicates, hushhistory.SecretNameLTE(*i.SecretNameLTE))
	}
	if i.SecretNameContains != nil {
		predicates = append(predicates, hushhistory.SecretNameContains(*i.SecretNameContains))
	}
	if i.SecretNameHasPrefix != nil {
		predicates = append(predicates, hushhistory.SecretNameHasPrefix(*i.SecretNameHasPrefix))
	}
	if i.SecretNameHasSuffix != nil {
		predicates = append(predicates, hushhistory.SecretNameHasSuffix(*i.SecretNameHasSuffix))
	}
	if i.SecretNameIsNil {
		predicates = append(predicates, hushhistory.SecretNameIsNil())
	}
	if i.SecretNameNotNil {
		predicates = append(predicates, hushhistory.SecretNameNotNil())
	}
	if i.SecretNameEqualFold != nil {
		predicates = append(predicates, hushhistory.SecretNameEqualFold(*i.SecretNameEqualFold))
	}
	if i.SecretNameContainsFold != nil {
		predicates = append(predicates, hushhistory.SecretNameContainsFold(*i.SecretNameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyHushHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return hushhistory.And(predicates...), nil
	}
}

// IntegrationWhereInput represents a where input for filtering Integration queries.
type IntegrationWhereInput struct {
	Predicates []predicate.Integration  `json:"-"`
	Not        *IntegrationWhereInput   `json:"not,omitempty"`
	Or         []*IntegrationWhereInput `json:"or,omitempty"`
	And        []*IntegrationWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "kind" field predicates.
	Kind             *string  `json:"kind,omitempty"`
	KindNEQ          *string  `json:"kindNEQ,omitempty"`
	KindIn           []string `json:"kindIn,omitempty"`
	KindNotIn        []string `json:"kindNotIn,omitempty"`
	KindGT           *string  `json:"kindGT,omitempty"`
	KindGTE          *string  `json:"kindGTE,omitempty"`
	KindLT           *string  `json:"kindLT,omitempty"`
	KindLTE          *string  `json:"kindLTE,omitempty"`
	KindContains     *string  `json:"kindContains,omitempty"`
	KindHasPrefix    *string  `json:"kindHasPrefix,omitempty"`
	KindHasSuffix    *string  `json:"kindHasSuffix,omitempty"`
	KindIsNil        bool     `json:"kindIsNil,omitempty"`
	KindNotNil       bool     `json:"kindNotNil,omitempty"`
	KindEqualFold    *string  `json:"kindEqualFold,omitempty"`
	KindContainsFold *string  `json:"kindContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "secrets" edge predicates.
	HasSecrets     *bool             `json:"hasSecrets,omitempty"`
	HasSecretsWith []*HushWhereInput `json:"hasSecretsWith,omitempty"`

	// "oauth2tokens" edge predicates.
	HasOauth2tokens     *bool                       `json:"hasOauth2tokens,omitempty"`
	HasOauth2tokensWith []*OhAuthTooTokenWhereInput `json:"hasOauth2tokensWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`

	// "webhooks" edge predicates.
	HasWebhooks     *bool                `json:"hasWebhooks,omitempty"`
	HasWebhooksWith []*WebhookWhereInput `json:"hasWebhooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *IntegrationWhereInput) AddPredicates(predicates ...predicate.Integration) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the IntegrationWhereInput filter on the IntegrationQuery builder.
func (i *IntegrationWhereInput) Filter(q *IntegrationQuery) (*IntegrationQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyIntegrationWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyIntegrationWhereInput is returned in case the IntegrationWhereInput is empty.
var ErrEmptyIntegrationWhereInput = errors.New("generated: empty predicate IntegrationWhereInput")

// P returns a predicate for filtering integrations.
// An error is returned if the input is empty or invalid.
func (i *IntegrationWhereInput) P() (predicate.Integration, error) {
	var predicates []predicate.Integration
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, integration.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Integration, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, integration.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Integration, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, integration.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, integration.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, integration.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, integration.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, integration.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, integration.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, integration.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, integration.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, integration.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, integration.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, integration.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, integration.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, integration.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, integration.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, integration.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, integration.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, integration.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, integration.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, integration.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, integration.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, integration.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, integration.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, integration.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, integration.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, integration.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, integration.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, integration.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, integration.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, integration.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, integration.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, integration.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, integration.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, integration.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, integration.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, integration.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, integration.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, integration.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, integration.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, integration.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, integration.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, integration.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, integration.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, integration.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, integration.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, integration.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, integration.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, integration.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, integration.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, integration.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, integration.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, integration.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, integration.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, integration.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, integration.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, integration.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, integration.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, integration.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, integration.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, integration.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, integration.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, integration.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, integration.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, integration.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, integration.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, integration.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, integration.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, integration.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, integration.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, integration.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, integration.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, integration.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, integration.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, integration.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, integration.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, integration.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, integration.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, integration.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, integration.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, integration.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, integration.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, integration.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, integration.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, integration.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, integration.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, integration.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, integration.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, integration.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, integration.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, integration.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, integration.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, integration.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, integration.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, integration.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, integration.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, integration.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, integration.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, integration.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, integration.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, integration.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, integration.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, integration.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, integration.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, integration.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, integration.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, integration.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, integration.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, integration.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, integration.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, integration.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, integration.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, integration.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, integration.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, integration.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, integration.NameContainsFold(*i.NameContainsFold))
	}
	if i.Kind != nil {
		predicates = append(predicates, integration.KindEQ(*i.Kind))
	}
	if i.KindNEQ != nil {
		predicates = append(predicates, integration.KindNEQ(*i.KindNEQ))
	}
	if len(i.KindIn) > 0 {
		predicates = append(predicates, integration.KindIn(i.KindIn...))
	}
	if len(i.KindNotIn) > 0 {
		predicates = append(predicates, integration.KindNotIn(i.KindNotIn...))
	}
	if i.KindGT != nil {
		predicates = append(predicates, integration.KindGT(*i.KindGT))
	}
	if i.KindGTE != nil {
		predicates = append(predicates, integration.KindGTE(*i.KindGTE))
	}
	if i.KindLT != nil {
		predicates = append(predicates, integration.KindLT(*i.KindLT))
	}
	if i.KindLTE != nil {
		predicates = append(predicates, integration.KindLTE(*i.KindLTE))
	}
	if i.KindContains != nil {
		predicates = append(predicates, integration.KindContains(*i.KindContains))
	}
	if i.KindHasPrefix != nil {
		predicates = append(predicates, integration.KindHasPrefix(*i.KindHasPrefix))
	}
	if i.KindHasSuffix != nil {
		predicates = append(predicates, integration.KindHasSuffix(*i.KindHasSuffix))
	}
	if i.KindIsNil {
		predicates = append(predicates, integration.KindIsNil())
	}
	if i.KindNotNil {
		predicates = append(predicates, integration.KindNotNil())
	}
	if i.KindEqualFold != nil {
		predicates = append(predicates, integration.KindEqualFold(*i.KindEqualFold))
	}
	if i.KindContainsFold != nil {
		predicates = append(predicates, integration.KindContainsFold(*i.KindContainsFold))
	}

	if i.HasOwner != nil {
		p := integration.HasOwner()
		if !*i.HasOwner {
			p = integration.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, integration.HasOwnerWith(with...))
	}
	if i.HasSecrets != nil {
		p := integration.HasSecrets()
		if !*i.HasSecrets {
			p = integration.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSecretsWith) > 0 {
		with := make([]predicate.Hush, 0, len(i.HasSecretsWith))
		for _, w := range i.HasSecretsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSecretsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, integration.HasSecretsWith(with...))
	}
	if i.HasOauth2tokens != nil {
		p := integration.HasOauth2tokens()
		if !*i.HasOauth2tokens {
			p = integration.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOauth2tokensWith) > 0 {
		with := make([]predicate.OhAuthTooToken, 0, len(i.HasOauth2tokensWith))
		for _, w := range i.HasOauth2tokensWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOauth2tokensWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, integration.HasOauth2tokensWith(with...))
	}
	if i.HasEvents != nil {
		p := integration.HasEvents()
		if !*i.HasEvents {
			p = integration.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, integration.HasEventsWith(with...))
	}
	if i.HasWebhooks != nil {
		p := integration.HasWebhooks()
		if !*i.HasWebhooks {
			p = integration.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWebhooksWith) > 0 {
		with := make([]predicate.Webhook, 0, len(i.HasWebhooksWith))
		for _, w := range i.HasWebhooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWebhooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, integration.HasWebhooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyIntegrationWhereInput
	case 1:
		return predicates[0], nil
	default:
		return integration.And(predicates...), nil
	}
}

// IntegrationHistoryWhereInput represents a where input for filtering IntegrationHistory queries.
type IntegrationHistoryWhereInput struct {
	Predicates []predicate.IntegrationHistory  `json:"-"`
	Not        *IntegrationHistoryWhereInput   `json:"not,omitempty"`
	Or         []*IntegrationHistoryWhereInput `json:"or,omitempty"`
	And        []*IntegrationHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "kind" field predicates.
	Kind             *string  `json:"kind,omitempty"`
	KindNEQ          *string  `json:"kindNEQ,omitempty"`
	KindIn           []string `json:"kindIn,omitempty"`
	KindNotIn        []string `json:"kindNotIn,omitempty"`
	KindGT           *string  `json:"kindGT,omitempty"`
	KindGTE          *string  `json:"kindGTE,omitempty"`
	KindLT           *string  `json:"kindLT,omitempty"`
	KindLTE          *string  `json:"kindLTE,omitempty"`
	KindContains     *string  `json:"kindContains,omitempty"`
	KindHasPrefix    *string  `json:"kindHasPrefix,omitempty"`
	KindHasSuffix    *string  `json:"kindHasSuffix,omitempty"`
	KindIsNil        bool     `json:"kindIsNil,omitempty"`
	KindNotNil       bool     `json:"kindNotNil,omitempty"`
	KindEqualFold    *string  `json:"kindEqualFold,omitempty"`
	KindContainsFold *string  `json:"kindContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *IntegrationHistoryWhereInput) AddPredicates(predicates ...predicate.IntegrationHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the IntegrationHistoryWhereInput filter on the IntegrationHistoryQuery builder.
func (i *IntegrationHistoryWhereInput) Filter(q *IntegrationHistoryQuery) (*IntegrationHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyIntegrationHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyIntegrationHistoryWhereInput is returned in case the IntegrationHistoryWhereInput is empty.
var ErrEmptyIntegrationHistoryWhereInput = errors.New("generated: empty predicate IntegrationHistoryWhereInput")

// P returns a predicate for filtering integrationhistories.
// An error is returned if the input is empty or invalid.
func (i *IntegrationHistoryWhereInput) P() (predicate.IntegrationHistory, error) {
	var predicates []predicate.IntegrationHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, integrationhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.IntegrationHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, integrationhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.IntegrationHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, integrationhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, integrationhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, integrationhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, integrationhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, integrationhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, integrationhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, integrationhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, integrationhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, integrationhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, integrationhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, integrationhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, integrationhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, integrationhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, integrationhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, integrationhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, integrationhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, integrationhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, integrationhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, integrationhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, integrationhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, integrationhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, integrationhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, integrationhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, integrationhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, integrationhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, integrationhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, integrationhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, integrationhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, integrationhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, integrationhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, integrationhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, integrationhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, integrationhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, integrationhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, integrationhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, integrationhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, integrationhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, integrationhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, integrationhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, integrationhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, integrationhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, integrationhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, integrationhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, integrationhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, integrationhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, integrationhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, integrationhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, integrationhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, integrationhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, integrationhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, integrationhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, integrationhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, integrationhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, integrationhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, integrationhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, integrationhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, integrationhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, integrationhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, integrationhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, integrationhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, integrationhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, integrationhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, integrationhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, integrationhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, integrationhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, integrationhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, integrationhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, integrationhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, integrationhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, integrationhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, integrationhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, integrationhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, integrationhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, integrationhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, integrationhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, integrationhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, integrationhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, integrationhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, integrationhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, integrationhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, integrationhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, integrationhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, integrationhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, integrationhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, integrationhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, integrationhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, integrationhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, integrationhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, integrationhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, integrationhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, integrationhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, integrationhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, integrationhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, integrationhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, integrationhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, integrationhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, integrationhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, integrationhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, integrationhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, integrationhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, integrationhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, integrationhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, integrationhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, integrationhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, integrationhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, integrationhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, integrationhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, integrationhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, integrationhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, integrationhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, integrationhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, integrationhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, integrationhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, integrationhistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, integrationhistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, integrationhistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, integrationhistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, integrationhistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, integrationhistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, integrationhistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, integrationhistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, integrationhistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, integrationhistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, integrationhistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, integrationhistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, integrationhistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, integrationhistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, integrationhistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, integrationhistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, integrationhistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, integrationhistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, integrationhistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, integrationhistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, integrationhistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, integrationhistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, integrationhistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, integrationhistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, integrationhistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, integrationhistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, integrationhistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, integrationhistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.Kind != nil {
		predicates = append(predicates, integrationhistory.KindEQ(*i.Kind))
	}
	if i.KindNEQ != nil {
		predicates = append(predicates, integrationhistory.KindNEQ(*i.KindNEQ))
	}
	if len(i.KindIn) > 0 {
		predicates = append(predicates, integrationhistory.KindIn(i.KindIn...))
	}
	if len(i.KindNotIn) > 0 {
		predicates = append(predicates, integrationhistory.KindNotIn(i.KindNotIn...))
	}
	if i.KindGT != nil {
		predicates = append(predicates, integrationhistory.KindGT(*i.KindGT))
	}
	if i.KindGTE != nil {
		predicates = append(predicates, integrationhistory.KindGTE(*i.KindGTE))
	}
	if i.KindLT != nil {
		predicates = append(predicates, integrationhistory.KindLT(*i.KindLT))
	}
	if i.KindLTE != nil {
		predicates = append(predicates, integrationhistory.KindLTE(*i.KindLTE))
	}
	if i.KindContains != nil {
		predicates = append(predicates, integrationhistory.KindContains(*i.KindContains))
	}
	if i.KindHasPrefix != nil {
		predicates = append(predicates, integrationhistory.KindHasPrefix(*i.KindHasPrefix))
	}
	if i.KindHasSuffix != nil {
		predicates = append(predicates, integrationhistory.KindHasSuffix(*i.KindHasSuffix))
	}
	if i.KindIsNil {
		predicates = append(predicates, integrationhistory.KindIsNil())
	}
	if i.KindNotNil {
		predicates = append(predicates, integrationhistory.KindNotNil())
	}
	if i.KindEqualFold != nil {
		predicates = append(predicates, integrationhistory.KindEqualFold(*i.KindEqualFold))
	}
	if i.KindContainsFold != nil {
		predicates = append(predicates, integrationhistory.KindContainsFold(*i.KindContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyIntegrationHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return integrationhistory.And(predicates...), nil
	}
}

// InviteWhereInput represents a where input for filtering Invite queries.
type InviteWhereInput struct {
	Predicates []predicate.Invite  `json:"-"`
	Not        *InviteWhereInput   `json:"not,omitempty"`
	Or         []*InviteWhereInput `json:"or,omitempty"`
	And        []*InviteWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "expires" field predicates.
	Expires       *time.Time  `json:"expires,omitempty"`
	ExpiresNEQ    *time.Time  `json:"expiresNEQ,omitempty"`
	ExpiresIn     []time.Time `json:"expiresIn,omitempty"`
	ExpiresNotIn  []time.Time `json:"expiresNotIn,omitempty"`
	ExpiresGT     *time.Time  `json:"expiresGT,omitempty"`
	ExpiresGTE    *time.Time  `json:"expiresGTE,omitempty"`
	ExpiresLT     *time.Time  `json:"expiresLT,omitempty"`
	ExpiresLTE    *time.Time  `json:"expiresLTE,omitempty"`
	ExpiresIsNil  bool        `json:"expiresIsNil,omitempty"`
	ExpiresNotNil bool        `json:"expiresNotNil,omitempty"`

	// "recipient" field predicates.
	Recipient             *string  `json:"recipient,omitempty"`
	RecipientNEQ          *string  `json:"recipientNEQ,omitempty"`
	RecipientIn           []string `json:"recipientIn,omitempty"`
	RecipientNotIn        []string `json:"recipientNotIn,omitempty"`
	RecipientGT           *string  `json:"recipientGT,omitempty"`
	RecipientGTE          *string  `json:"recipientGTE,omitempty"`
	RecipientLT           *string  `json:"recipientLT,omitempty"`
	RecipientLTE          *string  `json:"recipientLTE,omitempty"`
	RecipientContains     *string  `json:"recipientContains,omitempty"`
	RecipientHasPrefix    *string  `json:"recipientHasPrefix,omitempty"`
	RecipientHasSuffix    *string  `json:"recipientHasSuffix,omitempty"`
	RecipientEqualFold    *string  `json:"recipientEqualFold,omitempty"`
	RecipientContainsFold *string  `json:"recipientContainsFold,omitempty"`

	// "status" field predicates.
	Status      *enums.InviteStatus  `json:"status,omitempty"`
	StatusNEQ   *enums.InviteStatus  `json:"statusNEQ,omitempty"`
	StatusIn    []enums.InviteStatus `json:"statusIn,omitempty"`
	StatusNotIn []enums.InviteStatus `json:"statusNotIn,omitempty"`

	// "role" field predicates.
	Role      *enums.Role  `json:"role,omitempty"`
	RoleNEQ   *enums.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []enums.Role `json:"roleIn,omitempty"`
	RoleNotIn []enums.Role `json:"roleNotIn,omitempty"`

	// "send_attempts" field predicates.
	SendAttempts      *int  `json:"sendAttempts,omitempty"`
	SendAttemptsNEQ   *int  `json:"sendAttemptsNEQ,omitempty"`
	SendAttemptsIn    []int `json:"sendAttemptsIn,omitempty"`
	SendAttemptsNotIn []int `json:"sendAttemptsNotIn,omitempty"`
	SendAttemptsGT    *int  `json:"sendAttemptsGT,omitempty"`
	SendAttemptsGTE   *int  `json:"sendAttemptsGTE,omitempty"`
	SendAttemptsLT    *int  `json:"sendAttemptsLT,omitempty"`
	SendAttemptsLTE   *int  `json:"sendAttemptsLTE,omitempty"`

	// "requestor_id" field predicates.
	RequestorID             *string  `json:"requestorID,omitempty"`
	RequestorIDNEQ          *string  `json:"requestorIDNEQ,omitempty"`
	RequestorIDIn           []string `json:"requestorIDIn,omitempty"`
	RequestorIDNotIn        []string `json:"requestorIDNotIn,omitempty"`
	RequestorIDGT           *string  `json:"requestorIDGT,omitempty"`
	RequestorIDGTE          *string  `json:"requestorIDGTE,omitempty"`
	RequestorIDLT           *string  `json:"requestorIDLT,omitempty"`
	RequestorIDLTE          *string  `json:"requestorIDLTE,omitempty"`
	RequestorIDContains     *string  `json:"requestorIDContains,omitempty"`
	RequestorIDHasPrefix    *string  `json:"requestorIDHasPrefix,omitempty"`
	RequestorIDHasSuffix    *string  `json:"requestorIDHasSuffix,omitempty"`
	RequestorIDIsNil        bool     `json:"requestorIDIsNil,omitempty"`
	RequestorIDNotNil       bool     `json:"requestorIDNotNil,omitempty"`
	RequestorIDEqualFold    *string  `json:"requestorIDEqualFold,omitempty"`
	RequestorIDContainsFold *string  `json:"requestorIDContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *InviteWhereInput) AddPredicates(predicates ...predicate.Invite) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the InviteWhereInput filter on the InviteQuery builder.
func (i *InviteWhereInput) Filter(q *InviteQuery) (*InviteQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyInviteWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyInviteWhereInput is returned in case the InviteWhereInput is empty.
var ErrEmptyInviteWhereInput = errors.New("generated: empty predicate InviteWhereInput")

// P returns a predicate for filtering invites.
// An error is returned if the input is empty or invalid.
func (i *InviteWhereInput) P() (predicate.Invite, error) {
	var predicates []predicate.Invite
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, invite.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Invite, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, invite.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Invite, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, invite.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, invite.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, invite.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, invite.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, invite.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, invite.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, invite.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, invite.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, invite.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, invite.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, invite.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, invite.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, invite.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, invite.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, invite.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, invite.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, invite.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, invite.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, invite.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, invite.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, invite.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, invite.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, invite.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, invite.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, invite.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, invite.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, invite.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, invite.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, invite.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, invite.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, invite.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, invite.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, invite.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, invite.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, invite.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, invite.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, invite.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, invite.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, invite.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, invite.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, invite.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, invite.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, invite.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, invite.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, invite.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, invite.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, invite.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, invite.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, invite.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, invite.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, invite.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, invite.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, invite.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, invite.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, invite.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, invite.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, invite.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, invite.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, invite.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, invite.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, invite.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, invite.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, invite.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, invite.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, invite.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, invite.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, invite.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, invite.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, invite.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, invite.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, invite.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, invite.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, invite.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, invite.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, invite.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, invite.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, invite.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, invite.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, invite.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, invite.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, invite.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, invite.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, invite.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, invite.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, invite.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, invite.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, invite.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, invite.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, invite.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, invite.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, invite.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, invite.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, invite.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, invite.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, invite.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, invite.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, invite.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, invite.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, invite.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, invite.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, invite.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Expires != nil {
		predicates = append(predicates, invite.ExpiresEQ(*i.Expires))
	}
	if i.ExpiresNEQ != nil {
		predicates = append(predicates, invite.ExpiresNEQ(*i.ExpiresNEQ))
	}
	if len(i.ExpiresIn) > 0 {
		predicates = append(predicates, invite.ExpiresIn(i.ExpiresIn...))
	}
	if len(i.ExpiresNotIn) > 0 {
		predicates = append(predicates, invite.ExpiresNotIn(i.ExpiresNotIn...))
	}
	if i.ExpiresGT != nil {
		predicates = append(predicates, invite.ExpiresGT(*i.ExpiresGT))
	}
	if i.ExpiresGTE != nil {
		predicates = append(predicates, invite.ExpiresGTE(*i.ExpiresGTE))
	}
	if i.ExpiresLT != nil {
		predicates = append(predicates, invite.ExpiresLT(*i.ExpiresLT))
	}
	if i.ExpiresLTE != nil {
		predicates = append(predicates, invite.ExpiresLTE(*i.ExpiresLTE))
	}
	if i.ExpiresIsNil {
		predicates = append(predicates, invite.ExpiresIsNil())
	}
	if i.ExpiresNotNil {
		predicates = append(predicates, invite.ExpiresNotNil())
	}
	if i.Recipient != nil {
		predicates = append(predicates, invite.RecipientEQ(*i.Recipient))
	}
	if i.RecipientNEQ != nil {
		predicates = append(predicates, invite.RecipientNEQ(*i.RecipientNEQ))
	}
	if len(i.RecipientIn) > 0 {
		predicates = append(predicates, invite.RecipientIn(i.RecipientIn...))
	}
	if len(i.RecipientNotIn) > 0 {
		predicates = append(predicates, invite.RecipientNotIn(i.RecipientNotIn...))
	}
	if i.RecipientGT != nil {
		predicates = append(predicates, invite.RecipientGT(*i.RecipientGT))
	}
	if i.RecipientGTE != nil {
		predicates = append(predicates, invite.RecipientGTE(*i.RecipientGTE))
	}
	if i.RecipientLT != nil {
		predicates = append(predicates, invite.RecipientLT(*i.RecipientLT))
	}
	if i.RecipientLTE != nil {
		predicates = append(predicates, invite.RecipientLTE(*i.RecipientLTE))
	}
	if i.RecipientContains != nil {
		predicates = append(predicates, invite.RecipientContains(*i.RecipientContains))
	}
	if i.RecipientHasPrefix != nil {
		predicates = append(predicates, invite.RecipientHasPrefix(*i.RecipientHasPrefix))
	}
	if i.RecipientHasSuffix != nil {
		predicates = append(predicates, invite.RecipientHasSuffix(*i.RecipientHasSuffix))
	}
	if i.RecipientEqualFold != nil {
		predicates = append(predicates, invite.RecipientEqualFold(*i.RecipientEqualFold))
	}
	if i.RecipientContainsFold != nil {
		predicates = append(predicates, invite.RecipientContainsFold(*i.RecipientContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, invite.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, invite.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, invite.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, invite.StatusNotIn(i.StatusNotIn...))
	}
	if i.Role != nil {
		predicates = append(predicates, invite.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, invite.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, invite.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, invite.RoleNotIn(i.RoleNotIn...))
	}
	if i.SendAttempts != nil {
		predicates = append(predicates, invite.SendAttemptsEQ(*i.SendAttempts))
	}
	if i.SendAttemptsNEQ != nil {
		predicates = append(predicates, invite.SendAttemptsNEQ(*i.SendAttemptsNEQ))
	}
	if len(i.SendAttemptsIn) > 0 {
		predicates = append(predicates, invite.SendAttemptsIn(i.SendAttemptsIn...))
	}
	if len(i.SendAttemptsNotIn) > 0 {
		predicates = append(predicates, invite.SendAttemptsNotIn(i.SendAttemptsNotIn...))
	}
	if i.SendAttemptsGT != nil {
		predicates = append(predicates, invite.SendAttemptsGT(*i.SendAttemptsGT))
	}
	if i.SendAttemptsGTE != nil {
		predicates = append(predicates, invite.SendAttemptsGTE(*i.SendAttemptsGTE))
	}
	if i.SendAttemptsLT != nil {
		predicates = append(predicates, invite.SendAttemptsLT(*i.SendAttemptsLT))
	}
	if i.SendAttemptsLTE != nil {
		predicates = append(predicates, invite.SendAttemptsLTE(*i.SendAttemptsLTE))
	}
	if i.RequestorID != nil {
		predicates = append(predicates, invite.RequestorIDEQ(*i.RequestorID))
	}
	if i.RequestorIDNEQ != nil {
		predicates = append(predicates, invite.RequestorIDNEQ(*i.RequestorIDNEQ))
	}
	if len(i.RequestorIDIn) > 0 {
		predicates = append(predicates, invite.RequestorIDIn(i.RequestorIDIn...))
	}
	if len(i.RequestorIDNotIn) > 0 {
		predicates = append(predicates, invite.RequestorIDNotIn(i.RequestorIDNotIn...))
	}
	if i.RequestorIDGT != nil {
		predicates = append(predicates, invite.RequestorIDGT(*i.RequestorIDGT))
	}
	if i.RequestorIDGTE != nil {
		predicates = append(predicates, invite.RequestorIDGTE(*i.RequestorIDGTE))
	}
	if i.RequestorIDLT != nil {
		predicates = append(predicates, invite.RequestorIDLT(*i.RequestorIDLT))
	}
	if i.RequestorIDLTE != nil {
		predicates = append(predicates, invite.RequestorIDLTE(*i.RequestorIDLTE))
	}
	if i.RequestorIDContains != nil {
		predicates = append(predicates, invite.RequestorIDContains(*i.RequestorIDContains))
	}
	if i.RequestorIDHasPrefix != nil {
		predicates = append(predicates, invite.RequestorIDHasPrefix(*i.RequestorIDHasPrefix))
	}
	if i.RequestorIDHasSuffix != nil {
		predicates = append(predicates, invite.RequestorIDHasSuffix(*i.RequestorIDHasSuffix))
	}
	if i.RequestorIDIsNil {
		predicates = append(predicates, invite.RequestorIDIsNil())
	}
	if i.RequestorIDNotNil {
		predicates = append(predicates, invite.RequestorIDNotNil())
	}
	if i.RequestorIDEqualFold != nil {
		predicates = append(predicates, invite.RequestorIDEqualFold(*i.RequestorIDEqualFold))
	}
	if i.RequestorIDContainsFold != nil {
		predicates = append(predicates, invite.RequestorIDContainsFold(*i.RequestorIDContainsFold))
	}

	if i.HasOwner != nil {
		p := invite.HasOwner()
		if !*i.HasOwner {
			p = invite.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, invite.HasOwnerWith(with...))
	}
	if i.HasEvents != nil {
		p := invite.HasEvents()
		if !*i.HasEvents {
			p = invite.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, invite.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyInviteWhereInput
	case 1:
		return predicates[0], nil
	default:
		return invite.And(predicates...), nil
	}
}

// NoteWhereInput represents a where input for filtering Note queries.
type NoteWhereInput struct {
	Predicates []predicate.Note  `json:"-"`
	Not        *NoteWhereInput   `json:"not,omitempty"`
	Or         []*NoteWhereInput `json:"or,omitempty"`
	And        []*NoteWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "text" field predicates.
	Text             *string  `json:"text,omitempty"`
	TextNEQ          *string  `json:"textNEQ,omitempty"`
	TextIn           []string `json:"textIn,omitempty"`
	TextNotIn        []string `json:"textNotIn,omitempty"`
	TextGT           *string  `json:"textGT,omitempty"`
	TextGTE          *string  `json:"textGTE,omitempty"`
	TextLT           *string  `json:"textLT,omitempty"`
	TextLTE          *string  `json:"textLTE,omitempty"`
	TextContains     *string  `json:"textContains,omitempty"`
	TextHasPrefix    *string  `json:"textHasPrefix,omitempty"`
	TextHasSuffix    *string  `json:"textHasSuffix,omitempty"`
	TextEqualFold    *string  `json:"textEqualFold,omitempty"`
	TextContainsFold *string  `json:"textContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "entity" edge predicates.
	HasEntity     *bool               `json:"hasEntity,omitempty"`
	HasEntityWith []*EntityWhereInput `json:"hasEntityWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *NoteWhereInput) AddPredicates(predicates ...predicate.Note) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the NoteWhereInput filter on the NoteQuery builder.
func (i *NoteWhereInput) Filter(q *NoteQuery) (*NoteQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyNoteWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyNoteWhereInput is returned in case the NoteWhereInput is empty.
var ErrEmptyNoteWhereInput = errors.New("generated: empty predicate NoteWhereInput")

// P returns a predicate for filtering notes.
// An error is returned if the input is empty or invalid.
func (i *NoteWhereInput) P() (predicate.Note, error) {
	var predicates []predicate.Note
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, note.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Note, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, note.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Note, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, note.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, note.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, note.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, note.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, note.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, note.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, note.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, note.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, note.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, note.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, note.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, note.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, note.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, note.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, note.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, note.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, note.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, note.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, note.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, note.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, note.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, note.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, note.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, note.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, note.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, note.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, note.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, note.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, note.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, note.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, note.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, note.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, note.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, note.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, note.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, note.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, note.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, note.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, note.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, note.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, note.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, note.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, note.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, note.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, note.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, note.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, note.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, note.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, note.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, note.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, note.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, note.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, note.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, note.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, note.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, note.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, note.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, note.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, note.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, note.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, note.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, note.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, note.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, note.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, note.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, note.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, note.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, note.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, note.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, note.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, note.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, note.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, note.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, note.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, note.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, note.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, note.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, note.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, note.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, note.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, note.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, note.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, note.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, note.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, note.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, note.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, note.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, note.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, note.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, note.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, note.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, note.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, note.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, note.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, note.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, note.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, note.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, note.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, note.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, note.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, note.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Text != nil {
		predicates = append(predicates, note.TextEQ(*i.Text))
	}
	if i.TextNEQ != nil {
		predicates = append(predicates, note.TextNEQ(*i.TextNEQ))
	}
	if len(i.TextIn) > 0 {
		predicates = append(predicates, note.TextIn(i.TextIn...))
	}
	if len(i.TextNotIn) > 0 {
		predicates = append(predicates, note.TextNotIn(i.TextNotIn...))
	}
	if i.TextGT != nil {
		predicates = append(predicates, note.TextGT(*i.TextGT))
	}
	if i.TextGTE != nil {
		predicates = append(predicates, note.TextGTE(*i.TextGTE))
	}
	if i.TextLT != nil {
		predicates = append(predicates, note.TextLT(*i.TextLT))
	}
	if i.TextLTE != nil {
		predicates = append(predicates, note.TextLTE(*i.TextLTE))
	}
	if i.TextContains != nil {
		predicates = append(predicates, note.TextContains(*i.TextContains))
	}
	if i.TextHasPrefix != nil {
		predicates = append(predicates, note.TextHasPrefix(*i.TextHasPrefix))
	}
	if i.TextHasSuffix != nil {
		predicates = append(predicates, note.TextHasSuffix(*i.TextHasSuffix))
	}
	if i.TextEqualFold != nil {
		predicates = append(predicates, note.TextEqualFold(*i.TextEqualFold))
	}
	if i.TextContainsFold != nil {
		predicates = append(predicates, note.TextContainsFold(*i.TextContainsFold))
	}

	if i.HasOwner != nil {
		p := note.HasOwner()
		if !*i.HasOwner {
			p = note.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, note.HasOwnerWith(with...))
	}
	if i.HasEntity != nil {
		p := note.HasEntity()
		if !*i.HasEntity {
			p = note.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntityWith) > 0 {
		with := make([]predicate.Entity, 0, len(i.HasEntityWith))
		for _, w := range i.HasEntityWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntityWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, note.HasEntityWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyNoteWhereInput
	case 1:
		return predicates[0], nil
	default:
		return note.And(predicates...), nil
	}
}

// NoteHistoryWhereInput represents a where input for filtering NoteHistory queries.
type NoteHistoryWhereInput struct {
	Predicates []predicate.NoteHistory  `json:"-"`
	Not        *NoteHistoryWhereInput   `json:"not,omitempty"`
	Or         []*NoteHistoryWhereInput `json:"or,omitempty"`
	And        []*NoteHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "text" field predicates.
	Text             *string  `json:"text,omitempty"`
	TextNEQ          *string  `json:"textNEQ,omitempty"`
	TextIn           []string `json:"textIn,omitempty"`
	TextNotIn        []string `json:"textNotIn,omitempty"`
	TextGT           *string  `json:"textGT,omitempty"`
	TextGTE          *string  `json:"textGTE,omitempty"`
	TextLT           *string  `json:"textLT,omitempty"`
	TextLTE          *string  `json:"textLTE,omitempty"`
	TextContains     *string  `json:"textContains,omitempty"`
	TextHasPrefix    *string  `json:"textHasPrefix,omitempty"`
	TextHasSuffix    *string  `json:"textHasSuffix,omitempty"`
	TextEqualFold    *string  `json:"textEqualFold,omitempty"`
	TextContainsFold *string  `json:"textContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *NoteHistoryWhereInput) AddPredicates(predicates ...predicate.NoteHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the NoteHistoryWhereInput filter on the NoteHistoryQuery builder.
func (i *NoteHistoryWhereInput) Filter(q *NoteHistoryQuery) (*NoteHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyNoteHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyNoteHistoryWhereInput is returned in case the NoteHistoryWhereInput is empty.
var ErrEmptyNoteHistoryWhereInput = errors.New("generated: empty predicate NoteHistoryWhereInput")

// P returns a predicate for filtering notehistories.
// An error is returned if the input is empty or invalid.
func (i *NoteHistoryWhereInput) P() (predicate.NoteHistory, error) {
	var predicates []predicate.NoteHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, notehistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.NoteHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, notehistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.NoteHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, notehistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, notehistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, notehistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, notehistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, notehistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, notehistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, notehistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, notehistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, notehistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, notehistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, notehistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, notehistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, notehistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, notehistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, notehistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, notehistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, notehistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, notehistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, notehistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, notehistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, notehistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, notehistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, notehistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, notehistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, notehistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, notehistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, notehistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, notehistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, notehistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, notehistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, notehistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, notehistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, notehistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, notehistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, notehistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, notehistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, notehistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, notehistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, notehistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, notehistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, notehistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, notehistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, notehistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, notehistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, notehistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, notehistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, notehistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, notehistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, notehistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, notehistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, notehistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, notehistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, notehistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, notehistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, notehistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, notehistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, notehistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, notehistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, notehistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, notehistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, notehistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, notehistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, notehistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, notehistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, notehistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, notehistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, notehistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, notehistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, notehistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, notehistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, notehistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, notehistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, notehistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, notehistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, notehistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, notehistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, notehistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, notehistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, notehistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, notehistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, notehistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, notehistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, notehistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, notehistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, notehistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, notehistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, notehistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, notehistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, notehistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, notehistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, notehistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, notehistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, notehistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, notehistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, notehistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, notehistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, notehistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, notehistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, notehistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, notehistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, notehistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, notehistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, notehistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, notehistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, notehistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, notehistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, notehistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, notehistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, notehistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, notehistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, notehistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, notehistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, notehistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, notehistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, notehistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, notehistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, notehistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, notehistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, notehistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, notehistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, notehistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, notehistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, notehistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, notehistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, notehistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, notehistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, notehistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, notehistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Text != nil {
		predicates = append(predicates, notehistory.TextEQ(*i.Text))
	}
	if i.TextNEQ != nil {
		predicates = append(predicates, notehistory.TextNEQ(*i.TextNEQ))
	}
	if len(i.TextIn) > 0 {
		predicates = append(predicates, notehistory.TextIn(i.TextIn...))
	}
	if len(i.TextNotIn) > 0 {
		predicates = append(predicates, notehistory.TextNotIn(i.TextNotIn...))
	}
	if i.TextGT != nil {
		predicates = append(predicates, notehistory.TextGT(*i.TextGT))
	}
	if i.TextGTE != nil {
		predicates = append(predicates, notehistory.TextGTE(*i.TextGTE))
	}
	if i.TextLT != nil {
		predicates = append(predicates, notehistory.TextLT(*i.TextLT))
	}
	if i.TextLTE != nil {
		predicates = append(predicates, notehistory.TextLTE(*i.TextLTE))
	}
	if i.TextContains != nil {
		predicates = append(predicates, notehistory.TextContains(*i.TextContains))
	}
	if i.TextHasPrefix != nil {
		predicates = append(predicates, notehistory.TextHasPrefix(*i.TextHasPrefix))
	}
	if i.TextHasSuffix != nil {
		predicates = append(predicates, notehistory.TextHasSuffix(*i.TextHasSuffix))
	}
	if i.TextEqualFold != nil {
		predicates = append(predicates, notehistory.TextEqualFold(*i.TextEqualFold))
	}
	if i.TextContainsFold != nil {
		predicates = append(predicates, notehistory.TextContainsFold(*i.TextContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyNoteHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return notehistory.And(predicates...), nil
	}
}

// OauthProviderWhereInput represents a where input for filtering OauthProvider queries.
type OauthProviderWhereInput struct {
	Predicates []predicate.OauthProvider  `json:"-"`
	Not        *OauthProviderWhereInput   `json:"not,omitempty"`
	Or         []*OauthProviderWhereInput `json:"or,omitempty"`
	And        []*OauthProviderWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "client_id" field predicates.
	ClientID             *string  `json:"clientID,omitempty"`
	ClientIDNEQ          *string  `json:"clientIDNEQ,omitempty"`
	ClientIDIn           []string `json:"clientIDIn,omitempty"`
	ClientIDNotIn        []string `json:"clientIDNotIn,omitempty"`
	ClientIDGT           *string  `json:"clientIDGT,omitempty"`
	ClientIDGTE          *string  `json:"clientIDGTE,omitempty"`
	ClientIDLT           *string  `json:"clientIDLT,omitempty"`
	ClientIDLTE          *string  `json:"clientIDLTE,omitempty"`
	ClientIDContains     *string  `json:"clientIDContains,omitempty"`
	ClientIDHasPrefix    *string  `json:"clientIDHasPrefix,omitempty"`
	ClientIDHasSuffix    *string  `json:"clientIDHasSuffix,omitempty"`
	ClientIDEqualFold    *string  `json:"clientIDEqualFold,omitempty"`
	ClientIDContainsFold *string  `json:"clientIDContainsFold,omitempty"`

	// "client_secret" field predicates.
	ClientSecret             *string  `json:"clientSecret,omitempty"`
	ClientSecretNEQ          *string  `json:"clientSecretNEQ,omitempty"`
	ClientSecretIn           []string `json:"clientSecretIn,omitempty"`
	ClientSecretNotIn        []string `json:"clientSecretNotIn,omitempty"`
	ClientSecretGT           *string  `json:"clientSecretGT,omitempty"`
	ClientSecretGTE          *string  `json:"clientSecretGTE,omitempty"`
	ClientSecretLT           *string  `json:"clientSecretLT,omitempty"`
	ClientSecretLTE          *string  `json:"clientSecretLTE,omitempty"`
	ClientSecretContains     *string  `json:"clientSecretContains,omitempty"`
	ClientSecretHasPrefix    *string  `json:"clientSecretHasPrefix,omitempty"`
	ClientSecretHasSuffix    *string  `json:"clientSecretHasSuffix,omitempty"`
	ClientSecretEqualFold    *string  `json:"clientSecretEqualFold,omitempty"`
	ClientSecretContainsFold *string  `json:"clientSecretContainsFold,omitempty"`

	// "redirect_url" field predicates.
	RedirectURL             *string  `json:"redirectURL,omitempty"`
	RedirectURLNEQ          *string  `json:"redirectURLNEQ,omitempty"`
	RedirectURLIn           []string `json:"redirectURLIn,omitempty"`
	RedirectURLNotIn        []string `json:"redirectURLNotIn,omitempty"`
	RedirectURLGT           *string  `json:"redirectURLGT,omitempty"`
	RedirectURLGTE          *string  `json:"redirectURLGTE,omitempty"`
	RedirectURLLT           *string  `json:"redirectURLLT,omitempty"`
	RedirectURLLTE          *string  `json:"redirectURLLTE,omitempty"`
	RedirectURLContains     *string  `json:"redirectURLContains,omitempty"`
	RedirectURLHasPrefix    *string  `json:"redirectURLHasPrefix,omitempty"`
	RedirectURLHasSuffix    *string  `json:"redirectURLHasSuffix,omitempty"`
	RedirectURLEqualFold    *string  `json:"redirectURLEqualFold,omitempty"`
	RedirectURLContainsFold *string  `json:"redirectURLContainsFold,omitempty"`

	// "scopes" field predicates.
	Scopes             *string  `json:"scopes,omitempty"`
	ScopesNEQ          *string  `json:"scopesNEQ,omitempty"`
	ScopesIn           []string `json:"scopesIn,omitempty"`
	ScopesNotIn        []string `json:"scopesNotIn,omitempty"`
	ScopesGT           *string  `json:"scopesGT,omitempty"`
	ScopesGTE          *string  `json:"scopesGTE,omitempty"`
	ScopesLT           *string  `json:"scopesLT,omitempty"`
	ScopesLTE          *string  `json:"scopesLTE,omitempty"`
	ScopesContains     *string  `json:"scopesContains,omitempty"`
	ScopesHasPrefix    *string  `json:"scopesHasPrefix,omitempty"`
	ScopesHasSuffix    *string  `json:"scopesHasSuffix,omitempty"`
	ScopesEqualFold    *string  `json:"scopesEqualFold,omitempty"`
	ScopesContainsFold *string  `json:"scopesContainsFold,omitempty"`

	// "auth_url" field predicates.
	AuthURL             *string  `json:"authURL,omitempty"`
	AuthURLNEQ          *string  `json:"authURLNEQ,omitempty"`
	AuthURLIn           []string `json:"authURLIn,omitempty"`
	AuthURLNotIn        []string `json:"authURLNotIn,omitempty"`
	AuthURLGT           *string  `json:"authURLGT,omitempty"`
	AuthURLGTE          *string  `json:"authURLGTE,omitempty"`
	AuthURLLT           *string  `json:"authURLLT,omitempty"`
	AuthURLLTE          *string  `json:"authURLLTE,omitempty"`
	AuthURLContains     *string  `json:"authURLContains,omitempty"`
	AuthURLHasPrefix    *string  `json:"authURLHasPrefix,omitempty"`
	AuthURLHasSuffix    *string  `json:"authURLHasSuffix,omitempty"`
	AuthURLEqualFold    *string  `json:"authURLEqualFold,omitempty"`
	AuthURLContainsFold *string  `json:"authURLContainsFold,omitempty"`

	// "token_url" field predicates.
	TokenURL             *string  `json:"tokenURL,omitempty"`
	TokenURLNEQ          *string  `json:"tokenURLNEQ,omitempty"`
	TokenURLIn           []string `json:"tokenURLIn,omitempty"`
	TokenURLNotIn        []string `json:"tokenURLNotIn,omitempty"`
	TokenURLGT           *string  `json:"tokenURLGT,omitempty"`
	TokenURLGTE          *string  `json:"tokenURLGTE,omitempty"`
	TokenURLLT           *string  `json:"tokenURLLT,omitempty"`
	TokenURLLTE          *string  `json:"tokenURLLTE,omitempty"`
	TokenURLContains     *string  `json:"tokenURLContains,omitempty"`
	TokenURLHasPrefix    *string  `json:"tokenURLHasPrefix,omitempty"`
	TokenURLHasSuffix    *string  `json:"tokenURLHasSuffix,omitempty"`
	TokenURLEqualFold    *string  `json:"tokenURLEqualFold,omitempty"`
	TokenURLContainsFold *string  `json:"tokenURLContainsFold,omitempty"`

	// "auth_style" field predicates.
	AuthStyle      *customtypes.Uint8  `json:"authStyle,omitempty"`
	AuthStyleNEQ   *customtypes.Uint8  `json:"authStyleNEQ,omitempty"`
	AuthStyleIn    []customtypes.Uint8 `json:"authStyleIn,omitempty"`
	AuthStyleNotIn []customtypes.Uint8 `json:"authStyleNotIn,omitempty"`
	AuthStyleGT    *customtypes.Uint8  `json:"authStyleGT,omitempty"`
	AuthStyleGTE   *customtypes.Uint8  `json:"authStyleGTE,omitempty"`
	AuthStyleLT    *customtypes.Uint8  `json:"authStyleLT,omitempty"`
	AuthStyleLTE   *customtypes.Uint8  `json:"authStyleLTE,omitempty"`

	// "info_url" field predicates.
	InfoURL             *string  `json:"infoURL,omitempty"`
	InfoURLNEQ          *string  `json:"infoURLNEQ,omitempty"`
	InfoURLIn           []string `json:"infoURLIn,omitempty"`
	InfoURLNotIn        []string `json:"infoURLNotIn,omitempty"`
	InfoURLGT           *string  `json:"infoURLGT,omitempty"`
	InfoURLGTE          *string  `json:"infoURLGTE,omitempty"`
	InfoURLLT           *string  `json:"infoURLLT,omitempty"`
	InfoURLLTE          *string  `json:"infoURLLTE,omitempty"`
	InfoURLContains     *string  `json:"infoURLContains,omitempty"`
	InfoURLHasPrefix    *string  `json:"infoURLHasPrefix,omitempty"`
	InfoURLHasSuffix    *string  `json:"infoURLHasSuffix,omitempty"`
	InfoURLEqualFold    *string  `json:"infoURLEqualFold,omitempty"`
	InfoURLContainsFold *string  `json:"infoURLContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OauthProviderWhereInput) AddPredicates(predicates ...predicate.OauthProvider) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OauthProviderWhereInput filter on the OauthProviderQuery builder.
func (i *OauthProviderWhereInput) Filter(q *OauthProviderQuery) (*OauthProviderQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOauthProviderWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOauthProviderWhereInput is returned in case the OauthProviderWhereInput is empty.
var ErrEmptyOauthProviderWhereInput = errors.New("generated: empty predicate OauthProviderWhereInput")

// P returns a predicate for filtering oauthproviders.
// An error is returned if the input is empty or invalid.
func (i *OauthProviderWhereInput) P() (predicate.OauthProvider, error) {
	var predicates []predicate.OauthProvider
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, oauthprovider.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OauthProvider, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, oauthprovider.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OauthProvider, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, oauthprovider.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, oauthprovider.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, oauthprovider.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, oauthprovider.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, oauthprovider.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, oauthprovider.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, oauthprovider.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, oauthprovider.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, oauthprovider.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, oauthprovider.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, oauthprovider.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, oauthprovider.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, oauthprovider.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, oauthprovider.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, oauthprovider.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, oauthprovider.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, oauthprovider.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, oauthprovider.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, oauthprovider.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, oauthprovider.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, oauthprovider.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, oauthprovider.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, oauthprovider.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, oauthprovider.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, oauthprovider.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, oauthprovider.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, oauthprovider.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, oauthprovider.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, oauthprovider.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, oauthprovider.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, oauthprovider.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, oauthprovider.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, oauthprovider.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, oauthprovider.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, oauthprovider.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, oauthprovider.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, oauthprovider.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, oauthprovider.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, oauthprovider.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, oauthprovider.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, oauthprovider.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, oauthprovider.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, oauthprovider.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, oauthprovider.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, oauthprovider.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, oauthprovider.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, oauthprovider.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, oauthprovider.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, oauthprovider.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, oauthprovider.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, oauthprovider.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, oauthprovider.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, oauthprovider.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, oauthprovider.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, oauthprovider.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, oauthprovider.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, oauthprovider.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, oauthprovider.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, oauthprovider.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, oauthprovider.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, oauthprovider.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, oauthprovider.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, oauthprovider.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, oauthprovider.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, oauthprovider.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, oauthprovider.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, oauthprovider.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, oauthprovider.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, oauthprovider.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, oauthprovider.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, oauthprovider.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, oauthprovider.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, oauthprovider.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, oauthprovider.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, oauthprovider.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, oauthprovider.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, oauthprovider.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, oauthprovider.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, oauthprovider.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, oauthprovider.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, oauthprovider.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, oauthprovider.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, oauthprovider.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, oauthprovider.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, oauthprovider.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, oauthprovider.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, oauthprovider.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, oauthprovider.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, oauthprovider.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, oauthprovider.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, oauthprovider.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, oauthprovider.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, oauthprovider.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, oauthprovider.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, oauthprovider.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, oauthprovider.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, oauthprovider.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, oauthprovider.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, oauthprovider.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, oauthprovider.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, oauthprovider.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, oauthprovider.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, oauthprovider.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, oauthprovider.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, oauthprovider.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, oauthprovider.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, oauthprovider.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, oauthprovider.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, oauthprovider.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, oauthprovider.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, oauthprovider.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, oauthprovider.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, oauthprovider.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, oauthprovider.NameContainsFold(*i.NameContainsFold))
	}
	if i.ClientID != nil {
		predicates = append(predicates, oauthprovider.ClientIDEQ(*i.ClientID))
	}
	if i.ClientIDNEQ != nil {
		predicates = append(predicates, oauthprovider.ClientIDNEQ(*i.ClientIDNEQ))
	}
	if len(i.ClientIDIn) > 0 {
		predicates = append(predicates, oauthprovider.ClientIDIn(i.ClientIDIn...))
	}
	if len(i.ClientIDNotIn) > 0 {
		predicates = append(predicates, oauthprovider.ClientIDNotIn(i.ClientIDNotIn...))
	}
	if i.ClientIDGT != nil {
		predicates = append(predicates, oauthprovider.ClientIDGT(*i.ClientIDGT))
	}
	if i.ClientIDGTE != nil {
		predicates = append(predicates, oauthprovider.ClientIDGTE(*i.ClientIDGTE))
	}
	if i.ClientIDLT != nil {
		predicates = append(predicates, oauthprovider.ClientIDLT(*i.ClientIDLT))
	}
	if i.ClientIDLTE != nil {
		predicates = append(predicates, oauthprovider.ClientIDLTE(*i.ClientIDLTE))
	}
	if i.ClientIDContains != nil {
		predicates = append(predicates, oauthprovider.ClientIDContains(*i.ClientIDContains))
	}
	if i.ClientIDHasPrefix != nil {
		predicates = append(predicates, oauthprovider.ClientIDHasPrefix(*i.ClientIDHasPrefix))
	}
	if i.ClientIDHasSuffix != nil {
		predicates = append(predicates, oauthprovider.ClientIDHasSuffix(*i.ClientIDHasSuffix))
	}
	if i.ClientIDEqualFold != nil {
		predicates = append(predicates, oauthprovider.ClientIDEqualFold(*i.ClientIDEqualFold))
	}
	if i.ClientIDContainsFold != nil {
		predicates = append(predicates, oauthprovider.ClientIDContainsFold(*i.ClientIDContainsFold))
	}
	if i.ClientSecret != nil {
		predicates = append(predicates, oauthprovider.ClientSecretEQ(*i.ClientSecret))
	}
	if i.ClientSecretNEQ != nil {
		predicates = append(predicates, oauthprovider.ClientSecretNEQ(*i.ClientSecretNEQ))
	}
	if len(i.ClientSecretIn) > 0 {
		predicates = append(predicates, oauthprovider.ClientSecretIn(i.ClientSecretIn...))
	}
	if len(i.ClientSecretNotIn) > 0 {
		predicates = append(predicates, oauthprovider.ClientSecretNotIn(i.ClientSecretNotIn...))
	}
	if i.ClientSecretGT != nil {
		predicates = append(predicates, oauthprovider.ClientSecretGT(*i.ClientSecretGT))
	}
	if i.ClientSecretGTE != nil {
		predicates = append(predicates, oauthprovider.ClientSecretGTE(*i.ClientSecretGTE))
	}
	if i.ClientSecretLT != nil {
		predicates = append(predicates, oauthprovider.ClientSecretLT(*i.ClientSecretLT))
	}
	if i.ClientSecretLTE != nil {
		predicates = append(predicates, oauthprovider.ClientSecretLTE(*i.ClientSecretLTE))
	}
	if i.ClientSecretContains != nil {
		predicates = append(predicates, oauthprovider.ClientSecretContains(*i.ClientSecretContains))
	}
	if i.ClientSecretHasPrefix != nil {
		predicates = append(predicates, oauthprovider.ClientSecretHasPrefix(*i.ClientSecretHasPrefix))
	}
	if i.ClientSecretHasSuffix != nil {
		predicates = append(predicates, oauthprovider.ClientSecretHasSuffix(*i.ClientSecretHasSuffix))
	}
	if i.ClientSecretEqualFold != nil {
		predicates = append(predicates, oauthprovider.ClientSecretEqualFold(*i.ClientSecretEqualFold))
	}
	if i.ClientSecretContainsFold != nil {
		predicates = append(predicates, oauthprovider.ClientSecretContainsFold(*i.ClientSecretContainsFold))
	}
	if i.RedirectURL != nil {
		predicates = append(predicates, oauthprovider.RedirectURLEQ(*i.RedirectURL))
	}
	if i.RedirectURLNEQ != nil {
		predicates = append(predicates, oauthprovider.RedirectURLNEQ(*i.RedirectURLNEQ))
	}
	if len(i.RedirectURLIn) > 0 {
		predicates = append(predicates, oauthprovider.RedirectURLIn(i.RedirectURLIn...))
	}
	if len(i.RedirectURLNotIn) > 0 {
		predicates = append(predicates, oauthprovider.RedirectURLNotIn(i.RedirectURLNotIn...))
	}
	if i.RedirectURLGT != nil {
		predicates = append(predicates, oauthprovider.RedirectURLGT(*i.RedirectURLGT))
	}
	if i.RedirectURLGTE != nil {
		predicates = append(predicates, oauthprovider.RedirectURLGTE(*i.RedirectURLGTE))
	}
	if i.RedirectURLLT != nil {
		predicates = append(predicates, oauthprovider.RedirectURLLT(*i.RedirectURLLT))
	}
	if i.RedirectURLLTE != nil {
		predicates = append(predicates, oauthprovider.RedirectURLLTE(*i.RedirectURLLTE))
	}
	if i.RedirectURLContains != nil {
		predicates = append(predicates, oauthprovider.RedirectURLContains(*i.RedirectURLContains))
	}
	if i.RedirectURLHasPrefix != nil {
		predicates = append(predicates, oauthprovider.RedirectURLHasPrefix(*i.RedirectURLHasPrefix))
	}
	if i.RedirectURLHasSuffix != nil {
		predicates = append(predicates, oauthprovider.RedirectURLHasSuffix(*i.RedirectURLHasSuffix))
	}
	if i.RedirectURLEqualFold != nil {
		predicates = append(predicates, oauthprovider.RedirectURLEqualFold(*i.RedirectURLEqualFold))
	}
	if i.RedirectURLContainsFold != nil {
		predicates = append(predicates, oauthprovider.RedirectURLContainsFold(*i.RedirectURLContainsFold))
	}
	if i.Scopes != nil {
		predicates = append(predicates, oauthprovider.ScopesEQ(*i.Scopes))
	}
	if i.ScopesNEQ != nil {
		predicates = append(predicates, oauthprovider.ScopesNEQ(*i.ScopesNEQ))
	}
	if len(i.ScopesIn) > 0 {
		predicates = append(predicates, oauthprovider.ScopesIn(i.ScopesIn...))
	}
	if len(i.ScopesNotIn) > 0 {
		predicates = append(predicates, oauthprovider.ScopesNotIn(i.ScopesNotIn...))
	}
	if i.ScopesGT != nil {
		predicates = append(predicates, oauthprovider.ScopesGT(*i.ScopesGT))
	}
	if i.ScopesGTE != nil {
		predicates = append(predicates, oauthprovider.ScopesGTE(*i.ScopesGTE))
	}
	if i.ScopesLT != nil {
		predicates = append(predicates, oauthprovider.ScopesLT(*i.ScopesLT))
	}
	if i.ScopesLTE != nil {
		predicates = append(predicates, oauthprovider.ScopesLTE(*i.ScopesLTE))
	}
	if i.ScopesContains != nil {
		predicates = append(predicates, oauthprovider.ScopesContains(*i.ScopesContains))
	}
	if i.ScopesHasPrefix != nil {
		predicates = append(predicates, oauthprovider.ScopesHasPrefix(*i.ScopesHasPrefix))
	}
	if i.ScopesHasSuffix != nil {
		predicates = append(predicates, oauthprovider.ScopesHasSuffix(*i.ScopesHasSuffix))
	}
	if i.ScopesEqualFold != nil {
		predicates = append(predicates, oauthprovider.ScopesEqualFold(*i.ScopesEqualFold))
	}
	if i.ScopesContainsFold != nil {
		predicates = append(predicates, oauthprovider.ScopesContainsFold(*i.ScopesContainsFold))
	}
	if i.AuthURL != nil {
		predicates = append(predicates, oauthprovider.AuthURLEQ(*i.AuthURL))
	}
	if i.AuthURLNEQ != nil {
		predicates = append(predicates, oauthprovider.AuthURLNEQ(*i.AuthURLNEQ))
	}
	if len(i.AuthURLIn) > 0 {
		predicates = append(predicates, oauthprovider.AuthURLIn(i.AuthURLIn...))
	}
	if len(i.AuthURLNotIn) > 0 {
		predicates = append(predicates, oauthprovider.AuthURLNotIn(i.AuthURLNotIn...))
	}
	if i.AuthURLGT != nil {
		predicates = append(predicates, oauthprovider.AuthURLGT(*i.AuthURLGT))
	}
	if i.AuthURLGTE != nil {
		predicates = append(predicates, oauthprovider.AuthURLGTE(*i.AuthURLGTE))
	}
	if i.AuthURLLT != nil {
		predicates = append(predicates, oauthprovider.AuthURLLT(*i.AuthURLLT))
	}
	if i.AuthURLLTE != nil {
		predicates = append(predicates, oauthprovider.AuthURLLTE(*i.AuthURLLTE))
	}
	if i.AuthURLContains != nil {
		predicates = append(predicates, oauthprovider.AuthURLContains(*i.AuthURLContains))
	}
	if i.AuthURLHasPrefix != nil {
		predicates = append(predicates, oauthprovider.AuthURLHasPrefix(*i.AuthURLHasPrefix))
	}
	if i.AuthURLHasSuffix != nil {
		predicates = append(predicates, oauthprovider.AuthURLHasSuffix(*i.AuthURLHasSuffix))
	}
	if i.AuthURLEqualFold != nil {
		predicates = append(predicates, oauthprovider.AuthURLEqualFold(*i.AuthURLEqualFold))
	}
	if i.AuthURLContainsFold != nil {
		predicates = append(predicates, oauthprovider.AuthURLContainsFold(*i.AuthURLContainsFold))
	}
	if i.TokenURL != nil {
		predicates = append(predicates, oauthprovider.TokenURLEQ(*i.TokenURL))
	}
	if i.TokenURLNEQ != nil {
		predicates = append(predicates, oauthprovider.TokenURLNEQ(*i.TokenURLNEQ))
	}
	if len(i.TokenURLIn) > 0 {
		predicates = append(predicates, oauthprovider.TokenURLIn(i.TokenURLIn...))
	}
	if len(i.TokenURLNotIn) > 0 {
		predicates = append(predicates, oauthprovider.TokenURLNotIn(i.TokenURLNotIn...))
	}
	if i.TokenURLGT != nil {
		predicates = append(predicates, oauthprovider.TokenURLGT(*i.TokenURLGT))
	}
	if i.TokenURLGTE != nil {
		predicates = append(predicates, oauthprovider.TokenURLGTE(*i.TokenURLGTE))
	}
	if i.TokenURLLT != nil {
		predicates = append(predicates, oauthprovider.TokenURLLT(*i.TokenURLLT))
	}
	if i.TokenURLLTE != nil {
		predicates = append(predicates, oauthprovider.TokenURLLTE(*i.TokenURLLTE))
	}
	if i.TokenURLContains != nil {
		predicates = append(predicates, oauthprovider.TokenURLContains(*i.TokenURLContains))
	}
	if i.TokenURLHasPrefix != nil {
		predicates = append(predicates, oauthprovider.TokenURLHasPrefix(*i.TokenURLHasPrefix))
	}
	if i.TokenURLHasSuffix != nil {
		predicates = append(predicates, oauthprovider.TokenURLHasSuffix(*i.TokenURLHasSuffix))
	}
	if i.TokenURLEqualFold != nil {
		predicates = append(predicates, oauthprovider.TokenURLEqualFold(*i.TokenURLEqualFold))
	}
	if i.TokenURLContainsFold != nil {
		predicates = append(predicates, oauthprovider.TokenURLContainsFold(*i.TokenURLContainsFold))
	}
	if i.AuthStyle != nil {
		predicates = append(predicates, oauthprovider.AuthStyleEQ(*i.AuthStyle))
	}
	if i.AuthStyleNEQ != nil {
		predicates = append(predicates, oauthprovider.AuthStyleNEQ(*i.AuthStyleNEQ))
	}
	if len(i.AuthStyleIn) > 0 {
		predicates = append(predicates, oauthprovider.AuthStyleIn(i.AuthStyleIn...))
	}
	if len(i.AuthStyleNotIn) > 0 {
		predicates = append(predicates, oauthprovider.AuthStyleNotIn(i.AuthStyleNotIn...))
	}
	if i.AuthStyleGT != nil {
		predicates = append(predicates, oauthprovider.AuthStyleGT(*i.AuthStyleGT))
	}
	if i.AuthStyleGTE != nil {
		predicates = append(predicates, oauthprovider.AuthStyleGTE(*i.AuthStyleGTE))
	}
	if i.AuthStyleLT != nil {
		predicates = append(predicates, oauthprovider.AuthStyleLT(*i.AuthStyleLT))
	}
	if i.AuthStyleLTE != nil {
		predicates = append(predicates, oauthprovider.AuthStyleLTE(*i.AuthStyleLTE))
	}
	if i.InfoURL != nil {
		predicates = append(predicates, oauthprovider.InfoURLEQ(*i.InfoURL))
	}
	if i.InfoURLNEQ != nil {
		predicates = append(predicates, oauthprovider.InfoURLNEQ(*i.InfoURLNEQ))
	}
	if len(i.InfoURLIn) > 0 {
		predicates = append(predicates, oauthprovider.InfoURLIn(i.InfoURLIn...))
	}
	if len(i.InfoURLNotIn) > 0 {
		predicates = append(predicates, oauthprovider.InfoURLNotIn(i.InfoURLNotIn...))
	}
	if i.InfoURLGT != nil {
		predicates = append(predicates, oauthprovider.InfoURLGT(*i.InfoURLGT))
	}
	if i.InfoURLGTE != nil {
		predicates = append(predicates, oauthprovider.InfoURLGTE(*i.InfoURLGTE))
	}
	if i.InfoURLLT != nil {
		predicates = append(predicates, oauthprovider.InfoURLLT(*i.InfoURLLT))
	}
	if i.InfoURLLTE != nil {
		predicates = append(predicates, oauthprovider.InfoURLLTE(*i.InfoURLLTE))
	}
	if i.InfoURLContains != nil {
		predicates = append(predicates, oauthprovider.InfoURLContains(*i.InfoURLContains))
	}
	if i.InfoURLHasPrefix != nil {
		predicates = append(predicates, oauthprovider.InfoURLHasPrefix(*i.InfoURLHasPrefix))
	}
	if i.InfoURLHasSuffix != nil {
		predicates = append(predicates, oauthprovider.InfoURLHasSuffix(*i.InfoURLHasSuffix))
	}
	if i.InfoURLEqualFold != nil {
		predicates = append(predicates, oauthprovider.InfoURLEqualFold(*i.InfoURLEqualFold))
	}
	if i.InfoURLContainsFold != nil {
		predicates = append(predicates, oauthprovider.InfoURLContainsFold(*i.InfoURLContainsFold))
	}

	if i.HasOwner != nil {
		p := oauthprovider.HasOwner()
		if !*i.HasOwner {
			p = oauthprovider.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, oauthprovider.HasOwnerWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOauthProviderWhereInput
	case 1:
		return predicates[0], nil
	default:
		return oauthprovider.And(predicates...), nil
	}
}

// OauthProviderHistoryWhereInput represents a where input for filtering OauthProviderHistory queries.
type OauthProviderHistoryWhereInput struct {
	Predicates []predicate.OauthProviderHistory  `json:"-"`
	Not        *OauthProviderHistoryWhereInput   `json:"not,omitempty"`
	Or         []*OauthProviderHistoryWhereInput `json:"or,omitempty"`
	And        []*OauthProviderHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "client_id" field predicates.
	ClientID             *string  `json:"clientID,omitempty"`
	ClientIDNEQ          *string  `json:"clientIDNEQ,omitempty"`
	ClientIDIn           []string `json:"clientIDIn,omitempty"`
	ClientIDNotIn        []string `json:"clientIDNotIn,omitempty"`
	ClientIDGT           *string  `json:"clientIDGT,omitempty"`
	ClientIDGTE          *string  `json:"clientIDGTE,omitempty"`
	ClientIDLT           *string  `json:"clientIDLT,omitempty"`
	ClientIDLTE          *string  `json:"clientIDLTE,omitempty"`
	ClientIDContains     *string  `json:"clientIDContains,omitempty"`
	ClientIDHasPrefix    *string  `json:"clientIDHasPrefix,omitempty"`
	ClientIDHasSuffix    *string  `json:"clientIDHasSuffix,omitempty"`
	ClientIDEqualFold    *string  `json:"clientIDEqualFold,omitempty"`
	ClientIDContainsFold *string  `json:"clientIDContainsFold,omitempty"`

	// "client_secret" field predicates.
	ClientSecret             *string  `json:"clientSecret,omitempty"`
	ClientSecretNEQ          *string  `json:"clientSecretNEQ,omitempty"`
	ClientSecretIn           []string `json:"clientSecretIn,omitempty"`
	ClientSecretNotIn        []string `json:"clientSecretNotIn,omitempty"`
	ClientSecretGT           *string  `json:"clientSecretGT,omitempty"`
	ClientSecretGTE          *string  `json:"clientSecretGTE,omitempty"`
	ClientSecretLT           *string  `json:"clientSecretLT,omitempty"`
	ClientSecretLTE          *string  `json:"clientSecretLTE,omitempty"`
	ClientSecretContains     *string  `json:"clientSecretContains,omitempty"`
	ClientSecretHasPrefix    *string  `json:"clientSecretHasPrefix,omitempty"`
	ClientSecretHasSuffix    *string  `json:"clientSecretHasSuffix,omitempty"`
	ClientSecretEqualFold    *string  `json:"clientSecretEqualFold,omitempty"`
	ClientSecretContainsFold *string  `json:"clientSecretContainsFold,omitempty"`

	// "redirect_url" field predicates.
	RedirectURL             *string  `json:"redirectURL,omitempty"`
	RedirectURLNEQ          *string  `json:"redirectURLNEQ,omitempty"`
	RedirectURLIn           []string `json:"redirectURLIn,omitempty"`
	RedirectURLNotIn        []string `json:"redirectURLNotIn,omitempty"`
	RedirectURLGT           *string  `json:"redirectURLGT,omitempty"`
	RedirectURLGTE          *string  `json:"redirectURLGTE,omitempty"`
	RedirectURLLT           *string  `json:"redirectURLLT,omitempty"`
	RedirectURLLTE          *string  `json:"redirectURLLTE,omitempty"`
	RedirectURLContains     *string  `json:"redirectURLContains,omitempty"`
	RedirectURLHasPrefix    *string  `json:"redirectURLHasPrefix,omitempty"`
	RedirectURLHasSuffix    *string  `json:"redirectURLHasSuffix,omitempty"`
	RedirectURLEqualFold    *string  `json:"redirectURLEqualFold,omitempty"`
	RedirectURLContainsFold *string  `json:"redirectURLContainsFold,omitempty"`

	// "scopes" field predicates.
	Scopes             *string  `json:"scopes,omitempty"`
	ScopesNEQ          *string  `json:"scopesNEQ,omitempty"`
	ScopesIn           []string `json:"scopesIn,omitempty"`
	ScopesNotIn        []string `json:"scopesNotIn,omitempty"`
	ScopesGT           *string  `json:"scopesGT,omitempty"`
	ScopesGTE          *string  `json:"scopesGTE,omitempty"`
	ScopesLT           *string  `json:"scopesLT,omitempty"`
	ScopesLTE          *string  `json:"scopesLTE,omitempty"`
	ScopesContains     *string  `json:"scopesContains,omitempty"`
	ScopesHasPrefix    *string  `json:"scopesHasPrefix,omitempty"`
	ScopesHasSuffix    *string  `json:"scopesHasSuffix,omitempty"`
	ScopesEqualFold    *string  `json:"scopesEqualFold,omitempty"`
	ScopesContainsFold *string  `json:"scopesContainsFold,omitempty"`

	// "auth_url" field predicates.
	AuthURL             *string  `json:"authURL,omitempty"`
	AuthURLNEQ          *string  `json:"authURLNEQ,omitempty"`
	AuthURLIn           []string `json:"authURLIn,omitempty"`
	AuthURLNotIn        []string `json:"authURLNotIn,omitempty"`
	AuthURLGT           *string  `json:"authURLGT,omitempty"`
	AuthURLGTE          *string  `json:"authURLGTE,omitempty"`
	AuthURLLT           *string  `json:"authURLLT,omitempty"`
	AuthURLLTE          *string  `json:"authURLLTE,omitempty"`
	AuthURLContains     *string  `json:"authURLContains,omitempty"`
	AuthURLHasPrefix    *string  `json:"authURLHasPrefix,omitempty"`
	AuthURLHasSuffix    *string  `json:"authURLHasSuffix,omitempty"`
	AuthURLEqualFold    *string  `json:"authURLEqualFold,omitempty"`
	AuthURLContainsFold *string  `json:"authURLContainsFold,omitempty"`

	// "token_url" field predicates.
	TokenURL             *string  `json:"tokenURL,omitempty"`
	TokenURLNEQ          *string  `json:"tokenURLNEQ,omitempty"`
	TokenURLIn           []string `json:"tokenURLIn,omitempty"`
	TokenURLNotIn        []string `json:"tokenURLNotIn,omitempty"`
	TokenURLGT           *string  `json:"tokenURLGT,omitempty"`
	TokenURLGTE          *string  `json:"tokenURLGTE,omitempty"`
	TokenURLLT           *string  `json:"tokenURLLT,omitempty"`
	TokenURLLTE          *string  `json:"tokenURLLTE,omitempty"`
	TokenURLContains     *string  `json:"tokenURLContains,omitempty"`
	TokenURLHasPrefix    *string  `json:"tokenURLHasPrefix,omitempty"`
	TokenURLHasSuffix    *string  `json:"tokenURLHasSuffix,omitempty"`
	TokenURLEqualFold    *string  `json:"tokenURLEqualFold,omitempty"`
	TokenURLContainsFold *string  `json:"tokenURLContainsFold,omitempty"`

	// "auth_style" field predicates.
	AuthStyle      *customtypes.Uint8  `json:"authStyle,omitempty"`
	AuthStyleNEQ   *customtypes.Uint8  `json:"authStyleNEQ,omitempty"`
	AuthStyleIn    []customtypes.Uint8 `json:"authStyleIn,omitempty"`
	AuthStyleNotIn []customtypes.Uint8 `json:"authStyleNotIn,omitempty"`
	AuthStyleGT    *customtypes.Uint8  `json:"authStyleGT,omitempty"`
	AuthStyleGTE   *customtypes.Uint8  `json:"authStyleGTE,omitempty"`
	AuthStyleLT    *customtypes.Uint8  `json:"authStyleLT,omitempty"`
	AuthStyleLTE   *customtypes.Uint8  `json:"authStyleLTE,omitempty"`

	// "info_url" field predicates.
	InfoURL             *string  `json:"infoURL,omitempty"`
	InfoURLNEQ          *string  `json:"infoURLNEQ,omitempty"`
	InfoURLIn           []string `json:"infoURLIn,omitempty"`
	InfoURLNotIn        []string `json:"infoURLNotIn,omitempty"`
	InfoURLGT           *string  `json:"infoURLGT,omitempty"`
	InfoURLGTE          *string  `json:"infoURLGTE,omitempty"`
	InfoURLLT           *string  `json:"infoURLLT,omitempty"`
	InfoURLLTE          *string  `json:"infoURLLTE,omitempty"`
	InfoURLContains     *string  `json:"infoURLContains,omitempty"`
	InfoURLHasPrefix    *string  `json:"infoURLHasPrefix,omitempty"`
	InfoURLHasSuffix    *string  `json:"infoURLHasSuffix,omitempty"`
	InfoURLEqualFold    *string  `json:"infoURLEqualFold,omitempty"`
	InfoURLContainsFold *string  `json:"infoURLContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OauthProviderHistoryWhereInput) AddPredicates(predicates ...predicate.OauthProviderHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OauthProviderHistoryWhereInput filter on the OauthProviderHistoryQuery builder.
func (i *OauthProviderHistoryWhereInput) Filter(q *OauthProviderHistoryQuery) (*OauthProviderHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOauthProviderHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOauthProviderHistoryWhereInput is returned in case the OauthProviderHistoryWhereInput is empty.
var ErrEmptyOauthProviderHistoryWhereInput = errors.New("generated: empty predicate OauthProviderHistoryWhereInput")

// P returns a predicate for filtering oauthproviderhistories.
// An error is returned if the input is empty or invalid.
func (i *OauthProviderHistoryWhereInput) P() (predicate.OauthProviderHistory, error) {
	var predicates []predicate.OauthProviderHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, oauthproviderhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OauthProviderHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, oauthproviderhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OauthProviderHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, oauthproviderhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, oauthproviderhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, oauthproviderhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, oauthproviderhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, oauthproviderhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, oauthproviderhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, oauthproviderhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, oauthproviderhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, oauthproviderhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, oauthproviderhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, oauthproviderhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, oauthproviderhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, oauthproviderhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, oauthproviderhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, oauthproviderhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, oauthproviderhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, oauthproviderhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, oauthproviderhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, oauthproviderhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, oauthproviderhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, oauthproviderhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, oauthproviderhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, oauthproviderhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, oauthproviderhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, oauthproviderhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, oauthproviderhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, oauthproviderhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, oauthproviderhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, oauthproviderhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, oauthproviderhistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, oauthproviderhistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, oauthproviderhistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, oauthproviderhistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, oauthproviderhistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, oauthproviderhistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.ClientID != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDEQ(*i.ClientID))
	}
	if i.ClientIDNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDNEQ(*i.ClientIDNEQ))
	}
	if len(i.ClientIDIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.ClientIDIn(i.ClientIDIn...))
	}
	if len(i.ClientIDNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.ClientIDNotIn(i.ClientIDNotIn...))
	}
	if i.ClientIDGT != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDGT(*i.ClientIDGT))
	}
	if i.ClientIDGTE != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDGTE(*i.ClientIDGTE))
	}
	if i.ClientIDLT != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDLT(*i.ClientIDLT))
	}
	if i.ClientIDLTE != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDLTE(*i.ClientIDLTE))
	}
	if i.ClientIDContains != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDContains(*i.ClientIDContains))
	}
	if i.ClientIDHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDHasPrefix(*i.ClientIDHasPrefix))
	}
	if i.ClientIDHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDHasSuffix(*i.ClientIDHasSuffix))
	}
	if i.ClientIDEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDEqualFold(*i.ClientIDEqualFold))
	}
	if i.ClientIDContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.ClientIDContainsFold(*i.ClientIDContainsFold))
	}
	if i.ClientSecret != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretEQ(*i.ClientSecret))
	}
	if i.ClientSecretNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretNEQ(*i.ClientSecretNEQ))
	}
	if len(i.ClientSecretIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.ClientSecretIn(i.ClientSecretIn...))
	}
	if len(i.ClientSecretNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.ClientSecretNotIn(i.ClientSecretNotIn...))
	}
	if i.ClientSecretGT != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretGT(*i.ClientSecretGT))
	}
	if i.ClientSecretGTE != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretGTE(*i.ClientSecretGTE))
	}
	if i.ClientSecretLT != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretLT(*i.ClientSecretLT))
	}
	if i.ClientSecretLTE != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretLTE(*i.ClientSecretLTE))
	}
	if i.ClientSecretContains != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretContains(*i.ClientSecretContains))
	}
	if i.ClientSecretHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretHasPrefix(*i.ClientSecretHasPrefix))
	}
	if i.ClientSecretHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretHasSuffix(*i.ClientSecretHasSuffix))
	}
	if i.ClientSecretEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretEqualFold(*i.ClientSecretEqualFold))
	}
	if i.ClientSecretContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.ClientSecretContainsFold(*i.ClientSecretContainsFold))
	}
	if i.RedirectURL != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLEQ(*i.RedirectURL))
	}
	if i.RedirectURLNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLNEQ(*i.RedirectURLNEQ))
	}
	if len(i.RedirectURLIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.RedirectURLIn(i.RedirectURLIn...))
	}
	if len(i.RedirectURLNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.RedirectURLNotIn(i.RedirectURLNotIn...))
	}
	if i.RedirectURLGT != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLGT(*i.RedirectURLGT))
	}
	if i.RedirectURLGTE != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLGTE(*i.RedirectURLGTE))
	}
	if i.RedirectURLLT != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLLT(*i.RedirectURLLT))
	}
	if i.RedirectURLLTE != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLLTE(*i.RedirectURLLTE))
	}
	if i.RedirectURLContains != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLContains(*i.RedirectURLContains))
	}
	if i.RedirectURLHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLHasPrefix(*i.RedirectURLHasPrefix))
	}
	if i.RedirectURLHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLHasSuffix(*i.RedirectURLHasSuffix))
	}
	if i.RedirectURLEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLEqualFold(*i.RedirectURLEqualFold))
	}
	if i.RedirectURLContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.RedirectURLContainsFold(*i.RedirectURLContainsFold))
	}
	if i.Scopes != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesEQ(*i.Scopes))
	}
	if i.ScopesNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesNEQ(*i.ScopesNEQ))
	}
	if len(i.ScopesIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.ScopesIn(i.ScopesIn...))
	}
	if len(i.ScopesNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.ScopesNotIn(i.ScopesNotIn...))
	}
	if i.ScopesGT != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesGT(*i.ScopesGT))
	}
	if i.ScopesGTE != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesGTE(*i.ScopesGTE))
	}
	if i.ScopesLT != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesLT(*i.ScopesLT))
	}
	if i.ScopesLTE != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesLTE(*i.ScopesLTE))
	}
	if i.ScopesContains != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesContains(*i.ScopesContains))
	}
	if i.ScopesHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesHasPrefix(*i.ScopesHasPrefix))
	}
	if i.ScopesHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesHasSuffix(*i.ScopesHasSuffix))
	}
	if i.ScopesEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesEqualFold(*i.ScopesEqualFold))
	}
	if i.ScopesContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.ScopesContainsFold(*i.ScopesContainsFold))
	}
	if i.AuthURL != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLEQ(*i.AuthURL))
	}
	if i.AuthURLNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLNEQ(*i.AuthURLNEQ))
	}
	if len(i.AuthURLIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.AuthURLIn(i.AuthURLIn...))
	}
	if len(i.AuthURLNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.AuthURLNotIn(i.AuthURLNotIn...))
	}
	if i.AuthURLGT != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLGT(*i.AuthURLGT))
	}
	if i.AuthURLGTE != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLGTE(*i.AuthURLGTE))
	}
	if i.AuthURLLT != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLLT(*i.AuthURLLT))
	}
	if i.AuthURLLTE != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLLTE(*i.AuthURLLTE))
	}
	if i.AuthURLContains != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLContains(*i.AuthURLContains))
	}
	if i.AuthURLHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLHasPrefix(*i.AuthURLHasPrefix))
	}
	if i.AuthURLHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLHasSuffix(*i.AuthURLHasSuffix))
	}
	if i.AuthURLEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLEqualFold(*i.AuthURLEqualFold))
	}
	if i.AuthURLContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.AuthURLContainsFold(*i.AuthURLContainsFold))
	}
	if i.TokenURL != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLEQ(*i.TokenURL))
	}
	if i.TokenURLNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLNEQ(*i.TokenURLNEQ))
	}
	if len(i.TokenURLIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.TokenURLIn(i.TokenURLIn...))
	}
	if len(i.TokenURLNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.TokenURLNotIn(i.TokenURLNotIn...))
	}
	if i.TokenURLGT != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLGT(*i.TokenURLGT))
	}
	if i.TokenURLGTE != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLGTE(*i.TokenURLGTE))
	}
	if i.TokenURLLT != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLLT(*i.TokenURLLT))
	}
	if i.TokenURLLTE != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLLTE(*i.TokenURLLTE))
	}
	if i.TokenURLContains != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLContains(*i.TokenURLContains))
	}
	if i.TokenURLHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLHasPrefix(*i.TokenURLHasPrefix))
	}
	if i.TokenURLHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLHasSuffix(*i.TokenURLHasSuffix))
	}
	if i.TokenURLEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLEqualFold(*i.TokenURLEqualFold))
	}
	if i.TokenURLContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.TokenURLContainsFold(*i.TokenURLContainsFold))
	}
	if i.AuthStyle != nil {
		predicates = append(predicates, oauthproviderhistory.AuthStyleEQ(*i.AuthStyle))
	}
	if i.AuthStyleNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.AuthStyleNEQ(*i.AuthStyleNEQ))
	}
	if len(i.AuthStyleIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.AuthStyleIn(i.AuthStyleIn...))
	}
	if len(i.AuthStyleNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.AuthStyleNotIn(i.AuthStyleNotIn...))
	}
	if i.AuthStyleGT != nil {
		predicates = append(predicates, oauthproviderhistory.AuthStyleGT(*i.AuthStyleGT))
	}
	if i.AuthStyleGTE != nil {
		predicates = append(predicates, oauthproviderhistory.AuthStyleGTE(*i.AuthStyleGTE))
	}
	if i.AuthStyleLT != nil {
		predicates = append(predicates, oauthproviderhistory.AuthStyleLT(*i.AuthStyleLT))
	}
	if i.AuthStyleLTE != nil {
		predicates = append(predicates, oauthproviderhistory.AuthStyleLTE(*i.AuthStyleLTE))
	}
	if i.InfoURL != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLEQ(*i.InfoURL))
	}
	if i.InfoURLNEQ != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLNEQ(*i.InfoURLNEQ))
	}
	if len(i.InfoURLIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.InfoURLIn(i.InfoURLIn...))
	}
	if len(i.InfoURLNotIn) > 0 {
		predicates = append(predicates, oauthproviderhistory.InfoURLNotIn(i.InfoURLNotIn...))
	}
	if i.InfoURLGT != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLGT(*i.InfoURLGT))
	}
	if i.InfoURLGTE != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLGTE(*i.InfoURLGTE))
	}
	if i.InfoURLLT != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLLT(*i.InfoURLLT))
	}
	if i.InfoURLLTE != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLLTE(*i.InfoURLLTE))
	}
	if i.InfoURLContains != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLContains(*i.InfoURLContains))
	}
	if i.InfoURLHasPrefix != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLHasPrefix(*i.InfoURLHasPrefix))
	}
	if i.InfoURLHasSuffix != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLHasSuffix(*i.InfoURLHasSuffix))
	}
	if i.InfoURLEqualFold != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLEqualFold(*i.InfoURLEqualFold))
	}
	if i.InfoURLContainsFold != nil {
		predicates = append(predicates, oauthproviderhistory.InfoURLContainsFold(*i.InfoURLContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOauthProviderHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return oauthproviderhistory.And(predicates...), nil
	}
}

// OhAuthTooTokenWhereInput represents a where input for filtering OhAuthTooToken queries.
type OhAuthTooTokenWhereInput struct {
	Predicates []predicate.OhAuthTooToken  `json:"-"`
	Not        *OhAuthTooTokenWhereInput   `json:"not,omitempty"`
	Or         []*OhAuthTooTokenWhereInput `json:"or,omitempty"`
	And        []*OhAuthTooTokenWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "client_id" field predicates.
	ClientID             *string  `json:"clientID,omitempty"`
	ClientIDNEQ          *string  `json:"clientIDNEQ,omitempty"`
	ClientIDIn           []string `json:"clientIDIn,omitempty"`
	ClientIDNotIn        []string `json:"clientIDNotIn,omitempty"`
	ClientIDGT           *string  `json:"clientIDGT,omitempty"`
	ClientIDGTE          *string  `json:"clientIDGTE,omitempty"`
	ClientIDLT           *string  `json:"clientIDLT,omitempty"`
	ClientIDLTE          *string  `json:"clientIDLTE,omitempty"`
	ClientIDContains     *string  `json:"clientIDContains,omitempty"`
	ClientIDHasPrefix    *string  `json:"clientIDHasPrefix,omitempty"`
	ClientIDHasSuffix    *string  `json:"clientIDHasSuffix,omitempty"`
	ClientIDEqualFold    *string  `json:"clientIDEqualFold,omitempty"`
	ClientIDContainsFold *string  `json:"clientIDContainsFold,omitempty"`

	// "nonce" field predicates.
	Nonce             *string  `json:"nonce,omitempty"`
	NonceNEQ          *string  `json:"nonceNEQ,omitempty"`
	NonceIn           []string `json:"nonceIn,omitempty"`
	NonceNotIn        []string `json:"nonceNotIn,omitempty"`
	NonceGT           *string  `json:"nonceGT,omitempty"`
	NonceGTE          *string  `json:"nonceGTE,omitempty"`
	NonceLT           *string  `json:"nonceLT,omitempty"`
	NonceLTE          *string  `json:"nonceLTE,omitempty"`
	NonceContains     *string  `json:"nonceContains,omitempty"`
	NonceHasPrefix    *string  `json:"nonceHasPrefix,omitempty"`
	NonceHasSuffix    *string  `json:"nonceHasSuffix,omitempty"`
	NonceEqualFold    *string  `json:"nonceEqualFold,omitempty"`
	NonceContainsFold *string  `json:"nonceContainsFold,omitempty"`

	// "claims_user_id" field predicates.
	ClaimsUserID             *string  `json:"claimsUserID,omitempty"`
	ClaimsUserIDNEQ          *string  `json:"claimsUserIDNEQ,omitempty"`
	ClaimsUserIDIn           []string `json:"claimsUserIDIn,omitempty"`
	ClaimsUserIDNotIn        []string `json:"claimsUserIDNotIn,omitempty"`
	ClaimsUserIDGT           *string  `json:"claimsUserIDGT,omitempty"`
	ClaimsUserIDGTE          *string  `json:"claimsUserIDGTE,omitempty"`
	ClaimsUserIDLT           *string  `json:"claimsUserIDLT,omitempty"`
	ClaimsUserIDLTE          *string  `json:"claimsUserIDLTE,omitempty"`
	ClaimsUserIDContains     *string  `json:"claimsUserIDContains,omitempty"`
	ClaimsUserIDHasPrefix    *string  `json:"claimsUserIDHasPrefix,omitempty"`
	ClaimsUserIDHasSuffix    *string  `json:"claimsUserIDHasSuffix,omitempty"`
	ClaimsUserIDEqualFold    *string  `json:"claimsUserIDEqualFold,omitempty"`
	ClaimsUserIDContainsFold *string  `json:"claimsUserIDContainsFold,omitempty"`

	// "claims_username" field predicates.
	ClaimsUsername             *string  `json:"claimsUsername,omitempty"`
	ClaimsUsernameNEQ          *string  `json:"claimsUsernameNEQ,omitempty"`
	ClaimsUsernameIn           []string `json:"claimsUsernameIn,omitempty"`
	ClaimsUsernameNotIn        []string `json:"claimsUsernameNotIn,omitempty"`
	ClaimsUsernameGT           *string  `json:"claimsUsernameGT,omitempty"`
	ClaimsUsernameGTE          *string  `json:"claimsUsernameGTE,omitempty"`
	ClaimsUsernameLT           *string  `json:"claimsUsernameLT,omitempty"`
	ClaimsUsernameLTE          *string  `json:"claimsUsernameLTE,omitempty"`
	ClaimsUsernameContains     *string  `json:"claimsUsernameContains,omitempty"`
	ClaimsUsernameHasPrefix    *string  `json:"claimsUsernameHasPrefix,omitempty"`
	ClaimsUsernameHasSuffix    *string  `json:"claimsUsernameHasSuffix,omitempty"`
	ClaimsUsernameEqualFold    *string  `json:"claimsUsernameEqualFold,omitempty"`
	ClaimsUsernameContainsFold *string  `json:"claimsUsernameContainsFold,omitempty"`

	// "claims_email" field predicates.
	ClaimsEmail             *string  `json:"claimsEmail,omitempty"`
	ClaimsEmailNEQ          *string  `json:"claimsEmailNEQ,omitempty"`
	ClaimsEmailIn           []string `json:"claimsEmailIn,omitempty"`
	ClaimsEmailNotIn        []string `json:"claimsEmailNotIn,omitempty"`
	ClaimsEmailGT           *string  `json:"claimsEmailGT,omitempty"`
	ClaimsEmailGTE          *string  `json:"claimsEmailGTE,omitempty"`
	ClaimsEmailLT           *string  `json:"claimsEmailLT,omitempty"`
	ClaimsEmailLTE          *string  `json:"claimsEmailLTE,omitempty"`
	ClaimsEmailContains     *string  `json:"claimsEmailContains,omitempty"`
	ClaimsEmailHasPrefix    *string  `json:"claimsEmailHasPrefix,omitempty"`
	ClaimsEmailHasSuffix    *string  `json:"claimsEmailHasSuffix,omitempty"`
	ClaimsEmailEqualFold    *string  `json:"claimsEmailEqualFold,omitempty"`
	ClaimsEmailContainsFold *string  `json:"claimsEmailContainsFold,omitempty"`

	// "claims_email_verified" field predicates.
	ClaimsEmailVerified    *bool `json:"claimsEmailVerified,omitempty"`
	ClaimsEmailVerifiedNEQ *bool `json:"claimsEmailVerifiedNEQ,omitempty"`

	// "claims_preferred_username" field predicates.
	ClaimsPreferredUsername             *string  `json:"claimsPreferredUsername,omitempty"`
	ClaimsPreferredUsernameNEQ          *string  `json:"claimsPreferredUsernameNEQ,omitempty"`
	ClaimsPreferredUsernameIn           []string `json:"claimsPreferredUsernameIn,omitempty"`
	ClaimsPreferredUsernameNotIn        []string `json:"claimsPreferredUsernameNotIn,omitempty"`
	ClaimsPreferredUsernameGT           *string  `json:"claimsPreferredUsernameGT,omitempty"`
	ClaimsPreferredUsernameGTE          *string  `json:"claimsPreferredUsernameGTE,omitempty"`
	ClaimsPreferredUsernameLT           *string  `json:"claimsPreferredUsernameLT,omitempty"`
	ClaimsPreferredUsernameLTE          *string  `json:"claimsPreferredUsernameLTE,omitempty"`
	ClaimsPreferredUsernameContains     *string  `json:"claimsPreferredUsernameContains,omitempty"`
	ClaimsPreferredUsernameHasPrefix    *string  `json:"claimsPreferredUsernameHasPrefix,omitempty"`
	ClaimsPreferredUsernameHasSuffix    *string  `json:"claimsPreferredUsernameHasSuffix,omitempty"`
	ClaimsPreferredUsernameEqualFold    *string  `json:"claimsPreferredUsernameEqualFold,omitempty"`
	ClaimsPreferredUsernameContainsFold *string  `json:"claimsPreferredUsernameContainsFold,omitempty"`

	// "connector_id" field predicates.
	ConnectorID             *string  `json:"connectorID,omitempty"`
	ConnectorIDNEQ          *string  `json:"connectorIDNEQ,omitempty"`
	ConnectorIDIn           []string `json:"connectorIDIn,omitempty"`
	ConnectorIDNotIn        []string `json:"connectorIDNotIn,omitempty"`
	ConnectorIDGT           *string  `json:"connectorIDGT,omitempty"`
	ConnectorIDGTE          *string  `json:"connectorIDGTE,omitempty"`
	ConnectorIDLT           *string  `json:"connectorIDLT,omitempty"`
	ConnectorIDLTE          *string  `json:"connectorIDLTE,omitempty"`
	ConnectorIDContains     *string  `json:"connectorIDContains,omitempty"`
	ConnectorIDHasPrefix    *string  `json:"connectorIDHasPrefix,omitempty"`
	ConnectorIDHasSuffix    *string  `json:"connectorIDHasSuffix,omitempty"`
	ConnectorIDEqualFold    *string  `json:"connectorIDEqualFold,omitempty"`
	ConnectorIDContainsFold *string  `json:"connectorIDContainsFold,omitempty"`

	// "last_used" field predicates.
	LastUsed      *time.Time  `json:"lastUsed,omitempty"`
	LastUsedNEQ   *time.Time  `json:"lastUsedNEQ,omitempty"`
	LastUsedIn    []time.Time `json:"lastUsedIn,omitempty"`
	LastUsedNotIn []time.Time `json:"lastUsedNotIn,omitempty"`
	LastUsedGT    *time.Time  `json:"lastUsedGT,omitempty"`
	LastUsedGTE   *time.Time  `json:"lastUsedGTE,omitempty"`
	LastUsedLT    *time.Time  `json:"lastUsedLT,omitempty"`
	LastUsedLTE   *time.Time  `json:"lastUsedLTE,omitempty"`

	// "integration" edge predicates.
	HasIntegration     *bool                    `json:"hasIntegration,omitempty"`
	HasIntegrationWith []*IntegrationWhereInput `json:"hasIntegrationWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OhAuthTooTokenWhereInput) AddPredicates(predicates ...predicate.OhAuthTooToken) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OhAuthTooTokenWhereInput filter on the OhAuthTooTokenQuery builder.
func (i *OhAuthTooTokenWhereInput) Filter(q *OhAuthTooTokenQuery) (*OhAuthTooTokenQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOhAuthTooTokenWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOhAuthTooTokenWhereInput is returned in case the OhAuthTooTokenWhereInput is empty.
var ErrEmptyOhAuthTooTokenWhereInput = errors.New("generated: empty predicate OhAuthTooTokenWhereInput")

// P returns a predicate for filtering ohauthtootokens.
// An error is returned if the input is empty or invalid.
func (i *OhAuthTooTokenWhereInput) P() (predicate.OhAuthTooToken, error) {
	var predicates []predicate.OhAuthTooToken
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, ohauthtootoken.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OhAuthTooToken, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, ohauthtootoken.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OhAuthTooToken, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, ohauthtootoken.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, ohauthtootoken.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, ohauthtootoken.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, ohauthtootoken.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, ohauthtootoken.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, ohauthtootoken.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, ohauthtootoken.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, ohauthtootoken.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, ohauthtootoken.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, ohauthtootoken.IDContainsFold(*i.IDContainsFold))
	}
	if i.ClientID != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDEQ(*i.ClientID))
	}
	if i.ClientIDNEQ != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDNEQ(*i.ClientIDNEQ))
	}
	if len(i.ClientIDIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClientIDIn(i.ClientIDIn...))
	}
	if len(i.ClientIDNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClientIDNotIn(i.ClientIDNotIn...))
	}
	if i.ClientIDGT != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDGT(*i.ClientIDGT))
	}
	if i.ClientIDGTE != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDGTE(*i.ClientIDGTE))
	}
	if i.ClientIDLT != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDLT(*i.ClientIDLT))
	}
	if i.ClientIDLTE != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDLTE(*i.ClientIDLTE))
	}
	if i.ClientIDContains != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDContains(*i.ClientIDContains))
	}
	if i.ClientIDHasPrefix != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDHasPrefix(*i.ClientIDHasPrefix))
	}
	if i.ClientIDHasSuffix != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDHasSuffix(*i.ClientIDHasSuffix))
	}
	if i.ClientIDEqualFold != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDEqualFold(*i.ClientIDEqualFold))
	}
	if i.ClientIDContainsFold != nil {
		predicates = append(predicates, ohauthtootoken.ClientIDContainsFold(*i.ClientIDContainsFold))
	}
	if i.Nonce != nil {
		predicates = append(predicates, ohauthtootoken.NonceEQ(*i.Nonce))
	}
	if i.NonceNEQ != nil {
		predicates = append(predicates, ohauthtootoken.NonceNEQ(*i.NonceNEQ))
	}
	if len(i.NonceIn) > 0 {
		predicates = append(predicates, ohauthtootoken.NonceIn(i.NonceIn...))
	}
	if len(i.NonceNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.NonceNotIn(i.NonceNotIn...))
	}
	if i.NonceGT != nil {
		predicates = append(predicates, ohauthtootoken.NonceGT(*i.NonceGT))
	}
	if i.NonceGTE != nil {
		predicates = append(predicates, ohauthtootoken.NonceGTE(*i.NonceGTE))
	}
	if i.NonceLT != nil {
		predicates = append(predicates, ohauthtootoken.NonceLT(*i.NonceLT))
	}
	if i.NonceLTE != nil {
		predicates = append(predicates, ohauthtootoken.NonceLTE(*i.NonceLTE))
	}
	if i.NonceContains != nil {
		predicates = append(predicates, ohauthtootoken.NonceContains(*i.NonceContains))
	}
	if i.NonceHasPrefix != nil {
		predicates = append(predicates, ohauthtootoken.NonceHasPrefix(*i.NonceHasPrefix))
	}
	if i.NonceHasSuffix != nil {
		predicates = append(predicates, ohauthtootoken.NonceHasSuffix(*i.NonceHasSuffix))
	}
	if i.NonceEqualFold != nil {
		predicates = append(predicates, ohauthtootoken.NonceEqualFold(*i.NonceEqualFold))
	}
	if i.NonceContainsFold != nil {
		predicates = append(predicates, ohauthtootoken.NonceContainsFold(*i.NonceContainsFold))
	}
	if i.ClaimsUserID != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDEQ(*i.ClaimsUserID))
	}
	if i.ClaimsUserIDNEQ != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDNEQ(*i.ClaimsUserIDNEQ))
	}
	if len(i.ClaimsUserIDIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDIn(i.ClaimsUserIDIn...))
	}
	if len(i.ClaimsUserIDNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDNotIn(i.ClaimsUserIDNotIn...))
	}
	if i.ClaimsUserIDGT != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDGT(*i.ClaimsUserIDGT))
	}
	if i.ClaimsUserIDGTE != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDGTE(*i.ClaimsUserIDGTE))
	}
	if i.ClaimsUserIDLT != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDLT(*i.ClaimsUserIDLT))
	}
	if i.ClaimsUserIDLTE != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDLTE(*i.ClaimsUserIDLTE))
	}
	if i.ClaimsUserIDContains != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDContains(*i.ClaimsUserIDContains))
	}
	if i.ClaimsUserIDHasPrefix != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDHasPrefix(*i.ClaimsUserIDHasPrefix))
	}
	if i.ClaimsUserIDHasSuffix != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDHasSuffix(*i.ClaimsUserIDHasSuffix))
	}
	if i.ClaimsUserIDEqualFold != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDEqualFold(*i.ClaimsUserIDEqualFold))
	}
	if i.ClaimsUserIDContainsFold != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUserIDContainsFold(*i.ClaimsUserIDContainsFold))
	}
	if i.ClaimsUsername != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameEQ(*i.ClaimsUsername))
	}
	if i.ClaimsUsernameNEQ != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameNEQ(*i.ClaimsUsernameNEQ))
	}
	if len(i.ClaimsUsernameIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameIn(i.ClaimsUsernameIn...))
	}
	if len(i.ClaimsUsernameNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameNotIn(i.ClaimsUsernameNotIn...))
	}
	if i.ClaimsUsernameGT != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameGT(*i.ClaimsUsernameGT))
	}
	if i.ClaimsUsernameGTE != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameGTE(*i.ClaimsUsernameGTE))
	}
	if i.ClaimsUsernameLT != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameLT(*i.ClaimsUsernameLT))
	}
	if i.ClaimsUsernameLTE != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameLTE(*i.ClaimsUsernameLTE))
	}
	if i.ClaimsUsernameContains != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameContains(*i.ClaimsUsernameContains))
	}
	if i.ClaimsUsernameHasPrefix != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameHasPrefix(*i.ClaimsUsernameHasPrefix))
	}
	if i.ClaimsUsernameHasSuffix != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameHasSuffix(*i.ClaimsUsernameHasSuffix))
	}
	if i.ClaimsUsernameEqualFold != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameEqualFold(*i.ClaimsUsernameEqualFold))
	}
	if i.ClaimsUsernameContainsFold != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsUsernameContainsFold(*i.ClaimsUsernameContainsFold))
	}
	if i.ClaimsEmail != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailEQ(*i.ClaimsEmail))
	}
	if i.ClaimsEmailNEQ != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailNEQ(*i.ClaimsEmailNEQ))
	}
	if len(i.ClaimsEmailIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailIn(i.ClaimsEmailIn...))
	}
	if len(i.ClaimsEmailNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailNotIn(i.ClaimsEmailNotIn...))
	}
	if i.ClaimsEmailGT != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailGT(*i.ClaimsEmailGT))
	}
	if i.ClaimsEmailGTE != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailGTE(*i.ClaimsEmailGTE))
	}
	if i.ClaimsEmailLT != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailLT(*i.ClaimsEmailLT))
	}
	if i.ClaimsEmailLTE != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailLTE(*i.ClaimsEmailLTE))
	}
	if i.ClaimsEmailContains != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailContains(*i.ClaimsEmailContains))
	}
	if i.ClaimsEmailHasPrefix != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailHasPrefix(*i.ClaimsEmailHasPrefix))
	}
	if i.ClaimsEmailHasSuffix != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailHasSuffix(*i.ClaimsEmailHasSuffix))
	}
	if i.ClaimsEmailEqualFold != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailEqualFold(*i.ClaimsEmailEqualFold))
	}
	if i.ClaimsEmailContainsFold != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailContainsFold(*i.ClaimsEmailContainsFold))
	}
	if i.ClaimsEmailVerified != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailVerifiedEQ(*i.ClaimsEmailVerified))
	}
	if i.ClaimsEmailVerifiedNEQ != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsEmailVerifiedNEQ(*i.ClaimsEmailVerifiedNEQ))
	}
	if i.ClaimsPreferredUsername != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameEQ(*i.ClaimsPreferredUsername))
	}
	if i.ClaimsPreferredUsernameNEQ != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameNEQ(*i.ClaimsPreferredUsernameNEQ))
	}
	if len(i.ClaimsPreferredUsernameIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameIn(i.ClaimsPreferredUsernameIn...))
	}
	if len(i.ClaimsPreferredUsernameNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameNotIn(i.ClaimsPreferredUsernameNotIn...))
	}
	if i.ClaimsPreferredUsernameGT != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameGT(*i.ClaimsPreferredUsernameGT))
	}
	if i.ClaimsPreferredUsernameGTE != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameGTE(*i.ClaimsPreferredUsernameGTE))
	}
	if i.ClaimsPreferredUsernameLT != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameLT(*i.ClaimsPreferredUsernameLT))
	}
	if i.ClaimsPreferredUsernameLTE != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameLTE(*i.ClaimsPreferredUsernameLTE))
	}
	if i.ClaimsPreferredUsernameContains != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameContains(*i.ClaimsPreferredUsernameContains))
	}
	if i.ClaimsPreferredUsernameHasPrefix != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameHasPrefix(*i.ClaimsPreferredUsernameHasPrefix))
	}
	if i.ClaimsPreferredUsernameHasSuffix != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameHasSuffix(*i.ClaimsPreferredUsernameHasSuffix))
	}
	if i.ClaimsPreferredUsernameEqualFold != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameEqualFold(*i.ClaimsPreferredUsernameEqualFold))
	}
	if i.ClaimsPreferredUsernameContainsFold != nil {
		predicates = append(predicates, ohauthtootoken.ClaimsPreferredUsernameContainsFold(*i.ClaimsPreferredUsernameContainsFold))
	}
	if i.ConnectorID != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDEQ(*i.ConnectorID))
	}
	if i.ConnectorIDNEQ != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDNEQ(*i.ConnectorIDNEQ))
	}
	if len(i.ConnectorIDIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ConnectorIDIn(i.ConnectorIDIn...))
	}
	if len(i.ConnectorIDNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.ConnectorIDNotIn(i.ConnectorIDNotIn...))
	}
	if i.ConnectorIDGT != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDGT(*i.ConnectorIDGT))
	}
	if i.ConnectorIDGTE != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDGTE(*i.ConnectorIDGTE))
	}
	if i.ConnectorIDLT != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDLT(*i.ConnectorIDLT))
	}
	if i.ConnectorIDLTE != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDLTE(*i.ConnectorIDLTE))
	}
	if i.ConnectorIDContains != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDContains(*i.ConnectorIDContains))
	}
	if i.ConnectorIDHasPrefix != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDHasPrefix(*i.ConnectorIDHasPrefix))
	}
	if i.ConnectorIDHasSuffix != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDHasSuffix(*i.ConnectorIDHasSuffix))
	}
	if i.ConnectorIDEqualFold != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDEqualFold(*i.ConnectorIDEqualFold))
	}
	if i.ConnectorIDContainsFold != nil {
		predicates = append(predicates, ohauthtootoken.ConnectorIDContainsFold(*i.ConnectorIDContainsFold))
	}
	if i.LastUsed != nil {
		predicates = append(predicates, ohauthtootoken.LastUsedEQ(*i.LastUsed))
	}
	if i.LastUsedNEQ != nil {
		predicates = append(predicates, ohauthtootoken.LastUsedNEQ(*i.LastUsedNEQ))
	}
	if len(i.LastUsedIn) > 0 {
		predicates = append(predicates, ohauthtootoken.LastUsedIn(i.LastUsedIn...))
	}
	if len(i.LastUsedNotIn) > 0 {
		predicates = append(predicates, ohauthtootoken.LastUsedNotIn(i.LastUsedNotIn...))
	}
	if i.LastUsedGT != nil {
		predicates = append(predicates, ohauthtootoken.LastUsedGT(*i.LastUsedGT))
	}
	if i.LastUsedGTE != nil {
		predicates = append(predicates, ohauthtootoken.LastUsedGTE(*i.LastUsedGTE))
	}
	if i.LastUsedLT != nil {
		predicates = append(predicates, ohauthtootoken.LastUsedLT(*i.LastUsedLT))
	}
	if i.LastUsedLTE != nil {
		predicates = append(predicates, ohauthtootoken.LastUsedLTE(*i.LastUsedLTE))
	}

	if i.HasIntegration != nil {
		p := ohauthtootoken.HasIntegration()
		if !*i.HasIntegration {
			p = ohauthtootoken.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIntegrationWith) > 0 {
		with := make([]predicate.Integration, 0, len(i.HasIntegrationWith))
		for _, w := range i.HasIntegrationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIntegrationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, ohauthtootoken.HasIntegrationWith(with...))
	}
	if i.HasEvents != nil {
		p := ohauthtootoken.HasEvents()
		if !*i.HasEvents {
			p = ohauthtootoken.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, ohauthtootoken.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOhAuthTooTokenWhereInput
	case 1:
		return predicates[0], nil
	default:
		return ohauthtootoken.And(predicates...), nil
	}
}

// OrgMembershipWhereInput represents a where input for filtering OrgMembership queries.
type OrgMembershipWhereInput struct {
	Predicates []predicate.OrgMembership  `json:"-"`
	Not        *OrgMembershipWhereInput   `json:"not,omitempty"`
	Or         []*OrgMembershipWhereInput `json:"or,omitempty"`
	And        []*OrgMembershipWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "role" field predicates.
	Role      *enums.Role  `json:"role,omitempty"`
	RoleNEQ   *enums.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []enums.Role `json:"roleIn,omitempty"`
	RoleNotIn []enums.Role `json:"roleNotIn,omitempty"`

	// "organization_id" field predicates.
	OrganizationID             *string  `json:"organizationID,omitempty"`
	OrganizationIDNEQ          *string  `json:"organizationIDNEQ,omitempty"`
	OrganizationIDIn           []string `json:"organizationIDIn,omitempty"`
	OrganizationIDNotIn        []string `json:"organizationIDNotIn,omitempty"`
	OrganizationIDGT           *string  `json:"organizationIDGT,omitempty"`
	OrganizationIDGTE          *string  `json:"organizationIDGTE,omitempty"`
	OrganizationIDLT           *string  `json:"organizationIDLT,omitempty"`
	OrganizationIDLTE          *string  `json:"organizationIDLTE,omitempty"`
	OrganizationIDContains     *string  `json:"organizationIDContains,omitempty"`
	OrganizationIDHasPrefix    *string  `json:"organizationIDHasPrefix,omitempty"`
	OrganizationIDHasSuffix    *string  `json:"organizationIDHasSuffix,omitempty"`
	OrganizationIDEqualFold    *string  `json:"organizationIDEqualFold,omitempty"`
	OrganizationIDContainsFold *string  `json:"organizationIDContainsFold,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`

	// "organization" edge predicates.
	HasOrganization     *bool                     `json:"hasOrganization,omitempty"`
	HasOrganizationWith []*OrganizationWhereInput `json:"hasOrganizationWith,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OrgMembershipWhereInput) AddPredicates(predicates ...predicate.OrgMembership) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OrgMembershipWhereInput filter on the OrgMembershipQuery builder.
func (i *OrgMembershipWhereInput) Filter(q *OrgMembershipQuery) (*OrgMembershipQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOrgMembershipWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOrgMembershipWhereInput is returned in case the OrgMembershipWhereInput is empty.
var ErrEmptyOrgMembershipWhereInput = errors.New("generated: empty predicate OrgMembershipWhereInput")

// P returns a predicate for filtering orgmemberships.
// An error is returned if the input is empty or invalid.
func (i *OrgMembershipWhereInput) P() (predicate.OrgMembership, error) {
	var predicates []predicate.OrgMembership
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, orgmembership.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OrgMembership, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, orgmembership.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OrgMembership, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, orgmembership.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, orgmembership.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, orgmembership.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, orgmembership.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, orgmembership.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, orgmembership.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, orgmembership.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, orgmembership.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, orgmembership.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, orgmembership.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, orgmembership.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, orgmembership.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, orgmembership.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, orgmembership.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, orgmembership.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, orgmembership.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, orgmembership.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, orgmembership.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, orgmembership.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, orgmembership.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, orgmembership.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, orgmembership.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, orgmembership.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, orgmembership.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, orgmembership.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, orgmembership.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, orgmembership.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, orgmembership.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, orgmembership.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, orgmembership.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, orgmembership.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, orgmembership.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, orgmembership.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, orgmembership.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, orgmembership.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, orgmembership.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, orgmembership.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, orgmembership.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, orgmembership.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, orgmembership.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, orgmembership.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, orgmembership.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, orgmembership.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, orgmembership.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, orgmembership.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, orgmembership.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, orgmembership.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, orgmembership.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, orgmembership.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, orgmembership.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, orgmembership.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, orgmembership.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, orgmembership.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, orgmembership.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, orgmembership.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, orgmembership.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, orgmembership.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, orgmembership.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, orgmembership.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, orgmembership.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, orgmembership.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, orgmembership.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, orgmembership.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, orgmembership.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, orgmembership.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, orgmembership.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, orgmembership.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, orgmembership.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, orgmembership.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, orgmembership.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, orgmembership.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, orgmembership.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, orgmembership.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, orgmembership.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, orgmembership.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, orgmembership.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, orgmembership.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, orgmembership.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, orgmembership.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, orgmembership.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, orgmembership.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, orgmembership.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, orgmembership.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, orgmembership.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, orgmembership.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, orgmembership.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, orgmembership.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, orgmembership.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, orgmembership.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, orgmembership.RoleNotIn(i.RoleNotIn...))
	}
	if i.OrganizationID != nil {
		predicates = append(predicates, orgmembership.OrganizationIDEQ(*i.OrganizationID))
	}
	if i.OrganizationIDNEQ != nil {
		predicates = append(predicates, orgmembership.OrganizationIDNEQ(*i.OrganizationIDNEQ))
	}
	if len(i.OrganizationIDIn) > 0 {
		predicates = append(predicates, orgmembership.OrganizationIDIn(i.OrganizationIDIn...))
	}
	if len(i.OrganizationIDNotIn) > 0 {
		predicates = append(predicates, orgmembership.OrganizationIDNotIn(i.OrganizationIDNotIn...))
	}
	if i.OrganizationIDGT != nil {
		predicates = append(predicates, orgmembership.OrganizationIDGT(*i.OrganizationIDGT))
	}
	if i.OrganizationIDGTE != nil {
		predicates = append(predicates, orgmembership.OrganizationIDGTE(*i.OrganizationIDGTE))
	}
	if i.OrganizationIDLT != nil {
		predicates = append(predicates, orgmembership.OrganizationIDLT(*i.OrganizationIDLT))
	}
	if i.OrganizationIDLTE != nil {
		predicates = append(predicates, orgmembership.OrganizationIDLTE(*i.OrganizationIDLTE))
	}
	if i.OrganizationIDContains != nil {
		predicates = append(predicates, orgmembership.OrganizationIDContains(*i.OrganizationIDContains))
	}
	if i.OrganizationIDHasPrefix != nil {
		predicates = append(predicates, orgmembership.OrganizationIDHasPrefix(*i.OrganizationIDHasPrefix))
	}
	if i.OrganizationIDHasSuffix != nil {
		predicates = append(predicates, orgmembership.OrganizationIDHasSuffix(*i.OrganizationIDHasSuffix))
	}
	if i.OrganizationIDEqualFold != nil {
		predicates = append(predicates, orgmembership.OrganizationIDEqualFold(*i.OrganizationIDEqualFold))
	}
	if i.OrganizationIDContainsFold != nil {
		predicates = append(predicates, orgmembership.OrganizationIDContainsFold(*i.OrganizationIDContainsFold))
	}
	if i.UserID != nil {
		predicates = append(predicates, orgmembership.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, orgmembership.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, orgmembership.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, orgmembership.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, orgmembership.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, orgmembership.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, orgmembership.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, orgmembership.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, orgmembership.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, orgmembership.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, orgmembership.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, orgmembership.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, orgmembership.UserIDContainsFold(*i.UserIDContainsFold))
	}

	if i.HasOrganization != nil {
		p := orgmembership.HasOrganization()
		if !*i.HasOrganization {
			p = orgmembership.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOrganizationWith))
		for _, w := range i.HasOrganizationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, orgmembership.HasOrganizationWith(with...))
	}
	if i.HasUser != nil {
		p := orgmembership.HasUser()
		if !*i.HasUser {
			p = orgmembership.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, orgmembership.HasUserWith(with...))
	}
	if i.HasEvents != nil {
		p := orgmembership.HasEvents()
		if !*i.HasEvents {
			p = orgmembership.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, orgmembership.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOrgMembershipWhereInput
	case 1:
		return predicates[0], nil
	default:
		return orgmembership.And(predicates...), nil
	}
}

// OrgMembershipHistoryWhereInput represents a where input for filtering OrgMembershipHistory queries.
type OrgMembershipHistoryWhereInput struct {
	Predicates []predicate.OrgMembershipHistory  `json:"-"`
	Not        *OrgMembershipHistoryWhereInput   `json:"not,omitempty"`
	Or         []*OrgMembershipHistoryWhereInput `json:"or,omitempty"`
	And        []*OrgMembershipHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "role" field predicates.
	Role      *enums.Role  `json:"role,omitempty"`
	RoleNEQ   *enums.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []enums.Role `json:"roleIn,omitempty"`
	RoleNotIn []enums.Role `json:"roleNotIn,omitempty"`

	// "organization_id" field predicates.
	OrganizationID             *string  `json:"organizationID,omitempty"`
	OrganizationIDNEQ          *string  `json:"organizationIDNEQ,omitempty"`
	OrganizationIDIn           []string `json:"organizationIDIn,omitempty"`
	OrganizationIDNotIn        []string `json:"organizationIDNotIn,omitempty"`
	OrganizationIDGT           *string  `json:"organizationIDGT,omitempty"`
	OrganizationIDGTE          *string  `json:"organizationIDGTE,omitempty"`
	OrganizationIDLT           *string  `json:"organizationIDLT,omitempty"`
	OrganizationIDLTE          *string  `json:"organizationIDLTE,omitempty"`
	OrganizationIDContains     *string  `json:"organizationIDContains,omitempty"`
	OrganizationIDHasPrefix    *string  `json:"organizationIDHasPrefix,omitempty"`
	OrganizationIDHasSuffix    *string  `json:"organizationIDHasSuffix,omitempty"`
	OrganizationIDEqualFold    *string  `json:"organizationIDEqualFold,omitempty"`
	OrganizationIDContainsFold *string  `json:"organizationIDContainsFold,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OrgMembershipHistoryWhereInput) AddPredicates(predicates ...predicate.OrgMembershipHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OrgMembershipHistoryWhereInput filter on the OrgMembershipHistoryQuery builder.
func (i *OrgMembershipHistoryWhereInput) Filter(q *OrgMembershipHistoryQuery) (*OrgMembershipHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOrgMembershipHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOrgMembershipHistoryWhereInput is returned in case the OrgMembershipHistoryWhereInput is empty.
var ErrEmptyOrgMembershipHistoryWhereInput = errors.New("generated: empty predicate OrgMembershipHistoryWhereInput")

// P returns a predicate for filtering orgmembershiphistories.
// An error is returned if the input is empty or invalid.
func (i *OrgMembershipHistoryWhereInput) P() (predicate.OrgMembershipHistory, error) {
	var predicates []predicate.OrgMembershipHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, orgmembershiphistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OrgMembershipHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, orgmembershiphistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OrgMembershipHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, orgmembershiphistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, orgmembershiphistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, orgmembershiphistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, orgmembershiphistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, orgmembershiphistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, orgmembershiphistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, orgmembershiphistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, orgmembershiphistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, orgmembershiphistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, orgmembershiphistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, orgmembershiphistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, orgmembershiphistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, orgmembershiphistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, orgmembershiphistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, orgmembershiphistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, orgmembershiphistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, orgmembershiphistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, orgmembershiphistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, orgmembershiphistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, orgmembershiphistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, orgmembershiphistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, orgmembershiphistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, orgmembershiphistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, orgmembershiphistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, orgmembershiphistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, orgmembershiphistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, orgmembershiphistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, orgmembershiphistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, orgmembershiphistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, orgmembershiphistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, orgmembershiphistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, orgmembershiphistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, orgmembershiphistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, orgmembershiphistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, orgmembershiphistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, orgmembershiphistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, orgmembershiphistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, orgmembershiphistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, orgmembershiphistory.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.RoleNotIn(i.RoleNotIn...))
	}
	if i.OrganizationID != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDEQ(*i.OrganizationID))
	}
	if i.OrganizationIDNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDNEQ(*i.OrganizationIDNEQ))
	}
	if len(i.OrganizationIDIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDIn(i.OrganizationIDIn...))
	}
	if len(i.OrganizationIDNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDNotIn(i.OrganizationIDNotIn...))
	}
	if i.OrganizationIDGT != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDGT(*i.OrganizationIDGT))
	}
	if i.OrganizationIDGTE != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDGTE(*i.OrganizationIDGTE))
	}
	if i.OrganizationIDLT != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDLT(*i.OrganizationIDLT))
	}
	if i.OrganizationIDLTE != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDLTE(*i.OrganizationIDLTE))
	}
	if i.OrganizationIDContains != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDContains(*i.OrganizationIDContains))
	}
	if i.OrganizationIDHasPrefix != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDHasPrefix(*i.OrganizationIDHasPrefix))
	}
	if i.OrganizationIDHasSuffix != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDHasSuffix(*i.OrganizationIDHasSuffix))
	}
	if i.OrganizationIDEqualFold != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDEqualFold(*i.OrganizationIDEqualFold))
	}
	if i.OrganizationIDContainsFold != nil {
		predicates = append(predicates, orgmembershiphistory.OrganizationIDContainsFold(*i.OrganizationIDContainsFold))
	}
	if i.UserID != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, orgmembershiphistory.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, orgmembershiphistory.UserIDContainsFold(*i.UserIDContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOrgMembershipHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return orgmembershiphistory.And(predicates...), nil
	}
}

// OrganizationWhereInput represents a where input for filtering Organization queries.
type OrganizationWhereInput struct {
	Predicates []predicate.Organization  `json:"-"`
	Not        *OrganizationWhereInput   `json:"not,omitempty"`
	Or         []*OrganizationWhereInput `json:"or,omitempty"`
	And        []*OrganizationWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "parent_organization_id" field predicates.
	ParentOrganizationID             *string  `json:"parentOrganizationID,omitempty"`
	ParentOrganizationIDNEQ          *string  `json:"parentOrganizationIDNEQ,omitempty"`
	ParentOrganizationIDIn           []string `json:"parentOrganizationIDIn,omitempty"`
	ParentOrganizationIDNotIn        []string `json:"parentOrganizationIDNotIn,omitempty"`
	ParentOrganizationIDGT           *string  `json:"parentOrganizationIDGT,omitempty"`
	ParentOrganizationIDGTE          *string  `json:"parentOrganizationIDGTE,omitempty"`
	ParentOrganizationIDLT           *string  `json:"parentOrganizationIDLT,omitempty"`
	ParentOrganizationIDLTE          *string  `json:"parentOrganizationIDLTE,omitempty"`
	ParentOrganizationIDContains     *string  `json:"parentOrganizationIDContains,omitempty"`
	ParentOrganizationIDHasPrefix    *string  `json:"parentOrganizationIDHasPrefix,omitempty"`
	ParentOrganizationIDHasSuffix    *string  `json:"parentOrganizationIDHasSuffix,omitempty"`
	ParentOrganizationIDIsNil        bool     `json:"parentOrganizationIDIsNil,omitempty"`
	ParentOrganizationIDNotNil       bool     `json:"parentOrganizationIDNotNil,omitempty"`
	ParentOrganizationIDEqualFold    *string  `json:"parentOrganizationIDEqualFold,omitempty"`
	ParentOrganizationIDContainsFold *string  `json:"parentOrganizationIDContainsFold,omitempty"`

	// "personal_org" field predicates.
	PersonalOrg       *bool `json:"personalOrg,omitempty"`
	PersonalOrgNEQ    *bool `json:"personalOrgNEQ,omitempty"`
	PersonalOrgIsNil  bool  `json:"personalOrgIsNil,omitempty"`
	PersonalOrgNotNil bool  `json:"personalOrgNotNil,omitempty"`

	// "avatar_remote_url" field predicates.
	AvatarRemoteURL             *string  `json:"avatarRemoteURL,omitempty"`
	AvatarRemoteURLNEQ          *string  `json:"avatarRemoteURLNEQ,omitempty"`
	AvatarRemoteURLIn           []string `json:"avatarRemoteURLIn,omitempty"`
	AvatarRemoteURLNotIn        []string `json:"avatarRemoteURLNotIn,omitempty"`
	AvatarRemoteURLGT           *string  `json:"avatarRemoteURLGT,omitempty"`
	AvatarRemoteURLGTE          *string  `json:"avatarRemoteURLGTE,omitempty"`
	AvatarRemoteURLLT           *string  `json:"avatarRemoteURLLT,omitempty"`
	AvatarRemoteURLLTE          *string  `json:"avatarRemoteURLLTE,omitempty"`
	AvatarRemoteURLContains     *string  `json:"avatarRemoteURLContains,omitempty"`
	AvatarRemoteURLHasPrefix    *string  `json:"avatarRemoteURLHasPrefix,omitempty"`
	AvatarRemoteURLHasSuffix    *string  `json:"avatarRemoteURLHasSuffix,omitempty"`
	AvatarRemoteURLIsNil        bool     `json:"avatarRemoteURLIsNil,omitempty"`
	AvatarRemoteURLNotNil       bool     `json:"avatarRemoteURLNotNil,omitempty"`
	AvatarRemoteURLEqualFold    *string  `json:"avatarRemoteURLEqualFold,omitempty"`
	AvatarRemoteURLContainsFold *string  `json:"avatarRemoteURLContainsFold,omitempty"`

	// "parent" edge predicates.
	HasParent     *bool                     `json:"hasParent,omitempty"`
	HasParentWith []*OrganizationWhereInput `json:"hasParentWith,omitempty"`

	// "children" edge predicates.
	HasChildren     *bool                     `json:"hasChildren,omitempty"`
	HasChildrenWith []*OrganizationWhereInput `json:"hasChildrenWith,omitempty"`

	// "groups" edge predicates.
	HasGroups     *bool              `json:"hasGroups,omitempty"`
	HasGroupsWith []*GroupWhereInput `json:"hasGroupsWith,omitempty"`

	// "templates" edge predicates.
	HasTemplates     *bool                 `json:"hasTemplates,omitempty"`
	HasTemplatesWith []*TemplateWhereInput `json:"hasTemplatesWith,omitempty"`

	// "integrations" edge predicates.
	HasIntegrations     *bool                    `json:"hasIntegrations,omitempty"`
	HasIntegrationsWith []*IntegrationWhereInput `json:"hasIntegrationsWith,omitempty"`

	// "setting" edge predicates.
	HasSetting     *bool                            `json:"hasSetting,omitempty"`
	HasSettingWith []*OrganizationSettingWhereInput `json:"hasSettingWith,omitempty"`

	// "documentdata" edge predicates.
	HasDocumentdata     *bool                     `json:"hasDocumentdata,omitempty"`
	HasDocumentdataWith []*DocumentDataWhereInput `json:"hasDocumentdataWith,omitempty"`

	// "entitlements" edge predicates.
	HasEntitlements     *bool                    `json:"hasEntitlements,omitempty"`
	HasEntitlementsWith []*EntitlementWhereInput `json:"hasEntitlementsWith,omitempty"`

	// "organization_entitlement" edge predicates.
	HasOrganizationEntitlement     *bool                    `json:"hasOrganizationEntitlement,omitempty"`
	HasOrganizationEntitlementWith []*EntitlementWhereInput `json:"hasOrganizationEntitlementWith,omitempty"`

	// "personal_access_tokens" edge predicates.
	HasPersonalAccessTokens     *bool                            `json:"hasPersonalAccessTokens,omitempty"`
	HasPersonalAccessTokensWith []*PersonalAccessTokenWhereInput `json:"hasPersonalAccessTokensWith,omitempty"`

	// "api_tokens" edge predicates.
	HasAPITokens     *bool                 `json:"hasAPITokens,omitempty"`
	HasAPITokensWith []*APITokenWhereInput `json:"hasAPITokensWith,omitempty"`

	// "oauthprovider" edge predicates.
	HasOauthprovider     *bool                      `json:"hasOauthprovider,omitempty"`
	HasOauthproviderWith []*OauthProviderWhereInput `json:"hasOauthproviderWith,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`

	// "invites" edge predicates.
	HasInvites     *bool               `json:"hasInvites,omitempty"`
	HasInvitesWith []*InviteWhereInput `json:"hasInvitesWith,omitempty"`

	// "subscribers" edge predicates.
	HasSubscribers     *bool                   `json:"hasSubscribers,omitempty"`
	HasSubscribersWith []*SubscriberWhereInput `json:"hasSubscribersWith,omitempty"`

	// "webhooks" edge predicates.
	HasWebhooks     *bool                `json:"hasWebhooks,omitempty"`
	HasWebhooksWith []*WebhookWhereInput `json:"hasWebhooksWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`

	// "secrets" edge predicates.
	HasSecrets     *bool             `json:"hasSecrets,omitempty"`
	HasSecretsWith []*HushWhereInput `json:"hasSecretsWith,omitempty"`

	// "features" edge predicates.
	HasFeatures     *bool                `json:"hasFeatures,omitempty"`
	HasFeaturesWith []*FeatureWhereInput `json:"hasFeaturesWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`

	// "entitlementplans" edge predicates.
	HasEntitlementplans     *bool                        `json:"hasEntitlementplans,omitempty"`
	HasEntitlementplansWith []*EntitlementPlanWhereInput `json:"hasEntitlementplansWith,omitempty"`

	// "entitlementplanfeatures" edge predicates.
	HasEntitlementplanfeatures     *bool                               `json:"hasEntitlementplanfeatures,omitempty"`
	HasEntitlementplanfeaturesWith []*EntitlementPlanFeatureWhereInput `json:"hasEntitlementplanfeaturesWith,omitempty"`

	// "entities" edge predicates.
	HasEntities     *bool               `json:"hasEntities,omitempty"`
	HasEntitiesWith []*EntityWhereInput `json:"hasEntitiesWith,omitempty"`

	// "entitytypes" edge predicates.
	HasEntitytypes     *bool                   `json:"hasEntitytypes,omitempty"`
	HasEntitytypesWith []*EntityTypeWhereInput `json:"hasEntitytypesWith,omitempty"`

	// "contacts" edge predicates.
	HasContacts     *bool                `json:"hasContacts,omitempty"`
	HasContactsWith []*ContactWhereInput `json:"hasContactsWith,omitempty"`

	// "notes" edge predicates.
	HasNotes     *bool             `json:"hasNotes,omitempty"`
	HasNotesWith []*NoteWhereInput `json:"hasNotesWith,omitempty"`

	// "members" edge predicates.
	HasMembers     *bool                      `json:"hasMembers,omitempty"`
	HasMembersWith []*OrgMembershipWhereInput `json:"hasMembersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OrganizationWhereInput) AddPredicates(predicates ...predicate.Organization) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OrganizationWhereInput filter on the OrganizationQuery builder.
func (i *OrganizationWhereInput) Filter(q *OrganizationQuery) (*OrganizationQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOrganizationWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOrganizationWhereInput is returned in case the OrganizationWhereInput is empty.
var ErrEmptyOrganizationWhereInput = errors.New("generated: empty predicate OrganizationWhereInput")

// P returns a predicate for filtering organizations.
// An error is returned if the input is empty or invalid.
func (i *OrganizationWhereInput) P() (predicate.Organization, error) {
	var predicates []predicate.Organization
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, organization.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Organization, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, organization.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Organization, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, organization.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, organization.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, organization.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, organization.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, organization.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, organization.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, organization.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, organization.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, organization.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, organization.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, organization.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, organization.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, organization.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, organization.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, organization.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, organization.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, organization.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, organization.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, organization.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, organization.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, organization.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, organization.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, organization.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, organization.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, organization.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, organization.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, organization.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, organization.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, organization.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, organization.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, organization.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, organization.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, organization.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, organization.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, organization.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, organization.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, organization.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, organization.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, organization.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, organization.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, organization.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, organization.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, organization.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, organization.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, organization.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, organization.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, organization.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, organization.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, organization.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, organization.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, organization.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, organization.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, organization.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, organization.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, organization.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, organization.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, organization.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, organization.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, organization.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, organization.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, organization.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, organization.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, organization.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, organization.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, organization.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, organization.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, organization.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, organization.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, organization.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, organization.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, organization.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, organization.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, organization.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, organization.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, organization.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, organization.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, organization.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, organization.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, organization.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, organization.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, organization.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, organization.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, organization.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, organization.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, organization.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, organization.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, organization.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, organization.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, organization.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, organization.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, organization.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, organization.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, organization.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, organization.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, organization.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, organization.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, organization.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, organization.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, organization.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.ParentOrganizationID != nil {
		predicates = append(predicates, organization.ParentOrganizationIDEQ(*i.ParentOrganizationID))
	}
	if i.ParentOrganizationIDNEQ != nil {
		predicates = append(predicates, organization.ParentOrganizationIDNEQ(*i.ParentOrganizationIDNEQ))
	}
	if len(i.ParentOrganizationIDIn) > 0 {
		predicates = append(predicates, organization.ParentOrganizationIDIn(i.ParentOrganizationIDIn...))
	}
	if len(i.ParentOrganizationIDNotIn) > 0 {
		predicates = append(predicates, organization.ParentOrganizationIDNotIn(i.ParentOrganizationIDNotIn...))
	}
	if i.ParentOrganizationIDGT != nil {
		predicates = append(predicates, organization.ParentOrganizationIDGT(*i.ParentOrganizationIDGT))
	}
	if i.ParentOrganizationIDGTE != nil {
		predicates = append(predicates, organization.ParentOrganizationIDGTE(*i.ParentOrganizationIDGTE))
	}
	if i.ParentOrganizationIDLT != nil {
		predicates = append(predicates, organization.ParentOrganizationIDLT(*i.ParentOrganizationIDLT))
	}
	if i.ParentOrganizationIDLTE != nil {
		predicates = append(predicates, organization.ParentOrganizationIDLTE(*i.ParentOrganizationIDLTE))
	}
	if i.ParentOrganizationIDContains != nil {
		predicates = append(predicates, organization.ParentOrganizationIDContains(*i.ParentOrganizationIDContains))
	}
	if i.ParentOrganizationIDHasPrefix != nil {
		predicates = append(predicates, organization.ParentOrganizationIDHasPrefix(*i.ParentOrganizationIDHasPrefix))
	}
	if i.ParentOrganizationIDHasSuffix != nil {
		predicates = append(predicates, organization.ParentOrganizationIDHasSuffix(*i.ParentOrganizationIDHasSuffix))
	}
	if i.ParentOrganizationIDIsNil {
		predicates = append(predicates, organization.ParentOrganizationIDIsNil())
	}
	if i.ParentOrganizationIDNotNil {
		predicates = append(predicates, organization.ParentOrganizationIDNotNil())
	}
	if i.ParentOrganizationIDEqualFold != nil {
		predicates = append(predicates, organization.ParentOrganizationIDEqualFold(*i.ParentOrganizationIDEqualFold))
	}
	if i.ParentOrganizationIDContainsFold != nil {
		predicates = append(predicates, organization.ParentOrganizationIDContainsFold(*i.ParentOrganizationIDContainsFold))
	}
	if i.PersonalOrg != nil {
		predicates = append(predicates, organization.PersonalOrgEQ(*i.PersonalOrg))
	}
	if i.PersonalOrgNEQ != nil {
		predicates = append(predicates, organization.PersonalOrgNEQ(*i.PersonalOrgNEQ))
	}
	if i.PersonalOrgIsNil {
		predicates = append(predicates, organization.PersonalOrgIsNil())
	}
	if i.PersonalOrgNotNil {
		predicates = append(predicates, organization.PersonalOrgNotNil())
	}
	if i.AvatarRemoteURL != nil {
		predicates = append(predicates, organization.AvatarRemoteURLEQ(*i.AvatarRemoteURL))
	}
	if i.AvatarRemoteURLNEQ != nil {
		predicates = append(predicates, organization.AvatarRemoteURLNEQ(*i.AvatarRemoteURLNEQ))
	}
	if len(i.AvatarRemoteURLIn) > 0 {
		predicates = append(predicates, organization.AvatarRemoteURLIn(i.AvatarRemoteURLIn...))
	}
	if len(i.AvatarRemoteURLNotIn) > 0 {
		predicates = append(predicates, organization.AvatarRemoteURLNotIn(i.AvatarRemoteURLNotIn...))
	}
	if i.AvatarRemoteURLGT != nil {
		predicates = append(predicates, organization.AvatarRemoteURLGT(*i.AvatarRemoteURLGT))
	}
	if i.AvatarRemoteURLGTE != nil {
		predicates = append(predicates, organization.AvatarRemoteURLGTE(*i.AvatarRemoteURLGTE))
	}
	if i.AvatarRemoteURLLT != nil {
		predicates = append(predicates, organization.AvatarRemoteURLLT(*i.AvatarRemoteURLLT))
	}
	if i.AvatarRemoteURLLTE != nil {
		predicates = append(predicates, organization.AvatarRemoteURLLTE(*i.AvatarRemoteURLLTE))
	}
	if i.AvatarRemoteURLContains != nil {
		predicates = append(predicates, organization.AvatarRemoteURLContains(*i.AvatarRemoteURLContains))
	}
	if i.AvatarRemoteURLHasPrefix != nil {
		predicates = append(predicates, organization.AvatarRemoteURLHasPrefix(*i.AvatarRemoteURLHasPrefix))
	}
	if i.AvatarRemoteURLHasSuffix != nil {
		predicates = append(predicates, organization.AvatarRemoteURLHasSuffix(*i.AvatarRemoteURLHasSuffix))
	}
	if i.AvatarRemoteURLIsNil {
		predicates = append(predicates, organization.AvatarRemoteURLIsNil())
	}
	if i.AvatarRemoteURLNotNil {
		predicates = append(predicates, organization.AvatarRemoteURLNotNil())
	}
	if i.AvatarRemoteURLEqualFold != nil {
		predicates = append(predicates, organization.AvatarRemoteURLEqualFold(*i.AvatarRemoteURLEqualFold))
	}
	if i.AvatarRemoteURLContainsFold != nil {
		predicates = append(predicates, organization.AvatarRemoteURLContainsFold(*i.AvatarRemoteURLContainsFold))
	}

	if i.HasParent != nil {
		p := organization.HasParent()
		if !*i.HasParent {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasParentWith))
		for _, w := range i.HasParentWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasParentWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasParentWith(with...))
	}
	if i.HasChildren != nil {
		p := organization.HasChildren()
		if !*i.HasChildren {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasChildrenWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasChildrenWith))
		for _, w := range i.HasChildrenWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasChildrenWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasChildrenWith(with...))
	}
	if i.HasGroups != nil {
		p := organization.HasGroups()
		if !*i.HasGroups {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupsWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupsWith))
		for _, w := range i.HasGroupsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasGroupsWith(with...))
	}
	if i.HasTemplates != nil {
		p := organization.HasTemplates()
		if !*i.HasTemplates {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTemplatesWith) > 0 {
		with := make([]predicate.Template, 0, len(i.HasTemplatesWith))
		for _, w := range i.HasTemplatesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTemplatesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasTemplatesWith(with...))
	}
	if i.HasIntegrations != nil {
		p := organization.HasIntegrations()
		if !*i.HasIntegrations {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIntegrationsWith) > 0 {
		with := make([]predicate.Integration, 0, len(i.HasIntegrationsWith))
		for _, w := range i.HasIntegrationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIntegrationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasIntegrationsWith(with...))
	}
	if i.HasSetting != nil {
		p := organization.HasSetting()
		if !*i.HasSetting {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSettingWith) > 0 {
		with := make([]predicate.OrganizationSetting, 0, len(i.HasSettingWith))
		for _, w := range i.HasSettingWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSettingWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasSettingWith(with...))
	}
	if i.HasDocumentdata != nil {
		p := organization.HasDocumentdata()
		if !*i.HasDocumentdata {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDocumentdataWith) > 0 {
		with := make([]predicate.DocumentData, 0, len(i.HasDocumentdataWith))
		for _, w := range i.HasDocumentdataWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDocumentdataWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasDocumentdataWith(with...))
	}
	if i.HasEntitlements != nil {
		p := organization.HasEntitlements()
		if !*i.HasEntitlements {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitlementsWith) > 0 {
		with := make([]predicate.Entitlement, 0, len(i.HasEntitlementsWith))
		for _, w := range i.HasEntitlementsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitlementsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasEntitlementsWith(with...))
	}
	if i.HasOrganizationEntitlement != nil {
		p := organization.HasOrganizationEntitlement()
		if !*i.HasOrganizationEntitlement {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationEntitlementWith) > 0 {
		with := make([]predicate.Entitlement, 0, len(i.HasOrganizationEntitlementWith))
		for _, w := range i.HasOrganizationEntitlementWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationEntitlementWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasOrganizationEntitlementWith(with...))
	}
	if i.HasPersonalAccessTokens != nil {
		p := organization.HasPersonalAccessTokens()
		if !*i.HasPersonalAccessTokens {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPersonalAccessTokensWith) > 0 {
		with := make([]predicate.PersonalAccessToken, 0, len(i.HasPersonalAccessTokensWith))
		for _, w := range i.HasPersonalAccessTokensWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPersonalAccessTokensWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasPersonalAccessTokensWith(with...))
	}
	if i.HasAPITokens != nil {
		p := organization.HasAPITokens()
		if !*i.HasAPITokens {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAPITokensWith) > 0 {
		with := make([]predicate.APIToken, 0, len(i.HasAPITokensWith))
		for _, w := range i.HasAPITokensWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAPITokensWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasAPITokensWith(with...))
	}
	if i.HasOauthprovider != nil {
		p := organization.HasOauthprovider()
		if !*i.HasOauthprovider {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOauthproviderWith) > 0 {
		with := make([]predicate.OauthProvider, 0, len(i.HasOauthproviderWith))
		for _, w := range i.HasOauthproviderWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOauthproviderWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasOauthproviderWith(with...))
	}
	if i.HasUsers != nil {
		p := organization.HasUsers()
		if !*i.HasUsers {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasUsersWith(with...))
	}
	if i.HasInvites != nil {
		p := organization.HasInvites()
		if !*i.HasInvites {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasInvitesWith) > 0 {
		with := make([]predicate.Invite, 0, len(i.HasInvitesWith))
		for _, w := range i.HasInvitesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasInvitesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasInvitesWith(with...))
	}
	if i.HasSubscribers != nil {
		p := organization.HasSubscribers()
		if !*i.HasSubscribers {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSubscribersWith) > 0 {
		with := make([]predicate.Subscriber, 0, len(i.HasSubscribersWith))
		for _, w := range i.HasSubscribersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSubscribersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasSubscribersWith(with...))
	}
	if i.HasWebhooks != nil {
		p := organization.HasWebhooks()
		if !*i.HasWebhooks {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWebhooksWith) > 0 {
		with := make([]predicate.Webhook, 0, len(i.HasWebhooksWith))
		for _, w := range i.HasWebhooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWebhooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasWebhooksWith(with...))
	}
	if i.HasEvents != nil {
		p := organization.HasEvents()
		if !*i.HasEvents {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasEventsWith(with...))
	}
	if i.HasSecrets != nil {
		p := organization.HasSecrets()
		if !*i.HasSecrets {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSecretsWith) > 0 {
		with := make([]predicate.Hush, 0, len(i.HasSecretsWith))
		for _, w := range i.HasSecretsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSecretsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasSecretsWith(with...))
	}
	if i.HasFeatures != nil {
		p := organization.HasFeatures()
		if !*i.HasFeatures {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFeaturesWith) > 0 {
		with := make([]predicate.Feature, 0, len(i.HasFeaturesWith))
		for _, w := range i.HasFeaturesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFeaturesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasFeaturesWith(with...))
	}
	if i.HasFiles != nil {
		p := organization.HasFiles()
		if !*i.HasFiles {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasFilesWith(with...))
	}
	if i.HasEntitlementplans != nil {
		p := organization.HasEntitlementplans()
		if !*i.HasEntitlementplans {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitlementplansWith) > 0 {
		with := make([]predicate.EntitlementPlan, 0, len(i.HasEntitlementplansWith))
		for _, w := range i.HasEntitlementplansWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitlementplansWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasEntitlementplansWith(with...))
	}
	if i.HasEntitlementplanfeatures != nil {
		p := organization.HasEntitlementplanfeatures()
		if !*i.HasEntitlementplanfeatures {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitlementplanfeaturesWith) > 0 {
		with := make([]predicate.EntitlementPlanFeature, 0, len(i.HasEntitlementplanfeaturesWith))
		for _, w := range i.HasEntitlementplanfeaturesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitlementplanfeaturesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasEntitlementplanfeaturesWith(with...))
	}
	if i.HasEntities != nil {
		p := organization.HasEntities()
		if !*i.HasEntities {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitiesWith) > 0 {
		with := make([]predicate.Entity, 0, len(i.HasEntitiesWith))
		for _, w := range i.HasEntitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitiesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasEntitiesWith(with...))
	}
	if i.HasEntitytypes != nil {
		p := organization.HasEntitytypes()
		if !*i.HasEntitytypes {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEntitytypesWith) > 0 {
		with := make([]predicate.EntityType, 0, len(i.HasEntitytypesWith))
		for _, w := range i.HasEntitytypesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEntitytypesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasEntitytypesWith(with...))
	}
	if i.HasContacts != nil {
		p := organization.HasContacts()
		if !*i.HasContacts {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasContactsWith) > 0 {
		with := make([]predicate.Contact, 0, len(i.HasContactsWith))
		for _, w := range i.HasContactsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasContactsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasContactsWith(with...))
	}
	if i.HasNotes != nil {
		p := organization.HasNotes()
		if !*i.HasNotes {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasNotesWith) > 0 {
		with := make([]predicate.Note, 0, len(i.HasNotesWith))
		for _, w := range i.HasNotesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasNotesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasNotesWith(with...))
	}
	if i.HasMembers != nil {
		p := organization.HasMembers()
		if !*i.HasMembers {
			p = organization.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMembersWith) > 0 {
		with := make([]predicate.OrgMembership, 0, len(i.HasMembersWith))
		for _, w := range i.HasMembersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMembersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organization.HasMembersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOrganizationWhereInput
	case 1:
		return predicates[0], nil
	default:
		return organization.And(predicates...), nil
	}
}

// OrganizationHistoryWhereInput represents a where input for filtering OrganizationHistory queries.
type OrganizationHistoryWhereInput struct {
	Predicates []predicate.OrganizationHistory  `json:"-"`
	Not        *OrganizationHistoryWhereInput   `json:"not,omitempty"`
	Or         []*OrganizationHistoryWhereInput `json:"or,omitempty"`
	And        []*OrganizationHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "parent_organization_id" field predicates.
	ParentOrganizationID             *string  `json:"parentOrganizationID,omitempty"`
	ParentOrganizationIDNEQ          *string  `json:"parentOrganizationIDNEQ,omitempty"`
	ParentOrganizationIDIn           []string `json:"parentOrganizationIDIn,omitempty"`
	ParentOrganizationIDNotIn        []string `json:"parentOrganizationIDNotIn,omitempty"`
	ParentOrganizationIDGT           *string  `json:"parentOrganizationIDGT,omitempty"`
	ParentOrganizationIDGTE          *string  `json:"parentOrganizationIDGTE,omitempty"`
	ParentOrganizationIDLT           *string  `json:"parentOrganizationIDLT,omitempty"`
	ParentOrganizationIDLTE          *string  `json:"parentOrganizationIDLTE,omitempty"`
	ParentOrganizationIDContains     *string  `json:"parentOrganizationIDContains,omitempty"`
	ParentOrganizationIDHasPrefix    *string  `json:"parentOrganizationIDHasPrefix,omitempty"`
	ParentOrganizationIDHasSuffix    *string  `json:"parentOrganizationIDHasSuffix,omitempty"`
	ParentOrganizationIDIsNil        bool     `json:"parentOrganizationIDIsNil,omitempty"`
	ParentOrganizationIDNotNil       bool     `json:"parentOrganizationIDNotNil,omitempty"`
	ParentOrganizationIDEqualFold    *string  `json:"parentOrganizationIDEqualFold,omitempty"`
	ParentOrganizationIDContainsFold *string  `json:"parentOrganizationIDContainsFold,omitempty"`

	// "personal_org" field predicates.
	PersonalOrg       *bool `json:"personalOrg,omitempty"`
	PersonalOrgNEQ    *bool `json:"personalOrgNEQ,omitempty"`
	PersonalOrgIsNil  bool  `json:"personalOrgIsNil,omitempty"`
	PersonalOrgNotNil bool  `json:"personalOrgNotNil,omitempty"`

	// "avatar_remote_url" field predicates.
	AvatarRemoteURL             *string  `json:"avatarRemoteURL,omitempty"`
	AvatarRemoteURLNEQ          *string  `json:"avatarRemoteURLNEQ,omitempty"`
	AvatarRemoteURLIn           []string `json:"avatarRemoteURLIn,omitempty"`
	AvatarRemoteURLNotIn        []string `json:"avatarRemoteURLNotIn,omitempty"`
	AvatarRemoteURLGT           *string  `json:"avatarRemoteURLGT,omitempty"`
	AvatarRemoteURLGTE          *string  `json:"avatarRemoteURLGTE,omitempty"`
	AvatarRemoteURLLT           *string  `json:"avatarRemoteURLLT,omitempty"`
	AvatarRemoteURLLTE          *string  `json:"avatarRemoteURLLTE,omitempty"`
	AvatarRemoteURLContains     *string  `json:"avatarRemoteURLContains,omitempty"`
	AvatarRemoteURLHasPrefix    *string  `json:"avatarRemoteURLHasPrefix,omitempty"`
	AvatarRemoteURLHasSuffix    *string  `json:"avatarRemoteURLHasSuffix,omitempty"`
	AvatarRemoteURLIsNil        bool     `json:"avatarRemoteURLIsNil,omitempty"`
	AvatarRemoteURLNotNil       bool     `json:"avatarRemoteURLNotNil,omitempty"`
	AvatarRemoteURLEqualFold    *string  `json:"avatarRemoteURLEqualFold,omitempty"`
	AvatarRemoteURLContainsFold *string  `json:"avatarRemoteURLContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OrganizationHistoryWhereInput) AddPredicates(predicates ...predicate.OrganizationHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OrganizationHistoryWhereInput filter on the OrganizationHistoryQuery builder.
func (i *OrganizationHistoryWhereInput) Filter(q *OrganizationHistoryQuery) (*OrganizationHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOrganizationHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOrganizationHistoryWhereInput is returned in case the OrganizationHistoryWhereInput is empty.
var ErrEmptyOrganizationHistoryWhereInput = errors.New("generated: empty predicate OrganizationHistoryWhereInput")

// P returns a predicate for filtering organizationhistories.
// An error is returned if the input is empty or invalid.
func (i *OrganizationHistoryWhereInput) P() (predicate.OrganizationHistory, error) {
	var predicates []predicate.OrganizationHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, organizationhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OrganizationHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, organizationhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OrganizationHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, organizationhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, organizationhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, organizationhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, organizationhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, organizationhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, organizationhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, organizationhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, organizationhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, organizationhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, organizationhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, organizationhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, organizationhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, organizationhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, organizationhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, organizationhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, organizationhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, organizationhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, organizationhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, organizationhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, organizationhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, organizationhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, organizationhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, organizationhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, organizationhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, organizationhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, organizationhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, organizationhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, organizationhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, organizationhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, organizationhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, organizationhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, organizationhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, organizationhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, organizationhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, organizationhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, organizationhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, organizationhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, organizationhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, organizationhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, organizationhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, organizationhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, organizationhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, organizationhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, organizationhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, organizationhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, organizationhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, organizationhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, organizationhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, organizationhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, organizationhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, organizationhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, organizationhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, organizationhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, organizationhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, organizationhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, organizationhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, organizationhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, organizationhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, organizationhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, organizationhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, organizationhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, organizationhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, organizationhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, organizationhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, organizationhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, organizationhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, organizationhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, organizationhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, organizationhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, organizationhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, organizationhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, organizationhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, organizationhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, organizationhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, organizationhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, organizationhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, organizationhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, organizationhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, organizationhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, organizationhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, organizationhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, organizationhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, organizationhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, organizationhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, organizationhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, organizationhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, organizationhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, organizationhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, organizationhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, organizationhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, organizationhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, organizationhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, organizationhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, organizationhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, organizationhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, organizationhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, organizationhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, organizationhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, organizationhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, organizationhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, organizationhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, organizationhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, organizationhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, organizationhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, organizationhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, organizationhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, organizationhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, organizationhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, organizationhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, organizationhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, organizationhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, organizationhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, organizationhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, organizationhistory.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, organizationhistory.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, organizationhistory.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, organizationhistory.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, organizationhistory.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, organizationhistory.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, organizationhistory.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, organizationhistory.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, organizationhistory.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, organizationhistory.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, organizationhistory.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, organizationhistory.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, organizationhistory.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.ParentOrganizationID != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDEQ(*i.ParentOrganizationID))
	}
	if i.ParentOrganizationIDNEQ != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDNEQ(*i.ParentOrganizationIDNEQ))
	}
	if len(i.ParentOrganizationIDIn) > 0 {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDIn(i.ParentOrganizationIDIn...))
	}
	if len(i.ParentOrganizationIDNotIn) > 0 {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDNotIn(i.ParentOrganizationIDNotIn...))
	}
	if i.ParentOrganizationIDGT != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDGT(*i.ParentOrganizationIDGT))
	}
	if i.ParentOrganizationIDGTE != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDGTE(*i.ParentOrganizationIDGTE))
	}
	if i.ParentOrganizationIDLT != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDLT(*i.ParentOrganizationIDLT))
	}
	if i.ParentOrganizationIDLTE != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDLTE(*i.ParentOrganizationIDLTE))
	}
	if i.ParentOrganizationIDContains != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDContains(*i.ParentOrganizationIDContains))
	}
	if i.ParentOrganizationIDHasPrefix != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDHasPrefix(*i.ParentOrganizationIDHasPrefix))
	}
	if i.ParentOrganizationIDHasSuffix != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDHasSuffix(*i.ParentOrganizationIDHasSuffix))
	}
	if i.ParentOrganizationIDIsNil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDIsNil())
	}
	if i.ParentOrganizationIDNotNil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDNotNil())
	}
	if i.ParentOrganizationIDEqualFold != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDEqualFold(*i.ParentOrganizationIDEqualFold))
	}
	if i.ParentOrganizationIDContainsFold != nil {
		predicates = append(predicates, organizationhistory.ParentOrganizationIDContainsFold(*i.ParentOrganizationIDContainsFold))
	}
	if i.PersonalOrg != nil {
		predicates = append(predicates, organizationhistory.PersonalOrgEQ(*i.PersonalOrg))
	}
	if i.PersonalOrgNEQ != nil {
		predicates = append(predicates, organizationhistory.PersonalOrgNEQ(*i.PersonalOrgNEQ))
	}
	if i.PersonalOrgIsNil {
		predicates = append(predicates, organizationhistory.PersonalOrgIsNil())
	}
	if i.PersonalOrgNotNil {
		predicates = append(predicates, organizationhistory.PersonalOrgNotNil())
	}
	if i.AvatarRemoteURL != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLEQ(*i.AvatarRemoteURL))
	}
	if i.AvatarRemoteURLNEQ != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLNEQ(*i.AvatarRemoteURLNEQ))
	}
	if len(i.AvatarRemoteURLIn) > 0 {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLIn(i.AvatarRemoteURLIn...))
	}
	if len(i.AvatarRemoteURLNotIn) > 0 {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLNotIn(i.AvatarRemoteURLNotIn...))
	}
	if i.AvatarRemoteURLGT != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLGT(*i.AvatarRemoteURLGT))
	}
	if i.AvatarRemoteURLGTE != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLGTE(*i.AvatarRemoteURLGTE))
	}
	if i.AvatarRemoteURLLT != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLLT(*i.AvatarRemoteURLLT))
	}
	if i.AvatarRemoteURLLTE != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLLTE(*i.AvatarRemoteURLLTE))
	}
	if i.AvatarRemoteURLContains != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLContains(*i.AvatarRemoteURLContains))
	}
	if i.AvatarRemoteURLHasPrefix != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLHasPrefix(*i.AvatarRemoteURLHasPrefix))
	}
	if i.AvatarRemoteURLHasSuffix != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLHasSuffix(*i.AvatarRemoteURLHasSuffix))
	}
	if i.AvatarRemoteURLIsNil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLIsNil())
	}
	if i.AvatarRemoteURLNotNil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLNotNil())
	}
	if i.AvatarRemoteURLEqualFold != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLEqualFold(*i.AvatarRemoteURLEqualFold))
	}
	if i.AvatarRemoteURLContainsFold != nil {
		predicates = append(predicates, organizationhistory.AvatarRemoteURLContainsFold(*i.AvatarRemoteURLContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOrganizationHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return organizationhistory.And(predicates...), nil
	}
}

// OrganizationSettingWhereInput represents a where input for filtering OrganizationSetting queries.
type OrganizationSettingWhereInput struct {
	Predicates []predicate.OrganizationSetting  `json:"-"`
	Not        *OrganizationSettingWhereInput   `json:"not,omitempty"`
	Or         []*OrganizationSettingWhereInput `json:"or,omitempty"`
	And        []*OrganizationSettingWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "billing_contact" field predicates.
	BillingContact             *string  `json:"billingContact,omitempty"`
	BillingContactNEQ          *string  `json:"billingContactNEQ,omitempty"`
	BillingContactIn           []string `json:"billingContactIn,omitempty"`
	BillingContactNotIn        []string `json:"billingContactNotIn,omitempty"`
	BillingContactGT           *string  `json:"billingContactGT,omitempty"`
	BillingContactGTE          *string  `json:"billingContactGTE,omitempty"`
	BillingContactLT           *string  `json:"billingContactLT,omitempty"`
	BillingContactLTE          *string  `json:"billingContactLTE,omitempty"`
	BillingContactContains     *string  `json:"billingContactContains,omitempty"`
	BillingContactHasPrefix    *string  `json:"billingContactHasPrefix,omitempty"`
	BillingContactHasSuffix    *string  `json:"billingContactHasSuffix,omitempty"`
	BillingContactIsNil        bool     `json:"billingContactIsNil,omitempty"`
	BillingContactNotNil       bool     `json:"billingContactNotNil,omitempty"`
	BillingContactEqualFold    *string  `json:"billingContactEqualFold,omitempty"`
	BillingContactContainsFold *string  `json:"billingContactContainsFold,omitempty"`

	// "billing_email" field predicates.
	BillingEmail             *string  `json:"billingEmail,omitempty"`
	BillingEmailNEQ          *string  `json:"billingEmailNEQ,omitempty"`
	BillingEmailIn           []string `json:"billingEmailIn,omitempty"`
	BillingEmailNotIn        []string `json:"billingEmailNotIn,omitempty"`
	BillingEmailGT           *string  `json:"billingEmailGT,omitempty"`
	BillingEmailGTE          *string  `json:"billingEmailGTE,omitempty"`
	BillingEmailLT           *string  `json:"billingEmailLT,omitempty"`
	BillingEmailLTE          *string  `json:"billingEmailLTE,omitempty"`
	BillingEmailContains     *string  `json:"billingEmailContains,omitempty"`
	BillingEmailHasPrefix    *string  `json:"billingEmailHasPrefix,omitempty"`
	BillingEmailHasSuffix    *string  `json:"billingEmailHasSuffix,omitempty"`
	BillingEmailIsNil        bool     `json:"billingEmailIsNil,omitempty"`
	BillingEmailNotNil       bool     `json:"billingEmailNotNil,omitempty"`
	BillingEmailEqualFold    *string  `json:"billingEmailEqualFold,omitempty"`
	BillingEmailContainsFold *string  `json:"billingEmailContainsFold,omitempty"`

	// "billing_phone" field predicates.
	BillingPhone             *string  `json:"billingPhone,omitempty"`
	BillingPhoneNEQ          *string  `json:"billingPhoneNEQ,omitempty"`
	BillingPhoneIn           []string `json:"billingPhoneIn,omitempty"`
	BillingPhoneNotIn        []string `json:"billingPhoneNotIn,omitempty"`
	BillingPhoneGT           *string  `json:"billingPhoneGT,omitempty"`
	BillingPhoneGTE          *string  `json:"billingPhoneGTE,omitempty"`
	BillingPhoneLT           *string  `json:"billingPhoneLT,omitempty"`
	BillingPhoneLTE          *string  `json:"billingPhoneLTE,omitempty"`
	BillingPhoneContains     *string  `json:"billingPhoneContains,omitempty"`
	BillingPhoneHasPrefix    *string  `json:"billingPhoneHasPrefix,omitempty"`
	BillingPhoneHasSuffix    *string  `json:"billingPhoneHasSuffix,omitempty"`
	BillingPhoneIsNil        bool     `json:"billingPhoneIsNil,omitempty"`
	BillingPhoneNotNil       bool     `json:"billingPhoneNotNil,omitempty"`
	BillingPhoneEqualFold    *string  `json:"billingPhoneEqualFold,omitempty"`
	BillingPhoneContainsFold *string  `json:"billingPhoneContainsFold,omitempty"`

	// "billing_address" field predicates.
	BillingAddress             *string  `json:"billingAddress,omitempty"`
	BillingAddressNEQ          *string  `json:"billingAddressNEQ,omitempty"`
	BillingAddressIn           []string `json:"billingAddressIn,omitempty"`
	BillingAddressNotIn        []string `json:"billingAddressNotIn,omitempty"`
	BillingAddressGT           *string  `json:"billingAddressGT,omitempty"`
	BillingAddressGTE          *string  `json:"billingAddressGTE,omitempty"`
	BillingAddressLT           *string  `json:"billingAddressLT,omitempty"`
	BillingAddressLTE          *string  `json:"billingAddressLTE,omitempty"`
	BillingAddressContains     *string  `json:"billingAddressContains,omitempty"`
	BillingAddressHasPrefix    *string  `json:"billingAddressHasPrefix,omitempty"`
	BillingAddressHasSuffix    *string  `json:"billingAddressHasSuffix,omitempty"`
	BillingAddressIsNil        bool     `json:"billingAddressIsNil,omitempty"`
	BillingAddressNotNil       bool     `json:"billingAddressNotNil,omitempty"`
	BillingAddressEqualFold    *string  `json:"billingAddressEqualFold,omitempty"`
	BillingAddressContainsFold *string  `json:"billingAddressContainsFold,omitempty"`

	// "tax_identifier" field predicates.
	TaxIdentifier             *string  `json:"taxIdentifier,omitempty"`
	TaxIdentifierNEQ          *string  `json:"taxIdentifierNEQ,omitempty"`
	TaxIdentifierIn           []string `json:"taxIdentifierIn,omitempty"`
	TaxIdentifierNotIn        []string `json:"taxIdentifierNotIn,omitempty"`
	TaxIdentifierGT           *string  `json:"taxIdentifierGT,omitempty"`
	TaxIdentifierGTE          *string  `json:"taxIdentifierGTE,omitempty"`
	TaxIdentifierLT           *string  `json:"taxIdentifierLT,omitempty"`
	TaxIdentifierLTE          *string  `json:"taxIdentifierLTE,omitempty"`
	TaxIdentifierContains     *string  `json:"taxIdentifierContains,omitempty"`
	TaxIdentifierHasPrefix    *string  `json:"taxIdentifierHasPrefix,omitempty"`
	TaxIdentifierHasSuffix    *string  `json:"taxIdentifierHasSuffix,omitempty"`
	TaxIdentifierIsNil        bool     `json:"taxIdentifierIsNil,omitempty"`
	TaxIdentifierNotNil       bool     `json:"taxIdentifierNotNil,omitempty"`
	TaxIdentifierEqualFold    *string  `json:"taxIdentifierEqualFold,omitempty"`
	TaxIdentifierContainsFold *string  `json:"taxIdentifierContainsFold,omitempty"`

	// "geo_location" field predicates.
	GeoLocation       *enums.Region  `json:"geoLocation,omitempty"`
	GeoLocationNEQ    *enums.Region  `json:"geoLocationNEQ,omitempty"`
	GeoLocationIn     []enums.Region `json:"geoLocationIn,omitempty"`
	GeoLocationNotIn  []enums.Region `json:"geoLocationNotIn,omitempty"`
	GeoLocationIsNil  bool           `json:"geoLocationIsNil,omitempty"`
	GeoLocationNotNil bool           `json:"geoLocationNotNil,omitempty"`

	// "organization_id" field predicates.
	OrganizationID             *string  `json:"organizationID,omitempty"`
	OrganizationIDNEQ          *string  `json:"organizationIDNEQ,omitempty"`
	OrganizationIDIn           []string `json:"organizationIDIn,omitempty"`
	OrganizationIDNotIn        []string `json:"organizationIDNotIn,omitempty"`
	OrganizationIDGT           *string  `json:"organizationIDGT,omitempty"`
	OrganizationIDGTE          *string  `json:"organizationIDGTE,omitempty"`
	OrganizationIDLT           *string  `json:"organizationIDLT,omitempty"`
	OrganizationIDLTE          *string  `json:"organizationIDLTE,omitempty"`
	OrganizationIDContains     *string  `json:"organizationIDContains,omitempty"`
	OrganizationIDHasPrefix    *string  `json:"organizationIDHasPrefix,omitempty"`
	OrganizationIDHasSuffix    *string  `json:"organizationIDHasSuffix,omitempty"`
	OrganizationIDIsNil        bool     `json:"organizationIDIsNil,omitempty"`
	OrganizationIDNotNil       bool     `json:"organizationIDNotNil,omitempty"`
	OrganizationIDEqualFold    *string  `json:"organizationIDEqualFold,omitempty"`
	OrganizationIDContainsFold *string  `json:"organizationIDContainsFold,omitempty"`

	// "organization" edge predicates.
	HasOrganization     *bool                     `json:"hasOrganization,omitempty"`
	HasOrganizationWith []*OrganizationWhereInput `json:"hasOrganizationWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OrganizationSettingWhereInput) AddPredicates(predicates ...predicate.OrganizationSetting) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OrganizationSettingWhereInput filter on the OrganizationSettingQuery builder.
func (i *OrganizationSettingWhereInput) Filter(q *OrganizationSettingQuery) (*OrganizationSettingQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOrganizationSettingWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOrganizationSettingWhereInput is returned in case the OrganizationSettingWhereInput is empty.
var ErrEmptyOrganizationSettingWhereInput = errors.New("generated: empty predicate OrganizationSettingWhereInput")

// P returns a predicate for filtering organizationsettings.
// An error is returned if the input is empty or invalid.
func (i *OrganizationSettingWhereInput) P() (predicate.OrganizationSetting, error) {
	var predicates []predicate.OrganizationSetting
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, organizationsetting.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OrganizationSetting, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, organizationsetting.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OrganizationSetting, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, organizationsetting.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, organizationsetting.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, organizationsetting.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, organizationsetting.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, organizationsetting.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, organizationsetting.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, organizationsetting.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, organizationsetting.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, organizationsetting.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, organizationsetting.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, organizationsetting.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, organizationsetting.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, organizationsetting.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, organizationsetting.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, organizationsetting.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, organizationsetting.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, organizationsetting.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, organizationsetting.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, organizationsetting.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, organizationsetting.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, organizationsetting.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, organizationsetting.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, organizationsetting.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, organizationsetting.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, organizationsetting.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, organizationsetting.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, organizationsetting.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, organizationsetting.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, organizationsetting.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, organizationsetting.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, organizationsetting.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, organizationsetting.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, organizationsetting.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, organizationsetting.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, organizationsetting.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, organizationsetting.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, organizationsetting.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, organizationsetting.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, organizationsetting.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, organizationsetting.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, organizationsetting.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, organizationsetting.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, organizationsetting.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, organizationsetting.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, organizationsetting.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, organizationsetting.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, organizationsetting.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, organizationsetting.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, organizationsetting.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, organizationsetting.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, organizationsetting.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, organizationsetting.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, organizationsetting.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, organizationsetting.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, organizationsetting.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, organizationsetting.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, organizationsetting.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, organizationsetting.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, organizationsetting.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, organizationsetting.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, organizationsetting.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, organizationsetting.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, organizationsetting.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, organizationsetting.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, organizationsetting.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, organizationsetting.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, organizationsetting.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, organizationsetting.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, organizationsetting.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, organizationsetting.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, organizationsetting.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, organizationsetting.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, organizationsetting.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, organizationsetting.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, organizationsetting.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, organizationsetting.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, organizationsetting.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, organizationsetting.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, organizationsetting.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, organizationsetting.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, organizationsetting.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, organizationsetting.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, organizationsetting.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, organizationsetting.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, organizationsetting.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, organizationsetting.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.BillingContact != nil {
		predicates = append(predicates, organizationsetting.BillingContactEQ(*i.BillingContact))
	}
	if i.BillingContactNEQ != nil {
		predicates = append(predicates, organizationsetting.BillingContactNEQ(*i.BillingContactNEQ))
	}
	if len(i.BillingContactIn) > 0 {
		predicates = append(predicates, organizationsetting.BillingContactIn(i.BillingContactIn...))
	}
	if len(i.BillingContactNotIn) > 0 {
		predicates = append(predicates, organizationsetting.BillingContactNotIn(i.BillingContactNotIn...))
	}
	if i.BillingContactGT != nil {
		predicates = append(predicates, organizationsetting.BillingContactGT(*i.BillingContactGT))
	}
	if i.BillingContactGTE != nil {
		predicates = append(predicates, organizationsetting.BillingContactGTE(*i.BillingContactGTE))
	}
	if i.BillingContactLT != nil {
		predicates = append(predicates, organizationsetting.BillingContactLT(*i.BillingContactLT))
	}
	if i.BillingContactLTE != nil {
		predicates = append(predicates, organizationsetting.BillingContactLTE(*i.BillingContactLTE))
	}
	if i.BillingContactContains != nil {
		predicates = append(predicates, organizationsetting.BillingContactContains(*i.BillingContactContains))
	}
	if i.BillingContactHasPrefix != nil {
		predicates = append(predicates, organizationsetting.BillingContactHasPrefix(*i.BillingContactHasPrefix))
	}
	if i.BillingContactHasSuffix != nil {
		predicates = append(predicates, organizationsetting.BillingContactHasSuffix(*i.BillingContactHasSuffix))
	}
	if i.BillingContactIsNil {
		predicates = append(predicates, organizationsetting.BillingContactIsNil())
	}
	if i.BillingContactNotNil {
		predicates = append(predicates, organizationsetting.BillingContactNotNil())
	}
	if i.BillingContactEqualFold != nil {
		predicates = append(predicates, organizationsetting.BillingContactEqualFold(*i.BillingContactEqualFold))
	}
	if i.BillingContactContainsFold != nil {
		predicates = append(predicates, organizationsetting.BillingContactContainsFold(*i.BillingContactContainsFold))
	}
	if i.BillingEmail != nil {
		predicates = append(predicates, organizationsetting.BillingEmailEQ(*i.BillingEmail))
	}
	if i.BillingEmailNEQ != nil {
		predicates = append(predicates, organizationsetting.BillingEmailNEQ(*i.BillingEmailNEQ))
	}
	if len(i.BillingEmailIn) > 0 {
		predicates = append(predicates, organizationsetting.BillingEmailIn(i.BillingEmailIn...))
	}
	if len(i.BillingEmailNotIn) > 0 {
		predicates = append(predicates, organizationsetting.BillingEmailNotIn(i.BillingEmailNotIn...))
	}
	if i.BillingEmailGT != nil {
		predicates = append(predicates, organizationsetting.BillingEmailGT(*i.BillingEmailGT))
	}
	if i.BillingEmailGTE != nil {
		predicates = append(predicates, organizationsetting.BillingEmailGTE(*i.BillingEmailGTE))
	}
	if i.BillingEmailLT != nil {
		predicates = append(predicates, organizationsetting.BillingEmailLT(*i.BillingEmailLT))
	}
	if i.BillingEmailLTE != nil {
		predicates = append(predicates, organizationsetting.BillingEmailLTE(*i.BillingEmailLTE))
	}
	if i.BillingEmailContains != nil {
		predicates = append(predicates, organizationsetting.BillingEmailContains(*i.BillingEmailContains))
	}
	if i.BillingEmailHasPrefix != nil {
		predicates = append(predicates, organizationsetting.BillingEmailHasPrefix(*i.BillingEmailHasPrefix))
	}
	if i.BillingEmailHasSuffix != nil {
		predicates = append(predicates, organizationsetting.BillingEmailHasSuffix(*i.BillingEmailHasSuffix))
	}
	if i.BillingEmailIsNil {
		predicates = append(predicates, organizationsetting.BillingEmailIsNil())
	}
	if i.BillingEmailNotNil {
		predicates = append(predicates, organizationsetting.BillingEmailNotNil())
	}
	if i.BillingEmailEqualFold != nil {
		predicates = append(predicates, organizationsetting.BillingEmailEqualFold(*i.BillingEmailEqualFold))
	}
	if i.BillingEmailContainsFold != nil {
		predicates = append(predicates, organizationsetting.BillingEmailContainsFold(*i.BillingEmailContainsFold))
	}
	if i.BillingPhone != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneEQ(*i.BillingPhone))
	}
	if i.BillingPhoneNEQ != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneNEQ(*i.BillingPhoneNEQ))
	}
	if len(i.BillingPhoneIn) > 0 {
		predicates = append(predicates, organizationsetting.BillingPhoneIn(i.BillingPhoneIn...))
	}
	if len(i.BillingPhoneNotIn) > 0 {
		predicates = append(predicates, organizationsetting.BillingPhoneNotIn(i.BillingPhoneNotIn...))
	}
	if i.BillingPhoneGT != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneGT(*i.BillingPhoneGT))
	}
	if i.BillingPhoneGTE != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneGTE(*i.BillingPhoneGTE))
	}
	if i.BillingPhoneLT != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneLT(*i.BillingPhoneLT))
	}
	if i.BillingPhoneLTE != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneLTE(*i.BillingPhoneLTE))
	}
	if i.BillingPhoneContains != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneContains(*i.BillingPhoneContains))
	}
	if i.BillingPhoneHasPrefix != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneHasPrefix(*i.BillingPhoneHasPrefix))
	}
	if i.BillingPhoneHasSuffix != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneHasSuffix(*i.BillingPhoneHasSuffix))
	}
	if i.BillingPhoneIsNil {
		predicates = append(predicates, organizationsetting.BillingPhoneIsNil())
	}
	if i.BillingPhoneNotNil {
		predicates = append(predicates, organizationsetting.BillingPhoneNotNil())
	}
	if i.BillingPhoneEqualFold != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneEqualFold(*i.BillingPhoneEqualFold))
	}
	if i.BillingPhoneContainsFold != nil {
		predicates = append(predicates, organizationsetting.BillingPhoneContainsFold(*i.BillingPhoneContainsFold))
	}
	if i.BillingAddress != nil {
		predicates = append(predicates, organizationsetting.BillingAddressEQ(*i.BillingAddress))
	}
	if i.BillingAddressNEQ != nil {
		predicates = append(predicates, organizationsetting.BillingAddressNEQ(*i.BillingAddressNEQ))
	}
	if len(i.BillingAddressIn) > 0 {
		predicates = append(predicates, organizationsetting.BillingAddressIn(i.BillingAddressIn...))
	}
	if len(i.BillingAddressNotIn) > 0 {
		predicates = append(predicates, organizationsetting.BillingAddressNotIn(i.BillingAddressNotIn...))
	}
	if i.BillingAddressGT != nil {
		predicates = append(predicates, organizationsetting.BillingAddressGT(*i.BillingAddressGT))
	}
	if i.BillingAddressGTE != nil {
		predicates = append(predicates, organizationsetting.BillingAddressGTE(*i.BillingAddressGTE))
	}
	if i.BillingAddressLT != nil {
		predicates = append(predicates, organizationsetting.BillingAddressLT(*i.BillingAddressLT))
	}
	if i.BillingAddressLTE != nil {
		predicates = append(predicates, organizationsetting.BillingAddressLTE(*i.BillingAddressLTE))
	}
	if i.BillingAddressContains != nil {
		predicates = append(predicates, organizationsetting.BillingAddressContains(*i.BillingAddressContains))
	}
	if i.BillingAddressHasPrefix != nil {
		predicates = append(predicates, organizationsetting.BillingAddressHasPrefix(*i.BillingAddressHasPrefix))
	}
	if i.BillingAddressHasSuffix != nil {
		predicates = append(predicates, organizationsetting.BillingAddressHasSuffix(*i.BillingAddressHasSuffix))
	}
	if i.BillingAddressIsNil {
		predicates = append(predicates, organizationsetting.BillingAddressIsNil())
	}
	if i.BillingAddressNotNil {
		predicates = append(predicates, organizationsetting.BillingAddressNotNil())
	}
	if i.BillingAddressEqualFold != nil {
		predicates = append(predicates, organizationsetting.BillingAddressEqualFold(*i.BillingAddressEqualFold))
	}
	if i.BillingAddressContainsFold != nil {
		predicates = append(predicates, organizationsetting.BillingAddressContainsFold(*i.BillingAddressContainsFold))
	}
	if i.TaxIdentifier != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierEQ(*i.TaxIdentifier))
	}
	if i.TaxIdentifierNEQ != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierNEQ(*i.TaxIdentifierNEQ))
	}
	if len(i.TaxIdentifierIn) > 0 {
		predicates = append(predicates, organizationsetting.TaxIdentifierIn(i.TaxIdentifierIn...))
	}
	if len(i.TaxIdentifierNotIn) > 0 {
		predicates = append(predicates, organizationsetting.TaxIdentifierNotIn(i.TaxIdentifierNotIn...))
	}
	if i.TaxIdentifierGT != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierGT(*i.TaxIdentifierGT))
	}
	if i.TaxIdentifierGTE != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierGTE(*i.TaxIdentifierGTE))
	}
	if i.TaxIdentifierLT != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierLT(*i.TaxIdentifierLT))
	}
	if i.TaxIdentifierLTE != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierLTE(*i.TaxIdentifierLTE))
	}
	if i.TaxIdentifierContains != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierContains(*i.TaxIdentifierContains))
	}
	if i.TaxIdentifierHasPrefix != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierHasPrefix(*i.TaxIdentifierHasPrefix))
	}
	if i.TaxIdentifierHasSuffix != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierHasSuffix(*i.TaxIdentifierHasSuffix))
	}
	if i.TaxIdentifierIsNil {
		predicates = append(predicates, organizationsetting.TaxIdentifierIsNil())
	}
	if i.TaxIdentifierNotNil {
		predicates = append(predicates, organizationsetting.TaxIdentifierNotNil())
	}
	if i.TaxIdentifierEqualFold != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierEqualFold(*i.TaxIdentifierEqualFold))
	}
	if i.TaxIdentifierContainsFold != nil {
		predicates = append(predicates, organizationsetting.TaxIdentifierContainsFold(*i.TaxIdentifierContainsFold))
	}
	if i.GeoLocation != nil {
		predicates = append(predicates, organizationsetting.GeoLocationEQ(*i.GeoLocation))
	}
	if i.GeoLocationNEQ != nil {
		predicates = append(predicates, organizationsetting.GeoLocationNEQ(*i.GeoLocationNEQ))
	}
	if len(i.GeoLocationIn) > 0 {
		predicates = append(predicates, organizationsetting.GeoLocationIn(i.GeoLocationIn...))
	}
	if len(i.GeoLocationNotIn) > 0 {
		predicates = append(predicates, organizationsetting.GeoLocationNotIn(i.GeoLocationNotIn...))
	}
	if i.GeoLocationIsNil {
		predicates = append(predicates, organizationsetting.GeoLocationIsNil())
	}
	if i.GeoLocationNotNil {
		predicates = append(predicates, organizationsetting.GeoLocationNotNil())
	}
	if i.OrganizationID != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDEQ(*i.OrganizationID))
	}
	if i.OrganizationIDNEQ != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDNEQ(*i.OrganizationIDNEQ))
	}
	if len(i.OrganizationIDIn) > 0 {
		predicates = append(predicates, organizationsetting.OrganizationIDIn(i.OrganizationIDIn...))
	}
	if len(i.OrganizationIDNotIn) > 0 {
		predicates = append(predicates, organizationsetting.OrganizationIDNotIn(i.OrganizationIDNotIn...))
	}
	if i.OrganizationIDGT != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDGT(*i.OrganizationIDGT))
	}
	if i.OrganizationIDGTE != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDGTE(*i.OrganizationIDGTE))
	}
	if i.OrganizationIDLT != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDLT(*i.OrganizationIDLT))
	}
	if i.OrganizationIDLTE != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDLTE(*i.OrganizationIDLTE))
	}
	if i.OrganizationIDContains != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDContains(*i.OrganizationIDContains))
	}
	if i.OrganizationIDHasPrefix != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDHasPrefix(*i.OrganizationIDHasPrefix))
	}
	if i.OrganizationIDHasSuffix != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDHasSuffix(*i.OrganizationIDHasSuffix))
	}
	if i.OrganizationIDIsNil {
		predicates = append(predicates, organizationsetting.OrganizationIDIsNil())
	}
	if i.OrganizationIDNotNil {
		predicates = append(predicates, organizationsetting.OrganizationIDNotNil())
	}
	if i.OrganizationIDEqualFold != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDEqualFold(*i.OrganizationIDEqualFold))
	}
	if i.OrganizationIDContainsFold != nil {
		predicates = append(predicates, organizationsetting.OrganizationIDContainsFold(*i.OrganizationIDContainsFold))
	}

	if i.HasOrganization != nil {
		p := organizationsetting.HasOrganization()
		if !*i.HasOrganization {
			p = organizationsetting.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOrganizationWith))
		for _, w := range i.HasOrganizationWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organizationsetting.HasOrganizationWith(with...))
	}
	if i.HasFiles != nil {
		p := organizationsetting.HasFiles()
		if !*i.HasFiles {
			p = organizationsetting.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, organizationsetting.HasFilesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOrganizationSettingWhereInput
	case 1:
		return predicates[0], nil
	default:
		return organizationsetting.And(predicates...), nil
	}
}

// OrganizationSettingHistoryWhereInput represents a where input for filtering OrganizationSettingHistory queries.
type OrganizationSettingHistoryWhereInput struct {
	Predicates []predicate.OrganizationSettingHistory  `json:"-"`
	Not        *OrganizationSettingHistoryWhereInput   `json:"not,omitempty"`
	Or         []*OrganizationSettingHistoryWhereInput `json:"or,omitempty"`
	And        []*OrganizationSettingHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "billing_contact" field predicates.
	BillingContact             *string  `json:"billingContact,omitempty"`
	BillingContactNEQ          *string  `json:"billingContactNEQ,omitempty"`
	BillingContactIn           []string `json:"billingContactIn,omitempty"`
	BillingContactNotIn        []string `json:"billingContactNotIn,omitempty"`
	BillingContactGT           *string  `json:"billingContactGT,omitempty"`
	BillingContactGTE          *string  `json:"billingContactGTE,omitempty"`
	BillingContactLT           *string  `json:"billingContactLT,omitempty"`
	BillingContactLTE          *string  `json:"billingContactLTE,omitempty"`
	BillingContactContains     *string  `json:"billingContactContains,omitempty"`
	BillingContactHasPrefix    *string  `json:"billingContactHasPrefix,omitempty"`
	BillingContactHasSuffix    *string  `json:"billingContactHasSuffix,omitempty"`
	BillingContactIsNil        bool     `json:"billingContactIsNil,omitempty"`
	BillingContactNotNil       bool     `json:"billingContactNotNil,omitempty"`
	BillingContactEqualFold    *string  `json:"billingContactEqualFold,omitempty"`
	BillingContactContainsFold *string  `json:"billingContactContainsFold,omitempty"`

	// "billing_email" field predicates.
	BillingEmail             *string  `json:"billingEmail,omitempty"`
	BillingEmailNEQ          *string  `json:"billingEmailNEQ,omitempty"`
	BillingEmailIn           []string `json:"billingEmailIn,omitempty"`
	BillingEmailNotIn        []string `json:"billingEmailNotIn,omitempty"`
	BillingEmailGT           *string  `json:"billingEmailGT,omitempty"`
	BillingEmailGTE          *string  `json:"billingEmailGTE,omitempty"`
	BillingEmailLT           *string  `json:"billingEmailLT,omitempty"`
	BillingEmailLTE          *string  `json:"billingEmailLTE,omitempty"`
	BillingEmailContains     *string  `json:"billingEmailContains,omitempty"`
	BillingEmailHasPrefix    *string  `json:"billingEmailHasPrefix,omitempty"`
	BillingEmailHasSuffix    *string  `json:"billingEmailHasSuffix,omitempty"`
	BillingEmailIsNil        bool     `json:"billingEmailIsNil,omitempty"`
	BillingEmailNotNil       bool     `json:"billingEmailNotNil,omitempty"`
	BillingEmailEqualFold    *string  `json:"billingEmailEqualFold,omitempty"`
	BillingEmailContainsFold *string  `json:"billingEmailContainsFold,omitempty"`

	// "billing_phone" field predicates.
	BillingPhone             *string  `json:"billingPhone,omitempty"`
	BillingPhoneNEQ          *string  `json:"billingPhoneNEQ,omitempty"`
	BillingPhoneIn           []string `json:"billingPhoneIn,omitempty"`
	BillingPhoneNotIn        []string `json:"billingPhoneNotIn,omitempty"`
	BillingPhoneGT           *string  `json:"billingPhoneGT,omitempty"`
	BillingPhoneGTE          *string  `json:"billingPhoneGTE,omitempty"`
	BillingPhoneLT           *string  `json:"billingPhoneLT,omitempty"`
	BillingPhoneLTE          *string  `json:"billingPhoneLTE,omitempty"`
	BillingPhoneContains     *string  `json:"billingPhoneContains,omitempty"`
	BillingPhoneHasPrefix    *string  `json:"billingPhoneHasPrefix,omitempty"`
	BillingPhoneHasSuffix    *string  `json:"billingPhoneHasSuffix,omitempty"`
	BillingPhoneIsNil        bool     `json:"billingPhoneIsNil,omitempty"`
	BillingPhoneNotNil       bool     `json:"billingPhoneNotNil,omitempty"`
	BillingPhoneEqualFold    *string  `json:"billingPhoneEqualFold,omitempty"`
	BillingPhoneContainsFold *string  `json:"billingPhoneContainsFold,omitempty"`

	// "billing_address" field predicates.
	BillingAddress             *string  `json:"billingAddress,omitempty"`
	BillingAddressNEQ          *string  `json:"billingAddressNEQ,omitempty"`
	BillingAddressIn           []string `json:"billingAddressIn,omitempty"`
	BillingAddressNotIn        []string `json:"billingAddressNotIn,omitempty"`
	BillingAddressGT           *string  `json:"billingAddressGT,omitempty"`
	BillingAddressGTE          *string  `json:"billingAddressGTE,omitempty"`
	BillingAddressLT           *string  `json:"billingAddressLT,omitempty"`
	BillingAddressLTE          *string  `json:"billingAddressLTE,omitempty"`
	BillingAddressContains     *string  `json:"billingAddressContains,omitempty"`
	BillingAddressHasPrefix    *string  `json:"billingAddressHasPrefix,omitempty"`
	BillingAddressHasSuffix    *string  `json:"billingAddressHasSuffix,omitempty"`
	BillingAddressIsNil        bool     `json:"billingAddressIsNil,omitempty"`
	BillingAddressNotNil       bool     `json:"billingAddressNotNil,omitempty"`
	BillingAddressEqualFold    *string  `json:"billingAddressEqualFold,omitempty"`
	BillingAddressContainsFold *string  `json:"billingAddressContainsFold,omitempty"`

	// "tax_identifier" field predicates.
	TaxIdentifier             *string  `json:"taxIdentifier,omitempty"`
	TaxIdentifierNEQ          *string  `json:"taxIdentifierNEQ,omitempty"`
	TaxIdentifierIn           []string `json:"taxIdentifierIn,omitempty"`
	TaxIdentifierNotIn        []string `json:"taxIdentifierNotIn,omitempty"`
	TaxIdentifierGT           *string  `json:"taxIdentifierGT,omitempty"`
	TaxIdentifierGTE          *string  `json:"taxIdentifierGTE,omitempty"`
	TaxIdentifierLT           *string  `json:"taxIdentifierLT,omitempty"`
	TaxIdentifierLTE          *string  `json:"taxIdentifierLTE,omitempty"`
	TaxIdentifierContains     *string  `json:"taxIdentifierContains,omitempty"`
	TaxIdentifierHasPrefix    *string  `json:"taxIdentifierHasPrefix,omitempty"`
	TaxIdentifierHasSuffix    *string  `json:"taxIdentifierHasSuffix,omitempty"`
	TaxIdentifierIsNil        bool     `json:"taxIdentifierIsNil,omitempty"`
	TaxIdentifierNotNil       bool     `json:"taxIdentifierNotNil,omitempty"`
	TaxIdentifierEqualFold    *string  `json:"taxIdentifierEqualFold,omitempty"`
	TaxIdentifierContainsFold *string  `json:"taxIdentifierContainsFold,omitempty"`

	// "geo_location" field predicates.
	GeoLocation       *enums.Region  `json:"geoLocation,omitempty"`
	GeoLocationNEQ    *enums.Region  `json:"geoLocationNEQ,omitempty"`
	GeoLocationIn     []enums.Region `json:"geoLocationIn,omitempty"`
	GeoLocationNotIn  []enums.Region `json:"geoLocationNotIn,omitempty"`
	GeoLocationIsNil  bool           `json:"geoLocationIsNil,omitempty"`
	GeoLocationNotNil bool           `json:"geoLocationNotNil,omitempty"`

	// "organization_id" field predicates.
	OrganizationID             *string  `json:"organizationID,omitempty"`
	OrganizationIDNEQ          *string  `json:"organizationIDNEQ,omitempty"`
	OrganizationIDIn           []string `json:"organizationIDIn,omitempty"`
	OrganizationIDNotIn        []string `json:"organizationIDNotIn,omitempty"`
	OrganizationIDGT           *string  `json:"organizationIDGT,omitempty"`
	OrganizationIDGTE          *string  `json:"organizationIDGTE,omitempty"`
	OrganizationIDLT           *string  `json:"organizationIDLT,omitempty"`
	OrganizationIDLTE          *string  `json:"organizationIDLTE,omitempty"`
	OrganizationIDContains     *string  `json:"organizationIDContains,omitempty"`
	OrganizationIDHasPrefix    *string  `json:"organizationIDHasPrefix,omitempty"`
	OrganizationIDHasSuffix    *string  `json:"organizationIDHasSuffix,omitempty"`
	OrganizationIDIsNil        bool     `json:"organizationIDIsNil,omitempty"`
	OrganizationIDNotNil       bool     `json:"organizationIDNotNil,omitempty"`
	OrganizationIDEqualFold    *string  `json:"organizationIDEqualFold,omitempty"`
	OrganizationIDContainsFold *string  `json:"organizationIDContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OrganizationSettingHistoryWhereInput) AddPredicates(predicates ...predicate.OrganizationSettingHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OrganizationSettingHistoryWhereInput filter on the OrganizationSettingHistoryQuery builder.
func (i *OrganizationSettingHistoryWhereInput) Filter(q *OrganizationSettingHistoryQuery) (*OrganizationSettingHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOrganizationSettingHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOrganizationSettingHistoryWhereInput is returned in case the OrganizationSettingHistoryWhereInput is empty.
var ErrEmptyOrganizationSettingHistoryWhereInput = errors.New("generated: empty predicate OrganizationSettingHistoryWhereInput")

// P returns a predicate for filtering organizationsettinghistories.
// An error is returned if the input is empty or invalid.
func (i *OrganizationSettingHistoryWhereInput) P() (predicate.OrganizationSettingHistory, error) {
	var predicates []predicate.OrganizationSettingHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, organizationsettinghistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OrganizationSettingHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, organizationsettinghistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OrganizationSettingHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, organizationsettinghistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, organizationsettinghistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, organizationsettinghistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, organizationsettinghistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, organizationsettinghistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, organizationsettinghistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, organizationsettinghistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, organizationsettinghistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, organizationsettinghistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, organizationsettinghistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, organizationsettinghistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, organizationsettinghistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, organizationsettinghistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, organizationsettinghistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, organizationsettinghistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, organizationsettinghistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, organizationsettinghistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, organizationsettinghistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, organizationsettinghistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, organizationsettinghistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, organizationsettinghistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, organizationsettinghistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, organizationsettinghistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, organizationsettinghistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, organizationsettinghistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, organizationsettinghistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, organizationsettinghistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, organizationsettinghistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, organizationsettinghistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.BillingContact != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactEQ(*i.BillingContact))
	}
	if i.BillingContactNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactNEQ(*i.BillingContactNEQ))
	}
	if len(i.BillingContactIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.BillingContactIn(i.BillingContactIn...))
	}
	if len(i.BillingContactNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.BillingContactNotIn(i.BillingContactNotIn...))
	}
	if i.BillingContactGT != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactGT(*i.BillingContactGT))
	}
	if i.BillingContactGTE != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactGTE(*i.BillingContactGTE))
	}
	if i.BillingContactLT != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactLT(*i.BillingContactLT))
	}
	if i.BillingContactLTE != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactLTE(*i.BillingContactLTE))
	}
	if i.BillingContactContains != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactContains(*i.BillingContactContains))
	}
	if i.BillingContactHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactHasPrefix(*i.BillingContactHasPrefix))
	}
	if i.BillingContactHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactHasSuffix(*i.BillingContactHasSuffix))
	}
	if i.BillingContactIsNil {
		predicates = append(predicates, organizationsettinghistory.BillingContactIsNil())
	}
	if i.BillingContactNotNil {
		predicates = append(predicates, organizationsettinghistory.BillingContactNotNil())
	}
	if i.BillingContactEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactEqualFold(*i.BillingContactEqualFold))
	}
	if i.BillingContactContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.BillingContactContainsFold(*i.BillingContactContainsFold))
	}
	if i.BillingEmail != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailEQ(*i.BillingEmail))
	}
	if i.BillingEmailNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailNEQ(*i.BillingEmailNEQ))
	}
	if len(i.BillingEmailIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.BillingEmailIn(i.BillingEmailIn...))
	}
	if len(i.BillingEmailNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.BillingEmailNotIn(i.BillingEmailNotIn...))
	}
	if i.BillingEmailGT != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailGT(*i.BillingEmailGT))
	}
	if i.BillingEmailGTE != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailGTE(*i.BillingEmailGTE))
	}
	if i.BillingEmailLT != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailLT(*i.BillingEmailLT))
	}
	if i.BillingEmailLTE != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailLTE(*i.BillingEmailLTE))
	}
	if i.BillingEmailContains != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailContains(*i.BillingEmailContains))
	}
	if i.BillingEmailHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailHasPrefix(*i.BillingEmailHasPrefix))
	}
	if i.BillingEmailHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailHasSuffix(*i.BillingEmailHasSuffix))
	}
	if i.BillingEmailIsNil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailIsNil())
	}
	if i.BillingEmailNotNil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailNotNil())
	}
	if i.BillingEmailEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailEqualFold(*i.BillingEmailEqualFold))
	}
	if i.BillingEmailContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.BillingEmailContainsFold(*i.BillingEmailContainsFold))
	}
	if i.BillingPhone != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneEQ(*i.BillingPhone))
	}
	if i.BillingPhoneNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneNEQ(*i.BillingPhoneNEQ))
	}
	if len(i.BillingPhoneIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneIn(i.BillingPhoneIn...))
	}
	if len(i.BillingPhoneNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneNotIn(i.BillingPhoneNotIn...))
	}
	if i.BillingPhoneGT != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneGT(*i.BillingPhoneGT))
	}
	if i.BillingPhoneGTE != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneGTE(*i.BillingPhoneGTE))
	}
	if i.BillingPhoneLT != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneLT(*i.BillingPhoneLT))
	}
	if i.BillingPhoneLTE != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneLTE(*i.BillingPhoneLTE))
	}
	if i.BillingPhoneContains != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneContains(*i.BillingPhoneContains))
	}
	if i.BillingPhoneHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneHasPrefix(*i.BillingPhoneHasPrefix))
	}
	if i.BillingPhoneHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneHasSuffix(*i.BillingPhoneHasSuffix))
	}
	if i.BillingPhoneIsNil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneIsNil())
	}
	if i.BillingPhoneNotNil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneNotNil())
	}
	if i.BillingPhoneEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneEqualFold(*i.BillingPhoneEqualFold))
	}
	if i.BillingPhoneContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.BillingPhoneContainsFold(*i.BillingPhoneContainsFold))
	}
	if i.BillingAddress != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressEQ(*i.BillingAddress))
	}
	if i.BillingAddressNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressNEQ(*i.BillingAddressNEQ))
	}
	if len(i.BillingAddressIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.BillingAddressIn(i.BillingAddressIn...))
	}
	if len(i.BillingAddressNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.BillingAddressNotIn(i.BillingAddressNotIn...))
	}
	if i.BillingAddressGT != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressGT(*i.BillingAddressGT))
	}
	if i.BillingAddressGTE != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressGTE(*i.BillingAddressGTE))
	}
	if i.BillingAddressLT != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressLT(*i.BillingAddressLT))
	}
	if i.BillingAddressLTE != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressLTE(*i.BillingAddressLTE))
	}
	if i.BillingAddressContains != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressContains(*i.BillingAddressContains))
	}
	if i.BillingAddressHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressHasPrefix(*i.BillingAddressHasPrefix))
	}
	if i.BillingAddressHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressHasSuffix(*i.BillingAddressHasSuffix))
	}
	if i.BillingAddressIsNil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressIsNil())
	}
	if i.BillingAddressNotNil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressNotNil())
	}
	if i.BillingAddressEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressEqualFold(*i.BillingAddressEqualFold))
	}
	if i.BillingAddressContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.BillingAddressContainsFold(*i.BillingAddressContainsFold))
	}
	if i.TaxIdentifier != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierEQ(*i.TaxIdentifier))
	}
	if i.TaxIdentifierNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierNEQ(*i.TaxIdentifierNEQ))
	}
	if len(i.TaxIdentifierIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierIn(i.TaxIdentifierIn...))
	}
	if len(i.TaxIdentifierNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierNotIn(i.TaxIdentifierNotIn...))
	}
	if i.TaxIdentifierGT != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierGT(*i.TaxIdentifierGT))
	}
	if i.TaxIdentifierGTE != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierGTE(*i.TaxIdentifierGTE))
	}
	if i.TaxIdentifierLT != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierLT(*i.TaxIdentifierLT))
	}
	if i.TaxIdentifierLTE != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierLTE(*i.TaxIdentifierLTE))
	}
	if i.TaxIdentifierContains != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierContains(*i.TaxIdentifierContains))
	}
	if i.TaxIdentifierHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierHasPrefix(*i.TaxIdentifierHasPrefix))
	}
	if i.TaxIdentifierHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierHasSuffix(*i.TaxIdentifierHasSuffix))
	}
	if i.TaxIdentifierIsNil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierIsNil())
	}
	if i.TaxIdentifierNotNil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierNotNil())
	}
	if i.TaxIdentifierEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierEqualFold(*i.TaxIdentifierEqualFold))
	}
	if i.TaxIdentifierContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.TaxIdentifierContainsFold(*i.TaxIdentifierContainsFold))
	}
	if i.GeoLocation != nil {
		predicates = append(predicates, organizationsettinghistory.GeoLocationEQ(*i.GeoLocation))
	}
	if i.GeoLocationNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.GeoLocationNEQ(*i.GeoLocationNEQ))
	}
	if len(i.GeoLocationIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.GeoLocationIn(i.GeoLocationIn...))
	}
	if len(i.GeoLocationNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.GeoLocationNotIn(i.GeoLocationNotIn...))
	}
	if i.GeoLocationIsNil {
		predicates = append(predicates, organizationsettinghistory.GeoLocationIsNil())
	}
	if i.GeoLocationNotNil {
		predicates = append(predicates, organizationsettinghistory.GeoLocationNotNil())
	}
	if i.OrganizationID != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDEQ(*i.OrganizationID))
	}
	if i.OrganizationIDNEQ != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDNEQ(*i.OrganizationIDNEQ))
	}
	if len(i.OrganizationIDIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDIn(i.OrganizationIDIn...))
	}
	if len(i.OrganizationIDNotIn) > 0 {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDNotIn(i.OrganizationIDNotIn...))
	}
	if i.OrganizationIDGT != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDGT(*i.OrganizationIDGT))
	}
	if i.OrganizationIDGTE != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDGTE(*i.OrganizationIDGTE))
	}
	if i.OrganizationIDLT != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDLT(*i.OrganizationIDLT))
	}
	if i.OrganizationIDLTE != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDLTE(*i.OrganizationIDLTE))
	}
	if i.OrganizationIDContains != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDContains(*i.OrganizationIDContains))
	}
	if i.OrganizationIDHasPrefix != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDHasPrefix(*i.OrganizationIDHasPrefix))
	}
	if i.OrganizationIDHasSuffix != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDHasSuffix(*i.OrganizationIDHasSuffix))
	}
	if i.OrganizationIDIsNil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDIsNil())
	}
	if i.OrganizationIDNotNil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDNotNil())
	}
	if i.OrganizationIDEqualFold != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDEqualFold(*i.OrganizationIDEqualFold))
	}
	if i.OrganizationIDContainsFold != nil {
		predicates = append(predicates, organizationsettinghistory.OrganizationIDContainsFold(*i.OrganizationIDContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOrganizationSettingHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return organizationsettinghistory.And(predicates...), nil
	}
}

// PersonalAccessTokenWhereInput represents a where input for filtering PersonalAccessToken queries.
type PersonalAccessTokenWhereInput struct {
	Predicates []predicate.PersonalAccessToken  `json:"-"`
	Not        *PersonalAccessTokenWhereInput   `json:"not,omitempty"`
	Or         []*PersonalAccessTokenWhereInput `json:"or,omitempty"`
	And        []*PersonalAccessTokenWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "expires_at" field predicates.
	ExpiresAt       *time.Time  `json:"expiresAt,omitempty"`
	ExpiresAtNEQ    *time.Time  `json:"expiresAtNEQ,omitempty"`
	ExpiresAtIn     []time.Time `json:"expiresAtIn,omitempty"`
	ExpiresAtNotIn  []time.Time `json:"expiresAtNotIn,omitempty"`
	ExpiresAtGT     *time.Time  `json:"expiresAtGT,omitempty"`
	ExpiresAtGTE    *time.Time  `json:"expiresAtGTE,omitempty"`
	ExpiresAtLT     *time.Time  `json:"expiresAtLT,omitempty"`
	ExpiresAtLTE    *time.Time  `json:"expiresAtLTE,omitempty"`
	ExpiresAtIsNil  bool        `json:"expiresAtIsNil,omitempty"`
	ExpiresAtNotNil bool        `json:"expiresAtNotNil,omitempty"`

	// "last_used_at" field predicates.
	LastUsedAt       *time.Time  `json:"lastUsedAt,omitempty"`
	LastUsedAtNEQ    *time.Time  `json:"lastUsedAtNEQ,omitempty"`
	LastUsedAtIn     []time.Time `json:"lastUsedAtIn,omitempty"`
	LastUsedAtNotIn  []time.Time `json:"lastUsedAtNotIn,omitempty"`
	LastUsedAtGT     *time.Time  `json:"lastUsedAtGT,omitempty"`
	LastUsedAtGTE    *time.Time  `json:"lastUsedAtGTE,omitempty"`
	LastUsedAtLT     *time.Time  `json:"lastUsedAtLT,omitempty"`
	LastUsedAtLTE    *time.Time  `json:"lastUsedAtLTE,omitempty"`
	LastUsedAtIsNil  bool        `json:"lastUsedAtIsNil,omitempty"`
	LastUsedAtNotNil bool        `json:"lastUsedAtNotNil,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`

	// "organizations" edge predicates.
	HasOrganizations     *bool                     `json:"hasOrganizations,omitempty"`
	HasOrganizationsWith []*OrganizationWhereInput `json:"hasOrganizationsWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PersonalAccessTokenWhereInput) AddPredicates(predicates ...predicate.PersonalAccessToken) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PersonalAccessTokenWhereInput filter on the PersonalAccessTokenQuery builder.
func (i *PersonalAccessTokenWhereInput) Filter(q *PersonalAccessTokenQuery) (*PersonalAccessTokenQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPersonalAccessTokenWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPersonalAccessTokenWhereInput is returned in case the PersonalAccessTokenWhereInput is empty.
var ErrEmptyPersonalAccessTokenWhereInput = errors.New("generated: empty predicate PersonalAccessTokenWhereInput")

// P returns a predicate for filtering personalaccesstokens.
// An error is returned if the input is empty or invalid.
func (i *PersonalAccessTokenWhereInput) P() (predicate.PersonalAccessToken, error) {
	var predicates []predicate.PersonalAccessToken
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, personalaccesstoken.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PersonalAccessToken, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, personalaccesstoken.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PersonalAccessToken, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, personalaccesstoken.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, personalaccesstoken.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, personalaccesstoken.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, personalaccesstoken.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, personalaccesstoken.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, personalaccesstoken.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, personalaccesstoken.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, personalaccesstoken.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, personalaccesstoken.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, personalaccesstoken.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, personalaccesstoken.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, personalaccesstoken.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, personalaccesstoken.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, personalaccesstoken.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, personalaccesstoken.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, personalaccesstoken.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, personalaccesstoken.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, personalaccesstoken.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, personalaccesstoken.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, personalaccesstoken.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, personalaccesstoken.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, personalaccesstoken.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, personalaccesstoken.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, personalaccesstoken.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, personalaccesstoken.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, personalaccesstoken.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, personalaccesstoken.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, personalaccesstoken.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, personalaccesstoken.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, personalaccesstoken.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, personalaccesstoken.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, personalaccesstoken.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, personalaccesstoken.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, personalaccesstoken.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, personalaccesstoken.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, personalaccesstoken.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, personalaccesstoken.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, personalaccesstoken.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, personalaccesstoken.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, personalaccesstoken.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, personalaccesstoken.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, personalaccesstoken.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, personalaccesstoken.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, personalaccesstoken.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, personalaccesstoken.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, personalaccesstoken.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, personalaccesstoken.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, personalaccesstoken.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, personalaccesstoken.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, personalaccesstoken.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, personalaccesstoken.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, personalaccesstoken.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, personalaccesstoken.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, personalaccesstoken.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, personalaccesstoken.NameContainsFold(*i.NameContainsFold))
	}
	if i.ExpiresAt != nil {
		predicates = append(predicates, personalaccesstoken.ExpiresAtEQ(*i.ExpiresAt))
	}
	if i.ExpiresAtNEQ != nil {
		predicates = append(predicates, personalaccesstoken.ExpiresAtNEQ(*i.ExpiresAtNEQ))
	}
	if len(i.ExpiresAtIn) > 0 {
		predicates = append(predicates, personalaccesstoken.ExpiresAtIn(i.ExpiresAtIn...))
	}
	if len(i.ExpiresAtNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.ExpiresAtNotIn(i.ExpiresAtNotIn...))
	}
	if i.ExpiresAtGT != nil {
		predicates = append(predicates, personalaccesstoken.ExpiresAtGT(*i.ExpiresAtGT))
	}
	if i.ExpiresAtGTE != nil {
		predicates = append(predicates, personalaccesstoken.ExpiresAtGTE(*i.ExpiresAtGTE))
	}
	if i.ExpiresAtLT != nil {
		predicates = append(predicates, personalaccesstoken.ExpiresAtLT(*i.ExpiresAtLT))
	}
	if i.ExpiresAtLTE != nil {
		predicates = append(predicates, personalaccesstoken.ExpiresAtLTE(*i.ExpiresAtLTE))
	}
	if i.ExpiresAtIsNil {
		predicates = append(predicates, personalaccesstoken.ExpiresAtIsNil())
	}
	if i.ExpiresAtNotNil {
		predicates = append(predicates, personalaccesstoken.ExpiresAtNotNil())
	}
	if i.LastUsedAt != nil {
		predicates = append(predicates, personalaccesstoken.LastUsedAtEQ(*i.LastUsedAt))
	}
	if i.LastUsedAtNEQ != nil {
		predicates = append(predicates, personalaccesstoken.LastUsedAtNEQ(*i.LastUsedAtNEQ))
	}
	if len(i.LastUsedAtIn) > 0 {
		predicates = append(predicates, personalaccesstoken.LastUsedAtIn(i.LastUsedAtIn...))
	}
	if len(i.LastUsedAtNotIn) > 0 {
		predicates = append(predicates, personalaccesstoken.LastUsedAtNotIn(i.LastUsedAtNotIn...))
	}
	if i.LastUsedAtGT != nil {
		predicates = append(predicates, personalaccesstoken.LastUsedAtGT(*i.LastUsedAtGT))
	}
	if i.LastUsedAtGTE != nil {
		predicates = append(predicates, personalaccesstoken.LastUsedAtGTE(*i.LastUsedAtGTE))
	}
	if i.LastUsedAtLT != nil {
		predicates = append(predicates, personalaccesstoken.LastUsedAtLT(*i.LastUsedAtLT))
	}
	if i.LastUsedAtLTE != nil {
		predicates = append(predicates, personalaccesstoken.LastUsedAtLTE(*i.LastUsedAtLTE))
	}
	if i.LastUsedAtIsNil {
		predicates = append(predicates, personalaccesstoken.LastUsedAtIsNil())
	}
	if i.LastUsedAtNotNil {
		predicates = append(predicates, personalaccesstoken.LastUsedAtNotNil())
	}

	if i.HasOwner != nil {
		p := personalaccesstoken.HasOwner()
		if !*i.HasOwner {
			p = personalaccesstoken.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, personalaccesstoken.HasOwnerWith(with...))
	}
	if i.HasOrganizations != nil {
		p := personalaccesstoken.HasOrganizations()
		if !*i.HasOrganizations {
			p = personalaccesstoken.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationsWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOrganizationsWith))
		for _, w := range i.HasOrganizationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, personalaccesstoken.HasOrganizationsWith(with...))
	}
	if i.HasEvents != nil {
		p := personalaccesstoken.HasEvents()
		if !*i.HasEvents {
			p = personalaccesstoken.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, personalaccesstoken.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPersonalAccessTokenWhereInput
	case 1:
		return predicates[0], nil
	default:
		return personalaccesstoken.And(predicates...), nil
	}
}

// SubscriberWhereInput represents a where input for filtering Subscriber queries.
type SubscriberWhereInput struct {
	Predicates []predicate.Subscriber  `json:"-"`
	Not        *SubscriberWhereInput   `json:"not,omitempty"`
	Or         []*SubscriberWhereInput `json:"or,omitempty"`
	And        []*SubscriberWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "phone_number" field predicates.
	PhoneNumber             *string  `json:"phoneNumber,omitempty"`
	PhoneNumberNEQ          *string  `json:"phoneNumberNEQ,omitempty"`
	PhoneNumberIn           []string `json:"phoneNumberIn,omitempty"`
	PhoneNumberNotIn        []string `json:"phoneNumberNotIn,omitempty"`
	PhoneNumberGT           *string  `json:"phoneNumberGT,omitempty"`
	PhoneNumberGTE          *string  `json:"phoneNumberGTE,omitempty"`
	PhoneNumberLT           *string  `json:"phoneNumberLT,omitempty"`
	PhoneNumberLTE          *string  `json:"phoneNumberLTE,omitempty"`
	PhoneNumberContains     *string  `json:"phoneNumberContains,omitempty"`
	PhoneNumberHasPrefix    *string  `json:"phoneNumberHasPrefix,omitempty"`
	PhoneNumberHasSuffix    *string  `json:"phoneNumberHasSuffix,omitempty"`
	PhoneNumberIsNil        bool     `json:"phoneNumberIsNil,omitempty"`
	PhoneNumberNotNil       bool     `json:"phoneNumberNotNil,omitempty"`
	PhoneNumberEqualFold    *string  `json:"phoneNumberEqualFold,omitempty"`
	PhoneNumberContainsFold *string  `json:"phoneNumberContainsFold,omitempty"`

	// "verified_email" field predicates.
	VerifiedEmail    *bool `json:"verifiedEmail,omitempty"`
	VerifiedEmailNEQ *bool `json:"verifiedEmailNEQ,omitempty"`

	// "verified_phone" field predicates.
	VerifiedPhone    *bool `json:"verifiedPhone,omitempty"`
	VerifiedPhoneNEQ *bool `json:"verifiedPhoneNEQ,omitempty"`

	// "active" field predicates.
	Active    *bool `json:"active,omitempty"`
	ActiveNEQ *bool `json:"activeNEQ,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SubscriberWhereInput) AddPredicates(predicates ...predicate.Subscriber) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SubscriberWhereInput filter on the SubscriberQuery builder.
func (i *SubscriberWhereInput) Filter(q *SubscriberQuery) (*SubscriberQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySubscriberWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySubscriberWhereInput is returned in case the SubscriberWhereInput is empty.
var ErrEmptySubscriberWhereInput = errors.New("generated: empty predicate SubscriberWhereInput")

// P returns a predicate for filtering subscribers.
// An error is returned if the input is empty or invalid.
func (i *SubscriberWhereInput) P() (predicate.Subscriber, error) {
	var predicates []predicate.Subscriber
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, subscriber.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Subscriber, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, subscriber.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Subscriber, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, subscriber.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, subscriber.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, subscriber.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, subscriber.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, subscriber.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, subscriber.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, subscriber.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, subscriber.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, subscriber.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, subscriber.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, subscriber.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, subscriber.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, subscriber.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, subscriber.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, subscriber.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, subscriber.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, subscriber.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, subscriber.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, subscriber.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, subscriber.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, subscriber.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, subscriber.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, subscriber.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, subscriber.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, subscriber.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, subscriber.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, subscriber.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, subscriber.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, subscriber.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, subscriber.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, subscriber.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, subscriber.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, subscriber.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, subscriber.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, subscriber.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, subscriber.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, subscriber.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, subscriber.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, subscriber.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, subscriber.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, subscriber.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, subscriber.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, subscriber.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, subscriber.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, subscriber.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, subscriber.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, subscriber.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, subscriber.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, subscriber.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, subscriber.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, subscriber.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, subscriber.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, subscriber.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, subscriber.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, subscriber.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, subscriber.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, subscriber.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, subscriber.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, subscriber.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, subscriber.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, subscriber.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, subscriber.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, subscriber.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, subscriber.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, subscriber.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, subscriber.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, subscriber.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, subscriber.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, subscriber.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, subscriber.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, subscriber.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, subscriber.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, subscriber.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, subscriber.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, subscriber.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, subscriber.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, subscriber.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, subscriber.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, subscriber.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, subscriber.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, subscriber.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, subscriber.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, subscriber.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, subscriber.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, subscriber.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, subscriber.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, subscriber.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, subscriber.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, subscriber.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, subscriber.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, subscriber.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, subscriber.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, subscriber.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, subscriber.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, subscriber.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, subscriber.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, subscriber.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, subscriber.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, subscriber.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, subscriber.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, subscriber.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, subscriber.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, subscriber.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, subscriber.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, subscriber.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, subscriber.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, subscriber.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, subscriber.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, subscriber.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, subscriber.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, subscriber.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, subscriber.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, subscriber.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, subscriber.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.PhoneNumber != nil {
		predicates = append(predicates, subscriber.PhoneNumberEQ(*i.PhoneNumber))
	}
	if i.PhoneNumberNEQ != nil {
		predicates = append(predicates, subscriber.PhoneNumberNEQ(*i.PhoneNumberNEQ))
	}
	if len(i.PhoneNumberIn) > 0 {
		predicates = append(predicates, subscriber.PhoneNumberIn(i.PhoneNumberIn...))
	}
	if len(i.PhoneNumberNotIn) > 0 {
		predicates = append(predicates, subscriber.PhoneNumberNotIn(i.PhoneNumberNotIn...))
	}
	if i.PhoneNumberGT != nil {
		predicates = append(predicates, subscriber.PhoneNumberGT(*i.PhoneNumberGT))
	}
	if i.PhoneNumberGTE != nil {
		predicates = append(predicates, subscriber.PhoneNumberGTE(*i.PhoneNumberGTE))
	}
	if i.PhoneNumberLT != nil {
		predicates = append(predicates, subscriber.PhoneNumberLT(*i.PhoneNumberLT))
	}
	if i.PhoneNumberLTE != nil {
		predicates = append(predicates, subscriber.PhoneNumberLTE(*i.PhoneNumberLTE))
	}
	if i.PhoneNumberContains != nil {
		predicates = append(predicates, subscriber.PhoneNumberContains(*i.PhoneNumberContains))
	}
	if i.PhoneNumberHasPrefix != nil {
		predicates = append(predicates, subscriber.PhoneNumberHasPrefix(*i.PhoneNumberHasPrefix))
	}
	if i.PhoneNumberHasSuffix != nil {
		predicates = append(predicates, subscriber.PhoneNumberHasSuffix(*i.PhoneNumberHasSuffix))
	}
	if i.PhoneNumberIsNil {
		predicates = append(predicates, subscriber.PhoneNumberIsNil())
	}
	if i.PhoneNumberNotNil {
		predicates = append(predicates, subscriber.PhoneNumberNotNil())
	}
	if i.PhoneNumberEqualFold != nil {
		predicates = append(predicates, subscriber.PhoneNumberEqualFold(*i.PhoneNumberEqualFold))
	}
	if i.PhoneNumberContainsFold != nil {
		predicates = append(predicates, subscriber.PhoneNumberContainsFold(*i.PhoneNumberContainsFold))
	}
	if i.VerifiedEmail != nil {
		predicates = append(predicates, subscriber.VerifiedEmailEQ(*i.VerifiedEmail))
	}
	if i.VerifiedEmailNEQ != nil {
		predicates = append(predicates, subscriber.VerifiedEmailNEQ(*i.VerifiedEmailNEQ))
	}
	if i.VerifiedPhone != nil {
		predicates = append(predicates, subscriber.VerifiedPhoneEQ(*i.VerifiedPhone))
	}
	if i.VerifiedPhoneNEQ != nil {
		predicates = append(predicates, subscriber.VerifiedPhoneNEQ(*i.VerifiedPhoneNEQ))
	}
	if i.Active != nil {
		predicates = append(predicates, subscriber.ActiveEQ(*i.Active))
	}
	if i.ActiveNEQ != nil {
		predicates = append(predicates, subscriber.ActiveNEQ(*i.ActiveNEQ))
	}

	if i.HasOwner != nil {
		p := subscriber.HasOwner()
		if !*i.HasOwner {
			p = subscriber.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, subscriber.HasOwnerWith(with...))
	}
	if i.HasEvents != nil {
		p := subscriber.HasEvents()
		if !*i.HasEvents {
			p = subscriber.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, subscriber.HasEventsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySubscriberWhereInput
	case 1:
		return predicates[0], nil
	default:
		return subscriber.And(predicates...), nil
	}
}

// TFASettingWhereInput represents a where input for filtering TFASetting queries.
type TFASettingWhereInput struct {
	Predicates []predicate.TFASetting  `json:"-"`
	Not        *TFASettingWhereInput   `json:"not,omitempty"`
	Or         []*TFASettingWhereInput `json:"or,omitempty"`
	And        []*TFASettingWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "tfa_secret" field predicates.
	TfaSecret             *string  `json:"tfaSecret,omitempty"`
	TfaSecretNEQ          *string  `json:"tfaSecretNEQ,omitempty"`
	TfaSecretIn           []string `json:"tfaSecretIn,omitempty"`
	TfaSecretNotIn        []string `json:"tfaSecretNotIn,omitempty"`
	TfaSecretGT           *string  `json:"tfaSecretGT,omitempty"`
	TfaSecretGTE          *string  `json:"tfaSecretGTE,omitempty"`
	TfaSecretLT           *string  `json:"tfaSecretLT,omitempty"`
	TfaSecretLTE          *string  `json:"tfaSecretLTE,omitempty"`
	TfaSecretContains     *string  `json:"tfaSecretContains,omitempty"`
	TfaSecretHasPrefix    *string  `json:"tfaSecretHasPrefix,omitempty"`
	TfaSecretHasSuffix    *string  `json:"tfaSecretHasSuffix,omitempty"`
	TfaSecretIsNil        bool     `json:"tfaSecretIsNil,omitempty"`
	TfaSecretNotNil       bool     `json:"tfaSecretNotNil,omitempty"`
	TfaSecretEqualFold    *string  `json:"tfaSecretEqualFold,omitempty"`
	TfaSecretContainsFold *string  `json:"tfaSecretContainsFold,omitempty"`

	// "verified" field predicates.
	Verified    *bool `json:"verified,omitempty"`
	VerifiedNEQ *bool `json:"verifiedNEQ,omitempty"`

	// "totp_allowed" field predicates.
	TotpAllowed       *bool `json:"totpAllowed,omitempty"`
	TotpAllowedNEQ    *bool `json:"totpAllowedNEQ,omitempty"`
	TotpAllowedIsNil  bool  `json:"totpAllowedIsNil,omitempty"`
	TotpAllowedNotNil bool  `json:"totpAllowedNotNil,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TFASettingWhereInput) AddPredicates(predicates ...predicate.TFASetting) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TFASettingWhereInput filter on the TFASettingQuery builder.
func (i *TFASettingWhereInput) Filter(q *TFASettingQuery) (*TFASettingQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTFASettingWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTFASettingWhereInput is returned in case the TFASettingWhereInput is empty.
var ErrEmptyTFASettingWhereInput = errors.New("generated: empty predicate TFASettingWhereInput")

// P returns a predicate for filtering tfasettings.
// An error is returned if the input is empty or invalid.
func (i *TFASettingWhereInput) P() (predicate.TFASetting, error) {
	var predicates []predicate.TFASetting
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tfasetting.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TFASetting, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tfasetting.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TFASetting, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tfasetting.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tfasetting.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tfasetting.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tfasetting.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tfasetting.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tfasetting.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tfasetting.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tfasetting.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tfasetting.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, tfasetting.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, tfasetting.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tfasetting.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tfasetting.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tfasetting.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tfasetting.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tfasetting.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tfasetting.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tfasetting.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tfasetting.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, tfasetting.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, tfasetting.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tfasetting.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tfasetting.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tfasetting.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tfasetting.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tfasetting.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tfasetting.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tfasetting.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tfasetting.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, tfasetting.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, tfasetting.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, tfasetting.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, tfasetting.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, tfasetting.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, tfasetting.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, tfasetting.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, tfasetting.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, tfasetting.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, tfasetting.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, tfasetting.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, tfasetting.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, tfasetting.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, tfasetting.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, tfasetting.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, tfasetting.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, tfasetting.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, tfasetting.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, tfasetting.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, tfasetting.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, tfasetting.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, tfasetting.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, tfasetting.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, tfasetting.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, tfasetting.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, tfasetting.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, tfasetting.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, tfasetting.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, tfasetting.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, tfasetting.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, tfasetting.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, tfasetting.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, tfasetting.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, tfasetting.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, tfasetting.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, tfasetting.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, tfasetting.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, tfasetting.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, tfasetting.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, tfasetting.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, tfasetting.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, tfasetting.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, tfasetting.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, tfasetting.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, tfasetting.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, tfasetting.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, tfasetting.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, tfasetting.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, tfasetting.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, tfasetting.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, tfasetting.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, tfasetting.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, tfasetting.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, tfasetting.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, tfasetting.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, tfasetting.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, tfasetting.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.TfaSecret != nil {
		predicates = append(predicates, tfasetting.TfaSecretEQ(*i.TfaSecret))
	}
	if i.TfaSecretNEQ != nil {
		predicates = append(predicates, tfasetting.TfaSecretNEQ(*i.TfaSecretNEQ))
	}
	if len(i.TfaSecretIn) > 0 {
		predicates = append(predicates, tfasetting.TfaSecretIn(i.TfaSecretIn...))
	}
	if len(i.TfaSecretNotIn) > 0 {
		predicates = append(predicates, tfasetting.TfaSecretNotIn(i.TfaSecretNotIn...))
	}
	if i.TfaSecretGT != nil {
		predicates = append(predicates, tfasetting.TfaSecretGT(*i.TfaSecretGT))
	}
	if i.TfaSecretGTE != nil {
		predicates = append(predicates, tfasetting.TfaSecretGTE(*i.TfaSecretGTE))
	}
	if i.TfaSecretLT != nil {
		predicates = append(predicates, tfasetting.TfaSecretLT(*i.TfaSecretLT))
	}
	if i.TfaSecretLTE != nil {
		predicates = append(predicates, tfasetting.TfaSecretLTE(*i.TfaSecretLTE))
	}
	if i.TfaSecretContains != nil {
		predicates = append(predicates, tfasetting.TfaSecretContains(*i.TfaSecretContains))
	}
	if i.TfaSecretHasPrefix != nil {
		predicates = append(predicates, tfasetting.TfaSecretHasPrefix(*i.TfaSecretHasPrefix))
	}
	if i.TfaSecretHasSuffix != nil {
		predicates = append(predicates, tfasetting.TfaSecretHasSuffix(*i.TfaSecretHasSuffix))
	}
	if i.TfaSecretIsNil {
		predicates = append(predicates, tfasetting.TfaSecretIsNil())
	}
	if i.TfaSecretNotNil {
		predicates = append(predicates, tfasetting.TfaSecretNotNil())
	}
	if i.TfaSecretEqualFold != nil {
		predicates = append(predicates, tfasetting.TfaSecretEqualFold(*i.TfaSecretEqualFold))
	}
	if i.TfaSecretContainsFold != nil {
		predicates = append(predicates, tfasetting.TfaSecretContainsFold(*i.TfaSecretContainsFold))
	}
	if i.Verified != nil {
		predicates = append(predicates, tfasetting.VerifiedEQ(*i.Verified))
	}
	if i.VerifiedNEQ != nil {
		predicates = append(predicates, tfasetting.VerifiedNEQ(*i.VerifiedNEQ))
	}
	if i.TotpAllowed != nil {
		predicates = append(predicates, tfasetting.TotpAllowedEQ(*i.TotpAllowed))
	}
	if i.TotpAllowedNEQ != nil {
		predicates = append(predicates, tfasetting.TotpAllowedNEQ(*i.TotpAllowedNEQ))
	}
	if i.TotpAllowedIsNil {
		predicates = append(predicates, tfasetting.TotpAllowedIsNil())
	}
	if i.TotpAllowedNotNil {
		predicates = append(predicates, tfasetting.TotpAllowedNotNil())
	}

	if i.HasOwner != nil {
		p := tfasetting.HasOwner()
		if !*i.HasOwner {
			p = tfasetting.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tfasetting.HasOwnerWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTFASettingWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tfasetting.And(predicates...), nil
	}
}

// TemplateWhereInput represents a where input for filtering Template queries.
type TemplateWhereInput struct {
	Predicates []predicate.Template  `json:"-"`
	Not        *TemplateWhereInput   `json:"not,omitempty"`
	Or         []*TemplateWhereInput `json:"or,omitempty"`
	And        []*TemplateWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "template_type" field predicates.
	TemplateType      *enums.DocumentType  `json:"templateType,omitempty"`
	TemplateTypeNEQ   *enums.DocumentType  `json:"templateTypeNEQ,omitempty"`
	TemplateTypeIn    []enums.DocumentType `json:"templateTypeIn,omitempty"`
	TemplateTypeNotIn []enums.DocumentType `json:"templateTypeNotIn,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "documents" edge predicates.
	HasDocuments     *bool                     `json:"hasDocuments,omitempty"`
	HasDocumentsWith []*DocumentDataWhereInput `json:"hasDocumentsWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TemplateWhereInput) AddPredicates(predicates ...predicate.Template) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TemplateWhereInput filter on the TemplateQuery builder.
func (i *TemplateWhereInput) Filter(q *TemplateQuery) (*TemplateQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTemplateWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTemplateWhereInput is returned in case the TemplateWhereInput is empty.
var ErrEmptyTemplateWhereInput = errors.New("generated: empty predicate TemplateWhereInput")

// P returns a predicate for filtering templates.
// An error is returned if the input is empty or invalid.
func (i *TemplateWhereInput) P() (predicate.Template, error) {
	var predicates []predicate.Template
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, template.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Template, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, template.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Template, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, template.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, template.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, template.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, template.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, template.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, template.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, template.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, template.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, template.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, template.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, template.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, template.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, template.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, template.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, template.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, template.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, template.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, template.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, template.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, template.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, template.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, template.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, template.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, template.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, template.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, template.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, template.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, template.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, template.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, template.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, template.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, template.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, template.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, template.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, template.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, template.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, template.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, template.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, template.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, template.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, template.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, template.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, template.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, template.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, template.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, template.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, template.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, template.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, template.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, template.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, template.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, template.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, template.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, template.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, template.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, template.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, template.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, template.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, template.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, template.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, template.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, template.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, template.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, template.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, template.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, template.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, template.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, template.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, template.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, template.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, template.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, template.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, template.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, template.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, template.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, template.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, template.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, template.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, template.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, template.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, template.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, template.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, template.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, template.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, template.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, template.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, template.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, template.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, template.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, template.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, template.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, template.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, template.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, template.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, template.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, template.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, template.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, template.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, template.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, template.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, template.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, template.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, template.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, template.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, template.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, template.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, template.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, template.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, template.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, template.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, template.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, template.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, template.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, template.NameContainsFold(*i.NameContainsFold))
	}
	if i.TemplateType != nil {
		predicates = append(predicates, template.TemplateTypeEQ(*i.TemplateType))
	}
	if i.TemplateTypeNEQ != nil {
		predicates = append(predicates, template.TemplateTypeNEQ(*i.TemplateTypeNEQ))
	}
	if len(i.TemplateTypeIn) > 0 {
		predicates = append(predicates, template.TemplateTypeIn(i.TemplateTypeIn...))
	}
	if len(i.TemplateTypeNotIn) > 0 {
		predicates = append(predicates, template.TemplateTypeNotIn(i.TemplateTypeNotIn...))
	}
	if i.Description != nil {
		predicates = append(predicates, template.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, template.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, template.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, template.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, template.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, template.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, template.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, template.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, template.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, template.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, template.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, template.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, template.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, template.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, template.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasOwner != nil {
		p := template.HasOwner()
		if !*i.HasOwner {
			p = template.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, template.HasOwnerWith(with...))
	}
	if i.HasDocuments != nil {
		p := template.HasDocuments()
		if !*i.HasDocuments {
			p = template.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDocumentsWith) > 0 {
		with := make([]predicate.DocumentData, 0, len(i.HasDocumentsWith))
		for _, w := range i.HasDocumentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDocumentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, template.HasDocumentsWith(with...))
	}
	if i.HasFiles != nil {
		p := template.HasFiles()
		if !*i.HasFiles {
			p = template.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, template.HasFilesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTemplateWhereInput
	case 1:
		return predicates[0], nil
	default:
		return template.And(predicates...), nil
	}
}

// TemplateHistoryWhereInput represents a where input for filtering TemplateHistory queries.
type TemplateHistoryWhereInput struct {
	Predicates []predicate.TemplateHistory  `json:"-"`
	Not        *TemplateHistoryWhereInput   `json:"not,omitempty"`
	Or         []*TemplateHistoryWhereInput `json:"or,omitempty"`
	And        []*TemplateHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "template_type" field predicates.
	TemplateType      *enums.DocumentType  `json:"templateType,omitempty"`
	TemplateTypeNEQ   *enums.DocumentType  `json:"templateTypeNEQ,omitempty"`
	TemplateTypeIn    []enums.DocumentType `json:"templateTypeIn,omitempty"`
	TemplateTypeNotIn []enums.DocumentType `json:"templateTypeNotIn,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TemplateHistoryWhereInput) AddPredicates(predicates ...predicate.TemplateHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TemplateHistoryWhereInput filter on the TemplateHistoryQuery builder.
func (i *TemplateHistoryWhereInput) Filter(q *TemplateHistoryQuery) (*TemplateHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTemplateHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTemplateHistoryWhereInput is returned in case the TemplateHistoryWhereInput is empty.
var ErrEmptyTemplateHistoryWhereInput = errors.New("generated: empty predicate TemplateHistoryWhereInput")

// P returns a predicate for filtering templatehistories.
// An error is returned if the input is empty or invalid.
func (i *TemplateHistoryWhereInput) P() (predicate.TemplateHistory, error) {
	var predicates []predicate.TemplateHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, templatehistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TemplateHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, templatehistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TemplateHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, templatehistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, templatehistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, templatehistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, templatehistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, templatehistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, templatehistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, templatehistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, templatehistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, templatehistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, templatehistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, templatehistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, templatehistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, templatehistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, templatehistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, templatehistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, templatehistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, templatehistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, templatehistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, templatehistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, templatehistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, templatehistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, templatehistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, templatehistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, templatehistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, templatehistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, templatehistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, templatehistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, templatehistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, templatehistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, templatehistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, templatehistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, templatehistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, templatehistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, templatehistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, templatehistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, templatehistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, templatehistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, templatehistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, templatehistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, templatehistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, templatehistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, templatehistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, templatehistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, templatehistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, templatehistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, templatehistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, templatehistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, templatehistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, templatehistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, templatehistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, templatehistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, templatehistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, templatehistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, templatehistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, templatehistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, templatehistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, templatehistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, templatehistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, templatehistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, templatehistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, templatehistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, templatehistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, templatehistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, templatehistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, templatehistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, templatehistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, templatehistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, templatehistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, templatehistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, templatehistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, templatehistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, templatehistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, templatehistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, templatehistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, templatehistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, templatehistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, templatehistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, templatehistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, templatehistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, templatehistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, templatehistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, templatehistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, templatehistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, templatehistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, templatehistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, templatehistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, templatehistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, templatehistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, templatehistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, templatehistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, templatehistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, templatehistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, templatehistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, templatehistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, templatehistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, templatehistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, templatehistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, templatehistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, templatehistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, templatehistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, templatehistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, templatehistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, templatehistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, templatehistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, templatehistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, templatehistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, templatehistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, templatehistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, templatehistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, templatehistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, templatehistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, templatehistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, templatehistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, templatehistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, templatehistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, templatehistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, templatehistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, templatehistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, templatehistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, templatehistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, templatehistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, templatehistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, templatehistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, templatehistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, templatehistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, templatehistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, templatehistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, templatehistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, templatehistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, templatehistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, templatehistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, templatehistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, templatehistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, templatehistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, templatehistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, templatehistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, templatehistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, templatehistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, templatehistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, templatehistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, templatehistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.TemplateType != nil {
		predicates = append(predicates, templatehistory.TemplateTypeEQ(*i.TemplateType))
	}
	if i.TemplateTypeNEQ != nil {
		predicates = append(predicates, templatehistory.TemplateTypeNEQ(*i.TemplateTypeNEQ))
	}
	if len(i.TemplateTypeIn) > 0 {
		predicates = append(predicates, templatehistory.TemplateTypeIn(i.TemplateTypeIn...))
	}
	if len(i.TemplateTypeNotIn) > 0 {
		predicates = append(predicates, templatehistory.TemplateTypeNotIn(i.TemplateTypeNotIn...))
	}
	if i.Description != nil {
		predicates = append(predicates, templatehistory.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, templatehistory.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, templatehistory.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, templatehistory.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, templatehistory.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, templatehistory.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, templatehistory.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, templatehistory.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, templatehistory.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, templatehistory.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, templatehistory.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, templatehistory.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, templatehistory.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, templatehistory.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, templatehistory.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTemplateHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return templatehistory.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "first_name" field predicates.
	FirstName             *string  `json:"firstName,omitempty"`
	FirstNameNEQ          *string  `json:"firstNameNEQ,omitempty"`
	FirstNameIn           []string `json:"firstNameIn,omitempty"`
	FirstNameNotIn        []string `json:"firstNameNotIn,omitempty"`
	FirstNameGT           *string  `json:"firstNameGT,omitempty"`
	FirstNameGTE          *string  `json:"firstNameGTE,omitempty"`
	FirstNameLT           *string  `json:"firstNameLT,omitempty"`
	FirstNameLTE          *string  `json:"firstNameLTE,omitempty"`
	FirstNameContains     *string  `json:"firstNameContains,omitempty"`
	FirstNameHasPrefix    *string  `json:"firstNameHasPrefix,omitempty"`
	FirstNameHasSuffix    *string  `json:"firstNameHasSuffix,omitempty"`
	FirstNameIsNil        bool     `json:"firstNameIsNil,omitempty"`
	FirstNameNotNil       bool     `json:"firstNameNotNil,omitempty"`
	FirstNameEqualFold    *string  `json:"firstNameEqualFold,omitempty"`
	FirstNameContainsFold *string  `json:"firstNameContainsFold,omitempty"`

	// "last_name" field predicates.
	LastName             *string  `json:"lastName,omitempty"`
	LastNameNEQ          *string  `json:"lastNameNEQ,omitempty"`
	LastNameIn           []string `json:"lastNameIn,omitempty"`
	LastNameNotIn        []string `json:"lastNameNotIn,omitempty"`
	LastNameGT           *string  `json:"lastNameGT,omitempty"`
	LastNameGTE          *string  `json:"lastNameGTE,omitempty"`
	LastNameLT           *string  `json:"lastNameLT,omitempty"`
	LastNameLTE          *string  `json:"lastNameLTE,omitempty"`
	LastNameContains     *string  `json:"lastNameContains,omitempty"`
	LastNameHasPrefix    *string  `json:"lastNameHasPrefix,omitempty"`
	LastNameHasSuffix    *string  `json:"lastNameHasSuffix,omitempty"`
	LastNameIsNil        bool     `json:"lastNameIsNil,omitempty"`
	LastNameNotNil       bool     `json:"lastNameNotNil,omitempty"`
	LastNameEqualFold    *string  `json:"lastNameEqualFold,omitempty"`
	LastNameContainsFold *string  `json:"lastNameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "avatar_remote_url" field predicates.
	AvatarRemoteURL             *string  `json:"avatarRemoteURL,omitempty"`
	AvatarRemoteURLNEQ          *string  `json:"avatarRemoteURLNEQ,omitempty"`
	AvatarRemoteURLIn           []string `json:"avatarRemoteURLIn,omitempty"`
	AvatarRemoteURLNotIn        []string `json:"avatarRemoteURLNotIn,omitempty"`
	AvatarRemoteURLGT           *string  `json:"avatarRemoteURLGT,omitempty"`
	AvatarRemoteURLGTE          *string  `json:"avatarRemoteURLGTE,omitempty"`
	AvatarRemoteURLLT           *string  `json:"avatarRemoteURLLT,omitempty"`
	AvatarRemoteURLLTE          *string  `json:"avatarRemoteURLLTE,omitempty"`
	AvatarRemoteURLContains     *string  `json:"avatarRemoteURLContains,omitempty"`
	AvatarRemoteURLHasPrefix    *string  `json:"avatarRemoteURLHasPrefix,omitempty"`
	AvatarRemoteURLHasSuffix    *string  `json:"avatarRemoteURLHasSuffix,omitempty"`
	AvatarRemoteURLIsNil        bool     `json:"avatarRemoteURLIsNil,omitempty"`
	AvatarRemoteURLNotNil       bool     `json:"avatarRemoteURLNotNil,omitempty"`
	AvatarRemoteURLEqualFold    *string  `json:"avatarRemoteURLEqualFold,omitempty"`
	AvatarRemoteURLContainsFold *string  `json:"avatarRemoteURLContainsFold,omitempty"`

	// "avatar_local_file" field predicates.
	AvatarLocalFile             *string  `json:"avatarLocalFile,omitempty"`
	AvatarLocalFileNEQ          *string  `json:"avatarLocalFileNEQ,omitempty"`
	AvatarLocalFileIn           []string `json:"avatarLocalFileIn,omitempty"`
	AvatarLocalFileNotIn        []string `json:"avatarLocalFileNotIn,omitempty"`
	AvatarLocalFileGT           *string  `json:"avatarLocalFileGT,omitempty"`
	AvatarLocalFileGTE          *string  `json:"avatarLocalFileGTE,omitempty"`
	AvatarLocalFileLT           *string  `json:"avatarLocalFileLT,omitempty"`
	AvatarLocalFileLTE          *string  `json:"avatarLocalFileLTE,omitempty"`
	AvatarLocalFileContains     *string  `json:"avatarLocalFileContains,omitempty"`
	AvatarLocalFileHasPrefix    *string  `json:"avatarLocalFileHasPrefix,omitempty"`
	AvatarLocalFileHasSuffix    *string  `json:"avatarLocalFileHasSuffix,omitempty"`
	AvatarLocalFileIsNil        bool     `json:"avatarLocalFileIsNil,omitempty"`
	AvatarLocalFileNotNil       bool     `json:"avatarLocalFileNotNil,omitempty"`
	AvatarLocalFileEqualFold    *string  `json:"avatarLocalFileEqualFold,omitempty"`
	AvatarLocalFileContainsFold *string  `json:"avatarLocalFileContainsFold,omitempty"`

	// "avatar_local_file_id" field predicates.
	AvatarLocalFileID             *string  `json:"avatarLocalFileID,omitempty"`
	AvatarLocalFileIDNEQ          *string  `json:"avatarLocalFileIDNEQ,omitempty"`
	AvatarLocalFileIDIn           []string `json:"avatarLocalFileIDIn,omitempty"`
	AvatarLocalFileIDNotIn        []string `json:"avatarLocalFileIDNotIn,omitempty"`
	AvatarLocalFileIDGT           *string  `json:"avatarLocalFileIDGT,omitempty"`
	AvatarLocalFileIDGTE          *string  `json:"avatarLocalFileIDGTE,omitempty"`
	AvatarLocalFileIDLT           *string  `json:"avatarLocalFileIDLT,omitempty"`
	AvatarLocalFileIDLTE          *string  `json:"avatarLocalFileIDLTE,omitempty"`
	AvatarLocalFileIDContains     *string  `json:"avatarLocalFileIDContains,omitempty"`
	AvatarLocalFileIDHasPrefix    *string  `json:"avatarLocalFileIDHasPrefix,omitempty"`
	AvatarLocalFileIDHasSuffix    *string  `json:"avatarLocalFileIDHasSuffix,omitempty"`
	AvatarLocalFileIDIsNil        bool     `json:"avatarLocalFileIDIsNil,omitempty"`
	AvatarLocalFileIDNotNil       bool     `json:"avatarLocalFileIDNotNil,omitempty"`
	AvatarLocalFileIDEqualFold    *string  `json:"avatarLocalFileIDEqualFold,omitempty"`
	AvatarLocalFileIDContainsFold *string  `json:"avatarLocalFileIDContainsFold,omitempty"`

	// "avatar_updated_at" field predicates.
	AvatarUpdatedAt       *time.Time  `json:"avatarUpdatedAt,omitempty"`
	AvatarUpdatedAtNEQ    *time.Time  `json:"avatarUpdatedAtNEQ,omitempty"`
	AvatarUpdatedAtIn     []time.Time `json:"avatarUpdatedAtIn,omitempty"`
	AvatarUpdatedAtNotIn  []time.Time `json:"avatarUpdatedAtNotIn,omitempty"`
	AvatarUpdatedAtGT     *time.Time  `json:"avatarUpdatedAtGT,omitempty"`
	AvatarUpdatedAtGTE    *time.Time  `json:"avatarUpdatedAtGTE,omitempty"`
	AvatarUpdatedAtLT     *time.Time  `json:"avatarUpdatedAtLT,omitempty"`
	AvatarUpdatedAtLTE    *time.Time  `json:"avatarUpdatedAtLTE,omitempty"`
	AvatarUpdatedAtIsNil  bool        `json:"avatarUpdatedAtIsNil,omitempty"`
	AvatarUpdatedAtNotNil bool        `json:"avatarUpdatedAtNotNil,omitempty"`

	// "last_seen" field predicates.
	LastSeen       *time.Time  `json:"lastSeen,omitempty"`
	LastSeenNEQ    *time.Time  `json:"lastSeenNEQ,omitempty"`
	LastSeenIn     []time.Time `json:"lastSeenIn,omitempty"`
	LastSeenNotIn  []time.Time `json:"lastSeenNotIn,omitempty"`
	LastSeenGT     *time.Time  `json:"lastSeenGT,omitempty"`
	LastSeenGTE    *time.Time  `json:"lastSeenGTE,omitempty"`
	LastSeenLT     *time.Time  `json:"lastSeenLT,omitempty"`
	LastSeenLTE    *time.Time  `json:"lastSeenLTE,omitempty"`
	LastSeenIsNil  bool        `json:"lastSeenIsNil,omitempty"`
	LastSeenNotNil bool        `json:"lastSeenNotNil,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordIsNil        bool     `json:"passwordIsNil,omitempty"`
	PasswordNotNil       bool     `json:"passwordNotNil,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "sub" field predicates.
	Sub             *string  `json:"sub,omitempty"`
	SubNEQ          *string  `json:"subNEQ,omitempty"`
	SubIn           []string `json:"subIn,omitempty"`
	SubNotIn        []string `json:"subNotIn,omitempty"`
	SubGT           *string  `json:"subGT,omitempty"`
	SubGTE          *string  `json:"subGTE,omitempty"`
	SubLT           *string  `json:"subLT,omitempty"`
	SubLTE          *string  `json:"subLTE,omitempty"`
	SubContains     *string  `json:"subContains,omitempty"`
	SubHasPrefix    *string  `json:"subHasPrefix,omitempty"`
	SubHasSuffix    *string  `json:"subHasSuffix,omitempty"`
	SubIsNil        bool     `json:"subIsNil,omitempty"`
	SubNotNil       bool     `json:"subNotNil,omitempty"`
	SubEqualFold    *string  `json:"subEqualFold,omitempty"`
	SubContainsFold *string  `json:"subContainsFold,omitempty"`

	// "auth_provider" field predicates.
	AuthProvider      *enums.AuthProvider  `json:"authProvider,omitempty"`
	AuthProviderNEQ   *enums.AuthProvider  `json:"authProviderNEQ,omitempty"`
	AuthProviderIn    []enums.AuthProvider `json:"authProviderIn,omitempty"`
	AuthProviderNotIn []enums.AuthProvider `json:"authProviderNotIn,omitempty"`

	// "role" field predicates.
	Role       *enums.Role  `json:"role,omitempty"`
	RoleNEQ    *enums.Role  `json:"roleNEQ,omitempty"`
	RoleIn     []enums.Role `json:"roleIn,omitempty"`
	RoleNotIn  []enums.Role `json:"roleNotIn,omitempty"`
	RoleIsNil  bool         `json:"roleIsNil,omitempty"`
	RoleNotNil bool         `json:"roleNotNil,omitempty"`

	// "personal_access_tokens" edge predicates.
	HasPersonalAccessTokens     *bool                            `json:"hasPersonalAccessTokens,omitempty"`
	HasPersonalAccessTokensWith []*PersonalAccessTokenWhereInput `json:"hasPersonalAccessTokensWith,omitempty"`

	// "tfa_settings" edge predicates.
	HasTfaSettings     *bool                   `json:"hasTfaSettings,omitempty"`
	HasTfaSettingsWith []*TFASettingWhereInput `json:"hasTfaSettingsWith,omitempty"`

	// "setting" edge predicates.
	HasSetting     *bool                    `json:"hasSetting,omitempty"`
	HasSettingWith []*UserSettingWhereInput `json:"hasSettingWith,omitempty"`

	// "groups" edge predicates.
	HasGroups     *bool              `json:"hasGroups,omitempty"`
	HasGroupsWith []*GroupWhereInput `json:"hasGroupsWith,omitempty"`

	// "organizations" edge predicates.
	HasOrganizations     *bool                     `json:"hasOrganizations,omitempty"`
	HasOrganizationsWith []*OrganizationWhereInput `json:"hasOrganizationsWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`

	// "file" edge predicates.
	HasFile     *bool             `json:"hasFile,omitempty"`
	HasFileWith []*FileWhereInput `json:"hasFileWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`

	// "group_memberships" edge predicates.
	HasGroupMemberships     *bool                        `json:"hasGroupMemberships,omitempty"`
	HasGroupMembershipsWith []*GroupMembershipWhereInput `json:"hasGroupMembershipsWith,omitempty"`

	// "org_memberships" edge predicates.
	HasOrgMemberships     *bool                      `json:"hasOrgMemberships,omitempty"`
	HasOrgMembershipsWith []*OrgMembershipWhereInput `json:"hasOrgMembershipsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("generated: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, user.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, user.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, user.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, user.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, user.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, user.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, user.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, user.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, user.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, user.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, user.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, user.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, user.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, user.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, user.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, user.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, user.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, user.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, user.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, user.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, user.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, user.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, user.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, user.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, user.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, user.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, user.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, user.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, user.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, user.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, user.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, user.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, user.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, user.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, user.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, user.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, user.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, user.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, user.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, user.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, user.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, user.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, user.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, user.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, user.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, user.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, user.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, user.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, user.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, user.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, user.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, user.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, user.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, user.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, user.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, user.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, user.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, user.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, user.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, user.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, user.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.FirstName != nil {
		predicates = append(predicates, user.FirstNameEQ(*i.FirstName))
	}
	if i.FirstNameNEQ != nil {
		predicates = append(predicates, user.FirstNameNEQ(*i.FirstNameNEQ))
	}
	if len(i.FirstNameIn) > 0 {
		predicates = append(predicates, user.FirstNameIn(i.FirstNameIn...))
	}
	if len(i.FirstNameNotIn) > 0 {
		predicates = append(predicates, user.FirstNameNotIn(i.FirstNameNotIn...))
	}
	if i.FirstNameGT != nil {
		predicates = append(predicates, user.FirstNameGT(*i.FirstNameGT))
	}
	if i.FirstNameGTE != nil {
		predicates = append(predicates, user.FirstNameGTE(*i.FirstNameGTE))
	}
	if i.FirstNameLT != nil {
		predicates = append(predicates, user.FirstNameLT(*i.FirstNameLT))
	}
	if i.FirstNameLTE != nil {
		predicates = append(predicates, user.FirstNameLTE(*i.FirstNameLTE))
	}
	if i.FirstNameContains != nil {
		predicates = append(predicates, user.FirstNameContains(*i.FirstNameContains))
	}
	if i.FirstNameHasPrefix != nil {
		predicates = append(predicates, user.FirstNameHasPrefix(*i.FirstNameHasPrefix))
	}
	if i.FirstNameHasSuffix != nil {
		predicates = append(predicates, user.FirstNameHasSuffix(*i.FirstNameHasSuffix))
	}
	if i.FirstNameIsNil {
		predicates = append(predicates, user.FirstNameIsNil())
	}
	if i.FirstNameNotNil {
		predicates = append(predicates, user.FirstNameNotNil())
	}
	if i.FirstNameEqualFold != nil {
		predicates = append(predicates, user.FirstNameEqualFold(*i.FirstNameEqualFold))
	}
	if i.FirstNameContainsFold != nil {
		predicates = append(predicates, user.FirstNameContainsFold(*i.FirstNameContainsFold))
	}
	if i.LastName != nil {
		predicates = append(predicates, user.LastNameEQ(*i.LastName))
	}
	if i.LastNameNEQ != nil {
		predicates = append(predicates, user.LastNameNEQ(*i.LastNameNEQ))
	}
	if len(i.LastNameIn) > 0 {
		predicates = append(predicates, user.LastNameIn(i.LastNameIn...))
	}
	if len(i.LastNameNotIn) > 0 {
		predicates = append(predicates, user.LastNameNotIn(i.LastNameNotIn...))
	}
	if i.LastNameGT != nil {
		predicates = append(predicates, user.LastNameGT(*i.LastNameGT))
	}
	if i.LastNameGTE != nil {
		predicates = append(predicates, user.LastNameGTE(*i.LastNameGTE))
	}
	if i.LastNameLT != nil {
		predicates = append(predicates, user.LastNameLT(*i.LastNameLT))
	}
	if i.LastNameLTE != nil {
		predicates = append(predicates, user.LastNameLTE(*i.LastNameLTE))
	}
	if i.LastNameContains != nil {
		predicates = append(predicates, user.LastNameContains(*i.LastNameContains))
	}
	if i.LastNameHasPrefix != nil {
		predicates = append(predicates, user.LastNameHasPrefix(*i.LastNameHasPrefix))
	}
	if i.LastNameHasSuffix != nil {
		predicates = append(predicates, user.LastNameHasSuffix(*i.LastNameHasSuffix))
	}
	if i.LastNameIsNil {
		predicates = append(predicates, user.LastNameIsNil())
	}
	if i.LastNameNotNil {
		predicates = append(predicates, user.LastNameNotNil())
	}
	if i.LastNameEqualFold != nil {
		predicates = append(predicates, user.LastNameEqualFold(*i.LastNameEqualFold))
	}
	if i.LastNameContainsFold != nil {
		predicates = append(predicates, user.LastNameContainsFold(*i.LastNameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, user.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, user.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, user.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, user.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, user.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, user.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, user.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, user.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, user.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, user.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, user.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, user.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, user.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.AvatarRemoteURL != nil {
		predicates = append(predicates, user.AvatarRemoteURLEQ(*i.AvatarRemoteURL))
	}
	if i.AvatarRemoteURLNEQ != nil {
		predicates = append(predicates, user.AvatarRemoteURLNEQ(*i.AvatarRemoteURLNEQ))
	}
	if len(i.AvatarRemoteURLIn) > 0 {
		predicates = append(predicates, user.AvatarRemoteURLIn(i.AvatarRemoteURLIn...))
	}
	if len(i.AvatarRemoteURLNotIn) > 0 {
		predicates = append(predicates, user.AvatarRemoteURLNotIn(i.AvatarRemoteURLNotIn...))
	}
	if i.AvatarRemoteURLGT != nil {
		predicates = append(predicates, user.AvatarRemoteURLGT(*i.AvatarRemoteURLGT))
	}
	if i.AvatarRemoteURLGTE != nil {
		predicates = append(predicates, user.AvatarRemoteURLGTE(*i.AvatarRemoteURLGTE))
	}
	if i.AvatarRemoteURLLT != nil {
		predicates = append(predicates, user.AvatarRemoteURLLT(*i.AvatarRemoteURLLT))
	}
	if i.AvatarRemoteURLLTE != nil {
		predicates = append(predicates, user.AvatarRemoteURLLTE(*i.AvatarRemoteURLLTE))
	}
	if i.AvatarRemoteURLContains != nil {
		predicates = append(predicates, user.AvatarRemoteURLContains(*i.AvatarRemoteURLContains))
	}
	if i.AvatarRemoteURLHasPrefix != nil {
		predicates = append(predicates, user.AvatarRemoteURLHasPrefix(*i.AvatarRemoteURLHasPrefix))
	}
	if i.AvatarRemoteURLHasSuffix != nil {
		predicates = append(predicates, user.AvatarRemoteURLHasSuffix(*i.AvatarRemoteURLHasSuffix))
	}
	if i.AvatarRemoteURLIsNil {
		predicates = append(predicates, user.AvatarRemoteURLIsNil())
	}
	if i.AvatarRemoteURLNotNil {
		predicates = append(predicates, user.AvatarRemoteURLNotNil())
	}
	if i.AvatarRemoteURLEqualFold != nil {
		predicates = append(predicates, user.AvatarRemoteURLEqualFold(*i.AvatarRemoteURLEqualFold))
	}
	if i.AvatarRemoteURLContainsFold != nil {
		predicates = append(predicates, user.AvatarRemoteURLContainsFold(*i.AvatarRemoteURLContainsFold))
	}
	if i.AvatarLocalFile != nil {
		predicates = append(predicates, user.AvatarLocalFileEQ(*i.AvatarLocalFile))
	}
	if i.AvatarLocalFileNEQ != nil {
		predicates = append(predicates, user.AvatarLocalFileNEQ(*i.AvatarLocalFileNEQ))
	}
	if len(i.AvatarLocalFileIn) > 0 {
		predicates = append(predicates, user.AvatarLocalFileIn(i.AvatarLocalFileIn...))
	}
	if len(i.AvatarLocalFileNotIn) > 0 {
		predicates = append(predicates, user.AvatarLocalFileNotIn(i.AvatarLocalFileNotIn...))
	}
	if i.AvatarLocalFileGT != nil {
		predicates = append(predicates, user.AvatarLocalFileGT(*i.AvatarLocalFileGT))
	}
	if i.AvatarLocalFileGTE != nil {
		predicates = append(predicates, user.AvatarLocalFileGTE(*i.AvatarLocalFileGTE))
	}
	if i.AvatarLocalFileLT != nil {
		predicates = append(predicates, user.AvatarLocalFileLT(*i.AvatarLocalFileLT))
	}
	if i.AvatarLocalFileLTE != nil {
		predicates = append(predicates, user.AvatarLocalFileLTE(*i.AvatarLocalFileLTE))
	}
	if i.AvatarLocalFileContains != nil {
		predicates = append(predicates, user.AvatarLocalFileContains(*i.AvatarLocalFileContains))
	}
	if i.AvatarLocalFileHasPrefix != nil {
		predicates = append(predicates, user.AvatarLocalFileHasPrefix(*i.AvatarLocalFileHasPrefix))
	}
	if i.AvatarLocalFileHasSuffix != nil {
		predicates = append(predicates, user.AvatarLocalFileHasSuffix(*i.AvatarLocalFileHasSuffix))
	}
	if i.AvatarLocalFileIsNil {
		predicates = append(predicates, user.AvatarLocalFileIsNil())
	}
	if i.AvatarLocalFileNotNil {
		predicates = append(predicates, user.AvatarLocalFileNotNil())
	}
	if i.AvatarLocalFileEqualFold != nil {
		predicates = append(predicates, user.AvatarLocalFileEqualFold(*i.AvatarLocalFileEqualFold))
	}
	if i.AvatarLocalFileContainsFold != nil {
		predicates = append(predicates, user.AvatarLocalFileContainsFold(*i.AvatarLocalFileContainsFold))
	}
	if i.AvatarLocalFileID != nil {
		predicates = append(predicates, user.AvatarLocalFileIDEQ(*i.AvatarLocalFileID))
	}
	if i.AvatarLocalFileIDNEQ != nil {
		predicates = append(predicates, user.AvatarLocalFileIDNEQ(*i.AvatarLocalFileIDNEQ))
	}
	if len(i.AvatarLocalFileIDIn) > 0 {
		predicates = append(predicates, user.AvatarLocalFileIDIn(i.AvatarLocalFileIDIn...))
	}
	if len(i.AvatarLocalFileIDNotIn) > 0 {
		predicates = append(predicates, user.AvatarLocalFileIDNotIn(i.AvatarLocalFileIDNotIn...))
	}
	if i.AvatarLocalFileIDGT != nil {
		predicates = append(predicates, user.AvatarLocalFileIDGT(*i.AvatarLocalFileIDGT))
	}
	if i.AvatarLocalFileIDGTE != nil {
		predicates = append(predicates, user.AvatarLocalFileIDGTE(*i.AvatarLocalFileIDGTE))
	}
	if i.AvatarLocalFileIDLT != nil {
		predicates = append(predicates, user.AvatarLocalFileIDLT(*i.AvatarLocalFileIDLT))
	}
	if i.AvatarLocalFileIDLTE != nil {
		predicates = append(predicates, user.AvatarLocalFileIDLTE(*i.AvatarLocalFileIDLTE))
	}
	if i.AvatarLocalFileIDContains != nil {
		predicates = append(predicates, user.AvatarLocalFileIDContains(*i.AvatarLocalFileIDContains))
	}
	if i.AvatarLocalFileIDHasPrefix != nil {
		predicates = append(predicates, user.AvatarLocalFileIDHasPrefix(*i.AvatarLocalFileIDHasPrefix))
	}
	if i.AvatarLocalFileIDHasSuffix != nil {
		predicates = append(predicates, user.AvatarLocalFileIDHasSuffix(*i.AvatarLocalFileIDHasSuffix))
	}
	if i.AvatarLocalFileIDIsNil {
		predicates = append(predicates, user.AvatarLocalFileIDIsNil())
	}
	if i.AvatarLocalFileIDNotNil {
		predicates = append(predicates, user.AvatarLocalFileIDNotNil())
	}
	if i.AvatarLocalFileIDEqualFold != nil {
		predicates = append(predicates, user.AvatarLocalFileIDEqualFold(*i.AvatarLocalFileIDEqualFold))
	}
	if i.AvatarLocalFileIDContainsFold != nil {
		predicates = append(predicates, user.AvatarLocalFileIDContainsFold(*i.AvatarLocalFileIDContainsFold))
	}
	if i.AvatarUpdatedAt != nil {
		predicates = append(predicates, user.AvatarUpdatedAtEQ(*i.AvatarUpdatedAt))
	}
	if i.AvatarUpdatedAtNEQ != nil {
		predicates = append(predicates, user.AvatarUpdatedAtNEQ(*i.AvatarUpdatedAtNEQ))
	}
	if len(i.AvatarUpdatedAtIn) > 0 {
		predicates = append(predicates, user.AvatarUpdatedAtIn(i.AvatarUpdatedAtIn...))
	}
	if len(i.AvatarUpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.AvatarUpdatedAtNotIn(i.AvatarUpdatedAtNotIn...))
	}
	if i.AvatarUpdatedAtGT != nil {
		predicates = append(predicates, user.AvatarUpdatedAtGT(*i.AvatarUpdatedAtGT))
	}
	if i.AvatarUpdatedAtGTE != nil {
		predicates = append(predicates, user.AvatarUpdatedAtGTE(*i.AvatarUpdatedAtGTE))
	}
	if i.AvatarUpdatedAtLT != nil {
		predicates = append(predicates, user.AvatarUpdatedAtLT(*i.AvatarUpdatedAtLT))
	}
	if i.AvatarUpdatedAtLTE != nil {
		predicates = append(predicates, user.AvatarUpdatedAtLTE(*i.AvatarUpdatedAtLTE))
	}
	if i.AvatarUpdatedAtIsNil {
		predicates = append(predicates, user.AvatarUpdatedAtIsNil())
	}
	if i.AvatarUpdatedAtNotNil {
		predicates = append(predicates, user.AvatarUpdatedAtNotNil())
	}
	if i.LastSeen != nil {
		predicates = append(predicates, user.LastSeenEQ(*i.LastSeen))
	}
	if i.LastSeenNEQ != nil {
		predicates = append(predicates, user.LastSeenNEQ(*i.LastSeenNEQ))
	}
	if len(i.LastSeenIn) > 0 {
		predicates = append(predicates, user.LastSeenIn(i.LastSeenIn...))
	}
	if len(i.LastSeenNotIn) > 0 {
		predicates = append(predicates, user.LastSeenNotIn(i.LastSeenNotIn...))
	}
	if i.LastSeenGT != nil {
		predicates = append(predicates, user.LastSeenGT(*i.LastSeenGT))
	}
	if i.LastSeenGTE != nil {
		predicates = append(predicates, user.LastSeenGTE(*i.LastSeenGTE))
	}
	if i.LastSeenLT != nil {
		predicates = append(predicates, user.LastSeenLT(*i.LastSeenLT))
	}
	if i.LastSeenLTE != nil {
		predicates = append(predicates, user.LastSeenLTE(*i.LastSeenLTE))
	}
	if i.LastSeenIsNil {
		predicates = append(predicates, user.LastSeenIsNil())
	}
	if i.LastSeenNotNil {
		predicates = append(predicates, user.LastSeenNotNil())
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordIsNil {
		predicates = append(predicates, user.PasswordIsNil())
	}
	if i.PasswordNotNil {
		predicates = append(predicates, user.PasswordNotNil())
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.Sub != nil {
		predicates = append(predicates, user.SubEQ(*i.Sub))
	}
	if i.SubNEQ != nil {
		predicates = append(predicates, user.SubNEQ(*i.SubNEQ))
	}
	if len(i.SubIn) > 0 {
		predicates = append(predicates, user.SubIn(i.SubIn...))
	}
	if len(i.SubNotIn) > 0 {
		predicates = append(predicates, user.SubNotIn(i.SubNotIn...))
	}
	if i.SubGT != nil {
		predicates = append(predicates, user.SubGT(*i.SubGT))
	}
	if i.SubGTE != nil {
		predicates = append(predicates, user.SubGTE(*i.SubGTE))
	}
	if i.SubLT != nil {
		predicates = append(predicates, user.SubLT(*i.SubLT))
	}
	if i.SubLTE != nil {
		predicates = append(predicates, user.SubLTE(*i.SubLTE))
	}
	if i.SubContains != nil {
		predicates = append(predicates, user.SubContains(*i.SubContains))
	}
	if i.SubHasPrefix != nil {
		predicates = append(predicates, user.SubHasPrefix(*i.SubHasPrefix))
	}
	if i.SubHasSuffix != nil {
		predicates = append(predicates, user.SubHasSuffix(*i.SubHasSuffix))
	}
	if i.SubIsNil {
		predicates = append(predicates, user.SubIsNil())
	}
	if i.SubNotNil {
		predicates = append(predicates, user.SubNotNil())
	}
	if i.SubEqualFold != nil {
		predicates = append(predicates, user.SubEqualFold(*i.SubEqualFold))
	}
	if i.SubContainsFold != nil {
		predicates = append(predicates, user.SubContainsFold(*i.SubContainsFold))
	}
	if i.AuthProvider != nil {
		predicates = append(predicates, user.AuthProviderEQ(*i.AuthProvider))
	}
	if i.AuthProviderNEQ != nil {
		predicates = append(predicates, user.AuthProviderNEQ(*i.AuthProviderNEQ))
	}
	if len(i.AuthProviderIn) > 0 {
		predicates = append(predicates, user.AuthProviderIn(i.AuthProviderIn...))
	}
	if len(i.AuthProviderNotIn) > 0 {
		predicates = append(predicates, user.AuthProviderNotIn(i.AuthProviderNotIn...))
	}
	if i.Role != nil {
		predicates = append(predicates, user.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, user.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, user.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, user.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleIsNil {
		predicates = append(predicates, user.RoleIsNil())
	}
	if i.RoleNotNil {
		predicates = append(predicates, user.RoleNotNil())
	}

	if i.HasPersonalAccessTokens != nil {
		p := user.HasPersonalAccessTokens()
		if !*i.HasPersonalAccessTokens {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPersonalAccessTokensWith) > 0 {
		with := make([]predicate.PersonalAccessToken, 0, len(i.HasPersonalAccessTokensWith))
		for _, w := range i.HasPersonalAccessTokensWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPersonalAccessTokensWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasPersonalAccessTokensWith(with...))
	}
	if i.HasTfaSettings != nil {
		p := user.HasTfaSettings()
		if !*i.HasTfaSettings {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTfaSettingsWith) > 0 {
		with := make([]predicate.TFASetting, 0, len(i.HasTfaSettingsWith))
		for _, w := range i.HasTfaSettingsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTfaSettingsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasTfaSettingsWith(with...))
	}
	if i.HasSetting != nil {
		p := user.HasSetting()
		if !*i.HasSetting {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSettingWith) > 0 {
		with := make([]predicate.UserSetting, 0, len(i.HasSettingWith))
		for _, w := range i.HasSettingWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSettingWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasSettingWith(with...))
	}
	if i.HasGroups != nil {
		p := user.HasGroups()
		if !*i.HasGroups {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupsWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupsWith))
		for _, w := range i.HasGroupsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasGroupsWith(with...))
	}
	if i.HasOrganizations != nil {
		p := user.HasOrganizations()
		if !*i.HasOrganizations {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrganizationsWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOrganizationsWith))
		for _, w := range i.HasOrganizationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrganizationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasOrganizationsWith(with...))
	}
	if i.HasFiles != nil {
		p := user.HasFiles()
		if !*i.HasFiles {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFilesWith(with...))
	}
	if i.HasFile != nil {
		p := user.HasFile()
		if !*i.HasFile {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFileWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFileWith))
		for _, w := range i.HasFileWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFileWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFileWith(with...))
	}
	if i.HasEvents != nil {
		p := user.HasEvents()
		if !*i.HasEvents {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasEventsWith(with...))
	}
	if i.HasGroupMemberships != nil {
		p := user.HasGroupMemberships()
		if !*i.HasGroupMemberships {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupMembershipsWith) > 0 {
		with := make([]predicate.GroupMembership, 0, len(i.HasGroupMembershipsWith))
		for _, w := range i.HasGroupMembershipsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupMembershipsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasGroupMembershipsWith(with...))
	}
	if i.HasOrgMemberships != nil {
		p := user.HasOrgMemberships()
		if !*i.HasOrgMemberships {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOrgMembershipsWith) > 0 {
		with := make([]predicate.OrgMembership, 0, len(i.HasOrgMembershipsWith))
		for _, w := range i.HasOrgMembershipsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOrgMembershipsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasOrgMembershipsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}

// UserHistoryWhereInput represents a where input for filtering UserHistory queries.
type UserHistoryWhereInput struct {
	Predicates []predicate.UserHistory  `json:"-"`
	Not        *UserHistoryWhereInput   `json:"not,omitempty"`
	Or         []*UserHistoryWhereInput `json:"or,omitempty"`
	And        []*UserHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "first_name" field predicates.
	FirstName             *string  `json:"firstName,omitempty"`
	FirstNameNEQ          *string  `json:"firstNameNEQ,omitempty"`
	FirstNameIn           []string `json:"firstNameIn,omitempty"`
	FirstNameNotIn        []string `json:"firstNameNotIn,omitempty"`
	FirstNameGT           *string  `json:"firstNameGT,omitempty"`
	FirstNameGTE          *string  `json:"firstNameGTE,omitempty"`
	FirstNameLT           *string  `json:"firstNameLT,omitempty"`
	FirstNameLTE          *string  `json:"firstNameLTE,omitempty"`
	FirstNameContains     *string  `json:"firstNameContains,omitempty"`
	FirstNameHasPrefix    *string  `json:"firstNameHasPrefix,omitempty"`
	FirstNameHasSuffix    *string  `json:"firstNameHasSuffix,omitempty"`
	FirstNameIsNil        bool     `json:"firstNameIsNil,omitempty"`
	FirstNameNotNil       bool     `json:"firstNameNotNil,omitempty"`
	FirstNameEqualFold    *string  `json:"firstNameEqualFold,omitempty"`
	FirstNameContainsFold *string  `json:"firstNameContainsFold,omitempty"`

	// "last_name" field predicates.
	LastName             *string  `json:"lastName,omitempty"`
	LastNameNEQ          *string  `json:"lastNameNEQ,omitempty"`
	LastNameIn           []string `json:"lastNameIn,omitempty"`
	LastNameNotIn        []string `json:"lastNameNotIn,omitempty"`
	LastNameGT           *string  `json:"lastNameGT,omitempty"`
	LastNameGTE          *string  `json:"lastNameGTE,omitempty"`
	LastNameLT           *string  `json:"lastNameLT,omitempty"`
	LastNameLTE          *string  `json:"lastNameLTE,omitempty"`
	LastNameContains     *string  `json:"lastNameContains,omitempty"`
	LastNameHasPrefix    *string  `json:"lastNameHasPrefix,omitempty"`
	LastNameHasSuffix    *string  `json:"lastNameHasSuffix,omitempty"`
	LastNameIsNil        bool     `json:"lastNameIsNil,omitempty"`
	LastNameNotNil       bool     `json:"lastNameNotNil,omitempty"`
	LastNameEqualFold    *string  `json:"lastNameEqualFold,omitempty"`
	LastNameContainsFold *string  `json:"lastNameContainsFold,omitempty"`

	// "display_name" field predicates.
	DisplayName             *string  `json:"displayName,omitempty"`
	DisplayNameNEQ          *string  `json:"displayNameNEQ,omitempty"`
	DisplayNameIn           []string `json:"displayNameIn,omitempty"`
	DisplayNameNotIn        []string `json:"displayNameNotIn,omitempty"`
	DisplayNameGT           *string  `json:"displayNameGT,omitempty"`
	DisplayNameGTE          *string  `json:"displayNameGTE,omitempty"`
	DisplayNameLT           *string  `json:"displayNameLT,omitempty"`
	DisplayNameLTE          *string  `json:"displayNameLTE,omitempty"`
	DisplayNameContains     *string  `json:"displayNameContains,omitempty"`
	DisplayNameHasPrefix    *string  `json:"displayNameHasPrefix,omitempty"`
	DisplayNameHasSuffix    *string  `json:"displayNameHasSuffix,omitempty"`
	DisplayNameEqualFold    *string  `json:"displayNameEqualFold,omitempty"`
	DisplayNameContainsFold *string  `json:"displayNameContainsFold,omitempty"`

	// "avatar_remote_url" field predicates.
	AvatarRemoteURL             *string  `json:"avatarRemoteURL,omitempty"`
	AvatarRemoteURLNEQ          *string  `json:"avatarRemoteURLNEQ,omitempty"`
	AvatarRemoteURLIn           []string `json:"avatarRemoteURLIn,omitempty"`
	AvatarRemoteURLNotIn        []string `json:"avatarRemoteURLNotIn,omitempty"`
	AvatarRemoteURLGT           *string  `json:"avatarRemoteURLGT,omitempty"`
	AvatarRemoteURLGTE          *string  `json:"avatarRemoteURLGTE,omitempty"`
	AvatarRemoteURLLT           *string  `json:"avatarRemoteURLLT,omitempty"`
	AvatarRemoteURLLTE          *string  `json:"avatarRemoteURLLTE,omitempty"`
	AvatarRemoteURLContains     *string  `json:"avatarRemoteURLContains,omitempty"`
	AvatarRemoteURLHasPrefix    *string  `json:"avatarRemoteURLHasPrefix,omitempty"`
	AvatarRemoteURLHasSuffix    *string  `json:"avatarRemoteURLHasSuffix,omitempty"`
	AvatarRemoteURLIsNil        bool     `json:"avatarRemoteURLIsNil,omitempty"`
	AvatarRemoteURLNotNil       bool     `json:"avatarRemoteURLNotNil,omitempty"`
	AvatarRemoteURLEqualFold    *string  `json:"avatarRemoteURLEqualFold,omitempty"`
	AvatarRemoteURLContainsFold *string  `json:"avatarRemoteURLContainsFold,omitempty"`

	// "avatar_local_file" field predicates.
	AvatarLocalFile             *string  `json:"avatarLocalFile,omitempty"`
	AvatarLocalFileNEQ          *string  `json:"avatarLocalFileNEQ,omitempty"`
	AvatarLocalFileIn           []string `json:"avatarLocalFileIn,omitempty"`
	AvatarLocalFileNotIn        []string `json:"avatarLocalFileNotIn,omitempty"`
	AvatarLocalFileGT           *string  `json:"avatarLocalFileGT,omitempty"`
	AvatarLocalFileGTE          *string  `json:"avatarLocalFileGTE,omitempty"`
	AvatarLocalFileLT           *string  `json:"avatarLocalFileLT,omitempty"`
	AvatarLocalFileLTE          *string  `json:"avatarLocalFileLTE,omitempty"`
	AvatarLocalFileContains     *string  `json:"avatarLocalFileContains,omitempty"`
	AvatarLocalFileHasPrefix    *string  `json:"avatarLocalFileHasPrefix,omitempty"`
	AvatarLocalFileHasSuffix    *string  `json:"avatarLocalFileHasSuffix,omitempty"`
	AvatarLocalFileIsNil        bool     `json:"avatarLocalFileIsNil,omitempty"`
	AvatarLocalFileNotNil       bool     `json:"avatarLocalFileNotNil,omitempty"`
	AvatarLocalFileEqualFold    *string  `json:"avatarLocalFileEqualFold,omitempty"`
	AvatarLocalFileContainsFold *string  `json:"avatarLocalFileContainsFold,omitempty"`

	// "avatar_local_file_id" field predicates.
	AvatarLocalFileID             *string  `json:"avatarLocalFileID,omitempty"`
	AvatarLocalFileIDNEQ          *string  `json:"avatarLocalFileIDNEQ,omitempty"`
	AvatarLocalFileIDIn           []string `json:"avatarLocalFileIDIn,omitempty"`
	AvatarLocalFileIDNotIn        []string `json:"avatarLocalFileIDNotIn,omitempty"`
	AvatarLocalFileIDGT           *string  `json:"avatarLocalFileIDGT,omitempty"`
	AvatarLocalFileIDGTE          *string  `json:"avatarLocalFileIDGTE,omitempty"`
	AvatarLocalFileIDLT           *string  `json:"avatarLocalFileIDLT,omitempty"`
	AvatarLocalFileIDLTE          *string  `json:"avatarLocalFileIDLTE,omitempty"`
	AvatarLocalFileIDContains     *string  `json:"avatarLocalFileIDContains,omitempty"`
	AvatarLocalFileIDHasPrefix    *string  `json:"avatarLocalFileIDHasPrefix,omitempty"`
	AvatarLocalFileIDHasSuffix    *string  `json:"avatarLocalFileIDHasSuffix,omitempty"`
	AvatarLocalFileIDIsNil        bool     `json:"avatarLocalFileIDIsNil,omitempty"`
	AvatarLocalFileIDNotNil       bool     `json:"avatarLocalFileIDNotNil,omitempty"`
	AvatarLocalFileIDEqualFold    *string  `json:"avatarLocalFileIDEqualFold,omitempty"`
	AvatarLocalFileIDContainsFold *string  `json:"avatarLocalFileIDContainsFold,omitempty"`

	// "avatar_updated_at" field predicates.
	AvatarUpdatedAt       *time.Time  `json:"avatarUpdatedAt,omitempty"`
	AvatarUpdatedAtNEQ    *time.Time  `json:"avatarUpdatedAtNEQ,omitempty"`
	AvatarUpdatedAtIn     []time.Time `json:"avatarUpdatedAtIn,omitempty"`
	AvatarUpdatedAtNotIn  []time.Time `json:"avatarUpdatedAtNotIn,omitempty"`
	AvatarUpdatedAtGT     *time.Time  `json:"avatarUpdatedAtGT,omitempty"`
	AvatarUpdatedAtGTE    *time.Time  `json:"avatarUpdatedAtGTE,omitempty"`
	AvatarUpdatedAtLT     *time.Time  `json:"avatarUpdatedAtLT,omitempty"`
	AvatarUpdatedAtLTE    *time.Time  `json:"avatarUpdatedAtLTE,omitempty"`
	AvatarUpdatedAtIsNil  bool        `json:"avatarUpdatedAtIsNil,omitempty"`
	AvatarUpdatedAtNotNil bool        `json:"avatarUpdatedAtNotNil,omitempty"`

	// "last_seen" field predicates.
	LastSeen       *time.Time  `json:"lastSeen,omitempty"`
	LastSeenNEQ    *time.Time  `json:"lastSeenNEQ,omitempty"`
	LastSeenIn     []time.Time `json:"lastSeenIn,omitempty"`
	LastSeenNotIn  []time.Time `json:"lastSeenNotIn,omitempty"`
	LastSeenGT     *time.Time  `json:"lastSeenGT,omitempty"`
	LastSeenGTE    *time.Time  `json:"lastSeenGTE,omitempty"`
	LastSeenLT     *time.Time  `json:"lastSeenLT,omitempty"`
	LastSeenLTE    *time.Time  `json:"lastSeenLTE,omitempty"`
	LastSeenIsNil  bool        `json:"lastSeenIsNil,omitempty"`
	LastSeenNotNil bool        `json:"lastSeenNotNil,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordIsNil        bool     `json:"passwordIsNil,omitempty"`
	PasswordNotNil       bool     `json:"passwordNotNil,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "sub" field predicates.
	Sub             *string  `json:"sub,omitempty"`
	SubNEQ          *string  `json:"subNEQ,omitempty"`
	SubIn           []string `json:"subIn,omitempty"`
	SubNotIn        []string `json:"subNotIn,omitempty"`
	SubGT           *string  `json:"subGT,omitempty"`
	SubGTE          *string  `json:"subGTE,omitempty"`
	SubLT           *string  `json:"subLT,omitempty"`
	SubLTE          *string  `json:"subLTE,omitempty"`
	SubContains     *string  `json:"subContains,omitempty"`
	SubHasPrefix    *string  `json:"subHasPrefix,omitempty"`
	SubHasSuffix    *string  `json:"subHasSuffix,omitempty"`
	SubIsNil        bool     `json:"subIsNil,omitempty"`
	SubNotNil       bool     `json:"subNotNil,omitempty"`
	SubEqualFold    *string  `json:"subEqualFold,omitempty"`
	SubContainsFold *string  `json:"subContainsFold,omitempty"`

	// "auth_provider" field predicates.
	AuthProvider      *enums.AuthProvider  `json:"authProvider,omitempty"`
	AuthProviderNEQ   *enums.AuthProvider  `json:"authProviderNEQ,omitempty"`
	AuthProviderIn    []enums.AuthProvider `json:"authProviderIn,omitempty"`
	AuthProviderNotIn []enums.AuthProvider `json:"authProviderNotIn,omitempty"`

	// "role" field predicates.
	Role       *enums.Role  `json:"role,omitempty"`
	RoleNEQ    *enums.Role  `json:"roleNEQ,omitempty"`
	RoleIn     []enums.Role `json:"roleIn,omitempty"`
	RoleNotIn  []enums.Role `json:"roleNotIn,omitempty"`
	RoleIsNil  bool         `json:"roleIsNil,omitempty"`
	RoleNotNil bool         `json:"roleNotNil,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserHistoryWhereInput) AddPredicates(predicates ...predicate.UserHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserHistoryWhereInput filter on the UserHistoryQuery builder.
func (i *UserHistoryWhereInput) Filter(q *UserHistoryQuery) (*UserHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserHistoryWhereInput is returned in case the UserHistoryWhereInput is empty.
var ErrEmptyUserHistoryWhereInput = errors.New("generated: empty predicate UserHistoryWhereInput")

// P returns a predicate for filtering userhistories.
// An error is returned if the input is empty or invalid.
func (i *UserHistoryWhereInput) P() (predicate.UserHistory, error) {
	var predicates []predicate.UserHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, userhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.UserHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, userhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.UserHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, userhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, userhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, userhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, userhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, userhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, userhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, userhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, userhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, userhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, userhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, userhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, userhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, userhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, userhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, userhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, userhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, userhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, userhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, userhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, userhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, userhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, userhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, userhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, userhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, userhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, userhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, userhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, userhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, userhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, userhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, userhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, userhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, userhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, userhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, userhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, userhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, userhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, userhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, userhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, userhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, userhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, userhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, userhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, userhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, userhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, userhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, userhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, userhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, userhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, userhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, userhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, userhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, userhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, userhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, userhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, userhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, userhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, userhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, userhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, userhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, userhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, userhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, userhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, userhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, userhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, userhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, userhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, userhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, userhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, userhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, userhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, userhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, userhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, userhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, userhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, userhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, userhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, userhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, userhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, userhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, userhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, userhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, userhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, userhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, userhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, userhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, userhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, userhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, userhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, userhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, userhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, userhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, userhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, userhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, userhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, userhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, userhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, userhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, userhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, userhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, userhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, userhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, userhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, userhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, userhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, userhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, userhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, userhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, userhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, userhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, userhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, userhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, userhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, userhistory.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, userhistory.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, userhistory.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, userhistory.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, userhistory.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, userhistory.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, userhistory.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, userhistory.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, userhistory.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, userhistory.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, userhistory.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, userhistory.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, userhistory.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.FirstName != nil {
		predicates = append(predicates, userhistory.FirstNameEQ(*i.FirstName))
	}
	if i.FirstNameNEQ != nil {
		predicates = append(predicates, userhistory.FirstNameNEQ(*i.FirstNameNEQ))
	}
	if len(i.FirstNameIn) > 0 {
		predicates = append(predicates, userhistory.FirstNameIn(i.FirstNameIn...))
	}
	if len(i.FirstNameNotIn) > 0 {
		predicates = append(predicates, userhistory.FirstNameNotIn(i.FirstNameNotIn...))
	}
	if i.FirstNameGT != nil {
		predicates = append(predicates, userhistory.FirstNameGT(*i.FirstNameGT))
	}
	if i.FirstNameGTE != nil {
		predicates = append(predicates, userhistory.FirstNameGTE(*i.FirstNameGTE))
	}
	if i.FirstNameLT != nil {
		predicates = append(predicates, userhistory.FirstNameLT(*i.FirstNameLT))
	}
	if i.FirstNameLTE != nil {
		predicates = append(predicates, userhistory.FirstNameLTE(*i.FirstNameLTE))
	}
	if i.FirstNameContains != nil {
		predicates = append(predicates, userhistory.FirstNameContains(*i.FirstNameContains))
	}
	if i.FirstNameHasPrefix != nil {
		predicates = append(predicates, userhistory.FirstNameHasPrefix(*i.FirstNameHasPrefix))
	}
	if i.FirstNameHasSuffix != nil {
		predicates = append(predicates, userhistory.FirstNameHasSuffix(*i.FirstNameHasSuffix))
	}
	if i.FirstNameIsNil {
		predicates = append(predicates, userhistory.FirstNameIsNil())
	}
	if i.FirstNameNotNil {
		predicates = append(predicates, userhistory.FirstNameNotNil())
	}
	if i.FirstNameEqualFold != nil {
		predicates = append(predicates, userhistory.FirstNameEqualFold(*i.FirstNameEqualFold))
	}
	if i.FirstNameContainsFold != nil {
		predicates = append(predicates, userhistory.FirstNameContainsFold(*i.FirstNameContainsFold))
	}
	if i.LastName != nil {
		predicates = append(predicates, userhistory.LastNameEQ(*i.LastName))
	}
	if i.LastNameNEQ != nil {
		predicates = append(predicates, userhistory.LastNameNEQ(*i.LastNameNEQ))
	}
	if len(i.LastNameIn) > 0 {
		predicates = append(predicates, userhistory.LastNameIn(i.LastNameIn...))
	}
	if len(i.LastNameNotIn) > 0 {
		predicates = append(predicates, userhistory.LastNameNotIn(i.LastNameNotIn...))
	}
	if i.LastNameGT != nil {
		predicates = append(predicates, userhistory.LastNameGT(*i.LastNameGT))
	}
	if i.LastNameGTE != nil {
		predicates = append(predicates, userhistory.LastNameGTE(*i.LastNameGTE))
	}
	if i.LastNameLT != nil {
		predicates = append(predicates, userhistory.LastNameLT(*i.LastNameLT))
	}
	if i.LastNameLTE != nil {
		predicates = append(predicates, userhistory.LastNameLTE(*i.LastNameLTE))
	}
	if i.LastNameContains != nil {
		predicates = append(predicates, userhistory.LastNameContains(*i.LastNameContains))
	}
	if i.LastNameHasPrefix != nil {
		predicates = append(predicates, userhistory.LastNameHasPrefix(*i.LastNameHasPrefix))
	}
	if i.LastNameHasSuffix != nil {
		predicates = append(predicates, userhistory.LastNameHasSuffix(*i.LastNameHasSuffix))
	}
	if i.LastNameIsNil {
		predicates = append(predicates, userhistory.LastNameIsNil())
	}
	if i.LastNameNotNil {
		predicates = append(predicates, userhistory.LastNameNotNil())
	}
	if i.LastNameEqualFold != nil {
		predicates = append(predicates, userhistory.LastNameEqualFold(*i.LastNameEqualFold))
	}
	if i.LastNameContainsFold != nil {
		predicates = append(predicates, userhistory.LastNameContainsFold(*i.LastNameContainsFold))
	}
	if i.DisplayName != nil {
		predicates = append(predicates, userhistory.DisplayNameEQ(*i.DisplayName))
	}
	if i.DisplayNameNEQ != nil {
		predicates = append(predicates, userhistory.DisplayNameNEQ(*i.DisplayNameNEQ))
	}
	if len(i.DisplayNameIn) > 0 {
		predicates = append(predicates, userhistory.DisplayNameIn(i.DisplayNameIn...))
	}
	if len(i.DisplayNameNotIn) > 0 {
		predicates = append(predicates, userhistory.DisplayNameNotIn(i.DisplayNameNotIn...))
	}
	if i.DisplayNameGT != nil {
		predicates = append(predicates, userhistory.DisplayNameGT(*i.DisplayNameGT))
	}
	if i.DisplayNameGTE != nil {
		predicates = append(predicates, userhistory.DisplayNameGTE(*i.DisplayNameGTE))
	}
	if i.DisplayNameLT != nil {
		predicates = append(predicates, userhistory.DisplayNameLT(*i.DisplayNameLT))
	}
	if i.DisplayNameLTE != nil {
		predicates = append(predicates, userhistory.DisplayNameLTE(*i.DisplayNameLTE))
	}
	if i.DisplayNameContains != nil {
		predicates = append(predicates, userhistory.DisplayNameContains(*i.DisplayNameContains))
	}
	if i.DisplayNameHasPrefix != nil {
		predicates = append(predicates, userhistory.DisplayNameHasPrefix(*i.DisplayNameHasPrefix))
	}
	if i.DisplayNameHasSuffix != nil {
		predicates = append(predicates, userhistory.DisplayNameHasSuffix(*i.DisplayNameHasSuffix))
	}
	if i.DisplayNameEqualFold != nil {
		predicates = append(predicates, userhistory.DisplayNameEqualFold(*i.DisplayNameEqualFold))
	}
	if i.DisplayNameContainsFold != nil {
		predicates = append(predicates, userhistory.DisplayNameContainsFold(*i.DisplayNameContainsFold))
	}
	if i.AvatarRemoteURL != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLEQ(*i.AvatarRemoteURL))
	}
	if i.AvatarRemoteURLNEQ != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLNEQ(*i.AvatarRemoteURLNEQ))
	}
	if len(i.AvatarRemoteURLIn) > 0 {
		predicates = append(predicates, userhistory.AvatarRemoteURLIn(i.AvatarRemoteURLIn...))
	}
	if len(i.AvatarRemoteURLNotIn) > 0 {
		predicates = append(predicates, userhistory.AvatarRemoteURLNotIn(i.AvatarRemoteURLNotIn...))
	}
	if i.AvatarRemoteURLGT != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLGT(*i.AvatarRemoteURLGT))
	}
	if i.AvatarRemoteURLGTE != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLGTE(*i.AvatarRemoteURLGTE))
	}
	if i.AvatarRemoteURLLT != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLLT(*i.AvatarRemoteURLLT))
	}
	if i.AvatarRemoteURLLTE != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLLTE(*i.AvatarRemoteURLLTE))
	}
	if i.AvatarRemoteURLContains != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLContains(*i.AvatarRemoteURLContains))
	}
	if i.AvatarRemoteURLHasPrefix != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLHasPrefix(*i.AvatarRemoteURLHasPrefix))
	}
	if i.AvatarRemoteURLHasSuffix != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLHasSuffix(*i.AvatarRemoteURLHasSuffix))
	}
	if i.AvatarRemoteURLIsNil {
		predicates = append(predicates, userhistory.AvatarRemoteURLIsNil())
	}
	if i.AvatarRemoteURLNotNil {
		predicates = append(predicates, userhistory.AvatarRemoteURLNotNil())
	}
	if i.AvatarRemoteURLEqualFold != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLEqualFold(*i.AvatarRemoteURLEqualFold))
	}
	if i.AvatarRemoteURLContainsFold != nil {
		predicates = append(predicates, userhistory.AvatarRemoteURLContainsFold(*i.AvatarRemoteURLContainsFold))
	}
	if i.AvatarLocalFile != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileEQ(*i.AvatarLocalFile))
	}
	if i.AvatarLocalFileNEQ != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileNEQ(*i.AvatarLocalFileNEQ))
	}
	if len(i.AvatarLocalFileIn) > 0 {
		predicates = append(predicates, userhistory.AvatarLocalFileIn(i.AvatarLocalFileIn...))
	}
	if len(i.AvatarLocalFileNotIn) > 0 {
		predicates = append(predicates, userhistory.AvatarLocalFileNotIn(i.AvatarLocalFileNotIn...))
	}
	if i.AvatarLocalFileGT != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileGT(*i.AvatarLocalFileGT))
	}
	if i.AvatarLocalFileGTE != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileGTE(*i.AvatarLocalFileGTE))
	}
	if i.AvatarLocalFileLT != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileLT(*i.AvatarLocalFileLT))
	}
	if i.AvatarLocalFileLTE != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileLTE(*i.AvatarLocalFileLTE))
	}
	if i.AvatarLocalFileContains != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileContains(*i.AvatarLocalFileContains))
	}
	if i.AvatarLocalFileHasPrefix != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileHasPrefix(*i.AvatarLocalFileHasPrefix))
	}
	if i.AvatarLocalFileHasSuffix != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileHasSuffix(*i.AvatarLocalFileHasSuffix))
	}
	if i.AvatarLocalFileIsNil {
		predicates = append(predicates, userhistory.AvatarLocalFileIsNil())
	}
	if i.AvatarLocalFileNotNil {
		predicates = append(predicates, userhistory.AvatarLocalFileNotNil())
	}
	if i.AvatarLocalFileEqualFold != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileEqualFold(*i.AvatarLocalFileEqualFold))
	}
	if i.AvatarLocalFileContainsFold != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileContainsFold(*i.AvatarLocalFileContainsFold))
	}
	if i.AvatarLocalFileID != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDEQ(*i.AvatarLocalFileID))
	}
	if i.AvatarLocalFileIDNEQ != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDNEQ(*i.AvatarLocalFileIDNEQ))
	}
	if len(i.AvatarLocalFileIDIn) > 0 {
		predicates = append(predicates, userhistory.AvatarLocalFileIDIn(i.AvatarLocalFileIDIn...))
	}
	if len(i.AvatarLocalFileIDNotIn) > 0 {
		predicates = append(predicates, userhistory.AvatarLocalFileIDNotIn(i.AvatarLocalFileIDNotIn...))
	}
	if i.AvatarLocalFileIDGT != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDGT(*i.AvatarLocalFileIDGT))
	}
	if i.AvatarLocalFileIDGTE != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDGTE(*i.AvatarLocalFileIDGTE))
	}
	if i.AvatarLocalFileIDLT != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDLT(*i.AvatarLocalFileIDLT))
	}
	if i.AvatarLocalFileIDLTE != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDLTE(*i.AvatarLocalFileIDLTE))
	}
	if i.AvatarLocalFileIDContains != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDContains(*i.AvatarLocalFileIDContains))
	}
	if i.AvatarLocalFileIDHasPrefix != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDHasPrefix(*i.AvatarLocalFileIDHasPrefix))
	}
	if i.AvatarLocalFileIDHasSuffix != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDHasSuffix(*i.AvatarLocalFileIDHasSuffix))
	}
	if i.AvatarLocalFileIDIsNil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDIsNil())
	}
	if i.AvatarLocalFileIDNotNil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDNotNil())
	}
	if i.AvatarLocalFileIDEqualFold != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDEqualFold(*i.AvatarLocalFileIDEqualFold))
	}
	if i.AvatarLocalFileIDContainsFold != nil {
		predicates = append(predicates, userhistory.AvatarLocalFileIDContainsFold(*i.AvatarLocalFileIDContainsFold))
	}
	if i.AvatarUpdatedAt != nil {
		predicates = append(predicates, userhistory.AvatarUpdatedAtEQ(*i.AvatarUpdatedAt))
	}
	if i.AvatarUpdatedAtNEQ != nil {
		predicates = append(predicates, userhistory.AvatarUpdatedAtNEQ(*i.AvatarUpdatedAtNEQ))
	}
	if len(i.AvatarUpdatedAtIn) > 0 {
		predicates = append(predicates, userhistory.AvatarUpdatedAtIn(i.AvatarUpdatedAtIn...))
	}
	if len(i.AvatarUpdatedAtNotIn) > 0 {
		predicates = append(predicates, userhistory.AvatarUpdatedAtNotIn(i.AvatarUpdatedAtNotIn...))
	}
	if i.AvatarUpdatedAtGT != nil {
		predicates = append(predicates, userhistory.AvatarUpdatedAtGT(*i.AvatarUpdatedAtGT))
	}
	if i.AvatarUpdatedAtGTE != nil {
		predicates = append(predicates, userhistory.AvatarUpdatedAtGTE(*i.AvatarUpdatedAtGTE))
	}
	if i.AvatarUpdatedAtLT != nil {
		predicates = append(predicates, userhistory.AvatarUpdatedAtLT(*i.AvatarUpdatedAtLT))
	}
	if i.AvatarUpdatedAtLTE != nil {
		predicates = append(predicates, userhistory.AvatarUpdatedAtLTE(*i.AvatarUpdatedAtLTE))
	}
	if i.AvatarUpdatedAtIsNil {
		predicates = append(predicates, userhistory.AvatarUpdatedAtIsNil())
	}
	if i.AvatarUpdatedAtNotNil {
		predicates = append(predicates, userhistory.AvatarUpdatedAtNotNil())
	}
	if i.LastSeen != nil {
		predicates = append(predicates, userhistory.LastSeenEQ(*i.LastSeen))
	}
	if i.LastSeenNEQ != nil {
		predicates = append(predicates, userhistory.LastSeenNEQ(*i.LastSeenNEQ))
	}
	if len(i.LastSeenIn) > 0 {
		predicates = append(predicates, userhistory.LastSeenIn(i.LastSeenIn...))
	}
	if len(i.LastSeenNotIn) > 0 {
		predicates = append(predicates, userhistory.LastSeenNotIn(i.LastSeenNotIn...))
	}
	if i.LastSeenGT != nil {
		predicates = append(predicates, userhistory.LastSeenGT(*i.LastSeenGT))
	}
	if i.LastSeenGTE != nil {
		predicates = append(predicates, userhistory.LastSeenGTE(*i.LastSeenGTE))
	}
	if i.LastSeenLT != nil {
		predicates = append(predicates, userhistory.LastSeenLT(*i.LastSeenLT))
	}
	if i.LastSeenLTE != nil {
		predicates = append(predicates, userhistory.LastSeenLTE(*i.LastSeenLTE))
	}
	if i.LastSeenIsNil {
		predicates = append(predicates, userhistory.LastSeenIsNil())
	}
	if i.LastSeenNotNil {
		predicates = append(predicates, userhistory.LastSeenNotNil())
	}
	if i.Password != nil {
		predicates = append(predicates, userhistory.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, userhistory.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, userhistory.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, userhistory.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, userhistory.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, userhistory.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, userhistory.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, userhistory.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, userhistory.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, userhistory.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, userhistory.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordIsNil {
		predicates = append(predicates, userhistory.PasswordIsNil())
	}
	if i.PasswordNotNil {
		predicates = append(predicates, userhistory.PasswordNotNil())
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, userhistory.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, userhistory.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.Sub != nil {
		predicates = append(predicates, userhistory.SubEQ(*i.Sub))
	}
	if i.SubNEQ != nil {
		predicates = append(predicates, userhistory.SubNEQ(*i.SubNEQ))
	}
	if len(i.SubIn) > 0 {
		predicates = append(predicates, userhistory.SubIn(i.SubIn...))
	}
	if len(i.SubNotIn) > 0 {
		predicates = append(predicates, userhistory.SubNotIn(i.SubNotIn...))
	}
	if i.SubGT != nil {
		predicates = append(predicates, userhistory.SubGT(*i.SubGT))
	}
	if i.SubGTE != nil {
		predicates = append(predicates, userhistory.SubGTE(*i.SubGTE))
	}
	if i.SubLT != nil {
		predicates = append(predicates, userhistory.SubLT(*i.SubLT))
	}
	if i.SubLTE != nil {
		predicates = append(predicates, userhistory.SubLTE(*i.SubLTE))
	}
	if i.SubContains != nil {
		predicates = append(predicates, userhistory.SubContains(*i.SubContains))
	}
	if i.SubHasPrefix != nil {
		predicates = append(predicates, userhistory.SubHasPrefix(*i.SubHasPrefix))
	}
	if i.SubHasSuffix != nil {
		predicates = append(predicates, userhistory.SubHasSuffix(*i.SubHasSuffix))
	}
	if i.SubIsNil {
		predicates = append(predicates, userhistory.SubIsNil())
	}
	if i.SubNotNil {
		predicates = append(predicates, userhistory.SubNotNil())
	}
	if i.SubEqualFold != nil {
		predicates = append(predicates, userhistory.SubEqualFold(*i.SubEqualFold))
	}
	if i.SubContainsFold != nil {
		predicates = append(predicates, userhistory.SubContainsFold(*i.SubContainsFold))
	}
	if i.AuthProvider != nil {
		predicates = append(predicates, userhistory.AuthProviderEQ(*i.AuthProvider))
	}
	if i.AuthProviderNEQ != nil {
		predicates = append(predicates, userhistory.AuthProviderNEQ(*i.AuthProviderNEQ))
	}
	if len(i.AuthProviderIn) > 0 {
		predicates = append(predicates, userhistory.AuthProviderIn(i.AuthProviderIn...))
	}
	if len(i.AuthProviderNotIn) > 0 {
		predicates = append(predicates, userhistory.AuthProviderNotIn(i.AuthProviderNotIn...))
	}
	if i.Role != nil {
		predicates = append(predicates, userhistory.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, userhistory.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, userhistory.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, userhistory.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleIsNil {
		predicates = append(predicates, userhistory.RoleIsNil())
	}
	if i.RoleNotNil {
		predicates = append(predicates, userhistory.RoleNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return userhistory.And(predicates...), nil
	}
}

// UserSettingWhereInput represents a where input for filtering UserSetting queries.
type UserSettingWhereInput struct {
	Predicates []predicate.UserSetting  `json:"-"`
	Not        *UserSettingWhereInput   `json:"not,omitempty"`
	Or         []*UserSettingWhereInput `json:"or,omitempty"`
	And        []*UserSettingWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDIsNil        bool     `json:"userIDIsNil,omitempty"`
	UserIDNotNil       bool     `json:"userIDNotNil,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`

	// "locked" field predicates.
	Locked    *bool `json:"locked,omitempty"`
	LockedNEQ *bool `json:"lockedNEQ,omitempty"`

	// "silenced_at" field predicates.
	SilencedAt       *time.Time  `json:"silencedAt,omitempty"`
	SilencedAtNEQ    *time.Time  `json:"silencedAtNEQ,omitempty"`
	SilencedAtIn     []time.Time `json:"silencedAtIn,omitempty"`
	SilencedAtNotIn  []time.Time `json:"silencedAtNotIn,omitempty"`
	SilencedAtGT     *time.Time  `json:"silencedAtGT,omitempty"`
	SilencedAtGTE    *time.Time  `json:"silencedAtGTE,omitempty"`
	SilencedAtLT     *time.Time  `json:"silencedAtLT,omitempty"`
	SilencedAtLTE    *time.Time  `json:"silencedAtLTE,omitempty"`
	SilencedAtIsNil  bool        `json:"silencedAtIsNil,omitempty"`
	SilencedAtNotNil bool        `json:"silencedAtNotNil,omitempty"`

	// "suspended_at" field predicates.
	SuspendedAt       *time.Time  `json:"suspendedAt,omitempty"`
	SuspendedAtNEQ    *time.Time  `json:"suspendedAtNEQ,omitempty"`
	SuspendedAtIn     []time.Time `json:"suspendedAtIn,omitempty"`
	SuspendedAtNotIn  []time.Time `json:"suspendedAtNotIn,omitempty"`
	SuspendedAtGT     *time.Time  `json:"suspendedAtGT,omitempty"`
	SuspendedAtGTE    *time.Time  `json:"suspendedAtGTE,omitempty"`
	SuspendedAtLT     *time.Time  `json:"suspendedAtLT,omitempty"`
	SuspendedAtLTE    *time.Time  `json:"suspendedAtLTE,omitempty"`
	SuspendedAtIsNil  bool        `json:"suspendedAtIsNil,omitempty"`
	SuspendedAtNotNil bool        `json:"suspendedAtNotNil,omitempty"`

	// "status" field predicates.
	Status      *enums.UserStatus  `json:"status,omitempty"`
	StatusNEQ   *enums.UserStatus  `json:"statusNEQ,omitempty"`
	StatusIn    []enums.UserStatus `json:"statusIn,omitempty"`
	StatusNotIn []enums.UserStatus `json:"statusNotIn,omitempty"`

	// "email_confirmed" field predicates.
	EmailConfirmed    *bool `json:"emailConfirmed,omitempty"`
	EmailConfirmedNEQ *bool `json:"emailConfirmedNEQ,omitempty"`

	// "is_webauthn_allowed" field predicates.
	IsWebauthnAllowed       *bool `json:"isWebauthnAllowed,omitempty"`
	IsWebauthnAllowedNEQ    *bool `json:"isWebauthnAllowedNEQ,omitempty"`
	IsWebauthnAllowedIsNil  bool  `json:"isWebauthnAllowedIsNil,omitempty"`
	IsWebauthnAllowedNotNil bool  `json:"isWebauthnAllowedNotNil,omitempty"`

	// "is_tfa_enabled" field predicates.
	IsTfaEnabled       *bool `json:"isTfaEnabled,omitempty"`
	IsTfaEnabledNEQ    *bool `json:"isTfaEnabledNEQ,omitempty"`
	IsTfaEnabledIsNil  bool  `json:"isTfaEnabledIsNil,omitempty"`
	IsTfaEnabledNotNil bool  `json:"isTfaEnabledNotNil,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "default_org" edge predicates.
	HasDefaultOrg     *bool                     `json:"hasDefaultOrg,omitempty"`
	HasDefaultOrgWith []*OrganizationWhereInput `json:"hasDefaultOrgWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool             `json:"hasFiles,omitempty"`
	HasFilesWith []*FileWhereInput `json:"hasFilesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserSettingWhereInput) AddPredicates(predicates ...predicate.UserSetting) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserSettingWhereInput filter on the UserSettingQuery builder.
func (i *UserSettingWhereInput) Filter(q *UserSettingQuery) (*UserSettingQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserSettingWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserSettingWhereInput is returned in case the UserSettingWhereInput is empty.
var ErrEmptyUserSettingWhereInput = errors.New("generated: empty predicate UserSettingWhereInput")

// P returns a predicate for filtering usersettings.
// An error is returned if the input is empty or invalid.
func (i *UserSettingWhereInput) P() (predicate.UserSetting, error) {
	var predicates []predicate.UserSetting
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, usersetting.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.UserSetting, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, usersetting.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.UserSetting, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, usersetting.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, usersetting.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, usersetting.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, usersetting.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, usersetting.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, usersetting.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, usersetting.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, usersetting.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, usersetting.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, usersetting.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, usersetting.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, usersetting.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, usersetting.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, usersetting.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, usersetting.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, usersetting.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, usersetting.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, usersetting.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, usersetting.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, usersetting.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, usersetting.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, usersetting.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, usersetting.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, usersetting.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, usersetting.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, usersetting.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, usersetting.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, usersetting.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, usersetting.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, usersetting.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, usersetting.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, usersetting.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, usersetting.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, usersetting.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, usersetting.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, usersetting.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, usersetting.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, usersetting.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, usersetting.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, usersetting.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, usersetting.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, usersetting.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, usersetting.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, usersetting.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, usersetting.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, usersetting.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, usersetting.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, usersetting.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, usersetting.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, usersetting.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, usersetting.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, usersetting.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, usersetting.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, usersetting.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, usersetting.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, usersetting.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, usersetting.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, usersetting.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, usersetting.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, usersetting.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, usersetting.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, usersetting.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, usersetting.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, usersetting.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, usersetting.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, usersetting.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, usersetting.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, usersetting.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, usersetting.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, usersetting.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, usersetting.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, usersetting.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, usersetting.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, usersetting.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, usersetting.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, usersetting.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, usersetting.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, usersetting.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, usersetting.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, usersetting.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, usersetting.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, usersetting.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, usersetting.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, usersetting.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, usersetting.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, usersetting.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.UserID != nil {
		predicates = append(predicates, usersetting.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, usersetting.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, usersetting.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, usersetting.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, usersetting.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, usersetting.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, usersetting.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, usersetting.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, usersetting.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, usersetting.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, usersetting.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDIsNil {
		predicates = append(predicates, usersetting.UserIDIsNil())
	}
	if i.UserIDNotNil {
		predicates = append(predicates, usersetting.UserIDNotNil())
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, usersetting.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, usersetting.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.Locked != nil {
		predicates = append(predicates, usersetting.LockedEQ(*i.Locked))
	}
	if i.LockedNEQ != nil {
		predicates = append(predicates, usersetting.LockedNEQ(*i.LockedNEQ))
	}
	if i.SilencedAt != nil {
		predicates = append(predicates, usersetting.SilencedAtEQ(*i.SilencedAt))
	}
	if i.SilencedAtNEQ != nil {
		predicates = append(predicates, usersetting.SilencedAtNEQ(*i.SilencedAtNEQ))
	}
	if len(i.SilencedAtIn) > 0 {
		predicates = append(predicates, usersetting.SilencedAtIn(i.SilencedAtIn...))
	}
	if len(i.SilencedAtNotIn) > 0 {
		predicates = append(predicates, usersetting.SilencedAtNotIn(i.SilencedAtNotIn...))
	}
	if i.SilencedAtGT != nil {
		predicates = append(predicates, usersetting.SilencedAtGT(*i.SilencedAtGT))
	}
	if i.SilencedAtGTE != nil {
		predicates = append(predicates, usersetting.SilencedAtGTE(*i.SilencedAtGTE))
	}
	if i.SilencedAtLT != nil {
		predicates = append(predicates, usersetting.SilencedAtLT(*i.SilencedAtLT))
	}
	if i.SilencedAtLTE != nil {
		predicates = append(predicates, usersetting.SilencedAtLTE(*i.SilencedAtLTE))
	}
	if i.SilencedAtIsNil {
		predicates = append(predicates, usersetting.SilencedAtIsNil())
	}
	if i.SilencedAtNotNil {
		predicates = append(predicates, usersetting.SilencedAtNotNil())
	}
	if i.SuspendedAt != nil {
		predicates = append(predicates, usersetting.SuspendedAtEQ(*i.SuspendedAt))
	}
	if i.SuspendedAtNEQ != nil {
		predicates = append(predicates, usersetting.SuspendedAtNEQ(*i.SuspendedAtNEQ))
	}
	if len(i.SuspendedAtIn) > 0 {
		predicates = append(predicates, usersetting.SuspendedAtIn(i.SuspendedAtIn...))
	}
	if len(i.SuspendedAtNotIn) > 0 {
		predicates = append(predicates, usersetting.SuspendedAtNotIn(i.SuspendedAtNotIn...))
	}
	if i.SuspendedAtGT != nil {
		predicates = append(predicates, usersetting.SuspendedAtGT(*i.SuspendedAtGT))
	}
	if i.SuspendedAtGTE != nil {
		predicates = append(predicates, usersetting.SuspendedAtGTE(*i.SuspendedAtGTE))
	}
	if i.SuspendedAtLT != nil {
		predicates = append(predicates, usersetting.SuspendedAtLT(*i.SuspendedAtLT))
	}
	if i.SuspendedAtLTE != nil {
		predicates = append(predicates, usersetting.SuspendedAtLTE(*i.SuspendedAtLTE))
	}
	if i.SuspendedAtIsNil {
		predicates = append(predicates, usersetting.SuspendedAtIsNil())
	}
	if i.SuspendedAtNotNil {
		predicates = append(predicates, usersetting.SuspendedAtNotNil())
	}
	if i.Status != nil {
		predicates = append(predicates, usersetting.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, usersetting.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, usersetting.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, usersetting.StatusNotIn(i.StatusNotIn...))
	}
	if i.EmailConfirmed != nil {
		predicates = append(predicates, usersetting.EmailConfirmedEQ(*i.EmailConfirmed))
	}
	if i.EmailConfirmedNEQ != nil {
		predicates = append(predicates, usersetting.EmailConfirmedNEQ(*i.EmailConfirmedNEQ))
	}
	if i.IsWebauthnAllowed != nil {
		predicates = append(predicates, usersetting.IsWebauthnAllowedEQ(*i.IsWebauthnAllowed))
	}
	if i.IsWebauthnAllowedNEQ != nil {
		predicates = append(predicates, usersetting.IsWebauthnAllowedNEQ(*i.IsWebauthnAllowedNEQ))
	}
	if i.IsWebauthnAllowedIsNil {
		predicates = append(predicates, usersetting.IsWebauthnAllowedIsNil())
	}
	if i.IsWebauthnAllowedNotNil {
		predicates = append(predicates, usersetting.IsWebauthnAllowedNotNil())
	}
	if i.IsTfaEnabled != nil {
		predicates = append(predicates, usersetting.IsTfaEnabledEQ(*i.IsTfaEnabled))
	}
	if i.IsTfaEnabledNEQ != nil {
		predicates = append(predicates, usersetting.IsTfaEnabledNEQ(*i.IsTfaEnabledNEQ))
	}
	if i.IsTfaEnabledIsNil {
		predicates = append(predicates, usersetting.IsTfaEnabledIsNil())
	}
	if i.IsTfaEnabledNotNil {
		predicates = append(predicates, usersetting.IsTfaEnabledNotNil())
	}

	if i.HasUser != nil {
		p := usersetting.HasUser()
		if !*i.HasUser {
			p = usersetting.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, usersetting.HasUserWith(with...))
	}
	if i.HasDefaultOrg != nil {
		p := usersetting.HasDefaultOrg()
		if !*i.HasDefaultOrg {
			p = usersetting.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDefaultOrgWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasDefaultOrgWith))
		for _, w := range i.HasDefaultOrgWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDefaultOrgWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, usersetting.HasDefaultOrgWith(with...))
	}
	if i.HasFiles != nil {
		p := usersetting.HasFiles()
		if !*i.HasFiles {
			p = usersetting.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, usersetting.HasFilesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserSettingWhereInput
	case 1:
		return predicates[0], nil
	default:
		return usersetting.And(predicates...), nil
	}
}

// UserSettingHistoryWhereInput represents a where input for filtering UserSettingHistory queries.
type UserSettingHistoryWhereInput struct {
	Predicates []predicate.UserSettingHistory  `json:"-"`
	Not        *UserSettingHistoryWhereInput   `json:"not,omitempty"`
	Or         []*UserSettingHistoryWhereInput `json:"or,omitempty"`
	And        []*UserSettingHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDIsNil        bool     `json:"userIDIsNil,omitempty"`
	UserIDNotNil       bool     `json:"userIDNotNil,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`

	// "locked" field predicates.
	Locked    *bool `json:"locked,omitempty"`
	LockedNEQ *bool `json:"lockedNEQ,omitempty"`

	// "silenced_at" field predicates.
	SilencedAt       *time.Time  `json:"silencedAt,omitempty"`
	SilencedAtNEQ    *time.Time  `json:"silencedAtNEQ,omitempty"`
	SilencedAtIn     []time.Time `json:"silencedAtIn,omitempty"`
	SilencedAtNotIn  []time.Time `json:"silencedAtNotIn,omitempty"`
	SilencedAtGT     *time.Time  `json:"silencedAtGT,omitempty"`
	SilencedAtGTE    *time.Time  `json:"silencedAtGTE,omitempty"`
	SilencedAtLT     *time.Time  `json:"silencedAtLT,omitempty"`
	SilencedAtLTE    *time.Time  `json:"silencedAtLTE,omitempty"`
	SilencedAtIsNil  bool        `json:"silencedAtIsNil,omitempty"`
	SilencedAtNotNil bool        `json:"silencedAtNotNil,omitempty"`

	// "suspended_at" field predicates.
	SuspendedAt       *time.Time  `json:"suspendedAt,omitempty"`
	SuspendedAtNEQ    *time.Time  `json:"suspendedAtNEQ,omitempty"`
	SuspendedAtIn     []time.Time `json:"suspendedAtIn,omitempty"`
	SuspendedAtNotIn  []time.Time `json:"suspendedAtNotIn,omitempty"`
	SuspendedAtGT     *time.Time  `json:"suspendedAtGT,omitempty"`
	SuspendedAtGTE    *time.Time  `json:"suspendedAtGTE,omitempty"`
	SuspendedAtLT     *time.Time  `json:"suspendedAtLT,omitempty"`
	SuspendedAtLTE    *time.Time  `json:"suspendedAtLTE,omitempty"`
	SuspendedAtIsNil  bool        `json:"suspendedAtIsNil,omitempty"`
	SuspendedAtNotNil bool        `json:"suspendedAtNotNil,omitempty"`

	// "status" field predicates.
	Status      *enums.UserStatus  `json:"status,omitempty"`
	StatusNEQ   *enums.UserStatus  `json:"statusNEQ,omitempty"`
	StatusIn    []enums.UserStatus `json:"statusIn,omitempty"`
	StatusNotIn []enums.UserStatus `json:"statusNotIn,omitempty"`

	// "email_confirmed" field predicates.
	EmailConfirmed    *bool `json:"emailConfirmed,omitempty"`
	EmailConfirmedNEQ *bool `json:"emailConfirmedNEQ,omitempty"`

	// "is_webauthn_allowed" field predicates.
	IsWebauthnAllowed       *bool `json:"isWebauthnAllowed,omitempty"`
	IsWebauthnAllowedNEQ    *bool `json:"isWebauthnAllowedNEQ,omitempty"`
	IsWebauthnAllowedIsNil  bool  `json:"isWebauthnAllowedIsNil,omitempty"`
	IsWebauthnAllowedNotNil bool  `json:"isWebauthnAllowedNotNil,omitempty"`

	// "is_tfa_enabled" field predicates.
	IsTfaEnabled       *bool `json:"isTfaEnabled,omitempty"`
	IsTfaEnabledNEQ    *bool `json:"isTfaEnabledNEQ,omitempty"`
	IsTfaEnabledIsNil  bool  `json:"isTfaEnabledIsNil,omitempty"`
	IsTfaEnabledNotNil bool  `json:"isTfaEnabledNotNil,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserSettingHistoryWhereInput) AddPredicates(predicates ...predicate.UserSettingHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserSettingHistoryWhereInput filter on the UserSettingHistoryQuery builder.
func (i *UserSettingHistoryWhereInput) Filter(q *UserSettingHistoryQuery) (*UserSettingHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserSettingHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserSettingHistoryWhereInput is returned in case the UserSettingHistoryWhereInput is empty.
var ErrEmptyUserSettingHistoryWhereInput = errors.New("generated: empty predicate UserSettingHistoryWhereInput")

// P returns a predicate for filtering usersettinghistories.
// An error is returned if the input is empty or invalid.
func (i *UserSettingHistoryWhereInput) P() (predicate.UserSettingHistory, error) {
	var predicates []predicate.UserSettingHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, usersettinghistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.UserSettingHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, usersettinghistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.UserSettingHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, usersettinghistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, usersettinghistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, usersettinghistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, usersettinghistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, usersettinghistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, usersettinghistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, usersettinghistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, usersettinghistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, usersettinghistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, usersettinghistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, usersettinghistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, usersettinghistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, usersettinghistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, usersettinghistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, usersettinghistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, usersettinghistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, usersettinghistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, usersettinghistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, usersettinghistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, usersettinghistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, usersettinghistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, usersettinghistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, usersettinghistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, usersettinghistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, usersettinghistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, usersettinghistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, usersettinghistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, usersettinghistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, usersettinghistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, usersettinghistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, usersettinghistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, usersettinghistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, usersettinghistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, usersettinghistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, usersettinghistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, usersettinghistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, usersettinghistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, usersettinghistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, usersettinghistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, usersettinghistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, usersettinghistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, usersettinghistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, usersettinghistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, usersettinghistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, usersettinghistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, usersettinghistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, usersettinghistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, usersettinghistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, usersettinghistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, usersettinghistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, usersettinghistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, usersettinghistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, usersettinghistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, usersettinghistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, usersettinghistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, usersettinghistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, usersettinghistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, usersettinghistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, usersettinghistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, usersettinghistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, usersettinghistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, usersettinghistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, usersettinghistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, usersettinghistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, usersettinghistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, usersettinghistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, usersettinghistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, usersettinghistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, usersettinghistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, usersettinghistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, usersettinghistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, usersettinghistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, usersettinghistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, usersettinghistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, usersettinghistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, usersettinghistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, usersettinghistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, usersettinghistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, usersettinghistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, usersettinghistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, usersettinghistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, usersettinghistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, usersettinghistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, usersettinghistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, usersettinghistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, usersettinghistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, usersettinghistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, usersettinghistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, usersettinghistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, usersettinghistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, usersettinghistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, usersettinghistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, usersettinghistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.UserID != nil {
		predicates = append(predicates, usersettinghistory.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, usersettinghistory.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, usersettinghistory.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, usersettinghistory.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, usersettinghistory.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, usersettinghistory.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, usersettinghistory.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, usersettinghistory.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, usersettinghistory.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, usersettinghistory.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDIsNil {
		predicates = append(predicates, usersettinghistory.UserIDIsNil())
	}
	if i.UserIDNotNil {
		predicates = append(predicates, usersettinghistory.UserIDNotNil())
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, usersettinghistory.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, usersettinghistory.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.Locked != nil {
		predicates = append(predicates, usersettinghistory.LockedEQ(*i.Locked))
	}
	if i.LockedNEQ != nil {
		predicates = append(predicates, usersettinghistory.LockedNEQ(*i.LockedNEQ))
	}
	if i.SilencedAt != nil {
		predicates = append(predicates, usersettinghistory.SilencedAtEQ(*i.SilencedAt))
	}
	if i.SilencedAtNEQ != nil {
		predicates = append(predicates, usersettinghistory.SilencedAtNEQ(*i.SilencedAtNEQ))
	}
	if len(i.SilencedAtIn) > 0 {
		predicates = append(predicates, usersettinghistory.SilencedAtIn(i.SilencedAtIn...))
	}
	if len(i.SilencedAtNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.SilencedAtNotIn(i.SilencedAtNotIn...))
	}
	if i.SilencedAtGT != nil {
		predicates = append(predicates, usersettinghistory.SilencedAtGT(*i.SilencedAtGT))
	}
	if i.SilencedAtGTE != nil {
		predicates = append(predicates, usersettinghistory.SilencedAtGTE(*i.SilencedAtGTE))
	}
	if i.SilencedAtLT != nil {
		predicates = append(predicates, usersettinghistory.SilencedAtLT(*i.SilencedAtLT))
	}
	if i.SilencedAtLTE != nil {
		predicates = append(predicates, usersettinghistory.SilencedAtLTE(*i.SilencedAtLTE))
	}
	if i.SilencedAtIsNil {
		predicates = append(predicates, usersettinghistory.SilencedAtIsNil())
	}
	if i.SilencedAtNotNil {
		predicates = append(predicates, usersettinghistory.SilencedAtNotNil())
	}
	if i.SuspendedAt != nil {
		predicates = append(predicates, usersettinghistory.SuspendedAtEQ(*i.SuspendedAt))
	}
	if i.SuspendedAtNEQ != nil {
		predicates = append(predicates, usersettinghistory.SuspendedAtNEQ(*i.SuspendedAtNEQ))
	}
	if len(i.SuspendedAtIn) > 0 {
		predicates = append(predicates, usersettinghistory.SuspendedAtIn(i.SuspendedAtIn...))
	}
	if len(i.SuspendedAtNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.SuspendedAtNotIn(i.SuspendedAtNotIn...))
	}
	if i.SuspendedAtGT != nil {
		predicates = append(predicates, usersettinghistory.SuspendedAtGT(*i.SuspendedAtGT))
	}
	if i.SuspendedAtGTE != nil {
		predicates = append(predicates, usersettinghistory.SuspendedAtGTE(*i.SuspendedAtGTE))
	}
	if i.SuspendedAtLT != nil {
		predicates = append(predicates, usersettinghistory.SuspendedAtLT(*i.SuspendedAtLT))
	}
	if i.SuspendedAtLTE != nil {
		predicates = append(predicates, usersettinghistory.SuspendedAtLTE(*i.SuspendedAtLTE))
	}
	if i.SuspendedAtIsNil {
		predicates = append(predicates, usersettinghistory.SuspendedAtIsNil())
	}
	if i.SuspendedAtNotNil {
		predicates = append(predicates, usersettinghistory.SuspendedAtNotNil())
	}
	if i.Status != nil {
		predicates = append(predicates, usersettinghistory.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, usersettinghistory.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, usersettinghistory.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, usersettinghistory.StatusNotIn(i.StatusNotIn...))
	}
	if i.EmailConfirmed != nil {
		predicates = append(predicates, usersettinghistory.EmailConfirmedEQ(*i.EmailConfirmed))
	}
	if i.EmailConfirmedNEQ != nil {
		predicates = append(predicates, usersettinghistory.EmailConfirmedNEQ(*i.EmailConfirmedNEQ))
	}
	if i.IsWebauthnAllowed != nil {
		predicates = append(predicates, usersettinghistory.IsWebauthnAllowedEQ(*i.IsWebauthnAllowed))
	}
	if i.IsWebauthnAllowedNEQ != nil {
		predicates = append(predicates, usersettinghistory.IsWebauthnAllowedNEQ(*i.IsWebauthnAllowedNEQ))
	}
	if i.IsWebauthnAllowedIsNil {
		predicates = append(predicates, usersettinghistory.IsWebauthnAllowedIsNil())
	}
	if i.IsWebauthnAllowedNotNil {
		predicates = append(predicates, usersettinghistory.IsWebauthnAllowedNotNil())
	}
	if i.IsTfaEnabled != nil {
		predicates = append(predicates, usersettinghistory.IsTfaEnabledEQ(*i.IsTfaEnabled))
	}
	if i.IsTfaEnabledNEQ != nil {
		predicates = append(predicates, usersettinghistory.IsTfaEnabledNEQ(*i.IsTfaEnabledNEQ))
	}
	if i.IsTfaEnabledIsNil {
		predicates = append(predicates, usersettinghistory.IsTfaEnabledIsNil())
	}
	if i.IsTfaEnabledNotNil {
		predicates = append(predicates, usersettinghistory.IsTfaEnabledNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserSettingHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return usersettinghistory.And(predicates...), nil
	}
}

// WebhookWhereInput represents a where input for filtering Webhook queries.
type WebhookWhereInput struct {
	Predicates []predicate.Webhook  `json:"-"`
	Not        *WebhookWhereInput   `json:"not,omitempty"`
	Or         []*WebhookWhereInput `json:"or,omitempty"`
	And        []*WebhookWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "destination_url" field predicates.
	DestinationURL             *string  `json:"destinationURL,omitempty"`
	DestinationURLNEQ          *string  `json:"destinationURLNEQ,omitempty"`
	DestinationURLIn           []string `json:"destinationURLIn,omitempty"`
	DestinationURLNotIn        []string `json:"destinationURLNotIn,omitempty"`
	DestinationURLGT           *string  `json:"destinationURLGT,omitempty"`
	DestinationURLGTE          *string  `json:"destinationURLGTE,omitempty"`
	DestinationURLLT           *string  `json:"destinationURLLT,omitempty"`
	DestinationURLLTE          *string  `json:"destinationURLLTE,omitempty"`
	DestinationURLContains     *string  `json:"destinationURLContains,omitempty"`
	DestinationURLHasPrefix    *string  `json:"destinationURLHasPrefix,omitempty"`
	DestinationURLHasSuffix    *string  `json:"destinationURLHasSuffix,omitempty"`
	DestinationURLEqualFold    *string  `json:"destinationURLEqualFold,omitempty"`
	DestinationURLContainsFold *string  `json:"destinationURLContainsFold,omitempty"`

	// "enabled" field predicates.
	Enabled    *bool `json:"enabled,omitempty"`
	EnabledNEQ *bool `json:"enabledNEQ,omitempty"`

	// "failures" field predicates.
	Failures       *int  `json:"failures,omitempty"`
	FailuresNEQ    *int  `json:"failuresNEQ,omitempty"`
	FailuresIn     []int `json:"failuresIn,omitempty"`
	FailuresNotIn  []int `json:"failuresNotIn,omitempty"`
	FailuresGT     *int  `json:"failuresGT,omitempty"`
	FailuresGTE    *int  `json:"failuresGTE,omitempty"`
	FailuresLT     *int  `json:"failuresLT,omitempty"`
	FailuresLTE    *int  `json:"failuresLTE,omitempty"`
	FailuresIsNil  bool  `json:"failuresIsNil,omitempty"`
	FailuresNotNil bool  `json:"failuresNotNil,omitempty"`

	// "last_error" field predicates.
	LastError             *string  `json:"lastError,omitempty"`
	LastErrorNEQ          *string  `json:"lastErrorNEQ,omitempty"`
	LastErrorIn           []string `json:"lastErrorIn,omitempty"`
	LastErrorNotIn        []string `json:"lastErrorNotIn,omitempty"`
	LastErrorGT           *string  `json:"lastErrorGT,omitempty"`
	LastErrorGTE          *string  `json:"lastErrorGTE,omitempty"`
	LastErrorLT           *string  `json:"lastErrorLT,omitempty"`
	LastErrorLTE          *string  `json:"lastErrorLTE,omitempty"`
	LastErrorContains     *string  `json:"lastErrorContains,omitempty"`
	LastErrorHasPrefix    *string  `json:"lastErrorHasPrefix,omitempty"`
	LastErrorHasSuffix    *string  `json:"lastErrorHasSuffix,omitempty"`
	LastErrorIsNil        bool     `json:"lastErrorIsNil,omitempty"`
	LastErrorNotNil       bool     `json:"lastErrorNotNil,omitempty"`
	LastErrorEqualFold    *string  `json:"lastErrorEqualFold,omitempty"`
	LastErrorContainsFold *string  `json:"lastErrorContainsFold,omitempty"`

	// "last_response" field predicates.
	LastResponse             *string  `json:"lastResponse,omitempty"`
	LastResponseNEQ          *string  `json:"lastResponseNEQ,omitempty"`
	LastResponseIn           []string `json:"lastResponseIn,omitempty"`
	LastResponseNotIn        []string `json:"lastResponseNotIn,omitempty"`
	LastResponseGT           *string  `json:"lastResponseGT,omitempty"`
	LastResponseGTE          *string  `json:"lastResponseGTE,omitempty"`
	LastResponseLT           *string  `json:"lastResponseLT,omitempty"`
	LastResponseLTE          *string  `json:"lastResponseLTE,omitempty"`
	LastResponseContains     *string  `json:"lastResponseContains,omitempty"`
	LastResponseHasPrefix    *string  `json:"lastResponseHasPrefix,omitempty"`
	LastResponseHasSuffix    *string  `json:"lastResponseHasSuffix,omitempty"`
	LastResponseIsNil        bool     `json:"lastResponseIsNil,omitempty"`
	LastResponseNotNil       bool     `json:"lastResponseNotNil,omitempty"`
	LastResponseEqualFold    *string  `json:"lastResponseEqualFold,omitempty"`
	LastResponseContainsFold *string  `json:"lastResponseContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool                     `json:"hasOwner,omitempty"`
	HasOwnerWith []*OrganizationWhereInput `json:"hasOwnerWith,omitempty"`

	// "events" edge predicates.
	HasEvents     *bool              `json:"hasEvents,omitempty"`
	HasEventsWith []*EventWhereInput `json:"hasEventsWith,omitempty"`

	// "integrations" edge predicates.
	HasIntegrations     *bool                    `json:"hasIntegrations,omitempty"`
	HasIntegrationsWith []*IntegrationWhereInput `json:"hasIntegrationsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *WebhookWhereInput) AddPredicates(predicates ...predicate.Webhook) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the WebhookWhereInput filter on the WebhookQuery builder.
func (i *WebhookWhereInput) Filter(q *WebhookQuery) (*WebhookQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyWebhookWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyWebhookWhereInput is returned in case the WebhookWhereInput is empty.
var ErrEmptyWebhookWhereInput = errors.New("generated: empty predicate WebhookWhereInput")

// P returns a predicate for filtering webhooks.
// An error is returned if the input is empty or invalid.
func (i *WebhookWhereInput) P() (predicate.Webhook, error) {
	var predicates []predicate.Webhook
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, webhook.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Webhook, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, webhook.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Webhook, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, webhook.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, webhook.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, webhook.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, webhook.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, webhook.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, webhook.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, webhook.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, webhook.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, webhook.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, webhook.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, webhook.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, webhook.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, webhook.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, webhook.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, webhook.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, webhook.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, webhook.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, webhook.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, webhook.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, webhook.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, webhook.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, webhook.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, webhook.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, webhook.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, webhook.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, webhook.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, webhook.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, webhook.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, webhook.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, webhook.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, webhook.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, webhook.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, webhook.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, webhook.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, webhook.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, webhook.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, webhook.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, webhook.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, webhook.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, webhook.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, webhook.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, webhook.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, webhook.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, webhook.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, webhook.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, webhook.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, webhook.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, webhook.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, webhook.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, webhook.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, webhook.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, webhook.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, webhook.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, webhook.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, webhook.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, webhook.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, webhook.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, webhook.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, webhook.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, webhook.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, webhook.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, webhook.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, webhook.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, webhook.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, webhook.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, webhook.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, webhook.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, webhook.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, webhook.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, webhook.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, webhook.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, webhook.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, webhook.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, webhook.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, webhook.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, webhook.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, webhook.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, webhook.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, webhook.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, webhook.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, webhook.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, webhook.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, webhook.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, webhook.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, webhook.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, webhook.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, webhook.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, webhook.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, webhook.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, webhook.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, webhook.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, webhook.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, webhook.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, webhook.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, webhook.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, webhook.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, webhook.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, webhook.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, webhook.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, webhook.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, webhook.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, webhook.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, webhook.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, webhook.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, webhook.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, webhook.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, webhook.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, webhook.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, webhook.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, webhook.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, webhook.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, webhook.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, webhook.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, webhook.NameContainsFold(*i.NameContainsFold))
	}
	if i.DestinationURL != nil {
		predicates = append(predicates, webhook.DestinationURLEQ(*i.DestinationURL))
	}
	if i.DestinationURLNEQ != nil {
		predicates = append(predicates, webhook.DestinationURLNEQ(*i.DestinationURLNEQ))
	}
	if len(i.DestinationURLIn) > 0 {
		predicates = append(predicates, webhook.DestinationURLIn(i.DestinationURLIn...))
	}
	if len(i.DestinationURLNotIn) > 0 {
		predicates = append(predicates, webhook.DestinationURLNotIn(i.DestinationURLNotIn...))
	}
	if i.DestinationURLGT != nil {
		predicates = append(predicates, webhook.DestinationURLGT(*i.DestinationURLGT))
	}
	if i.DestinationURLGTE != nil {
		predicates = append(predicates, webhook.DestinationURLGTE(*i.DestinationURLGTE))
	}
	if i.DestinationURLLT != nil {
		predicates = append(predicates, webhook.DestinationURLLT(*i.DestinationURLLT))
	}
	if i.DestinationURLLTE != nil {
		predicates = append(predicates, webhook.DestinationURLLTE(*i.DestinationURLLTE))
	}
	if i.DestinationURLContains != nil {
		predicates = append(predicates, webhook.DestinationURLContains(*i.DestinationURLContains))
	}
	if i.DestinationURLHasPrefix != nil {
		predicates = append(predicates, webhook.DestinationURLHasPrefix(*i.DestinationURLHasPrefix))
	}
	if i.DestinationURLHasSuffix != nil {
		predicates = append(predicates, webhook.DestinationURLHasSuffix(*i.DestinationURLHasSuffix))
	}
	if i.DestinationURLEqualFold != nil {
		predicates = append(predicates, webhook.DestinationURLEqualFold(*i.DestinationURLEqualFold))
	}
	if i.DestinationURLContainsFold != nil {
		predicates = append(predicates, webhook.DestinationURLContainsFold(*i.DestinationURLContainsFold))
	}
	if i.Enabled != nil {
		predicates = append(predicates, webhook.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, webhook.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.Failures != nil {
		predicates = append(predicates, webhook.FailuresEQ(*i.Failures))
	}
	if i.FailuresNEQ != nil {
		predicates = append(predicates, webhook.FailuresNEQ(*i.FailuresNEQ))
	}
	if len(i.FailuresIn) > 0 {
		predicates = append(predicates, webhook.FailuresIn(i.FailuresIn...))
	}
	if len(i.FailuresNotIn) > 0 {
		predicates = append(predicates, webhook.FailuresNotIn(i.FailuresNotIn...))
	}
	if i.FailuresGT != nil {
		predicates = append(predicates, webhook.FailuresGT(*i.FailuresGT))
	}
	if i.FailuresGTE != nil {
		predicates = append(predicates, webhook.FailuresGTE(*i.FailuresGTE))
	}
	if i.FailuresLT != nil {
		predicates = append(predicates, webhook.FailuresLT(*i.FailuresLT))
	}
	if i.FailuresLTE != nil {
		predicates = append(predicates, webhook.FailuresLTE(*i.FailuresLTE))
	}
	if i.FailuresIsNil {
		predicates = append(predicates, webhook.FailuresIsNil())
	}
	if i.FailuresNotNil {
		predicates = append(predicates, webhook.FailuresNotNil())
	}
	if i.LastError != nil {
		predicates = append(predicates, webhook.LastErrorEQ(*i.LastError))
	}
	if i.LastErrorNEQ != nil {
		predicates = append(predicates, webhook.LastErrorNEQ(*i.LastErrorNEQ))
	}
	if len(i.LastErrorIn) > 0 {
		predicates = append(predicates, webhook.LastErrorIn(i.LastErrorIn...))
	}
	if len(i.LastErrorNotIn) > 0 {
		predicates = append(predicates, webhook.LastErrorNotIn(i.LastErrorNotIn...))
	}
	if i.LastErrorGT != nil {
		predicates = append(predicates, webhook.LastErrorGT(*i.LastErrorGT))
	}
	if i.LastErrorGTE != nil {
		predicates = append(predicates, webhook.LastErrorGTE(*i.LastErrorGTE))
	}
	if i.LastErrorLT != nil {
		predicates = append(predicates, webhook.LastErrorLT(*i.LastErrorLT))
	}
	if i.LastErrorLTE != nil {
		predicates = append(predicates, webhook.LastErrorLTE(*i.LastErrorLTE))
	}
	if i.LastErrorContains != nil {
		predicates = append(predicates, webhook.LastErrorContains(*i.LastErrorContains))
	}
	if i.LastErrorHasPrefix != nil {
		predicates = append(predicates, webhook.LastErrorHasPrefix(*i.LastErrorHasPrefix))
	}
	if i.LastErrorHasSuffix != nil {
		predicates = append(predicates, webhook.LastErrorHasSuffix(*i.LastErrorHasSuffix))
	}
	if i.LastErrorIsNil {
		predicates = append(predicates, webhook.LastErrorIsNil())
	}
	if i.LastErrorNotNil {
		predicates = append(predicates, webhook.LastErrorNotNil())
	}
	if i.LastErrorEqualFold != nil {
		predicates = append(predicates, webhook.LastErrorEqualFold(*i.LastErrorEqualFold))
	}
	if i.LastErrorContainsFold != nil {
		predicates = append(predicates, webhook.LastErrorContainsFold(*i.LastErrorContainsFold))
	}
	if i.LastResponse != nil {
		predicates = append(predicates, webhook.LastResponseEQ(*i.LastResponse))
	}
	if i.LastResponseNEQ != nil {
		predicates = append(predicates, webhook.LastResponseNEQ(*i.LastResponseNEQ))
	}
	if len(i.LastResponseIn) > 0 {
		predicates = append(predicates, webhook.LastResponseIn(i.LastResponseIn...))
	}
	if len(i.LastResponseNotIn) > 0 {
		predicates = append(predicates, webhook.LastResponseNotIn(i.LastResponseNotIn...))
	}
	if i.LastResponseGT != nil {
		predicates = append(predicates, webhook.LastResponseGT(*i.LastResponseGT))
	}
	if i.LastResponseGTE != nil {
		predicates = append(predicates, webhook.LastResponseGTE(*i.LastResponseGTE))
	}
	if i.LastResponseLT != nil {
		predicates = append(predicates, webhook.LastResponseLT(*i.LastResponseLT))
	}
	if i.LastResponseLTE != nil {
		predicates = append(predicates, webhook.LastResponseLTE(*i.LastResponseLTE))
	}
	if i.LastResponseContains != nil {
		predicates = append(predicates, webhook.LastResponseContains(*i.LastResponseContains))
	}
	if i.LastResponseHasPrefix != nil {
		predicates = append(predicates, webhook.LastResponseHasPrefix(*i.LastResponseHasPrefix))
	}
	if i.LastResponseHasSuffix != nil {
		predicates = append(predicates, webhook.LastResponseHasSuffix(*i.LastResponseHasSuffix))
	}
	if i.LastResponseIsNil {
		predicates = append(predicates, webhook.LastResponseIsNil())
	}
	if i.LastResponseNotNil {
		predicates = append(predicates, webhook.LastResponseNotNil())
	}
	if i.LastResponseEqualFold != nil {
		predicates = append(predicates, webhook.LastResponseEqualFold(*i.LastResponseEqualFold))
	}
	if i.LastResponseContainsFold != nil {
		predicates = append(predicates, webhook.LastResponseContainsFold(*i.LastResponseContainsFold))
	}

	if i.HasOwner != nil {
		p := webhook.HasOwner()
		if !*i.HasOwner {
			p = webhook.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.Organization, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, webhook.HasOwnerWith(with...))
	}
	if i.HasEvents != nil {
		p := webhook.HasEvents()
		if !*i.HasEvents {
			p = webhook.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasEventsWith) > 0 {
		with := make([]predicate.Event, 0, len(i.HasEventsWith))
		for _, w := range i.HasEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, webhook.HasEventsWith(with...))
	}
	if i.HasIntegrations != nil {
		p := webhook.HasIntegrations()
		if !*i.HasIntegrations {
			p = webhook.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIntegrationsWith) > 0 {
		with := make([]predicate.Integration, 0, len(i.HasIntegrationsWith))
		for _, w := range i.HasIntegrationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIntegrationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, webhook.HasIntegrationsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyWebhookWhereInput
	case 1:
		return predicates[0], nil
	default:
		return webhook.And(predicates...), nil
	}
}

// WebhookHistoryWhereInput represents a where input for filtering WebhookHistory queries.
type WebhookHistoryWhereInput struct {
	Predicates []predicate.WebhookHistory  `json:"-"`
	Not        *WebhookHistoryWhereInput   `json:"not,omitempty"`
	Or         []*WebhookHistoryWhereInput `json:"or,omitempty"`
	And        []*WebhookHistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "history_time" field predicates.
	HistoryTime      *time.Time  `json:"historyTime,omitempty"`
	HistoryTimeNEQ   *time.Time  `json:"historyTimeNEQ,omitempty"`
	HistoryTimeIn    []time.Time `json:"historyTimeIn,omitempty"`
	HistoryTimeNotIn []time.Time `json:"historyTimeNotIn,omitempty"`
	HistoryTimeGT    *time.Time  `json:"historyTimeGT,omitempty"`
	HistoryTimeGTE   *time.Time  `json:"historyTimeGTE,omitempty"`
	HistoryTimeLT    *time.Time  `json:"historyTimeLT,omitempty"`
	HistoryTimeLTE   *time.Time  `json:"historyTimeLTE,omitempty"`

	// "ref" field predicates.
	Ref             *string  `json:"ref,omitempty"`
	RefNEQ          *string  `json:"refNEQ,omitempty"`
	RefIn           []string `json:"refIn,omitempty"`
	RefNotIn        []string `json:"refNotIn,omitempty"`
	RefGT           *string  `json:"refGT,omitempty"`
	RefGTE          *string  `json:"refGTE,omitempty"`
	RefLT           *string  `json:"refLT,omitempty"`
	RefLTE          *string  `json:"refLTE,omitempty"`
	RefContains     *string  `json:"refContains,omitempty"`
	RefHasPrefix    *string  `json:"refHasPrefix,omitempty"`
	RefHasSuffix    *string  `json:"refHasSuffix,omitempty"`
	RefIsNil        bool     `json:"refIsNil,omitempty"`
	RefNotNil       bool     `json:"refNotNil,omitempty"`
	RefEqualFold    *string  `json:"refEqualFold,omitempty"`
	RefContainsFold *string  `json:"refContainsFold,omitempty"`

	// "operation" field predicates.
	Operation      *history.OpType  `json:"operation,omitempty"`
	OperationNEQ   *history.OpType  `json:"operationNEQ,omitempty"`
	OperationIn    []history.OpType `json:"operationIn,omitempty"`
	OperationNotIn []history.OpType `json:"operationNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "destination_url" field predicates.
	DestinationURL             *string  `json:"destinationURL,omitempty"`
	DestinationURLNEQ          *string  `json:"destinationURLNEQ,omitempty"`
	DestinationURLIn           []string `json:"destinationURLIn,omitempty"`
	DestinationURLNotIn        []string `json:"destinationURLNotIn,omitempty"`
	DestinationURLGT           *string  `json:"destinationURLGT,omitempty"`
	DestinationURLGTE          *string  `json:"destinationURLGTE,omitempty"`
	DestinationURLLT           *string  `json:"destinationURLLT,omitempty"`
	DestinationURLLTE          *string  `json:"destinationURLLTE,omitempty"`
	DestinationURLContains     *string  `json:"destinationURLContains,omitempty"`
	DestinationURLHasPrefix    *string  `json:"destinationURLHasPrefix,omitempty"`
	DestinationURLHasSuffix    *string  `json:"destinationURLHasSuffix,omitempty"`
	DestinationURLEqualFold    *string  `json:"destinationURLEqualFold,omitempty"`
	DestinationURLContainsFold *string  `json:"destinationURLContainsFold,omitempty"`

	// "enabled" field predicates.
	Enabled    *bool `json:"enabled,omitempty"`
	EnabledNEQ *bool `json:"enabledNEQ,omitempty"`

	// "failures" field predicates.
	Failures       *int  `json:"failures,omitempty"`
	FailuresNEQ    *int  `json:"failuresNEQ,omitempty"`
	FailuresIn     []int `json:"failuresIn,omitempty"`
	FailuresNotIn  []int `json:"failuresNotIn,omitempty"`
	FailuresGT     *int  `json:"failuresGT,omitempty"`
	FailuresGTE    *int  `json:"failuresGTE,omitempty"`
	FailuresLT     *int  `json:"failuresLT,omitempty"`
	FailuresLTE    *int  `json:"failuresLTE,omitempty"`
	FailuresIsNil  bool  `json:"failuresIsNil,omitempty"`
	FailuresNotNil bool  `json:"failuresNotNil,omitempty"`

	// "last_error" field predicates.
	LastError             *string  `json:"lastError,omitempty"`
	LastErrorNEQ          *string  `json:"lastErrorNEQ,omitempty"`
	LastErrorIn           []string `json:"lastErrorIn,omitempty"`
	LastErrorNotIn        []string `json:"lastErrorNotIn,omitempty"`
	LastErrorGT           *string  `json:"lastErrorGT,omitempty"`
	LastErrorGTE          *string  `json:"lastErrorGTE,omitempty"`
	LastErrorLT           *string  `json:"lastErrorLT,omitempty"`
	LastErrorLTE          *string  `json:"lastErrorLTE,omitempty"`
	LastErrorContains     *string  `json:"lastErrorContains,omitempty"`
	LastErrorHasPrefix    *string  `json:"lastErrorHasPrefix,omitempty"`
	LastErrorHasSuffix    *string  `json:"lastErrorHasSuffix,omitempty"`
	LastErrorIsNil        bool     `json:"lastErrorIsNil,omitempty"`
	LastErrorNotNil       bool     `json:"lastErrorNotNil,omitempty"`
	LastErrorEqualFold    *string  `json:"lastErrorEqualFold,omitempty"`
	LastErrorContainsFold *string  `json:"lastErrorContainsFold,omitempty"`

	// "last_response" field predicates.
	LastResponse             *string  `json:"lastResponse,omitempty"`
	LastResponseNEQ          *string  `json:"lastResponseNEQ,omitempty"`
	LastResponseIn           []string `json:"lastResponseIn,omitempty"`
	LastResponseNotIn        []string `json:"lastResponseNotIn,omitempty"`
	LastResponseGT           *string  `json:"lastResponseGT,omitempty"`
	LastResponseGTE          *string  `json:"lastResponseGTE,omitempty"`
	LastResponseLT           *string  `json:"lastResponseLT,omitempty"`
	LastResponseLTE          *string  `json:"lastResponseLTE,omitempty"`
	LastResponseContains     *string  `json:"lastResponseContains,omitempty"`
	LastResponseHasPrefix    *string  `json:"lastResponseHasPrefix,omitempty"`
	LastResponseHasSuffix    *string  `json:"lastResponseHasSuffix,omitempty"`
	LastResponseIsNil        bool     `json:"lastResponseIsNil,omitempty"`
	LastResponseNotNil       bool     `json:"lastResponseNotNil,omitempty"`
	LastResponseEqualFold    *string  `json:"lastResponseEqualFold,omitempty"`
	LastResponseContainsFold *string  `json:"lastResponseContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *WebhookHistoryWhereInput) AddPredicates(predicates ...predicate.WebhookHistory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the WebhookHistoryWhereInput filter on the WebhookHistoryQuery builder.
func (i *WebhookHistoryWhereInput) Filter(q *WebhookHistoryQuery) (*WebhookHistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyWebhookHistoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyWebhookHistoryWhereInput is returned in case the WebhookHistoryWhereInput is empty.
var ErrEmptyWebhookHistoryWhereInput = errors.New("generated: empty predicate WebhookHistoryWhereInput")

// P returns a predicate for filtering webhookhistories.
// An error is returned if the input is empty or invalid.
func (i *WebhookHistoryWhereInput) P() (predicate.WebhookHistory, error) {
	var predicates []predicate.WebhookHistory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, webhookhistory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.WebhookHistory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, webhookhistory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.WebhookHistory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, webhookhistory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, webhookhistory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, webhookhistory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, webhookhistory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, webhookhistory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, webhookhistory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, webhookhistory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, webhookhistory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, webhookhistory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, webhookhistory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, webhookhistory.IDContainsFold(*i.IDContainsFold))
	}
	if i.HistoryTime != nil {
		predicates = append(predicates, webhookhistory.HistoryTimeEQ(*i.HistoryTime))
	}
	if i.HistoryTimeNEQ != nil {
		predicates = append(predicates, webhookhistory.HistoryTimeNEQ(*i.HistoryTimeNEQ))
	}
	if len(i.HistoryTimeIn) > 0 {
		predicates = append(predicates, webhookhistory.HistoryTimeIn(i.HistoryTimeIn...))
	}
	if len(i.HistoryTimeNotIn) > 0 {
		predicates = append(predicates, webhookhistory.HistoryTimeNotIn(i.HistoryTimeNotIn...))
	}
	if i.HistoryTimeGT != nil {
		predicates = append(predicates, webhookhistory.HistoryTimeGT(*i.HistoryTimeGT))
	}
	if i.HistoryTimeGTE != nil {
		predicates = append(predicates, webhookhistory.HistoryTimeGTE(*i.HistoryTimeGTE))
	}
	if i.HistoryTimeLT != nil {
		predicates = append(predicates, webhookhistory.HistoryTimeLT(*i.HistoryTimeLT))
	}
	if i.HistoryTimeLTE != nil {
		predicates = append(predicates, webhookhistory.HistoryTimeLTE(*i.HistoryTimeLTE))
	}
	if i.Ref != nil {
		predicates = append(predicates, webhookhistory.RefEQ(*i.Ref))
	}
	if i.RefNEQ != nil {
		predicates = append(predicates, webhookhistory.RefNEQ(*i.RefNEQ))
	}
	if len(i.RefIn) > 0 {
		predicates = append(predicates, webhookhistory.RefIn(i.RefIn...))
	}
	if len(i.RefNotIn) > 0 {
		predicates = append(predicates, webhookhistory.RefNotIn(i.RefNotIn...))
	}
	if i.RefGT != nil {
		predicates = append(predicates, webhookhistory.RefGT(*i.RefGT))
	}
	if i.RefGTE != nil {
		predicates = append(predicates, webhookhistory.RefGTE(*i.RefGTE))
	}
	if i.RefLT != nil {
		predicates = append(predicates, webhookhistory.RefLT(*i.RefLT))
	}
	if i.RefLTE != nil {
		predicates = append(predicates, webhookhistory.RefLTE(*i.RefLTE))
	}
	if i.RefContains != nil {
		predicates = append(predicates, webhookhistory.RefContains(*i.RefContains))
	}
	if i.RefHasPrefix != nil {
		predicates = append(predicates, webhookhistory.RefHasPrefix(*i.RefHasPrefix))
	}
	if i.RefHasSuffix != nil {
		predicates = append(predicates, webhookhistory.RefHasSuffix(*i.RefHasSuffix))
	}
	if i.RefIsNil {
		predicates = append(predicates, webhookhistory.RefIsNil())
	}
	if i.RefNotNil {
		predicates = append(predicates, webhookhistory.RefNotNil())
	}
	if i.RefEqualFold != nil {
		predicates = append(predicates, webhookhistory.RefEqualFold(*i.RefEqualFold))
	}
	if i.RefContainsFold != nil {
		predicates = append(predicates, webhookhistory.RefContainsFold(*i.RefContainsFold))
	}
	if i.Operation != nil {
		predicates = append(predicates, webhookhistory.OperationEQ(*i.Operation))
	}
	if i.OperationNEQ != nil {
		predicates = append(predicates, webhookhistory.OperationNEQ(*i.OperationNEQ))
	}
	if len(i.OperationIn) > 0 {
		predicates = append(predicates, webhookhistory.OperationIn(i.OperationIn...))
	}
	if len(i.OperationNotIn) > 0 {
		predicates = append(predicates, webhookhistory.OperationNotIn(i.OperationNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, webhookhistory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, webhookhistory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, webhookhistory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, webhookhistory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, webhookhistory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, webhookhistory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, webhookhistory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, webhookhistory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, webhookhistory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, webhookhistory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, webhookhistory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, webhookhistory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, webhookhistory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, webhookhistory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, webhookhistory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, webhookhistory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, webhookhistory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, webhookhistory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, webhookhistory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, webhookhistory.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, webhookhistory.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, webhookhistory.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, webhookhistory.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, webhookhistory.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, webhookhistory.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, webhookhistory.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, webhookhistory.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, webhookhistory.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, webhookhistory.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, webhookhistory.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, webhookhistory.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, webhookhistory.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, webhookhistory.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, webhookhistory.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, webhookhistory.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, webhookhistory.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, webhookhistory.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, webhookhistory.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, webhookhistory.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, webhookhistory.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, webhookhistory.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, webhookhistory.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, webhookhistory.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, webhookhistory.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, webhookhistory.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, webhookhistory.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, webhookhistory.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, webhookhistory.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, webhookhistory.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, webhookhistory.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, webhookhistory.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, webhookhistory.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, webhookhistory.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, webhookhistory.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, webhookhistory.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, webhookhistory.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, webhookhistory.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, webhookhistory.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, webhookhistory.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, webhookhistory.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, webhookhistory.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, webhookhistory.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, webhookhistory.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, webhookhistory.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, webhookhistory.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, webhookhistory.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, webhookhistory.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, webhookhistory.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, webhookhistory.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, webhookhistory.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, webhookhistory.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, webhookhistory.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, webhookhistory.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, webhookhistory.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, webhookhistory.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, webhookhistory.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, webhookhistory.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, webhookhistory.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, webhookhistory.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, webhookhistory.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, webhookhistory.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, webhookhistory.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, webhookhistory.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, webhookhistory.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, webhookhistory.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, webhookhistory.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, webhookhistory.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, webhookhistory.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, webhookhistory.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, webhookhistory.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, webhookhistory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, webhookhistory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, webhookhistory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, webhookhistory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, webhookhistory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, webhookhistory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, webhookhistory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, webhookhistory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, webhookhistory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, webhookhistory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, webhookhistory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, webhookhistory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, webhookhistory.NameContainsFold(*i.NameContainsFold))
	}
	if i.DestinationURL != nil {
		predicates = append(predicates, webhookhistory.DestinationURLEQ(*i.DestinationURL))
	}
	if i.DestinationURLNEQ != nil {
		predicates = append(predicates, webhookhistory.DestinationURLNEQ(*i.DestinationURLNEQ))
	}
	if len(i.DestinationURLIn) > 0 {
		predicates = append(predicates, webhookhistory.DestinationURLIn(i.DestinationURLIn...))
	}
	if len(i.DestinationURLNotIn) > 0 {
		predicates = append(predicates, webhookhistory.DestinationURLNotIn(i.DestinationURLNotIn...))
	}
	if i.DestinationURLGT != nil {
		predicates = append(predicates, webhookhistory.DestinationURLGT(*i.DestinationURLGT))
	}
	if i.DestinationURLGTE != nil {
		predicates = append(predicates, webhookhistory.DestinationURLGTE(*i.DestinationURLGTE))
	}
	if i.DestinationURLLT != nil {
		predicates = append(predicates, webhookhistory.DestinationURLLT(*i.DestinationURLLT))
	}
	if i.DestinationURLLTE != nil {
		predicates = append(predicates, webhookhistory.DestinationURLLTE(*i.DestinationURLLTE))
	}
	if i.DestinationURLContains != nil {
		predicates = append(predicates, webhookhistory.DestinationURLContains(*i.DestinationURLContains))
	}
	if i.DestinationURLHasPrefix != nil {
		predicates = append(predicates, webhookhistory.DestinationURLHasPrefix(*i.DestinationURLHasPrefix))
	}
	if i.DestinationURLHasSuffix != nil {
		predicates = append(predicates, webhookhistory.DestinationURLHasSuffix(*i.DestinationURLHasSuffix))
	}
	if i.DestinationURLEqualFold != nil {
		predicates = append(predicates, webhookhistory.DestinationURLEqualFold(*i.DestinationURLEqualFold))
	}
	if i.DestinationURLContainsFold != nil {
		predicates = append(predicates, webhookhistory.DestinationURLContainsFold(*i.DestinationURLContainsFold))
	}
	if i.Enabled != nil {
		predicates = append(predicates, webhookhistory.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, webhookhistory.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.Failures != nil {
		predicates = append(predicates, webhookhistory.FailuresEQ(*i.Failures))
	}
	if i.FailuresNEQ != nil {
		predicates = append(predicates, webhookhistory.FailuresNEQ(*i.FailuresNEQ))
	}
	if len(i.FailuresIn) > 0 {
		predicates = append(predicates, webhookhistory.FailuresIn(i.FailuresIn...))
	}
	if len(i.FailuresNotIn) > 0 {
		predicates = append(predicates, webhookhistory.FailuresNotIn(i.FailuresNotIn...))
	}
	if i.FailuresGT != nil {
		predicates = append(predicates, webhookhistory.FailuresGT(*i.FailuresGT))
	}
	if i.FailuresGTE != nil {
		predicates = append(predicates, webhookhistory.FailuresGTE(*i.FailuresGTE))
	}
	if i.FailuresLT != nil {
		predicates = append(predicates, webhookhistory.FailuresLT(*i.FailuresLT))
	}
	if i.FailuresLTE != nil {
		predicates = append(predicates, webhookhistory.FailuresLTE(*i.FailuresLTE))
	}
	if i.FailuresIsNil {
		predicates = append(predicates, webhookhistory.FailuresIsNil())
	}
	if i.FailuresNotNil {
		predicates = append(predicates, webhookhistory.FailuresNotNil())
	}
	if i.LastError != nil {
		predicates = append(predicates, webhookhistory.LastErrorEQ(*i.LastError))
	}
	if i.LastErrorNEQ != nil {
		predicates = append(predicates, webhookhistory.LastErrorNEQ(*i.LastErrorNEQ))
	}
	if len(i.LastErrorIn) > 0 {
		predicates = append(predicates, webhookhistory.LastErrorIn(i.LastErrorIn...))
	}
	if len(i.LastErrorNotIn) > 0 {
		predicates = append(predicates, webhookhistory.LastErrorNotIn(i.LastErrorNotIn...))
	}
	if i.LastErrorGT != nil {
		predicates = append(predicates, webhookhistory.LastErrorGT(*i.LastErrorGT))
	}
	if i.LastErrorGTE != nil {
		predicates = append(predicates, webhookhistory.LastErrorGTE(*i.LastErrorGTE))
	}
	if i.LastErrorLT != nil {
		predicates = append(predicates, webhookhistory.LastErrorLT(*i.LastErrorLT))
	}
	if i.LastErrorLTE != nil {
		predicates = append(predicates, webhookhistory.LastErrorLTE(*i.LastErrorLTE))
	}
	if i.LastErrorContains != nil {
		predicates = append(predicates, webhookhistory.LastErrorContains(*i.LastErrorContains))
	}
	if i.LastErrorHasPrefix != nil {
		predicates = append(predicates, webhookhistory.LastErrorHasPrefix(*i.LastErrorHasPrefix))
	}
	if i.LastErrorHasSuffix != nil {
		predicates = append(predicates, webhookhistory.LastErrorHasSuffix(*i.LastErrorHasSuffix))
	}
	if i.LastErrorIsNil {
		predicates = append(predicates, webhookhistory.LastErrorIsNil())
	}
	if i.LastErrorNotNil {
		predicates = append(predicates, webhookhistory.LastErrorNotNil())
	}
	if i.LastErrorEqualFold != nil {
		predicates = append(predicates, webhookhistory.LastErrorEqualFold(*i.LastErrorEqualFold))
	}
	if i.LastErrorContainsFold != nil {
		predicates = append(predicates, webhookhistory.LastErrorContainsFold(*i.LastErrorContainsFold))
	}
	if i.LastResponse != nil {
		predicates = append(predicates, webhookhistory.LastResponseEQ(*i.LastResponse))
	}
	if i.LastResponseNEQ != nil {
		predicates = append(predicates, webhookhistory.LastResponseNEQ(*i.LastResponseNEQ))
	}
	if len(i.LastResponseIn) > 0 {
		predicates = append(predicates, webhookhistory.LastResponseIn(i.LastResponseIn...))
	}
	if len(i.LastResponseNotIn) > 0 {
		predicates = append(predicates, webhookhistory.LastResponseNotIn(i.LastResponseNotIn...))
	}
	if i.LastResponseGT != nil {
		predicates = append(predicates, webhookhistory.LastResponseGT(*i.LastResponseGT))
	}
	if i.LastResponseGTE != nil {
		predicates = append(predicates, webhookhistory.LastResponseGTE(*i.LastResponseGTE))
	}
	if i.LastResponseLT != nil {
		predicates = append(predicates, webhookhistory.LastResponseLT(*i.LastResponseLT))
	}
	if i.LastResponseLTE != nil {
		predicates = append(predicates, webhookhistory.LastResponseLTE(*i.LastResponseLTE))
	}
	if i.LastResponseContains != nil {
		predicates = append(predicates, webhookhistory.LastResponseContains(*i.LastResponseContains))
	}
	if i.LastResponseHasPrefix != nil {
		predicates = append(predicates, webhookhistory.LastResponseHasPrefix(*i.LastResponseHasPrefix))
	}
	if i.LastResponseHasSuffix != nil {
		predicates = append(predicates, webhookhistory.LastResponseHasSuffix(*i.LastResponseHasSuffix))
	}
	if i.LastResponseIsNil {
		predicates = append(predicates, webhookhistory.LastResponseIsNil())
	}
	if i.LastResponseNotNil {
		predicates = append(predicates, webhookhistory.LastResponseNotNil())
	}
	if i.LastResponseEqualFold != nil {
		predicates = append(predicates, webhookhistory.LastResponseEqualFold(*i.LastResponseEqualFold))
	}
	if i.LastResponseContainsFold != nil {
		predicates = append(predicates, webhookhistory.LastResponseContainsFold(*i.LastResponseContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyWebhookHistoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return webhookhistory.And(predicates...), nil
	}
}
