// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/changeactor"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ChangeActorUpdate is the builder for updating ChangeActor entities.
type ChangeActorUpdate struct {
	config
	hooks     []Hook
	mutation  *ChangeActorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChangeActorUpdate builder.
func (cau *ChangeActorUpdate) Where(ps ...predicate.ChangeActor) *ChangeActorUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetName sets the "name" field.
func (cau *ChangeActorUpdate) SetName(s string) *ChangeActorUpdate {
	cau.mutation.SetName(s)
	return cau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cau *ChangeActorUpdate) SetNillableName(s *string) *ChangeActorUpdate {
	if s != nil {
		cau.SetName(*s)
	}
	return cau
}

// SetActorType sets the "actor_type" field.
func (cau *ChangeActorUpdate) SetActorType(s string) *ChangeActorUpdate {
	cau.mutation.SetActorType(s)
	return cau
}

// SetNillableActorType sets the "actor_type" field if the given value is not nil.
func (cau *ChangeActorUpdate) SetNillableActorType(s *string) *ChangeActorUpdate {
	if s != nil {
		cau.SetActorType(*s)
	}
	return cau
}

// Mutation returns the ChangeActorMutation object of the builder.
func (cau *ChangeActorUpdate) Mutation() *ChangeActorMutation {
	return cau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *ChangeActorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *ChangeActorUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *ChangeActorUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *ChangeActorUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cau *ChangeActorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChangeActorUpdate {
	cau.modifiers = append(cau.modifiers, modifiers...)
	return cau
}

func (cau *ChangeActorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(changeactor.Table, changeactor.Columns, sqlgraph.NewFieldSpec(changeactor.FieldID, field.TypeString))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.Name(); ok {
		_spec.SetField(changeactor.FieldName, field.TypeString, value)
	}
	if value, ok := cau.mutation.ActorType(); ok {
		_spec.SetField(changeactor.FieldActorType, field.TypeString, value)
	}
	_spec.Node.Schema = cau.schemaConfig.ChangeActor
	ctx = internal.NewSchemaConfigContext(ctx, cau.schemaConfig)
	_spec.AddModifiers(cau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changeactor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// ChangeActorUpdateOne is the builder for updating a single ChangeActor entity.
type ChangeActorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChangeActorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (cauo *ChangeActorUpdateOne) SetName(s string) *ChangeActorUpdateOne {
	cauo.mutation.SetName(s)
	return cauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cauo *ChangeActorUpdateOne) SetNillableName(s *string) *ChangeActorUpdateOne {
	if s != nil {
		cauo.SetName(*s)
	}
	return cauo
}

// SetActorType sets the "actor_type" field.
func (cauo *ChangeActorUpdateOne) SetActorType(s string) *ChangeActorUpdateOne {
	cauo.mutation.SetActorType(s)
	return cauo
}

// SetNillableActorType sets the "actor_type" field if the given value is not nil.
func (cauo *ChangeActorUpdateOne) SetNillableActorType(s *string) *ChangeActorUpdateOne {
	if s != nil {
		cauo.SetActorType(*s)
	}
	return cauo
}

// Mutation returns the ChangeActorMutation object of the builder.
func (cauo *ChangeActorUpdateOne) Mutation() *ChangeActorMutation {
	return cauo.mutation
}

// Where appends a list predicates to the ChangeActorUpdate builder.
func (cauo *ChangeActorUpdateOne) Where(ps ...predicate.ChangeActor) *ChangeActorUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *ChangeActorUpdateOne) Select(field string, fields ...string) *ChangeActorUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated ChangeActor entity.
func (cauo *ChangeActorUpdateOne) Save(ctx context.Context) (*ChangeActor, error) {
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *ChangeActorUpdateOne) SaveX(ctx context.Context) *ChangeActor {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *ChangeActorUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *ChangeActorUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cauo *ChangeActorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChangeActorUpdateOne {
	cauo.modifiers = append(cauo.modifiers, modifiers...)
	return cauo
}

func (cauo *ChangeActorUpdateOne) sqlSave(ctx context.Context) (_node *ChangeActor, err error) {
	_spec := sqlgraph.NewUpdateSpec(changeactor.Table, changeactor.Columns, sqlgraph.NewFieldSpec(changeactor.FieldID, field.TypeString))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ChangeActor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, changeactor.FieldID)
		for _, f := range fields {
			if !changeactor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != changeactor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.Name(); ok {
		_spec.SetField(changeactor.FieldName, field.TypeString, value)
	}
	if value, ok := cauo.mutation.ActorType(); ok {
		_spec.SetField(changeactor.FieldActorType, field.TypeString, value)
	}
	_spec.Node.Schema = cauo.schemaConfig.ChangeActor
	ctx = internal.NewSchemaConfigContext(ctx, cauo.schemaConfig)
	_spec.AddModifiers(cauo.modifiers...)
	_node = &ChangeActor{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changeactor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
