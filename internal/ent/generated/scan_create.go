// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/pkg/enums"
)

// ScanCreate is the builder for creating a Scan entity.
type ScanCreate struct {
	config
	mutation *ScanMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScanCreate) SetCreatedAt(t time.Time) *ScanCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScanCreate) SetNillableCreatedAt(t *time.Time) *ScanCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ScanCreate) SetUpdatedAt(t time.Time) *ScanCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ScanCreate) SetNillableUpdatedAt(t *time.Time) *ScanCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *ScanCreate) SetCreatedBy(s string) *ScanCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *ScanCreate) SetNillableCreatedBy(s *string) *ScanCreate {
	if s != nil {
		sc.SetCreatedBy(*s)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *ScanCreate) SetUpdatedBy(s string) *ScanCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *ScanCreate) SetNillableUpdatedBy(s *string) *ScanCreate {
	if s != nil {
		sc.SetUpdatedBy(*s)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *ScanCreate) SetDeletedAt(t time.Time) *ScanCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *ScanCreate) SetNillableDeletedAt(t *time.Time) *ScanCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetDeletedBy sets the "deleted_by" field.
func (sc *ScanCreate) SetDeletedBy(s string) *ScanCreate {
	sc.mutation.SetDeletedBy(s)
	return sc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sc *ScanCreate) SetNillableDeletedBy(s *string) *ScanCreate {
	if s != nil {
		sc.SetDeletedBy(*s)
	}
	return sc
}

// SetTags sets the "tags" field.
func (sc *ScanCreate) SetTags(s []string) *ScanCreate {
	sc.mutation.SetTags(s)
	return sc
}

// SetOwnerID sets the "owner_id" field.
func (sc *ScanCreate) SetOwnerID(s string) *ScanCreate {
	sc.mutation.SetOwnerID(s)
	return sc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sc *ScanCreate) SetNillableOwnerID(s *string) *ScanCreate {
	if s != nil {
		sc.SetOwnerID(*s)
	}
	return sc
}

// SetTarget sets the "target" field.
func (sc *ScanCreate) SetTarget(s string) *ScanCreate {
	sc.mutation.SetTarget(s)
	return sc
}

// SetScanType sets the "scan_type" field.
func (sc *ScanCreate) SetScanType(et enums.ScanType) *ScanCreate {
	sc.mutation.SetScanType(et)
	return sc
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (sc *ScanCreate) SetNillableScanType(et *enums.ScanType) *ScanCreate {
	if et != nil {
		sc.SetScanType(*et)
	}
	return sc
}

// SetMetadata sets the "metadata" field.
func (sc *ScanCreate) SetMetadata(m map[string]interface{}) *ScanCreate {
	sc.mutation.SetMetadata(m)
	return sc
}

// SetStatus sets the "status" field.
func (sc *ScanCreate) SetStatus(es enums.ScanStatus) *ScanCreate {
	sc.mutation.SetStatus(es)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *ScanCreate) SetNillableStatus(es *enums.ScanStatus) *ScanCreate {
	if es != nil {
		sc.SetStatus(*es)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScanCreate) SetID(s string) *ScanCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScanCreate) SetNillableID(s *string) *ScanCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (sc *ScanCreate) SetOwner(o *Organization) *ScanCreate {
	return sc.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (sc *ScanCreate) AddBlockedGroupIDs(ids ...string) *ScanCreate {
	sc.mutation.AddBlockedGroupIDs(ids...)
	return sc
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (sc *ScanCreate) AddBlockedGroups(g ...*Group) *ScanCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sc.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (sc *ScanCreate) AddEditorIDs(ids ...string) *ScanCreate {
	sc.mutation.AddEditorIDs(ids...)
	return sc
}

// AddEditors adds the "editors" edges to the Group entity.
func (sc *ScanCreate) AddEditors(g ...*Group) *ScanCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sc.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (sc *ScanCreate) AddViewerIDs(ids ...string) *ScanCreate {
	sc.mutation.AddViewerIDs(ids...)
	return sc
}

// AddViewers adds the "viewers" edges to the Group entity.
func (sc *ScanCreate) AddViewers(g ...*Group) *ScanCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sc.AddViewerIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (sc *ScanCreate) AddAssetIDs(ids ...string) *ScanCreate {
	sc.mutation.AddAssetIDs(ids...)
	return sc
}

// AddAssets adds the "assets" edges to the Asset entity.
func (sc *ScanCreate) AddAssets(a ...*Asset) *ScanCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddAssetIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (sc *ScanCreate) AddEntityIDs(ids ...string) *ScanCreate {
	sc.mutation.AddEntityIDs(ids...)
	return sc
}

// AddEntities adds the "entities" edges to the Entity entity.
func (sc *ScanCreate) AddEntities(e ...*Entity) *ScanCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEntityIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (sc *ScanCreate) Mutation() *ScanMutation {
	return sc.mutation
}

// Save creates the Scan in the database.
func (sc *ScanCreate) Save(ctx context.Context) (*Scan, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScanCreate) SaveX(ctx context.Context) *Scan {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScanCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScanCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScanCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if scan.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized scan.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := scan.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if scan.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scan.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scan.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Tags(); !ok {
		v := scan.DefaultTags
		sc.mutation.SetTags(v)
	}
	if _, ok := sc.mutation.ScanType(); !ok {
		v := scan.DefaultScanType
		sc.mutation.SetScanType(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := scan.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if scan.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized scan.DefaultID (forgotten import generated/runtime?)")
		}
		v := scan.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScanCreate) check() error {
	if v, ok := sc.mutation.OwnerID(); ok {
		if err := scan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Scan.owner_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Target(); !ok {
		return &ValidationError{Name: "target", err: errors.New(`generated: missing required field "Scan.target"`)}
	}
	if v, ok := sc.mutation.Target(); ok {
		if err := scan.TargetValidator(v); err != nil {
			return &ValidationError{Name: "target", err: fmt.Errorf(`generated: validator failed for field "Scan.target": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ScanType(); !ok {
		return &ValidationError{Name: "scan_type", err: errors.New(`generated: missing required field "Scan.scan_type"`)}
	}
	if v, ok := sc.mutation.ScanType(); ok {
		if err := scan.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`generated: validator failed for field "Scan.scan_type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Scan.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := scan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Scan.status": %w`, err)}
		}
	}
	return nil
}

func (sc *ScanCreate) sqlSave(ctx context.Context) (*Scan, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Scan.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScanCreate) createSpec() (*Scan, *sqlgraph.CreateSpec) {
	var (
		_node = &Scan{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(scan.Table, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString))
	)
	_spec.Schema = sc.schemaConfig.Scan
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(scan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(scan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(scan.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(scan.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(scan.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.DeletedBy(); ok {
		_spec.SetField(scan.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.SetField(scan.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := sc.mutation.Target(); ok {
		_spec.SetField(scan.FieldTarget, field.TypeString, value)
		_node.Target = value
	}
	if value, ok := sc.mutation.ScanType(); ok {
		_spec.SetField(scan.FieldScanType, field.TypeEnum, value)
		_node.ScanType = value
	}
	if value, ok := sc.mutation.Metadata(); ok {
		_spec.SetField(scan.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(scan.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScanCreateBulk is the builder for creating many Scan entities in bulk.
type ScanCreateBulk struct {
	config
	err      error
	builders []*ScanCreate
}

// Save creates the Scan entities in the database.
func (scb *ScanCreateBulk) Save(ctx context.Context) ([]*Scan, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scan, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScanCreateBulk) SaveX(ctx context.Context) []*Scan {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScanCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScanCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
