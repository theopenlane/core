// Code generated by ent, DO NOT EDIT.

package orgprice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldDeletedBy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldOwnerID, v))
}

// StripePriceID applies equality check predicate on the "stripe_price_id" field. It's identical to StripePriceIDEQ.
func StripePriceID(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldStripePriceID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldStatus, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldActive, v))
}

// TrialExpiresAt applies equality check predicate on the "trial_expires_at" field. It's identical to TrialExpiresAtEQ.
func TrialExpiresAt(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldTrialExpiresAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldExpiresAt, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldProductID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContainsFold(FieldOwnerID, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldPrice))
}

// StripePriceIDEQ applies the EQ predicate on the "stripe_price_id" field.
func StripePriceIDEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldStripePriceID, v))
}

// StripePriceIDNEQ applies the NEQ predicate on the "stripe_price_id" field.
func StripePriceIDNEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldStripePriceID, v))
}

// StripePriceIDIn applies the In predicate on the "stripe_price_id" field.
func StripePriceIDIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldStripePriceID, vs...))
}

// StripePriceIDNotIn applies the NotIn predicate on the "stripe_price_id" field.
func StripePriceIDNotIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldStripePriceID, vs...))
}

// StripePriceIDGT applies the GT predicate on the "stripe_price_id" field.
func StripePriceIDGT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldStripePriceID, v))
}

// StripePriceIDGTE applies the GTE predicate on the "stripe_price_id" field.
func StripePriceIDGTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldStripePriceID, v))
}

// StripePriceIDLT applies the LT predicate on the "stripe_price_id" field.
func StripePriceIDLT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldStripePriceID, v))
}

// StripePriceIDLTE applies the LTE predicate on the "stripe_price_id" field.
func StripePriceIDLTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldStripePriceID, v))
}

// StripePriceIDContains applies the Contains predicate on the "stripe_price_id" field.
func StripePriceIDContains(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContains(FieldStripePriceID, v))
}

// StripePriceIDHasPrefix applies the HasPrefix predicate on the "stripe_price_id" field.
func StripePriceIDHasPrefix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasPrefix(FieldStripePriceID, v))
}

// StripePriceIDHasSuffix applies the HasSuffix predicate on the "stripe_price_id" field.
func StripePriceIDHasSuffix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasSuffix(FieldStripePriceID, v))
}

// StripePriceIDIsNil applies the IsNil predicate on the "stripe_price_id" field.
func StripePriceIDIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldStripePriceID))
}

// StripePriceIDNotNil applies the NotNil predicate on the "stripe_price_id" field.
func StripePriceIDNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldStripePriceID))
}

// StripePriceIDEqualFold applies the EqualFold predicate on the "stripe_price_id" field.
func StripePriceIDEqualFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEqualFold(FieldStripePriceID, v))
}

// StripePriceIDContainsFold applies the ContainsFold predicate on the "stripe_price_id" field.
func StripePriceIDContainsFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContainsFold(FieldStripePriceID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContainsFold(FieldStatus, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldActive, v))
}

// TrialExpiresAtEQ applies the EQ predicate on the "trial_expires_at" field.
func TrialExpiresAtEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldTrialExpiresAt, v))
}

// TrialExpiresAtNEQ applies the NEQ predicate on the "trial_expires_at" field.
func TrialExpiresAtNEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldTrialExpiresAt, v))
}

// TrialExpiresAtIn applies the In predicate on the "trial_expires_at" field.
func TrialExpiresAtIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldTrialExpiresAt, vs...))
}

// TrialExpiresAtNotIn applies the NotIn predicate on the "trial_expires_at" field.
func TrialExpiresAtNotIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldTrialExpiresAt, vs...))
}

// TrialExpiresAtGT applies the GT predicate on the "trial_expires_at" field.
func TrialExpiresAtGT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldTrialExpiresAt, v))
}

// TrialExpiresAtGTE applies the GTE predicate on the "trial_expires_at" field.
func TrialExpiresAtGTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldTrialExpiresAt, v))
}

// TrialExpiresAtLT applies the LT predicate on the "trial_expires_at" field.
func TrialExpiresAtLT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldTrialExpiresAt, v))
}

// TrialExpiresAtLTE applies the LTE predicate on the "trial_expires_at" field.
func TrialExpiresAtLTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldTrialExpiresAt, v))
}

// TrialExpiresAtIsNil applies the IsNil predicate on the "trial_expires_at" field.
func TrialExpiresAtIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldTrialExpiresAt))
}

// TrialExpiresAtNotNil applies the NotNil predicate on the "trial_expires_at" field.
func TrialExpiresAtNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldTrialExpiresAt))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldExpiresAt))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldNotNull(FieldProductID))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.OrgPrice {
	return predicate.OrgPrice(sql.FieldContainsFold(FieldProductID, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.OrgPrice {
	return predicate.OrgPrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgPrice
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.OrgPrice {
	return predicate.OrgPrice(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgPrice
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgProduct applies the HasEdge predicate on the "org_product" edge.
func HasOrgProduct() predicate.OrgPrice {
	return predicate.OrgPrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrgProductTable, OrgProductColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgProduct
		step.Edge.Schema = schemaConfig.OrgPrice
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgProductWith applies the HasEdge predicate on the "org_product" edge with a given conditions (other predicates).
func HasOrgProductWith(preds ...predicate.OrgProduct) predicate.OrgPrice {
	return predicate.OrgPrice(func(s *sql.Selector) {
		step := newOrgProductStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgProduct
		step.Edge.Schema = schemaConfig.OrgPrice
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrgPrice) predicate.OrgPrice {
	return predicate.OrgPrice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrgPrice) predicate.OrgPrice {
	return predicate.OrgPrice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrgPrice) predicate.OrgPrice {
	return predicate.OrgPrice(sql.NotPredicates(p))
}
