// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// EntitlementPlan is the model entity for the EntitlementPlan schema.
type EntitlementPlan struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the displayed 'friendly' name of the plan
	DisplayName string `json:"display_name,omitempty"`
	// the unique name of the plan
	Name string `json:"name,omitempty"`
	// a description of the plan
	Description string `json:"description,omitempty"`
	// the version of the plan
	Version string `json:"version,omitempty"`
	// metadata for the plan
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntitlementPlanQuery when eager-loading is set.
	Edges        EntitlementPlanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EntitlementPlanEdges holds the relations/edges for other nodes in the graph.
type EntitlementPlanEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Entitlements holds the value of the entitlements edge.
	Entitlements []*Entitlement `json:"entitlements,omitempty"`
	// BaseFeatures holds the value of the base_features edge.
	BaseFeatures []*Feature `json:"base_features,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Features holds the value of the features edge.
	Features []*EntitlementPlanFeature `json:"features,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedEntitlements map[string][]*Entitlement
	namedBaseFeatures map[string][]*Feature
	namedEvents       map[string][]*Event
	namedFeatures     map[string][]*EntitlementPlanFeature
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitlementPlanEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// EntitlementsOrErr returns the Entitlements value or an error if the edge
// was not loaded in eager-loading.
func (e EntitlementPlanEdges) EntitlementsOrErr() ([]*Entitlement, error) {
	if e.loadedTypes[1] {
		return e.Entitlements, nil
	}
	return nil, &NotLoadedError{edge: "entitlements"}
}

// BaseFeaturesOrErr returns the BaseFeatures value or an error if the edge
// was not loaded in eager-loading.
func (e EntitlementPlanEdges) BaseFeaturesOrErr() ([]*Feature, error) {
	if e.loadedTypes[2] {
		return e.BaseFeatures, nil
	}
	return nil, &NotLoadedError{edge: "base_features"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e EntitlementPlanEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[3] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading.
func (e EntitlementPlanEdges) FeaturesOrErr() ([]*EntitlementPlanFeature, error) {
	if e.loadedTypes[4] {
		return e.Features, nil
	}
	return nil, &NotLoadedError{edge: "features"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntitlementPlan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entitlementplan.FieldTags, entitlementplan.FieldMetadata:
			values[i] = new([]byte)
		case entitlementplan.FieldID, entitlementplan.FieldCreatedBy, entitlementplan.FieldUpdatedBy, entitlementplan.FieldMappingID, entitlementplan.FieldDeletedBy, entitlementplan.FieldOwnerID, entitlementplan.FieldDisplayName, entitlementplan.FieldName, entitlementplan.FieldDescription, entitlementplan.FieldVersion:
			values[i] = new(sql.NullString)
		case entitlementplan.FieldCreatedAt, entitlementplan.FieldUpdatedAt, entitlementplan.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntitlementPlan fields.
func (ep *EntitlementPlan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entitlementplan.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ep.ID = value.String
			}
		case entitlementplan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ep.CreatedAt = value.Time
			}
		case entitlementplan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ep.UpdatedAt = value.Time
			}
		case entitlementplan.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ep.CreatedBy = value.String
			}
		case entitlementplan.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ep.UpdatedBy = value.String
			}
		case entitlementplan.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				ep.MappingID = value.String
			}
		case entitlementplan.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ep.DeletedAt = value.Time
			}
		case entitlementplan.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ep.DeletedBy = value.String
			}
		case entitlementplan.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ep.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case entitlementplan.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				ep.OwnerID = value.String
			}
		case entitlementplan.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				ep.DisplayName = value.String
			}
		case entitlementplan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ep.Name = value.String
			}
		case entitlementplan.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ep.Description = value.String
			}
		case entitlementplan.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ep.Version = value.String
			}
		case entitlementplan.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ep.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntitlementPlan.
// This includes values selected through modifiers, order, etc.
func (ep *EntitlementPlan) Value(name string) (ent.Value, error) {
	return ep.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the EntitlementPlan entity.
func (ep *EntitlementPlan) QueryOwner() *OrganizationQuery {
	return NewEntitlementPlanClient(ep.config).QueryOwner(ep)
}

// QueryEntitlements queries the "entitlements" edge of the EntitlementPlan entity.
func (ep *EntitlementPlan) QueryEntitlements() *EntitlementQuery {
	return NewEntitlementPlanClient(ep.config).QueryEntitlements(ep)
}

// QueryBaseFeatures queries the "base_features" edge of the EntitlementPlan entity.
func (ep *EntitlementPlan) QueryBaseFeatures() *FeatureQuery {
	return NewEntitlementPlanClient(ep.config).QueryBaseFeatures(ep)
}

// QueryEvents queries the "events" edge of the EntitlementPlan entity.
func (ep *EntitlementPlan) QueryEvents() *EventQuery {
	return NewEntitlementPlanClient(ep.config).QueryEvents(ep)
}

// QueryFeatures queries the "features" edge of the EntitlementPlan entity.
func (ep *EntitlementPlan) QueryFeatures() *EntitlementPlanFeatureQuery {
	return NewEntitlementPlanClient(ep.config).QueryFeatures(ep)
}

// Update returns a builder for updating this EntitlementPlan.
// Note that you need to call EntitlementPlan.Unwrap() before calling this method if this EntitlementPlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *EntitlementPlan) Update() *EntitlementPlanUpdateOne {
	return NewEntitlementPlanClient(ep.config).UpdateOne(ep)
}

// Unwrap unwraps the EntitlementPlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *EntitlementPlan) Unwrap() *EntitlementPlan {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("generated: EntitlementPlan is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *EntitlementPlan) String() string {
	var builder strings.Builder
	builder.WriteString("EntitlementPlan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ep.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ep.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ep.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ep.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(ep.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ep.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ep.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ep.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(ep.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(ep.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ep.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ep.Description)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ep.Version)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ep.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEntitlements returns the Entitlements named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ep *EntitlementPlan) NamedEntitlements(name string) ([]*Entitlement, error) {
	if ep.Edges.namedEntitlements == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ep.Edges.namedEntitlements[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ep *EntitlementPlan) appendNamedEntitlements(name string, edges ...*Entitlement) {
	if ep.Edges.namedEntitlements == nil {
		ep.Edges.namedEntitlements = make(map[string][]*Entitlement)
	}
	if len(edges) == 0 {
		ep.Edges.namedEntitlements[name] = []*Entitlement{}
	} else {
		ep.Edges.namedEntitlements[name] = append(ep.Edges.namedEntitlements[name], edges...)
	}
}

// NamedBaseFeatures returns the BaseFeatures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ep *EntitlementPlan) NamedBaseFeatures(name string) ([]*Feature, error) {
	if ep.Edges.namedBaseFeatures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ep.Edges.namedBaseFeatures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ep *EntitlementPlan) appendNamedBaseFeatures(name string, edges ...*Feature) {
	if ep.Edges.namedBaseFeatures == nil {
		ep.Edges.namedBaseFeatures = make(map[string][]*Feature)
	}
	if len(edges) == 0 {
		ep.Edges.namedBaseFeatures[name] = []*Feature{}
	} else {
		ep.Edges.namedBaseFeatures[name] = append(ep.Edges.namedBaseFeatures[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ep *EntitlementPlan) NamedEvents(name string) ([]*Event, error) {
	if ep.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ep.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ep *EntitlementPlan) appendNamedEvents(name string, edges ...*Event) {
	if ep.Edges.namedEvents == nil {
		ep.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		ep.Edges.namedEvents[name] = []*Event{}
	} else {
		ep.Edges.namedEvents[name] = append(ep.Edges.namedEvents[name], edges...)
	}
}

// NamedFeatures returns the Features named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ep *EntitlementPlan) NamedFeatures(name string) ([]*EntitlementPlanFeature, error) {
	if ep.Edges.namedFeatures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ep.Edges.namedFeatures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ep *EntitlementPlan) appendNamedFeatures(name string, edges ...*EntitlementPlanFeature) {
	if ep.Edges.namedFeatures == nil {
		ep.Edges.namedFeatures = make(map[string][]*EntitlementPlanFeature)
	}
	if len(edges) == 0 {
		ep.Edges.namedFeatures[name] = []*EntitlementPlanFeature{}
	} else {
		ep.Edges.namedFeatures[name] = append(ep.Edges.namedFeatures[name], edges...)
	}
}

// EntitlementPlans is a parsable slice of EntitlementPlan.
type EntitlementPlans []*EntitlementPlan
