// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessorhistory"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterSubprocessorHistoryUpdate is the builder for updating TrustCenterSubprocessorHistory entities.
type TrustCenterSubprocessorHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterSubprocessorHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterSubprocessorHistoryUpdate builder.
func (_u *TrustCenterSubprocessorHistoryUpdate) Where(ps ...predicate.TrustCenterSubprocessorHistory) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetUpdatedAt(v time.Time) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) ClearUpdatedAt() *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetUpdatedBy(v string) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetNillableUpdatedBy(v *string) *TrustCenterSubprocessorHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) ClearUpdatedBy() *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetDeletedAt(v time.Time) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetNillableDeletedAt(v *time.Time) *TrustCenterSubprocessorHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) ClearDeletedAt() *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetDeletedBy(v string) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetNillableDeletedBy(v *string) *TrustCenterSubprocessorHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) ClearDeletedBy() *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetSubprocessorID sets the "subprocessor_id" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetSubprocessorID(v string) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.SetSubprocessorID(v)
	return _u
}

// SetNillableSubprocessorID sets the "subprocessor_id" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetNillableSubprocessorID(v *string) *TrustCenterSubprocessorHistoryUpdate {
	if v != nil {
		_u.SetSubprocessorID(*v)
	}
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetTrustCenterID(v string) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetNillableTrustCenterID(v *string) *TrustCenterSubprocessorHistoryUpdate {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) ClearTrustCenterID() *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetCountries sets the "countries" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetCountries(v []string) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.SetCountries(v)
	return _u
}

// AppendCountries appends value to the "countries" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) AppendCountries(v []string) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.AppendCountries(v)
	return _u
}

// ClearCountries clears the value of the "countries" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) ClearCountries() *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.ClearCountries()
	return _u
}

// SetCategory sets the "category" field.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetCategory(v string) *TrustCenterSubprocessorHistoryUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdate) SetNillableCategory(v *string) *TrustCenterSubprocessorHistoryUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// Mutation returns the TrustCenterSubprocessorHistoryMutation object of the builder.
func (_u *TrustCenterSubprocessorHistoryUpdate) Mutation() *TrustCenterSubprocessorHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustCenterSubprocessorHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterSubprocessorHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustCenterSubprocessorHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterSubprocessorHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterSubprocessorHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentersubprocessorhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersubprocessorhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersubprocessorhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterSubprocessorHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSubprocessorHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterSubprocessorHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(trustcentersubprocessorhistory.Table, trustcentersubprocessorhistory.Columns, sqlgraph.NewFieldSpec(trustcentersubprocessorhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.SubprocessorID(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldSubprocessorID, field.TypeString, value)
	}
	if value, ok := _u.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldTrustCenterID, field.TypeString, value)
	}
	if _u.mutation.TrustCenterIDCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldTrustCenterID, field.TypeString)
	}
	if value, ok := _u.mutation.Countries(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldCountries, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCountries(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentersubprocessorhistory.FieldCountries, value)
		})
	}
	if _u.mutation.CountriesCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldCountries, field.TypeJSON)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldCategory, field.TypeString, value)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterSubprocessorHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersubprocessorhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustCenterSubprocessorHistoryUpdateOne is the builder for updating a single TrustCenterSubprocessorHistory entity.
type TrustCenterSubprocessorHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterSubprocessorHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetUpdatedAt(v time.Time) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) ClearUpdatedAt() *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetUpdatedBy(v string) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetNillableUpdatedBy(v *string) *TrustCenterSubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) ClearUpdatedBy() *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetDeletedAt(v time.Time) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *TrustCenterSubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) ClearDeletedAt() *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetDeletedBy(v string) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetNillableDeletedBy(v *string) *TrustCenterSubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) ClearDeletedBy() *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetSubprocessorID sets the "subprocessor_id" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetSubprocessorID(v string) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.SetSubprocessorID(v)
	return _u
}

// SetNillableSubprocessorID sets the "subprocessor_id" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetNillableSubprocessorID(v *string) *TrustCenterSubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetSubprocessorID(*v)
	}
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetTrustCenterID(v string) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetNillableTrustCenterID(v *string) *TrustCenterSubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) ClearTrustCenterID() *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetCountries sets the "countries" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetCountries(v []string) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.SetCountries(v)
	return _u
}

// AppendCountries appends value to the "countries" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) AppendCountries(v []string) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.AppendCountries(v)
	return _u
}

// ClearCountries clears the value of the "countries" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) ClearCountries() *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.ClearCountries()
	return _u
}

// SetCategory sets the "category" field.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetCategory(v string) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SetNillableCategory(v *string) *TrustCenterSubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// Mutation returns the TrustCenterSubprocessorHistoryMutation object of the builder.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) Mutation() *TrustCenterSubprocessorHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the TrustCenterSubprocessorHistoryUpdate builder.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) Where(ps ...predicate.TrustCenterSubprocessorHistory) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) Select(field string, fields ...string) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustCenterSubprocessorHistory entity.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) Save(ctx context.Context) (*TrustCenterSubprocessorHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) SaveX(ctx context.Context) *TrustCenterSubprocessorHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentersubprocessorhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersubprocessorhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersubprocessorhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterSubprocessorHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSubprocessorHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterSubprocessorHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterSubprocessorHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(trustcentersubprocessorhistory.Table, trustcentersubprocessorhistory.Columns, sqlgraph.NewFieldSpec(trustcentersubprocessorhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterSubprocessorHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentersubprocessorhistory.FieldID)
		for _, f := range fields {
			if !trustcentersubprocessorhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentersubprocessorhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.SubprocessorID(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldSubprocessorID, field.TypeString, value)
	}
	if value, ok := _u.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldTrustCenterID, field.TypeString, value)
	}
	if _u.mutation.TrustCenterIDCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldTrustCenterID, field.TypeString)
	}
	if value, ok := _u.mutation.Countries(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldCountries, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCountries(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentersubprocessorhistory.FieldCountries, value)
		})
	}
	if _u.mutation.CountriesCleared() {
		_spec.ClearField(trustcentersubprocessorhistory.FieldCountries, field.TypeJSON)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldCategory, field.TypeString, value)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterSubprocessorHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TrustCenterSubprocessorHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersubprocessorhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
