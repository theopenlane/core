// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterhistory"
	"github.com/theopenlane/entx/history"
)

// TrustCenterHistory is the model entity for the TrustCenterHistory schema.
type TrustCenterHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// Slug for the trust center
	Slug string `json:"slug,omitempty"`
	// custom domain id for the trust center
	CustomDomainID string `json:"custom_domain_id,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcenterhistory.FieldTags:
			values[i] = new([]byte)
		case trustcenterhistory.FieldOperation:
			values[i] = new(history.OpType)
		case trustcenterhistory.FieldID, trustcenterhistory.FieldRef, trustcenterhistory.FieldCreatedBy, trustcenterhistory.FieldUpdatedBy, trustcenterhistory.FieldDeletedBy, trustcenterhistory.FieldOwnerID, trustcenterhistory.FieldSlug, trustcenterhistory.FieldCustomDomainID:
			values[i] = new(sql.NullString)
		case trustcenterhistory.FieldHistoryTime, trustcenterhistory.FieldCreatedAt, trustcenterhistory.FieldUpdatedAt, trustcenterhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterHistory fields.
func (tch *TrustCenterHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcenterhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tch.ID = value.String
			}
		case trustcenterhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				tch.HistoryTime = value.Time
			}
		case trustcenterhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				tch.Ref = value.String
			}
		case trustcenterhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				tch.Operation = *value
			}
		case trustcenterhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tch.CreatedAt = value.Time
			}
		case trustcenterhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tch.UpdatedAt = value.Time
			}
		case trustcenterhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tch.CreatedBy = value.String
			}
		case trustcenterhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tch.UpdatedBy = value.String
			}
		case trustcenterhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tch.DeletedAt = value.Time
			}
		case trustcenterhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				tch.DeletedBy = value.String
			}
		case trustcenterhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tch.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case trustcenterhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				tch.OwnerID = value.String
			}
		case trustcenterhistory.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				tch.Slug = value.String
			}
		case trustcenterhistory.FieldCustomDomainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_domain_id", values[i])
			} else if value.Valid {
				tch.CustomDomainID = value.String
			}
		default:
			tch.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterHistory.
// This includes values selected through modifiers, order, etc.
func (tch *TrustCenterHistory) Value(name string) (ent.Value, error) {
	return tch.selectValues.Get(name)
}

// Update returns a builder for updating this TrustCenterHistory.
// Note that you need to call TrustCenterHistory.Unwrap() before calling this method if this TrustCenterHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (tch *TrustCenterHistory) Update() *TrustCenterHistoryUpdateOne {
	return NewTrustCenterHistoryClient(tch.config).UpdateOne(tch)
}

// Unwrap unwraps the TrustCenterHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tch *TrustCenterHistory) Unwrap() *TrustCenterHistory {
	_tx, ok := tch.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterHistory is not a transactional entity")
	}
	tch.config.driver = _tx.drv
	return tch
}

// String implements the fmt.Stringer.
func (tch *TrustCenterHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tch.ID))
	builder.WriteString("history_time=")
	builder.WriteString(tch.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(tch.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", tch.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tch.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tch.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tch.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tch.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tch.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(tch.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", tch.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(tch.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(tch.Slug)
	builder.WriteString(", ")
	builder.WriteString("custom_domain_id=")
	builder.WriteString(tch.CustomDomainID)
	builder.WriteByte(')')
	return builder.String()
}

// TrustCenterHistories is a parsable slice of TrustCenterHistory.
type TrustCenterHistories []*TrustCenterHistory
