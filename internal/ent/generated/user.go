// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/pkg/enums"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// The user's displayed 'friendly' name
	DisplayName string `json:"display_name,omitempty"`
	// URL of the user's remote avatar
	AvatarRemoteURL *string `json:"avatar_remote_url,omitempty"`
	// The user's local avatar file id, takes precedence over the avatar remote URL
	AvatarLocalFileID *string `json:"avatar_local_file_id,omitempty"`
	// The time the user's (local) avatar was last updated
	AvatarUpdatedAt *time.Time `json:"avatar_updated_at,omitempty"`
	// the time the user was last seen
	LastSeen *time.Time `json:"last_seen,omitempty"`
	// the last auth provider used to login
	LastLoginProvider enums.AuthProvider `json:"last_login_provider,omitempty"`
	// user password hash
	Password *string `json:"-"`
	// the Subject of the user JWT
	Sub string `json:"sub,omitempty"`
	// auth provider used to register the account
	AuthProvider enums.AuthProvider `json:"auth_provider,omitempty"`
	// the user's role
	Role enums.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// PersonalAccessTokens holds the value of the personal_access_tokens edge.
	PersonalAccessTokens []*PersonalAccessToken `json:"personal_access_tokens,omitempty"`
	// TfaSettings holds the value of the tfa_settings edge.
	TfaSettings []*TFASetting `json:"tfa_settings,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *UserSetting `json:"setting,omitempty"`
	// EmailVerificationTokens holds the value of the email_verification_tokens edge.
	EmailVerificationTokens []*EmailVerificationToken `json:"email_verification_tokens,omitempty"`
	// PasswordResetTokens holds the value of the password_reset_tokens edge.
	PasswordResetTokens []*PasswordResetToken `json:"password_reset_tokens,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Organizations holds the value of the organizations edge.
	Organizations []*Organization `json:"organizations,omitempty"`
	// Webauthns holds the value of the webauthns edge.
	Webauthns []*Webauthn `json:"webauthns,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// AvatarFile holds the value of the avatar_file edge.
	AvatarFile *File `json:"avatar_file,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// ActionPlans holds the value of the action_plans edge.
	ActionPlans []*ActionPlan `json:"action_plans,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// AssignerTasks holds the value of the assigner_tasks edge.
	AssignerTasks []*Task `json:"assigner_tasks,omitempty"`
	// AssigneeTasks holds the value of the assignee_tasks edge.
	AssigneeTasks []*Task `json:"assignee_tasks,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// GroupMemberships holds the value of the group_memberships edge.
	GroupMemberships []*GroupMembership `json:"group_memberships,omitempty"`
	// OrgMemberships holds the value of the org_memberships edge.
	OrgMemberships []*OrgMembership `json:"org_memberships,omitempty"`
	// ProgramMemberships holds the value of the program_memberships edge.
	ProgramMemberships []*ProgramMembership `json:"program_memberships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [19]bool
	// totalCount holds the count of the edges above.
	totalCount [17]map[string]int

	namedPersonalAccessTokens    map[string][]*PersonalAccessToken
	namedTfaSettings             map[string][]*TFASetting
	namedEmailVerificationTokens map[string][]*EmailVerificationToken
	namedPasswordResetTokens     map[string][]*PasswordResetToken
	namedGroups                  map[string][]*Group
	namedOrganizations           map[string][]*Organization
	namedWebauthns               map[string][]*Webauthn
	namedFiles                   map[string][]*File
	namedEvents                  map[string][]*Event
	namedActionPlans             map[string][]*ActionPlan
	namedSubcontrols             map[string][]*Subcontrol
	namedAssignerTasks           map[string][]*Task
	namedAssigneeTasks           map[string][]*Task
	namedPrograms                map[string][]*Program
	namedGroupMemberships        map[string][]*GroupMembership
	namedOrgMemberships          map[string][]*OrgMembership
	namedProgramMemberships      map[string][]*ProgramMembership
}

// PersonalAccessTokensOrErr returns the PersonalAccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PersonalAccessTokensOrErr() ([]*PersonalAccessToken, error) {
	if e.loadedTypes[0] {
		return e.PersonalAccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "personal_access_tokens"}
}

// TfaSettingsOrErr returns the TfaSettings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TfaSettingsOrErr() ([]*TFASetting, error) {
	if e.loadedTypes[1] {
		return e.TfaSettings, nil
	}
	return nil, &NotLoadedError{edge: "tfa_settings"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SettingOrErr() (*UserSetting, error) {
	if e.Setting != nil {
		return e.Setting, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: usersetting.Label}
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// EmailVerificationTokensOrErr returns the EmailVerificationTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EmailVerificationTokensOrErr() ([]*EmailVerificationToken, error) {
	if e.loadedTypes[3] {
		return e.EmailVerificationTokens, nil
	}
	return nil, &NotLoadedError{edge: "email_verification_tokens"}
}

// PasswordResetTokensOrErr returns the PasswordResetTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PasswordResetTokensOrErr() ([]*PasswordResetToken, error) {
	if e.loadedTypes[4] {
		return e.PasswordResetTokens, nil
	}
	return nil, &NotLoadedError{edge: "password_reset_tokens"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[5] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// OrganizationsOrErr returns the Organizations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OrganizationsOrErr() ([]*Organization, error) {
	if e.loadedTypes[6] {
		return e.Organizations, nil
	}
	return nil, &NotLoadedError{edge: "organizations"}
}

// WebauthnsOrErr returns the Webauthns value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) WebauthnsOrErr() ([]*Webauthn, error) {
	if e.loadedTypes[7] {
		return e.Webauthns, nil
	}
	return nil, &NotLoadedError{edge: "webauthns"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[8] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// AvatarFileOrErr returns the AvatarFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) AvatarFileOrErr() (*File, error) {
	if e.AvatarFile != nil {
		return e.AvatarFile, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "avatar_file"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[10] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// ActionPlansOrErr returns the ActionPlans value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActionPlansOrErr() ([]*ActionPlan, error) {
	if e.loadedTypes[11] {
		return e.ActionPlans, nil
	}
	return nil, &NotLoadedError{edge: "action_plans"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[12] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// AssignerTasksOrErr returns the AssignerTasks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AssignerTasksOrErr() ([]*Task, error) {
	if e.loadedTypes[13] {
		return e.AssignerTasks, nil
	}
	return nil, &NotLoadedError{edge: "assigner_tasks"}
}

// AssigneeTasksOrErr returns the AssigneeTasks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AssigneeTasksOrErr() ([]*Task, error) {
	if e.loadedTypes[14] {
		return e.AssigneeTasks, nil
	}
	return nil, &NotLoadedError{edge: "assignee_tasks"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[15] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// GroupMembershipsOrErr returns the GroupMemberships value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupMembershipsOrErr() ([]*GroupMembership, error) {
	if e.loadedTypes[16] {
		return e.GroupMemberships, nil
	}
	return nil, &NotLoadedError{edge: "group_memberships"}
}

// OrgMembershipsOrErr returns the OrgMemberships value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OrgMembershipsOrErr() ([]*OrgMembership, error) {
	if e.loadedTypes[17] {
		return e.OrgMemberships, nil
	}
	return nil, &NotLoadedError{edge: "org_memberships"}
}

// ProgramMembershipsOrErr returns the ProgramMemberships value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProgramMembershipsOrErr() ([]*ProgramMembership, error) {
	if e.loadedTypes[18] {
		return e.ProgramMemberships, nil
	}
	return nil, &NotLoadedError{edge: "program_memberships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldTags:
			values[i] = new([]byte)
		case user.FieldID, user.FieldCreatedBy, user.FieldUpdatedBy, user.FieldDeletedBy, user.FieldDisplayID, user.FieldEmail, user.FieldFirstName, user.FieldLastName, user.FieldDisplayName, user.FieldAvatarRemoteURL, user.FieldAvatarLocalFileID, user.FieldLastLoginProvider, user.FieldPassword, user.FieldSub, user.FieldAuthProvider, user.FieldRole:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt, user.FieldAvatarUpdatedAt, user.FieldLastSeen:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case user.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case user.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case user.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case user.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				_m.DisplayID = value.String
			}
		case user.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				_m.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				_m.LastName = value.String
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				_m.DisplayName = value.String
			}
		case user.FieldAvatarRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_remote_url", values[i])
			} else if value.Valid {
				_m.AvatarRemoteURL = new(string)
				*_m.AvatarRemoteURL = value.String
			}
		case user.FieldAvatarLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_local_file_id", values[i])
			} else if value.Valid {
				_m.AvatarLocalFileID = new(string)
				*_m.AvatarLocalFileID = value.String
			}
		case user.FieldAvatarUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_updated_at", values[i])
			} else if value.Valid {
				_m.AvatarUpdatedAt = new(time.Time)
				*_m.AvatarUpdatedAt = value.Time
			}
		case user.FieldLastSeen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen", values[i])
			} else if value.Valid {
				_m.LastSeen = new(time.Time)
				*_m.LastSeen = value.Time
			}
		case user.FieldLastLoginProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_provider", values[i])
			} else if value.Valid {
				_m.LastLoginProvider = enums.AuthProvider(value.String)
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				_m.Password = new(string)
				*_m.Password = value.String
			}
		case user.FieldSub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub", values[i])
			} else if value.Valid {
				_m.Sub = value.String
			}
		case user.FieldAuthProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_provider", values[i])
			} else if value.Valid {
				_m.AuthProvider = enums.AuthProvider(value.String)
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				_m.Role = enums.Role(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPersonalAccessTokens queries the "personal_access_tokens" edge of the User entity.
func (_m *User) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	return NewUserClient(_m.config).QueryPersonalAccessTokens(_m)
}

// QueryTfaSettings queries the "tfa_settings" edge of the User entity.
func (_m *User) QueryTfaSettings() *TFASettingQuery {
	return NewUserClient(_m.config).QueryTfaSettings(_m)
}

// QuerySetting queries the "setting" edge of the User entity.
func (_m *User) QuerySetting() *UserSettingQuery {
	return NewUserClient(_m.config).QuerySetting(_m)
}

// QueryEmailVerificationTokens queries the "email_verification_tokens" edge of the User entity.
func (_m *User) QueryEmailVerificationTokens() *EmailVerificationTokenQuery {
	return NewUserClient(_m.config).QueryEmailVerificationTokens(_m)
}

// QueryPasswordResetTokens queries the "password_reset_tokens" edge of the User entity.
func (_m *User) QueryPasswordResetTokens() *PasswordResetTokenQuery {
	return NewUserClient(_m.config).QueryPasswordResetTokens(_m)
}

// QueryGroups queries the "groups" edge of the User entity.
func (_m *User) QueryGroups() *GroupQuery {
	return NewUserClient(_m.config).QueryGroups(_m)
}

// QueryOrganizations queries the "organizations" edge of the User entity.
func (_m *User) QueryOrganizations() *OrganizationQuery {
	return NewUserClient(_m.config).QueryOrganizations(_m)
}

// QueryWebauthns queries the "webauthns" edge of the User entity.
func (_m *User) QueryWebauthns() *WebauthnQuery {
	return NewUserClient(_m.config).QueryWebauthns(_m)
}

// QueryFiles queries the "files" edge of the User entity.
func (_m *User) QueryFiles() *FileQuery {
	return NewUserClient(_m.config).QueryFiles(_m)
}

// QueryAvatarFile queries the "avatar_file" edge of the User entity.
func (_m *User) QueryAvatarFile() *FileQuery {
	return NewUserClient(_m.config).QueryAvatarFile(_m)
}

// QueryEvents queries the "events" edge of the User entity.
func (_m *User) QueryEvents() *EventQuery {
	return NewUserClient(_m.config).QueryEvents(_m)
}

// QueryActionPlans queries the "action_plans" edge of the User entity.
func (_m *User) QueryActionPlans() *ActionPlanQuery {
	return NewUserClient(_m.config).QueryActionPlans(_m)
}

// QuerySubcontrols queries the "subcontrols" edge of the User entity.
func (_m *User) QuerySubcontrols() *SubcontrolQuery {
	return NewUserClient(_m.config).QuerySubcontrols(_m)
}

// QueryAssignerTasks queries the "assigner_tasks" edge of the User entity.
func (_m *User) QueryAssignerTasks() *TaskQuery {
	return NewUserClient(_m.config).QueryAssignerTasks(_m)
}

// QueryAssigneeTasks queries the "assignee_tasks" edge of the User entity.
func (_m *User) QueryAssigneeTasks() *TaskQuery {
	return NewUserClient(_m.config).QueryAssigneeTasks(_m)
}

// QueryPrograms queries the "programs" edge of the User entity.
func (_m *User) QueryPrograms() *ProgramQuery {
	return NewUserClient(_m.config).QueryPrograms(_m)
}

// QueryGroupMemberships queries the "group_memberships" edge of the User entity.
func (_m *User) QueryGroupMemberships() *GroupMembershipQuery {
	return NewUserClient(_m.config).QueryGroupMemberships(_m)
}

// QueryOrgMemberships queries the "org_memberships" edge of the User entity.
func (_m *User) QueryOrgMemberships() *OrgMembershipQuery {
	return NewUserClient(_m.config).QueryOrgMemberships(_m)
}

// QueryProgramMemberships queries the "program_memberships" edge of the User entity.
func (_m *User) QueryProgramMemberships() *ProgramMembershipQuery {
	return NewUserClient(_m.config).QueryProgramMemberships(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(_m.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(_m.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(_m.LastName)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(_m.DisplayName)
	builder.WriteString(", ")
	if v := _m.AvatarRemoteURL; v != nil {
		builder.WriteString("avatar_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.AvatarLocalFileID; v != nil {
		builder.WriteString("avatar_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.AvatarUpdatedAt; v != nil {
		builder.WriteString("avatar_updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.LastSeen; v != nil {
		builder.WriteString("last_seen=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("last_login_provider=")
	builder.WriteString(fmt.Sprintf("%v", _m.LastLoginProvider))
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("sub=")
	builder.WriteString(_m.Sub)
	builder.WriteString(", ")
	builder.WriteString("auth_provider=")
	builder.WriteString(fmt.Sprintf("%v", _m.AuthProvider))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", _m.Role))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPersonalAccessTokens returns the PersonalAccessTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedPersonalAccessTokens(name string) ([]*PersonalAccessToken, error) {
	if _m.Edges.namedPersonalAccessTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPersonalAccessTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedPersonalAccessTokens(name string, edges ...*PersonalAccessToken) {
	if _m.Edges.namedPersonalAccessTokens == nil {
		_m.Edges.namedPersonalAccessTokens = make(map[string][]*PersonalAccessToken)
	}
	if len(edges) == 0 {
		_m.Edges.namedPersonalAccessTokens[name] = []*PersonalAccessToken{}
	} else {
		_m.Edges.namedPersonalAccessTokens[name] = append(_m.Edges.namedPersonalAccessTokens[name], edges...)
	}
}

// NamedTfaSettings returns the TfaSettings named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedTfaSettings(name string) ([]*TFASetting, error) {
	if _m.Edges.namedTfaSettings == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTfaSettings[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedTfaSettings(name string, edges ...*TFASetting) {
	if _m.Edges.namedTfaSettings == nil {
		_m.Edges.namedTfaSettings = make(map[string][]*TFASetting)
	}
	if len(edges) == 0 {
		_m.Edges.namedTfaSettings[name] = []*TFASetting{}
	} else {
		_m.Edges.namedTfaSettings[name] = append(_m.Edges.namedTfaSettings[name], edges...)
	}
}

// NamedEmailVerificationTokens returns the EmailVerificationTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedEmailVerificationTokens(name string) ([]*EmailVerificationToken, error) {
	if _m.Edges.namedEmailVerificationTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEmailVerificationTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedEmailVerificationTokens(name string, edges ...*EmailVerificationToken) {
	if _m.Edges.namedEmailVerificationTokens == nil {
		_m.Edges.namedEmailVerificationTokens = make(map[string][]*EmailVerificationToken)
	}
	if len(edges) == 0 {
		_m.Edges.namedEmailVerificationTokens[name] = []*EmailVerificationToken{}
	} else {
		_m.Edges.namedEmailVerificationTokens[name] = append(_m.Edges.namedEmailVerificationTokens[name], edges...)
	}
}

// NamedPasswordResetTokens returns the PasswordResetTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedPasswordResetTokens(name string) ([]*PasswordResetToken, error) {
	if _m.Edges.namedPasswordResetTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPasswordResetTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedPasswordResetTokens(name string, edges ...*PasswordResetToken) {
	if _m.Edges.namedPasswordResetTokens == nil {
		_m.Edges.namedPasswordResetTokens = make(map[string][]*PasswordResetToken)
	}
	if len(edges) == 0 {
		_m.Edges.namedPasswordResetTokens[name] = []*PasswordResetToken{}
	} else {
		_m.Edges.namedPasswordResetTokens[name] = append(_m.Edges.namedPasswordResetTokens[name], edges...)
	}
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedGroups(name string) ([]*Group, error) {
	if _m.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedGroups(name string, edges ...*Group) {
	if _m.Edges.namedGroups == nil {
		_m.Edges.namedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedGroups[name] = []*Group{}
	} else {
		_m.Edges.namedGroups[name] = append(_m.Edges.namedGroups[name], edges...)
	}
}

// NamedOrganizations returns the Organizations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedOrganizations(name string) ([]*Organization, error) {
	if _m.Edges.namedOrganizations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOrganizations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedOrganizations(name string, edges ...*Organization) {
	if _m.Edges.namedOrganizations == nil {
		_m.Edges.namedOrganizations = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		_m.Edges.namedOrganizations[name] = []*Organization{}
	} else {
		_m.Edges.namedOrganizations[name] = append(_m.Edges.namedOrganizations[name], edges...)
	}
}

// NamedWebauthns returns the Webauthns named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedWebauthns(name string) ([]*Webauthn, error) {
	if _m.Edges.namedWebauthns == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedWebauthns[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedWebauthns(name string, edges ...*Webauthn) {
	if _m.Edges.namedWebauthns == nil {
		_m.Edges.namedWebauthns = make(map[string][]*Webauthn)
	}
	if len(edges) == 0 {
		_m.Edges.namedWebauthns[name] = []*Webauthn{}
	} else {
		_m.Edges.namedWebauthns[name] = append(_m.Edges.namedWebauthns[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedFiles(name string) ([]*File, error) {
	if _m.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedFiles(name string, edges ...*File) {
	if _m.Edges.namedFiles == nil {
		_m.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		_m.Edges.namedFiles[name] = []*File{}
	} else {
		_m.Edges.namedFiles[name] = append(_m.Edges.namedFiles[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedEvents(name string) ([]*Event, error) {
	if _m.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedEvents(name string, edges ...*Event) {
	if _m.Edges.namedEvents == nil {
		_m.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		_m.Edges.namedEvents[name] = []*Event{}
	} else {
		_m.Edges.namedEvents[name] = append(_m.Edges.namedEvents[name], edges...)
	}
}

// NamedActionPlans returns the ActionPlans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedActionPlans(name string) ([]*ActionPlan, error) {
	if _m.Edges.namedActionPlans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedActionPlans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedActionPlans(name string, edges ...*ActionPlan) {
	if _m.Edges.namedActionPlans == nil {
		_m.Edges.namedActionPlans = make(map[string][]*ActionPlan)
	}
	if len(edges) == 0 {
		_m.Edges.namedActionPlans[name] = []*ActionPlan{}
	} else {
		_m.Edges.namedActionPlans[name] = append(_m.Edges.namedActionPlans[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if _m.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if _m.Edges.namedSubcontrols == nil {
		_m.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		_m.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		_m.Edges.namedSubcontrols[name] = append(_m.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedAssignerTasks returns the AssignerTasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedAssignerTasks(name string) ([]*Task, error) {
	if _m.Edges.namedAssignerTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedAssignerTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedAssignerTasks(name string, edges ...*Task) {
	if _m.Edges.namedAssignerTasks == nil {
		_m.Edges.namedAssignerTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		_m.Edges.namedAssignerTasks[name] = []*Task{}
	} else {
		_m.Edges.namedAssignerTasks[name] = append(_m.Edges.namedAssignerTasks[name], edges...)
	}
}

// NamedAssigneeTasks returns the AssigneeTasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedAssigneeTasks(name string) ([]*Task, error) {
	if _m.Edges.namedAssigneeTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedAssigneeTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedAssigneeTasks(name string, edges ...*Task) {
	if _m.Edges.namedAssigneeTasks == nil {
		_m.Edges.namedAssigneeTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		_m.Edges.namedAssigneeTasks[name] = []*Task{}
	} else {
		_m.Edges.namedAssigneeTasks[name] = append(_m.Edges.namedAssigneeTasks[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedPrograms(name string) ([]*Program, error) {
	if _m.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedPrograms(name string, edges ...*Program) {
	if _m.Edges.namedPrograms == nil {
		_m.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		_m.Edges.namedPrograms[name] = []*Program{}
	} else {
		_m.Edges.namedPrograms[name] = append(_m.Edges.namedPrograms[name], edges...)
	}
}

// NamedGroupMemberships returns the GroupMemberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedGroupMemberships(name string) ([]*GroupMembership, error) {
	if _m.Edges.namedGroupMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedGroupMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedGroupMemberships(name string, edges ...*GroupMembership) {
	if _m.Edges.namedGroupMemberships == nil {
		_m.Edges.namedGroupMemberships = make(map[string][]*GroupMembership)
	}
	if len(edges) == 0 {
		_m.Edges.namedGroupMemberships[name] = []*GroupMembership{}
	} else {
		_m.Edges.namedGroupMemberships[name] = append(_m.Edges.namedGroupMemberships[name], edges...)
	}
}

// NamedOrgMemberships returns the OrgMemberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedOrgMemberships(name string) ([]*OrgMembership, error) {
	if _m.Edges.namedOrgMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOrgMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedOrgMemberships(name string, edges ...*OrgMembership) {
	if _m.Edges.namedOrgMemberships == nil {
		_m.Edges.namedOrgMemberships = make(map[string][]*OrgMembership)
	}
	if len(edges) == 0 {
		_m.Edges.namedOrgMemberships[name] = []*OrgMembership{}
	} else {
		_m.Edges.namedOrgMemberships[name] = append(_m.Edges.namedOrgMemberships[name], edges...)
	}
}

// NamedProgramMemberships returns the ProgramMemberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedProgramMemberships(name string) ([]*ProgramMembership, error) {
	if _m.Edges.namedProgramMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedProgramMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedProgramMemberships(name string, edges ...*ProgramMembership) {
	if _m.Edges.namedProgramMemberships == nil {
		_m.Edges.namedProgramMemberships = make(map[string][]*ProgramMembership)
	}
	if len(edges) == 0 {
		_m.Edges.namedProgramMemberships[name] = []*ProgramMembership{}
	} else {
		_m.Edges.namedProgramMemberships[name] = append(_m.Edges.namedProgramMemberships[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
