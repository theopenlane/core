// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/emailverificationtoken"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/passwordresettoken"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/ent/generated/webauthn"
	"github.com/theopenlane/core/pkg/enums"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *UserCreate) SetCreatedBy(v string) *UserCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedBy(v *string) *UserCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *UserCreate) SetUpdatedBy(v string) *UserCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedBy(v *string) *UserCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *UserCreate) SetDeletedAt(v time.Time) *UserCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableDeletedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *UserCreate) SetDeletedBy(v string) *UserCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *UserCreate) SetNillableDeletedBy(v *string) *UserCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *UserCreate) SetDisplayID(v string) *UserCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *UserCreate) SetTags(v []string) *UserCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetFirstName sets the "first_name" field.
func (_c *UserCreate) SetFirstName(v string) *UserCreate {
	_c.mutation.SetFirstName(v)
	return _c
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableFirstName(v *string) *UserCreate {
	if v != nil {
		_c.SetFirstName(*v)
	}
	return _c
}

// SetLastName sets the "last_name" field.
func (_c *UserCreate) SetLastName(v string) *UserCreate {
	_c.mutation.SetLastName(v)
	return _c
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastName(v *string) *UserCreate {
	if v != nil {
		_c.SetLastName(*v)
	}
	return _c
}

// SetDisplayName sets the "display_name" field.
func (_c *UserCreate) SetDisplayName(v string) *UserCreate {
	_c.mutation.SetDisplayName(v)
	return _c
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (_c *UserCreate) SetAvatarRemoteURL(v string) *UserCreate {
	_c.mutation.SetAvatarRemoteURL(v)
	return _c
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatarRemoteURL(v *string) *UserCreate {
	if v != nil {
		_c.SetAvatarRemoteURL(*v)
	}
	return _c
}

// SetAvatarLocalFileID sets the "avatar_local_file_id" field.
func (_c *UserCreate) SetAvatarLocalFileID(v string) *UserCreate {
	_c.mutation.SetAvatarLocalFileID(v)
	return _c
}

// SetNillableAvatarLocalFileID sets the "avatar_local_file_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatarLocalFileID(v *string) *UserCreate {
	if v != nil {
		_c.SetAvatarLocalFileID(*v)
	}
	return _c
}

// SetAvatarUpdatedAt sets the "avatar_updated_at" field.
func (_c *UserCreate) SetAvatarUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetAvatarUpdatedAt(v)
	return _c
}

// SetNillableAvatarUpdatedAt sets the "avatar_updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatarUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetAvatarUpdatedAt(*v)
	}
	return _c
}

// SetLastSeen sets the "last_seen" field.
func (_c *UserCreate) SetLastSeen(v time.Time) *UserCreate {
	_c.mutation.SetLastSeen(v)
	return _c
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastSeen(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLastSeen(*v)
	}
	return _c
}

// SetLastLoginProvider sets the "last_login_provider" field.
func (_c *UserCreate) SetLastLoginProvider(v enums.AuthProvider) *UserCreate {
	_c.mutation.SetLastLoginProvider(v)
	return _c
}

// SetNillableLastLoginProvider sets the "last_login_provider" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastLoginProvider(v *enums.AuthProvider) *UserCreate {
	if v != nil {
		_c.SetLastLoginProvider(*v)
	}
	return _c
}

// SetPassword sets the "password" field.
func (_c *UserCreate) SetPassword(v string) *UserCreate {
	_c.mutation.SetPassword(v)
	return _c
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_c *UserCreate) SetNillablePassword(v *string) *UserCreate {
	if v != nil {
		_c.SetPassword(*v)
	}
	return _c
}

// SetSub sets the "sub" field.
func (_c *UserCreate) SetSub(v string) *UserCreate {
	_c.mutation.SetSub(v)
	return _c
}

// SetNillableSub sets the "sub" field if the given value is not nil.
func (_c *UserCreate) SetNillableSub(v *string) *UserCreate {
	if v != nil {
		_c.SetSub(*v)
	}
	return _c
}

// SetAuthProvider sets the "auth_provider" field.
func (_c *UserCreate) SetAuthProvider(v enums.AuthProvider) *UserCreate {
	_c.mutation.SetAuthProvider(v)
	return _c
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (_c *UserCreate) SetNillableAuthProvider(v *enums.AuthProvider) *UserCreate {
	if v != nil {
		_c.SetAuthProvider(*v)
	}
	return _c
}

// SetRole sets the "role" field.
func (_c *UserCreate) SetRole(v enums.Role) *UserCreate {
	_c.mutation.SetRole(v)
	return _c
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_c *UserCreate) SetNillableRole(v *enums.Role) *UserCreate {
	if v != nil {
		_c.SetRole(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *UserCreate) SetID(v string) *UserCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *UserCreate) SetNillableID(v *string) *UserCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (_c *UserCreate) AddPersonalAccessTokenIDs(ids ...string) *UserCreate {
	_c.mutation.AddPersonalAccessTokenIDs(ids...)
	return _c
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_c *UserCreate) AddPersonalAccessTokens(v ...*PersonalAccessToken) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPersonalAccessTokenIDs(ids...)
}

// AddTfaSettingIDs adds the "tfa_settings" edge to the TFASetting entity by IDs.
func (_c *UserCreate) AddTfaSettingIDs(ids ...string) *UserCreate {
	_c.mutation.AddTfaSettingIDs(ids...)
	return _c
}

// AddTfaSettings adds the "tfa_settings" edges to the TFASetting entity.
func (_c *UserCreate) AddTfaSettings(v ...*TFASetting) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTfaSettingIDs(ids...)
}

// SetSettingID sets the "setting" edge to the UserSetting entity by ID.
func (_c *UserCreate) SetSettingID(id string) *UserCreate {
	_c.mutation.SetSettingID(id)
	return _c
}

// SetSetting sets the "setting" edge to the UserSetting entity.
func (_c *UserCreate) SetSetting(v *UserSetting) *UserCreate {
	return _c.SetSettingID(v.ID)
}

// AddEmailVerificationTokenIDs adds the "email_verification_tokens" edge to the EmailVerificationToken entity by IDs.
func (_c *UserCreate) AddEmailVerificationTokenIDs(ids ...string) *UserCreate {
	_c.mutation.AddEmailVerificationTokenIDs(ids...)
	return _c
}

// AddEmailVerificationTokens adds the "email_verification_tokens" edges to the EmailVerificationToken entity.
func (_c *UserCreate) AddEmailVerificationTokens(v ...*EmailVerificationToken) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEmailVerificationTokenIDs(ids...)
}

// AddPasswordResetTokenIDs adds the "password_reset_tokens" edge to the PasswordResetToken entity by IDs.
func (_c *UserCreate) AddPasswordResetTokenIDs(ids ...string) *UserCreate {
	_c.mutation.AddPasswordResetTokenIDs(ids...)
	return _c
}

// AddPasswordResetTokens adds the "password_reset_tokens" edges to the PasswordResetToken entity.
func (_c *UserCreate) AddPasswordResetTokens(v ...*PasswordResetToken) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPasswordResetTokenIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_c *UserCreate) AddGroupIDs(ids ...string) *UserCreate {
	_c.mutation.AddGroupIDs(ids...)
	return _c
}

// AddGroups adds the "groups" edges to the Group entity.
func (_c *UserCreate) AddGroups(v ...*Group) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGroupIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (_c *UserCreate) AddOrganizationIDs(ids ...string) *UserCreate {
	_c.mutation.AddOrganizationIDs(ids...)
	return _c
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (_c *UserCreate) AddOrganizations(v ...*Organization) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrganizationIDs(ids...)
}

// AddWebauthnIDs adds the "webauthns" edge to the Webauthn entity by IDs.
func (_c *UserCreate) AddWebauthnIDs(ids ...string) *UserCreate {
	_c.mutation.AddWebauthnIDs(ids...)
	return _c
}

// AddWebauthns adds the "webauthns" edges to the Webauthn entity.
func (_c *UserCreate) AddWebauthns(v ...*Webauthn) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddWebauthnIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_c *UserCreate) AddFileIDs(ids ...string) *UserCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the File entity.
func (_c *UserCreate) AddFiles(v ...*File) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// SetAvatarFileID sets the "avatar_file" edge to the File entity by ID.
func (_c *UserCreate) SetAvatarFileID(id string) *UserCreate {
	_c.mutation.SetAvatarFileID(id)
	return _c
}

// SetNillableAvatarFileID sets the "avatar_file" edge to the File entity by ID if the given value is not nil.
func (_c *UserCreate) SetNillableAvatarFileID(id *string) *UserCreate {
	if id != nil {
		_c = _c.SetAvatarFileID(*id)
	}
	return _c
}

// SetAvatarFile sets the "avatar_file" edge to the File entity.
func (_c *UserCreate) SetAvatarFile(v *File) *UserCreate {
	return _c.SetAvatarFileID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_c *UserCreate) AddEventIDs(ids ...string) *UserCreate {
	_c.mutation.AddEventIDs(ids...)
	return _c
}

// AddEvents adds the "events" edges to the Event entity.
func (_c *UserCreate) AddEvents(v ...*Event) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_c *UserCreate) AddActionPlanIDs(ids ...string) *UserCreate {
	_c.mutation.AddActionPlanIDs(ids...)
	return _c
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_c *UserCreate) AddActionPlans(v ...*ActionPlan) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddActionPlanIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_c *UserCreate) AddSubcontrolIDs(ids ...string) *UserCreate {
	_c.mutation.AddSubcontrolIDs(ids...)
	return _c
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_c *UserCreate) AddSubcontrols(v ...*Subcontrol) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubcontrolIDs(ids...)
}

// AddAssignerTaskIDs adds the "assigner_tasks" edge to the Task entity by IDs.
func (_c *UserCreate) AddAssignerTaskIDs(ids ...string) *UserCreate {
	_c.mutation.AddAssignerTaskIDs(ids...)
	return _c
}

// AddAssignerTasks adds the "assigner_tasks" edges to the Task entity.
func (_c *UserCreate) AddAssignerTasks(v ...*Task) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAssignerTaskIDs(ids...)
}

// AddAssigneeTaskIDs adds the "assignee_tasks" edge to the Task entity by IDs.
func (_c *UserCreate) AddAssigneeTaskIDs(ids ...string) *UserCreate {
	_c.mutation.AddAssigneeTaskIDs(ids...)
	return _c
}

// AddAssigneeTasks adds the "assignee_tasks" edges to the Task entity.
func (_c *UserCreate) AddAssigneeTasks(v ...*Task) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAssigneeTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_c *UserCreate) AddProgramIDs(ids ...string) *UserCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_c *UserCreate) AddPrograms(v ...*Program) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by IDs.
func (_c *UserCreate) AddGroupMembershipIDs(ids ...string) *UserCreate {
	_c.mutation.AddGroupMembershipIDs(ids...)
	return _c
}

// AddGroupMemberships adds the "group_memberships" edges to the GroupMembership entity.
func (_c *UserCreate) AddGroupMemberships(v ...*GroupMembership) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGroupMembershipIDs(ids...)
}

// AddOrgMembershipIDs adds the "org_memberships" edge to the OrgMembership entity by IDs.
func (_c *UserCreate) AddOrgMembershipIDs(ids ...string) *UserCreate {
	_c.mutation.AddOrgMembershipIDs(ids...)
	return _c
}

// AddOrgMemberships adds the "org_memberships" edges to the OrgMembership entity.
func (_c *UserCreate) AddOrgMemberships(v ...*OrgMembership) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrgMembershipIDs(ids...)
}

// AddProgramMembershipIDs adds the "program_memberships" edge to the ProgramMembership entity by IDs.
func (_c *UserCreate) AddProgramMembershipIDs(ids ...string) *UserCreate {
	_c.mutation.AddProgramMembershipIDs(ids...)
	return _c
}

// AddProgramMemberships adds the "program_memberships" edges to the ProgramMembership entity.
func (_c *UserCreate) AddProgramMemberships(v ...*ProgramMembership) *UserCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramMembershipIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if user.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if user.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := user.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := user.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.AvatarUpdatedAt(); !ok {
		if user.DefaultAvatarUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.DefaultAvatarUpdatedAt (forgotten import generated/runtime?)")
		}
		v := user.DefaultAvatarUpdatedAt()
		_c.mutation.SetAvatarUpdatedAt(v)
	}
	if _, ok := _c.mutation.AuthProvider(); !ok {
		v := user.DefaultAuthProvider
		_c.mutation.SetAuthProvider(v)
	}
	if _, ok := _c.mutation.Role(); !ok {
		v := user.DefaultRole
		_c.mutation.SetRole(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if user.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized user.DefaultID (forgotten import generated/runtime?)")
		}
		v := user.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "User.display_id"`)}
	}
	if v, ok := _c.mutation.DisplayID(); ok {
		if err := user.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "User.display_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`generated: missing required field "User.email"`)}
	}
	if v, ok := _c.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _c.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`generated: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`generated: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "User.display_name"`)}
	}
	if v, ok := _c.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "User.display_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.AvatarRemoteURL(); ok {
		if err := user.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "User.avatar_remote_url": %w`, err)}
		}
	}
	if v, ok := _c.mutation.LastLoginProvider(); ok {
		if err := user.LastLoginProviderValidator(v); err != nil {
			return &ValidationError{Name: "last_login_provider", err: fmt.Errorf(`generated: validator failed for field "User.last_login_provider": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AuthProvider(); !ok {
		return &ValidationError{Name: "auth_provider", err: errors.New(`generated: missing required field "User.auth_provider"`)}
	}
	if v, ok := _c.mutation.AuthProvider(); ok {
		if err := user.AuthProviderValidator(v); err != nil {
			return &ValidationError{Name: "auth_provider", err: fmt.Errorf(`generated: validator failed for field "User.auth_provider": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "User.role": %w`, err)}
		}
	}
	if len(_c.mutation.SettingIDs()) == 0 {
		return &ValidationError{Name: "setting", err: errors.New(`generated: missing required edge "User.setting"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected User.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.User
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(user.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(user.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := _c.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := _c.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := _c.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(user.FieldAvatarRemoteURL, field.TypeString, value)
		_node.AvatarRemoteURL = &value
	}
	if value, ok := _c.mutation.AvatarUpdatedAt(); ok {
		_spec.SetField(user.FieldAvatarUpdatedAt, field.TypeTime, value)
		_node.AvatarUpdatedAt = &value
	}
	if value, ok := _c.mutation.LastSeen(); ok {
		_spec.SetField(user.FieldLastSeen, field.TypeTime, value)
		_node.LastSeen = &value
	}
	if value, ok := _c.mutation.LastLoginProvider(); ok {
		_spec.SetField(user.FieldLastLoginProvider, field.TypeEnum, value)
		_node.LastLoginProvider = value
	}
	if value, ok := _c.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = &value
	}
	if value, ok := _c.mutation.Sub(); ok {
		_spec.SetField(user.FieldSub, field.TypeString, value)
		_node.Sub = value
	}
	if value, ok := _c.mutation.AuthProvider(); ok {
		_spec.SetField(user.FieldAuthProvider, field.TypeEnum, value)
		_node.AuthProvider = value
	}
	if value, ok := _c.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if nodes := _c.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.PersonalAccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TfaSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TfaSettingsTable,
			Columns: []string{user.TfaSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tfasetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TFASetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EmailVerificationTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EmailVerificationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PasswordResetTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.PasswordResetToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: _c.config, mutation: newGroupMembershipMutation(_c.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: _c.config, mutation: newOrgMembershipMutation(_c.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.WebauthnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnsTable,
			Columns: []string{user.WebauthnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Webauthn
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: user.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AvatarFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.AvatarFileTable,
			Columns: []string{user.AvatarFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AvatarLocalFileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActionPlansTable,
			Columns: []string{user.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubcontrolsTable,
			Columns: []string{user.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssignerTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignerTasksTable,
			Columns: []string{user.AssignerTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssigneeTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssigneeTasksTable,
			Columns: []string{user.AssigneeTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ProgramsTable,
			Columns: user.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProgramMembershipCreate{config: _c.config, mutation: newProgramMembershipMutation(_c.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GroupMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrgMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ProgramMembershipsTable,
			Columns: []string{user.ProgramMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
