// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/templateresponder"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssessmentQuery is the builder for querying Assessment entities.
type AssessmentQuery struct {
	config
	ctx                          *QueryContext
	order                        []assessment.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.Assessment
	withOwner                    *OrganizationQuery
	withBlockedGroups            *GroupQuery
	withEditors                  *GroupQuery
	withViewers                  *GroupQuery
	withTemplate                 *TemplateQuery
	withUsers                    *UserQuery
	withAssessments              *AssessmentQuery
	withAssessmentResponses      *AssessmentResponseQuery
	withTemplateResponders       *TemplateResponderQuery
	loadTotal                    []func(context.Context, []*Assessment) error
	modifiers                    []func(*sql.Selector)
	withNamedBlockedGroups       map[string]*GroupQuery
	withNamedEditors             map[string]*GroupQuery
	withNamedViewers             map[string]*GroupQuery
	withNamedUsers               map[string]*UserQuery
	withNamedAssessments         map[string]*AssessmentQuery
	withNamedAssessmentResponses map[string]*AssessmentResponseQuery
	withNamedTemplateResponders  map[string]*TemplateResponderQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssessmentQuery builder.
func (_q *AssessmentQuery) Where(ps ...predicate.Assessment) *AssessmentQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *AssessmentQuery) Limit(limit int) *AssessmentQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *AssessmentQuery) Offset(offset int) *AssessmentQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *AssessmentQuery) Unique(unique bool) *AssessmentQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *AssessmentQuery) Order(o ...assessment.OrderOption) *AssessmentQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryOwner chains the current query on the "owner" edge.
func (_q *AssessmentQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assessment.OwnerTable, assessment.OwnerColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Assessment
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedGroups chains the current query on the "blocked_groups" edge.
func (_q *AssessmentQuery) QueryBlockedGroups() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assessment.BlockedGroupsTable, assessment.BlockedGroupsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEditors chains the current query on the "editors" edge.
func (_q *AssessmentQuery) QueryEditors() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assessment.EditorsTable, assessment.EditorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryViewers chains the current query on the "viewers" edge.
func (_q *AssessmentQuery) QueryViewers() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assessment.ViewersTable, assessment.ViewersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplate chains the current query on the "template" edge.
func (_q *AssessmentQuery) QueryTemplate() *TemplateQuery {
	query := (&TemplateClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assessment.TemplateTable, assessment.TemplateColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.Assessment
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (_q *AssessmentQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assessment.UsersTable, assessment.UsersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssessments chains the current query on the "assessments" edge.
func (_q *AssessmentQuery) QueryAssessments() *AssessmentQuery {
	query := (&AssessmentClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(assessment.Table, assessment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, assessment.AssessmentsTable, assessment.AssessmentsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Assessment
		step.Edge.Schema = schemaConfig.AssessmentAssessments
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssessmentResponses chains the current query on the "assessment_responses" edge.
func (_q *AssessmentQuery) QueryAssessmentResponses() *AssessmentResponseQuery {
	query := (&AssessmentResponseClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(assessmentresponse.Table, assessmentresponse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assessment.AssessmentResponsesTable, assessment.AssessmentResponsesColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.AssessmentResponse
		step.Edge.Schema = schemaConfig.AssessmentResponse
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplateResponders chains the current query on the "template_responders" edge.
func (_q *AssessmentQuery) QueryTemplateResponders() *TemplateResponderQuery {
	query := (&TemplateResponderClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessment.Table, assessment.FieldID, selector),
			sqlgraph.To(templateresponder.Table, templateresponder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assessment.TemplateRespondersTable, assessment.TemplateRespondersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.TemplateResponder
		step.Edge.Schema = schemaConfig.TemplateResponder
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Assessment entity from the query.
// Returns a *NotFoundError when no Assessment was found.
func (_q *AssessmentQuery) First(ctx context.Context) (*Assessment, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assessment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *AssessmentQuery) FirstX(ctx context.Context) *Assessment {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Assessment ID from the query.
// Returns a *NotFoundError when no Assessment ID was found.
func (_q *AssessmentQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assessment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *AssessmentQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Assessment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Assessment entity is found.
// Returns a *NotFoundError when no Assessment entities are found.
func (_q *AssessmentQuery) Only(ctx context.Context) (*Assessment, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assessment.Label}
	default:
		return nil, &NotSingularError{assessment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *AssessmentQuery) OnlyX(ctx context.Context) *Assessment {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Assessment ID in the query.
// Returns a *NotSingularError when more than one Assessment ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *AssessmentQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assessment.Label}
	default:
		err = &NotSingularError{assessment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *AssessmentQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Assessments.
func (_q *AssessmentQuery) All(ctx context.Context) ([]*Assessment, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Assessment, *AssessmentQuery]()
	return withInterceptors[[]*Assessment](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *AssessmentQuery) AllX(ctx context.Context) []*Assessment {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Assessment IDs.
func (_q *AssessmentQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(assessment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *AssessmentQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *AssessmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*AssessmentQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *AssessmentQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *AssessmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *AssessmentQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssessmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *AssessmentQuery) Clone() *AssessmentQuery {
	if _q == nil {
		return nil
	}
	return &AssessmentQuery{
		config:                  _q.config,
		ctx:                     _q.ctx.Clone(),
		order:                   append([]assessment.OrderOption{}, _q.order...),
		inters:                  append([]Interceptor{}, _q.inters...),
		predicates:              append([]predicate.Assessment{}, _q.predicates...),
		withOwner:               _q.withOwner.Clone(),
		withBlockedGroups:       _q.withBlockedGroups.Clone(),
		withEditors:             _q.withEditors.Clone(),
		withViewers:             _q.withViewers.Clone(),
		withTemplate:            _q.withTemplate.Clone(),
		withUsers:               _q.withUsers.Clone(),
		withAssessments:         _q.withAssessments.Clone(),
		withAssessmentResponses: _q.withAssessmentResponses.Clone(),
		withTemplateResponders:  _q.withTemplateResponders.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithOwner(opts ...func(*OrganizationQuery)) *AssessmentQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOwner = query
	return _q
}

// WithBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithBlockedGroups(opts ...func(*GroupQuery)) *AssessmentQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBlockedGroups = query
	return _q
}

// WithEditors tells the query-builder to eager-load the nodes that are connected to
// the "editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithEditors(opts ...func(*GroupQuery)) *AssessmentQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEditors = query
	return _q
}

// WithViewers tells the query-builder to eager-load the nodes that are connected to
// the "viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithViewers(opts ...func(*GroupQuery)) *AssessmentQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withViewers = query
	return _q
}

// WithTemplate tells the query-builder to eager-load the nodes that are connected to
// the "template" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithTemplate(opts ...func(*TemplateQuery)) *AssessmentQuery {
	query := (&TemplateClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTemplate = query
	return _q
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithUsers(opts ...func(*UserQuery)) *AssessmentQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withUsers = query
	return _q
}

// WithAssessments tells the query-builder to eager-load the nodes that are connected to
// the "assessments" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithAssessments(opts ...func(*AssessmentQuery)) *AssessmentQuery {
	query := (&AssessmentClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAssessments = query
	return _q
}

// WithAssessmentResponses tells the query-builder to eager-load the nodes that are connected to
// the "assessment_responses" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithAssessmentResponses(opts ...func(*AssessmentResponseQuery)) *AssessmentQuery {
	query := (&AssessmentResponseClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAssessmentResponses = query
	return _q
}

// WithTemplateResponders tells the query-builder to eager-load the nodes that are connected to
// the "template_responders" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithTemplateResponders(opts ...func(*TemplateResponderQuery)) *AssessmentQuery {
	query := (&TemplateResponderClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTemplateResponders = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Assessment.Query().
//		GroupBy(assessment.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (_q *AssessmentQuery) GroupBy(field string, fields ...string) *AssessmentGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssessmentGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = assessment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Assessment.Query().
//		Select(assessment.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *AssessmentQuery) Select(fields ...string) *AssessmentSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &AssessmentSelect{AssessmentQuery: _q}
	sbuild.label = assessment.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssessmentSelect configured with the given aggregations.
func (_q *AssessmentQuery) Aggregate(fns ...AggregateFunc) *AssessmentSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *AssessmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !assessment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	if assessment.Policy == nil {
		return errors.New("generated: uninitialized assessment.Policy (forgotten import generated/runtime?)")
	}
	if err := assessment.Policy.EvalQuery(ctx, _q); err != nil {
		return err
	}
	return nil
}

func (_q *AssessmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Assessment, error) {
	var (
		nodes       = []*Assessment{}
		_spec       = _q.querySpec()
		loadedTypes = [9]bool{
			_q.withOwner != nil,
			_q.withBlockedGroups != nil,
			_q.withEditors != nil,
			_q.withViewers != nil,
			_q.withTemplate != nil,
			_q.withUsers != nil,
			_q.withAssessments != nil,
			_q.withAssessmentResponses != nil,
			_q.withTemplateResponders != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Assessment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Assessment{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = _q.schemaConfig.Assessment
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withOwner; query != nil {
		if err := _q.loadOwner(ctx, query, nodes, nil,
			func(n *Assessment, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withBlockedGroups; query != nil {
		if err := _q.loadBlockedGroups(ctx, query, nodes,
			func(n *Assessment) { n.Edges.BlockedGroups = []*Group{} },
			func(n *Assessment, e *Group) { n.Edges.BlockedGroups = append(n.Edges.BlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEditors; query != nil {
		if err := _q.loadEditors(ctx, query, nodes,
			func(n *Assessment) { n.Edges.Editors = []*Group{} },
			func(n *Assessment, e *Group) { n.Edges.Editors = append(n.Edges.Editors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withViewers; query != nil {
		if err := _q.loadViewers(ctx, query, nodes,
			func(n *Assessment) { n.Edges.Viewers = []*Group{} },
			func(n *Assessment, e *Group) { n.Edges.Viewers = append(n.Edges.Viewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTemplate; query != nil {
		if err := _q.loadTemplate(ctx, query, nodes, nil,
			func(n *Assessment, e *Template) { n.Edges.Template = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withUsers; query != nil {
		if err := _q.loadUsers(ctx, query, nodes,
			func(n *Assessment) { n.Edges.Users = []*User{} },
			func(n *Assessment, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAssessments; query != nil {
		if err := _q.loadAssessments(ctx, query, nodes,
			func(n *Assessment) { n.Edges.Assessments = []*Assessment{} },
			func(n *Assessment, e *Assessment) { n.Edges.Assessments = append(n.Edges.Assessments, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAssessmentResponses; query != nil {
		if err := _q.loadAssessmentResponses(ctx, query, nodes,
			func(n *Assessment) { n.Edges.AssessmentResponses = []*AssessmentResponse{} },
			func(n *Assessment, e *AssessmentResponse) {
				n.Edges.AssessmentResponses = append(n.Edges.AssessmentResponses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withTemplateResponders; query != nil {
		if err := _q.loadTemplateResponders(ctx, query, nodes,
			func(n *Assessment) { n.Edges.TemplateResponders = []*TemplateResponder{} },
			func(n *Assessment, e *TemplateResponder) {
				n.Edges.TemplateResponders = append(n.Edges.TemplateResponders, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedBlockedGroups {
		if err := _q.loadBlockedGroups(ctx, query, nodes,
			func(n *Assessment) { n.appendNamedBlockedGroups(name) },
			func(n *Assessment, e *Group) { n.appendNamedBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEditors {
		if err := _q.loadEditors(ctx, query, nodes,
			func(n *Assessment) { n.appendNamedEditors(name) },
			func(n *Assessment, e *Group) { n.appendNamedEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedViewers {
		if err := _q.loadViewers(ctx, query, nodes,
			func(n *Assessment) { n.appendNamedViewers(name) },
			func(n *Assessment, e *Group) { n.appendNamedViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedUsers {
		if err := _q.loadUsers(ctx, query, nodes,
			func(n *Assessment) { n.appendNamedUsers(name) },
			func(n *Assessment, e *User) { n.appendNamedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedAssessments {
		if err := _q.loadAssessments(ctx, query, nodes,
			func(n *Assessment) { n.appendNamedAssessments(name) },
			func(n *Assessment, e *Assessment) { n.appendNamedAssessments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedAssessmentResponses {
		if err := _q.loadAssessmentResponses(ctx, query, nodes,
			func(n *Assessment) { n.appendNamedAssessmentResponses(name) },
			func(n *Assessment, e *AssessmentResponse) { n.appendNamedAssessmentResponses(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTemplateResponders {
		if err := _q.loadTemplateResponders(ctx, query, nodes,
			func(n *Assessment) { n.appendNamedTemplateResponders(name) },
			func(n *Assessment, e *TemplateResponder) { n.appendNamedTemplateResponders(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *AssessmentQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Assessment)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *AssessmentQuery) loadBlockedGroups(ctx context.Context, query *GroupQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Assessment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(assessment.BlockedGroupsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.assessment_blocked_groups
		if fk == nil {
			return fmt.Errorf(`foreign-key "assessment_blocked_groups" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assessment_blocked_groups" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AssessmentQuery) loadEditors(ctx context.Context, query *GroupQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Assessment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(assessment.EditorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.assessment_editors
		if fk == nil {
			return fmt.Errorf(`foreign-key "assessment_editors" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assessment_editors" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AssessmentQuery) loadViewers(ctx context.Context, query *GroupQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Assessment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(assessment.ViewersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.assessment_viewers
		if fk == nil {
			return fmt.Errorf(`foreign-key "assessment_viewers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assessment_viewers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AssessmentQuery) loadTemplate(ctx context.Context, query *TemplateQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *Template)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Assessment)
	for i := range nodes {
		fk := nodes[i].TemplateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(template.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "template_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *AssessmentQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Assessment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(assessment.UsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.assessment_users
		if fk == nil {
			return fmt.Errorf(`foreign-key "assessment_users" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assessment_users" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AssessmentQuery) loadAssessments(ctx context.Context, query *AssessmentQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *Assessment)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Assessment)
	nids := make(map[string]map[*Assessment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(assessment.AssessmentsTable)
		joinT.Schema(_q.schemaConfig.AssessmentAssessments)
		s.Join(joinT).On(s.C(assessment.FieldID), joinT.C(assessment.AssessmentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(assessment.AssessmentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(assessment.AssessmentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Assessment]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Assessment](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "assessments" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *AssessmentQuery) loadAssessmentResponses(ctx context.Context, query *AssessmentResponseQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *AssessmentResponse)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Assessment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(assessmentresponse.FieldAssessmentID)
	}
	query.Where(predicate.AssessmentResponse(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(assessment.AssessmentResponsesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssessmentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assessment_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AssessmentQuery) loadTemplateResponders(ctx context.Context, query *TemplateResponderQuery, nodes []*Assessment, init func(*Assessment), assign func(*Assessment, *TemplateResponder)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Assessment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(templateresponder.FieldAssessmentID)
	}
	query.Where(predicate.TemplateResponder(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(assessment.TemplateRespondersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssessmentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assessment_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *AssessmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Schema = _q.schemaConfig.Assessment
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *AssessmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assessment.Table, assessment.Columns, sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assessment.FieldID)
		for i := range fields {
			if fields[i] != assessment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withOwner != nil {
			_spec.Node.AddColumnOnce(assessment.FieldOwnerID)
		}
		if _q.withTemplate != nil {
			_spec.Node.AddColumnOnce(assessment.FieldTemplateID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *AssessmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(assessment.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = assessment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(_q.schemaConfig.Assessment)
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *AssessmentQuery) Modify(modifiers ...func(s *sql.Selector)) *AssessmentSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// WithNamedBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithNamedBlockedGroups(name string, opts ...func(*GroupQuery)) *AssessmentQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedBlockedGroups == nil {
		_q.withNamedBlockedGroups = make(map[string]*GroupQuery)
	}
	_q.withNamedBlockedGroups[name] = query
	return _q
}

// WithNamedEditors tells the query-builder to eager-load the nodes that are connected to the "editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithNamedEditors(name string, opts ...func(*GroupQuery)) *AssessmentQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEditors == nil {
		_q.withNamedEditors = make(map[string]*GroupQuery)
	}
	_q.withNamedEditors[name] = query
	return _q
}

// WithNamedViewers tells the query-builder to eager-load the nodes that are connected to the "viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithNamedViewers(name string, opts ...func(*GroupQuery)) *AssessmentQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedViewers == nil {
		_q.withNamedViewers = make(map[string]*GroupQuery)
	}
	_q.withNamedViewers[name] = query
	return _q
}

// WithNamedUsers tells the query-builder to eager-load the nodes that are connected to the "users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithNamedUsers(name string, opts ...func(*UserQuery)) *AssessmentQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedUsers == nil {
		_q.withNamedUsers = make(map[string]*UserQuery)
	}
	_q.withNamedUsers[name] = query
	return _q
}

// WithNamedAssessments tells the query-builder to eager-load the nodes that are connected to the "assessments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithNamedAssessments(name string, opts ...func(*AssessmentQuery)) *AssessmentQuery {
	query := (&AssessmentClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedAssessments == nil {
		_q.withNamedAssessments = make(map[string]*AssessmentQuery)
	}
	_q.withNamedAssessments[name] = query
	return _q
}

// WithNamedAssessmentResponses tells the query-builder to eager-load the nodes that are connected to the "assessment_responses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithNamedAssessmentResponses(name string, opts ...func(*AssessmentResponseQuery)) *AssessmentQuery {
	query := (&AssessmentResponseClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedAssessmentResponses == nil {
		_q.withNamedAssessmentResponses = make(map[string]*AssessmentResponseQuery)
	}
	_q.withNamedAssessmentResponses[name] = query
	return _q
}

// WithNamedTemplateResponders tells the query-builder to eager-load the nodes that are connected to the "template_responders"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssessmentQuery) WithNamedTemplateResponders(name string, opts ...func(*TemplateResponderQuery)) *AssessmentQuery {
	query := (&TemplateResponderClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTemplateResponders == nil {
		_q.withNamedTemplateResponders = make(map[string]*TemplateResponderQuery)
	}
	_q.withNamedTemplateResponders[name] = query
	return _q
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (aq *AssessmentQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryIDs)
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return aq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, aq, qr, aq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// AssessmentGroupBy is the group-by builder for Assessment entities.
type AssessmentGroupBy struct {
	selector
	build *AssessmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *AssessmentGroupBy) Aggregate(fns ...AggregateFunc) *AssessmentGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *AssessmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssessmentQuery, *AssessmentGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *AssessmentGroupBy) sqlScan(ctx context.Context, root *AssessmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssessmentSelect is the builder for selecting fields of Assessment entities.
type AssessmentSelect struct {
	*AssessmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *AssessmentSelect) Aggregate(fns ...AggregateFunc) *AssessmentSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *AssessmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssessmentQuery, *AssessmentSelect](ctx, _s.AssessmentQuery, _s, _s.inters, v)
}

func (_s *AssessmentSelect) sqlScan(ctx context.Context, root *AssessmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *AssessmentSelect) Modify(modifiers ...func(s *sql.Selector)) *AssessmentSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
