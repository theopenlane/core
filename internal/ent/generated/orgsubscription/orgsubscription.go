// Code generated by ent, DO NOT EDIT.

package orgsubscription

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orgsubscription type in the database.
	Label = "org_subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldStripeSubscriptionID holds the string denoting the stripe_subscription_id field in the database.
	FieldStripeSubscriptionID = "stripe_subscription_id"
	// FieldProductTier holds the string denoting the product_tier field in the database.
	FieldProductTier = "product_tier"
	// FieldProductPrice holds the string denoting the product_price field in the database.
	FieldProductPrice = "product_price"
	// FieldStripeProductTierID holds the string denoting the stripe_product_tier_id field in the database.
	FieldStripeProductTierID = "stripe_product_tier_id"
	// FieldStripeSubscriptionStatus holds the string denoting the stripe_subscription_status field in the database.
	FieldStripeSubscriptionStatus = "stripe_subscription_status"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldTrialExpiresAt holds the string denoting the trial_expires_at field in the database.
	FieldTrialExpiresAt = "trial_expires_at"
	// FieldDaysUntilDue holds the string denoting the days_until_due field in the database.
	FieldDaysUntilDue = "days_until_due"
	// FieldFeatures holds the string denoting the features field in the database.
	FieldFeatures = "features"
	// FieldFeatureLookupKeys holds the string denoting the feature_lookup_keys field in the database.
	FieldFeatureLookupKeys = "feature_lookup_keys"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeModules holds the string denoting the modules edge name in mutations.
	EdgeModules = "modules"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgePrices holds the string denoting the prices edge name in mutations.
	EdgePrices = "prices"
	// Table holds the table name of the orgsubscription in the database.
	Table = "org_subscriptions"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "org_subscriptions"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// EventsTable is the table that holds the events relation/edge. The primary key declared below.
	EventsTable = "org_subscription_events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// ModulesTable is the table that holds the modules relation/edge.
	ModulesTable = "org_modules"
	// ModulesInverseTable is the table name for the OrgModule entity.
	// It exists in this package in order to avoid circular dependency with the "orgmodule" package.
	ModulesInverseTable = "org_modules"
	// ModulesColumn is the table column denoting the modules relation/edge.
	ModulesColumn = "subscription_id"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "org_products"
	// ProductsInverseTable is the table name for the OrgProduct entity.
	// It exists in this package in order to avoid circular dependency with the "orgproduct" package.
	ProductsInverseTable = "org_products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "subscription_id"
	// PricesTable is the table that holds the prices relation/edge.
	PricesTable = "org_prices"
	// PricesInverseTable is the table name for the OrgPrice entity.
	// It exists in this package in order to avoid circular dependency with the "orgprice" package.
	PricesInverseTable = "org_prices"
	// PricesColumn is the table column denoting the prices relation/edge.
	PricesColumn = "subscription_id"
)

// Columns holds all SQL columns for orgsubscription fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldOwnerID,
	FieldStripeSubscriptionID,
	FieldProductTier,
	FieldProductPrice,
	FieldStripeProductTierID,
	FieldStripeSubscriptionStatus,
	FieldActive,
	FieldExpiresAt,
	FieldTrialExpiresAt,
	FieldDaysUntilDue,
	FieldFeatures,
	FieldFeatureLookupKeys,
}

var (
	// EventsPrimaryKey and EventsColumn2 are the table columns denoting the
	// primary key for the events relation (M2M).
	EventsPrimaryKey = []string{"org_subscription_id", "event_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [4]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the OrgSubscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByStripeSubscriptionID orders the results by the stripe_subscription_id field.
func ByStripeSubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripeSubscriptionID, opts...).ToFunc()
}

// ByProductTier orders the results by the product_tier field.
func ByProductTier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductTier, opts...).ToFunc()
}

// ByStripeProductTierID orders the results by the stripe_product_tier_id field.
func ByStripeProductTierID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripeProductTierID, opts...).ToFunc()
}

// ByStripeSubscriptionStatus orders the results by the stripe_subscription_status field.
func ByStripeSubscriptionStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripeSubscriptionStatus, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByTrialExpiresAt orders the results by the trial_expires_at field.
func ByTrialExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialExpiresAt, opts...).ToFunc()
}

// ByDaysUntilDue orders the results by the days_until_due field.
func ByDaysUntilDue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDaysUntilDue, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByModulesCount orders the results by modules count.
func ByModulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModulesStep(), opts...)
	}
}

// ByModules orders the results by modules terms.
func ByModules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductsCount orders the results by products count.
func ByProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductsStep(), opts...)
	}
}

// ByProducts orders the results by products terms.
func ByProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPricesCount orders the results by prices count.
func ByPricesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPricesStep(), opts...)
	}
}

// ByPrices orders the results by prices terms.
func ByPrices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPricesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
	)
}
func newModulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ModulesTable, ModulesColumn),
	)
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
	)
}
func newPricesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PricesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PricesTable, PricesColumn),
	)
}
