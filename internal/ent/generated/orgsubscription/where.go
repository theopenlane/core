// Code generated by ent, DO NOT EDIT.

package orgsubscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldDeletedBy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldOwnerID, v))
}

// StripeSubscriptionID applies equality check predicate on the "stripe_subscription_id" field. It's identical to StripeSubscriptionIDEQ.
func StripeSubscriptionID(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldStripeSubscriptionID, v))
}

// ProductTier applies equality check predicate on the "product_tier" field. It's identical to ProductTierEQ.
func ProductTier(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldProductTier, v))
}

// StripeProductTierID applies equality check predicate on the "stripe_product_tier_id" field. It's identical to StripeProductTierIDEQ.
func StripeProductTierID(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldStripeProductTierID, v))
}

// StripeSubscriptionStatus applies equality check predicate on the "stripe_subscription_status" field. It's identical to StripeSubscriptionStatusEQ.
func StripeSubscriptionStatus(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldStripeSubscriptionStatus, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldActive, v))
}

// StripeCustomerID applies equality check predicate on the "stripe_customer_id" field. It's identical to StripeCustomerIDEQ.
func StripeCustomerID(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldStripeCustomerID, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldTags))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldDeletedBy, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldOwnerID, v))
}

// StripeSubscriptionIDEQ applies the EQ predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDNEQ applies the NEQ predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDIn applies the In predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldStripeSubscriptionID, vs...))
}

// StripeSubscriptionIDNotIn applies the NotIn predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldStripeSubscriptionID, vs...))
}

// StripeSubscriptionIDGT applies the GT predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDGTE applies the GTE predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDLT applies the LT predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDLTE applies the LTE predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDContains applies the Contains predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDHasPrefix applies the HasPrefix predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDHasSuffix applies the HasSuffix predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDIsNil applies the IsNil predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldStripeSubscriptionID))
}

// StripeSubscriptionIDNotNil applies the NotNil predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldStripeSubscriptionID))
}

// StripeSubscriptionIDEqualFold applies the EqualFold predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDContainsFold applies the ContainsFold predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldStripeSubscriptionID, v))
}

// ProductTierEQ applies the EQ predicate on the "product_tier" field.
func ProductTierEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldProductTier, v))
}

// ProductTierNEQ applies the NEQ predicate on the "product_tier" field.
func ProductTierNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldProductTier, v))
}

// ProductTierIn applies the In predicate on the "product_tier" field.
func ProductTierIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldProductTier, vs...))
}

// ProductTierNotIn applies the NotIn predicate on the "product_tier" field.
func ProductTierNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldProductTier, vs...))
}

// ProductTierGT applies the GT predicate on the "product_tier" field.
func ProductTierGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldProductTier, v))
}

// ProductTierGTE applies the GTE predicate on the "product_tier" field.
func ProductTierGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldProductTier, v))
}

// ProductTierLT applies the LT predicate on the "product_tier" field.
func ProductTierLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldProductTier, v))
}

// ProductTierLTE applies the LTE predicate on the "product_tier" field.
func ProductTierLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldProductTier, v))
}

// ProductTierContains applies the Contains predicate on the "product_tier" field.
func ProductTierContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldProductTier, v))
}

// ProductTierHasPrefix applies the HasPrefix predicate on the "product_tier" field.
func ProductTierHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldProductTier, v))
}

// ProductTierHasSuffix applies the HasSuffix predicate on the "product_tier" field.
func ProductTierHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldProductTier, v))
}

// ProductTierIsNil applies the IsNil predicate on the "product_tier" field.
func ProductTierIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldProductTier))
}

// ProductTierNotNil applies the NotNil predicate on the "product_tier" field.
func ProductTierNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldProductTier))
}

// ProductTierEqualFold applies the EqualFold predicate on the "product_tier" field.
func ProductTierEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldProductTier, v))
}

// ProductTierContainsFold applies the ContainsFold predicate on the "product_tier" field.
func ProductTierContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldProductTier, v))
}

// ProductPriceIsNil applies the IsNil predicate on the "product_price" field.
func ProductPriceIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldProductPrice))
}

// ProductPriceNotNil applies the NotNil predicate on the "product_price" field.
func ProductPriceNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldProductPrice))
}

// StripeProductTierIDEQ applies the EQ predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldStripeProductTierID, v))
}

// StripeProductTierIDNEQ applies the NEQ predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldStripeProductTierID, v))
}

// StripeProductTierIDIn applies the In predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldStripeProductTierID, vs...))
}

// StripeProductTierIDNotIn applies the NotIn predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldStripeProductTierID, vs...))
}

// StripeProductTierIDGT applies the GT predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldStripeProductTierID, v))
}

// StripeProductTierIDGTE applies the GTE predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldStripeProductTierID, v))
}

// StripeProductTierIDLT applies the LT predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldStripeProductTierID, v))
}

// StripeProductTierIDLTE applies the LTE predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldStripeProductTierID, v))
}

// StripeProductTierIDContains applies the Contains predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldStripeProductTierID, v))
}

// StripeProductTierIDHasPrefix applies the HasPrefix predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldStripeProductTierID, v))
}

// StripeProductTierIDHasSuffix applies the HasSuffix predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldStripeProductTierID, v))
}

// StripeProductTierIDIsNil applies the IsNil predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldStripeProductTierID))
}

// StripeProductTierIDNotNil applies the NotNil predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldStripeProductTierID))
}

// StripeProductTierIDEqualFold applies the EqualFold predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldStripeProductTierID, v))
}

// StripeProductTierIDContainsFold applies the ContainsFold predicate on the "stripe_product_tier_id" field.
func StripeProductTierIDContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldStripeProductTierID, v))
}

// StripeSubscriptionStatusEQ applies the EQ predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusNEQ applies the NEQ predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusIn applies the In predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldStripeSubscriptionStatus, vs...))
}

// StripeSubscriptionStatusNotIn applies the NotIn predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldStripeSubscriptionStatus, vs...))
}

// StripeSubscriptionStatusGT applies the GT predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusGTE applies the GTE predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusLT applies the LT predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusLTE applies the LTE predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusContains applies the Contains predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusHasPrefix applies the HasPrefix predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusHasSuffix applies the HasSuffix predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusIsNil applies the IsNil predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldStripeSubscriptionStatus))
}

// StripeSubscriptionStatusNotNil applies the NotNil predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldStripeSubscriptionStatus))
}

// StripeSubscriptionStatusEqualFold applies the EqualFold predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldStripeSubscriptionStatus, v))
}

// StripeSubscriptionStatusContainsFold applies the ContainsFold predicate on the "stripe_subscription_status" field.
func StripeSubscriptionStatusContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldStripeSubscriptionStatus, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldActive, v))
}

// StripeCustomerIDEQ applies the EQ predicate on the "stripe_customer_id" field.
func StripeCustomerIDEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldStripeCustomerID, v))
}

// StripeCustomerIDNEQ applies the NEQ predicate on the "stripe_customer_id" field.
func StripeCustomerIDNEQ(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldStripeCustomerID, v))
}

// StripeCustomerIDIn applies the In predicate on the "stripe_customer_id" field.
func StripeCustomerIDIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldStripeCustomerID, vs...))
}

// StripeCustomerIDNotIn applies the NotIn predicate on the "stripe_customer_id" field.
func StripeCustomerIDNotIn(vs ...string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldStripeCustomerID, vs...))
}

// StripeCustomerIDGT applies the GT predicate on the "stripe_customer_id" field.
func StripeCustomerIDGT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldStripeCustomerID, v))
}

// StripeCustomerIDGTE applies the GTE predicate on the "stripe_customer_id" field.
func StripeCustomerIDGTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldStripeCustomerID, v))
}

// StripeCustomerIDLT applies the LT predicate on the "stripe_customer_id" field.
func StripeCustomerIDLT(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldStripeCustomerID, v))
}

// StripeCustomerIDLTE applies the LTE predicate on the "stripe_customer_id" field.
func StripeCustomerIDLTE(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldStripeCustomerID, v))
}

// StripeCustomerIDContains applies the Contains predicate on the "stripe_customer_id" field.
func StripeCustomerIDContains(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContains(FieldStripeCustomerID, v))
}

// StripeCustomerIDHasPrefix applies the HasPrefix predicate on the "stripe_customer_id" field.
func StripeCustomerIDHasPrefix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasPrefix(FieldStripeCustomerID, v))
}

// StripeCustomerIDHasSuffix applies the HasSuffix predicate on the "stripe_customer_id" field.
func StripeCustomerIDHasSuffix(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldHasSuffix(FieldStripeCustomerID, v))
}

// StripeCustomerIDIsNil applies the IsNil predicate on the "stripe_customer_id" field.
func StripeCustomerIDIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldStripeCustomerID))
}

// StripeCustomerIDNotNil applies the NotNil predicate on the "stripe_customer_id" field.
func StripeCustomerIDNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldStripeCustomerID))
}

// StripeCustomerIDEqualFold applies the EqualFold predicate on the "stripe_customer_id" field.
func StripeCustomerIDEqualFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEqualFold(FieldStripeCustomerID, v))
}

// StripeCustomerIDContainsFold applies the ContainsFold predicate on the "stripe_customer_id" field.
func StripeCustomerIDContainsFold(v string) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldContainsFold(FieldStripeCustomerID, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldExpiresAt))
}

// FeaturesIsNil applies the IsNil predicate on the "features" field.
func FeaturesIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldFeatures))
}

// FeaturesNotNil applies the NotNil predicate on the "features" field.
func FeaturesNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldFeatures))
}

// FeatureLookupKeysIsNil applies the IsNil predicate on the "feature_lookup_keys" field.
func FeatureLookupKeysIsNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldIsNull(FieldFeatureLookupKeys))
}

// FeatureLookupKeysNotNil applies the NotNil predicate on the "feature_lookup_keys" field.
func FeatureLookupKeysNotNil() predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.FieldNotNull(FieldFeatureLookupKeys))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.OrgSubscription {
	return predicate.OrgSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgSubscription
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.OrgSubscription {
	return predicate.OrgSubscription(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgSubscription
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrgSubscription) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrgSubscription) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrgSubscription) predicate.OrgSubscription {
	return predicate.OrgSubscription(sql.NotPredicates(p))
}
