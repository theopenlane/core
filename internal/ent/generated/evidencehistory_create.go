// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/evidencehistory"
	"github.com/theopenlane/entx/history"
)

// EvidenceHistoryCreate is the builder for creating a EvidenceHistory entity.
type EvidenceHistoryCreate struct {
	config
	mutation *EvidenceHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (ehc *EvidenceHistoryCreate) SetHistoryTime(t time.Time) *EvidenceHistoryCreate {
	ehc.mutation.SetHistoryTime(t)
	return ehc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableHistoryTime(t *time.Time) *EvidenceHistoryCreate {
	if t != nil {
		ehc.SetHistoryTime(*t)
	}
	return ehc
}

// SetRef sets the "ref" field.
func (ehc *EvidenceHistoryCreate) SetRef(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetRef(s)
	return ehc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableRef(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetRef(*s)
	}
	return ehc
}

// SetOperation sets the "operation" field.
func (ehc *EvidenceHistoryCreate) SetOperation(ht history.OpType) *EvidenceHistoryCreate {
	ehc.mutation.SetOperation(ht)
	return ehc
}

// SetCreatedAt sets the "created_at" field.
func (ehc *EvidenceHistoryCreate) SetCreatedAt(t time.Time) *EvidenceHistoryCreate {
	ehc.mutation.SetCreatedAt(t)
	return ehc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableCreatedAt(t *time.Time) *EvidenceHistoryCreate {
	if t != nil {
		ehc.SetCreatedAt(*t)
	}
	return ehc
}

// SetUpdatedAt sets the "updated_at" field.
func (ehc *EvidenceHistoryCreate) SetUpdatedAt(t time.Time) *EvidenceHistoryCreate {
	ehc.mutation.SetUpdatedAt(t)
	return ehc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableUpdatedAt(t *time.Time) *EvidenceHistoryCreate {
	if t != nil {
		ehc.SetUpdatedAt(*t)
	}
	return ehc
}

// SetCreatedBy sets the "created_by" field.
func (ehc *EvidenceHistoryCreate) SetCreatedBy(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetCreatedBy(s)
	return ehc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableCreatedBy(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetCreatedBy(*s)
	}
	return ehc
}

// SetUpdatedBy sets the "updated_by" field.
func (ehc *EvidenceHistoryCreate) SetUpdatedBy(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetUpdatedBy(s)
	return ehc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableUpdatedBy(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetUpdatedBy(*s)
	}
	return ehc
}

// SetDisplayID sets the "display_id" field.
func (ehc *EvidenceHistoryCreate) SetDisplayID(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetDisplayID(s)
	return ehc
}

// SetDeletedAt sets the "deleted_at" field.
func (ehc *EvidenceHistoryCreate) SetDeletedAt(t time.Time) *EvidenceHistoryCreate {
	ehc.mutation.SetDeletedAt(t)
	return ehc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableDeletedAt(t *time.Time) *EvidenceHistoryCreate {
	if t != nil {
		ehc.SetDeletedAt(*t)
	}
	return ehc
}

// SetDeletedBy sets the "deleted_by" field.
func (ehc *EvidenceHistoryCreate) SetDeletedBy(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetDeletedBy(s)
	return ehc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableDeletedBy(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetDeletedBy(*s)
	}
	return ehc
}

// SetTags sets the "tags" field.
func (ehc *EvidenceHistoryCreate) SetTags(s []string) *EvidenceHistoryCreate {
	ehc.mutation.SetTags(s)
	return ehc
}

// SetOwnerID sets the "owner_id" field.
func (ehc *EvidenceHistoryCreate) SetOwnerID(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetOwnerID(s)
	return ehc
}

// SetName sets the "name" field.
func (ehc *EvidenceHistoryCreate) SetName(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetName(s)
	return ehc
}

// SetDescription sets the "description" field.
func (ehc *EvidenceHistoryCreate) SetDescription(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetDescription(s)
	return ehc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableDescription(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetDescription(*s)
	}
	return ehc
}

// SetCollectionProcedure sets the "collection_procedure" field.
func (ehc *EvidenceHistoryCreate) SetCollectionProcedure(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetCollectionProcedure(s)
	return ehc
}

// SetNillableCollectionProcedure sets the "collection_procedure" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableCollectionProcedure(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetCollectionProcedure(*s)
	}
	return ehc
}

// SetCreationDate sets the "creation_date" field.
func (ehc *EvidenceHistoryCreate) SetCreationDate(t time.Time) *EvidenceHistoryCreate {
	ehc.mutation.SetCreationDate(t)
	return ehc
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableCreationDate(t *time.Time) *EvidenceHistoryCreate {
	if t != nil {
		ehc.SetCreationDate(*t)
	}
	return ehc
}

// SetRenewalDate sets the "renewal_date" field.
func (ehc *EvidenceHistoryCreate) SetRenewalDate(t time.Time) *EvidenceHistoryCreate {
	ehc.mutation.SetRenewalDate(t)
	return ehc
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableRenewalDate(t *time.Time) *EvidenceHistoryCreate {
	if t != nil {
		ehc.SetRenewalDate(*t)
	}
	return ehc
}

// SetSource sets the "source" field.
func (ehc *EvidenceHistoryCreate) SetSource(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetSource(s)
	return ehc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableSource(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetSource(*s)
	}
	return ehc
}

// SetIsAutomated sets the "is_automated" field.
func (ehc *EvidenceHistoryCreate) SetIsAutomated(b bool) *EvidenceHistoryCreate {
	ehc.mutation.SetIsAutomated(b)
	return ehc
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableIsAutomated(b *bool) *EvidenceHistoryCreate {
	if b != nil {
		ehc.SetIsAutomated(*b)
	}
	return ehc
}

// SetURL sets the "url" field.
func (ehc *EvidenceHistoryCreate) SetURL(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetURL(s)
	return ehc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableURL(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetURL(*s)
	}
	return ehc
}

// SetID sets the "id" field.
func (ehc *EvidenceHistoryCreate) SetID(s string) *EvidenceHistoryCreate {
	ehc.mutation.SetID(s)
	return ehc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ehc *EvidenceHistoryCreate) SetNillableID(s *string) *EvidenceHistoryCreate {
	if s != nil {
		ehc.SetID(*s)
	}
	return ehc
}

// Mutation returns the EvidenceHistoryMutation object of the builder.
func (ehc *EvidenceHistoryCreate) Mutation() *EvidenceHistoryMutation {
	return ehc.mutation
}

// Save creates the EvidenceHistory in the database.
func (ehc *EvidenceHistoryCreate) Save(ctx context.Context) (*EvidenceHistory, error) {
	ehc.defaults()
	return withHooks(ctx, ehc.sqlSave, ehc.mutation, ehc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ehc *EvidenceHistoryCreate) SaveX(ctx context.Context) *EvidenceHistory {
	v, err := ehc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ehc *EvidenceHistoryCreate) Exec(ctx context.Context) error {
	_, err := ehc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehc *EvidenceHistoryCreate) ExecX(ctx context.Context) {
	if err := ehc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ehc *EvidenceHistoryCreate) defaults() {
	if _, ok := ehc.mutation.HistoryTime(); !ok {
		v := evidencehistory.DefaultHistoryTime()
		ehc.mutation.SetHistoryTime(v)
	}
	if _, ok := ehc.mutation.CreatedAt(); !ok {
		v := evidencehistory.DefaultCreatedAt()
		ehc.mutation.SetCreatedAt(v)
	}
	if _, ok := ehc.mutation.UpdatedAt(); !ok {
		v := evidencehistory.DefaultUpdatedAt()
		ehc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ehc.mutation.Tags(); !ok {
		v := evidencehistory.DefaultTags
		ehc.mutation.SetTags(v)
	}
	if _, ok := ehc.mutation.CreationDate(); !ok {
		v := evidencehistory.DefaultCreationDate()
		ehc.mutation.SetCreationDate(v)
	}
	if _, ok := ehc.mutation.RenewalDate(); !ok {
		v := evidencehistory.DefaultRenewalDate
		ehc.mutation.SetRenewalDate(v)
	}
	if _, ok := ehc.mutation.IsAutomated(); !ok {
		v := evidencehistory.DefaultIsAutomated
		ehc.mutation.SetIsAutomated(v)
	}
	if _, ok := ehc.mutation.ID(); !ok {
		v := evidencehistory.DefaultID()
		ehc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ehc *EvidenceHistoryCreate) check() error {
	if _, ok := ehc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "EvidenceHistory.history_time"`)}
	}
	if _, ok := ehc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "EvidenceHistory.operation"`)}
	}
	if v, ok := ehc.mutation.Operation(); ok {
		if err := evidencehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "EvidenceHistory.operation": %w`, err)}
		}
	}
	if _, ok := ehc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "EvidenceHistory.display_id"`)}
	}
	if _, ok := ehc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`generated: missing required field "EvidenceHistory.owner_id"`)}
	}
	if _, ok := ehc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "EvidenceHistory.name"`)}
	}
	if _, ok := ehc.mutation.CreationDate(); !ok {
		return &ValidationError{Name: "creation_date", err: errors.New(`generated: missing required field "EvidenceHistory.creation_date"`)}
	}
	return nil
}

func (ehc *EvidenceHistoryCreate) sqlSave(ctx context.Context) (*EvidenceHistory, error) {
	if err := ehc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ehc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ehc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EvidenceHistory.ID type: %T", _spec.ID.Value)
		}
	}
	ehc.mutation.id = &_node.ID
	ehc.mutation.done = true
	return _node, nil
}

func (ehc *EvidenceHistoryCreate) createSpec() (*EvidenceHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &EvidenceHistory{config: ehc.config}
		_spec = sqlgraph.NewCreateSpec(evidencehistory.Table, sqlgraph.NewFieldSpec(evidencehistory.FieldID, field.TypeString))
	)
	_spec.Schema = ehc.schemaConfig.EvidenceHistory
	if id, ok := ehc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ehc.mutation.HistoryTime(); ok {
		_spec.SetField(evidencehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := ehc.mutation.Ref(); ok {
		_spec.SetField(evidencehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := ehc.mutation.Operation(); ok {
		_spec.SetField(evidencehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := ehc.mutation.CreatedAt(); ok {
		_spec.SetField(evidencehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ehc.mutation.UpdatedAt(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ehc.mutation.CreatedBy(); ok {
		_spec.SetField(evidencehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ehc.mutation.UpdatedBy(); ok {
		_spec.SetField(evidencehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ehc.mutation.DisplayID(); ok {
		_spec.SetField(evidencehistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := ehc.mutation.DeletedAt(); ok {
		_spec.SetField(evidencehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ehc.mutation.DeletedBy(); ok {
		_spec.SetField(evidencehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := ehc.mutation.Tags(); ok {
		_spec.SetField(evidencehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ehc.mutation.OwnerID(); ok {
		_spec.SetField(evidencehistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := ehc.mutation.Name(); ok {
		_spec.SetField(evidencehistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ehc.mutation.Description(); ok {
		_spec.SetField(evidencehistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ehc.mutation.CollectionProcedure(); ok {
		_spec.SetField(evidencehistory.FieldCollectionProcedure, field.TypeString, value)
		_node.CollectionProcedure = value
	}
	if value, ok := ehc.mutation.CreationDate(); ok {
		_spec.SetField(evidencehistory.FieldCreationDate, field.TypeTime, value)
		_node.CreationDate = value
	}
	if value, ok := ehc.mutation.RenewalDate(); ok {
		_spec.SetField(evidencehistory.FieldRenewalDate, field.TypeTime, value)
		_node.RenewalDate = value
	}
	if value, ok := ehc.mutation.Source(); ok {
		_spec.SetField(evidencehistory.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := ehc.mutation.IsAutomated(); ok {
		_spec.SetField(evidencehistory.FieldIsAutomated, field.TypeBool, value)
		_node.IsAutomated = value
	}
	if value, ok := ehc.mutation.URL(); ok {
		_spec.SetField(evidencehistory.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	return _node, _spec
}

// EvidenceHistoryCreateBulk is the builder for creating many EvidenceHistory entities in bulk.
type EvidenceHistoryCreateBulk struct {
	config
	err      error
	builders []*EvidenceHistoryCreate
}

// Save creates the EvidenceHistory entities in the database.
func (ehcb *EvidenceHistoryCreateBulk) Save(ctx context.Context) ([]*EvidenceHistory, error) {
	if ehcb.err != nil {
		return nil, ehcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ehcb.builders))
	nodes := make([]*EvidenceHistory, len(ehcb.builders))
	mutators := make([]Mutator, len(ehcb.builders))
	for i := range ehcb.builders {
		func(i int, root context.Context) {
			builder := ehcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EvidenceHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ehcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ehcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ehcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ehcb *EvidenceHistoryCreateBulk) SaveX(ctx context.Context) []*EvidenceHistory {
	v, err := ehcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ehcb *EvidenceHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ehcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehcb *EvidenceHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ehcb.Exec(ctx); err != nil {
		panic(err)
	}
}
