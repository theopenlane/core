// Code generated by entx.history, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/assethistory"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementationhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlobjectivehistory"
	"github.com/theopenlane/core/internal/ent/generated/customdomainhistory"
	"github.com/theopenlane/core/internal/ent/generated/dnsverificationhistory"
	"github.com/theopenlane/core/internal/ent/generated/documentdatahistory"
	"github.com/theopenlane/core/internal/ent/generated/entityhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/evidencehistory"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/integrationhistory"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicyhistory"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplatehistory"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomainhistory"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/narrativehistory"
	"github.com/theopenlane/core/internal/ent/generated/notehistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscriptionhistory"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/internal/ent/generated/programmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/internal/ent/generated/scanhistory"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobhistory"
	"github.com/theopenlane/core/internal/ent/generated/standardhistory"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/subprocessorhistory"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliancehistory"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterdochistory"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterhistory"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessorhistory"
	"github.com/theopenlane/core/internal/ent/generated/userhistory"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"
)

func (_m *ActionPlan) History() *ActionPlanHistoryQuery {
	historyClient := NewActionPlanHistoryClient(_m.config)
	return historyClient.Query().Where(actionplanhistory.Ref(_m.ID))
}

func (_m *ActionPlanHistory) Next(ctx context.Context) (*ActionPlanHistory, error) {
	client := NewActionPlanHistoryClient(_m.config)
	return client.Query().
		Where(
			actionplanhistory.Ref(_m.Ref),
			actionplanhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(actionplanhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ActionPlanHistory) Prev(ctx context.Context) (*ActionPlanHistory, error) {
	client := NewActionPlanHistoryClient(_m.config)
	return client.Query().
		Where(
			actionplanhistory.Ref(_m.Ref),
			actionplanhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(actionplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (aphq *ActionPlanHistoryQuery) Earliest(ctx context.Context) (*ActionPlanHistory, error) {
	return aphq.
		Order(actionplanhistory.ByHistoryTime()).
		First(ctx)
}

func (aphq *ActionPlanHistoryQuery) Latest(ctx context.Context) (*ActionPlanHistory, error) {
	return aphq.
		Order(actionplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (aphq *ActionPlanHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ActionPlanHistory, error) {
	return aphq.
		Where(actionplanhistory.HistoryTimeLTE(time)).
		Order(actionplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Asset) History() *AssetHistoryQuery {
	historyClient := NewAssetHistoryClient(_m.config)
	return historyClient.Query().Where(assethistory.Ref(_m.ID))
}

func (_m *AssetHistory) Next(ctx context.Context) (*AssetHistory, error) {
	client := NewAssetHistoryClient(_m.config)
	return client.Query().
		Where(
			assethistory.Ref(_m.Ref),
			assethistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(assethistory.ByHistoryTime()).
		First(ctx)
}

func (_m *AssetHistory) Prev(ctx context.Context) (*AssetHistory, error) {
	client := NewAssetHistoryClient(_m.config)
	return client.Query().
		Where(
			assethistory.Ref(_m.Ref),
			assethistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(assethistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ahq *AssetHistoryQuery) Earliest(ctx context.Context) (*AssetHistory, error) {
	return ahq.
		Order(assethistory.ByHistoryTime()).
		First(ctx)
}

func (ahq *AssetHistoryQuery) Latest(ctx context.Context) (*AssetHistory, error) {
	return ahq.
		Order(assethistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ahq *AssetHistoryQuery) AsOf(ctx context.Context, time time.Time) (*AssetHistory, error) {
	return ahq.
		Where(assethistory.HistoryTimeLTE(time)).
		Order(assethistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Contact) History() *ContactHistoryQuery {
	historyClient := NewContactHistoryClient(_m.config)
	return historyClient.Query().Where(contacthistory.Ref(_m.ID))
}

func (_m *ContactHistory) Next(ctx context.Context) (*ContactHistory, error) {
	client := NewContactHistoryClient(_m.config)
	return client.Query().
		Where(
			contacthistory.Ref(_m.Ref),
			contacthistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(contacthistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ContactHistory) Prev(ctx context.Context) (*ContactHistory, error) {
	client := NewContactHistoryClient(_m.config)
	return client.Query().
		Where(
			contacthistory.Ref(_m.Ref),
			contacthistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(contacthistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *ContactHistoryQuery) Earliest(ctx context.Context) (*ContactHistory, error) {
	return chq.
		Order(contacthistory.ByHistoryTime()).
		First(ctx)
}

func (chq *ContactHistoryQuery) Latest(ctx context.Context) (*ContactHistory, error) {
	return chq.
		Order(contacthistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *ContactHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ContactHistory, error) {
	return chq.
		Where(contacthistory.HistoryTimeLTE(time)).
		Order(contacthistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Control) History() *ControlHistoryQuery {
	historyClient := NewControlHistoryClient(_m.config)
	return historyClient.Query().Where(controlhistory.Ref(_m.ID))
}

func (_m *ControlHistory) Next(ctx context.Context) (*ControlHistory, error) {
	client := NewControlHistoryClient(_m.config)
	return client.Query().
		Where(
			controlhistory.Ref(_m.Ref),
			controlhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(controlhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ControlHistory) Prev(ctx context.Context) (*ControlHistory, error) {
	client := NewControlHistoryClient(_m.config)
	return client.Query().
		Where(
			controlhistory.Ref(_m.Ref),
			controlhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(controlhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *ControlHistoryQuery) Earliest(ctx context.Context) (*ControlHistory, error) {
	return chq.
		Order(controlhistory.ByHistoryTime()).
		First(ctx)
}

func (chq *ControlHistoryQuery) Latest(ctx context.Context) (*ControlHistory, error) {
	return chq.
		Order(controlhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *ControlHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ControlHistory, error) {
	return chq.
		Where(controlhistory.HistoryTimeLTE(time)).
		Order(controlhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *ControlImplementation) History() *ControlImplementationHistoryQuery {
	historyClient := NewControlImplementationHistoryClient(_m.config)
	return historyClient.Query().Where(controlimplementationhistory.Ref(_m.ID))
}

func (_m *ControlImplementationHistory) Next(ctx context.Context) (*ControlImplementationHistory, error) {
	client := NewControlImplementationHistoryClient(_m.config)
	return client.Query().
		Where(
			controlimplementationhistory.Ref(_m.Ref),
			controlimplementationhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(controlimplementationhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ControlImplementationHistory) Prev(ctx context.Context) (*ControlImplementationHistory, error) {
	client := NewControlImplementationHistoryClient(_m.config)
	return client.Query().
		Where(
			controlimplementationhistory.Ref(_m.Ref),
			controlimplementationhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(controlimplementationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (cihq *ControlImplementationHistoryQuery) Earliest(ctx context.Context) (*ControlImplementationHistory, error) {
	return cihq.
		Order(controlimplementationhistory.ByHistoryTime()).
		First(ctx)
}

func (cihq *ControlImplementationHistoryQuery) Latest(ctx context.Context) (*ControlImplementationHistory, error) {
	return cihq.
		Order(controlimplementationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (cihq *ControlImplementationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ControlImplementationHistory, error) {
	return cihq.
		Where(controlimplementationhistory.HistoryTimeLTE(time)).
		Order(controlimplementationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *ControlObjective) History() *ControlObjectiveHistoryQuery {
	historyClient := NewControlObjectiveHistoryClient(_m.config)
	return historyClient.Query().Where(controlobjectivehistory.Ref(_m.ID))
}

func (_m *ControlObjectiveHistory) Next(ctx context.Context) (*ControlObjectiveHistory, error) {
	client := NewControlObjectiveHistoryClient(_m.config)
	return client.Query().
		Where(
			controlobjectivehistory.Ref(_m.Ref),
			controlobjectivehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(controlobjectivehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ControlObjectiveHistory) Prev(ctx context.Context) (*ControlObjectiveHistory, error) {
	client := NewControlObjectiveHistoryClient(_m.config)
	return client.Query().
		Where(
			controlobjectivehistory.Ref(_m.Ref),
			controlobjectivehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(controlobjectivehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (cohq *ControlObjectiveHistoryQuery) Earliest(ctx context.Context) (*ControlObjectiveHistory, error) {
	return cohq.
		Order(controlobjectivehistory.ByHistoryTime()).
		First(ctx)
}

func (cohq *ControlObjectiveHistoryQuery) Latest(ctx context.Context) (*ControlObjectiveHistory, error) {
	return cohq.
		Order(controlobjectivehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (cohq *ControlObjectiveHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ControlObjectiveHistory, error) {
	return cohq.
		Where(controlobjectivehistory.HistoryTimeLTE(time)).
		Order(controlobjectivehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *CustomDomain) History() *CustomDomainHistoryQuery {
	historyClient := NewCustomDomainHistoryClient(_m.config)
	return historyClient.Query().Where(customdomainhistory.Ref(_m.ID))
}

func (_m *CustomDomainHistory) Next(ctx context.Context) (*CustomDomainHistory, error) {
	client := NewCustomDomainHistoryClient(_m.config)
	return client.Query().
		Where(
			customdomainhistory.Ref(_m.Ref),
			customdomainhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(customdomainhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *CustomDomainHistory) Prev(ctx context.Context) (*CustomDomainHistory, error) {
	client := NewCustomDomainHistoryClient(_m.config)
	return client.Query().
		Where(
			customdomainhistory.Ref(_m.Ref),
			customdomainhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(customdomainhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (cdhq *CustomDomainHistoryQuery) Earliest(ctx context.Context) (*CustomDomainHistory, error) {
	return cdhq.
		Order(customdomainhistory.ByHistoryTime()).
		First(ctx)
}

func (cdhq *CustomDomainHistoryQuery) Latest(ctx context.Context) (*CustomDomainHistory, error) {
	return cdhq.
		Order(customdomainhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (cdhq *CustomDomainHistoryQuery) AsOf(ctx context.Context, time time.Time) (*CustomDomainHistory, error) {
	return cdhq.
		Where(customdomainhistory.HistoryTimeLTE(time)).
		Order(customdomainhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *DNSVerification) History() *DNSVerificationHistoryQuery {
	historyClient := NewDNSVerificationHistoryClient(_m.config)
	return historyClient.Query().Where(dnsverificationhistory.Ref(_m.ID))
}

func (_m *DNSVerificationHistory) Next(ctx context.Context) (*DNSVerificationHistory, error) {
	client := NewDNSVerificationHistoryClient(_m.config)
	return client.Query().
		Where(
			dnsverificationhistory.Ref(_m.Ref),
			dnsverificationhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(dnsverificationhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *DNSVerificationHistory) Prev(ctx context.Context) (*DNSVerificationHistory, error) {
	client := NewDNSVerificationHistoryClient(_m.config)
	return client.Query().
		Where(
			dnsverificationhistory.Ref(_m.Ref),
			dnsverificationhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(dnsverificationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (dvhq *DNSVerificationHistoryQuery) Earliest(ctx context.Context) (*DNSVerificationHistory, error) {
	return dvhq.
		Order(dnsverificationhistory.ByHistoryTime()).
		First(ctx)
}

func (dvhq *DNSVerificationHistoryQuery) Latest(ctx context.Context) (*DNSVerificationHistory, error) {
	return dvhq.
		Order(dnsverificationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (dvhq *DNSVerificationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*DNSVerificationHistory, error) {
	return dvhq.
		Where(dnsverificationhistory.HistoryTimeLTE(time)).
		Order(dnsverificationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *DocumentData) History() *DocumentDataHistoryQuery {
	historyClient := NewDocumentDataHistoryClient(_m.config)
	return historyClient.Query().Where(documentdatahistory.Ref(_m.ID))
}

func (_m *DocumentDataHistory) Next(ctx context.Context) (*DocumentDataHistory, error) {
	client := NewDocumentDataHistoryClient(_m.config)
	return client.Query().
		Where(
			documentdatahistory.Ref(_m.Ref),
			documentdatahistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(documentdatahistory.ByHistoryTime()).
		First(ctx)
}

func (_m *DocumentDataHistory) Prev(ctx context.Context) (*DocumentDataHistory, error) {
	client := NewDocumentDataHistoryClient(_m.config)
	return client.Query().
		Where(
			documentdatahistory.Ref(_m.Ref),
			documentdatahistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(documentdatahistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ddhq *DocumentDataHistoryQuery) Earliest(ctx context.Context) (*DocumentDataHistory, error) {
	return ddhq.
		Order(documentdatahistory.ByHistoryTime()).
		First(ctx)
}

func (ddhq *DocumentDataHistoryQuery) Latest(ctx context.Context) (*DocumentDataHistory, error) {
	return ddhq.
		Order(documentdatahistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ddhq *DocumentDataHistoryQuery) AsOf(ctx context.Context, time time.Time) (*DocumentDataHistory, error) {
	return ddhq.
		Where(documentdatahistory.HistoryTimeLTE(time)).
		Order(documentdatahistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Entity) History() *EntityHistoryQuery {
	historyClient := NewEntityHistoryClient(_m.config)
	return historyClient.Query().Where(entityhistory.Ref(_m.ID))
}

func (_m *EntityHistory) Next(ctx context.Context) (*EntityHistory, error) {
	client := NewEntityHistoryClient(_m.config)
	return client.Query().
		Where(
			entityhistory.Ref(_m.Ref),
			entityhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(entityhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *EntityHistory) Prev(ctx context.Context) (*EntityHistory, error) {
	client := NewEntityHistoryClient(_m.config)
	return client.Query().
		Where(
			entityhistory.Ref(_m.Ref),
			entityhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(entityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EntityHistoryQuery) Earliest(ctx context.Context) (*EntityHistory, error) {
	return ehq.
		Order(entityhistory.ByHistoryTime()).
		First(ctx)
}

func (ehq *EntityHistoryQuery) Latest(ctx context.Context) (*EntityHistory, error) {
	return ehq.
		Order(entityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EntityHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EntityHistory, error) {
	return ehq.
		Where(entityhistory.HistoryTimeLTE(time)).
		Order(entityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *EntityType) History() *EntityTypeHistoryQuery {
	historyClient := NewEntityTypeHistoryClient(_m.config)
	return historyClient.Query().Where(entitytypehistory.Ref(_m.ID))
}

func (_m *EntityTypeHistory) Next(ctx context.Context) (*EntityTypeHistory, error) {
	client := NewEntityTypeHistoryClient(_m.config)
	return client.Query().
		Where(
			entitytypehistory.Ref(_m.Ref),
			entitytypehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(entitytypehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *EntityTypeHistory) Prev(ctx context.Context) (*EntityTypeHistory, error) {
	client := NewEntityTypeHistoryClient(_m.config)
	return client.Query().
		Where(
			entitytypehistory.Ref(_m.Ref),
			entitytypehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(entitytypehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ethq *EntityTypeHistoryQuery) Earliest(ctx context.Context) (*EntityTypeHistory, error) {
	return ethq.
		Order(entitytypehistory.ByHistoryTime()).
		First(ctx)
}

func (ethq *EntityTypeHistoryQuery) Latest(ctx context.Context) (*EntityTypeHistory, error) {
	return ethq.
		Order(entitytypehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ethq *EntityTypeHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EntityTypeHistory, error) {
	return ethq.
		Where(entitytypehistory.HistoryTimeLTE(time)).
		Order(entitytypehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Evidence) History() *EvidenceHistoryQuery {
	historyClient := NewEvidenceHistoryClient(_m.config)
	return historyClient.Query().Where(evidencehistory.Ref(_m.ID))
}

func (_m *EvidenceHistory) Next(ctx context.Context) (*EvidenceHistory, error) {
	client := NewEvidenceHistoryClient(_m.config)
	return client.Query().
		Where(
			evidencehistory.Ref(_m.Ref),
			evidencehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(evidencehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *EvidenceHistory) Prev(ctx context.Context) (*EvidenceHistory, error) {
	client := NewEvidenceHistoryClient(_m.config)
	return client.Query().
		Where(
			evidencehistory.Ref(_m.Ref),
			evidencehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(evidencehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EvidenceHistoryQuery) Earliest(ctx context.Context) (*EvidenceHistory, error) {
	return ehq.
		Order(evidencehistory.ByHistoryTime()).
		First(ctx)
}

func (ehq *EvidenceHistoryQuery) Latest(ctx context.Context) (*EvidenceHistory, error) {
	return ehq.
		Order(evidencehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EvidenceHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EvidenceHistory, error) {
	return ehq.
		Where(evidencehistory.HistoryTimeLTE(time)).
		Order(evidencehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *File) History() *FileHistoryQuery {
	historyClient := NewFileHistoryClient(_m.config)
	return historyClient.Query().Where(filehistory.Ref(_m.ID))
}

func (_m *FileHistory) Next(ctx context.Context) (*FileHistory, error) {
	client := NewFileHistoryClient(_m.config)
	return client.Query().
		Where(
			filehistory.Ref(_m.Ref),
			filehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(filehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *FileHistory) Prev(ctx context.Context) (*FileHistory, error) {
	client := NewFileHistoryClient(_m.config)
	return client.Query().
		Where(
			filehistory.Ref(_m.Ref),
			filehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(filehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (fhq *FileHistoryQuery) Earliest(ctx context.Context) (*FileHistory, error) {
	return fhq.
		Order(filehistory.ByHistoryTime()).
		First(ctx)
}

func (fhq *FileHistoryQuery) Latest(ctx context.Context) (*FileHistory, error) {
	return fhq.
		Order(filehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (fhq *FileHistoryQuery) AsOf(ctx context.Context, time time.Time) (*FileHistory, error) {
	return fhq.
		Where(filehistory.HistoryTimeLTE(time)).
		Order(filehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Group) History() *GroupHistoryQuery {
	historyClient := NewGroupHistoryClient(_m.config)
	return historyClient.Query().Where(grouphistory.Ref(_m.ID))
}

func (_m *GroupHistory) Next(ctx context.Context) (*GroupHistory, error) {
	client := NewGroupHistoryClient(_m.config)
	return client.Query().
		Where(
			grouphistory.Ref(_m.Ref),
			grouphistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(grouphistory.ByHistoryTime()).
		First(ctx)
}

func (_m *GroupHistory) Prev(ctx context.Context) (*GroupHistory, error) {
	client := NewGroupHistoryClient(_m.config)
	return client.Query().
		Where(
			grouphistory.Ref(_m.Ref),
			grouphistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(grouphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ghq *GroupHistoryQuery) Earliest(ctx context.Context) (*GroupHistory, error) {
	return ghq.
		Order(grouphistory.ByHistoryTime()).
		First(ctx)
}

func (ghq *GroupHistoryQuery) Latest(ctx context.Context) (*GroupHistory, error) {
	return ghq.
		Order(grouphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ghq *GroupHistoryQuery) AsOf(ctx context.Context, time time.Time) (*GroupHistory, error) {
	return ghq.
		Where(grouphistory.HistoryTimeLTE(time)).
		Order(grouphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *GroupMembership) History() *GroupMembershipHistoryQuery {
	historyClient := NewGroupMembershipHistoryClient(_m.config)
	return historyClient.Query().Where(groupmembershiphistory.Ref(_m.ID))
}

func (_m *GroupMembershipHistory) Next(ctx context.Context) (*GroupMembershipHistory, error) {
	client := NewGroupMembershipHistoryClient(_m.config)
	return client.Query().
		Where(
			groupmembershiphistory.Ref(_m.Ref),
			groupmembershiphistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(groupmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (_m *GroupMembershipHistory) Prev(ctx context.Context) (*GroupMembershipHistory, error) {
	client := NewGroupMembershipHistoryClient(_m.config)
	return client.Query().
		Where(
			groupmembershiphistory.Ref(_m.Ref),
			groupmembershiphistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(groupmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gmhq *GroupMembershipHistoryQuery) Earliest(ctx context.Context) (*GroupMembershipHistory, error) {
	return gmhq.
		Order(groupmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (gmhq *GroupMembershipHistoryQuery) Latest(ctx context.Context) (*GroupMembershipHistory, error) {
	return gmhq.
		Order(groupmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gmhq *GroupMembershipHistoryQuery) AsOf(ctx context.Context, time time.Time) (*GroupMembershipHistory, error) {
	return gmhq.
		Where(groupmembershiphistory.HistoryTimeLTE(time)).
		Order(groupmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *GroupSetting) History() *GroupSettingHistoryQuery {
	historyClient := NewGroupSettingHistoryClient(_m.config)
	return historyClient.Query().Where(groupsettinghistory.Ref(_m.ID))
}

func (_m *GroupSettingHistory) Next(ctx context.Context) (*GroupSettingHistory, error) {
	client := NewGroupSettingHistoryClient(_m.config)
	return client.Query().
		Where(
			groupsettinghistory.Ref(_m.Ref),
			groupsettinghistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(groupsettinghistory.ByHistoryTime()).
		First(ctx)
}

func (_m *GroupSettingHistory) Prev(ctx context.Context) (*GroupSettingHistory, error) {
	client := NewGroupSettingHistoryClient(_m.config)
	return client.Query().
		Where(
			groupsettinghistory.Ref(_m.Ref),
			groupsettinghistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(groupsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gshq *GroupSettingHistoryQuery) Earliest(ctx context.Context) (*GroupSettingHistory, error) {
	return gshq.
		Order(groupsettinghistory.ByHistoryTime()).
		First(ctx)
}

func (gshq *GroupSettingHistoryQuery) Latest(ctx context.Context) (*GroupSettingHistory, error) {
	return gshq.
		Order(groupsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gshq *GroupSettingHistoryQuery) AsOf(ctx context.Context, time time.Time) (*GroupSettingHistory, error) {
	return gshq.
		Where(groupsettinghistory.HistoryTimeLTE(time)).
		Order(groupsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Hush) History() *HushHistoryQuery {
	historyClient := NewHushHistoryClient(_m.config)
	return historyClient.Query().Where(hushhistory.Ref(_m.ID))
}

func (_m *HushHistory) Next(ctx context.Context) (*HushHistory, error) {
	client := NewHushHistoryClient(_m.config)
	return client.Query().
		Where(
			hushhistory.Ref(_m.Ref),
			hushhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(hushhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *HushHistory) Prev(ctx context.Context) (*HushHistory, error) {
	client := NewHushHistoryClient(_m.config)
	return client.Query().
		Where(
			hushhistory.Ref(_m.Ref),
			hushhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(hushhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (hhq *HushHistoryQuery) Earliest(ctx context.Context) (*HushHistory, error) {
	return hhq.
		Order(hushhistory.ByHistoryTime()).
		First(ctx)
}

func (hhq *HushHistoryQuery) Latest(ctx context.Context) (*HushHistory, error) {
	return hhq.
		Order(hushhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (hhq *HushHistoryQuery) AsOf(ctx context.Context, time time.Time) (*HushHistory, error) {
	return hhq.
		Where(hushhistory.HistoryTimeLTE(time)).
		Order(hushhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Integration) History() *IntegrationHistoryQuery {
	historyClient := NewIntegrationHistoryClient(_m.config)
	return historyClient.Query().Where(integrationhistory.Ref(_m.ID))
}

func (_m *IntegrationHistory) Next(ctx context.Context) (*IntegrationHistory, error) {
	client := NewIntegrationHistoryClient(_m.config)
	return client.Query().
		Where(
			integrationhistory.Ref(_m.Ref),
			integrationhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(integrationhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *IntegrationHistory) Prev(ctx context.Context) (*IntegrationHistory, error) {
	client := NewIntegrationHistoryClient(_m.config)
	return client.Query().
		Where(
			integrationhistory.Ref(_m.Ref),
			integrationhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(integrationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ihq *IntegrationHistoryQuery) Earliest(ctx context.Context) (*IntegrationHistory, error) {
	return ihq.
		Order(integrationhistory.ByHistoryTime()).
		First(ctx)
}

func (ihq *IntegrationHistoryQuery) Latest(ctx context.Context) (*IntegrationHistory, error) {
	return ihq.
		Order(integrationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ihq *IntegrationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*IntegrationHistory, error) {
	return ihq.
		Where(integrationhistory.HistoryTimeLTE(time)).
		Order(integrationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *InternalPolicy) History() *InternalPolicyHistoryQuery {
	historyClient := NewInternalPolicyHistoryClient(_m.config)
	return historyClient.Query().Where(internalpolicyhistory.Ref(_m.ID))
}

func (_m *InternalPolicyHistory) Next(ctx context.Context) (*InternalPolicyHistory, error) {
	client := NewInternalPolicyHistoryClient(_m.config)
	return client.Query().
		Where(
			internalpolicyhistory.Ref(_m.Ref),
			internalpolicyhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(internalpolicyhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *InternalPolicyHistory) Prev(ctx context.Context) (*InternalPolicyHistory, error) {
	client := NewInternalPolicyHistoryClient(_m.config)
	return client.Query().
		Where(
			internalpolicyhistory.Ref(_m.Ref),
			internalpolicyhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(internalpolicyhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (iphq *InternalPolicyHistoryQuery) Earliest(ctx context.Context) (*InternalPolicyHistory, error) {
	return iphq.
		Order(internalpolicyhistory.ByHistoryTime()).
		First(ctx)
}

func (iphq *InternalPolicyHistoryQuery) Latest(ctx context.Context) (*InternalPolicyHistory, error) {
	return iphq.
		Order(internalpolicyhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (iphq *InternalPolicyHistoryQuery) AsOf(ctx context.Context, time time.Time) (*InternalPolicyHistory, error) {
	return iphq.
		Where(internalpolicyhistory.HistoryTimeLTE(time)).
		Order(internalpolicyhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *JobTemplate) History() *JobTemplateHistoryQuery {
	historyClient := NewJobTemplateHistoryClient(_m.config)
	return historyClient.Query().Where(jobtemplatehistory.Ref(_m.ID))
}

func (_m *JobTemplateHistory) Next(ctx context.Context) (*JobTemplateHistory, error) {
	client := NewJobTemplateHistoryClient(_m.config)
	return client.Query().
		Where(
			jobtemplatehistory.Ref(_m.Ref),
			jobtemplatehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(jobtemplatehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *JobTemplateHistory) Prev(ctx context.Context) (*JobTemplateHistory, error) {
	client := NewJobTemplateHistoryClient(_m.config)
	return client.Query().
		Where(
			jobtemplatehistory.Ref(_m.Ref),
			jobtemplatehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(jobtemplatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (jthq *JobTemplateHistoryQuery) Earliest(ctx context.Context) (*JobTemplateHistory, error) {
	return jthq.
		Order(jobtemplatehistory.ByHistoryTime()).
		First(ctx)
}

func (jthq *JobTemplateHistoryQuery) Latest(ctx context.Context) (*JobTemplateHistory, error) {
	return jthq.
		Order(jobtemplatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (jthq *JobTemplateHistoryQuery) AsOf(ctx context.Context, time time.Time) (*JobTemplateHistory, error) {
	return jthq.
		Where(jobtemplatehistory.HistoryTimeLTE(time)).
		Order(jobtemplatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *MappableDomain) History() *MappableDomainHistoryQuery {
	historyClient := NewMappableDomainHistoryClient(_m.config)
	return historyClient.Query().Where(mappabledomainhistory.Ref(_m.ID))
}

func (_m *MappableDomainHistory) Next(ctx context.Context) (*MappableDomainHistory, error) {
	client := NewMappableDomainHistoryClient(_m.config)
	return client.Query().
		Where(
			mappabledomainhistory.Ref(_m.Ref),
			mappabledomainhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(mappabledomainhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *MappableDomainHistory) Prev(ctx context.Context) (*MappableDomainHistory, error) {
	client := NewMappableDomainHistoryClient(_m.config)
	return client.Query().
		Where(
			mappabledomainhistory.Ref(_m.Ref),
			mappabledomainhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(mappabledomainhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (mdhq *MappableDomainHistoryQuery) Earliest(ctx context.Context) (*MappableDomainHistory, error) {
	return mdhq.
		Order(mappabledomainhistory.ByHistoryTime()).
		First(ctx)
}

func (mdhq *MappableDomainHistoryQuery) Latest(ctx context.Context) (*MappableDomainHistory, error) {
	return mdhq.
		Order(mappabledomainhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (mdhq *MappableDomainHistoryQuery) AsOf(ctx context.Context, time time.Time) (*MappableDomainHistory, error) {
	return mdhq.
		Where(mappabledomainhistory.HistoryTimeLTE(time)).
		Order(mappabledomainhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *MappedControl) History() *MappedControlHistoryQuery {
	historyClient := NewMappedControlHistoryClient(_m.config)
	return historyClient.Query().Where(mappedcontrolhistory.Ref(_m.ID))
}

func (_m *MappedControlHistory) Next(ctx context.Context) (*MappedControlHistory, error) {
	client := NewMappedControlHistoryClient(_m.config)
	return client.Query().
		Where(
			mappedcontrolhistory.Ref(_m.Ref),
			mappedcontrolhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(mappedcontrolhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *MappedControlHistory) Prev(ctx context.Context) (*MappedControlHistory, error) {
	client := NewMappedControlHistoryClient(_m.config)
	return client.Query().
		Where(
			mappedcontrolhistory.Ref(_m.Ref),
			mappedcontrolhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(mappedcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (mchq *MappedControlHistoryQuery) Earliest(ctx context.Context) (*MappedControlHistory, error) {
	return mchq.
		Order(mappedcontrolhistory.ByHistoryTime()).
		First(ctx)
}

func (mchq *MappedControlHistoryQuery) Latest(ctx context.Context) (*MappedControlHistory, error) {
	return mchq.
		Order(mappedcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (mchq *MappedControlHistoryQuery) AsOf(ctx context.Context, time time.Time) (*MappedControlHistory, error) {
	return mchq.
		Where(mappedcontrolhistory.HistoryTimeLTE(time)).
		Order(mappedcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Narrative) History() *NarrativeHistoryQuery {
	historyClient := NewNarrativeHistoryClient(_m.config)
	return historyClient.Query().Where(narrativehistory.Ref(_m.ID))
}

func (_m *NarrativeHistory) Next(ctx context.Context) (*NarrativeHistory, error) {
	client := NewNarrativeHistoryClient(_m.config)
	return client.Query().
		Where(
			narrativehistory.Ref(_m.Ref),
			narrativehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(narrativehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *NarrativeHistory) Prev(ctx context.Context) (*NarrativeHistory, error) {
	client := NewNarrativeHistoryClient(_m.config)
	return client.Query().
		Where(
			narrativehistory.Ref(_m.Ref),
			narrativehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(narrativehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (nhq *NarrativeHistoryQuery) Earliest(ctx context.Context) (*NarrativeHistory, error) {
	return nhq.
		Order(narrativehistory.ByHistoryTime()).
		First(ctx)
}

func (nhq *NarrativeHistoryQuery) Latest(ctx context.Context) (*NarrativeHistory, error) {
	return nhq.
		Order(narrativehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (nhq *NarrativeHistoryQuery) AsOf(ctx context.Context, time time.Time) (*NarrativeHistory, error) {
	return nhq.
		Where(narrativehistory.HistoryTimeLTE(time)).
		Order(narrativehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Note) History() *NoteHistoryQuery {
	historyClient := NewNoteHistoryClient(_m.config)
	return historyClient.Query().Where(notehistory.Ref(_m.ID))
}

func (_m *NoteHistory) Next(ctx context.Context) (*NoteHistory, error) {
	client := NewNoteHistoryClient(_m.config)
	return client.Query().
		Where(
			notehistory.Ref(_m.Ref),
			notehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(notehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *NoteHistory) Prev(ctx context.Context) (*NoteHistory, error) {
	client := NewNoteHistoryClient(_m.config)
	return client.Query().
		Where(
			notehistory.Ref(_m.Ref),
			notehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(notehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (nhq *NoteHistoryQuery) Earliest(ctx context.Context) (*NoteHistory, error) {
	return nhq.
		Order(notehistory.ByHistoryTime()).
		First(ctx)
}

func (nhq *NoteHistoryQuery) Latest(ctx context.Context) (*NoteHistory, error) {
	return nhq.
		Order(notehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (nhq *NoteHistoryQuery) AsOf(ctx context.Context, time time.Time) (*NoteHistory, error) {
	return nhq.
		Where(notehistory.HistoryTimeLTE(time)).
		Order(notehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *OrgMembership) History() *OrgMembershipHistoryQuery {
	historyClient := NewOrgMembershipHistoryClient(_m.config)
	return historyClient.Query().Where(orgmembershiphistory.Ref(_m.ID))
}

func (_m *OrgMembershipHistory) Next(ctx context.Context) (*OrgMembershipHistory, error) {
	client := NewOrgMembershipHistoryClient(_m.config)
	return client.Query().
		Where(
			orgmembershiphistory.Ref(_m.Ref),
			orgmembershiphistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(orgmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (_m *OrgMembershipHistory) Prev(ctx context.Context) (*OrgMembershipHistory, error) {
	client := NewOrgMembershipHistoryClient(_m.config)
	return client.Query().
		Where(
			orgmembershiphistory.Ref(_m.Ref),
			orgmembershiphistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(orgmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (omhq *OrgMembershipHistoryQuery) Earliest(ctx context.Context) (*OrgMembershipHistory, error) {
	return omhq.
		Order(orgmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (omhq *OrgMembershipHistoryQuery) Latest(ctx context.Context) (*OrgMembershipHistory, error) {
	return omhq.
		Order(orgmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (omhq *OrgMembershipHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrgMembershipHistory, error) {
	return omhq.
		Where(orgmembershiphistory.HistoryTimeLTE(time)).
		Order(orgmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *OrgSubscription) History() *OrgSubscriptionHistoryQuery {
	historyClient := NewOrgSubscriptionHistoryClient(_m.config)
	return historyClient.Query().Where(orgsubscriptionhistory.Ref(_m.ID))
}

func (_m *OrgSubscriptionHistory) Next(ctx context.Context) (*OrgSubscriptionHistory, error) {
	client := NewOrgSubscriptionHistoryClient(_m.config)
	return client.Query().
		Where(
			orgsubscriptionhistory.Ref(_m.Ref),
			orgsubscriptionhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(orgsubscriptionhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *OrgSubscriptionHistory) Prev(ctx context.Context) (*OrgSubscriptionHistory, error) {
	client := NewOrgSubscriptionHistoryClient(_m.config)
	return client.Query().
		Where(
			orgsubscriptionhistory.Ref(_m.Ref),
			orgsubscriptionhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(orgsubscriptionhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (oshq *OrgSubscriptionHistoryQuery) Earliest(ctx context.Context) (*OrgSubscriptionHistory, error) {
	return oshq.
		Order(orgsubscriptionhistory.ByHistoryTime()).
		First(ctx)
}

func (oshq *OrgSubscriptionHistoryQuery) Latest(ctx context.Context) (*OrgSubscriptionHistory, error) {
	return oshq.
		Order(orgsubscriptionhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (oshq *OrgSubscriptionHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrgSubscriptionHistory, error) {
	return oshq.
		Where(orgsubscriptionhistory.HistoryTimeLTE(time)).
		Order(orgsubscriptionhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Organization) History() *OrganizationHistoryQuery {
	historyClient := NewOrganizationHistoryClient(_m.config)
	return historyClient.Query().Where(organizationhistory.Ref(_m.ID))
}

func (_m *OrganizationHistory) Next(ctx context.Context) (*OrganizationHistory, error) {
	client := NewOrganizationHistoryClient(_m.config)
	return client.Query().
		Where(
			organizationhistory.Ref(_m.Ref),
			organizationhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(organizationhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *OrganizationHistory) Prev(ctx context.Context) (*OrganizationHistory, error) {
	client := NewOrganizationHistoryClient(_m.config)
	return client.Query().
		Where(
			organizationhistory.Ref(_m.Ref),
			organizationhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) Earliest(ctx context.Context) (*OrganizationHistory, error) {
	return ohq.
		Order(organizationhistory.ByHistoryTime()).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) Latest(ctx context.Context) (*OrganizationHistory, error) {
	return ohq.
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrganizationHistory, error) {
	return ohq.
		Where(organizationhistory.HistoryTimeLTE(time)).
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *OrganizationSetting) History() *OrganizationSettingHistoryQuery {
	historyClient := NewOrganizationSettingHistoryClient(_m.config)
	return historyClient.Query().Where(organizationsettinghistory.Ref(_m.ID))
}

func (_m *OrganizationSettingHistory) Next(ctx context.Context) (*OrganizationSettingHistory, error) {
	client := NewOrganizationSettingHistoryClient(_m.config)
	return client.Query().
		Where(
			organizationsettinghistory.Ref(_m.Ref),
			organizationsettinghistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(organizationsettinghistory.ByHistoryTime()).
		First(ctx)
}

func (_m *OrganizationSettingHistory) Prev(ctx context.Context) (*OrganizationSettingHistory, error) {
	client := NewOrganizationSettingHistoryClient(_m.config)
	return client.Query().
		Where(
			organizationsettinghistory.Ref(_m.Ref),
			organizationsettinghistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(organizationsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (oshq *OrganizationSettingHistoryQuery) Earliest(ctx context.Context) (*OrganizationSettingHistory, error) {
	return oshq.
		Order(organizationsettinghistory.ByHistoryTime()).
		First(ctx)
}

func (oshq *OrganizationSettingHistoryQuery) Latest(ctx context.Context) (*OrganizationSettingHistory, error) {
	return oshq.
		Order(organizationsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (oshq *OrganizationSettingHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrganizationSettingHistory, error) {
	return oshq.
		Where(organizationsettinghistory.HistoryTimeLTE(time)).
		Order(organizationsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Procedure) History() *ProcedureHistoryQuery {
	historyClient := NewProcedureHistoryClient(_m.config)
	return historyClient.Query().Where(procedurehistory.Ref(_m.ID))
}

func (_m *ProcedureHistory) Next(ctx context.Context) (*ProcedureHistory, error) {
	client := NewProcedureHistoryClient(_m.config)
	return client.Query().
		Where(
			procedurehistory.Ref(_m.Ref),
			procedurehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(procedurehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ProcedureHistory) Prev(ctx context.Context) (*ProcedureHistory, error) {
	client := NewProcedureHistoryClient(_m.config)
	return client.Query().
		Where(
			procedurehistory.Ref(_m.Ref),
			procedurehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(procedurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (phq *ProcedureHistoryQuery) Earliest(ctx context.Context) (*ProcedureHistory, error) {
	return phq.
		Order(procedurehistory.ByHistoryTime()).
		First(ctx)
}

func (phq *ProcedureHistoryQuery) Latest(ctx context.Context) (*ProcedureHistory, error) {
	return phq.
		Order(procedurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (phq *ProcedureHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ProcedureHistory, error) {
	return phq.
		Where(procedurehistory.HistoryTimeLTE(time)).
		Order(procedurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Program) History() *ProgramHistoryQuery {
	historyClient := NewProgramHistoryClient(_m.config)
	return historyClient.Query().Where(programhistory.Ref(_m.ID))
}

func (_m *ProgramHistory) Next(ctx context.Context) (*ProgramHistory, error) {
	client := NewProgramHistoryClient(_m.config)
	return client.Query().
		Where(
			programhistory.Ref(_m.Ref),
			programhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(programhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ProgramHistory) Prev(ctx context.Context) (*ProgramHistory, error) {
	client := NewProgramHistoryClient(_m.config)
	return client.Query().
		Where(
			programhistory.Ref(_m.Ref),
			programhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(programhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (phq *ProgramHistoryQuery) Earliest(ctx context.Context) (*ProgramHistory, error) {
	return phq.
		Order(programhistory.ByHistoryTime()).
		First(ctx)
}

func (phq *ProgramHistoryQuery) Latest(ctx context.Context) (*ProgramHistory, error) {
	return phq.
		Order(programhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (phq *ProgramHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ProgramHistory, error) {
	return phq.
		Where(programhistory.HistoryTimeLTE(time)).
		Order(programhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *ProgramMembership) History() *ProgramMembershipHistoryQuery {
	historyClient := NewProgramMembershipHistoryClient(_m.config)
	return historyClient.Query().Where(programmembershiphistory.Ref(_m.ID))
}

func (_m *ProgramMembershipHistory) Next(ctx context.Context) (*ProgramMembershipHistory, error) {
	client := NewProgramMembershipHistoryClient(_m.config)
	return client.Query().
		Where(
			programmembershiphistory.Ref(_m.Ref),
			programmembershiphistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(programmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ProgramMembershipHistory) Prev(ctx context.Context) (*ProgramMembershipHistory, error) {
	client := NewProgramMembershipHistoryClient(_m.config)
	return client.Query().
		Where(
			programmembershiphistory.Ref(_m.Ref),
			programmembershiphistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(programmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (pmhq *ProgramMembershipHistoryQuery) Earliest(ctx context.Context) (*ProgramMembershipHistory, error) {
	return pmhq.
		Order(programmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (pmhq *ProgramMembershipHistoryQuery) Latest(ctx context.Context) (*ProgramMembershipHistory, error) {
	return pmhq.
		Order(programmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (pmhq *ProgramMembershipHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ProgramMembershipHistory, error) {
	return pmhq.
		Where(programmembershiphistory.HistoryTimeLTE(time)).
		Order(programmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Risk) History() *RiskHistoryQuery {
	historyClient := NewRiskHistoryClient(_m.config)
	return historyClient.Query().Where(riskhistory.Ref(_m.ID))
}

func (_m *RiskHistory) Next(ctx context.Context) (*RiskHistory, error) {
	client := NewRiskHistoryClient(_m.config)
	return client.Query().
		Where(
			riskhistory.Ref(_m.Ref),
			riskhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(riskhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *RiskHistory) Prev(ctx context.Context) (*RiskHistory, error) {
	client := NewRiskHistoryClient(_m.config)
	return client.Query().
		Where(
			riskhistory.Ref(_m.Ref),
			riskhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(riskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (rhq *RiskHistoryQuery) Earliest(ctx context.Context) (*RiskHistory, error) {
	return rhq.
		Order(riskhistory.ByHistoryTime()).
		First(ctx)
}

func (rhq *RiskHistoryQuery) Latest(ctx context.Context) (*RiskHistory, error) {
	return rhq.
		Order(riskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (rhq *RiskHistoryQuery) AsOf(ctx context.Context, time time.Time) (*RiskHistory, error) {
	return rhq.
		Where(riskhistory.HistoryTimeLTE(time)).
		Order(riskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Scan) History() *ScanHistoryQuery {
	historyClient := NewScanHistoryClient(_m.config)
	return historyClient.Query().Where(scanhistory.Ref(_m.ID))
}

func (_m *ScanHistory) Next(ctx context.Context) (*ScanHistory, error) {
	client := NewScanHistoryClient(_m.config)
	return client.Query().
		Where(
			scanhistory.Ref(_m.Ref),
			scanhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(scanhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ScanHistory) Prev(ctx context.Context) (*ScanHistory, error) {
	client := NewScanHistoryClient(_m.config)
	return client.Query().
		Where(
			scanhistory.Ref(_m.Ref),
			scanhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(scanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *ScanHistoryQuery) Earliest(ctx context.Context) (*ScanHistory, error) {
	return shq.
		Order(scanhistory.ByHistoryTime()).
		First(ctx)
}

func (shq *ScanHistoryQuery) Latest(ctx context.Context) (*ScanHistory, error) {
	return shq.
		Order(scanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *ScanHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ScanHistory, error) {
	return shq.
		Where(scanhistory.HistoryTimeLTE(time)).
		Order(scanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *ScheduledJob) History() *ScheduledJobHistoryQuery {
	historyClient := NewScheduledJobHistoryClient(_m.config)
	return historyClient.Query().Where(scheduledjobhistory.Ref(_m.ID))
}

func (_m *ScheduledJobHistory) Next(ctx context.Context) (*ScheduledJobHistory, error) {
	client := NewScheduledJobHistoryClient(_m.config)
	return client.Query().
		Where(
			scheduledjobhistory.Ref(_m.Ref),
			scheduledjobhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(scheduledjobhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *ScheduledJobHistory) Prev(ctx context.Context) (*ScheduledJobHistory, error) {
	client := NewScheduledJobHistoryClient(_m.config)
	return client.Query().
		Where(
			scheduledjobhistory.Ref(_m.Ref),
			scheduledjobhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(scheduledjobhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (sjhq *ScheduledJobHistoryQuery) Earliest(ctx context.Context) (*ScheduledJobHistory, error) {
	return sjhq.
		Order(scheduledjobhistory.ByHistoryTime()).
		First(ctx)
}

func (sjhq *ScheduledJobHistoryQuery) Latest(ctx context.Context) (*ScheduledJobHistory, error) {
	return sjhq.
		Order(scheduledjobhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (sjhq *ScheduledJobHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ScheduledJobHistory, error) {
	return sjhq.
		Where(scheduledjobhistory.HistoryTimeLTE(time)).
		Order(scheduledjobhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Standard) History() *StandardHistoryQuery {
	historyClient := NewStandardHistoryClient(_m.config)
	return historyClient.Query().Where(standardhistory.Ref(_m.ID))
}

func (_m *StandardHistory) Next(ctx context.Context) (*StandardHistory, error) {
	client := NewStandardHistoryClient(_m.config)
	return client.Query().
		Where(
			standardhistory.Ref(_m.Ref),
			standardhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(standardhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *StandardHistory) Prev(ctx context.Context) (*StandardHistory, error) {
	client := NewStandardHistoryClient(_m.config)
	return client.Query().
		Where(
			standardhistory.Ref(_m.Ref),
			standardhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(standardhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *StandardHistoryQuery) Earliest(ctx context.Context) (*StandardHistory, error) {
	return shq.
		Order(standardhistory.ByHistoryTime()).
		First(ctx)
}

func (shq *StandardHistoryQuery) Latest(ctx context.Context) (*StandardHistory, error) {
	return shq.
		Order(standardhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *StandardHistoryQuery) AsOf(ctx context.Context, time time.Time) (*StandardHistory, error) {
	return shq.
		Where(standardhistory.HistoryTimeLTE(time)).
		Order(standardhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Subcontrol) History() *SubcontrolHistoryQuery {
	historyClient := NewSubcontrolHistoryClient(_m.config)
	return historyClient.Query().Where(subcontrolhistory.Ref(_m.ID))
}

func (_m *SubcontrolHistory) Next(ctx context.Context) (*SubcontrolHistory, error) {
	client := NewSubcontrolHistoryClient(_m.config)
	return client.Query().
		Where(
			subcontrolhistory.Ref(_m.Ref),
			subcontrolhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(subcontrolhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *SubcontrolHistory) Prev(ctx context.Context) (*SubcontrolHistory, error) {
	client := NewSubcontrolHistoryClient(_m.config)
	return client.Query().
		Where(
			subcontrolhistory.Ref(_m.Ref),
			subcontrolhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(subcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *SubcontrolHistoryQuery) Earliest(ctx context.Context) (*SubcontrolHistory, error) {
	return shq.
		Order(subcontrolhistory.ByHistoryTime()).
		First(ctx)
}

func (shq *SubcontrolHistoryQuery) Latest(ctx context.Context) (*SubcontrolHistory, error) {
	return shq.
		Order(subcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *SubcontrolHistoryQuery) AsOf(ctx context.Context, time time.Time) (*SubcontrolHistory, error) {
	return shq.
		Where(subcontrolhistory.HistoryTimeLTE(time)).
		Order(subcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Subprocessor) History() *SubprocessorHistoryQuery {
	historyClient := NewSubprocessorHistoryClient(_m.config)
	return historyClient.Query().Where(subprocessorhistory.Ref(_m.ID))
}

func (_m *SubprocessorHistory) Next(ctx context.Context) (*SubprocessorHistory, error) {
	client := NewSubprocessorHistoryClient(_m.config)
	return client.Query().
		Where(
			subprocessorhistory.Ref(_m.Ref),
			subprocessorhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(subprocessorhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *SubprocessorHistory) Prev(ctx context.Context) (*SubprocessorHistory, error) {
	client := NewSubprocessorHistoryClient(_m.config)
	return client.Query().
		Where(
			subprocessorhistory.Ref(_m.Ref),
			subprocessorhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(subprocessorhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *SubprocessorHistoryQuery) Earliest(ctx context.Context) (*SubprocessorHistory, error) {
	return shq.
		Order(subprocessorhistory.ByHistoryTime()).
		First(ctx)
}

func (shq *SubprocessorHistoryQuery) Latest(ctx context.Context) (*SubprocessorHistory, error) {
	return shq.
		Order(subprocessorhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *SubprocessorHistoryQuery) AsOf(ctx context.Context, time time.Time) (*SubprocessorHistory, error) {
	return shq.
		Where(subprocessorhistory.HistoryTimeLTE(time)).
		Order(subprocessorhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Task) History() *TaskHistoryQuery {
	historyClient := NewTaskHistoryClient(_m.config)
	return historyClient.Query().Where(taskhistory.Ref(_m.ID))
}

func (_m *TaskHistory) Next(ctx context.Context) (*TaskHistory, error) {
	client := NewTaskHistoryClient(_m.config)
	return client.Query().
		Where(
			taskhistory.Ref(_m.Ref),
			taskhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(taskhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *TaskHistory) Prev(ctx context.Context) (*TaskHistory, error) {
	client := NewTaskHistoryClient(_m.config)
	return client.Query().
		Where(
			taskhistory.Ref(_m.Ref),
			taskhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(taskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (thq *TaskHistoryQuery) Earliest(ctx context.Context) (*TaskHistory, error) {
	return thq.
		Order(taskhistory.ByHistoryTime()).
		First(ctx)
}

func (thq *TaskHistoryQuery) Latest(ctx context.Context) (*TaskHistory, error) {
	return thq.
		Order(taskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (thq *TaskHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TaskHistory, error) {
	return thq.
		Where(taskhistory.HistoryTimeLTE(time)).
		Order(taskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *Template) History() *TemplateHistoryQuery {
	historyClient := NewTemplateHistoryClient(_m.config)
	return historyClient.Query().Where(templatehistory.Ref(_m.ID))
}

func (_m *TemplateHistory) Next(ctx context.Context) (*TemplateHistory, error) {
	client := NewTemplateHistoryClient(_m.config)
	return client.Query().
		Where(
			templatehistory.Ref(_m.Ref),
			templatehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(templatehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *TemplateHistory) Prev(ctx context.Context) (*TemplateHistory, error) {
	client := NewTemplateHistoryClient(_m.config)
	return client.Query().
		Where(
			templatehistory.Ref(_m.Ref),
			templatehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(templatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (thq *TemplateHistoryQuery) Earliest(ctx context.Context) (*TemplateHistory, error) {
	return thq.
		Order(templatehistory.ByHistoryTime()).
		First(ctx)
}

func (thq *TemplateHistoryQuery) Latest(ctx context.Context) (*TemplateHistory, error) {
	return thq.
		Order(templatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (thq *TemplateHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TemplateHistory, error) {
	return thq.
		Where(templatehistory.HistoryTimeLTE(time)).
		Order(templatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *TrustCenter) History() *TrustCenterHistoryQuery {
	historyClient := NewTrustCenterHistoryClient(_m.config)
	return historyClient.Query().Where(trustcenterhistory.Ref(_m.ID))
}

func (_m *TrustCenterHistory) Next(ctx context.Context) (*TrustCenterHistory, error) {
	client := NewTrustCenterHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcenterhistory.Ref(_m.Ref),
			trustcenterhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(trustcenterhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *TrustCenterHistory) Prev(ctx context.Context) (*TrustCenterHistory, error) {
	client := NewTrustCenterHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcenterhistory.Ref(_m.Ref),
			trustcenterhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(trustcenterhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tchq *TrustCenterHistoryQuery) Earliest(ctx context.Context) (*TrustCenterHistory, error) {
	return tchq.
		Order(trustcenterhistory.ByHistoryTime()).
		First(ctx)
}

func (tchq *TrustCenterHistoryQuery) Latest(ctx context.Context) (*TrustCenterHistory, error) {
	return tchq.
		Order(trustcenterhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tchq *TrustCenterHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TrustCenterHistory, error) {
	return tchq.
		Where(trustcenterhistory.HistoryTimeLTE(time)).
		Order(trustcenterhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *TrustCenterCompliance) History() *TrustCenterComplianceHistoryQuery {
	historyClient := NewTrustCenterComplianceHistoryClient(_m.config)
	return historyClient.Query().Where(trustcentercompliancehistory.Ref(_m.ID))
}

func (_m *TrustCenterComplianceHistory) Next(ctx context.Context) (*TrustCenterComplianceHistory, error) {
	client := NewTrustCenterComplianceHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcentercompliancehistory.Ref(_m.Ref),
			trustcentercompliancehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(trustcentercompliancehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *TrustCenterComplianceHistory) Prev(ctx context.Context) (*TrustCenterComplianceHistory, error) {
	client := NewTrustCenterComplianceHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcentercompliancehistory.Ref(_m.Ref),
			trustcentercompliancehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(trustcentercompliancehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tcchq *TrustCenterComplianceHistoryQuery) Earliest(ctx context.Context) (*TrustCenterComplianceHistory, error) {
	return tcchq.
		Order(trustcentercompliancehistory.ByHistoryTime()).
		First(ctx)
}

func (tcchq *TrustCenterComplianceHistoryQuery) Latest(ctx context.Context) (*TrustCenterComplianceHistory, error) {
	return tcchq.
		Order(trustcentercompliancehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tcchq *TrustCenterComplianceHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TrustCenterComplianceHistory, error) {
	return tcchq.
		Where(trustcentercompliancehistory.HistoryTimeLTE(time)).
		Order(trustcentercompliancehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *TrustCenterDoc) History() *TrustCenterDocHistoryQuery {
	historyClient := NewTrustCenterDocHistoryClient(_m.config)
	return historyClient.Query().Where(trustcenterdochistory.Ref(_m.ID))
}

func (_m *TrustCenterDocHistory) Next(ctx context.Context) (*TrustCenterDocHistory, error) {
	client := NewTrustCenterDocHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcenterdochistory.Ref(_m.Ref),
			trustcenterdochistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(trustcenterdochistory.ByHistoryTime()).
		First(ctx)
}

func (_m *TrustCenterDocHistory) Prev(ctx context.Context) (*TrustCenterDocHistory, error) {
	client := NewTrustCenterDocHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcenterdochistory.Ref(_m.Ref),
			trustcenterdochistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(trustcenterdochistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tcdhq *TrustCenterDocHistoryQuery) Earliest(ctx context.Context) (*TrustCenterDocHistory, error) {
	return tcdhq.
		Order(trustcenterdochistory.ByHistoryTime()).
		First(ctx)
}

func (tcdhq *TrustCenterDocHistoryQuery) Latest(ctx context.Context) (*TrustCenterDocHistory, error) {
	return tcdhq.
		Order(trustcenterdochistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tcdhq *TrustCenterDocHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TrustCenterDocHistory, error) {
	return tcdhq.
		Where(trustcenterdochistory.HistoryTimeLTE(time)).
		Order(trustcenterdochistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *TrustCenterSetting) History() *TrustCenterSettingHistoryQuery {
	historyClient := NewTrustCenterSettingHistoryClient(_m.config)
	return historyClient.Query().Where(trustcentersettinghistory.Ref(_m.ID))
}

func (_m *TrustCenterSettingHistory) Next(ctx context.Context) (*TrustCenterSettingHistory, error) {
	client := NewTrustCenterSettingHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcentersettinghistory.Ref(_m.Ref),
			trustcentersettinghistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(trustcentersettinghistory.ByHistoryTime()).
		First(ctx)
}

func (_m *TrustCenterSettingHistory) Prev(ctx context.Context) (*TrustCenterSettingHistory, error) {
	client := NewTrustCenterSettingHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcentersettinghistory.Ref(_m.Ref),
			trustcentersettinghistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(trustcentersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tcshq *TrustCenterSettingHistoryQuery) Earliest(ctx context.Context) (*TrustCenterSettingHistory, error) {
	return tcshq.
		Order(trustcentersettinghistory.ByHistoryTime()).
		First(ctx)
}

func (tcshq *TrustCenterSettingHistoryQuery) Latest(ctx context.Context) (*TrustCenterSettingHistory, error) {
	return tcshq.
		Order(trustcentersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tcshq *TrustCenterSettingHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TrustCenterSettingHistory, error) {
	return tcshq.
		Where(trustcentersettinghistory.HistoryTimeLTE(time)).
		Order(trustcentersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *TrustCenterSubprocessor) History() *TrustCenterSubprocessorHistoryQuery {
	historyClient := NewTrustCenterSubprocessorHistoryClient(_m.config)
	return historyClient.Query().Where(trustcentersubprocessorhistory.Ref(_m.ID))
}

func (_m *TrustCenterSubprocessorHistory) Next(ctx context.Context) (*TrustCenterSubprocessorHistory, error) {
	client := NewTrustCenterSubprocessorHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcentersubprocessorhistory.Ref(_m.Ref),
			trustcentersubprocessorhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(trustcentersubprocessorhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *TrustCenterSubprocessorHistory) Prev(ctx context.Context) (*TrustCenterSubprocessorHistory, error) {
	client := NewTrustCenterSubprocessorHistoryClient(_m.config)
	return client.Query().
		Where(
			trustcentersubprocessorhistory.Ref(_m.Ref),
			trustcentersubprocessorhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(trustcentersubprocessorhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tcshq *TrustCenterSubprocessorHistoryQuery) Earliest(ctx context.Context) (*TrustCenterSubprocessorHistory, error) {
	return tcshq.
		Order(trustcentersubprocessorhistory.ByHistoryTime()).
		First(ctx)
}

func (tcshq *TrustCenterSubprocessorHistoryQuery) Latest(ctx context.Context) (*TrustCenterSubprocessorHistory, error) {
	return tcshq.
		Order(trustcentersubprocessorhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (tcshq *TrustCenterSubprocessorHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TrustCenterSubprocessorHistory, error) {
	return tcshq.
		Where(trustcentersubprocessorhistory.HistoryTimeLTE(time)).
		Order(trustcentersubprocessorhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *User) History() *UserHistoryQuery {
	historyClient := NewUserHistoryClient(_m.config)
	return historyClient.Query().Where(userhistory.Ref(_m.ID))
}

func (_m *UserHistory) Next(ctx context.Context) (*UserHistory, error) {
	client := NewUserHistoryClient(_m.config)
	return client.Query().
		Where(
			userhistory.Ref(_m.Ref),
			userhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(userhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *UserHistory) Prev(ctx context.Context) (*UserHistory, error) {
	client := NewUserHistoryClient(_m.config)
	return client.Query().
		Where(
			userhistory.Ref(_m.Ref),
			userhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(userhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (uhq *UserHistoryQuery) Earliest(ctx context.Context) (*UserHistory, error) {
	return uhq.
		Order(userhistory.ByHistoryTime()).
		First(ctx)
}

func (uhq *UserHistoryQuery) Latest(ctx context.Context) (*UserHistory, error) {
	return uhq.
		Order(userhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (uhq *UserHistoryQuery) AsOf(ctx context.Context, time time.Time) (*UserHistory, error) {
	return uhq.
		Where(userhistory.HistoryTimeLTE(time)).
		Order(userhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *UserSetting) History() *UserSettingHistoryQuery {
	historyClient := NewUserSettingHistoryClient(_m.config)
	return historyClient.Query().Where(usersettinghistory.Ref(_m.ID))
}

func (_m *UserSettingHistory) Next(ctx context.Context) (*UserSettingHistory, error) {
	client := NewUserSettingHistoryClient(_m.config)
	return client.Query().
		Where(
			usersettinghistory.Ref(_m.Ref),
			usersettinghistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(usersettinghistory.ByHistoryTime()).
		First(ctx)
}

func (_m *UserSettingHistory) Prev(ctx context.Context) (*UserSettingHistory, error) {
	client := NewUserSettingHistoryClient(_m.config)
	return client.Query().
		Where(
			usersettinghistory.Ref(_m.Ref),
			usersettinghistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(usersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ushq *UserSettingHistoryQuery) Earliest(ctx context.Context) (*UserSettingHistory, error) {
	return ushq.
		Order(usersettinghistory.ByHistoryTime()).
		First(ctx)
}

func (ushq *UserSettingHistoryQuery) Latest(ctx context.Context) (*UserSettingHistory, error) {
	return ushq.
		Order(usersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ushq *UserSettingHistoryQuery) AsOf(ctx context.Context, time time.Time) (*UserSettingHistory, error) {
	return ushq.
		Where(usersettinghistory.HistoryTimeLTE(time)).
		Order(usersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}
