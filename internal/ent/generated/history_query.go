// Code generated by entx.history, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlobjectivehistory"
	"github.com/theopenlane/core/internal/ent/generated/documentdatahistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeaturehistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/entityhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/eventhistory"
	"github.com/theopenlane/core/internal/ent/generated/featurehistory"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/integrationhistory"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicyhistory"
	"github.com/theopenlane/core/internal/ent/generated/narrativehistory"
	"github.com/theopenlane/core/internal/ent/generated/notehistory"
	"github.com/theopenlane/core/internal/ent/generated/oauthproviderhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/internal/ent/generated/standardhistory"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/internal/ent/generated/userhistory"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/webhookhistory"
)

func (ap *ActionPlan) History() *ActionPlanHistoryQuery {
	historyClient := NewActionPlanHistoryClient(ap.config)
	return historyClient.Query().Where(actionplanhistory.Ref(ap.ID))
}

func (aph *ActionPlanHistory) Next(ctx context.Context) (*ActionPlanHistory, error) {
	client := NewActionPlanHistoryClient(aph.config)
	return client.Query().
		Where(
			actionplanhistory.Ref(aph.Ref),
			actionplanhistory.HistoryTimeGT(aph.HistoryTime),
		).
		Order(actionplanhistory.ByHistoryTime()).
		First(ctx)
}

func (aph *ActionPlanHistory) Prev(ctx context.Context) (*ActionPlanHistory, error) {
	client := NewActionPlanHistoryClient(aph.config)
	return client.Query().
		Where(
			actionplanhistory.Ref(aph.Ref),
			actionplanhistory.HistoryTimeLT(aph.HistoryTime),
		).
		Order(actionplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (aphq *ActionPlanHistoryQuery) Earliest(ctx context.Context) (*ActionPlanHistory, error) {
	return aphq.
		Order(actionplanhistory.ByHistoryTime()).
		First(ctx)
}

func (aphq *ActionPlanHistoryQuery) Latest(ctx context.Context) (*ActionPlanHistory, error) {
	return aphq.
		Order(actionplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (aphq *ActionPlanHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ActionPlanHistory, error) {
	return aphq.
		Where(actionplanhistory.HistoryTimeLTE(time)).
		Order(actionplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (c *Contact) History() *ContactHistoryQuery {
	historyClient := NewContactHistoryClient(c.config)
	return historyClient.Query().Where(contacthistory.Ref(c.ID))
}

func (ch *ContactHistory) Next(ctx context.Context) (*ContactHistory, error) {
	client := NewContactHistoryClient(ch.config)
	return client.Query().
		Where(
			contacthistory.Ref(ch.Ref),
			contacthistory.HistoryTimeGT(ch.HistoryTime),
		).
		Order(contacthistory.ByHistoryTime()).
		First(ctx)
}

func (ch *ContactHistory) Prev(ctx context.Context) (*ContactHistory, error) {
	client := NewContactHistoryClient(ch.config)
	return client.Query().
		Where(
			contacthistory.Ref(ch.Ref),
			contacthistory.HistoryTimeLT(ch.HistoryTime),
		).
		Order(contacthistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *ContactHistoryQuery) Earliest(ctx context.Context) (*ContactHistory, error) {
	return chq.
		Order(contacthistory.ByHistoryTime()).
		First(ctx)
}

func (chq *ContactHistoryQuery) Latest(ctx context.Context) (*ContactHistory, error) {
	return chq.
		Order(contacthistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *ContactHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ContactHistory, error) {
	return chq.
		Where(contacthistory.HistoryTimeLTE(time)).
		Order(contacthistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (c *Control) History() *ControlHistoryQuery {
	historyClient := NewControlHistoryClient(c.config)
	return historyClient.Query().Where(controlhistory.Ref(c.ID))
}

func (ch *ControlHistory) Next(ctx context.Context) (*ControlHistory, error) {
	client := NewControlHistoryClient(ch.config)
	return client.Query().
		Where(
			controlhistory.Ref(ch.Ref),
			controlhistory.HistoryTimeGT(ch.HistoryTime),
		).
		Order(controlhistory.ByHistoryTime()).
		First(ctx)
}

func (ch *ControlHistory) Prev(ctx context.Context) (*ControlHistory, error) {
	client := NewControlHistoryClient(ch.config)
	return client.Query().
		Where(
			controlhistory.Ref(ch.Ref),
			controlhistory.HistoryTimeLT(ch.HistoryTime),
		).
		Order(controlhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *ControlHistoryQuery) Earliest(ctx context.Context) (*ControlHistory, error) {
	return chq.
		Order(controlhistory.ByHistoryTime()).
		First(ctx)
}

func (chq *ControlHistoryQuery) Latest(ctx context.Context) (*ControlHistory, error) {
	return chq.
		Order(controlhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *ControlHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ControlHistory, error) {
	return chq.
		Where(controlhistory.HistoryTimeLTE(time)).
		Order(controlhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (co *ControlObjective) History() *ControlObjectiveHistoryQuery {
	historyClient := NewControlObjectiveHistoryClient(co.config)
	return historyClient.Query().Where(controlobjectivehistory.Ref(co.ID))
}

func (coh *ControlObjectiveHistory) Next(ctx context.Context) (*ControlObjectiveHistory, error) {
	client := NewControlObjectiveHistoryClient(coh.config)
	return client.Query().
		Where(
			controlobjectivehistory.Ref(coh.Ref),
			controlobjectivehistory.HistoryTimeGT(coh.HistoryTime),
		).
		Order(controlobjectivehistory.ByHistoryTime()).
		First(ctx)
}

func (coh *ControlObjectiveHistory) Prev(ctx context.Context) (*ControlObjectiveHistory, error) {
	client := NewControlObjectiveHistoryClient(coh.config)
	return client.Query().
		Where(
			controlobjectivehistory.Ref(coh.Ref),
			controlobjectivehistory.HistoryTimeLT(coh.HistoryTime),
		).
		Order(controlobjectivehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (cohq *ControlObjectiveHistoryQuery) Earliest(ctx context.Context) (*ControlObjectiveHistory, error) {
	return cohq.
		Order(controlobjectivehistory.ByHistoryTime()).
		First(ctx)
}

func (cohq *ControlObjectiveHistoryQuery) Latest(ctx context.Context) (*ControlObjectiveHistory, error) {
	return cohq.
		Order(controlobjectivehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (cohq *ControlObjectiveHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ControlObjectiveHistory, error) {
	return cohq.
		Where(controlobjectivehistory.HistoryTimeLTE(time)).
		Order(controlobjectivehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (dd *DocumentData) History() *DocumentDataHistoryQuery {
	historyClient := NewDocumentDataHistoryClient(dd.config)
	return historyClient.Query().Where(documentdatahistory.Ref(dd.ID))
}

func (ddh *DocumentDataHistory) Next(ctx context.Context) (*DocumentDataHistory, error) {
	client := NewDocumentDataHistoryClient(ddh.config)
	return client.Query().
		Where(
			documentdatahistory.Ref(ddh.Ref),
			documentdatahistory.HistoryTimeGT(ddh.HistoryTime),
		).
		Order(documentdatahistory.ByHistoryTime()).
		First(ctx)
}

func (ddh *DocumentDataHistory) Prev(ctx context.Context) (*DocumentDataHistory, error) {
	client := NewDocumentDataHistoryClient(ddh.config)
	return client.Query().
		Where(
			documentdatahistory.Ref(ddh.Ref),
			documentdatahistory.HistoryTimeLT(ddh.HistoryTime),
		).
		Order(documentdatahistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ddhq *DocumentDataHistoryQuery) Earliest(ctx context.Context) (*DocumentDataHistory, error) {
	return ddhq.
		Order(documentdatahistory.ByHistoryTime()).
		First(ctx)
}

func (ddhq *DocumentDataHistoryQuery) Latest(ctx context.Context) (*DocumentDataHistory, error) {
	return ddhq.
		Order(documentdatahistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ddhq *DocumentDataHistoryQuery) AsOf(ctx context.Context, time time.Time) (*DocumentDataHistory, error) {
	return ddhq.
		Where(documentdatahistory.HistoryTimeLTE(time)).
		Order(documentdatahistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (e *Entitlement) History() *EntitlementHistoryQuery {
	historyClient := NewEntitlementHistoryClient(e.config)
	return historyClient.Query().Where(entitlementhistory.Ref(e.ID))
}

func (eh *EntitlementHistory) Next(ctx context.Context) (*EntitlementHistory, error) {
	client := NewEntitlementHistoryClient(eh.config)
	return client.Query().
		Where(
			entitlementhistory.Ref(eh.Ref),
			entitlementhistory.HistoryTimeGT(eh.HistoryTime),
		).
		Order(entitlementhistory.ByHistoryTime()).
		First(ctx)
}

func (eh *EntitlementHistory) Prev(ctx context.Context) (*EntitlementHistory, error) {
	client := NewEntitlementHistoryClient(eh.config)
	return client.Query().
		Where(
			entitlementhistory.Ref(eh.Ref),
			entitlementhistory.HistoryTimeLT(eh.HistoryTime),
		).
		Order(entitlementhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EntitlementHistoryQuery) Earliest(ctx context.Context) (*EntitlementHistory, error) {
	return ehq.
		Order(entitlementhistory.ByHistoryTime()).
		First(ctx)
}

func (ehq *EntitlementHistoryQuery) Latest(ctx context.Context) (*EntitlementHistory, error) {
	return ehq.
		Order(entitlementhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EntitlementHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EntitlementHistory, error) {
	return ehq.
		Where(entitlementhistory.HistoryTimeLTE(time)).
		Order(entitlementhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ep *EntitlementPlan) History() *EntitlementPlanHistoryQuery {
	historyClient := NewEntitlementPlanHistoryClient(ep.config)
	return historyClient.Query().Where(entitlementplanhistory.Ref(ep.ID))
}

func (eph *EntitlementPlanHistory) Next(ctx context.Context) (*EntitlementPlanHistory, error) {
	client := NewEntitlementPlanHistoryClient(eph.config)
	return client.Query().
		Where(
			entitlementplanhistory.Ref(eph.Ref),
			entitlementplanhistory.HistoryTimeGT(eph.HistoryTime),
		).
		Order(entitlementplanhistory.ByHistoryTime()).
		First(ctx)
}

func (eph *EntitlementPlanHistory) Prev(ctx context.Context) (*EntitlementPlanHistory, error) {
	client := NewEntitlementPlanHistoryClient(eph.config)
	return client.Query().
		Where(
			entitlementplanhistory.Ref(eph.Ref),
			entitlementplanhistory.HistoryTimeLT(eph.HistoryTime),
		).
		Order(entitlementplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ephq *EntitlementPlanHistoryQuery) Earliest(ctx context.Context) (*EntitlementPlanHistory, error) {
	return ephq.
		Order(entitlementplanhistory.ByHistoryTime()).
		First(ctx)
}

func (ephq *EntitlementPlanHistoryQuery) Latest(ctx context.Context) (*EntitlementPlanHistory, error) {
	return ephq.
		Order(entitlementplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ephq *EntitlementPlanHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EntitlementPlanHistory, error) {
	return ephq.
		Where(entitlementplanhistory.HistoryTimeLTE(time)).
		Order(entitlementplanhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (epf *EntitlementPlanFeature) History() *EntitlementPlanFeatureHistoryQuery {
	historyClient := NewEntitlementPlanFeatureHistoryClient(epf.config)
	return historyClient.Query().Where(entitlementplanfeaturehistory.Ref(epf.ID))
}

func (epfh *EntitlementPlanFeatureHistory) Next(ctx context.Context) (*EntitlementPlanFeatureHistory, error) {
	client := NewEntitlementPlanFeatureHistoryClient(epfh.config)
	return client.Query().
		Where(
			entitlementplanfeaturehistory.Ref(epfh.Ref),
			entitlementplanfeaturehistory.HistoryTimeGT(epfh.HistoryTime),
		).
		Order(entitlementplanfeaturehistory.ByHistoryTime()).
		First(ctx)
}

func (epfh *EntitlementPlanFeatureHistory) Prev(ctx context.Context) (*EntitlementPlanFeatureHistory, error) {
	client := NewEntitlementPlanFeatureHistoryClient(epfh.config)
	return client.Query().
		Where(
			entitlementplanfeaturehistory.Ref(epfh.Ref),
			entitlementplanfeaturehistory.HistoryTimeLT(epfh.HistoryTime),
		).
		Order(entitlementplanfeaturehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (epfhq *EntitlementPlanFeatureHistoryQuery) Earliest(ctx context.Context) (*EntitlementPlanFeatureHistory, error) {
	return epfhq.
		Order(entitlementplanfeaturehistory.ByHistoryTime()).
		First(ctx)
}

func (epfhq *EntitlementPlanFeatureHistoryQuery) Latest(ctx context.Context) (*EntitlementPlanFeatureHistory, error) {
	return epfhq.
		Order(entitlementplanfeaturehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (epfhq *EntitlementPlanFeatureHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EntitlementPlanFeatureHistory, error) {
	return epfhq.
		Where(entitlementplanfeaturehistory.HistoryTimeLTE(time)).
		Order(entitlementplanfeaturehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (e *Entity) History() *EntityHistoryQuery {
	historyClient := NewEntityHistoryClient(e.config)
	return historyClient.Query().Where(entityhistory.Ref(e.ID))
}

func (eh *EntityHistory) Next(ctx context.Context) (*EntityHistory, error) {
	client := NewEntityHistoryClient(eh.config)
	return client.Query().
		Where(
			entityhistory.Ref(eh.Ref),
			entityhistory.HistoryTimeGT(eh.HistoryTime),
		).
		Order(entityhistory.ByHistoryTime()).
		First(ctx)
}

func (eh *EntityHistory) Prev(ctx context.Context) (*EntityHistory, error) {
	client := NewEntityHistoryClient(eh.config)
	return client.Query().
		Where(
			entityhistory.Ref(eh.Ref),
			entityhistory.HistoryTimeLT(eh.HistoryTime),
		).
		Order(entityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EntityHistoryQuery) Earliest(ctx context.Context) (*EntityHistory, error) {
	return ehq.
		Order(entityhistory.ByHistoryTime()).
		First(ctx)
}

func (ehq *EntityHistoryQuery) Latest(ctx context.Context) (*EntityHistory, error) {
	return ehq.
		Order(entityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EntityHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EntityHistory, error) {
	return ehq.
		Where(entityhistory.HistoryTimeLTE(time)).
		Order(entityhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (et *EntityType) History() *EntityTypeHistoryQuery {
	historyClient := NewEntityTypeHistoryClient(et.config)
	return historyClient.Query().Where(entitytypehistory.Ref(et.ID))
}

func (eth *EntityTypeHistory) Next(ctx context.Context) (*EntityTypeHistory, error) {
	client := NewEntityTypeHistoryClient(eth.config)
	return client.Query().
		Where(
			entitytypehistory.Ref(eth.Ref),
			entitytypehistory.HistoryTimeGT(eth.HistoryTime),
		).
		Order(entitytypehistory.ByHistoryTime()).
		First(ctx)
}

func (eth *EntityTypeHistory) Prev(ctx context.Context) (*EntityTypeHistory, error) {
	client := NewEntityTypeHistoryClient(eth.config)
	return client.Query().
		Where(
			entitytypehistory.Ref(eth.Ref),
			entitytypehistory.HistoryTimeLT(eth.HistoryTime),
		).
		Order(entitytypehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ethq *EntityTypeHistoryQuery) Earliest(ctx context.Context) (*EntityTypeHistory, error) {
	return ethq.
		Order(entitytypehistory.ByHistoryTime()).
		First(ctx)
}

func (ethq *EntityTypeHistoryQuery) Latest(ctx context.Context) (*EntityTypeHistory, error) {
	return ethq.
		Order(entitytypehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ethq *EntityTypeHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EntityTypeHistory, error) {
	return ethq.
		Where(entitytypehistory.HistoryTimeLTE(time)).
		Order(entitytypehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (e *Event) History() *EventHistoryQuery {
	historyClient := NewEventHistoryClient(e.config)
	return historyClient.Query().Where(eventhistory.Ref(e.ID))
}

func (eh *EventHistory) Next(ctx context.Context) (*EventHistory, error) {
	client := NewEventHistoryClient(eh.config)
	return client.Query().
		Where(
			eventhistory.Ref(eh.Ref),
			eventhistory.HistoryTimeGT(eh.HistoryTime),
		).
		Order(eventhistory.ByHistoryTime()).
		First(ctx)
}

func (eh *EventHistory) Prev(ctx context.Context) (*EventHistory, error) {
	client := NewEventHistoryClient(eh.config)
	return client.Query().
		Where(
			eventhistory.Ref(eh.Ref),
			eventhistory.HistoryTimeLT(eh.HistoryTime),
		).
		Order(eventhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EventHistoryQuery) Earliest(ctx context.Context) (*EventHistory, error) {
	return ehq.
		Order(eventhistory.ByHistoryTime()).
		First(ctx)
}

func (ehq *EventHistoryQuery) Latest(ctx context.Context) (*EventHistory, error) {
	return ehq.
		Order(eventhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ehq *EventHistoryQuery) AsOf(ctx context.Context, time time.Time) (*EventHistory, error) {
	return ehq.
		Where(eventhistory.HistoryTimeLTE(time)).
		Order(eventhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (f *Feature) History() *FeatureHistoryQuery {
	historyClient := NewFeatureHistoryClient(f.config)
	return historyClient.Query().Where(featurehistory.Ref(f.ID))
}

func (fh *FeatureHistory) Next(ctx context.Context) (*FeatureHistory, error) {
	client := NewFeatureHistoryClient(fh.config)
	return client.Query().
		Where(
			featurehistory.Ref(fh.Ref),
			featurehistory.HistoryTimeGT(fh.HistoryTime),
		).
		Order(featurehistory.ByHistoryTime()).
		First(ctx)
}

func (fh *FeatureHistory) Prev(ctx context.Context) (*FeatureHistory, error) {
	client := NewFeatureHistoryClient(fh.config)
	return client.Query().
		Where(
			featurehistory.Ref(fh.Ref),
			featurehistory.HistoryTimeLT(fh.HistoryTime),
		).
		Order(featurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (fhq *FeatureHistoryQuery) Earliest(ctx context.Context) (*FeatureHistory, error) {
	return fhq.
		Order(featurehistory.ByHistoryTime()).
		First(ctx)
}

func (fhq *FeatureHistoryQuery) Latest(ctx context.Context) (*FeatureHistory, error) {
	return fhq.
		Order(featurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (fhq *FeatureHistoryQuery) AsOf(ctx context.Context, time time.Time) (*FeatureHistory, error) {
	return fhq.
		Where(featurehistory.HistoryTimeLTE(time)).
		Order(featurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (f *File) History() *FileHistoryQuery {
	historyClient := NewFileHistoryClient(f.config)
	return historyClient.Query().Where(filehistory.Ref(f.ID))
}

func (fh *FileHistory) Next(ctx context.Context) (*FileHistory, error) {
	client := NewFileHistoryClient(fh.config)
	return client.Query().
		Where(
			filehistory.Ref(fh.Ref),
			filehistory.HistoryTimeGT(fh.HistoryTime),
		).
		Order(filehistory.ByHistoryTime()).
		First(ctx)
}

func (fh *FileHistory) Prev(ctx context.Context) (*FileHistory, error) {
	client := NewFileHistoryClient(fh.config)
	return client.Query().
		Where(
			filehistory.Ref(fh.Ref),
			filehistory.HistoryTimeLT(fh.HistoryTime),
		).
		Order(filehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (fhq *FileHistoryQuery) Earliest(ctx context.Context) (*FileHistory, error) {
	return fhq.
		Order(filehistory.ByHistoryTime()).
		First(ctx)
}

func (fhq *FileHistoryQuery) Latest(ctx context.Context) (*FileHistory, error) {
	return fhq.
		Order(filehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (fhq *FileHistoryQuery) AsOf(ctx context.Context, time time.Time) (*FileHistory, error) {
	return fhq.
		Where(filehistory.HistoryTimeLTE(time)).
		Order(filehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gr *Group) History() *GroupHistoryQuery {
	historyClient := NewGroupHistoryClient(gr.config)
	return historyClient.Query().Where(grouphistory.Ref(gr.ID))
}

func (gh *GroupHistory) Next(ctx context.Context) (*GroupHistory, error) {
	client := NewGroupHistoryClient(gh.config)
	return client.Query().
		Where(
			grouphistory.Ref(gh.Ref),
			grouphistory.HistoryTimeGT(gh.HistoryTime),
		).
		Order(grouphistory.ByHistoryTime()).
		First(ctx)
}

func (gh *GroupHistory) Prev(ctx context.Context) (*GroupHistory, error) {
	client := NewGroupHistoryClient(gh.config)
	return client.Query().
		Where(
			grouphistory.Ref(gh.Ref),
			grouphistory.HistoryTimeLT(gh.HistoryTime),
		).
		Order(grouphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ghq *GroupHistoryQuery) Earliest(ctx context.Context) (*GroupHistory, error) {
	return ghq.
		Order(grouphistory.ByHistoryTime()).
		First(ctx)
}

func (ghq *GroupHistoryQuery) Latest(ctx context.Context) (*GroupHistory, error) {
	return ghq.
		Order(grouphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ghq *GroupHistoryQuery) AsOf(ctx context.Context, time time.Time) (*GroupHistory, error) {
	return ghq.
		Where(grouphistory.HistoryTimeLTE(time)).
		Order(grouphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gm *GroupMembership) History() *GroupMembershipHistoryQuery {
	historyClient := NewGroupMembershipHistoryClient(gm.config)
	return historyClient.Query().Where(groupmembershiphistory.Ref(gm.ID))
}

func (gmh *GroupMembershipHistory) Next(ctx context.Context) (*GroupMembershipHistory, error) {
	client := NewGroupMembershipHistoryClient(gmh.config)
	return client.Query().
		Where(
			groupmembershiphistory.Ref(gmh.Ref),
			groupmembershiphistory.HistoryTimeGT(gmh.HistoryTime),
		).
		Order(groupmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (gmh *GroupMembershipHistory) Prev(ctx context.Context) (*GroupMembershipHistory, error) {
	client := NewGroupMembershipHistoryClient(gmh.config)
	return client.Query().
		Where(
			groupmembershiphistory.Ref(gmh.Ref),
			groupmembershiphistory.HistoryTimeLT(gmh.HistoryTime),
		).
		Order(groupmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gmhq *GroupMembershipHistoryQuery) Earliest(ctx context.Context) (*GroupMembershipHistory, error) {
	return gmhq.
		Order(groupmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (gmhq *GroupMembershipHistoryQuery) Latest(ctx context.Context) (*GroupMembershipHistory, error) {
	return gmhq.
		Order(groupmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gmhq *GroupMembershipHistoryQuery) AsOf(ctx context.Context, time time.Time) (*GroupMembershipHistory, error) {
	return gmhq.
		Where(groupmembershiphistory.HistoryTimeLTE(time)).
		Order(groupmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gs *GroupSetting) History() *GroupSettingHistoryQuery {
	historyClient := NewGroupSettingHistoryClient(gs.config)
	return historyClient.Query().Where(groupsettinghistory.Ref(gs.ID))
}

func (gsh *GroupSettingHistory) Next(ctx context.Context) (*GroupSettingHistory, error) {
	client := NewGroupSettingHistoryClient(gsh.config)
	return client.Query().
		Where(
			groupsettinghistory.Ref(gsh.Ref),
			groupsettinghistory.HistoryTimeGT(gsh.HistoryTime),
		).
		Order(groupsettinghistory.ByHistoryTime()).
		First(ctx)
}

func (gsh *GroupSettingHistory) Prev(ctx context.Context) (*GroupSettingHistory, error) {
	client := NewGroupSettingHistoryClient(gsh.config)
	return client.Query().
		Where(
			groupsettinghistory.Ref(gsh.Ref),
			groupsettinghistory.HistoryTimeLT(gsh.HistoryTime),
		).
		Order(groupsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gshq *GroupSettingHistoryQuery) Earliest(ctx context.Context) (*GroupSettingHistory, error) {
	return gshq.
		Order(groupsettinghistory.ByHistoryTime()).
		First(ctx)
}

func (gshq *GroupSettingHistoryQuery) Latest(ctx context.Context) (*GroupSettingHistory, error) {
	return gshq.
		Order(groupsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (gshq *GroupSettingHistoryQuery) AsOf(ctx context.Context, time time.Time) (*GroupSettingHistory, error) {
	return gshq.
		Where(groupsettinghistory.HistoryTimeLTE(time)).
		Order(groupsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (h *Hush) History() *HushHistoryQuery {
	historyClient := NewHushHistoryClient(h.config)
	return historyClient.Query().Where(hushhistory.Ref(h.ID))
}

func (hh *HushHistory) Next(ctx context.Context) (*HushHistory, error) {
	client := NewHushHistoryClient(hh.config)
	return client.Query().
		Where(
			hushhistory.Ref(hh.Ref),
			hushhistory.HistoryTimeGT(hh.HistoryTime),
		).
		Order(hushhistory.ByHistoryTime()).
		First(ctx)
}

func (hh *HushHistory) Prev(ctx context.Context) (*HushHistory, error) {
	client := NewHushHistoryClient(hh.config)
	return client.Query().
		Where(
			hushhistory.Ref(hh.Ref),
			hushhistory.HistoryTimeLT(hh.HistoryTime),
		).
		Order(hushhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (hhq *HushHistoryQuery) Earliest(ctx context.Context) (*HushHistory, error) {
	return hhq.
		Order(hushhistory.ByHistoryTime()).
		First(ctx)
}

func (hhq *HushHistoryQuery) Latest(ctx context.Context) (*HushHistory, error) {
	return hhq.
		Order(hushhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (hhq *HushHistoryQuery) AsOf(ctx context.Context, time time.Time) (*HushHistory, error) {
	return hhq.
		Where(hushhistory.HistoryTimeLTE(time)).
		Order(hushhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (i *Integration) History() *IntegrationHistoryQuery {
	historyClient := NewIntegrationHistoryClient(i.config)
	return historyClient.Query().Where(integrationhistory.Ref(i.ID))
}

func (ih *IntegrationHistory) Next(ctx context.Context) (*IntegrationHistory, error) {
	client := NewIntegrationHistoryClient(ih.config)
	return client.Query().
		Where(
			integrationhistory.Ref(ih.Ref),
			integrationhistory.HistoryTimeGT(ih.HistoryTime),
		).
		Order(integrationhistory.ByHistoryTime()).
		First(ctx)
}

func (ih *IntegrationHistory) Prev(ctx context.Context) (*IntegrationHistory, error) {
	client := NewIntegrationHistoryClient(ih.config)
	return client.Query().
		Where(
			integrationhistory.Ref(ih.Ref),
			integrationhistory.HistoryTimeLT(ih.HistoryTime),
		).
		Order(integrationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ihq *IntegrationHistoryQuery) Earliest(ctx context.Context) (*IntegrationHistory, error) {
	return ihq.
		Order(integrationhistory.ByHistoryTime()).
		First(ctx)
}

func (ihq *IntegrationHistoryQuery) Latest(ctx context.Context) (*IntegrationHistory, error) {
	return ihq.
		Order(integrationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ihq *IntegrationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*IntegrationHistory, error) {
	return ihq.
		Where(integrationhistory.HistoryTimeLTE(time)).
		Order(integrationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ip *InternalPolicy) History() *InternalPolicyHistoryQuery {
	historyClient := NewInternalPolicyHistoryClient(ip.config)
	return historyClient.Query().Where(internalpolicyhistory.Ref(ip.ID))
}

func (iph *InternalPolicyHistory) Next(ctx context.Context) (*InternalPolicyHistory, error) {
	client := NewInternalPolicyHistoryClient(iph.config)
	return client.Query().
		Where(
			internalpolicyhistory.Ref(iph.Ref),
			internalpolicyhistory.HistoryTimeGT(iph.HistoryTime),
		).
		Order(internalpolicyhistory.ByHistoryTime()).
		First(ctx)
}

func (iph *InternalPolicyHistory) Prev(ctx context.Context) (*InternalPolicyHistory, error) {
	client := NewInternalPolicyHistoryClient(iph.config)
	return client.Query().
		Where(
			internalpolicyhistory.Ref(iph.Ref),
			internalpolicyhistory.HistoryTimeLT(iph.HistoryTime),
		).
		Order(internalpolicyhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (iphq *InternalPolicyHistoryQuery) Earliest(ctx context.Context) (*InternalPolicyHistory, error) {
	return iphq.
		Order(internalpolicyhistory.ByHistoryTime()).
		First(ctx)
}

func (iphq *InternalPolicyHistoryQuery) Latest(ctx context.Context) (*InternalPolicyHistory, error) {
	return iphq.
		Order(internalpolicyhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (iphq *InternalPolicyHistoryQuery) AsOf(ctx context.Context, time time.Time) (*InternalPolicyHistory, error) {
	return iphq.
		Where(internalpolicyhistory.HistoryTimeLTE(time)).
		Order(internalpolicyhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (n *Narrative) History() *NarrativeHistoryQuery {
	historyClient := NewNarrativeHistoryClient(n.config)
	return historyClient.Query().Where(narrativehistory.Ref(n.ID))
}

func (nh *NarrativeHistory) Next(ctx context.Context) (*NarrativeHistory, error) {
	client := NewNarrativeHistoryClient(nh.config)
	return client.Query().
		Where(
			narrativehistory.Ref(nh.Ref),
			narrativehistory.HistoryTimeGT(nh.HistoryTime),
		).
		Order(narrativehistory.ByHistoryTime()).
		First(ctx)
}

func (nh *NarrativeHistory) Prev(ctx context.Context) (*NarrativeHistory, error) {
	client := NewNarrativeHistoryClient(nh.config)
	return client.Query().
		Where(
			narrativehistory.Ref(nh.Ref),
			narrativehistory.HistoryTimeLT(nh.HistoryTime),
		).
		Order(narrativehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (nhq *NarrativeHistoryQuery) Earliest(ctx context.Context) (*NarrativeHistory, error) {
	return nhq.
		Order(narrativehistory.ByHistoryTime()).
		First(ctx)
}

func (nhq *NarrativeHistoryQuery) Latest(ctx context.Context) (*NarrativeHistory, error) {
	return nhq.
		Order(narrativehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (nhq *NarrativeHistoryQuery) AsOf(ctx context.Context, time time.Time) (*NarrativeHistory, error) {
	return nhq.
		Where(narrativehistory.HistoryTimeLTE(time)).
		Order(narrativehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (n *Note) History() *NoteHistoryQuery {
	historyClient := NewNoteHistoryClient(n.config)
	return historyClient.Query().Where(notehistory.Ref(n.ID))
}

func (nh *NoteHistory) Next(ctx context.Context) (*NoteHistory, error) {
	client := NewNoteHistoryClient(nh.config)
	return client.Query().
		Where(
			notehistory.Ref(nh.Ref),
			notehistory.HistoryTimeGT(nh.HistoryTime),
		).
		Order(notehistory.ByHistoryTime()).
		First(ctx)
}

func (nh *NoteHistory) Prev(ctx context.Context) (*NoteHistory, error) {
	client := NewNoteHistoryClient(nh.config)
	return client.Query().
		Where(
			notehistory.Ref(nh.Ref),
			notehistory.HistoryTimeLT(nh.HistoryTime),
		).
		Order(notehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (nhq *NoteHistoryQuery) Earliest(ctx context.Context) (*NoteHistory, error) {
	return nhq.
		Order(notehistory.ByHistoryTime()).
		First(ctx)
}

func (nhq *NoteHistoryQuery) Latest(ctx context.Context) (*NoteHistory, error) {
	return nhq.
		Order(notehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (nhq *NoteHistoryQuery) AsOf(ctx context.Context, time time.Time) (*NoteHistory, error) {
	return nhq.
		Where(notehistory.HistoryTimeLTE(time)).
		Order(notehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (op *OauthProvider) History() *OauthProviderHistoryQuery {
	historyClient := NewOauthProviderHistoryClient(op.config)
	return historyClient.Query().Where(oauthproviderhistory.Ref(op.ID))
}

func (oph *OauthProviderHistory) Next(ctx context.Context) (*OauthProviderHistory, error) {
	client := NewOauthProviderHistoryClient(oph.config)
	return client.Query().
		Where(
			oauthproviderhistory.Ref(oph.Ref),
			oauthproviderhistory.HistoryTimeGT(oph.HistoryTime),
		).
		Order(oauthproviderhistory.ByHistoryTime()).
		First(ctx)
}

func (oph *OauthProviderHistory) Prev(ctx context.Context) (*OauthProviderHistory, error) {
	client := NewOauthProviderHistoryClient(oph.config)
	return client.Query().
		Where(
			oauthproviderhistory.Ref(oph.Ref),
			oauthproviderhistory.HistoryTimeLT(oph.HistoryTime),
		).
		Order(oauthproviderhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ophq *OauthProviderHistoryQuery) Earliest(ctx context.Context) (*OauthProviderHistory, error) {
	return ophq.
		Order(oauthproviderhistory.ByHistoryTime()).
		First(ctx)
}

func (ophq *OauthProviderHistoryQuery) Latest(ctx context.Context) (*OauthProviderHistory, error) {
	return ophq.
		Order(oauthproviderhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ophq *OauthProviderHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OauthProviderHistory, error) {
	return ophq.
		Where(oauthproviderhistory.HistoryTimeLTE(time)).
		Order(oauthproviderhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (om *OrgMembership) History() *OrgMembershipHistoryQuery {
	historyClient := NewOrgMembershipHistoryClient(om.config)
	return historyClient.Query().Where(orgmembershiphistory.Ref(om.ID))
}

func (omh *OrgMembershipHistory) Next(ctx context.Context) (*OrgMembershipHistory, error) {
	client := NewOrgMembershipHistoryClient(omh.config)
	return client.Query().
		Where(
			orgmembershiphistory.Ref(omh.Ref),
			orgmembershiphistory.HistoryTimeGT(omh.HistoryTime),
		).
		Order(orgmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (omh *OrgMembershipHistory) Prev(ctx context.Context) (*OrgMembershipHistory, error) {
	client := NewOrgMembershipHistoryClient(omh.config)
	return client.Query().
		Where(
			orgmembershiphistory.Ref(omh.Ref),
			orgmembershiphistory.HistoryTimeLT(omh.HistoryTime),
		).
		Order(orgmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (omhq *OrgMembershipHistoryQuery) Earliest(ctx context.Context) (*OrgMembershipHistory, error) {
	return omhq.
		Order(orgmembershiphistory.ByHistoryTime()).
		First(ctx)
}

func (omhq *OrgMembershipHistoryQuery) Latest(ctx context.Context) (*OrgMembershipHistory, error) {
	return omhq.
		Order(orgmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (omhq *OrgMembershipHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrgMembershipHistory, error) {
	return omhq.
		Where(orgmembershiphistory.HistoryTimeLTE(time)).
		Order(orgmembershiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (o *Organization) History() *OrganizationHistoryQuery {
	historyClient := NewOrganizationHistoryClient(o.config)
	return historyClient.Query().Where(organizationhistory.Ref(o.ID))
}

func (oh *OrganizationHistory) Next(ctx context.Context) (*OrganizationHistory, error) {
	client := NewOrganizationHistoryClient(oh.config)
	return client.Query().
		Where(
			organizationhistory.Ref(oh.Ref),
			organizationhistory.HistoryTimeGT(oh.HistoryTime),
		).
		Order(organizationhistory.ByHistoryTime()).
		First(ctx)
}

func (oh *OrganizationHistory) Prev(ctx context.Context) (*OrganizationHistory, error) {
	client := NewOrganizationHistoryClient(oh.config)
	return client.Query().
		Where(
			organizationhistory.Ref(oh.Ref),
			organizationhistory.HistoryTimeLT(oh.HistoryTime),
		).
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) Earliest(ctx context.Context) (*OrganizationHistory, error) {
	return ohq.
		Order(organizationhistory.ByHistoryTime()).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) Latest(ctx context.Context) (*OrganizationHistory, error) {
	return ohq.
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrganizationHistory, error) {
	return ohq.
		Where(organizationhistory.HistoryTimeLTE(time)).
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (os *OrganizationSetting) History() *OrganizationSettingHistoryQuery {
	historyClient := NewOrganizationSettingHistoryClient(os.config)
	return historyClient.Query().Where(organizationsettinghistory.Ref(os.ID))
}

func (osh *OrganizationSettingHistory) Next(ctx context.Context) (*OrganizationSettingHistory, error) {
	client := NewOrganizationSettingHistoryClient(osh.config)
	return client.Query().
		Where(
			organizationsettinghistory.Ref(osh.Ref),
			organizationsettinghistory.HistoryTimeGT(osh.HistoryTime),
		).
		Order(organizationsettinghistory.ByHistoryTime()).
		First(ctx)
}

func (osh *OrganizationSettingHistory) Prev(ctx context.Context) (*OrganizationSettingHistory, error) {
	client := NewOrganizationSettingHistoryClient(osh.config)
	return client.Query().
		Where(
			organizationsettinghistory.Ref(osh.Ref),
			organizationsettinghistory.HistoryTimeLT(osh.HistoryTime),
		).
		Order(organizationsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (oshq *OrganizationSettingHistoryQuery) Earliest(ctx context.Context) (*OrganizationSettingHistory, error) {
	return oshq.
		Order(organizationsettinghistory.ByHistoryTime()).
		First(ctx)
}

func (oshq *OrganizationSettingHistoryQuery) Latest(ctx context.Context) (*OrganizationSettingHistory, error) {
	return oshq.
		Order(organizationsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (oshq *OrganizationSettingHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrganizationSettingHistory, error) {
	return oshq.
		Where(organizationsettinghistory.HistoryTimeLTE(time)).
		Order(organizationsettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (pr *Procedure) History() *ProcedureHistoryQuery {
	historyClient := NewProcedureHistoryClient(pr.config)
	return historyClient.Query().Where(procedurehistory.Ref(pr.ID))
}

func (ph *ProcedureHistory) Next(ctx context.Context) (*ProcedureHistory, error) {
	client := NewProcedureHistoryClient(ph.config)
	return client.Query().
		Where(
			procedurehistory.Ref(ph.Ref),
			procedurehistory.HistoryTimeGT(ph.HistoryTime),
		).
		Order(procedurehistory.ByHistoryTime()).
		First(ctx)
}

func (ph *ProcedureHistory) Prev(ctx context.Context) (*ProcedureHistory, error) {
	client := NewProcedureHistoryClient(ph.config)
	return client.Query().
		Where(
			procedurehistory.Ref(ph.Ref),
			procedurehistory.HistoryTimeLT(ph.HistoryTime),
		).
		Order(procedurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (phq *ProcedureHistoryQuery) Earliest(ctx context.Context) (*ProcedureHistory, error) {
	return phq.
		Order(procedurehistory.ByHistoryTime()).
		First(ctx)
}

func (phq *ProcedureHistoryQuery) Latest(ctx context.Context) (*ProcedureHistory, error) {
	return phq.
		Order(procedurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (phq *ProcedureHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ProcedureHistory, error) {
	return phq.
		Where(procedurehistory.HistoryTimeLTE(time)).
		Order(procedurehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (pr *Program) History() *ProgramHistoryQuery {
	historyClient := NewProgramHistoryClient(pr.config)
	return historyClient.Query().Where(programhistory.Ref(pr.ID))
}

func (ph *ProgramHistory) Next(ctx context.Context) (*ProgramHistory, error) {
	client := NewProgramHistoryClient(ph.config)
	return client.Query().
		Where(
			programhistory.Ref(ph.Ref),
			programhistory.HistoryTimeGT(ph.HistoryTime),
		).
		Order(programhistory.ByHistoryTime()).
		First(ctx)
}

func (ph *ProgramHistory) Prev(ctx context.Context) (*ProgramHistory, error) {
	client := NewProgramHistoryClient(ph.config)
	return client.Query().
		Where(
			programhistory.Ref(ph.Ref),
			programhistory.HistoryTimeLT(ph.HistoryTime),
		).
		Order(programhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (phq *ProgramHistoryQuery) Earliest(ctx context.Context) (*ProgramHistory, error) {
	return phq.
		Order(programhistory.ByHistoryTime()).
		First(ctx)
}

func (phq *ProgramHistoryQuery) Latest(ctx context.Context) (*ProgramHistory, error) {
	return phq.
		Order(programhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (phq *ProgramHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ProgramHistory, error) {
	return phq.
		Where(programhistory.HistoryTimeLTE(time)).
		Order(programhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (r *Risk) History() *RiskHistoryQuery {
	historyClient := NewRiskHistoryClient(r.config)
	return historyClient.Query().Where(riskhistory.Ref(r.ID))
}

func (rh *RiskHistory) Next(ctx context.Context) (*RiskHistory, error) {
	client := NewRiskHistoryClient(rh.config)
	return client.Query().
		Where(
			riskhistory.Ref(rh.Ref),
			riskhistory.HistoryTimeGT(rh.HistoryTime),
		).
		Order(riskhistory.ByHistoryTime()).
		First(ctx)
}

func (rh *RiskHistory) Prev(ctx context.Context) (*RiskHistory, error) {
	client := NewRiskHistoryClient(rh.config)
	return client.Query().
		Where(
			riskhistory.Ref(rh.Ref),
			riskhistory.HistoryTimeLT(rh.HistoryTime),
		).
		Order(riskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (rhq *RiskHistoryQuery) Earliest(ctx context.Context) (*RiskHistory, error) {
	return rhq.
		Order(riskhistory.ByHistoryTime()).
		First(ctx)
}

func (rhq *RiskHistoryQuery) Latest(ctx context.Context) (*RiskHistory, error) {
	return rhq.
		Order(riskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (rhq *RiskHistoryQuery) AsOf(ctx context.Context, time time.Time) (*RiskHistory, error) {
	return rhq.
		Where(riskhistory.HistoryTimeLTE(time)).
		Order(riskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (s *Standard) History() *StandardHistoryQuery {
	historyClient := NewStandardHistoryClient(s.config)
	return historyClient.Query().Where(standardhistory.Ref(s.ID))
}

func (sh *StandardHistory) Next(ctx context.Context) (*StandardHistory, error) {
	client := NewStandardHistoryClient(sh.config)
	return client.Query().
		Where(
			standardhistory.Ref(sh.Ref),
			standardhistory.HistoryTimeGT(sh.HistoryTime),
		).
		Order(standardhistory.ByHistoryTime()).
		First(ctx)
}

func (sh *StandardHistory) Prev(ctx context.Context) (*StandardHistory, error) {
	client := NewStandardHistoryClient(sh.config)
	return client.Query().
		Where(
			standardhistory.Ref(sh.Ref),
			standardhistory.HistoryTimeLT(sh.HistoryTime),
		).
		Order(standardhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *StandardHistoryQuery) Earliest(ctx context.Context) (*StandardHistory, error) {
	return shq.
		Order(standardhistory.ByHistoryTime()).
		First(ctx)
}

func (shq *StandardHistoryQuery) Latest(ctx context.Context) (*StandardHistory, error) {
	return shq.
		Order(standardhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *StandardHistoryQuery) AsOf(ctx context.Context, time time.Time) (*StandardHistory, error) {
	return shq.
		Where(standardhistory.HistoryTimeLTE(time)).
		Order(standardhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (s *Subcontrol) History() *SubcontrolHistoryQuery {
	historyClient := NewSubcontrolHistoryClient(s.config)
	return historyClient.Query().Where(subcontrolhistory.Ref(s.ID))
}

func (sh *SubcontrolHistory) Next(ctx context.Context) (*SubcontrolHistory, error) {
	client := NewSubcontrolHistoryClient(sh.config)
	return client.Query().
		Where(
			subcontrolhistory.Ref(sh.Ref),
			subcontrolhistory.HistoryTimeGT(sh.HistoryTime),
		).
		Order(subcontrolhistory.ByHistoryTime()).
		First(ctx)
}

func (sh *SubcontrolHistory) Prev(ctx context.Context) (*SubcontrolHistory, error) {
	client := NewSubcontrolHistoryClient(sh.config)
	return client.Query().
		Where(
			subcontrolhistory.Ref(sh.Ref),
			subcontrolhistory.HistoryTimeLT(sh.HistoryTime),
		).
		Order(subcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *SubcontrolHistoryQuery) Earliest(ctx context.Context) (*SubcontrolHistory, error) {
	return shq.
		Order(subcontrolhistory.ByHistoryTime()).
		First(ctx)
}

func (shq *SubcontrolHistoryQuery) Latest(ctx context.Context) (*SubcontrolHistory, error) {
	return shq.
		Order(subcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *SubcontrolHistoryQuery) AsOf(ctx context.Context, time time.Time) (*SubcontrolHistory, error) {
	return shq.
		Where(subcontrolhistory.HistoryTimeLTE(time)).
		Order(subcontrolhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (t *Task) History() *TaskHistoryQuery {
	historyClient := NewTaskHistoryClient(t.config)
	return historyClient.Query().Where(taskhistory.Ref(t.ID))
}

func (th *TaskHistory) Next(ctx context.Context) (*TaskHistory, error) {
	client := NewTaskHistoryClient(th.config)
	return client.Query().
		Where(
			taskhistory.Ref(th.Ref),
			taskhistory.HistoryTimeGT(th.HistoryTime),
		).
		Order(taskhistory.ByHistoryTime()).
		First(ctx)
}

func (th *TaskHistory) Prev(ctx context.Context) (*TaskHistory, error) {
	client := NewTaskHistoryClient(th.config)
	return client.Query().
		Where(
			taskhistory.Ref(th.Ref),
			taskhistory.HistoryTimeLT(th.HistoryTime),
		).
		Order(taskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (thq *TaskHistoryQuery) Earliest(ctx context.Context) (*TaskHistory, error) {
	return thq.
		Order(taskhistory.ByHistoryTime()).
		First(ctx)
}

func (thq *TaskHistoryQuery) Latest(ctx context.Context) (*TaskHistory, error) {
	return thq.
		Order(taskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (thq *TaskHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TaskHistory, error) {
	return thq.
		Where(taskhistory.HistoryTimeLTE(time)).
		Order(taskhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (t *Template) History() *TemplateHistoryQuery {
	historyClient := NewTemplateHistoryClient(t.config)
	return historyClient.Query().Where(templatehistory.Ref(t.ID))
}

func (th *TemplateHistory) Next(ctx context.Context) (*TemplateHistory, error) {
	client := NewTemplateHistoryClient(th.config)
	return client.Query().
		Where(
			templatehistory.Ref(th.Ref),
			templatehistory.HistoryTimeGT(th.HistoryTime),
		).
		Order(templatehistory.ByHistoryTime()).
		First(ctx)
}

func (th *TemplateHistory) Prev(ctx context.Context) (*TemplateHistory, error) {
	client := NewTemplateHistoryClient(th.config)
	return client.Query().
		Where(
			templatehistory.Ref(th.Ref),
			templatehistory.HistoryTimeLT(th.HistoryTime),
		).
		Order(templatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (thq *TemplateHistoryQuery) Earliest(ctx context.Context) (*TemplateHistory, error) {
	return thq.
		Order(templatehistory.ByHistoryTime()).
		First(ctx)
}

func (thq *TemplateHistoryQuery) Latest(ctx context.Context) (*TemplateHistory, error) {
	return thq.
		Order(templatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (thq *TemplateHistoryQuery) AsOf(ctx context.Context, time time.Time) (*TemplateHistory, error) {
	return thq.
		Where(templatehistory.HistoryTimeLTE(time)).
		Order(templatehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (u *User) History() *UserHistoryQuery {
	historyClient := NewUserHistoryClient(u.config)
	return historyClient.Query().Where(userhistory.Ref(u.ID))
}

func (uh *UserHistory) Next(ctx context.Context) (*UserHistory, error) {
	client := NewUserHistoryClient(uh.config)
	return client.Query().
		Where(
			userhistory.Ref(uh.Ref),
			userhistory.HistoryTimeGT(uh.HistoryTime),
		).
		Order(userhistory.ByHistoryTime()).
		First(ctx)
}

func (uh *UserHistory) Prev(ctx context.Context) (*UserHistory, error) {
	client := NewUserHistoryClient(uh.config)
	return client.Query().
		Where(
			userhistory.Ref(uh.Ref),
			userhistory.HistoryTimeLT(uh.HistoryTime),
		).
		Order(userhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (uhq *UserHistoryQuery) Earliest(ctx context.Context) (*UserHistory, error) {
	return uhq.
		Order(userhistory.ByHistoryTime()).
		First(ctx)
}

func (uhq *UserHistoryQuery) Latest(ctx context.Context) (*UserHistory, error) {
	return uhq.
		Order(userhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (uhq *UserHistoryQuery) AsOf(ctx context.Context, time time.Time) (*UserHistory, error) {
	return uhq.
		Where(userhistory.HistoryTimeLTE(time)).
		Order(userhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (us *UserSetting) History() *UserSettingHistoryQuery {
	historyClient := NewUserSettingHistoryClient(us.config)
	return historyClient.Query().Where(usersettinghistory.Ref(us.ID))
}

func (ush *UserSettingHistory) Next(ctx context.Context) (*UserSettingHistory, error) {
	client := NewUserSettingHistoryClient(ush.config)
	return client.Query().
		Where(
			usersettinghistory.Ref(ush.Ref),
			usersettinghistory.HistoryTimeGT(ush.HistoryTime),
		).
		Order(usersettinghistory.ByHistoryTime()).
		First(ctx)
}

func (ush *UserSettingHistory) Prev(ctx context.Context) (*UserSettingHistory, error) {
	client := NewUserSettingHistoryClient(ush.config)
	return client.Query().
		Where(
			usersettinghistory.Ref(ush.Ref),
			usersettinghistory.HistoryTimeLT(ush.HistoryTime),
		).
		Order(usersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ushq *UserSettingHistoryQuery) Earliest(ctx context.Context) (*UserSettingHistory, error) {
	return ushq.
		Order(usersettinghistory.ByHistoryTime()).
		First(ctx)
}

func (ushq *UserSettingHistoryQuery) Latest(ctx context.Context) (*UserSettingHistory, error) {
	return ushq.
		Order(usersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ushq *UserSettingHistoryQuery) AsOf(ctx context.Context, time time.Time) (*UserSettingHistory, error) {
	return ushq.
		Where(usersettinghistory.HistoryTimeLTE(time)).
		Order(usersettinghistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (w *Webhook) History() *WebhookHistoryQuery {
	historyClient := NewWebhookHistoryClient(w.config)
	return historyClient.Query().Where(webhookhistory.Ref(w.ID))
}

func (wh *WebhookHistory) Next(ctx context.Context) (*WebhookHistory, error) {
	client := NewWebhookHistoryClient(wh.config)
	return client.Query().
		Where(
			webhookhistory.Ref(wh.Ref),
			webhookhistory.HistoryTimeGT(wh.HistoryTime),
		).
		Order(webhookhistory.ByHistoryTime()).
		First(ctx)
}

func (wh *WebhookHistory) Prev(ctx context.Context) (*WebhookHistory, error) {
	client := NewWebhookHistoryClient(wh.config)
	return client.Query().
		Where(
			webhookhistory.Ref(wh.Ref),
			webhookhistory.HistoryTimeLT(wh.HistoryTime),
		).
		Order(webhookhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (whq *WebhookHistoryQuery) Earliest(ctx context.Context) (*WebhookHistory, error) {
	return whq.
		Order(webhookhistory.ByHistoryTime()).
		First(ctx)
}

func (whq *WebhookHistoryQuery) Latest(ctx context.Context) (*WebhookHistory, error) {
	return whq.
		Order(webhookhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (whq *WebhookHistoryQuery) AsOf(ctx context.Context, time time.Time) (*WebhookHistory, error) {
	return whq.
		Where(webhookhistory.HistoryTimeLTE(time)).
		Order(webhookhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}
