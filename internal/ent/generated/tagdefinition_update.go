// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/tagdefinition"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TagDefinitionUpdate is the builder for updating TagDefinition entities.
type TagDefinitionUpdate struct {
	config
	hooks     []Hook
	mutation  *TagDefinitionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TagDefinitionUpdate builder.
func (_u *TagDefinitionUpdate) Where(ps ...predicate.TagDefinition) *TagDefinitionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TagDefinitionUpdate) SetUpdatedAt(v time.Time) *TagDefinitionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TagDefinitionUpdate) ClearUpdatedAt() *TagDefinitionUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TagDefinitionUpdate) SetUpdatedBy(v string) *TagDefinitionUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableUpdatedBy(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TagDefinitionUpdate) ClearUpdatedBy() *TagDefinitionUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TagDefinitionUpdate) SetDeletedAt(v time.Time) *TagDefinitionUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableDeletedAt(v *time.Time) *TagDefinitionUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TagDefinitionUpdate) ClearDeletedAt() *TagDefinitionUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TagDefinitionUpdate) SetDeletedBy(v string) *TagDefinitionUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableDeletedBy(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TagDefinitionUpdate) ClearDeletedBy() *TagDefinitionUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TagDefinitionUpdate) SetTags(v []string) *TagDefinitionUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TagDefinitionUpdate) AppendTags(v []string) *TagDefinitionUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TagDefinitionUpdate) ClearTags() *TagDefinitionUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TagDefinitionUpdate) SetOwnerID(v string) *TagDefinitionUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableOwnerID(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TagDefinitionUpdate) ClearOwnerID() *TagDefinitionUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *TagDefinitionUpdate) SetInternalNotes(v string) *TagDefinitionUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableInternalNotes(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *TagDefinitionUpdate) ClearInternalNotes() *TagDefinitionUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *TagDefinitionUpdate) SetSystemInternalID(v string) *TagDefinitionUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableSystemInternalID(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *TagDefinitionUpdate) ClearSystemInternalID() *TagDefinitionUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *TagDefinitionUpdate) SetName(v string) *TagDefinitionUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableName(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAliases sets the "aliases" field.
func (_u *TagDefinitionUpdate) SetAliases(v []string) *TagDefinitionUpdate {
	_u.mutation.SetAliases(v)
	return _u
}

// AppendAliases appends value to the "aliases" field.
func (_u *TagDefinitionUpdate) AppendAliases(v []string) *TagDefinitionUpdate {
	_u.mutation.AppendAliases(v)
	return _u
}

// ClearAliases clears the value of the "aliases" field.
func (_u *TagDefinitionUpdate) ClearAliases() *TagDefinitionUpdate {
	_u.mutation.ClearAliases()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *TagDefinitionUpdate) SetSlug(v string) *TagDefinitionUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableSlug(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// ClearSlug clears the value of the "slug" field.
func (_u *TagDefinitionUpdate) ClearSlug() *TagDefinitionUpdate {
	_u.mutation.ClearSlug()
	return _u
}

// SetDescription sets the "description" field.
func (_u *TagDefinitionUpdate) SetDescription(v string) *TagDefinitionUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableDescription(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TagDefinitionUpdate) ClearDescription() *TagDefinitionUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetColor sets the "color" field.
func (_u *TagDefinitionUpdate) SetColor(v string) *TagDefinitionUpdate {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableColor(v *string) *TagDefinitionUpdate {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *TagDefinitionUpdate) ClearColor() *TagDefinitionUpdate {
	_u.mutation.ClearColor()
	return _u
}

// SetSystemGenerated sets the "system_generated" field.
func (_u *TagDefinitionUpdate) SetSystemGenerated(v bool) *TagDefinitionUpdate {
	_u.mutation.SetSystemGenerated(v)
	return _u
}

// SetNillableSystemGenerated sets the "system_generated" field if the given value is not nil.
func (_u *TagDefinitionUpdate) SetNillableSystemGenerated(v *bool) *TagDefinitionUpdate {
	if v != nil {
		_u.SetSystemGenerated(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *TagDefinitionUpdate) SetOwner(v *Organization) *TagDefinitionUpdate {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the TagDefinitionMutation object of the builder.
func (_u *TagDefinitionUpdate) Mutation() *TagDefinitionMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *TagDefinitionUpdate) ClearOwner() *TagDefinitionUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TagDefinitionUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TagDefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TagDefinitionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TagDefinitionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TagDefinitionUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if tagdefinition.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tagdefinition.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tagdefinition.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TagDefinitionUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := tagdefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "TagDefinition.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Slug(); ok {
		if err := tagdefinition.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`generated: validator failed for field "TagDefinition.slug": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := tagdefinition.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`generated: validator failed for field "TagDefinition.color": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TagDefinitionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagDefinitionUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TagDefinitionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tagdefinition.Table, tagdefinition.Columns, sqlgraph.NewFieldSpec(tagdefinition.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(tagdefinition.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tagdefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(tagdefinition.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(tagdefinition.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(tagdefinition.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(tagdefinition.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(tagdefinition.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(tagdefinition.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(tagdefinition.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(tagdefinition.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(tagdefinition.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tagdefinition.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(tagdefinition.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(tagdefinition.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(tagdefinition.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(tagdefinition.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(tagdefinition.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(tagdefinition.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(tagdefinition.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Aliases(); ok {
		_spec.SetField(tagdefinition.FieldAliases, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAliases(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tagdefinition.FieldAliases, value)
		})
	}
	if _u.mutation.AliasesCleared() {
		_spec.ClearField(tagdefinition.FieldAliases, field.TypeJSON)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(tagdefinition.FieldSlug, field.TypeString, value)
	}
	if _u.mutation.SlugCleared() {
		_spec.ClearField(tagdefinition.FieldSlug, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(tagdefinition.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(tagdefinition.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(tagdefinition.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(tagdefinition.FieldColor, field.TypeString)
	}
	if value, ok := _u.mutation.SystemGenerated(); ok {
		_spec.SetField(tagdefinition.FieldSystemGenerated, field.TypeBool, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tagdefinition.OwnerTable,
			Columns: []string{tagdefinition.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TagDefinition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tagdefinition.OwnerTable,
			Columns: []string{tagdefinition.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TagDefinition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TagDefinition
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagdefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TagDefinitionUpdateOne is the builder for updating a single TagDefinition entity.
type TagDefinitionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TagDefinitionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TagDefinitionUpdateOne) SetUpdatedAt(v time.Time) *TagDefinitionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TagDefinitionUpdateOne) ClearUpdatedAt() *TagDefinitionUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TagDefinitionUpdateOne) SetUpdatedBy(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableUpdatedBy(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TagDefinitionUpdateOne) ClearUpdatedBy() *TagDefinitionUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TagDefinitionUpdateOne) SetDeletedAt(v time.Time) *TagDefinitionUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableDeletedAt(v *time.Time) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TagDefinitionUpdateOne) ClearDeletedAt() *TagDefinitionUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TagDefinitionUpdateOne) SetDeletedBy(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableDeletedBy(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TagDefinitionUpdateOne) ClearDeletedBy() *TagDefinitionUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TagDefinitionUpdateOne) SetTags(v []string) *TagDefinitionUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TagDefinitionUpdateOne) AppendTags(v []string) *TagDefinitionUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TagDefinitionUpdateOne) ClearTags() *TagDefinitionUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TagDefinitionUpdateOne) SetOwnerID(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableOwnerID(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TagDefinitionUpdateOne) ClearOwnerID() *TagDefinitionUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *TagDefinitionUpdateOne) SetInternalNotes(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableInternalNotes(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *TagDefinitionUpdateOne) ClearInternalNotes() *TagDefinitionUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *TagDefinitionUpdateOne) SetSystemInternalID(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableSystemInternalID(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *TagDefinitionUpdateOne) ClearSystemInternalID() *TagDefinitionUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *TagDefinitionUpdateOne) SetName(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableName(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAliases sets the "aliases" field.
func (_u *TagDefinitionUpdateOne) SetAliases(v []string) *TagDefinitionUpdateOne {
	_u.mutation.SetAliases(v)
	return _u
}

// AppendAliases appends value to the "aliases" field.
func (_u *TagDefinitionUpdateOne) AppendAliases(v []string) *TagDefinitionUpdateOne {
	_u.mutation.AppendAliases(v)
	return _u
}

// ClearAliases clears the value of the "aliases" field.
func (_u *TagDefinitionUpdateOne) ClearAliases() *TagDefinitionUpdateOne {
	_u.mutation.ClearAliases()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *TagDefinitionUpdateOne) SetSlug(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableSlug(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// ClearSlug clears the value of the "slug" field.
func (_u *TagDefinitionUpdateOne) ClearSlug() *TagDefinitionUpdateOne {
	_u.mutation.ClearSlug()
	return _u
}

// SetDescription sets the "description" field.
func (_u *TagDefinitionUpdateOne) SetDescription(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableDescription(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TagDefinitionUpdateOne) ClearDescription() *TagDefinitionUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetColor sets the "color" field.
func (_u *TagDefinitionUpdateOne) SetColor(v string) *TagDefinitionUpdateOne {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableColor(v *string) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *TagDefinitionUpdateOne) ClearColor() *TagDefinitionUpdateOne {
	_u.mutation.ClearColor()
	return _u
}

// SetSystemGenerated sets the "system_generated" field.
func (_u *TagDefinitionUpdateOne) SetSystemGenerated(v bool) *TagDefinitionUpdateOne {
	_u.mutation.SetSystemGenerated(v)
	return _u
}

// SetNillableSystemGenerated sets the "system_generated" field if the given value is not nil.
func (_u *TagDefinitionUpdateOne) SetNillableSystemGenerated(v *bool) *TagDefinitionUpdateOne {
	if v != nil {
		_u.SetSystemGenerated(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *TagDefinitionUpdateOne) SetOwner(v *Organization) *TagDefinitionUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the TagDefinitionMutation object of the builder.
func (_u *TagDefinitionUpdateOne) Mutation() *TagDefinitionMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *TagDefinitionUpdateOne) ClearOwner() *TagDefinitionUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// Where appends a list predicates to the TagDefinitionUpdate builder.
func (_u *TagDefinitionUpdateOne) Where(ps ...predicate.TagDefinition) *TagDefinitionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TagDefinitionUpdateOne) Select(field string, fields ...string) *TagDefinitionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TagDefinition entity.
func (_u *TagDefinitionUpdateOne) Save(ctx context.Context) (*TagDefinition, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TagDefinitionUpdateOne) SaveX(ctx context.Context) *TagDefinition {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TagDefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TagDefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TagDefinitionUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if tagdefinition.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tagdefinition.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tagdefinition.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TagDefinitionUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := tagdefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "TagDefinition.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Slug(); ok {
		if err := tagdefinition.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`generated: validator failed for field "TagDefinition.slug": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := tagdefinition.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`generated: validator failed for field "TagDefinition.color": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TagDefinitionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagDefinitionUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TagDefinitionUpdateOne) sqlSave(ctx context.Context) (_node *TagDefinition, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tagdefinition.Table, tagdefinition.Columns, sqlgraph.NewFieldSpec(tagdefinition.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TagDefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tagdefinition.FieldID)
		for _, f := range fields {
			if !tagdefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != tagdefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(tagdefinition.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tagdefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(tagdefinition.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(tagdefinition.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(tagdefinition.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(tagdefinition.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(tagdefinition.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(tagdefinition.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(tagdefinition.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(tagdefinition.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(tagdefinition.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tagdefinition.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(tagdefinition.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(tagdefinition.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(tagdefinition.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(tagdefinition.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(tagdefinition.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(tagdefinition.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(tagdefinition.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Aliases(); ok {
		_spec.SetField(tagdefinition.FieldAliases, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAliases(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tagdefinition.FieldAliases, value)
		})
	}
	if _u.mutation.AliasesCleared() {
		_spec.ClearField(tagdefinition.FieldAliases, field.TypeJSON)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(tagdefinition.FieldSlug, field.TypeString, value)
	}
	if _u.mutation.SlugCleared() {
		_spec.ClearField(tagdefinition.FieldSlug, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(tagdefinition.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(tagdefinition.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(tagdefinition.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(tagdefinition.FieldColor, field.TypeString)
	}
	if value, ok := _u.mutation.SystemGenerated(); ok {
		_spec.SetField(tagdefinition.FieldSystemGenerated, field.TypeBool, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tagdefinition.OwnerTable,
			Columns: []string{tagdefinition.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TagDefinition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tagdefinition.OwnerTable,
			Columns: []string{tagdefinition.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TagDefinition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TagDefinition
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TagDefinition{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagdefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
