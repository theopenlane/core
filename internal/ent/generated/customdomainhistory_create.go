// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomainhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// CustomDomainHistoryCreate is the builder for creating a CustomDomainHistory entity.
type CustomDomainHistoryCreate struct {
	config
	mutation *CustomDomainHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (cdhc *CustomDomainHistoryCreate) SetHistoryTime(t time.Time) *CustomDomainHistoryCreate {
	cdhc.mutation.SetHistoryTime(t)
	return cdhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableHistoryTime(t *time.Time) *CustomDomainHistoryCreate {
	if t != nil {
		cdhc.SetHistoryTime(*t)
	}
	return cdhc
}

// SetRef sets the "ref" field.
func (cdhc *CustomDomainHistoryCreate) SetRef(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetRef(s)
	return cdhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableRef(s *string) *CustomDomainHistoryCreate {
	if s != nil {
		cdhc.SetRef(*s)
	}
	return cdhc
}

// SetOperation sets the "operation" field.
func (cdhc *CustomDomainHistoryCreate) SetOperation(ht history.OpType) *CustomDomainHistoryCreate {
	cdhc.mutation.SetOperation(ht)
	return cdhc
}

// SetCreatedAt sets the "created_at" field.
func (cdhc *CustomDomainHistoryCreate) SetCreatedAt(t time.Time) *CustomDomainHistoryCreate {
	cdhc.mutation.SetCreatedAt(t)
	return cdhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableCreatedAt(t *time.Time) *CustomDomainHistoryCreate {
	if t != nil {
		cdhc.SetCreatedAt(*t)
	}
	return cdhc
}

// SetUpdatedAt sets the "updated_at" field.
func (cdhc *CustomDomainHistoryCreate) SetUpdatedAt(t time.Time) *CustomDomainHistoryCreate {
	cdhc.mutation.SetUpdatedAt(t)
	return cdhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableUpdatedAt(t *time.Time) *CustomDomainHistoryCreate {
	if t != nil {
		cdhc.SetUpdatedAt(*t)
	}
	return cdhc
}

// SetCreatedBy sets the "created_by" field.
func (cdhc *CustomDomainHistoryCreate) SetCreatedBy(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetCreatedBy(s)
	return cdhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableCreatedBy(s *string) *CustomDomainHistoryCreate {
	if s != nil {
		cdhc.SetCreatedBy(*s)
	}
	return cdhc
}

// SetUpdatedBy sets the "updated_by" field.
func (cdhc *CustomDomainHistoryCreate) SetUpdatedBy(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetUpdatedBy(s)
	return cdhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableUpdatedBy(s *string) *CustomDomainHistoryCreate {
	if s != nil {
		cdhc.SetUpdatedBy(*s)
	}
	return cdhc
}

// SetDeletedAt sets the "deleted_at" field.
func (cdhc *CustomDomainHistoryCreate) SetDeletedAt(t time.Time) *CustomDomainHistoryCreate {
	cdhc.mutation.SetDeletedAt(t)
	return cdhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableDeletedAt(t *time.Time) *CustomDomainHistoryCreate {
	if t != nil {
		cdhc.SetDeletedAt(*t)
	}
	return cdhc
}

// SetDeletedBy sets the "deleted_by" field.
func (cdhc *CustomDomainHistoryCreate) SetDeletedBy(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetDeletedBy(s)
	return cdhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableDeletedBy(s *string) *CustomDomainHistoryCreate {
	if s != nil {
		cdhc.SetDeletedBy(*s)
	}
	return cdhc
}

// SetTags sets the "tags" field.
func (cdhc *CustomDomainHistoryCreate) SetTags(s []string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetTags(s)
	return cdhc
}

// SetOwnerID sets the "owner_id" field.
func (cdhc *CustomDomainHistoryCreate) SetOwnerID(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetOwnerID(s)
	return cdhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableOwnerID(s *string) *CustomDomainHistoryCreate {
	if s != nil {
		cdhc.SetOwnerID(*s)
	}
	return cdhc
}

// SetCnameRecord sets the "cname_record" field.
func (cdhc *CustomDomainHistoryCreate) SetCnameRecord(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetCnameRecord(s)
	return cdhc
}

// SetMappableDomainID sets the "mappable_domain_id" field.
func (cdhc *CustomDomainHistoryCreate) SetMappableDomainID(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetMappableDomainID(s)
	return cdhc
}

// SetTxtRecordSubdomain sets the "txt_record_subdomain" field.
func (cdhc *CustomDomainHistoryCreate) SetTxtRecordSubdomain(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetTxtRecordSubdomain(s)
	return cdhc
}

// SetNillableTxtRecordSubdomain sets the "txt_record_subdomain" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableTxtRecordSubdomain(s *string) *CustomDomainHistoryCreate {
	if s != nil {
		cdhc.SetTxtRecordSubdomain(*s)
	}
	return cdhc
}

// SetTxtRecordValue sets the "txt_record_value" field.
func (cdhc *CustomDomainHistoryCreate) SetTxtRecordValue(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetTxtRecordValue(s)
	return cdhc
}

// SetNillableTxtRecordValue sets the "txt_record_value" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableTxtRecordValue(s *string) *CustomDomainHistoryCreate {
	if s != nil {
		cdhc.SetTxtRecordValue(*s)
	}
	return cdhc
}

// SetStatus sets the "status" field.
func (cdhc *CustomDomainHistoryCreate) SetStatus(eds enums.CustomDomainStatus) *CustomDomainHistoryCreate {
	cdhc.mutation.SetStatus(eds)
	return cdhc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableStatus(eds *enums.CustomDomainStatus) *CustomDomainHistoryCreate {
	if eds != nil {
		cdhc.SetStatus(*eds)
	}
	return cdhc
}

// SetID sets the "id" field.
func (cdhc *CustomDomainHistoryCreate) SetID(s string) *CustomDomainHistoryCreate {
	cdhc.mutation.SetID(s)
	return cdhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cdhc *CustomDomainHistoryCreate) SetNillableID(s *string) *CustomDomainHistoryCreate {
	if s != nil {
		cdhc.SetID(*s)
	}
	return cdhc
}

// Mutation returns the CustomDomainHistoryMutation object of the builder.
func (cdhc *CustomDomainHistoryCreate) Mutation() *CustomDomainHistoryMutation {
	return cdhc.mutation
}

// Save creates the CustomDomainHistory in the database.
func (cdhc *CustomDomainHistoryCreate) Save(ctx context.Context) (*CustomDomainHistory, error) {
	cdhc.defaults()
	return withHooks(ctx, cdhc.sqlSave, cdhc.mutation, cdhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdhc *CustomDomainHistoryCreate) SaveX(ctx context.Context) *CustomDomainHistory {
	v, err := cdhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdhc *CustomDomainHistoryCreate) Exec(ctx context.Context) error {
	_, err := cdhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdhc *CustomDomainHistoryCreate) ExecX(ctx context.Context) {
	if err := cdhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdhc *CustomDomainHistoryCreate) defaults() {
	if _, ok := cdhc.mutation.HistoryTime(); !ok {
		v := customdomainhistory.DefaultHistoryTime()
		cdhc.mutation.SetHistoryTime(v)
	}
	if _, ok := cdhc.mutation.CreatedAt(); !ok {
		v := customdomainhistory.DefaultCreatedAt()
		cdhc.mutation.SetCreatedAt(v)
	}
	if _, ok := cdhc.mutation.UpdatedAt(); !ok {
		v := customdomainhistory.DefaultUpdatedAt()
		cdhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cdhc.mutation.Tags(); !ok {
		v := customdomainhistory.DefaultTags
		cdhc.mutation.SetTags(v)
	}
	if _, ok := cdhc.mutation.TxtRecordSubdomain(); !ok {
		v := customdomainhistory.DefaultTxtRecordSubdomain
		cdhc.mutation.SetTxtRecordSubdomain(v)
	}
	if _, ok := cdhc.mutation.TxtRecordValue(); !ok {
		v := customdomainhistory.DefaultTxtRecordValue()
		cdhc.mutation.SetTxtRecordValue(v)
	}
	if _, ok := cdhc.mutation.Status(); !ok {
		v := customdomainhistory.DefaultStatus
		cdhc.mutation.SetStatus(v)
	}
	if _, ok := cdhc.mutation.ID(); !ok {
		v := customdomainhistory.DefaultID()
		cdhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdhc *CustomDomainHistoryCreate) check() error {
	if _, ok := cdhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "CustomDomainHistory.history_time"`)}
	}
	if _, ok := cdhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "CustomDomainHistory.operation"`)}
	}
	if v, ok := cdhc.mutation.Operation(); ok {
		if err := customdomainhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "CustomDomainHistory.operation": %w`, err)}
		}
	}
	if _, ok := cdhc.mutation.CnameRecord(); !ok {
		return &ValidationError{Name: "cname_record", err: errors.New(`generated: missing required field "CustomDomainHistory.cname_record"`)}
	}
	if _, ok := cdhc.mutation.MappableDomainID(); !ok {
		return &ValidationError{Name: "mappable_domain_id", err: errors.New(`generated: missing required field "CustomDomainHistory.mappable_domain_id"`)}
	}
	if _, ok := cdhc.mutation.TxtRecordSubdomain(); !ok {
		return &ValidationError{Name: "txt_record_subdomain", err: errors.New(`generated: missing required field "CustomDomainHistory.txt_record_subdomain"`)}
	}
	if _, ok := cdhc.mutation.TxtRecordValue(); !ok {
		return &ValidationError{Name: "txt_record_value", err: errors.New(`generated: missing required field "CustomDomainHistory.txt_record_value"`)}
	}
	if _, ok := cdhc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "CustomDomainHistory.status"`)}
	}
	if v, ok := cdhc.mutation.Status(); ok {
		if err := customdomainhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "CustomDomainHistory.status": %w`, err)}
		}
	}
	return nil
}

func (cdhc *CustomDomainHistoryCreate) sqlSave(ctx context.Context) (*CustomDomainHistory, error) {
	if err := cdhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CustomDomainHistory.ID type: %T", _spec.ID.Value)
		}
	}
	cdhc.mutation.id = &_node.ID
	cdhc.mutation.done = true
	return _node, nil
}

func (cdhc *CustomDomainHistoryCreate) createSpec() (*CustomDomainHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomDomainHistory{config: cdhc.config}
		_spec = sqlgraph.NewCreateSpec(customdomainhistory.Table, sqlgraph.NewFieldSpec(customdomainhistory.FieldID, field.TypeString))
	)
	_spec.Schema = cdhc.schemaConfig.CustomDomainHistory
	if id, ok := cdhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cdhc.mutation.HistoryTime(); ok {
		_spec.SetField(customdomainhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := cdhc.mutation.Ref(); ok {
		_spec.SetField(customdomainhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := cdhc.mutation.Operation(); ok {
		_spec.SetField(customdomainhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := cdhc.mutation.CreatedAt(); ok {
		_spec.SetField(customdomainhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cdhc.mutation.UpdatedAt(); ok {
		_spec.SetField(customdomainhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cdhc.mutation.CreatedBy(); ok {
		_spec.SetField(customdomainhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cdhc.mutation.UpdatedBy(); ok {
		_spec.SetField(customdomainhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cdhc.mutation.DeletedAt(); ok {
		_spec.SetField(customdomainhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cdhc.mutation.DeletedBy(); ok {
		_spec.SetField(customdomainhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := cdhc.mutation.Tags(); ok {
		_spec.SetField(customdomainhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := cdhc.mutation.OwnerID(); ok {
		_spec.SetField(customdomainhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := cdhc.mutation.CnameRecord(); ok {
		_spec.SetField(customdomainhistory.FieldCnameRecord, field.TypeString, value)
		_node.CnameRecord = value
	}
	if value, ok := cdhc.mutation.MappableDomainID(); ok {
		_spec.SetField(customdomainhistory.FieldMappableDomainID, field.TypeString, value)
		_node.MappableDomainID = value
	}
	if value, ok := cdhc.mutation.TxtRecordSubdomain(); ok {
		_spec.SetField(customdomainhistory.FieldTxtRecordSubdomain, field.TypeString, value)
		_node.TxtRecordSubdomain = value
	}
	if value, ok := cdhc.mutation.TxtRecordValue(); ok {
		_spec.SetField(customdomainhistory.FieldTxtRecordValue, field.TypeString, value)
		_node.TxtRecordValue = value
	}
	if value, ok := cdhc.mutation.Status(); ok {
		_spec.SetField(customdomainhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// CustomDomainHistoryCreateBulk is the builder for creating many CustomDomainHistory entities in bulk.
type CustomDomainHistoryCreateBulk struct {
	config
	err      error
	builders []*CustomDomainHistoryCreate
}

// Save creates the CustomDomainHistory entities in the database.
func (cdhcb *CustomDomainHistoryCreateBulk) Save(ctx context.Context) ([]*CustomDomainHistory, error) {
	if cdhcb.err != nil {
		return nil, cdhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdhcb.builders))
	nodes := make([]*CustomDomainHistory, len(cdhcb.builders))
	mutators := make([]Mutator, len(cdhcb.builders))
	for i := range cdhcb.builders {
		func(i int, root context.Context) {
			builder := cdhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomDomainHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdhcb *CustomDomainHistoryCreateBulk) SaveX(ctx context.Context) []*CustomDomainHistory {
	v, err := cdhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdhcb *CustomDomainHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := cdhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdhcb *CustomDomainHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := cdhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
