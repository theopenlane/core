// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlUpdate is the builder for updating Control entities.
type ControlUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlUpdate builder.
func (cu *ControlUpdate) Where(ps ...predicate.Control) *ControlUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ControlUpdate) SetUpdatedAt(t time.Time) *ControlUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *ControlUpdate) ClearUpdatedAt() *ControlUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *ControlUpdate) SetUpdatedBy(s string) *ControlUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableUpdatedBy(s *string) *ControlUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *ControlUpdate) ClearUpdatedBy() *ControlUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ControlUpdate) SetDeletedAt(t time.Time) *ControlUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableDeletedAt(t *time.Time) *ControlUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ControlUpdate) ClearDeletedAt() *ControlUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetDeletedBy sets the "deleted_by" field.
func (cu *ControlUpdate) SetDeletedBy(s string) *ControlUpdate {
	cu.mutation.SetDeletedBy(s)
	return cu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableDeletedBy(s *string) *ControlUpdate {
	if s != nil {
		cu.SetDeletedBy(*s)
	}
	return cu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cu *ControlUpdate) ClearDeletedBy() *ControlUpdate {
	cu.mutation.ClearDeletedBy()
	return cu
}

// SetTags sets the "tags" field.
func (cu *ControlUpdate) SetTags(s []string) *ControlUpdate {
	cu.mutation.SetTags(s)
	return cu
}

// AppendTags appends s to the "tags" field.
func (cu *ControlUpdate) AppendTags(s []string) *ControlUpdate {
	cu.mutation.AppendTags(s)
	return cu
}

// ClearTags clears the value of the "tags" field.
func (cu *ControlUpdate) ClearTags() *ControlUpdate {
	cu.mutation.ClearTags()
	return cu
}

// SetName sets the "name" field.
func (cu *ControlUpdate) SetName(s string) *ControlUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableName(s *string) *ControlUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *ControlUpdate) SetDescription(s string) *ControlUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableDescription(s *string) *ControlUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *ControlUpdate) ClearDescription() *ControlUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetStatus sets the "status" field.
func (cu *ControlUpdate) SetStatus(s string) *ControlUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableStatus(s *string) *ControlUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// ClearStatus clears the value of the "status" field.
func (cu *ControlUpdate) ClearStatus() *ControlUpdate {
	cu.mutation.ClearStatus()
	return cu
}

// SetControlType sets the "control_type" field.
func (cu *ControlUpdate) SetControlType(s string) *ControlUpdate {
	cu.mutation.SetControlType(s)
	return cu
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableControlType(s *string) *ControlUpdate {
	if s != nil {
		cu.SetControlType(*s)
	}
	return cu
}

// ClearControlType clears the value of the "control_type" field.
func (cu *ControlUpdate) ClearControlType() *ControlUpdate {
	cu.mutation.ClearControlType()
	return cu
}

// SetVersion sets the "version" field.
func (cu *ControlUpdate) SetVersion(s string) *ControlUpdate {
	cu.mutation.SetVersion(s)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableVersion(s *string) *ControlUpdate {
	if s != nil {
		cu.SetVersion(*s)
	}
	return cu
}

// ClearVersion clears the value of the "version" field.
func (cu *ControlUpdate) ClearVersion() *ControlUpdate {
	cu.mutation.ClearVersion()
	return cu
}

// SetControlNumber sets the "control_number" field.
func (cu *ControlUpdate) SetControlNumber(s string) *ControlUpdate {
	cu.mutation.SetControlNumber(s)
	return cu
}

// SetNillableControlNumber sets the "control_number" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableControlNumber(s *string) *ControlUpdate {
	if s != nil {
		cu.SetControlNumber(*s)
	}
	return cu
}

// ClearControlNumber clears the value of the "control_number" field.
func (cu *ControlUpdate) ClearControlNumber() *ControlUpdate {
	cu.mutation.ClearControlNumber()
	return cu
}

// SetFamily sets the "family" field.
func (cu *ControlUpdate) SetFamily(s string) *ControlUpdate {
	cu.mutation.SetFamily(s)
	return cu
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableFamily(s *string) *ControlUpdate {
	if s != nil {
		cu.SetFamily(*s)
	}
	return cu
}

// ClearFamily clears the value of the "family" field.
func (cu *ControlUpdate) ClearFamily() *ControlUpdate {
	cu.mutation.ClearFamily()
	return cu
}

// SetClass sets the "class" field.
func (cu *ControlUpdate) SetClass(s string) *ControlUpdate {
	cu.mutation.SetClass(s)
	return cu
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableClass(s *string) *ControlUpdate {
	if s != nil {
		cu.SetClass(*s)
	}
	return cu
}

// ClearClass clears the value of the "class" field.
func (cu *ControlUpdate) ClearClass() *ControlUpdate {
	cu.mutation.ClearClass()
	return cu
}

// SetSource sets the "source" field.
func (cu *ControlUpdate) SetSource(s string) *ControlUpdate {
	cu.mutation.SetSource(s)
	return cu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableSource(s *string) *ControlUpdate {
	if s != nil {
		cu.SetSource(*s)
	}
	return cu
}

// ClearSource clears the value of the "source" field.
func (cu *ControlUpdate) ClearSource() *ControlUpdate {
	cu.mutation.ClearSource()
	return cu
}

// SetSatisfies sets the "satisfies" field.
func (cu *ControlUpdate) SetSatisfies(s string) *ControlUpdate {
	cu.mutation.SetSatisfies(s)
	return cu
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableSatisfies(s *string) *ControlUpdate {
	if s != nil {
		cu.SetSatisfies(*s)
	}
	return cu
}

// ClearSatisfies clears the value of the "satisfies" field.
func (cu *ControlUpdate) ClearSatisfies() *ControlUpdate {
	cu.mutation.ClearSatisfies()
	return cu
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (cu *ControlUpdate) SetMappedFrameworks(s string) *ControlUpdate {
	cu.mutation.SetMappedFrameworks(s)
	return cu
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (cu *ControlUpdate) SetNillableMappedFrameworks(s *string) *ControlUpdate {
	if s != nil {
		cu.SetMappedFrameworks(*s)
	}
	return cu
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (cu *ControlUpdate) ClearMappedFrameworks() *ControlUpdate {
	cu.mutation.ClearMappedFrameworks()
	return cu
}

// SetDetails sets the "details" field.
func (cu *ControlUpdate) SetDetails(m map[string]interface{}) *ControlUpdate {
	cu.mutation.SetDetails(m)
	return cu
}

// ClearDetails clears the value of the "details" field.
func (cu *ControlUpdate) ClearDetails() *ControlUpdate {
	cu.mutation.ClearDetails()
	return cu
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (cu *ControlUpdate) AddProcedureIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddProcedureIDs(ids...)
	return cu
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (cu *ControlUpdate) AddProcedures(p ...*Procedure) *ControlUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProcedureIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (cu *ControlUpdate) AddSubcontrolIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddSubcontrolIDs(ids...)
	return cu
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (cu *ControlUpdate) AddSubcontrols(s ...*Subcontrol) *ControlUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSubcontrolIDs(ids...)
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (cu *ControlUpdate) AddControlobjectiveIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddControlobjectiveIDs(ids...)
	return cu
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (cu *ControlUpdate) AddControlobjectives(c ...*ControlObjective) *ControlUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddControlobjectiveIDs(ids...)
}

// AddStandardIDs adds the "standard" edge to the Standard entity by IDs.
func (cu *ControlUpdate) AddStandardIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddStandardIDs(ids...)
	return cu
}

// AddStandard adds the "standard" edges to the Standard entity.
func (cu *ControlUpdate) AddStandard(s ...*Standard) *ControlUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddStandardIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (cu *ControlUpdate) AddNarrativeIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddNarrativeIDs(ids...)
	return cu
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (cu *ControlUpdate) AddNarratives(n ...*Narrative) *ControlUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (cu *ControlUpdate) AddRiskIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddRiskIDs(ids...)
	return cu
}

// AddRisks adds the "risks" edges to the Risk entity.
func (cu *ControlUpdate) AddRisks(r ...*Risk) *ControlUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRiskIDs(ids...)
}

// AddActionplanIDs adds the "actionplans" edge to the ActionPlan entity by IDs.
func (cu *ControlUpdate) AddActionplanIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddActionplanIDs(ids...)
	return cu
}

// AddActionplans adds the "actionplans" edges to the ActionPlan entity.
func (cu *ControlUpdate) AddActionplans(a ...*ActionPlan) *ControlUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddActionplanIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (cu *ControlUpdate) AddTaskIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddTaskIDs(ids...)
	return cu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (cu *ControlUpdate) AddTasks(t ...*Task) *ControlUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (cu *ControlUpdate) AddProgramIDs(ids ...string) *ControlUpdate {
	cu.mutation.AddProgramIDs(ids...)
	return cu
}

// AddPrograms adds the "programs" edges to the Program entity.
func (cu *ControlUpdate) AddPrograms(p ...*Program) *ControlUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProgramIDs(ids...)
}

// Mutation returns the ControlMutation object of the builder.
func (cu *ControlUpdate) Mutation() *ControlMutation {
	return cu.mutation
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (cu *ControlUpdate) ClearProcedures() *ControlUpdate {
	cu.mutation.ClearProcedures()
	return cu
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (cu *ControlUpdate) RemoveProcedureIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveProcedureIDs(ids...)
	return cu
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (cu *ControlUpdate) RemoveProcedures(p ...*Procedure) *ControlUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProcedureIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (cu *ControlUpdate) ClearSubcontrols() *ControlUpdate {
	cu.mutation.ClearSubcontrols()
	return cu
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (cu *ControlUpdate) RemoveSubcontrolIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveSubcontrolIDs(ids...)
	return cu
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (cu *ControlUpdate) RemoveSubcontrols(s ...*Subcontrol) *ControlUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSubcontrolIDs(ids...)
}

// ClearControlobjectives clears all "controlobjectives" edges to the ControlObjective entity.
func (cu *ControlUpdate) ClearControlobjectives() *ControlUpdate {
	cu.mutation.ClearControlobjectives()
	return cu
}

// RemoveControlobjectiveIDs removes the "controlobjectives" edge to ControlObjective entities by IDs.
func (cu *ControlUpdate) RemoveControlobjectiveIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveControlobjectiveIDs(ids...)
	return cu
}

// RemoveControlobjectives removes "controlobjectives" edges to ControlObjective entities.
func (cu *ControlUpdate) RemoveControlobjectives(c ...*ControlObjective) *ControlUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveControlobjectiveIDs(ids...)
}

// ClearStandard clears all "standard" edges to the Standard entity.
func (cu *ControlUpdate) ClearStandard() *ControlUpdate {
	cu.mutation.ClearStandard()
	return cu
}

// RemoveStandardIDs removes the "standard" edge to Standard entities by IDs.
func (cu *ControlUpdate) RemoveStandardIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveStandardIDs(ids...)
	return cu
}

// RemoveStandard removes "standard" edges to Standard entities.
func (cu *ControlUpdate) RemoveStandard(s ...*Standard) *ControlUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveStandardIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (cu *ControlUpdate) ClearNarratives() *ControlUpdate {
	cu.mutation.ClearNarratives()
	return cu
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (cu *ControlUpdate) RemoveNarrativeIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveNarrativeIDs(ids...)
	return cu
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (cu *ControlUpdate) RemoveNarratives(n ...*Narrative) *ControlUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (cu *ControlUpdate) ClearRisks() *ControlUpdate {
	cu.mutation.ClearRisks()
	return cu
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (cu *ControlUpdate) RemoveRiskIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveRiskIDs(ids...)
	return cu
}

// RemoveRisks removes "risks" edges to Risk entities.
func (cu *ControlUpdate) RemoveRisks(r ...*Risk) *ControlUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRiskIDs(ids...)
}

// ClearActionplans clears all "actionplans" edges to the ActionPlan entity.
func (cu *ControlUpdate) ClearActionplans() *ControlUpdate {
	cu.mutation.ClearActionplans()
	return cu
}

// RemoveActionplanIDs removes the "actionplans" edge to ActionPlan entities by IDs.
func (cu *ControlUpdate) RemoveActionplanIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveActionplanIDs(ids...)
	return cu
}

// RemoveActionplans removes "actionplans" edges to ActionPlan entities.
func (cu *ControlUpdate) RemoveActionplans(a ...*ActionPlan) *ControlUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveActionplanIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (cu *ControlUpdate) ClearTasks() *ControlUpdate {
	cu.mutation.ClearTasks()
	return cu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (cu *ControlUpdate) RemoveTaskIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveTaskIDs(ids...)
	return cu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (cu *ControlUpdate) RemoveTasks(t ...*Task) *ControlUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTaskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (cu *ControlUpdate) ClearPrograms() *ControlUpdate {
	cu.mutation.ClearPrograms()
	return cu
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (cu *ControlUpdate) RemoveProgramIDs(ids ...string) *ControlUpdate {
	cu.mutation.RemoveProgramIDs(ids...)
	return cu
}

// RemovePrograms removes "programs" edges to Program entities.
func (cu *ControlUpdate) RemovePrograms(p ...*Program) *ControlUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ControlUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ControlUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ControlUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ControlUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ControlUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		if control.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized control.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := control.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(control.Table, control.Columns, sqlgraph.NewFieldSpec(control.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(control.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(control.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(control.FieldUpdatedAt, field.TypeTime)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(control.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(control.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(control.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(control.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(control.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.DeletedBy(); ok {
		_spec.SetField(control.FieldDeletedBy, field.TypeString, value)
	}
	if cu.mutation.DeletedByCleared() {
		_spec.ClearField(control.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.SetField(control.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldTags, value)
		})
	}
	if cu.mutation.TagsCleared() {
		_spec.ClearField(control.FieldTags, field.TypeJSON)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(control.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(control.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(control.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(control.FieldStatus, field.TypeString, value)
	}
	if cu.mutation.StatusCleared() {
		_spec.ClearField(control.FieldStatus, field.TypeString)
	}
	if value, ok := cu.mutation.ControlType(); ok {
		_spec.SetField(control.FieldControlType, field.TypeString, value)
	}
	if cu.mutation.ControlTypeCleared() {
		_spec.ClearField(control.FieldControlType, field.TypeString)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(control.FieldVersion, field.TypeString, value)
	}
	if cu.mutation.VersionCleared() {
		_spec.ClearField(control.FieldVersion, field.TypeString)
	}
	if value, ok := cu.mutation.ControlNumber(); ok {
		_spec.SetField(control.FieldControlNumber, field.TypeString, value)
	}
	if cu.mutation.ControlNumberCleared() {
		_spec.ClearField(control.FieldControlNumber, field.TypeString)
	}
	if value, ok := cu.mutation.Family(); ok {
		_spec.SetField(control.FieldFamily, field.TypeString, value)
	}
	if cu.mutation.FamilyCleared() {
		_spec.ClearField(control.FieldFamily, field.TypeString)
	}
	if value, ok := cu.mutation.Class(); ok {
		_spec.SetField(control.FieldClass, field.TypeString, value)
	}
	if cu.mutation.ClassCleared() {
		_spec.ClearField(control.FieldClass, field.TypeString)
	}
	if value, ok := cu.mutation.Source(); ok {
		_spec.SetField(control.FieldSource, field.TypeString, value)
	}
	if cu.mutation.SourceCleared() {
		_spec.ClearField(control.FieldSource, field.TypeString)
	}
	if value, ok := cu.mutation.Satisfies(); ok {
		_spec.SetField(control.FieldSatisfies, field.TypeString, value)
	}
	if cu.mutation.SatisfiesCleared() {
		_spec.ClearField(control.FieldSatisfies, field.TypeString)
	}
	if value, ok := cu.mutation.MappedFrameworks(); ok {
		_spec.SetField(control.FieldMappedFrameworks, field.TypeString, value)
	}
	if cu.mutation.MappedFrameworksCleared() {
		_spec.ClearField(control.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := cu.mutation.Details(); ok {
		_spec.SetField(control.FieldDetails, field.TypeJSON, value)
	}
	if cu.mutation.DetailsCleared() {
		_spec.ClearField(control.FieldDetails, field.TypeJSON)
	}
	if cu.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !cu.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: control.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !cu.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: control.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: control.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ControlobjectivesTable,
			Columns: []string{control.ControlobjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlObjective
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedControlobjectivesIDs(); len(nodes) > 0 && !cu.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ControlobjectivesTable,
			Columns: []string{control.ControlobjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ControlobjectivesTable,
			Columns: []string{control.ControlobjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: control.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.StandardControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedStandardIDs(); len(nodes) > 0 && !cu.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: control.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: control.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !cu.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRisksIDs(); len(nodes) > 0 && !cu.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionplansTable,
			Columns: control.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedActionplansIDs(); len(nodes) > 0 && !cu.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionplansTable,
			Columns: control.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ActionplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionplansTable,
			Columns: control.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !cu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ProgramControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !cu.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cu.schemaConfig.Control
	ctx = internal.NewSchemaConfigContext(ctx, cu.schemaConfig)
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{control.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ControlUpdateOne is the builder for updating a single Control entity.
type ControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ControlUpdateOne) SetUpdatedAt(t time.Time) *ControlUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *ControlUpdateOne) ClearUpdatedAt() *ControlUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *ControlUpdateOne) SetUpdatedBy(s string) *ControlUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableUpdatedBy(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *ControlUpdateOne) ClearUpdatedBy() *ControlUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ControlUpdateOne) SetDeletedAt(t time.Time) *ControlUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableDeletedAt(t *time.Time) *ControlUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ControlUpdateOne) ClearDeletedAt() *ControlUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetDeletedBy sets the "deleted_by" field.
func (cuo *ControlUpdateOne) SetDeletedBy(s string) *ControlUpdateOne {
	cuo.mutation.SetDeletedBy(s)
	return cuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableDeletedBy(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetDeletedBy(*s)
	}
	return cuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cuo *ControlUpdateOne) ClearDeletedBy() *ControlUpdateOne {
	cuo.mutation.ClearDeletedBy()
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *ControlUpdateOne) SetTags(s []string) *ControlUpdateOne {
	cuo.mutation.SetTags(s)
	return cuo
}

// AppendTags appends s to the "tags" field.
func (cuo *ControlUpdateOne) AppendTags(s []string) *ControlUpdateOne {
	cuo.mutation.AppendTags(s)
	return cuo
}

// ClearTags clears the value of the "tags" field.
func (cuo *ControlUpdateOne) ClearTags() *ControlUpdateOne {
	cuo.mutation.ClearTags()
	return cuo
}

// SetName sets the "name" field.
func (cuo *ControlUpdateOne) SetName(s string) *ControlUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableName(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ControlUpdateOne) SetDescription(s string) *ControlUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableDescription(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *ControlUpdateOne) ClearDescription() *ControlUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ControlUpdateOne) SetStatus(s string) *ControlUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableStatus(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// ClearStatus clears the value of the "status" field.
func (cuo *ControlUpdateOne) ClearStatus() *ControlUpdateOne {
	cuo.mutation.ClearStatus()
	return cuo
}

// SetControlType sets the "control_type" field.
func (cuo *ControlUpdateOne) SetControlType(s string) *ControlUpdateOne {
	cuo.mutation.SetControlType(s)
	return cuo
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableControlType(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetControlType(*s)
	}
	return cuo
}

// ClearControlType clears the value of the "control_type" field.
func (cuo *ControlUpdateOne) ClearControlType() *ControlUpdateOne {
	cuo.mutation.ClearControlType()
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *ControlUpdateOne) SetVersion(s string) *ControlUpdateOne {
	cuo.mutation.SetVersion(s)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableVersion(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetVersion(*s)
	}
	return cuo
}

// ClearVersion clears the value of the "version" field.
func (cuo *ControlUpdateOne) ClearVersion() *ControlUpdateOne {
	cuo.mutation.ClearVersion()
	return cuo
}

// SetControlNumber sets the "control_number" field.
func (cuo *ControlUpdateOne) SetControlNumber(s string) *ControlUpdateOne {
	cuo.mutation.SetControlNumber(s)
	return cuo
}

// SetNillableControlNumber sets the "control_number" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableControlNumber(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetControlNumber(*s)
	}
	return cuo
}

// ClearControlNumber clears the value of the "control_number" field.
func (cuo *ControlUpdateOne) ClearControlNumber() *ControlUpdateOne {
	cuo.mutation.ClearControlNumber()
	return cuo
}

// SetFamily sets the "family" field.
func (cuo *ControlUpdateOne) SetFamily(s string) *ControlUpdateOne {
	cuo.mutation.SetFamily(s)
	return cuo
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableFamily(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetFamily(*s)
	}
	return cuo
}

// ClearFamily clears the value of the "family" field.
func (cuo *ControlUpdateOne) ClearFamily() *ControlUpdateOne {
	cuo.mutation.ClearFamily()
	return cuo
}

// SetClass sets the "class" field.
func (cuo *ControlUpdateOne) SetClass(s string) *ControlUpdateOne {
	cuo.mutation.SetClass(s)
	return cuo
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableClass(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetClass(*s)
	}
	return cuo
}

// ClearClass clears the value of the "class" field.
func (cuo *ControlUpdateOne) ClearClass() *ControlUpdateOne {
	cuo.mutation.ClearClass()
	return cuo
}

// SetSource sets the "source" field.
func (cuo *ControlUpdateOne) SetSource(s string) *ControlUpdateOne {
	cuo.mutation.SetSource(s)
	return cuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableSource(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetSource(*s)
	}
	return cuo
}

// ClearSource clears the value of the "source" field.
func (cuo *ControlUpdateOne) ClearSource() *ControlUpdateOne {
	cuo.mutation.ClearSource()
	return cuo
}

// SetSatisfies sets the "satisfies" field.
func (cuo *ControlUpdateOne) SetSatisfies(s string) *ControlUpdateOne {
	cuo.mutation.SetSatisfies(s)
	return cuo
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableSatisfies(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetSatisfies(*s)
	}
	return cuo
}

// ClearSatisfies clears the value of the "satisfies" field.
func (cuo *ControlUpdateOne) ClearSatisfies() *ControlUpdateOne {
	cuo.mutation.ClearSatisfies()
	return cuo
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (cuo *ControlUpdateOne) SetMappedFrameworks(s string) *ControlUpdateOne {
	cuo.mutation.SetMappedFrameworks(s)
	return cuo
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (cuo *ControlUpdateOne) SetNillableMappedFrameworks(s *string) *ControlUpdateOne {
	if s != nil {
		cuo.SetMappedFrameworks(*s)
	}
	return cuo
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (cuo *ControlUpdateOne) ClearMappedFrameworks() *ControlUpdateOne {
	cuo.mutation.ClearMappedFrameworks()
	return cuo
}

// SetDetails sets the "details" field.
func (cuo *ControlUpdateOne) SetDetails(m map[string]interface{}) *ControlUpdateOne {
	cuo.mutation.SetDetails(m)
	return cuo
}

// ClearDetails clears the value of the "details" field.
func (cuo *ControlUpdateOne) ClearDetails() *ControlUpdateOne {
	cuo.mutation.ClearDetails()
	return cuo
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (cuo *ControlUpdateOne) AddProcedureIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddProcedureIDs(ids...)
	return cuo
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (cuo *ControlUpdateOne) AddProcedures(p ...*Procedure) *ControlUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProcedureIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (cuo *ControlUpdateOne) AddSubcontrolIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddSubcontrolIDs(ids...)
	return cuo
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (cuo *ControlUpdateOne) AddSubcontrols(s ...*Subcontrol) *ControlUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSubcontrolIDs(ids...)
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (cuo *ControlUpdateOne) AddControlobjectiveIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddControlobjectiveIDs(ids...)
	return cuo
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (cuo *ControlUpdateOne) AddControlobjectives(c ...*ControlObjective) *ControlUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddControlobjectiveIDs(ids...)
}

// AddStandardIDs adds the "standard" edge to the Standard entity by IDs.
func (cuo *ControlUpdateOne) AddStandardIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddStandardIDs(ids...)
	return cuo
}

// AddStandard adds the "standard" edges to the Standard entity.
func (cuo *ControlUpdateOne) AddStandard(s ...*Standard) *ControlUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddStandardIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (cuo *ControlUpdateOne) AddNarrativeIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddNarrativeIDs(ids...)
	return cuo
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (cuo *ControlUpdateOne) AddNarratives(n ...*Narrative) *ControlUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (cuo *ControlUpdateOne) AddRiskIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddRiskIDs(ids...)
	return cuo
}

// AddRisks adds the "risks" edges to the Risk entity.
func (cuo *ControlUpdateOne) AddRisks(r ...*Risk) *ControlUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRiskIDs(ids...)
}

// AddActionplanIDs adds the "actionplans" edge to the ActionPlan entity by IDs.
func (cuo *ControlUpdateOne) AddActionplanIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddActionplanIDs(ids...)
	return cuo
}

// AddActionplans adds the "actionplans" edges to the ActionPlan entity.
func (cuo *ControlUpdateOne) AddActionplans(a ...*ActionPlan) *ControlUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddActionplanIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (cuo *ControlUpdateOne) AddTaskIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddTaskIDs(ids...)
	return cuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (cuo *ControlUpdateOne) AddTasks(t ...*Task) *ControlUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (cuo *ControlUpdateOne) AddProgramIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.AddProgramIDs(ids...)
	return cuo
}

// AddPrograms adds the "programs" edges to the Program entity.
func (cuo *ControlUpdateOne) AddPrograms(p ...*Program) *ControlUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProgramIDs(ids...)
}

// Mutation returns the ControlMutation object of the builder.
func (cuo *ControlUpdateOne) Mutation() *ControlMutation {
	return cuo.mutation
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (cuo *ControlUpdateOne) ClearProcedures() *ControlUpdateOne {
	cuo.mutation.ClearProcedures()
	return cuo
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (cuo *ControlUpdateOne) RemoveProcedureIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveProcedureIDs(ids...)
	return cuo
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (cuo *ControlUpdateOne) RemoveProcedures(p ...*Procedure) *ControlUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProcedureIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (cuo *ControlUpdateOne) ClearSubcontrols() *ControlUpdateOne {
	cuo.mutation.ClearSubcontrols()
	return cuo
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (cuo *ControlUpdateOne) RemoveSubcontrolIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveSubcontrolIDs(ids...)
	return cuo
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (cuo *ControlUpdateOne) RemoveSubcontrols(s ...*Subcontrol) *ControlUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSubcontrolIDs(ids...)
}

// ClearControlobjectives clears all "controlobjectives" edges to the ControlObjective entity.
func (cuo *ControlUpdateOne) ClearControlobjectives() *ControlUpdateOne {
	cuo.mutation.ClearControlobjectives()
	return cuo
}

// RemoveControlobjectiveIDs removes the "controlobjectives" edge to ControlObjective entities by IDs.
func (cuo *ControlUpdateOne) RemoveControlobjectiveIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveControlobjectiveIDs(ids...)
	return cuo
}

// RemoveControlobjectives removes "controlobjectives" edges to ControlObjective entities.
func (cuo *ControlUpdateOne) RemoveControlobjectives(c ...*ControlObjective) *ControlUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveControlobjectiveIDs(ids...)
}

// ClearStandard clears all "standard" edges to the Standard entity.
func (cuo *ControlUpdateOne) ClearStandard() *ControlUpdateOne {
	cuo.mutation.ClearStandard()
	return cuo
}

// RemoveStandardIDs removes the "standard" edge to Standard entities by IDs.
func (cuo *ControlUpdateOne) RemoveStandardIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveStandardIDs(ids...)
	return cuo
}

// RemoveStandard removes "standard" edges to Standard entities.
func (cuo *ControlUpdateOne) RemoveStandard(s ...*Standard) *ControlUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveStandardIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (cuo *ControlUpdateOne) ClearNarratives() *ControlUpdateOne {
	cuo.mutation.ClearNarratives()
	return cuo
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (cuo *ControlUpdateOne) RemoveNarrativeIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveNarrativeIDs(ids...)
	return cuo
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (cuo *ControlUpdateOne) RemoveNarratives(n ...*Narrative) *ControlUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (cuo *ControlUpdateOne) ClearRisks() *ControlUpdateOne {
	cuo.mutation.ClearRisks()
	return cuo
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (cuo *ControlUpdateOne) RemoveRiskIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveRiskIDs(ids...)
	return cuo
}

// RemoveRisks removes "risks" edges to Risk entities.
func (cuo *ControlUpdateOne) RemoveRisks(r ...*Risk) *ControlUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRiskIDs(ids...)
}

// ClearActionplans clears all "actionplans" edges to the ActionPlan entity.
func (cuo *ControlUpdateOne) ClearActionplans() *ControlUpdateOne {
	cuo.mutation.ClearActionplans()
	return cuo
}

// RemoveActionplanIDs removes the "actionplans" edge to ActionPlan entities by IDs.
func (cuo *ControlUpdateOne) RemoveActionplanIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveActionplanIDs(ids...)
	return cuo
}

// RemoveActionplans removes "actionplans" edges to ActionPlan entities.
func (cuo *ControlUpdateOne) RemoveActionplans(a ...*ActionPlan) *ControlUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveActionplanIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (cuo *ControlUpdateOne) ClearTasks() *ControlUpdateOne {
	cuo.mutation.ClearTasks()
	return cuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (cuo *ControlUpdateOne) RemoveTaskIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveTaskIDs(ids...)
	return cuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (cuo *ControlUpdateOne) RemoveTasks(t ...*Task) *ControlUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTaskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (cuo *ControlUpdateOne) ClearPrograms() *ControlUpdateOne {
	cuo.mutation.ClearPrograms()
	return cuo
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (cuo *ControlUpdateOne) RemoveProgramIDs(ids ...string) *ControlUpdateOne {
	cuo.mutation.RemoveProgramIDs(ids...)
	return cuo
}

// RemovePrograms removes "programs" edges to Program entities.
func (cuo *ControlUpdateOne) RemovePrograms(p ...*Program) *ControlUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the ControlUpdate builder.
func (cuo *ControlUpdateOne) Where(ps ...predicate.Control) *ControlUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ControlUpdateOne) Select(field string, fields ...string) *ControlUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Control entity.
func (cuo *ControlUpdateOne) Save(ctx context.Context) (*Control, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ControlUpdateOne) SaveX(ctx context.Context) *Control {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ControlUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ControlUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ControlUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		if control.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized control.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := control.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ControlUpdateOne) sqlSave(ctx context.Context) (_node *Control, err error) {
	_spec := sqlgraph.NewUpdateSpec(control.Table, control.Columns, sqlgraph.NewFieldSpec(control.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Control.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, control.FieldID)
		for _, f := range fields {
			if !control.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != control.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(control.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(control.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(control.FieldUpdatedAt, field.TypeTime)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(control.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(control.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(control.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(control.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(control.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.DeletedBy(); ok {
		_spec.SetField(control.FieldDeletedBy, field.TypeString, value)
	}
	if cuo.mutation.DeletedByCleared() {
		_spec.ClearField(control.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.SetField(control.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldTags, value)
		})
	}
	if cuo.mutation.TagsCleared() {
		_spec.ClearField(control.FieldTags, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(control.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(control.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(control.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(control.FieldStatus, field.TypeString, value)
	}
	if cuo.mutation.StatusCleared() {
		_spec.ClearField(control.FieldStatus, field.TypeString)
	}
	if value, ok := cuo.mutation.ControlType(); ok {
		_spec.SetField(control.FieldControlType, field.TypeString, value)
	}
	if cuo.mutation.ControlTypeCleared() {
		_spec.ClearField(control.FieldControlType, field.TypeString)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(control.FieldVersion, field.TypeString, value)
	}
	if cuo.mutation.VersionCleared() {
		_spec.ClearField(control.FieldVersion, field.TypeString)
	}
	if value, ok := cuo.mutation.ControlNumber(); ok {
		_spec.SetField(control.FieldControlNumber, field.TypeString, value)
	}
	if cuo.mutation.ControlNumberCleared() {
		_spec.ClearField(control.FieldControlNumber, field.TypeString)
	}
	if value, ok := cuo.mutation.Family(); ok {
		_spec.SetField(control.FieldFamily, field.TypeString, value)
	}
	if cuo.mutation.FamilyCleared() {
		_spec.ClearField(control.FieldFamily, field.TypeString)
	}
	if value, ok := cuo.mutation.Class(); ok {
		_spec.SetField(control.FieldClass, field.TypeString, value)
	}
	if cuo.mutation.ClassCleared() {
		_spec.ClearField(control.FieldClass, field.TypeString)
	}
	if value, ok := cuo.mutation.Source(); ok {
		_spec.SetField(control.FieldSource, field.TypeString, value)
	}
	if cuo.mutation.SourceCleared() {
		_spec.ClearField(control.FieldSource, field.TypeString)
	}
	if value, ok := cuo.mutation.Satisfies(); ok {
		_spec.SetField(control.FieldSatisfies, field.TypeString, value)
	}
	if cuo.mutation.SatisfiesCleared() {
		_spec.ClearField(control.FieldSatisfies, field.TypeString)
	}
	if value, ok := cuo.mutation.MappedFrameworks(); ok {
		_spec.SetField(control.FieldMappedFrameworks, field.TypeString, value)
	}
	if cuo.mutation.MappedFrameworksCleared() {
		_spec.ClearField(control.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := cuo.mutation.Details(); ok {
		_spec.SetField(control.FieldDetails, field.TypeJSON, value)
	}
	if cuo.mutation.DetailsCleared() {
		_spec.ClearField(control.FieldDetails, field.TypeJSON)
	}
	if cuo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !cuo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: control.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !cuo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: control.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: control.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ControlobjectivesTable,
			Columns: []string{control.ControlobjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlObjective
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedControlobjectivesIDs(); len(nodes) > 0 && !cuo.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ControlobjectivesTable,
			Columns: []string{control.ControlobjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ControlobjectivesTable,
			Columns: []string{control.ControlobjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: control.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.StandardControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedStandardIDs(); len(nodes) > 0 && !cuo.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: control.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: control.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !cuo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRisksIDs(); len(nodes) > 0 && !cuo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionplansTable,
			Columns: control.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedActionplansIDs(); len(nodes) > 0 && !cuo.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionplansTable,
			Columns: control.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ActionplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionplansTable,
			Columns: control.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !cuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ProgramControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !cuo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cuo.schemaConfig.Control
	ctx = internal.NewSchemaConfigContext(ctx, cuo.schemaConfig)
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Control{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{control.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
