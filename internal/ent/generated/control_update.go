// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlUpdate is the builder for updating Control entities.
type ControlUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlUpdate builder.
func (_u *ControlUpdate) Where(ps ...predicate.Control) *ControlUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ControlUpdate) SetUpdatedAt(v time.Time) *ControlUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ControlUpdate) ClearUpdatedAt() *ControlUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ControlUpdate) SetUpdatedBy(v string) *ControlUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableUpdatedBy(v *string) *ControlUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ControlUpdate) ClearUpdatedBy() *ControlUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ControlUpdate) SetDeletedAt(v time.Time) *ControlUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableDeletedAt(v *time.Time) *ControlUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ControlUpdate) ClearDeletedAt() *ControlUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ControlUpdate) SetDeletedBy(v string) *ControlUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableDeletedBy(v *string) *ControlUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ControlUpdate) ClearDeletedBy() *ControlUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ControlUpdate) SetTags(v []string) *ControlUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ControlUpdate) AppendTags(v []string) *ControlUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ControlUpdate) ClearTags() *ControlUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ControlUpdate) SetDescription(v string) *ControlUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableDescription(v *string) *ControlUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ControlUpdate) ClearDescription() *ControlUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetReferenceID sets the "reference_id" field.
func (_u *ControlUpdate) SetReferenceID(v string) *ControlUpdate {
	_u.mutation.SetReferenceID(v)
	return _u
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableReferenceID(v *string) *ControlUpdate {
	if v != nil {
		_u.SetReferenceID(*v)
	}
	return _u
}

// ClearReferenceID clears the value of the "reference_id" field.
func (_u *ControlUpdate) ClearReferenceID() *ControlUpdate {
	_u.mutation.ClearReferenceID()
	return _u
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_u *ControlUpdate) SetAuditorReferenceID(v string) *ControlUpdate {
	_u.mutation.SetAuditorReferenceID(v)
	return _u
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableAuditorReferenceID(v *string) *ControlUpdate {
	if v != nil {
		_u.SetAuditorReferenceID(*v)
	}
	return _u
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (_u *ControlUpdate) ClearAuditorReferenceID() *ControlUpdate {
	_u.mutation.ClearAuditorReferenceID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ControlUpdate) SetStatus(v enums.ControlStatus) *ControlUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableStatus(v *enums.ControlStatus) *ControlUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ControlUpdate) ClearStatus() *ControlUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSource sets the "source" field.
func (_u *ControlUpdate) SetSource(v enums.ControlSource) *ControlUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableSource(v *enums.ControlSource) *ControlUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ControlUpdate) ClearSource() *ControlUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetReferenceFramework sets the "reference_framework" field.
func (_u *ControlUpdate) SetReferenceFramework(v string) *ControlUpdate {
	_u.mutation.SetReferenceFramework(v)
	return _u
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableReferenceFramework(v *string) *ControlUpdate {
	if v != nil {
		_u.SetReferenceFramework(*v)
	}
	return _u
}

// ClearReferenceFramework clears the value of the "reference_framework" field.
func (_u *ControlUpdate) ClearReferenceFramework() *ControlUpdate {
	_u.mutation.ClearReferenceFramework()
	return _u
}

// SetControlType sets the "control_type" field.
func (_u *ControlUpdate) SetControlType(v enums.ControlType) *ControlUpdate {
	_u.mutation.SetControlType(v)
	return _u
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableControlType(v *enums.ControlType) *ControlUpdate {
	if v != nil {
		_u.SetControlType(*v)
	}
	return _u
}

// ClearControlType clears the value of the "control_type" field.
func (_u *ControlUpdate) ClearControlType() *ControlUpdate {
	_u.mutation.ClearControlType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *ControlUpdate) SetCategory(v string) *ControlUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableCategory(v *string) *ControlUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ControlUpdate) ClearCategory() *ControlUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *ControlUpdate) SetCategoryID(v string) *ControlUpdate {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableCategoryID(v *string) *ControlUpdate {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *ControlUpdate) ClearCategoryID() *ControlUpdate {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetSubcategory sets the "subcategory" field.
func (_u *ControlUpdate) SetSubcategory(v string) *ControlUpdate {
	_u.mutation.SetSubcategory(v)
	return _u
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableSubcategory(v *string) *ControlUpdate {
	if v != nil {
		_u.SetSubcategory(*v)
	}
	return _u
}

// ClearSubcategory clears the value of the "subcategory" field.
func (_u *ControlUpdate) ClearSubcategory() *ControlUpdate {
	_u.mutation.ClearSubcategory()
	return _u
}

// SetMappedCategories sets the "mapped_categories" field.
func (_u *ControlUpdate) SetMappedCategories(v []string) *ControlUpdate {
	_u.mutation.SetMappedCategories(v)
	return _u
}

// AppendMappedCategories appends value to the "mapped_categories" field.
func (_u *ControlUpdate) AppendMappedCategories(v []string) *ControlUpdate {
	_u.mutation.AppendMappedCategories(v)
	return _u
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (_u *ControlUpdate) ClearMappedCategories() *ControlUpdate {
	_u.mutation.ClearMappedCategories()
	return _u
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_u *ControlUpdate) SetAssessmentObjectives(v []models.AssessmentObjective) *ControlUpdate {
	_u.mutation.SetAssessmentObjectives(v)
	return _u
}

// AppendAssessmentObjectives appends value to the "assessment_objectives" field.
func (_u *ControlUpdate) AppendAssessmentObjectives(v []models.AssessmentObjective) *ControlUpdate {
	_u.mutation.AppendAssessmentObjectives(v)
	return _u
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (_u *ControlUpdate) ClearAssessmentObjectives() *ControlUpdate {
	_u.mutation.ClearAssessmentObjectives()
	return _u
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_u *ControlUpdate) SetAssessmentMethods(v []models.AssessmentMethod) *ControlUpdate {
	_u.mutation.SetAssessmentMethods(v)
	return _u
}

// AppendAssessmentMethods appends value to the "assessment_methods" field.
func (_u *ControlUpdate) AppendAssessmentMethods(v []models.AssessmentMethod) *ControlUpdate {
	_u.mutation.AppendAssessmentMethods(v)
	return _u
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (_u *ControlUpdate) ClearAssessmentMethods() *ControlUpdate {
	_u.mutation.ClearAssessmentMethods()
	return _u
}

// SetControlQuestions sets the "control_questions" field.
func (_u *ControlUpdate) SetControlQuestions(v []string) *ControlUpdate {
	_u.mutation.SetControlQuestions(v)
	return _u
}

// AppendControlQuestions appends value to the "control_questions" field.
func (_u *ControlUpdate) AppendControlQuestions(v []string) *ControlUpdate {
	_u.mutation.AppendControlQuestions(v)
	return _u
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (_u *ControlUpdate) ClearControlQuestions() *ControlUpdate {
	_u.mutation.ClearControlQuestions()
	return _u
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_u *ControlUpdate) SetImplementationGuidance(v []models.ImplementationGuidance) *ControlUpdate {
	_u.mutation.SetImplementationGuidance(v)
	return _u
}

// AppendImplementationGuidance appends value to the "implementation_guidance" field.
func (_u *ControlUpdate) AppendImplementationGuidance(v []models.ImplementationGuidance) *ControlUpdate {
	_u.mutation.AppendImplementationGuidance(v)
	return _u
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (_u *ControlUpdate) ClearImplementationGuidance() *ControlUpdate {
	_u.mutation.ClearImplementationGuidance()
	return _u
}

// SetExampleEvidence sets the "example_evidence" field.
func (_u *ControlUpdate) SetExampleEvidence(v []models.ExampleEvidence) *ControlUpdate {
	_u.mutation.SetExampleEvidence(v)
	return _u
}

// AppendExampleEvidence appends value to the "example_evidence" field.
func (_u *ControlUpdate) AppendExampleEvidence(v []models.ExampleEvidence) *ControlUpdate {
	_u.mutation.AppendExampleEvidence(v)
	return _u
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (_u *ControlUpdate) ClearExampleEvidence() *ControlUpdate {
	_u.mutation.ClearExampleEvidence()
	return _u
}

// SetReferences sets the "references" field.
func (_u *ControlUpdate) SetReferences(v []models.Reference) *ControlUpdate {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *ControlUpdate) AppendReferences(v []models.Reference) *ControlUpdate {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *ControlUpdate) ClearReferences() *ControlUpdate {
	_u.mutation.ClearReferences()
	return _u
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_u *ControlUpdate) SetControlOwnerID(v string) *ControlUpdate {
	_u.mutation.SetControlOwnerID(v)
	return _u
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableControlOwnerID(v *string) *ControlUpdate {
	if v != nil {
		_u.SetControlOwnerID(*v)
	}
	return _u
}

// ClearControlOwnerID clears the value of the "control_owner_id" field.
func (_u *ControlUpdate) ClearControlOwnerID() *ControlUpdate {
	_u.mutation.ClearControlOwnerID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ControlUpdate) SetDelegateID(v string) *ControlUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableDelegateID(v *string) *ControlUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ControlUpdate) ClearDelegateID() *ControlUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetRefCode sets the "ref_code" field.
func (_u *ControlUpdate) SetRefCode(v string) *ControlUpdate {
	_u.mutation.SetRefCode(v)
	return _u
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableRefCode(v *string) *ControlUpdate {
	if v != nil {
		_u.SetRefCode(*v)
	}
	return _u
}

// SetStandardID sets the "standard_id" field.
func (_u *ControlUpdate) SetStandardID(v string) *ControlUpdate {
	_u.mutation.SetStandardID(v)
	return _u
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (_u *ControlUpdate) SetNillableStandardID(v *string) *ControlUpdate {
	if v != nil {
		_u.SetStandardID(*v)
	}
	return _u
}

// ClearStandardID clears the value of the "standard_id" field.
func (_u *ControlUpdate) ClearStandardID() *ControlUpdate {
	_u.mutation.ClearStandardID()
	return _u
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_u *ControlUpdate) AddEvidenceIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddEvidenceIDs(ids...)
	return _u
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_u *ControlUpdate) AddEvidence(v ...*Evidence) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *ControlUpdate) AddControlObjectiveIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *ControlUpdate) AddControlObjectives(v ...*ControlObjective) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *ControlUpdate) AddTaskIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *ControlUpdate) AddTasks(v ...*Task) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *ControlUpdate) AddNarrativeIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *ControlUpdate) AddNarratives(v ...*Narrative) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *ControlUpdate) AddRiskIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *ControlUpdate) AddRisks(v ...*Risk) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *ControlUpdate) AddActionPlanIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *ControlUpdate) AddActionPlans(v ...*ActionPlan) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *ControlUpdate) AddProcedureIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *ControlUpdate) AddProcedures(v ...*Procedure) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *ControlUpdate) AddInternalPolicyIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *ControlUpdate) AddInternalPolicies(v ...*InternalPolicy) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (_u *ControlUpdate) SetControlOwner(v *Group) *ControlUpdate {
	return _u.SetControlOwnerID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *ControlUpdate) SetDelegate(v *Group) *ControlUpdate {
	return _u.SetDelegateID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *ControlUpdate) AddBlockedGroupIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *ControlUpdate) AddBlockedGroups(v ...*Group) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *ControlUpdate) AddEditorIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *ControlUpdate) AddEditors(v ...*Group) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// SetStandard sets the "standard" edge to the Standard entity.
func (_u *ControlUpdate) SetStandard(v *Standard) *ControlUpdate {
	return _u.SetStandardID(v.ID)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *ControlUpdate) AddProgramIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *ControlUpdate) AddPrograms(v ...*Program) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *ControlUpdate) AddAssetIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *ControlUpdate) AddAssets(v ...*Asset) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_u *ControlUpdate) AddScanIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddScanIDs(ids...)
	return _u
}

// AddScans adds the "scans" edges to the Scan entity.
func (_u *ControlUpdate) AddScans(v ...*Scan) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *ControlUpdate) AddControlImplementationIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *ControlUpdate) AddControlImplementations(v ...*ControlImplementation) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *ControlUpdate) AddSubcontrolIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *ControlUpdate) AddSubcontrols(v ...*Subcontrol) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_u *ControlUpdate) AddScheduledJobIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddScheduledJobIDs(ids...)
	return _u
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *ControlUpdate) AddScheduledJobs(v ...*ScheduledJob) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobIDs(ids...)
}

// AddMappedToControlIDs adds the "mapped_to_controls" edge to the MappedControl entity by IDs.
func (_u *ControlUpdate) AddMappedToControlIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddMappedToControlIDs(ids...)
	return _u
}

// AddMappedToControls adds the "mapped_to_controls" edges to the MappedControl entity.
func (_u *ControlUpdate) AddMappedToControls(v ...*MappedControl) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedToControlIDs(ids...)
}

// AddMappedFromControlIDs adds the "mapped_from_controls" edge to the MappedControl entity by IDs.
func (_u *ControlUpdate) AddMappedFromControlIDs(ids ...string) *ControlUpdate {
	_u.mutation.AddMappedFromControlIDs(ids...)
	return _u
}

// AddMappedFromControls adds the "mapped_from_controls" edges to the MappedControl entity.
func (_u *ControlUpdate) AddMappedFromControls(v ...*MappedControl) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedFromControlIDs(ids...)
}

// Mutation returns the ControlMutation object of the builder.
func (_u *ControlUpdate) Mutation() *ControlMutation {
	return _u.mutation
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (_u *ControlUpdate) ClearEvidence() *ControlUpdate {
	_u.mutation.ClearEvidence()
	return _u
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (_u *ControlUpdate) RemoveEvidenceIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveEvidenceIDs(ids...)
	return _u
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (_u *ControlUpdate) RemoveEvidence(v ...*Evidence) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *ControlUpdate) ClearControlObjectives() *ControlUpdate {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *ControlUpdate) RemoveControlObjectiveIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *ControlUpdate) RemoveControlObjectives(v ...*ControlObjective) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *ControlUpdate) ClearTasks() *ControlUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *ControlUpdate) RemoveTaskIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *ControlUpdate) RemoveTasks(v ...*Task) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *ControlUpdate) ClearNarratives() *ControlUpdate {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *ControlUpdate) RemoveNarrativeIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *ControlUpdate) RemoveNarratives(v ...*Narrative) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *ControlUpdate) ClearRisks() *ControlUpdate {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *ControlUpdate) RemoveRiskIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *ControlUpdate) RemoveRisks(v ...*Risk) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *ControlUpdate) ClearActionPlans() *ControlUpdate {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *ControlUpdate) RemoveActionPlanIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *ControlUpdate) RemoveActionPlans(v ...*ActionPlan) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *ControlUpdate) ClearProcedures() *ControlUpdate {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *ControlUpdate) RemoveProcedureIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *ControlUpdate) RemoveProcedures(v ...*Procedure) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *ControlUpdate) ClearInternalPolicies() *ControlUpdate {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *ControlUpdate) RemoveInternalPolicyIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *ControlUpdate) RemoveInternalPolicies(v ...*InternalPolicy) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearControlOwner clears the "control_owner" edge to the Group entity.
func (_u *ControlUpdate) ClearControlOwner() *ControlUpdate {
	_u.mutation.ClearControlOwner()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *ControlUpdate) ClearDelegate() *ControlUpdate {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *ControlUpdate) ClearBlockedGroups() *ControlUpdate {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *ControlUpdate) RemoveBlockedGroupIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *ControlUpdate) RemoveBlockedGroups(v ...*Group) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *ControlUpdate) ClearEditors() *ControlUpdate {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *ControlUpdate) RemoveEditorIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *ControlUpdate) RemoveEditors(v ...*Group) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearStandard clears the "standard" edge to the Standard entity.
func (_u *ControlUpdate) ClearStandard() *ControlUpdate {
	_u.mutation.ClearStandard()
	return _u
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *ControlUpdate) ClearPrograms() *ControlUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *ControlUpdate) RemoveProgramIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *ControlUpdate) RemovePrograms(v ...*Program) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *ControlUpdate) ClearAssets() *ControlUpdate {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *ControlUpdate) RemoveAssetIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *ControlUpdate) RemoveAssets(v ...*Asset) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (_u *ControlUpdate) ClearScans() *ControlUpdate {
	_u.mutation.ClearScans()
	return _u
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (_u *ControlUpdate) RemoveScanIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveScanIDs(ids...)
	return _u
}

// RemoveScans removes "scans" edges to Scan entities.
func (_u *ControlUpdate) RemoveScans(v ...*Scan) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanIDs(ids...)
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *ControlUpdate) ClearControlImplementations() *ControlUpdate {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *ControlUpdate) RemoveControlImplementationIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *ControlUpdate) RemoveControlImplementations(v ...*ControlImplementation) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *ControlUpdate) ClearSubcontrols() *ControlUpdate {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *ControlUpdate) RemoveSubcontrolIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *ControlUpdate) RemoveSubcontrols(v ...*Subcontrol) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *ControlUpdate) ClearScheduledJobs() *ControlUpdate {
	_u.mutation.ClearScheduledJobs()
	return _u
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (_u *ControlUpdate) RemoveScheduledJobIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveScheduledJobIDs(ids...)
	return _u
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (_u *ControlUpdate) RemoveScheduledJobs(v ...*ScheduledJob) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobIDs(ids...)
}

// ClearMappedToControls clears all "mapped_to_controls" edges to the MappedControl entity.
func (_u *ControlUpdate) ClearMappedToControls() *ControlUpdate {
	_u.mutation.ClearMappedToControls()
	return _u
}

// RemoveMappedToControlIDs removes the "mapped_to_controls" edge to MappedControl entities by IDs.
func (_u *ControlUpdate) RemoveMappedToControlIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveMappedToControlIDs(ids...)
	return _u
}

// RemoveMappedToControls removes "mapped_to_controls" edges to MappedControl entities.
func (_u *ControlUpdate) RemoveMappedToControls(v ...*MappedControl) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedToControlIDs(ids...)
}

// ClearMappedFromControls clears all "mapped_from_controls" edges to the MappedControl entity.
func (_u *ControlUpdate) ClearMappedFromControls() *ControlUpdate {
	_u.mutation.ClearMappedFromControls()
	return _u
}

// RemoveMappedFromControlIDs removes the "mapped_from_controls" edge to MappedControl entities by IDs.
func (_u *ControlUpdate) RemoveMappedFromControlIDs(ids ...string) *ControlUpdate {
	_u.mutation.RemoveMappedFromControlIDs(ids...)
	return _u
}

// RemoveMappedFromControls removes "mapped_from_controls" edges to MappedControl entities.
func (_u *ControlUpdate) RemoveMappedFromControls(v ...*MappedControl) *ControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedFromControlIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ControlUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ControlUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ControlUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ControlUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ControlUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if control.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized control.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := control.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ControlUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := control.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Control.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := control.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Control.source": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlType(); ok {
		if err := control.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Control.control_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefCode(); ok {
		if err := control.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Control.ref_code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ControlUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(control.Table, control.Columns, sqlgraph.NewFieldSpec(control.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(control.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(control.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(control.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(control.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(control.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(control.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(control.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(control.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(control.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(control.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(control.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(control.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(control.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(control.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ReferenceID(); ok {
		_spec.SetField(control.FieldReferenceID, field.TypeString, value)
	}
	if _u.mutation.ReferenceIDCleared() {
		_spec.ClearField(control.FieldReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorReferenceID(); ok {
		_spec.SetField(control.FieldAuditorReferenceID, field.TypeString, value)
	}
	if _u.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(control.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(control.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(control.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(control.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(control.FieldSource, field.TypeEnum)
	}
	if value, ok := _u.mutation.ReferenceFramework(); ok {
		_spec.SetField(control.FieldReferenceFramework, field.TypeString, value)
	}
	if _u.mutation.ReferenceFrameworkCleared() {
		_spec.ClearField(control.FieldReferenceFramework, field.TypeString)
	}
	if value, ok := _u.mutation.ControlType(); ok {
		_spec.SetField(control.FieldControlType, field.TypeEnum, value)
	}
	if _u.mutation.ControlTypeCleared() {
		_spec.ClearField(control.FieldControlType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(control.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(control.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(control.FieldCategoryID, field.TypeString, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(control.FieldCategoryID, field.TypeString)
	}
	if value, ok := _u.mutation.Subcategory(); ok {
		_spec.SetField(control.FieldSubcategory, field.TypeString, value)
	}
	if _u.mutation.SubcategoryCleared() {
		_spec.ClearField(control.FieldSubcategory, field.TypeString)
	}
	if value, ok := _u.mutation.MappedCategories(); ok {
		_spec.SetField(control.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldMappedCategories, value)
		})
	}
	if _u.mutation.MappedCategoriesCleared() {
		_spec.ClearField(control.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentObjectives(); ok {
		_spec.SetField(control.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldAssessmentObjectives, value)
		})
	}
	if _u.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(control.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentMethods(); ok {
		_spec.SetField(control.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldAssessmentMethods, value)
		})
	}
	if _u.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(control.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlQuestions(); ok {
		_spec.SetField(control.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldControlQuestions, value)
		})
	}
	if _u.mutation.ControlQuestionsCleared() {
		_spec.ClearField(control.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImplementationGuidance(); ok {
		_spec.SetField(control.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldImplementationGuidance, value)
		})
	}
	if _u.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(control.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExampleEvidence(); ok {
		_spec.SetField(control.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldExampleEvidence, value)
		})
	}
	if _u.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(control.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(control.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(control.FieldReferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.RefCode(); ok {
		_spec.SetField(control.FieldRefCode, field.TypeString, value)
	}
	if _u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.InternalPoliciesTable,
			Columns: control.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.InternalPoliciesTable,
			Columns: control.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.InternalPoliciesTable,
			Columns: control.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.ControlOwnerTable,
			Columns: []string{control.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.ControlOwnerTable,
			Columns: []string{control.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.DelegateTable,
			Columns: []string{control.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.DelegateTable,
			Columns: []string{control.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: []string{control.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: []string{control.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.AssetsTable,
			Columns: control.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.AssetsTable,
			Columns: control.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.AssetsTable,
			Columns: control.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ScansTable,
			Columns: []string{control.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScansIDs(); len(nodes) > 0 && !_u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ScansTable,
			Columns: []string{control.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ScansTable,
			Columns: []string{control.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ScheduledJobsTable,
			Columns: control.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ScheduledJobsTable,
			Columns: control.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ScheduledJobsTable,
			Columns: control.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedToControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedToControlsTable,
			Columns: control.MappedToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedToControlsIDs(); len(nodes) > 0 && !_u.mutation.MappedToControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedToControlsTable,
			Columns: control.MappedToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedToControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedToControlsTable,
			Columns: control.MappedToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedFromControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedFromControlsTable,
			Columns: control.MappedFromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedFromControlsIDs(); len(nodes) > 0 && !_u.mutation.MappedFromControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedFromControlsTable,
			Columns: control.MappedFromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedFromControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedFromControlsTable,
			Columns: control.MappedFromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Control
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{control.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ControlUpdateOne is the builder for updating a single Control entity.
type ControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ControlUpdateOne) SetUpdatedAt(v time.Time) *ControlUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ControlUpdateOne) ClearUpdatedAt() *ControlUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ControlUpdateOne) SetUpdatedBy(v string) *ControlUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableUpdatedBy(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ControlUpdateOne) ClearUpdatedBy() *ControlUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ControlUpdateOne) SetDeletedAt(v time.Time) *ControlUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableDeletedAt(v *time.Time) *ControlUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ControlUpdateOne) ClearDeletedAt() *ControlUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ControlUpdateOne) SetDeletedBy(v string) *ControlUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableDeletedBy(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ControlUpdateOne) ClearDeletedBy() *ControlUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ControlUpdateOne) SetTags(v []string) *ControlUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ControlUpdateOne) AppendTags(v []string) *ControlUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ControlUpdateOne) ClearTags() *ControlUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ControlUpdateOne) SetDescription(v string) *ControlUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableDescription(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ControlUpdateOne) ClearDescription() *ControlUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetReferenceID sets the "reference_id" field.
func (_u *ControlUpdateOne) SetReferenceID(v string) *ControlUpdateOne {
	_u.mutation.SetReferenceID(v)
	return _u
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableReferenceID(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetReferenceID(*v)
	}
	return _u
}

// ClearReferenceID clears the value of the "reference_id" field.
func (_u *ControlUpdateOne) ClearReferenceID() *ControlUpdateOne {
	_u.mutation.ClearReferenceID()
	return _u
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_u *ControlUpdateOne) SetAuditorReferenceID(v string) *ControlUpdateOne {
	_u.mutation.SetAuditorReferenceID(v)
	return _u
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableAuditorReferenceID(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetAuditorReferenceID(*v)
	}
	return _u
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (_u *ControlUpdateOne) ClearAuditorReferenceID() *ControlUpdateOne {
	_u.mutation.ClearAuditorReferenceID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ControlUpdateOne) SetStatus(v enums.ControlStatus) *ControlUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableStatus(v *enums.ControlStatus) *ControlUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ControlUpdateOne) ClearStatus() *ControlUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSource sets the "source" field.
func (_u *ControlUpdateOne) SetSource(v enums.ControlSource) *ControlUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableSource(v *enums.ControlSource) *ControlUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ControlUpdateOne) ClearSource() *ControlUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetReferenceFramework sets the "reference_framework" field.
func (_u *ControlUpdateOne) SetReferenceFramework(v string) *ControlUpdateOne {
	_u.mutation.SetReferenceFramework(v)
	return _u
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableReferenceFramework(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetReferenceFramework(*v)
	}
	return _u
}

// ClearReferenceFramework clears the value of the "reference_framework" field.
func (_u *ControlUpdateOne) ClearReferenceFramework() *ControlUpdateOne {
	_u.mutation.ClearReferenceFramework()
	return _u
}

// SetControlType sets the "control_type" field.
func (_u *ControlUpdateOne) SetControlType(v enums.ControlType) *ControlUpdateOne {
	_u.mutation.SetControlType(v)
	return _u
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableControlType(v *enums.ControlType) *ControlUpdateOne {
	if v != nil {
		_u.SetControlType(*v)
	}
	return _u
}

// ClearControlType clears the value of the "control_type" field.
func (_u *ControlUpdateOne) ClearControlType() *ControlUpdateOne {
	_u.mutation.ClearControlType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *ControlUpdateOne) SetCategory(v string) *ControlUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableCategory(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ControlUpdateOne) ClearCategory() *ControlUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *ControlUpdateOne) SetCategoryID(v string) *ControlUpdateOne {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableCategoryID(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *ControlUpdateOne) ClearCategoryID() *ControlUpdateOne {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetSubcategory sets the "subcategory" field.
func (_u *ControlUpdateOne) SetSubcategory(v string) *ControlUpdateOne {
	_u.mutation.SetSubcategory(v)
	return _u
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableSubcategory(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetSubcategory(*v)
	}
	return _u
}

// ClearSubcategory clears the value of the "subcategory" field.
func (_u *ControlUpdateOne) ClearSubcategory() *ControlUpdateOne {
	_u.mutation.ClearSubcategory()
	return _u
}

// SetMappedCategories sets the "mapped_categories" field.
func (_u *ControlUpdateOne) SetMappedCategories(v []string) *ControlUpdateOne {
	_u.mutation.SetMappedCategories(v)
	return _u
}

// AppendMappedCategories appends value to the "mapped_categories" field.
func (_u *ControlUpdateOne) AppendMappedCategories(v []string) *ControlUpdateOne {
	_u.mutation.AppendMappedCategories(v)
	return _u
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (_u *ControlUpdateOne) ClearMappedCategories() *ControlUpdateOne {
	_u.mutation.ClearMappedCategories()
	return _u
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_u *ControlUpdateOne) SetAssessmentObjectives(v []models.AssessmentObjective) *ControlUpdateOne {
	_u.mutation.SetAssessmentObjectives(v)
	return _u
}

// AppendAssessmentObjectives appends value to the "assessment_objectives" field.
func (_u *ControlUpdateOne) AppendAssessmentObjectives(v []models.AssessmentObjective) *ControlUpdateOne {
	_u.mutation.AppendAssessmentObjectives(v)
	return _u
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (_u *ControlUpdateOne) ClearAssessmentObjectives() *ControlUpdateOne {
	_u.mutation.ClearAssessmentObjectives()
	return _u
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_u *ControlUpdateOne) SetAssessmentMethods(v []models.AssessmentMethod) *ControlUpdateOne {
	_u.mutation.SetAssessmentMethods(v)
	return _u
}

// AppendAssessmentMethods appends value to the "assessment_methods" field.
func (_u *ControlUpdateOne) AppendAssessmentMethods(v []models.AssessmentMethod) *ControlUpdateOne {
	_u.mutation.AppendAssessmentMethods(v)
	return _u
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (_u *ControlUpdateOne) ClearAssessmentMethods() *ControlUpdateOne {
	_u.mutation.ClearAssessmentMethods()
	return _u
}

// SetControlQuestions sets the "control_questions" field.
func (_u *ControlUpdateOne) SetControlQuestions(v []string) *ControlUpdateOne {
	_u.mutation.SetControlQuestions(v)
	return _u
}

// AppendControlQuestions appends value to the "control_questions" field.
func (_u *ControlUpdateOne) AppendControlQuestions(v []string) *ControlUpdateOne {
	_u.mutation.AppendControlQuestions(v)
	return _u
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (_u *ControlUpdateOne) ClearControlQuestions() *ControlUpdateOne {
	_u.mutation.ClearControlQuestions()
	return _u
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_u *ControlUpdateOne) SetImplementationGuidance(v []models.ImplementationGuidance) *ControlUpdateOne {
	_u.mutation.SetImplementationGuidance(v)
	return _u
}

// AppendImplementationGuidance appends value to the "implementation_guidance" field.
func (_u *ControlUpdateOne) AppendImplementationGuidance(v []models.ImplementationGuidance) *ControlUpdateOne {
	_u.mutation.AppendImplementationGuidance(v)
	return _u
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (_u *ControlUpdateOne) ClearImplementationGuidance() *ControlUpdateOne {
	_u.mutation.ClearImplementationGuidance()
	return _u
}

// SetExampleEvidence sets the "example_evidence" field.
func (_u *ControlUpdateOne) SetExampleEvidence(v []models.ExampleEvidence) *ControlUpdateOne {
	_u.mutation.SetExampleEvidence(v)
	return _u
}

// AppendExampleEvidence appends value to the "example_evidence" field.
func (_u *ControlUpdateOne) AppendExampleEvidence(v []models.ExampleEvidence) *ControlUpdateOne {
	_u.mutation.AppendExampleEvidence(v)
	return _u
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (_u *ControlUpdateOne) ClearExampleEvidence() *ControlUpdateOne {
	_u.mutation.ClearExampleEvidence()
	return _u
}

// SetReferences sets the "references" field.
func (_u *ControlUpdateOne) SetReferences(v []models.Reference) *ControlUpdateOne {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *ControlUpdateOne) AppendReferences(v []models.Reference) *ControlUpdateOne {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *ControlUpdateOne) ClearReferences() *ControlUpdateOne {
	_u.mutation.ClearReferences()
	return _u
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_u *ControlUpdateOne) SetControlOwnerID(v string) *ControlUpdateOne {
	_u.mutation.SetControlOwnerID(v)
	return _u
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableControlOwnerID(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetControlOwnerID(*v)
	}
	return _u
}

// ClearControlOwnerID clears the value of the "control_owner_id" field.
func (_u *ControlUpdateOne) ClearControlOwnerID() *ControlUpdateOne {
	_u.mutation.ClearControlOwnerID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ControlUpdateOne) SetDelegateID(v string) *ControlUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableDelegateID(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ControlUpdateOne) ClearDelegateID() *ControlUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetRefCode sets the "ref_code" field.
func (_u *ControlUpdateOne) SetRefCode(v string) *ControlUpdateOne {
	_u.mutation.SetRefCode(v)
	return _u
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableRefCode(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetRefCode(*v)
	}
	return _u
}

// SetStandardID sets the "standard_id" field.
func (_u *ControlUpdateOne) SetStandardID(v string) *ControlUpdateOne {
	_u.mutation.SetStandardID(v)
	return _u
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (_u *ControlUpdateOne) SetNillableStandardID(v *string) *ControlUpdateOne {
	if v != nil {
		_u.SetStandardID(*v)
	}
	return _u
}

// ClearStandardID clears the value of the "standard_id" field.
func (_u *ControlUpdateOne) ClearStandardID() *ControlUpdateOne {
	_u.mutation.ClearStandardID()
	return _u
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_u *ControlUpdateOne) AddEvidenceIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddEvidenceIDs(ids...)
	return _u
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_u *ControlUpdateOne) AddEvidence(v ...*Evidence) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *ControlUpdateOne) AddControlObjectiveIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *ControlUpdateOne) AddControlObjectives(v ...*ControlObjective) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *ControlUpdateOne) AddTaskIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *ControlUpdateOne) AddTasks(v ...*Task) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *ControlUpdateOne) AddNarrativeIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *ControlUpdateOne) AddNarratives(v ...*Narrative) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *ControlUpdateOne) AddRiskIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *ControlUpdateOne) AddRisks(v ...*Risk) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *ControlUpdateOne) AddActionPlanIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *ControlUpdateOne) AddActionPlans(v ...*ActionPlan) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *ControlUpdateOne) AddProcedureIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *ControlUpdateOne) AddProcedures(v ...*Procedure) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *ControlUpdateOne) AddInternalPolicyIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *ControlUpdateOne) AddInternalPolicies(v ...*InternalPolicy) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (_u *ControlUpdateOne) SetControlOwner(v *Group) *ControlUpdateOne {
	return _u.SetControlOwnerID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *ControlUpdateOne) SetDelegate(v *Group) *ControlUpdateOne {
	return _u.SetDelegateID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *ControlUpdateOne) AddBlockedGroupIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *ControlUpdateOne) AddBlockedGroups(v ...*Group) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *ControlUpdateOne) AddEditorIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *ControlUpdateOne) AddEditors(v ...*Group) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// SetStandard sets the "standard" edge to the Standard entity.
func (_u *ControlUpdateOne) SetStandard(v *Standard) *ControlUpdateOne {
	return _u.SetStandardID(v.ID)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *ControlUpdateOne) AddProgramIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *ControlUpdateOne) AddPrograms(v ...*Program) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *ControlUpdateOne) AddAssetIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *ControlUpdateOne) AddAssets(v ...*Asset) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_u *ControlUpdateOne) AddScanIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddScanIDs(ids...)
	return _u
}

// AddScans adds the "scans" edges to the Scan entity.
func (_u *ControlUpdateOne) AddScans(v ...*Scan) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *ControlUpdateOne) AddControlImplementationIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *ControlUpdateOne) AddControlImplementations(v ...*ControlImplementation) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *ControlUpdateOne) AddSubcontrolIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *ControlUpdateOne) AddSubcontrols(v ...*Subcontrol) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_u *ControlUpdateOne) AddScheduledJobIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddScheduledJobIDs(ids...)
	return _u
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *ControlUpdateOne) AddScheduledJobs(v ...*ScheduledJob) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobIDs(ids...)
}

// AddMappedToControlIDs adds the "mapped_to_controls" edge to the MappedControl entity by IDs.
func (_u *ControlUpdateOne) AddMappedToControlIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddMappedToControlIDs(ids...)
	return _u
}

// AddMappedToControls adds the "mapped_to_controls" edges to the MappedControl entity.
func (_u *ControlUpdateOne) AddMappedToControls(v ...*MappedControl) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedToControlIDs(ids...)
}

// AddMappedFromControlIDs adds the "mapped_from_controls" edge to the MappedControl entity by IDs.
func (_u *ControlUpdateOne) AddMappedFromControlIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.AddMappedFromControlIDs(ids...)
	return _u
}

// AddMappedFromControls adds the "mapped_from_controls" edges to the MappedControl entity.
func (_u *ControlUpdateOne) AddMappedFromControls(v ...*MappedControl) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedFromControlIDs(ids...)
}

// Mutation returns the ControlMutation object of the builder.
func (_u *ControlUpdateOne) Mutation() *ControlMutation {
	return _u.mutation
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (_u *ControlUpdateOne) ClearEvidence() *ControlUpdateOne {
	_u.mutation.ClearEvidence()
	return _u
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (_u *ControlUpdateOne) RemoveEvidenceIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveEvidenceIDs(ids...)
	return _u
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (_u *ControlUpdateOne) RemoveEvidence(v ...*Evidence) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *ControlUpdateOne) ClearControlObjectives() *ControlUpdateOne {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *ControlUpdateOne) RemoveControlObjectiveIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *ControlUpdateOne) RemoveControlObjectives(v ...*ControlObjective) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *ControlUpdateOne) ClearTasks() *ControlUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *ControlUpdateOne) RemoveTaskIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *ControlUpdateOne) RemoveTasks(v ...*Task) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *ControlUpdateOne) ClearNarratives() *ControlUpdateOne {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *ControlUpdateOne) RemoveNarrativeIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *ControlUpdateOne) RemoveNarratives(v ...*Narrative) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *ControlUpdateOne) ClearRisks() *ControlUpdateOne {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *ControlUpdateOne) RemoveRiskIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *ControlUpdateOne) RemoveRisks(v ...*Risk) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *ControlUpdateOne) ClearActionPlans() *ControlUpdateOne {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *ControlUpdateOne) RemoveActionPlanIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *ControlUpdateOne) RemoveActionPlans(v ...*ActionPlan) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *ControlUpdateOne) ClearProcedures() *ControlUpdateOne {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *ControlUpdateOne) RemoveProcedureIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *ControlUpdateOne) RemoveProcedures(v ...*Procedure) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *ControlUpdateOne) ClearInternalPolicies() *ControlUpdateOne {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *ControlUpdateOne) RemoveInternalPolicyIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *ControlUpdateOne) RemoveInternalPolicies(v ...*InternalPolicy) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearControlOwner clears the "control_owner" edge to the Group entity.
func (_u *ControlUpdateOne) ClearControlOwner() *ControlUpdateOne {
	_u.mutation.ClearControlOwner()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *ControlUpdateOne) ClearDelegate() *ControlUpdateOne {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *ControlUpdateOne) ClearBlockedGroups() *ControlUpdateOne {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *ControlUpdateOne) RemoveBlockedGroupIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *ControlUpdateOne) RemoveBlockedGroups(v ...*Group) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *ControlUpdateOne) ClearEditors() *ControlUpdateOne {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *ControlUpdateOne) RemoveEditorIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *ControlUpdateOne) RemoveEditors(v ...*Group) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearStandard clears the "standard" edge to the Standard entity.
func (_u *ControlUpdateOne) ClearStandard() *ControlUpdateOne {
	_u.mutation.ClearStandard()
	return _u
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *ControlUpdateOne) ClearPrograms() *ControlUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *ControlUpdateOne) RemoveProgramIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *ControlUpdateOne) RemovePrograms(v ...*Program) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *ControlUpdateOne) ClearAssets() *ControlUpdateOne {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *ControlUpdateOne) RemoveAssetIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *ControlUpdateOne) RemoveAssets(v ...*Asset) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (_u *ControlUpdateOne) ClearScans() *ControlUpdateOne {
	_u.mutation.ClearScans()
	return _u
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (_u *ControlUpdateOne) RemoveScanIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveScanIDs(ids...)
	return _u
}

// RemoveScans removes "scans" edges to Scan entities.
func (_u *ControlUpdateOne) RemoveScans(v ...*Scan) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanIDs(ids...)
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *ControlUpdateOne) ClearControlImplementations() *ControlUpdateOne {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *ControlUpdateOne) RemoveControlImplementationIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *ControlUpdateOne) RemoveControlImplementations(v ...*ControlImplementation) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *ControlUpdateOne) ClearSubcontrols() *ControlUpdateOne {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *ControlUpdateOne) RemoveSubcontrolIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *ControlUpdateOne) RemoveSubcontrols(v ...*Subcontrol) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *ControlUpdateOne) ClearScheduledJobs() *ControlUpdateOne {
	_u.mutation.ClearScheduledJobs()
	return _u
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (_u *ControlUpdateOne) RemoveScheduledJobIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveScheduledJobIDs(ids...)
	return _u
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (_u *ControlUpdateOne) RemoveScheduledJobs(v ...*ScheduledJob) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobIDs(ids...)
}

// ClearMappedToControls clears all "mapped_to_controls" edges to the MappedControl entity.
func (_u *ControlUpdateOne) ClearMappedToControls() *ControlUpdateOne {
	_u.mutation.ClearMappedToControls()
	return _u
}

// RemoveMappedToControlIDs removes the "mapped_to_controls" edge to MappedControl entities by IDs.
func (_u *ControlUpdateOne) RemoveMappedToControlIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveMappedToControlIDs(ids...)
	return _u
}

// RemoveMappedToControls removes "mapped_to_controls" edges to MappedControl entities.
func (_u *ControlUpdateOne) RemoveMappedToControls(v ...*MappedControl) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedToControlIDs(ids...)
}

// ClearMappedFromControls clears all "mapped_from_controls" edges to the MappedControl entity.
func (_u *ControlUpdateOne) ClearMappedFromControls() *ControlUpdateOne {
	_u.mutation.ClearMappedFromControls()
	return _u
}

// RemoveMappedFromControlIDs removes the "mapped_from_controls" edge to MappedControl entities by IDs.
func (_u *ControlUpdateOne) RemoveMappedFromControlIDs(ids ...string) *ControlUpdateOne {
	_u.mutation.RemoveMappedFromControlIDs(ids...)
	return _u
}

// RemoveMappedFromControls removes "mapped_from_controls" edges to MappedControl entities.
func (_u *ControlUpdateOne) RemoveMappedFromControls(v ...*MappedControl) *ControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedFromControlIDs(ids...)
}

// Where appends a list predicates to the ControlUpdate builder.
func (_u *ControlUpdateOne) Where(ps ...predicate.Control) *ControlUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ControlUpdateOne) Select(field string, fields ...string) *ControlUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Control entity.
func (_u *ControlUpdateOne) Save(ctx context.Context) (*Control, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ControlUpdateOne) SaveX(ctx context.Context) *Control {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ControlUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ControlUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ControlUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if control.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized control.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := control.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ControlUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := control.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Control.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := control.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Control.source": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlType(); ok {
		if err := control.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Control.control_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefCode(); ok {
		if err := control.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Control.ref_code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ControlUpdateOne) sqlSave(ctx context.Context) (_node *Control, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(control.Table, control.Columns, sqlgraph.NewFieldSpec(control.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Control.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, control.FieldID)
		for _, f := range fields {
			if !control.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != control.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(control.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(control.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(control.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(control.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(control.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(control.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(control.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(control.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(control.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(control.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(control.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(control.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(control.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(control.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ReferenceID(); ok {
		_spec.SetField(control.FieldReferenceID, field.TypeString, value)
	}
	if _u.mutation.ReferenceIDCleared() {
		_spec.ClearField(control.FieldReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorReferenceID(); ok {
		_spec.SetField(control.FieldAuditorReferenceID, field.TypeString, value)
	}
	if _u.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(control.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(control.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(control.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(control.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(control.FieldSource, field.TypeEnum)
	}
	if value, ok := _u.mutation.ReferenceFramework(); ok {
		_spec.SetField(control.FieldReferenceFramework, field.TypeString, value)
	}
	if _u.mutation.ReferenceFrameworkCleared() {
		_spec.ClearField(control.FieldReferenceFramework, field.TypeString)
	}
	if value, ok := _u.mutation.ControlType(); ok {
		_spec.SetField(control.FieldControlType, field.TypeEnum, value)
	}
	if _u.mutation.ControlTypeCleared() {
		_spec.ClearField(control.FieldControlType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(control.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(control.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(control.FieldCategoryID, field.TypeString, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(control.FieldCategoryID, field.TypeString)
	}
	if value, ok := _u.mutation.Subcategory(); ok {
		_spec.SetField(control.FieldSubcategory, field.TypeString, value)
	}
	if _u.mutation.SubcategoryCleared() {
		_spec.ClearField(control.FieldSubcategory, field.TypeString)
	}
	if value, ok := _u.mutation.MappedCategories(); ok {
		_spec.SetField(control.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldMappedCategories, value)
		})
	}
	if _u.mutation.MappedCategoriesCleared() {
		_spec.ClearField(control.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentObjectives(); ok {
		_spec.SetField(control.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldAssessmentObjectives, value)
		})
	}
	if _u.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(control.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentMethods(); ok {
		_spec.SetField(control.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldAssessmentMethods, value)
		})
	}
	if _u.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(control.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlQuestions(); ok {
		_spec.SetField(control.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldControlQuestions, value)
		})
	}
	if _u.mutation.ControlQuestionsCleared() {
		_spec.ClearField(control.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImplementationGuidance(); ok {
		_spec.SetField(control.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldImplementationGuidance, value)
		})
	}
	if _u.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(control.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExampleEvidence(); ok {
		_spec.SetField(control.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldExampleEvidence, value)
		})
	}
	if _u.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(control.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(control.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, control.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(control.FieldReferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.RefCode(); ok {
		_spec.SetField(control.FieldRefCode, field.TypeString, value)
	}
	if _u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.InternalPoliciesTable,
			Columns: control.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.InternalPoliciesTable,
			Columns: control.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.InternalPoliciesTable,
			Columns: control.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.ControlOwnerTable,
			Columns: []string{control.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.ControlOwnerTable,
			Columns: []string{control.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.DelegateTable,
			Columns: []string{control.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.DelegateTable,
			Columns: []string{control.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: []string{control.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: []string{control.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.AssetsTable,
			Columns: control.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.AssetsTable,
			Columns: control.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.AssetsTable,
			Columns: control.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ScansTable,
			Columns: []string{control.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScansIDs(); len(nodes) > 0 && !_u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ScansTable,
			Columns: []string{control.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ScansTable,
			Columns: []string{control.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ScheduledJobsTable,
			Columns: control.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ScheduledJobsTable,
			Columns: control.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ScheduledJobsTable,
			Columns: control.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedToControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedToControlsTable,
			Columns: control.MappedToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedToControlsIDs(); len(nodes) > 0 && !_u.mutation.MappedToControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedToControlsTable,
			Columns: control.MappedToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedToControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedToControlsTable,
			Columns: control.MappedToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedFromControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedFromControlsTable,
			Columns: control.MappedFromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedFromControlsIDs(); len(nodes) > 0 && !_u.mutation.MappedFromControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedFromControlsTable,
			Columns: control.MappedFromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedFromControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedFromControlsTable,
			Columns: control.MappedFromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Control
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Control{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{control.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
