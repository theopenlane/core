// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// JobRunnerTokenCreate is the builder for creating a JobRunnerToken entity.
type JobRunnerTokenCreate struct {
	config
	mutation *JobRunnerTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (jrtc *JobRunnerTokenCreate) SetCreatedAt(t time.Time) *JobRunnerTokenCreate {
	jrtc.mutation.SetCreatedAt(t)
	return jrtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableCreatedAt(t *time.Time) *JobRunnerTokenCreate {
	if t != nil {
		jrtc.SetCreatedAt(*t)
	}
	return jrtc
}

// SetUpdatedAt sets the "updated_at" field.
func (jrtc *JobRunnerTokenCreate) SetUpdatedAt(t time.Time) *JobRunnerTokenCreate {
	jrtc.mutation.SetUpdatedAt(t)
	return jrtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableUpdatedAt(t *time.Time) *JobRunnerTokenCreate {
	if t != nil {
		jrtc.SetUpdatedAt(*t)
	}
	return jrtc
}

// SetCreatedBy sets the "created_by" field.
func (jrtc *JobRunnerTokenCreate) SetCreatedBy(s string) *JobRunnerTokenCreate {
	jrtc.mutation.SetCreatedBy(s)
	return jrtc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableCreatedBy(s *string) *JobRunnerTokenCreate {
	if s != nil {
		jrtc.SetCreatedBy(*s)
	}
	return jrtc
}

// SetUpdatedBy sets the "updated_by" field.
func (jrtc *JobRunnerTokenCreate) SetUpdatedBy(s string) *JobRunnerTokenCreate {
	jrtc.mutation.SetUpdatedBy(s)
	return jrtc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableUpdatedBy(s *string) *JobRunnerTokenCreate {
	if s != nil {
		jrtc.SetUpdatedBy(*s)
	}
	return jrtc
}

// SetDeletedAt sets the "deleted_at" field.
func (jrtc *JobRunnerTokenCreate) SetDeletedAt(t time.Time) *JobRunnerTokenCreate {
	jrtc.mutation.SetDeletedAt(t)
	return jrtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableDeletedAt(t *time.Time) *JobRunnerTokenCreate {
	if t != nil {
		jrtc.SetDeletedAt(*t)
	}
	return jrtc
}

// SetDeletedBy sets the "deleted_by" field.
func (jrtc *JobRunnerTokenCreate) SetDeletedBy(s string) *JobRunnerTokenCreate {
	jrtc.mutation.SetDeletedBy(s)
	return jrtc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableDeletedBy(s *string) *JobRunnerTokenCreate {
	if s != nil {
		jrtc.SetDeletedBy(*s)
	}
	return jrtc
}

// SetTags sets the "tags" field.
func (jrtc *JobRunnerTokenCreate) SetTags(s []string) *JobRunnerTokenCreate {
	jrtc.mutation.SetTags(s)
	return jrtc
}

// SetOwnerID sets the "owner_id" field.
func (jrtc *JobRunnerTokenCreate) SetOwnerID(s string) *JobRunnerTokenCreate {
	jrtc.mutation.SetOwnerID(s)
	return jrtc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableOwnerID(s *string) *JobRunnerTokenCreate {
	if s != nil {
		jrtc.SetOwnerID(*s)
	}
	return jrtc
}

// SetToken sets the "token" field.
func (jrtc *JobRunnerTokenCreate) SetToken(s string) *JobRunnerTokenCreate {
	jrtc.mutation.SetToken(s)
	return jrtc
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableToken(s *string) *JobRunnerTokenCreate {
	if s != nil {
		jrtc.SetToken(*s)
	}
	return jrtc
}

// SetExpiresAt sets the "expires_at" field.
func (jrtc *JobRunnerTokenCreate) SetExpiresAt(t time.Time) *JobRunnerTokenCreate {
	jrtc.mutation.SetExpiresAt(t)
	return jrtc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableExpiresAt(t *time.Time) *JobRunnerTokenCreate {
	if t != nil {
		jrtc.SetExpiresAt(*t)
	}
	return jrtc
}

// SetLastUsedAt sets the "last_used_at" field.
func (jrtc *JobRunnerTokenCreate) SetLastUsedAt(t time.Time) *JobRunnerTokenCreate {
	jrtc.mutation.SetLastUsedAt(t)
	return jrtc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableLastUsedAt(t *time.Time) *JobRunnerTokenCreate {
	if t != nil {
		jrtc.SetLastUsedAt(*t)
	}
	return jrtc
}

// SetIsActive sets the "is_active" field.
func (jrtc *JobRunnerTokenCreate) SetIsActive(b bool) *JobRunnerTokenCreate {
	jrtc.mutation.SetIsActive(b)
	return jrtc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableIsActive(b *bool) *JobRunnerTokenCreate {
	if b != nil {
		jrtc.SetIsActive(*b)
	}
	return jrtc
}

// SetRevokedReason sets the "revoked_reason" field.
func (jrtc *JobRunnerTokenCreate) SetRevokedReason(s string) *JobRunnerTokenCreate {
	jrtc.mutation.SetRevokedReason(s)
	return jrtc
}

// SetNillableRevokedReason sets the "revoked_reason" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableRevokedReason(s *string) *JobRunnerTokenCreate {
	if s != nil {
		jrtc.SetRevokedReason(*s)
	}
	return jrtc
}

// SetRevokedBy sets the "revoked_by" field.
func (jrtc *JobRunnerTokenCreate) SetRevokedBy(s string) *JobRunnerTokenCreate {
	jrtc.mutation.SetRevokedBy(s)
	return jrtc
}

// SetNillableRevokedBy sets the "revoked_by" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableRevokedBy(s *string) *JobRunnerTokenCreate {
	if s != nil {
		jrtc.SetRevokedBy(*s)
	}
	return jrtc
}

// SetRevokedAt sets the "revoked_at" field.
func (jrtc *JobRunnerTokenCreate) SetRevokedAt(t time.Time) *JobRunnerTokenCreate {
	jrtc.mutation.SetRevokedAt(t)
	return jrtc
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableRevokedAt(t *time.Time) *JobRunnerTokenCreate {
	if t != nil {
		jrtc.SetRevokedAt(*t)
	}
	return jrtc
}

// SetID sets the "id" field.
func (jrtc *JobRunnerTokenCreate) SetID(s string) *JobRunnerTokenCreate {
	jrtc.mutation.SetID(s)
	return jrtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jrtc *JobRunnerTokenCreate) SetNillableID(s *string) *JobRunnerTokenCreate {
	if s != nil {
		jrtc.SetID(*s)
	}
	return jrtc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jrtc *JobRunnerTokenCreate) SetOwner(o *Organization) *JobRunnerTokenCreate {
	return jrtc.SetOwnerID(o.ID)
}

// AddJobRunnerIDs adds the "job_runners" edge to the JobRunner entity by IDs.
func (jrtc *JobRunnerTokenCreate) AddJobRunnerIDs(ids ...string) *JobRunnerTokenCreate {
	jrtc.mutation.AddJobRunnerIDs(ids...)
	return jrtc
}

// AddJobRunners adds the "job_runners" edges to the JobRunner entity.
func (jrtc *JobRunnerTokenCreate) AddJobRunners(j ...*JobRunner) *JobRunnerTokenCreate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jrtc.AddJobRunnerIDs(ids...)
}

// Mutation returns the JobRunnerTokenMutation object of the builder.
func (jrtc *JobRunnerTokenCreate) Mutation() *JobRunnerTokenMutation {
	return jrtc.mutation
}

// Save creates the JobRunnerToken in the database.
func (jrtc *JobRunnerTokenCreate) Save(ctx context.Context) (*JobRunnerToken, error) {
	if err := jrtc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jrtc.sqlSave, jrtc.mutation, jrtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jrtc *JobRunnerTokenCreate) SaveX(ctx context.Context) *JobRunnerToken {
	v, err := jrtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrtc *JobRunnerTokenCreate) Exec(ctx context.Context) error {
	_, err := jrtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrtc *JobRunnerTokenCreate) ExecX(ctx context.Context) {
	if err := jrtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrtc *JobRunnerTokenCreate) defaults() error {
	if _, ok := jrtc.mutation.CreatedAt(); !ok {
		if jobrunnertoken.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunnertoken.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunnertoken.DefaultCreatedAt()
		jrtc.mutation.SetCreatedAt(v)
	}
	if _, ok := jrtc.mutation.UpdatedAt(); !ok {
		if jobrunnertoken.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunnertoken.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunnertoken.DefaultUpdatedAt()
		jrtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jrtc.mutation.Tags(); !ok {
		v := jobrunnertoken.DefaultTags
		jrtc.mutation.SetTags(v)
	}
	if _, ok := jrtc.mutation.Token(); !ok {
		if jobrunnertoken.DefaultToken == nil {
			return fmt.Errorf("generated: uninitialized jobrunnertoken.DefaultToken (forgotten import generated/runtime?)")
		}
		v := jobrunnertoken.DefaultToken()
		jrtc.mutation.SetToken(v)
	}
	if _, ok := jrtc.mutation.IsActive(); !ok {
		v := jobrunnertoken.DefaultIsActive
		jrtc.mutation.SetIsActive(v)
	}
	if _, ok := jrtc.mutation.ID(); !ok {
		if jobrunnertoken.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized jobrunnertoken.DefaultID (forgotten import generated/runtime?)")
		}
		v := jobrunnertoken.DefaultID()
		jrtc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jrtc *JobRunnerTokenCreate) check() error {
	if v, ok := jrtc.mutation.OwnerID(); ok {
		if err := jobrunnertoken.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "JobRunnerToken.owner_id": %w`, err)}
		}
	}
	if _, ok := jrtc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`generated: missing required field "JobRunnerToken.token"`)}
	}
	return nil
}

func (jrtc *JobRunnerTokenCreate) sqlSave(ctx context.Context) (*JobRunnerToken, error) {
	if err := jrtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jrtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jrtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobRunnerToken.ID type: %T", _spec.ID.Value)
		}
	}
	jrtc.mutation.id = &_node.ID
	jrtc.mutation.done = true
	return _node, nil
}

func (jrtc *JobRunnerTokenCreate) createSpec() (*JobRunnerToken, *sqlgraph.CreateSpec) {
	var (
		_node = &JobRunnerToken{config: jrtc.config}
		_spec = sqlgraph.NewCreateSpec(jobrunnertoken.Table, sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString))
	)
	_spec.Schema = jrtc.schemaConfig.JobRunnerToken
	if id, ok := jrtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jrtc.mutation.CreatedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jrtc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jrtc.mutation.CreatedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := jrtc.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := jrtc.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jrtc.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := jrtc.mutation.Tags(); ok {
		_spec.SetField(jobrunnertoken.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := jrtc.mutation.Token(); ok {
		_spec.SetField(jobrunnertoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := jrtc.mutation.ExpiresAt(); ok {
		_spec.SetField(jobrunnertoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := jrtc.mutation.LastUsedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = &value
	}
	if value, ok := jrtc.mutation.IsActive(); ok {
		_spec.SetField(jobrunnertoken.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := jrtc.mutation.RevokedReason(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedReason, field.TypeString, value)
		_node.RevokedReason = &value
	}
	if value, ok := jrtc.mutation.RevokedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedBy, field.TypeString, value)
		_node.RevokedBy = &value
	}
	if value, ok := jrtc.mutation.RevokedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedAt, field.TypeTime, value)
		_node.RevokedAt = &value
	}
	if nodes := jrtc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnertoken.OwnerTable,
			Columns: []string{jobrunnertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrtc.schemaConfig.JobRunnerToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrtc.mutation.JobRunnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jobrunnertoken.JobRunnersTable,
			Columns: jobrunnertoken.JobRunnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrtc.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobRunnerTokenCreateBulk is the builder for creating many JobRunnerToken entities in bulk.
type JobRunnerTokenCreateBulk struct {
	config
	err      error
	builders []*JobRunnerTokenCreate
}

// Save creates the JobRunnerToken entities in the database.
func (jrtcb *JobRunnerTokenCreateBulk) Save(ctx context.Context) ([]*JobRunnerToken, error) {
	if jrtcb.err != nil {
		return nil, jrtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jrtcb.builders))
	nodes := make([]*JobRunnerToken, len(jrtcb.builders))
	mutators := make([]Mutator, len(jrtcb.builders))
	for i := range jrtcb.builders {
		func(i int, root context.Context) {
			builder := jrtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobRunnerTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jrtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jrtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jrtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jrtcb *JobRunnerTokenCreateBulk) SaveX(ctx context.Context) []*JobRunnerToken {
	v, err := jrtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrtcb *JobRunnerTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := jrtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrtcb *JobRunnerTokenCreateBulk) ExecX(ctx context.Context) {
	if err := jrtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
