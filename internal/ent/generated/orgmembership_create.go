// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// OrgMembershipCreate is the builder for creating a OrgMembership entity.
type OrgMembershipCreate struct {
	config
	mutation *OrgMembershipMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (omc *OrgMembershipCreate) SetCreatedAt(t time.Time) *OrgMembershipCreate {
	omc.mutation.SetCreatedAt(t)
	return omc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (omc *OrgMembershipCreate) SetNillableCreatedAt(t *time.Time) *OrgMembershipCreate {
	if t != nil {
		omc.SetCreatedAt(*t)
	}
	return omc
}

// SetUpdatedAt sets the "updated_at" field.
func (omc *OrgMembershipCreate) SetUpdatedAt(t time.Time) *OrgMembershipCreate {
	omc.mutation.SetUpdatedAt(t)
	return omc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (omc *OrgMembershipCreate) SetNillableUpdatedAt(t *time.Time) *OrgMembershipCreate {
	if t != nil {
		omc.SetUpdatedAt(*t)
	}
	return omc
}

// SetCreatedBy sets the "created_by" field.
func (omc *OrgMembershipCreate) SetCreatedBy(s string) *OrgMembershipCreate {
	omc.mutation.SetCreatedBy(s)
	return omc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (omc *OrgMembershipCreate) SetNillableCreatedBy(s *string) *OrgMembershipCreate {
	if s != nil {
		omc.SetCreatedBy(*s)
	}
	return omc
}

// SetUpdatedBy sets the "updated_by" field.
func (omc *OrgMembershipCreate) SetUpdatedBy(s string) *OrgMembershipCreate {
	omc.mutation.SetUpdatedBy(s)
	return omc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (omc *OrgMembershipCreate) SetNillableUpdatedBy(s *string) *OrgMembershipCreate {
	if s != nil {
		omc.SetUpdatedBy(*s)
	}
	return omc
}

// SetDeletedAt sets the "deleted_at" field.
func (omc *OrgMembershipCreate) SetDeletedAt(t time.Time) *OrgMembershipCreate {
	omc.mutation.SetDeletedAt(t)
	return omc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (omc *OrgMembershipCreate) SetNillableDeletedAt(t *time.Time) *OrgMembershipCreate {
	if t != nil {
		omc.SetDeletedAt(*t)
	}
	return omc
}

// SetDeletedBy sets the "deleted_by" field.
func (omc *OrgMembershipCreate) SetDeletedBy(s string) *OrgMembershipCreate {
	omc.mutation.SetDeletedBy(s)
	return omc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (omc *OrgMembershipCreate) SetNillableDeletedBy(s *string) *OrgMembershipCreate {
	if s != nil {
		omc.SetDeletedBy(*s)
	}
	return omc
}

// SetRole sets the "role" field.
func (omc *OrgMembershipCreate) SetRole(e enums.Role) *OrgMembershipCreate {
	omc.mutation.SetRole(e)
	return omc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (omc *OrgMembershipCreate) SetNillableRole(e *enums.Role) *OrgMembershipCreate {
	if e != nil {
		omc.SetRole(*e)
	}
	return omc
}

// SetOrganizationID sets the "organization_id" field.
func (omc *OrgMembershipCreate) SetOrganizationID(s string) *OrgMembershipCreate {
	omc.mutation.SetOrganizationID(s)
	return omc
}

// SetUserID sets the "user_id" field.
func (omc *OrgMembershipCreate) SetUserID(s string) *OrgMembershipCreate {
	omc.mutation.SetUserID(s)
	return omc
}

// SetID sets the "id" field.
func (omc *OrgMembershipCreate) SetID(s string) *OrgMembershipCreate {
	omc.mutation.SetID(s)
	return omc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (omc *OrgMembershipCreate) SetNillableID(s *string) *OrgMembershipCreate {
	if s != nil {
		omc.SetID(*s)
	}
	return omc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (omc *OrgMembershipCreate) SetOrganization(o *Organization) *OrgMembershipCreate {
	return omc.SetOrganizationID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (omc *OrgMembershipCreate) SetUser(u *User) *OrgMembershipCreate {
	return omc.SetUserID(u.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (omc *OrgMembershipCreate) AddEventIDs(ids ...string) *OrgMembershipCreate {
	omc.mutation.AddEventIDs(ids...)
	return omc
}

// AddEvents adds the "events" edges to the Event entity.
func (omc *OrgMembershipCreate) AddEvents(e ...*Event) *OrgMembershipCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return omc.AddEventIDs(ids...)
}

// Mutation returns the OrgMembershipMutation object of the builder.
func (omc *OrgMembershipCreate) Mutation() *OrgMembershipMutation {
	return omc.mutation
}

// Save creates the OrgMembership in the database.
func (omc *OrgMembershipCreate) Save(ctx context.Context) (*OrgMembership, error) {
	if err := omc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, omc.sqlSave, omc.mutation, omc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (omc *OrgMembershipCreate) SaveX(ctx context.Context) *OrgMembership {
	v, err := omc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omc *OrgMembershipCreate) Exec(ctx context.Context) error {
	_, err := omc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omc *OrgMembershipCreate) ExecX(ctx context.Context) {
	if err := omc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (omc *OrgMembershipCreate) defaults() error {
	if _, ok := omc.mutation.CreatedAt(); !ok {
		if orgmembership.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgmembership.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := orgmembership.DefaultCreatedAt()
		omc.mutation.SetCreatedAt(v)
	}
	if _, ok := omc.mutation.UpdatedAt(); !ok {
		if orgmembership.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgmembership.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgmembership.DefaultUpdatedAt()
		omc.mutation.SetUpdatedAt(v)
	}
	if _, ok := omc.mutation.Role(); !ok {
		v := orgmembership.DefaultRole
		omc.mutation.SetRole(v)
	}
	if _, ok := omc.mutation.ID(); !ok {
		if orgmembership.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized orgmembership.DefaultID (forgotten import generated/runtime?)")
		}
		v := orgmembership.DefaultID()
		omc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (omc *OrgMembershipCreate) check() error {
	if _, ok := omc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`generated: missing required field "OrgMembership.role"`)}
	}
	if v, ok := omc.mutation.Role(); ok {
		if err := orgmembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "OrgMembership.role": %w`, err)}
		}
	}
	if _, ok := omc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`generated: missing required field "OrgMembership.organization_id"`)}
	}
	if _, ok := omc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "OrgMembership.user_id"`)}
	}
	if len(omc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`generated: missing required edge "OrgMembership.organization"`)}
	}
	if len(omc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`generated: missing required edge "OrgMembership.user"`)}
	}
	return nil
}

func (omc *OrgMembershipCreate) sqlSave(ctx context.Context) (*OrgMembership, error) {
	if err := omc.check(); err != nil {
		return nil, err
	}
	_node, _spec := omc.createSpec()
	if err := sqlgraph.CreateNode(ctx, omc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgMembership.ID type: %T", _spec.ID.Value)
		}
	}
	omc.mutation.id = &_node.ID
	omc.mutation.done = true
	return _node, nil
}

func (omc *OrgMembershipCreate) createSpec() (*OrgMembership, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgMembership{config: omc.config}
		_spec = sqlgraph.NewCreateSpec(orgmembership.Table, sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString))
	)
	_spec.Schema = omc.schemaConfig.OrgMembership
	if id, ok := omc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := omc.mutation.CreatedAt(); ok {
		_spec.SetField(orgmembership.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := omc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgmembership.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := omc.mutation.CreatedBy(); ok {
		_spec.SetField(orgmembership.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := omc.mutation.UpdatedBy(); ok {
		_spec.SetField(orgmembership.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := omc.mutation.DeletedAt(); ok {
		_spec.SetField(orgmembership.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := omc.mutation.DeletedBy(); ok {
		_spec.SetField(orgmembership.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := omc.mutation.Role(); ok {
		_spec.SetField(orgmembership.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if nodes := omc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.OrganizationTable,
			Columns: []string{orgmembership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = omc.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := omc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.UserTable,
			Columns: []string{orgmembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = omc.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := omc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmembership.EventsTable,
			Columns: orgmembership.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = omc.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrgMembershipCreateBulk is the builder for creating many OrgMembership entities in bulk.
type OrgMembershipCreateBulk struct {
	config
	err      error
	builders []*OrgMembershipCreate
}

// Save creates the OrgMembership entities in the database.
func (omcb *OrgMembershipCreateBulk) Save(ctx context.Context) ([]*OrgMembership, error) {
	if omcb.err != nil {
		return nil, omcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(omcb.builders))
	nodes := make([]*OrgMembership, len(omcb.builders))
	mutators := make([]Mutator, len(omcb.builders))
	for i := range omcb.builders {
		func(i int, root context.Context) {
			builder := omcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgMembershipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, omcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, omcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, omcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (omcb *OrgMembershipCreateBulk) SaveX(ctx context.Context) []*OrgMembership {
	v, err := omcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omcb *OrgMembershipCreateBulk) Exec(ctx context.Context) error {
	_, err := omcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omcb *OrgMembershipCreateBulk) ExecX(ctx context.Context) {
	if err := omcb.Exec(ctx); err != nil {
		panic(err)
	}
}
