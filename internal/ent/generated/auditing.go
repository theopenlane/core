// Code generated by entx.history, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementationhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlobjectivehistory"
	"github.com/theopenlane/core/internal/ent/generated/customdomainhistory"
	"github.com/theopenlane/core/internal/ent/generated/documentdatahistory"
	"github.com/theopenlane/core/internal/ent/generated/entityhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/eventhistory"
	"github.com/theopenlane/core/internal/ent/generated/evidencehistory"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/integrationhistory"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicyhistory"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomainhistory"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/narrativehistory"
	"github.com/theopenlane/core/internal/ent/generated/notehistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscriptionhistory"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/internal/ent/generated/programmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/internal/ent/generated/standardhistory"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/internal/ent/generated/userhistory"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"
	"github.com/theopenlane/entx/history"
)

type Change struct {
	FieldName string
	Old       any
	New       any
}

func NewChange(fieldName string, old, new any) Change {
	return Change{
		FieldName: fieldName,
		Old:       old,
		New:       new,
	}
}

type HistoryDiff[T any] struct {
	Old     *T
	New     *T
	Changes []Change
}

var (
	MismatchedRefError    = errors.New("cannot take diff of histories with different Refs")
	IdenticalHistoryError = errors.New("cannot take diff of identical history")
)

func (aph *ActionPlanHistory) changes(new *ActionPlanHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(aph.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(actionplanhistory.FieldCreatedAt, aph.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(aph.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(actionplanhistory.FieldUpdatedAt, aph.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(aph.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(actionplanhistory.FieldCreatedBy, aph.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(aph.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(actionplanhistory.FieldDeletedAt, aph.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(aph.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(actionplanhistory.FieldDeletedBy, aph.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(aph.Tags, new.Tags) {
		changes = append(changes, NewChange(actionplanhistory.FieldTags, aph.Tags, new.Tags))
	}
	if !reflect.DeepEqual(aph.Revision, new.Revision) {
		changes = append(changes, NewChange(actionplanhistory.FieldRevision, aph.Revision, new.Revision))
	}
	if !reflect.DeepEqual(aph.Name, new.Name) {
		changes = append(changes, NewChange(actionplanhistory.FieldName, aph.Name, new.Name))
	}
	if !reflect.DeepEqual(aph.Status, new.Status) {
		changes = append(changes, NewChange(actionplanhistory.FieldStatus, aph.Status, new.Status))
	}
	if !reflect.DeepEqual(aph.ActionPlanType, new.ActionPlanType) {
		changes = append(changes, NewChange(actionplanhistory.FieldActionPlanType, aph.ActionPlanType, new.ActionPlanType))
	}
	if !reflect.DeepEqual(aph.Details, new.Details) {
		changes = append(changes, NewChange(actionplanhistory.FieldDetails, aph.Details, new.Details))
	}
	if !reflect.DeepEqual(aph.ApprovalRequired, new.ApprovalRequired) {
		changes = append(changes, NewChange(actionplanhistory.FieldApprovalRequired, aph.ApprovalRequired, new.ApprovalRequired))
	}
	if !reflect.DeepEqual(aph.ReviewDue, new.ReviewDue) {
		changes = append(changes, NewChange(actionplanhistory.FieldReviewDue, aph.ReviewDue, new.ReviewDue))
	}
	if !reflect.DeepEqual(aph.ReviewFrequency, new.ReviewFrequency) {
		changes = append(changes, NewChange(actionplanhistory.FieldReviewFrequency, aph.ReviewFrequency, new.ReviewFrequency))
	}
	if !reflect.DeepEqual(aph.ApproverID, new.ApproverID) {
		changes = append(changes, NewChange(actionplanhistory.FieldApproverID, aph.ApproverID, new.ApproverID))
	}
	if !reflect.DeepEqual(aph.DelegateID, new.DelegateID) {
		changes = append(changes, NewChange(actionplanhistory.FieldDelegateID, aph.DelegateID, new.DelegateID))
	}
	if !reflect.DeepEqual(aph.Summary, new.Summary) {
		changes = append(changes, NewChange(actionplanhistory.FieldSummary, aph.Summary, new.Summary))
	}
	if !reflect.DeepEqual(aph.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(actionplanhistory.FieldOwnerID, aph.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(aph.DueDate, new.DueDate) {
		changes = append(changes, NewChange(actionplanhistory.FieldDueDate, aph.DueDate, new.DueDate))
	}
	if !reflect.DeepEqual(aph.Priority, new.Priority) {
		changes = append(changes, NewChange(actionplanhistory.FieldPriority, aph.Priority, new.Priority))
	}
	if !reflect.DeepEqual(aph.Source, new.Source) {
		changes = append(changes, NewChange(actionplanhistory.FieldSource, aph.Source, new.Source))
	}
	return changes
}

func (aph *ActionPlanHistory) Diff(history *ActionPlanHistory) (*HistoryDiff[ActionPlanHistory], error) {
	if aph.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	aphUnix, historyUnix := aph.HistoryTime.Unix(), history.HistoryTime.Unix()
	aphOlder := aphUnix < historyUnix || (aphUnix == historyUnix && aph.ID < history.ID)
	historyOlder := aphUnix > historyUnix || (aphUnix == historyUnix && aph.ID > history.ID)

	if aphOlder {
		return &HistoryDiff[ActionPlanHistory]{
			Old:     aph,
			New:     history,
			Changes: aph.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[ActionPlanHistory]{
			Old:     history,
			New:     aph,
			Changes: history.changes(aph),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (ch *ContactHistory) changes(new *ContactHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(ch.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(contacthistory.FieldCreatedAt, ch.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(ch.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(contacthistory.FieldUpdatedAt, ch.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(ch.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(contacthistory.FieldCreatedBy, ch.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(ch.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(contacthistory.FieldDeletedAt, ch.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(ch.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(contacthistory.FieldDeletedBy, ch.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(ch.Tags, new.Tags) {
		changes = append(changes, NewChange(contacthistory.FieldTags, ch.Tags, new.Tags))
	}
	if !reflect.DeepEqual(ch.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(contacthistory.FieldOwnerID, ch.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(ch.FullName, new.FullName) {
		changes = append(changes, NewChange(contacthistory.FieldFullName, ch.FullName, new.FullName))
	}
	if !reflect.DeepEqual(ch.Title, new.Title) {
		changes = append(changes, NewChange(contacthistory.FieldTitle, ch.Title, new.Title))
	}
	if !reflect.DeepEqual(ch.Company, new.Company) {
		changes = append(changes, NewChange(contacthistory.FieldCompany, ch.Company, new.Company))
	}
	if !reflect.DeepEqual(ch.Email, new.Email) {
		changes = append(changes, NewChange(contacthistory.FieldEmail, ch.Email, new.Email))
	}
	if !reflect.DeepEqual(ch.PhoneNumber, new.PhoneNumber) {
		changes = append(changes, NewChange(contacthistory.FieldPhoneNumber, ch.PhoneNumber, new.PhoneNumber))
	}
	if !reflect.DeepEqual(ch.Address, new.Address) {
		changes = append(changes, NewChange(contacthistory.FieldAddress, ch.Address, new.Address))
	}
	if !reflect.DeepEqual(ch.Status, new.Status) {
		changes = append(changes, NewChange(contacthistory.FieldStatus, ch.Status, new.Status))
	}
	return changes
}

func (ch *ContactHistory) Diff(history *ContactHistory) (*HistoryDiff[ContactHistory], error) {
	if ch.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	chUnix, historyUnix := ch.HistoryTime.Unix(), history.HistoryTime.Unix()
	chOlder := chUnix < historyUnix || (chUnix == historyUnix && ch.ID < history.ID)
	historyOlder := chUnix > historyUnix || (chUnix == historyUnix && ch.ID > history.ID)

	if chOlder {
		return &HistoryDiff[ContactHistory]{
			Old:     ch,
			New:     history,
			Changes: ch.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[ContactHistory]{
			Old:     history,
			New:     ch,
			Changes: history.changes(ch),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (ch *ControlHistory) changes(new *ControlHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(ch.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(controlhistory.FieldCreatedAt, ch.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(ch.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(controlhistory.FieldUpdatedAt, ch.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(ch.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(controlhistory.FieldCreatedBy, ch.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(ch.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(controlhistory.FieldDeletedAt, ch.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(ch.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(controlhistory.FieldDeletedBy, ch.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(ch.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(controlhistory.FieldDisplayID, ch.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(ch.Tags, new.Tags) {
		changes = append(changes, NewChange(controlhistory.FieldTags, ch.Tags, new.Tags))
	}
	if !reflect.DeepEqual(ch.Description, new.Description) {
		changes = append(changes, NewChange(controlhistory.FieldDescription, ch.Description, new.Description))
	}
	if !reflect.DeepEqual(ch.ReferenceID, new.ReferenceID) {
		changes = append(changes, NewChange(controlhistory.FieldReferenceID, ch.ReferenceID, new.ReferenceID))
	}
	if !reflect.DeepEqual(ch.AuditorReferenceID, new.AuditorReferenceID) {
		changes = append(changes, NewChange(controlhistory.FieldAuditorReferenceID, ch.AuditorReferenceID, new.AuditorReferenceID))
	}
	if !reflect.DeepEqual(ch.Status, new.Status) {
		changes = append(changes, NewChange(controlhistory.FieldStatus, ch.Status, new.Status))
	}
	if !reflect.DeepEqual(ch.Source, new.Source) {
		changes = append(changes, NewChange(controlhistory.FieldSource, ch.Source, new.Source))
	}
	if !reflect.DeepEqual(ch.ControlType, new.ControlType) {
		changes = append(changes, NewChange(controlhistory.FieldControlType, ch.ControlType, new.ControlType))
	}
	if !reflect.DeepEqual(ch.Category, new.Category) {
		changes = append(changes, NewChange(controlhistory.FieldCategory, ch.Category, new.Category))
	}
	if !reflect.DeepEqual(ch.CategoryID, new.CategoryID) {
		changes = append(changes, NewChange(controlhistory.FieldCategoryID, ch.CategoryID, new.CategoryID))
	}
	if !reflect.DeepEqual(ch.Subcategory, new.Subcategory) {
		changes = append(changes, NewChange(controlhistory.FieldSubcategory, ch.Subcategory, new.Subcategory))
	}
	if !reflect.DeepEqual(ch.MappedCategories, new.MappedCategories) {
		changes = append(changes, NewChange(controlhistory.FieldMappedCategories, ch.MappedCategories, new.MappedCategories))
	}
	if !reflect.DeepEqual(ch.AssessmentObjectives, new.AssessmentObjectives) {
		changes = append(changes, NewChange(controlhistory.FieldAssessmentObjectives, ch.AssessmentObjectives, new.AssessmentObjectives))
	}
	if !reflect.DeepEqual(ch.AssessmentMethods, new.AssessmentMethods) {
		changes = append(changes, NewChange(controlhistory.FieldAssessmentMethods, ch.AssessmentMethods, new.AssessmentMethods))
	}
	if !reflect.DeepEqual(ch.ControlQuestions, new.ControlQuestions) {
		changes = append(changes, NewChange(controlhistory.FieldControlQuestions, ch.ControlQuestions, new.ControlQuestions))
	}
	if !reflect.DeepEqual(ch.ImplementationGuidance, new.ImplementationGuidance) {
		changes = append(changes, NewChange(controlhistory.FieldImplementationGuidance, ch.ImplementationGuidance, new.ImplementationGuidance))
	}
	if !reflect.DeepEqual(ch.ExampleEvidence, new.ExampleEvidence) {
		changes = append(changes, NewChange(controlhistory.FieldExampleEvidence, ch.ExampleEvidence, new.ExampleEvidence))
	}
	if !reflect.DeepEqual(ch.References, new.References) {
		changes = append(changes, NewChange(controlhistory.FieldReferences, ch.References, new.References))
	}
	if !reflect.DeepEqual(ch.ControlOwnerID, new.ControlOwnerID) {
		changes = append(changes, NewChange(controlhistory.FieldControlOwnerID, ch.ControlOwnerID, new.ControlOwnerID))
	}
	if !reflect.DeepEqual(ch.DelegateID, new.DelegateID) {
		changes = append(changes, NewChange(controlhistory.FieldDelegateID, ch.DelegateID, new.DelegateID))
	}
	if !reflect.DeepEqual(ch.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(controlhistory.FieldOwnerID, ch.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(ch.RefCode, new.RefCode) {
		changes = append(changes, NewChange(controlhistory.FieldRefCode, ch.RefCode, new.RefCode))
	}
	if !reflect.DeepEqual(ch.StandardID, new.StandardID) {
		changes = append(changes, NewChange(controlhistory.FieldStandardID, ch.StandardID, new.StandardID))
	}
	return changes
}

func (ch *ControlHistory) Diff(history *ControlHistory) (*HistoryDiff[ControlHistory], error) {
	if ch.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	chUnix, historyUnix := ch.HistoryTime.Unix(), history.HistoryTime.Unix()
	chOlder := chUnix < historyUnix || (chUnix == historyUnix && ch.ID < history.ID)
	historyOlder := chUnix > historyUnix || (chUnix == historyUnix && ch.ID > history.ID)

	if chOlder {
		return &HistoryDiff[ControlHistory]{
			Old:     ch,
			New:     history,
			Changes: ch.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[ControlHistory]{
			Old:     history,
			New:     ch,
			Changes: history.changes(ch),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (cih *ControlImplementationHistory) changes(new *ControlImplementationHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(cih.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldCreatedAt, cih.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(cih.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldUpdatedAt, cih.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(cih.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldCreatedBy, cih.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(cih.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldDeletedAt, cih.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(cih.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldDeletedBy, cih.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(cih.Tags, new.Tags) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldTags, cih.Tags, new.Tags))
	}
	if !reflect.DeepEqual(cih.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldOwnerID, cih.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(cih.Status, new.Status) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldStatus, cih.Status, new.Status))
	}
	if !reflect.DeepEqual(cih.ImplementationDate, new.ImplementationDate) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldImplementationDate, cih.ImplementationDate, new.ImplementationDate))
	}
	if !reflect.DeepEqual(cih.Verified, new.Verified) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldVerified, cih.Verified, new.Verified))
	}
	if !reflect.DeepEqual(cih.VerificationDate, new.VerificationDate) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldVerificationDate, cih.VerificationDate, new.VerificationDate))
	}
	if !reflect.DeepEqual(cih.Details, new.Details) {
		changes = append(changes, NewChange(controlimplementationhistory.FieldDetails, cih.Details, new.Details))
	}
	return changes
}

func (cih *ControlImplementationHistory) Diff(history *ControlImplementationHistory) (*HistoryDiff[ControlImplementationHistory], error) {
	if cih.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	cihUnix, historyUnix := cih.HistoryTime.Unix(), history.HistoryTime.Unix()
	cihOlder := cihUnix < historyUnix || (cihUnix == historyUnix && cih.ID < history.ID)
	historyOlder := cihUnix > historyUnix || (cihUnix == historyUnix && cih.ID > history.ID)

	if cihOlder {
		return &HistoryDiff[ControlImplementationHistory]{
			Old:     cih,
			New:     history,
			Changes: cih.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[ControlImplementationHistory]{
			Old:     history,
			New:     cih,
			Changes: history.changes(cih),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (coh *ControlObjectiveHistory) changes(new *ControlObjectiveHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(coh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldCreatedAt, coh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(coh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldUpdatedAt, coh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(coh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldCreatedBy, coh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(coh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldDeletedAt, coh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(coh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldDeletedBy, coh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(coh.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldDisplayID, coh.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(coh.Tags, new.Tags) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldTags, coh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(coh.Revision, new.Revision) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldRevision, coh.Revision, new.Revision))
	}
	if !reflect.DeepEqual(coh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldOwnerID, coh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(coh.Name, new.Name) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldName, coh.Name, new.Name))
	}
	if !reflect.DeepEqual(coh.DesiredOutcome, new.DesiredOutcome) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldDesiredOutcome, coh.DesiredOutcome, new.DesiredOutcome))
	}
	if !reflect.DeepEqual(coh.Status, new.Status) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldStatus, coh.Status, new.Status))
	}
	if !reflect.DeepEqual(coh.Source, new.Source) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldSource, coh.Source, new.Source))
	}
	if !reflect.DeepEqual(coh.ControlObjectiveType, new.ControlObjectiveType) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldControlObjectiveType, coh.ControlObjectiveType, new.ControlObjectiveType))
	}
	if !reflect.DeepEqual(coh.Category, new.Category) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldCategory, coh.Category, new.Category))
	}
	if !reflect.DeepEqual(coh.Subcategory, new.Subcategory) {
		changes = append(changes, NewChange(controlobjectivehistory.FieldSubcategory, coh.Subcategory, new.Subcategory))
	}
	return changes
}

func (coh *ControlObjectiveHistory) Diff(history *ControlObjectiveHistory) (*HistoryDiff[ControlObjectiveHistory], error) {
	if coh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	cohUnix, historyUnix := coh.HistoryTime.Unix(), history.HistoryTime.Unix()
	cohOlder := cohUnix < historyUnix || (cohUnix == historyUnix && coh.ID < history.ID)
	historyOlder := cohUnix > historyUnix || (cohUnix == historyUnix && coh.ID > history.ID)

	if cohOlder {
		return &HistoryDiff[ControlObjectiveHistory]{
			Old:     coh,
			New:     history,
			Changes: coh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[ControlObjectiveHistory]{
			Old:     history,
			New:     coh,
			Changes: history.changes(coh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (cdh *CustomDomainHistory) changes(new *CustomDomainHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(cdh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(customdomainhistory.FieldCreatedAt, cdh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(cdh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(customdomainhistory.FieldUpdatedAt, cdh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(cdh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(customdomainhistory.FieldCreatedBy, cdh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(cdh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(customdomainhistory.FieldDeletedAt, cdh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(cdh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(customdomainhistory.FieldDeletedBy, cdh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(cdh.Tags, new.Tags) {
		changes = append(changes, NewChange(customdomainhistory.FieldTags, cdh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(cdh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(customdomainhistory.FieldOwnerID, cdh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(cdh.CnameRecord, new.CnameRecord) {
		changes = append(changes, NewChange(customdomainhistory.FieldCnameRecord, cdh.CnameRecord, new.CnameRecord))
	}
	if !reflect.DeepEqual(cdh.MappableDomainID, new.MappableDomainID) {
		changes = append(changes, NewChange(customdomainhistory.FieldMappableDomainID, cdh.MappableDomainID, new.MappableDomainID))
	}
	if !reflect.DeepEqual(cdh.TxtRecordSubdomain, new.TxtRecordSubdomain) {
		changes = append(changes, NewChange(customdomainhistory.FieldTxtRecordSubdomain, cdh.TxtRecordSubdomain, new.TxtRecordSubdomain))
	}
	if !reflect.DeepEqual(cdh.TxtRecordValue, new.TxtRecordValue) {
		changes = append(changes, NewChange(customdomainhistory.FieldTxtRecordValue, cdh.TxtRecordValue, new.TxtRecordValue))
	}
	if !reflect.DeepEqual(cdh.Status, new.Status) {
		changes = append(changes, NewChange(customdomainhistory.FieldStatus, cdh.Status, new.Status))
	}
	return changes
}

func (cdh *CustomDomainHistory) Diff(history *CustomDomainHistory) (*HistoryDiff[CustomDomainHistory], error) {
	if cdh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	cdhUnix, historyUnix := cdh.HistoryTime.Unix(), history.HistoryTime.Unix()
	cdhOlder := cdhUnix < historyUnix || (cdhUnix == historyUnix && cdh.ID < history.ID)
	historyOlder := cdhUnix > historyUnix || (cdhUnix == historyUnix && cdh.ID > history.ID)

	if cdhOlder {
		return &HistoryDiff[CustomDomainHistory]{
			Old:     cdh,
			New:     history,
			Changes: cdh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[CustomDomainHistory]{
			Old:     history,
			New:     cdh,
			Changes: history.changes(cdh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (ddh *DocumentDataHistory) changes(new *DocumentDataHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(ddh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(documentdatahistory.FieldCreatedAt, ddh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(ddh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(documentdatahistory.FieldUpdatedAt, ddh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(ddh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(documentdatahistory.FieldCreatedBy, ddh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(ddh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(documentdatahistory.FieldDeletedAt, ddh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(ddh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(documentdatahistory.FieldDeletedBy, ddh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(ddh.Tags, new.Tags) {
		changes = append(changes, NewChange(documentdatahistory.FieldTags, ddh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(ddh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(documentdatahistory.FieldOwnerID, ddh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(ddh.TemplateID, new.TemplateID) {
		changes = append(changes, NewChange(documentdatahistory.FieldTemplateID, ddh.TemplateID, new.TemplateID))
	}
	if !reflect.DeepEqual(ddh.Data, new.Data) {
		changes = append(changes, NewChange(documentdatahistory.FieldData, ddh.Data, new.Data))
	}
	return changes
}

func (ddh *DocumentDataHistory) Diff(history *DocumentDataHistory) (*HistoryDiff[DocumentDataHistory], error) {
	if ddh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ddhUnix, historyUnix := ddh.HistoryTime.Unix(), history.HistoryTime.Unix()
	ddhOlder := ddhUnix < historyUnix || (ddhUnix == historyUnix && ddh.ID < history.ID)
	historyOlder := ddhUnix > historyUnix || (ddhUnix == historyUnix && ddh.ID > history.ID)

	if ddhOlder {
		return &HistoryDiff[DocumentDataHistory]{
			Old:     ddh,
			New:     history,
			Changes: ddh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[DocumentDataHistory]{
			Old:     history,
			New:     ddh,
			Changes: history.changes(ddh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (eh *EntityHistory) changes(new *EntityHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(eh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(entityhistory.FieldCreatedAt, eh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(eh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(entityhistory.FieldUpdatedAt, eh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(eh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(entityhistory.FieldCreatedBy, eh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(eh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(entityhistory.FieldDeletedAt, eh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(eh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(entityhistory.FieldDeletedBy, eh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(eh.Tags, new.Tags) {
		changes = append(changes, NewChange(entityhistory.FieldTags, eh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(eh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(entityhistory.FieldOwnerID, eh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(eh.Name, new.Name) {
		changes = append(changes, NewChange(entityhistory.FieldName, eh.Name, new.Name))
	}
	if !reflect.DeepEqual(eh.DisplayName, new.DisplayName) {
		changes = append(changes, NewChange(entityhistory.FieldDisplayName, eh.DisplayName, new.DisplayName))
	}
	if !reflect.DeepEqual(eh.Description, new.Description) {
		changes = append(changes, NewChange(entityhistory.FieldDescription, eh.Description, new.Description))
	}
	if !reflect.DeepEqual(eh.Domains, new.Domains) {
		changes = append(changes, NewChange(entityhistory.FieldDomains, eh.Domains, new.Domains))
	}
	if !reflect.DeepEqual(eh.EntityTypeID, new.EntityTypeID) {
		changes = append(changes, NewChange(entityhistory.FieldEntityTypeID, eh.EntityTypeID, new.EntityTypeID))
	}
	if !reflect.DeepEqual(eh.Status, new.Status) {
		changes = append(changes, NewChange(entityhistory.FieldStatus, eh.Status, new.Status))
	}
	return changes
}

func (eh *EntityHistory) Diff(history *EntityHistory) (*HistoryDiff[EntityHistory], error) {
	if eh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ehUnix, historyUnix := eh.HistoryTime.Unix(), history.HistoryTime.Unix()
	ehOlder := ehUnix < historyUnix || (ehUnix == historyUnix && eh.ID < history.ID)
	historyOlder := ehUnix > historyUnix || (ehUnix == historyUnix && eh.ID > history.ID)

	if ehOlder {
		return &HistoryDiff[EntityHistory]{
			Old:     eh,
			New:     history,
			Changes: eh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[EntityHistory]{
			Old:     history,
			New:     eh,
			Changes: history.changes(eh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (eth *EntityTypeHistory) changes(new *EntityTypeHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(eth.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(entitytypehistory.FieldCreatedAt, eth.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(eth.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(entitytypehistory.FieldUpdatedAt, eth.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(eth.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(entitytypehistory.FieldCreatedBy, eth.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(eth.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(entitytypehistory.FieldDeletedAt, eth.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(eth.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(entitytypehistory.FieldDeletedBy, eth.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(eth.Tags, new.Tags) {
		changes = append(changes, NewChange(entitytypehistory.FieldTags, eth.Tags, new.Tags))
	}
	if !reflect.DeepEqual(eth.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(entitytypehistory.FieldOwnerID, eth.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(eth.Name, new.Name) {
		changes = append(changes, NewChange(entitytypehistory.FieldName, eth.Name, new.Name))
	}
	return changes
}

func (eth *EntityTypeHistory) Diff(history *EntityTypeHistory) (*HistoryDiff[EntityTypeHistory], error) {
	if eth.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ethUnix, historyUnix := eth.HistoryTime.Unix(), history.HistoryTime.Unix()
	ethOlder := ethUnix < historyUnix || (ethUnix == historyUnix && eth.ID < history.ID)
	historyOlder := ethUnix > historyUnix || (ethUnix == historyUnix && eth.ID > history.ID)

	if ethOlder {
		return &HistoryDiff[EntityTypeHistory]{
			Old:     eth,
			New:     history,
			Changes: eth.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[EntityTypeHistory]{
			Old:     history,
			New:     eth,
			Changes: history.changes(eth),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (eh *EventHistory) changes(new *EventHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(eh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(eventhistory.FieldCreatedAt, eh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(eh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(eventhistory.FieldUpdatedAt, eh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(eh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(eventhistory.FieldCreatedBy, eh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(eh.Tags, new.Tags) {
		changes = append(changes, NewChange(eventhistory.FieldTags, eh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(eh.EventID, new.EventID) {
		changes = append(changes, NewChange(eventhistory.FieldEventID, eh.EventID, new.EventID))
	}
	if !reflect.DeepEqual(eh.CorrelationID, new.CorrelationID) {
		changes = append(changes, NewChange(eventhistory.FieldCorrelationID, eh.CorrelationID, new.CorrelationID))
	}
	if !reflect.DeepEqual(eh.EventType, new.EventType) {
		changes = append(changes, NewChange(eventhistory.FieldEventType, eh.EventType, new.EventType))
	}
	if !reflect.DeepEqual(eh.Metadata, new.Metadata) {
		changes = append(changes, NewChange(eventhistory.FieldMetadata, eh.Metadata, new.Metadata))
	}
	return changes
}

func (eh *EventHistory) Diff(history *EventHistory) (*HistoryDiff[EventHistory], error) {
	if eh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ehUnix, historyUnix := eh.HistoryTime.Unix(), history.HistoryTime.Unix()
	ehOlder := ehUnix < historyUnix || (ehUnix == historyUnix && eh.ID < history.ID)
	historyOlder := ehUnix > historyUnix || (ehUnix == historyUnix && eh.ID > history.ID)

	if ehOlder {
		return &HistoryDiff[EventHistory]{
			Old:     eh,
			New:     history,
			Changes: eh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[EventHistory]{
			Old:     history,
			New:     eh,
			Changes: history.changes(eh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (eh *EvidenceHistory) changes(new *EvidenceHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(eh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(evidencehistory.FieldCreatedAt, eh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(eh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(evidencehistory.FieldUpdatedAt, eh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(eh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(evidencehistory.FieldCreatedBy, eh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(eh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(evidencehistory.FieldDeletedAt, eh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(eh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(evidencehistory.FieldDeletedBy, eh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(eh.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(evidencehistory.FieldDisplayID, eh.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(eh.Tags, new.Tags) {
		changes = append(changes, NewChange(evidencehistory.FieldTags, eh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(eh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(evidencehistory.FieldOwnerID, eh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(eh.Name, new.Name) {
		changes = append(changes, NewChange(evidencehistory.FieldName, eh.Name, new.Name))
	}
	if !reflect.DeepEqual(eh.Description, new.Description) {
		changes = append(changes, NewChange(evidencehistory.FieldDescription, eh.Description, new.Description))
	}
	if !reflect.DeepEqual(eh.CollectionProcedure, new.CollectionProcedure) {
		changes = append(changes, NewChange(evidencehistory.FieldCollectionProcedure, eh.CollectionProcedure, new.CollectionProcedure))
	}
	if !reflect.DeepEqual(eh.CreationDate, new.CreationDate) {
		changes = append(changes, NewChange(evidencehistory.FieldCreationDate, eh.CreationDate, new.CreationDate))
	}
	if !reflect.DeepEqual(eh.RenewalDate, new.RenewalDate) {
		changes = append(changes, NewChange(evidencehistory.FieldRenewalDate, eh.RenewalDate, new.RenewalDate))
	}
	if !reflect.DeepEqual(eh.Source, new.Source) {
		changes = append(changes, NewChange(evidencehistory.FieldSource, eh.Source, new.Source))
	}
	if !reflect.DeepEqual(eh.IsAutomated, new.IsAutomated) {
		changes = append(changes, NewChange(evidencehistory.FieldIsAutomated, eh.IsAutomated, new.IsAutomated))
	}
	if !reflect.DeepEqual(eh.URL, new.URL) {
		changes = append(changes, NewChange(evidencehistory.FieldURL, eh.URL, new.URL))
	}
	if !reflect.DeepEqual(eh.Status, new.Status) {
		changes = append(changes, NewChange(evidencehistory.FieldStatus, eh.Status, new.Status))
	}
	return changes
}

func (eh *EvidenceHistory) Diff(history *EvidenceHistory) (*HistoryDiff[EvidenceHistory], error) {
	if eh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ehUnix, historyUnix := eh.HistoryTime.Unix(), history.HistoryTime.Unix()
	ehOlder := ehUnix < historyUnix || (ehUnix == historyUnix && eh.ID < history.ID)
	historyOlder := ehUnix > historyUnix || (ehUnix == historyUnix && eh.ID > history.ID)

	if ehOlder {
		return &HistoryDiff[EvidenceHistory]{
			Old:     eh,
			New:     history,
			Changes: eh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[EvidenceHistory]{
			Old:     history,
			New:     eh,
			Changes: history.changes(eh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (fh *FileHistory) changes(new *FileHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(fh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(filehistory.FieldCreatedAt, fh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(fh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(filehistory.FieldUpdatedAt, fh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(fh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(filehistory.FieldCreatedBy, fh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(fh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(filehistory.FieldDeletedAt, fh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(fh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(filehistory.FieldDeletedBy, fh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(fh.Tags, new.Tags) {
		changes = append(changes, NewChange(filehistory.FieldTags, fh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(fh.ProvidedFileName, new.ProvidedFileName) {
		changes = append(changes, NewChange(filehistory.FieldProvidedFileName, fh.ProvidedFileName, new.ProvidedFileName))
	}
	if !reflect.DeepEqual(fh.ProvidedFileExtension, new.ProvidedFileExtension) {
		changes = append(changes, NewChange(filehistory.FieldProvidedFileExtension, fh.ProvidedFileExtension, new.ProvidedFileExtension))
	}
	if !reflect.DeepEqual(fh.ProvidedFileSize, new.ProvidedFileSize) {
		changes = append(changes, NewChange(filehistory.FieldProvidedFileSize, fh.ProvidedFileSize, new.ProvidedFileSize))
	}
	if !reflect.DeepEqual(fh.PersistedFileSize, new.PersistedFileSize) {
		changes = append(changes, NewChange(filehistory.FieldPersistedFileSize, fh.PersistedFileSize, new.PersistedFileSize))
	}
	if !reflect.DeepEqual(fh.DetectedMimeType, new.DetectedMimeType) {
		changes = append(changes, NewChange(filehistory.FieldDetectedMimeType, fh.DetectedMimeType, new.DetectedMimeType))
	}
	if !reflect.DeepEqual(fh.Md5Hash, new.Md5Hash) {
		changes = append(changes, NewChange(filehistory.FieldMd5Hash, fh.Md5Hash, new.Md5Hash))
	}
	if !reflect.DeepEqual(fh.DetectedContentType, new.DetectedContentType) {
		changes = append(changes, NewChange(filehistory.FieldDetectedContentType, fh.DetectedContentType, new.DetectedContentType))
	}
	if !reflect.DeepEqual(fh.StoreKey, new.StoreKey) {
		changes = append(changes, NewChange(filehistory.FieldStoreKey, fh.StoreKey, new.StoreKey))
	}
	if !reflect.DeepEqual(fh.CategoryType, new.CategoryType) {
		changes = append(changes, NewChange(filehistory.FieldCategoryType, fh.CategoryType, new.CategoryType))
	}
	if !reflect.DeepEqual(fh.URI, new.URI) {
		changes = append(changes, NewChange(filehistory.FieldURI, fh.URI, new.URI))
	}
	if !reflect.DeepEqual(fh.StorageScheme, new.StorageScheme) {
		changes = append(changes, NewChange(filehistory.FieldStorageScheme, fh.StorageScheme, new.StorageScheme))
	}
	if !reflect.DeepEqual(fh.StorageVolume, new.StorageVolume) {
		changes = append(changes, NewChange(filehistory.FieldStorageVolume, fh.StorageVolume, new.StorageVolume))
	}
	if !reflect.DeepEqual(fh.StoragePath, new.StoragePath) {
		changes = append(changes, NewChange(filehistory.FieldStoragePath, fh.StoragePath, new.StoragePath))
	}
	if !reflect.DeepEqual(fh.FileContents, new.FileContents) {
		changes = append(changes, NewChange(filehistory.FieldFileContents, fh.FileContents, new.FileContents))
	}
	return changes
}

func (fh *FileHistory) Diff(history *FileHistory) (*HistoryDiff[FileHistory], error) {
	if fh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	fhUnix, historyUnix := fh.HistoryTime.Unix(), history.HistoryTime.Unix()
	fhOlder := fhUnix < historyUnix || (fhUnix == historyUnix && fh.ID < history.ID)
	historyOlder := fhUnix > historyUnix || (fhUnix == historyUnix && fh.ID > history.ID)

	if fhOlder {
		return &HistoryDiff[FileHistory]{
			Old:     fh,
			New:     history,
			Changes: fh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[FileHistory]{
			Old:     history,
			New:     fh,
			Changes: history.changes(fh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (gh *GroupHistory) changes(new *GroupHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(gh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(grouphistory.FieldCreatedAt, gh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(gh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(grouphistory.FieldUpdatedAt, gh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(gh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(grouphistory.FieldCreatedBy, gh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(gh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(grouphistory.FieldDeletedAt, gh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(gh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(grouphistory.FieldDeletedBy, gh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(gh.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(grouphistory.FieldDisplayID, gh.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(gh.Tags, new.Tags) {
		changes = append(changes, NewChange(grouphistory.FieldTags, gh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(gh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(grouphistory.FieldOwnerID, gh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(gh.Name, new.Name) {
		changes = append(changes, NewChange(grouphistory.FieldName, gh.Name, new.Name))
	}
	if !reflect.DeepEqual(gh.Description, new.Description) {
		changes = append(changes, NewChange(grouphistory.FieldDescription, gh.Description, new.Description))
	}
	if !reflect.DeepEqual(gh.IsManaged, new.IsManaged) {
		changes = append(changes, NewChange(grouphistory.FieldIsManaged, gh.IsManaged, new.IsManaged))
	}
	if !reflect.DeepEqual(gh.GravatarLogoURL, new.GravatarLogoURL) {
		changes = append(changes, NewChange(grouphistory.FieldGravatarLogoURL, gh.GravatarLogoURL, new.GravatarLogoURL))
	}
	if !reflect.DeepEqual(gh.LogoURL, new.LogoURL) {
		changes = append(changes, NewChange(grouphistory.FieldLogoURL, gh.LogoURL, new.LogoURL))
	}
	if !reflect.DeepEqual(gh.DisplayName, new.DisplayName) {
		changes = append(changes, NewChange(grouphistory.FieldDisplayName, gh.DisplayName, new.DisplayName))
	}
	return changes
}

func (gh *GroupHistory) Diff(history *GroupHistory) (*HistoryDiff[GroupHistory], error) {
	if gh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ghUnix, historyUnix := gh.HistoryTime.Unix(), history.HistoryTime.Unix()
	ghOlder := ghUnix < historyUnix || (ghUnix == historyUnix && gh.ID < history.ID)
	historyOlder := ghUnix > historyUnix || (ghUnix == historyUnix && gh.ID > history.ID)

	if ghOlder {
		return &HistoryDiff[GroupHistory]{
			Old:     gh,
			New:     history,
			Changes: gh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[GroupHistory]{
			Old:     history,
			New:     gh,
			Changes: history.changes(gh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (gmh *GroupMembershipHistory) changes(new *GroupMembershipHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(gmh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(groupmembershiphistory.FieldCreatedAt, gmh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(gmh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(groupmembershiphistory.FieldUpdatedAt, gmh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(gmh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(groupmembershiphistory.FieldCreatedBy, gmh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(gmh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(groupmembershiphistory.FieldDeletedAt, gmh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(gmh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(groupmembershiphistory.FieldDeletedBy, gmh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(gmh.Role, new.Role) {
		changes = append(changes, NewChange(groupmembershiphistory.FieldRole, gmh.Role, new.Role))
	}
	if !reflect.DeepEqual(gmh.GroupID, new.GroupID) {
		changes = append(changes, NewChange(groupmembershiphistory.FieldGroupID, gmh.GroupID, new.GroupID))
	}
	if !reflect.DeepEqual(gmh.UserID, new.UserID) {
		changes = append(changes, NewChange(groupmembershiphistory.FieldUserID, gmh.UserID, new.UserID))
	}
	return changes
}

func (gmh *GroupMembershipHistory) Diff(history *GroupMembershipHistory) (*HistoryDiff[GroupMembershipHistory], error) {
	if gmh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	gmhUnix, historyUnix := gmh.HistoryTime.Unix(), history.HistoryTime.Unix()
	gmhOlder := gmhUnix < historyUnix || (gmhUnix == historyUnix && gmh.ID < history.ID)
	historyOlder := gmhUnix > historyUnix || (gmhUnix == historyUnix && gmh.ID > history.ID)

	if gmhOlder {
		return &HistoryDiff[GroupMembershipHistory]{
			Old:     gmh,
			New:     history,
			Changes: gmh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[GroupMembershipHistory]{
			Old:     history,
			New:     gmh,
			Changes: history.changes(gmh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (gsh *GroupSettingHistory) changes(new *GroupSettingHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(gsh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(groupsettinghistory.FieldCreatedAt, gsh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(gsh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(groupsettinghistory.FieldUpdatedAt, gsh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(gsh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(groupsettinghistory.FieldCreatedBy, gsh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(gsh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(groupsettinghistory.FieldDeletedAt, gsh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(gsh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(groupsettinghistory.FieldDeletedBy, gsh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(gsh.Visibility, new.Visibility) {
		changes = append(changes, NewChange(groupsettinghistory.FieldVisibility, gsh.Visibility, new.Visibility))
	}
	if !reflect.DeepEqual(gsh.JoinPolicy, new.JoinPolicy) {
		changes = append(changes, NewChange(groupsettinghistory.FieldJoinPolicy, gsh.JoinPolicy, new.JoinPolicy))
	}
	if !reflect.DeepEqual(gsh.SyncToSlack, new.SyncToSlack) {
		changes = append(changes, NewChange(groupsettinghistory.FieldSyncToSlack, gsh.SyncToSlack, new.SyncToSlack))
	}
	if !reflect.DeepEqual(gsh.SyncToGithub, new.SyncToGithub) {
		changes = append(changes, NewChange(groupsettinghistory.FieldSyncToGithub, gsh.SyncToGithub, new.SyncToGithub))
	}
	if !reflect.DeepEqual(gsh.GroupID, new.GroupID) {
		changes = append(changes, NewChange(groupsettinghistory.FieldGroupID, gsh.GroupID, new.GroupID))
	}
	return changes
}

func (gsh *GroupSettingHistory) Diff(history *GroupSettingHistory) (*HistoryDiff[GroupSettingHistory], error) {
	if gsh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	gshUnix, historyUnix := gsh.HistoryTime.Unix(), history.HistoryTime.Unix()
	gshOlder := gshUnix < historyUnix || (gshUnix == historyUnix && gsh.ID < history.ID)
	historyOlder := gshUnix > historyUnix || (gshUnix == historyUnix && gsh.ID > history.ID)

	if gshOlder {
		return &HistoryDiff[GroupSettingHistory]{
			Old:     gsh,
			New:     history,
			Changes: gsh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[GroupSettingHistory]{
			Old:     history,
			New:     gsh,
			Changes: history.changes(gsh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (hh *HushHistory) changes(new *HushHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(hh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(hushhistory.FieldCreatedAt, hh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(hh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(hushhistory.FieldUpdatedAt, hh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(hh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(hushhistory.FieldCreatedBy, hh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(hh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(hushhistory.FieldDeletedAt, hh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(hh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(hushhistory.FieldDeletedBy, hh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(hh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(hushhistory.FieldOwnerID, hh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(hh.Name, new.Name) {
		changes = append(changes, NewChange(hushhistory.FieldName, hh.Name, new.Name))
	}
	if !reflect.DeepEqual(hh.Description, new.Description) {
		changes = append(changes, NewChange(hushhistory.FieldDescription, hh.Description, new.Description))
	}
	if !reflect.DeepEqual(hh.Kind, new.Kind) {
		changes = append(changes, NewChange(hushhistory.FieldKind, hh.Kind, new.Kind))
	}
	if !reflect.DeepEqual(hh.SecretName, new.SecretName) {
		changes = append(changes, NewChange(hushhistory.FieldSecretName, hh.SecretName, new.SecretName))
	}
	if !reflect.DeepEqual(hh.SecretValue, new.SecretValue) {
		changes = append(changes, NewChange(hushhistory.FieldSecretValue, hh.SecretValue, new.SecretValue))
	}
	return changes
}

func (hh *HushHistory) Diff(history *HushHistory) (*HistoryDiff[HushHistory], error) {
	if hh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	hhUnix, historyUnix := hh.HistoryTime.Unix(), history.HistoryTime.Unix()
	hhOlder := hhUnix < historyUnix || (hhUnix == historyUnix && hh.ID < history.ID)
	historyOlder := hhUnix > historyUnix || (hhUnix == historyUnix && hh.ID > history.ID)

	if hhOlder {
		return &HistoryDiff[HushHistory]{
			Old:     hh,
			New:     history,
			Changes: hh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[HushHistory]{
			Old:     history,
			New:     hh,
			Changes: history.changes(hh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (ih *IntegrationHistory) changes(new *IntegrationHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(ih.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(integrationhistory.FieldCreatedAt, ih.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(ih.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(integrationhistory.FieldUpdatedAt, ih.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(ih.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(integrationhistory.FieldCreatedBy, ih.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(ih.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(integrationhistory.FieldDeletedAt, ih.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(ih.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(integrationhistory.FieldDeletedBy, ih.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(ih.Tags, new.Tags) {
		changes = append(changes, NewChange(integrationhistory.FieldTags, ih.Tags, new.Tags))
	}
	if !reflect.DeepEqual(ih.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(integrationhistory.FieldOwnerID, ih.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(ih.Name, new.Name) {
		changes = append(changes, NewChange(integrationhistory.FieldName, ih.Name, new.Name))
	}
	if !reflect.DeepEqual(ih.Description, new.Description) {
		changes = append(changes, NewChange(integrationhistory.FieldDescription, ih.Description, new.Description))
	}
	if !reflect.DeepEqual(ih.Kind, new.Kind) {
		changes = append(changes, NewChange(integrationhistory.FieldKind, ih.Kind, new.Kind))
	}
	return changes
}

func (ih *IntegrationHistory) Diff(history *IntegrationHistory) (*HistoryDiff[IntegrationHistory], error) {
	if ih.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ihUnix, historyUnix := ih.HistoryTime.Unix(), history.HistoryTime.Unix()
	ihOlder := ihUnix < historyUnix || (ihUnix == historyUnix && ih.ID < history.ID)
	historyOlder := ihUnix > historyUnix || (ihUnix == historyUnix && ih.ID > history.ID)

	if ihOlder {
		return &HistoryDiff[IntegrationHistory]{
			Old:     ih,
			New:     history,
			Changes: ih.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[IntegrationHistory]{
			Old:     history,
			New:     ih,
			Changes: history.changes(ih),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (iph *InternalPolicyHistory) changes(new *InternalPolicyHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(iph.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldCreatedAt, iph.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(iph.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldUpdatedAt, iph.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(iph.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldCreatedBy, iph.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(iph.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldDeletedAt, iph.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(iph.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldDeletedBy, iph.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(iph.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldDisplayID, iph.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(iph.Tags, new.Tags) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldTags, iph.Tags, new.Tags))
	}
	if !reflect.DeepEqual(iph.Revision, new.Revision) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldRevision, iph.Revision, new.Revision))
	}
	if !reflect.DeepEqual(iph.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldOwnerID, iph.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(iph.Name, new.Name) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldName, iph.Name, new.Name))
	}
	if !reflect.DeepEqual(iph.Status, new.Status) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldStatus, iph.Status, new.Status))
	}
	if !reflect.DeepEqual(iph.PolicyType, new.PolicyType) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldPolicyType, iph.PolicyType, new.PolicyType))
	}
	if !reflect.DeepEqual(iph.Details, new.Details) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldDetails, iph.Details, new.Details))
	}
	if !reflect.DeepEqual(iph.ApprovalRequired, new.ApprovalRequired) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldApprovalRequired, iph.ApprovalRequired, new.ApprovalRequired))
	}
	if !reflect.DeepEqual(iph.ReviewDue, new.ReviewDue) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldReviewDue, iph.ReviewDue, new.ReviewDue))
	}
	if !reflect.DeepEqual(iph.ReviewFrequency, new.ReviewFrequency) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldReviewFrequency, iph.ReviewFrequency, new.ReviewFrequency))
	}
	if !reflect.DeepEqual(iph.ApproverID, new.ApproverID) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldApproverID, iph.ApproverID, new.ApproverID))
	}
	if !reflect.DeepEqual(iph.DelegateID, new.DelegateID) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldDelegateID, iph.DelegateID, new.DelegateID))
	}
	if !reflect.DeepEqual(iph.Summary, new.Summary) {
		changes = append(changes, NewChange(internalpolicyhistory.FieldSummary, iph.Summary, new.Summary))
	}
	return changes
}

func (iph *InternalPolicyHistory) Diff(history *InternalPolicyHistory) (*HistoryDiff[InternalPolicyHistory], error) {
	if iph.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	iphUnix, historyUnix := iph.HistoryTime.Unix(), history.HistoryTime.Unix()
	iphOlder := iphUnix < historyUnix || (iphUnix == historyUnix && iph.ID < history.ID)
	historyOlder := iphUnix > historyUnix || (iphUnix == historyUnix && iph.ID > history.ID)

	if iphOlder {
		return &HistoryDiff[InternalPolicyHistory]{
			Old:     iph,
			New:     history,
			Changes: iph.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[InternalPolicyHistory]{
			Old:     history,
			New:     iph,
			Changes: history.changes(iph),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (mdh *MappableDomainHistory) changes(new *MappableDomainHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(mdh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(mappabledomainhistory.FieldCreatedAt, mdh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(mdh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(mappabledomainhistory.FieldUpdatedAt, mdh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(mdh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(mappabledomainhistory.FieldCreatedBy, mdh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(mdh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(mappabledomainhistory.FieldDeletedAt, mdh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(mdh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(mappabledomainhistory.FieldDeletedBy, mdh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(mdh.Tags, new.Tags) {
		changes = append(changes, NewChange(mappabledomainhistory.FieldTags, mdh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(mdh.Name, new.Name) {
		changes = append(changes, NewChange(mappabledomainhistory.FieldName, mdh.Name, new.Name))
	}
	return changes
}

func (mdh *MappableDomainHistory) Diff(history *MappableDomainHistory) (*HistoryDiff[MappableDomainHistory], error) {
	if mdh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	mdhUnix, historyUnix := mdh.HistoryTime.Unix(), history.HistoryTime.Unix()
	mdhOlder := mdhUnix < historyUnix || (mdhUnix == historyUnix && mdh.ID < history.ID)
	historyOlder := mdhUnix > historyUnix || (mdhUnix == historyUnix && mdh.ID > history.ID)

	if mdhOlder {
		return &HistoryDiff[MappableDomainHistory]{
			Old:     mdh,
			New:     history,
			Changes: mdh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[MappableDomainHistory]{
			Old:     history,
			New:     mdh,
			Changes: history.changes(mdh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (mch *MappedControlHistory) changes(new *MappedControlHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(mch.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(mappedcontrolhistory.FieldCreatedAt, mch.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(mch.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(mappedcontrolhistory.FieldUpdatedAt, mch.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(mch.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(mappedcontrolhistory.FieldCreatedBy, mch.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(mch.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(mappedcontrolhistory.FieldDeletedAt, mch.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(mch.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(mappedcontrolhistory.FieldDeletedBy, mch.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(mch.Tags, new.Tags) {
		changes = append(changes, NewChange(mappedcontrolhistory.FieldTags, mch.Tags, new.Tags))
	}
	if !reflect.DeepEqual(mch.MappingType, new.MappingType) {
		changes = append(changes, NewChange(mappedcontrolhistory.FieldMappingType, mch.MappingType, new.MappingType))
	}
	if !reflect.DeepEqual(mch.Relation, new.Relation) {
		changes = append(changes, NewChange(mappedcontrolhistory.FieldRelation, mch.Relation, new.Relation))
	}
	return changes
}

func (mch *MappedControlHistory) Diff(history *MappedControlHistory) (*HistoryDiff[MappedControlHistory], error) {
	if mch.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	mchUnix, historyUnix := mch.HistoryTime.Unix(), history.HistoryTime.Unix()
	mchOlder := mchUnix < historyUnix || (mchUnix == historyUnix && mch.ID < history.ID)
	historyOlder := mchUnix > historyUnix || (mchUnix == historyUnix && mch.ID > history.ID)

	if mchOlder {
		return &HistoryDiff[MappedControlHistory]{
			Old:     mch,
			New:     history,
			Changes: mch.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[MappedControlHistory]{
			Old:     history,
			New:     mch,
			Changes: history.changes(mch),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (nh *NarrativeHistory) changes(new *NarrativeHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(nh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(narrativehistory.FieldCreatedAt, nh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(nh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(narrativehistory.FieldUpdatedAt, nh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(nh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(narrativehistory.FieldCreatedBy, nh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(nh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(narrativehistory.FieldDeletedAt, nh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(nh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(narrativehistory.FieldDeletedBy, nh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(nh.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(narrativehistory.FieldDisplayID, nh.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(nh.Tags, new.Tags) {
		changes = append(changes, NewChange(narrativehistory.FieldTags, nh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(nh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(narrativehistory.FieldOwnerID, nh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(nh.Name, new.Name) {
		changes = append(changes, NewChange(narrativehistory.FieldName, nh.Name, new.Name))
	}
	if !reflect.DeepEqual(nh.Description, new.Description) {
		changes = append(changes, NewChange(narrativehistory.FieldDescription, nh.Description, new.Description))
	}
	if !reflect.DeepEqual(nh.Details, new.Details) {
		changes = append(changes, NewChange(narrativehistory.FieldDetails, nh.Details, new.Details))
	}
	return changes
}

func (nh *NarrativeHistory) Diff(history *NarrativeHistory) (*HistoryDiff[NarrativeHistory], error) {
	if nh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	nhUnix, historyUnix := nh.HistoryTime.Unix(), history.HistoryTime.Unix()
	nhOlder := nhUnix < historyUnix || (nhUnix == historyUnix && nh.ID < history.ID)
	historyOlder := nhUnix > historyUnix || (nhUnix == historyUnix && nh.ID > history.ID)

	if nhOlder {
		return &HistoryDiff[NarrativeHistory]{
			Old:     nh,
			New:     history,
			Changes: nh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[NarrativeHistory]{
			Old:     history,
			New:     nh,
			Changes: history.changes(nh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (nh *NoteHistory) changes(new *NoteHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(nh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(notehistory.FieldCreatedAt, nh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(nh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(notehistory.FieldUpdatedAt, nh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(nh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(notehistory.FieldCreatedBy, nh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(nh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(notehistory.FieldDeletedAt, nh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(nh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(notehistory.FieldDeletedBy, nh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(nh.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(notehistory.FieldDisplayID, nh.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(nh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(notehistory.FieldOwnerID, nh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(nh.Text, new.Text) {
		changes = append(changes, NewChange(notehistory.FieldText, nh.Text, new.Text))
	}
	return changes
}

func (nh *NoteHistory) Diff(history *NoteHistory) (*HistoryDiff[NoteHistory], error) {
	if nh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	nhUnix, historyUnix := nh.HistoryTime.Unix(), history.HistoryTime.Unix()
	nhOlder := nhUnix < historyUnix || (nhUnix == historyUnix && nh.ID < history.ID)
	historyOlder := nhUnix > historyUnix || (nhUnix == historyUnix && nh.ID > history.ID)

	if nhOlder {
		return &HistoryDiff[NoteHistory]{
			Old:     nh,
			New:     history,
			Changes: nh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[NoteHistory]{
			Old:     history,
			New:     nh,
			Changes: history.changes(nh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (omh *OrgMembershipHistory) changes(new *OrgMembershipHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(omh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(orgmembershiphistory.FieldCreatedAt, omh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(omh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(orgmembershiphistory.FieldUpdatedAt, omh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(omh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(orgmembershiphistory.FieldCreatedBy, omh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(omh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(orgmembershiphistory.FieldDeletedAt, omh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(omh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(orgmembershiphistory.FieldDeletedBy, omh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(omh.Role, new.Role) {
		changes = append(changes, NewChange(orgmembershiphistory.FieldRole, omh.Role, new.Role))
	}
	if !reflect.DeepEqual(omh.OrganizationID, new.OrganizationID) {
		changes = append(changes, NewChange(orgmembershiphistory.FieldOrganizationID, omh.OrganizationID, new.OrganizationID))
	}
	if !reflect.DeepEqual(omh.UserID, new.UserID) {
		changes = append(changes, NewChange(orgmembershiphistory.FieldUserID, omh.UserID, new.UserID))
	}
	return changes
}

func (omh *OrgMembershipHistory) Diff(history *OrgMembershipHistory) (*HistoryDiff[OrgMembershipHistory], error) {
	if omh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	omhUnix, historyUnix := omh.HistoryTime.Unix(), history.HistoryTime.Unix()
	omhOlder := omhUnix < historyUnix || (omhUnix == historyUnix && omh.ID < history.ID)
	historyOlder := omhUnix > historyUnix || (omhUnix == historyUnix && omh.ID > history.ID)

	if omhOlder {
		return &HistoryDiff[OrgMembershipHistory]{
			Old:     omh,
			New:     history,
			Changes: omh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[OrgMembershipHistory]{
			Old:     history,
			New:     omh,
			Changes: history.changes(omh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (osh *OrgSubscriptionHistory) changes(new *OrgSubscriptionHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(osh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldCreatedAt, osh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(osh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldUpdatedAt, osh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(osh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldCreatedBy, osh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(osh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldDeletedAt, osh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(osh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldDeletedBy, osh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(osh.Tags, new.Tags) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldTags, osh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(osh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldOwnerID, osh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(osh.StripeSubscriptionID, new.StripeSubscriptionID) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldStripeSubscriptionID, osh.StripeSubscriptionID, new.StripeSubscriptionID))
	}
	if !reflect.DeepEqual(osh.ProductTier, new.ProductTier) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldProductTier, osh.ProductTier, new.ProductTier))
	}
	if !reflect.DeepEqual(osh.ProductPrice, new.ProductPrice) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldProductPrice, osh.ProductPrice, new.ProductPrice))
	}
	if !reflect.DeepEqual(osh.StripeProductTierID, new.StripeProductTierID) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldStripeProductTierID, osh.StripeProductTierID, new.StripeProductTierID))
	}
	if !reflect.DeepEqual(osh.StripeSubscriptionStatus, new.StripeSubscriptionStatus) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldStripeSubscriptionStatus, osh.StripeSubscriptionStatus, new.StripeSubscriptionStatus))
	}
	if !reflect.DeepEqual(osh.Active, new.Active) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldActive, osh.Active, new.Active))
	}
	if !reflect.DeepEqual(osh.StripeCustomerID, new.StripeCustomerID) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldStripeCustomerID, osh.StripeCustomerID, new.StripeCustomerID))
	}
	if !reflect.DeepEqual(osh.ExpiresAt, new.ExpiresAt) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldExpiresAt, osh.ExpiresAt, new.ExpiresAt))
	}
	if !reflect.DeepEqual(osh.TrialExpiresAt, new.TrialExpiresAt) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldTrialExpiresAt, osh.TrialExpiresAt, new.TrialExpiresAt))
	}
	if !reflect.DeepEqual(osh.DaysUntilDue, new.DaysUntilDue) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldDaysUntilDue, osh.DaysUntilDue, new.DaysUntilDue))
	}
	if !reflect.DeepEqual(osh.PaymentMethodAdded, new.PaymentMethodAdded) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldPaymentMethodAdded, osh.PaymentMethodAdded, new.PaymentMethodAdded))
	}
	if !reflect.DeepEqual(osh.Features, new.Features) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldFeatures, osh.Features, new.Features))
	}
	if !reflect.DeepEqual(osh.FeatureLookupKeys, new.FeatureLookupKeys) {
		changes = append(changes, NewChange(orgsubscriptionhistory.FieldFeatureLookupKeys, osh.FeatureLookupKeys, new.FeatureLookupKeys))
	}
	return changes
}

func (osh *OrgSubscriptionHistory) Diff(history *OrgSubscriptionHistory) (*HistoryDiff[OrgSubscriptionHistory], error) {
	if osh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	oshUnix, historyUnix := osh.HistoryTime.Unix(), history.HistoryTime.Unix()
	oshOlder := oshUnix < historyUnix || (oshUnix == historyUnix && osh.ID < history.ID)
	historyOlder := oshUnix > historyUnix || (oshUnix == historyUnix && osh.ID > history.ID)

	if oshOlder {
		return &HistoryDiff[OrgSubscriptionHistory]{
			Old:     osh,
			New:     history,
			Changes: osh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[OrgSubscriptionHistory]{
			Old:     history,
			New:     osh,
			Changes: history.changes(osh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (oh *OrganizationHistory) changes(new *OrganizationHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(oh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(organizationhistory.FieldCreatedAt, oh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(oh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(organizationhistory.FieldUpdatedAt, oh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(oh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(organizationhistory.FieldCreatedBy, oh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(oh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(organizationhistory.FieldDeletedAt, oh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(oh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(organizationhistory.FieldDeletedBy, oh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(oh.Tags, new.Tags) {
		changes = append(changes, NewChange(organizationhistory.FieldTags, oh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(oh.Name, new.Name) {
		changes = append(changes, NewChange(organizationhistory.FieldName, oh.Name, new.Name))
	}
	if !reflect.DeepEqual(oh.DisplayName, new.DisplayName) {
		changes = append(changes, NewChange(organizationhistory.FieldDisplayName, oh.DisplayName, new.DisplayName))
	}
	if !reflect.DeepEqual(oh.Description, new.Description) {
		changes = append(changes, NewChange(organizationhistory.FieldDescription, oh.Description, new.Description))
	}
	if !reflect.DeepEqual(oh.ParentOrganizationID, new.ParentOrganizationID) {
		changes = append(changes, NewChange(organizationhistory.FieldParentOrganizationID, oh.ParentOrganizationID, new.ParentOrganizationID))
	}
	if !reflect.DeepEqual(oh.PersonalOrg, new.PersonalOrg) {
		changes = append(changes, NewChange(organizationhistory.FieldPersonalOrg, oh.PersonalOrg, new.PersonalOrg))
	}
	if !reflect.DeepEqual(oh.AvatarRemoteURL, new.AvatarRemoteURL) {
		changes = append(changes, NewChange(organizationhistory.FieldAvatarRemoteURL, oh.AvatarRemoteURL, new.AvatarRemoteURL))
	}
	if !reflect.DeepEqual(oh.AvatarLocalFileID, new.AvatarLocalFileID) {
		changes = append(changes, NewChange(organizationhistory.FieldAvatarLocalFileID, oh.AvatarLocalFileID, new.AvatarLocalFileID))
	}
	if !reflect.DeepEqual(oh.AvatarUpdatedAt, new.AvatarUpdatedAt) {
		changes = append(changes, NewChange(organizationhistory.FieldAvatarUpdatedAt, oh.AvatarUpdatedAt, new.AvatarUpdatedAt))
	}
	if !reflect.DeepEqual(oh.DedicatedDb, new.DedicatedDb) {
		changes = append(changes, NewChange(organizationhistory.FieldDedicatedDb, oh.DedicatedDb, new.DedicatedDb))
	}
	return changes
}

func (oh *OrganizationHistory) Diff(history *OrganizationHistory) (*HistoryDiff[OrganizationHistory], error) {
	if oh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ohUnix, historyUnix := oh.HistoryTime.Unix(), history.HistoryTime.Unix()
	ohOlder := ohUnix < historyUnix || (ohUnix == historyUnix && oh.ID < history.ID)
	historyOlder := ohUnix > historyUnix || (ohUnix == historyUnix && oh.ID > history.ID)

	if ohOlder {
		return &HistoryDiff[OrganizationHistory]{
			Old:     oh,
			New:     history,
			Changes: oh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[OrganizationHistory]{
			Old:     history,
			New:     oh,
			Changes: history.changes(oh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (osh *OrganizationSettingHistory) changes(new *OrganizationSettingHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(osh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldCreatedAt, osh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(osh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldUpdatedAt, osh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(osh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldCreatedBy, osh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(osh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldDeletedAt, osh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(osh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldDeletedBy, osh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(osh.Tags, new.Tags) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldTags, osh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(osh.Domains, new.Domains) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldDomains, osh.Domains, new.Domains))
	}
	if !reflect.DeepEqual(osh.BillingContact, new.BillingContact) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldBillingContact, osh.BillingContact, new.BillingContact))
	}
	if !reflect.DeepEqual(osh.BillingEmail, new.BillingEmail) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldBillingEmail, osh.BillingEmail, new.BillingEmail))
	}
	if !reflect.DeepEqual(osh.BillingPhone, new.BillingPhone) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldBillingPhone, osh.BillingPhone, new.BillingPhone))
	}
	if !reflect.DeepEqual(osh.BillingAddress, new.BillingAddress) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldBillingAddress, osh.BillingAddress, new.BillingAddress))
	}
	if !reflect.DeepEqual(osh.TaxIdentifier, new.TaxIdentifier) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldTaxIdentifier, osh.TaxIdentifier, new.TaxIdentifier))
	}
	if !reflect.DeepEqual(osh.GeoLocation, new.GeoLocation) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldGeoLocation, osh.GeoLocation, new.GeoLocation))
	}
	if !reflect.DeepEqual(osh.OrganizationID, new.OrganizationID) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldOrganizationID, osh.OrganizationID, new.OrganizationID))
	}
	if !reflect.DeepEqual(osh.BillingNotificationsEnabled, new.BillingNotificationsEnabled) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldBillingNotificationsEnabled, osh.BillingNotificationsEnabled, new.BillingNotificationsEnabled))
	}
	if !reflect.DeepEqual(osh.AllowedEmailDomains, new.AllowedEmailDomains) {
		changes = append(changes, NewChange(organizationsettinghistory.FieldAllowedEmailDomains, osh.AllowedEmailDomains, new.AllowedEmailDomains))
	}
	return changes
}

func (osh *OrganizationSettingHistory) Diff(history *OrganizationSettingHistory) (*HistoryDiff[OrganizationSettingHistory], error) {
	if osh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	oshUnix, historyUnix := osh.HistoryTime.Unix(), history.HistoryTime.Unix()
	oshOlder := oshUnix < historyUnix || (oshUnix == historyUnix && osh.ID < history.ID)
	historyOlder := oshUnix > historyUnix || (oshUnix == historyUnix && osh.ID > history.ID)

	if oshOlder {
		return &HistoryDiff[OrganizationSettingHistory]{
			Old:     osh,
			New:     history,
			Changes: osh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[OrganizationSettingHistory]{
			Old:     history,
			New:     osh,
			Changes: history.changes(osh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (ph *ProcedureHistory) changes(new *ProcedureHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(ph.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(procedurehistory.FieldCreatedAt, ph.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(ph.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(procedurehistory.FieldUpdatedAt, ph.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(ph.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(procedurehistory.FieldCreatedBy, ph.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(ph.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(procedurehistory.FieldDeletedAt, ph.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(ph.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(procedurehistory.FieldDeletedBy, ph.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(ph.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(procedurehistory.FieldDisplayID, ph.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(ph.Tags, new.Tags) {
		changes = append(changes, NewChange(procedurehistory.FieldTags, ph.Tags, new.Tags))
	}
	if !reflect.DeepEqual(ph.Revision, new.Revision) {
		changes = append(changes, NewChange(procedurehistory.FieldRevision, ph.Revision, new.Revision))
	}
	if !reflect.DeepEqual(ph.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(procedurehistory.FieldOwnerID, ph.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(ph.Name, new.Name) {
		changes = append(changes, NewChange(procedurehistory.FieldName, ph.Name, new.Name))
	}
	if !reflect.DeepEqual(ph.Status, new.Status) {
		changes = append(changes, NewChange(procedurehistory.FieldStatus, ph.Status, new.Status))
	}
	if !reflect.DeepEqual(ph.ProcedureType, new.ProcedureType) {
		changes = append(changes, NewChange(procedurehistory.FieldProcedureType, ph.ProcedureType, new.ProcedureType))
	}
	if !reflect.DeepEqual(ph.Details, new.Details) {
		changes = append(changes, NewChange(procedurehistory.FieldDetails, ph.Details, new.Details))
	}
	if !reflect.DeepEqual(ph.ApprovalRequired, new.ApprovalRequired) {
		changes = append(changes, NewChange(procedurehistory.FieldApprovalRequired, ph.ApprovalRequired, new.ApprovalRequired))
	}
	if !reflect.DeepEqual(ph.ReviewDue, new.ReviewDue) {
		changes = append(changes, NewChange(procedurehistory.FieldReviewDue, ph.ReviewDue, new.ReviewDue))
	}
	if !reflect.DeepEqual(ph.ReviewFrequency, new.ReviewFrequency) {
		changes = append(changes, NewChange(procedurehistory.FieldReviewFrequency, ph.ReviewFrequency, new.ReviewFrequency))
	}
	if !reflect.DeepEqual(ph.ApproverID, new.ApproverID) {
		changes = append(changes, NewChange(procedurehistory.FieldApproverID, ph.ApproverID, new.ApproverID))
	}
	if !reflect.DeepEqual(ph.DelegateID, new.DelegateID) {
		changes = append(changes, NewChange(procedurehistory.FieldDelegateID, ph.DelegateID, new.DelegateID))
	}
	if !reflect.DeepEqual(ph.Summary, new.Summary) {
		changes = append(changes, NewChange(procedurehistory.FieldSummary, ph.Summary, new.Summary))
	}
	return changes
}

func (ph *ProcedureHistory) Diff(history *ProcedureHistory) (*HistoryDiff[ProcedureHistory], error) {
	if ph.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	phUnix, historyUnix := ph.HistoryTime.Unix(), history.HistoryTime.Unix()
	phOlder := phUnix < historyUnix || (phUnix == historyUnix && ph.ID < history.ID)
	historyOlder := phUnix > historyUnix || (phUnix == historyUnix && ph.ID > history.ID)

	if phOlder {
		return &HistoryDiff[ProcedureHistory]{
			Old:     ph,
			New:     history,
			Changes: ph.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[ProcedureHistory]{
			Old:     history,
			New:     ph,
			Changes: history.changes(ph),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (ph *ProgramHistory) changes(new *ProgramHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(ph.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(programhistory.FieldCreatedAt, ph.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(ph.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(programhistory.FieldUpdatedAt, ph.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(ph.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(programhistory.FieldCreatedBy, ph.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(ph.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(programhistory.FieldDeletedAt, ph.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(ph.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(programhistory.FieldDeletedBy, ph.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(ph.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(programhistory.FieldDisplayID, ph.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(ph.Tags, new.Tags) {
		changes = append(changes, NewChange(programhistory.FieldTags, ph.Tags, new.Tags))
	}
	if !reflect.DeepEqual(ph.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(programhistory.FieldOwnerID, ph.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(ph.Name, new.Name) {
		changes = append(changes, NewChange(programhistory.FieldName, ph.Name, new.Name))
	}
	if !reflect.DeepEqual(ph.Description, new.Description) {
		changes = append(changes, NewChange(programhistory.FieldDescription, ph.Description, new.Description))
	}
	if !reflect.DeepEqual(ph.Status, new.Status) {
		changes = append(changes, NewChange(programhistory.FieldStatus, ph.Status, new.Status))
	}
	if !reflect.DeepEqual(ph.ProgramType, new.ProgramType) {
		changes = append(changes, NewChange(programhistory.FieldProgramType, ph.ProgramType, new.ProgramType))
	}
	if !reflect.DeepEqual(ph.FrameworkName, new.FrameworkName) {
		changes = append(changes, NewChange(programhistory.FieldFrameworkName, ph.FrameworkName, new.FrameworkName))
	}
	if !reflect.DeepEqual(ph.StartDate, new.StartDate) {
		changes = append(changes, NewChange(programhistory.FieldStartDate, ph.StartDate, new.StartDate))
	}
	if !reflect.DeepEqual(ph.EndDate, new.EndDate) {
		changes = append(changes, NewChange(programhistory.FieldEndDate, ph.EndDate, new.EndDate))
	}
	if !reflect.DeepEqual(ph.AuditorReady, new.AuditorReady) {
		changes = append(changes, NewChange(programhistory.FieldAuditorReady, ph.AuditorReady, new.AuditorReady))
	}
	if !reflect.DeepEqual(ph.AuditorWriteComments, new.AuditorWriteComments) {
		changes = append(changes, NewChange(programhistory.FieldAuditorWriteComments, ph.AuditorWriteComments, new.AuditorWriteComments))
	}
	if !reflect.DeepEqual(ph.AuditorReadComments, new.AuditorReadComments) {
		changes = append(changes, NewChange(programhistory.FieldAuditorReadComments, ph.AuditorReadComments, new.AuditorReadComments))
	}
	if !reflect.DeepEqual(ph.AuditFirm, new.AuditFirm) {
		changes = append(changes, NewChange(programhistory.FieldAuditFirm, ph.AuditFirm, new.AuditFirm))
	}
	if !reflect.DeepEqual(ph.Auditor, new.Auditor) {
		changes = append(changes, NewChange(programhistory.FieldAuditor, ph.Auditor, new.Auditor))
	}
	if !reflect.DeepEqual(ph.AuditorEmail, new.AuditorEmail) {
		changes = append(changes, NewChange(programhistory.FieldAuditorEmail, ph.AuditorEmail, new.AuditorEmail))
	}
	return changes
}

func (ph *ProgramHistory) Diff(history *ProgramHistory) (*HistoryDiff[ProgramHistory], error) {
	if ph.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	phUnix, historyUnix := ph.HistoryTime.Unix(), history.HistoryTime.Unix()
	phOlder := phUnix < historyUnix || (phUnix == historyUnix && ph.ID < history.ID)
	historyOlder := phUnix > historyUnix || (phUnix == historyUnix && ph.ID > history.ID)

	if phOlder {
		return &HistoryDiff[ProgramHistory]{
			Old:     ph,
			New:     history,
			Changes: ph.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[ProgramHistory]{
			Old:     history,
			New:     ph,
			Changes: history.changes(ph),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (pmh *ProgramMembershipHistory) changes(new *ProgramMembershipHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(pmh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(programmembershiphistory.FieldCreatedAt, pmh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(pmh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(programmembershiphistory.FieldUpdatedAt, pmh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(pmh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(programmembershiphistory.FieldCreatedBy, pmh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(pmh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(programmembershiphistory.FieldDeletedAt, pmh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(pmh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(programmembershiphistory.FieldDeletedBy, pmh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(pmh.Role, new.Role) {
		changes = append(changes, NewChange(programmembershiphistory.FieldRole, pmh.Role, new.Role))
	}
	if !reflect.DeepEqual(pmh.ProgramID, new.ProgramID) {
		changes = append(changes, NewChange(programmembershiphistory.FieldProgramID, pmh.ProgramID, new.ProgramID))
	}
	if !reflect.DeepEqual(pmh.UserID, new.UserID) {
		changes = append(changes, NewChange(programmembershiphistory.FieldUserID, pmh.UserID, new.UserID))
	}
	return changes
}

func (pmh *ProgramMembershipHistory) Diff(history *ProgramMembershipHistory) (*HistoryDiff[ProgramMembershipHistory], error) {
	if pmh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	pmhUnix, historyUnix := pmh.HistoryTime.Unix(), history.HistoryTime.Unix()
	pmhOlder := pmhUnix < historyUnix || (pmhUnix == historyUnix && pmh.ID < history.ID)
	historyOlder := pmhUnix > historyUnix || (pmhUnix == historyUnix && pmh.ID > history.ID)

	if pmhOlder {
		return &HistoryDiff[ProgramMembershipHistory]{
			Old:     pmh,
			New:     history,
			Changes: pmh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[ProgramMembershipHistory]{
			Old:     history,
			New:     pmh,
			Changes: history.changes(pmh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (rh *RiskHistory) changes(new *RiskHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(rh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(riskhistory.FieldCreatedAt, rh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(rh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(riskhistory.FieldUpdatedAt, rh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(rh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(riskhistory.FieldCreatedBy, rh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(rh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(riskhistory.FieldDeletedAt, rh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(rh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(riskhistory.FieldDeletedBy, rh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(rh.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(riskhistory.FieldDisplayID, rh.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(rh.Tags, new.Tags) {
		changes = append(changes, NewChange(riskhistory.FieldTags, rh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(rh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(riskhistory.FieldOwnerID, rh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(rh.Name, new.Name) {
		changes = append(changes, NewChange(riskhistory.FieldName, rh.Name, new.Name))
	}
	if !reflect.DeepEqual(rh.Status, new.Status) {
		changes = append(changes, NewChange(riskhistory.FieldStatus, rh.Status, new.Status))
	}
	if !reflect.DeepEqual(rh.RiskType, new.RiskType) {
		changes = append(changes, NewChange(riskhistory.FieldRiskType, rh.RiskType, new.RiskType))
	}
	if !reflect.DeepEqual(rh.Category, new.Category) {
		changes = append(changes, NewChange(riskhistory.FieldCategory, rh.Category, new.Category))
	}
	if !reflect.DeepEqual(rh.Impact, new.Impact) {
		changes = append(changes, NewChange(riskhistory.FieldImpact, rh.Impact, new.Impact))
	}
	if !reflect.DeepEqual(rh.Likelihood, new.Likelihood) {
		changes = append(changes, NewChange(riskhistory.FieldLikelihood, rh.Likelihood, new.Likelihood))
	}
	if !reflect.DeepEqual(rh.Score, new.Score) {
		changes = append(changes, NewChange(riskhistory.FieldScore, rh.Score, new.Score))
	}
	if !reflect.DeepEqual(rh.Mitigation, new.Mitigation) {
		changes = append(changes, NewChange(riskhistory.FieldMitigation, rh.Mitigation, new.Mitigation))
	}
	if !reflect.DeepEqual(rh.Details, new.Details) {
		changes = append(changes, NewChange(riskhistory.FieldDetails, rh.Details, new.Details))
	}
	if !reflect.DeepEqual(rh.BusinessCosts, new.BusinessCosts) {
		changes = append(changes, NewChange(riskhistory.FieldBusinessCosts, rh.BusinessCosts, new.BusinessCosts))
	}
	if !reflect.DeepEqual(rh.StakeholderID, new.StakeholderID) {
		changes = append(changes, NewChange(riskhistory.FieldStakeholderID, rh.StakeholderID, new.StakeholderID))
	}
	if !reflect.DeepEqual(rh.DelegateID, new.DelegateID) {
		changes = append(changes, NewChange(riskhistory.FieldDelegateID, rh.DelegateID, new.DelegateID))
	}
	return changes
}

func (rh *RiskHistory) Diff(history *RiskHistory) (*HistoryDiff[RiskHistory], error) {
	if rh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	rhUnix, historyUnix := rh.HistoryTime.Unix(), history.HistoryTime.Unix()
	rhOlder := rhUnix < historyUnix || (rhUnix == historyUnix && rh.ID < history.ID)
	historyOlder := rhUnix > historyUnix || (rhUnix == historyUnix && rh.ID > history.ID)

	if rhOlder {
		return &HistoryDiff[RiskHistory]{
			Old:     rh,
			New:     history,
			Changes: rh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[RiskHistory]{
			Old:     history,
			New:     rh,
			Changes: history.changes(rh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (sh *StandardHistory) changes(new *StandardHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(sh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(standardhistory.FieldCreatedAt, sh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(sh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(standardhistory.FieldUpdatedAt, sh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(sh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(standardhistory.FieldCreatedBy, sh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(sh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(standardhistory.FieldDeletedAt, sh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(sh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(standardhistory.FieldDeletedBy, sh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(sh.Tags, new.Tags) {
		changes = append(changes, NewChange(standardhistory.FieldTags, sh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(sh.Revision, new.Revision) {
		changes = append(changes, NewChange(standardhistory.FieldRevision, sh.Revision, new.Revision))
	}
	if !reflect.DeepEqual(sh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(standardhistory.FieldOwnerID, sh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(sh.SystemOwned, new.SystemOwned) {
		changes = append(changes, NewChange(standardhistory.FieldSystemOwned, sh.SystemOwned, new.SystemOwned))
	}
	if !reflect.DeepEqual(sh.Name, new.Name) {
		changes = append(changes, NewChange(standardhistory.FieldName, sh.Name, new.Name))
	}
	if !reflect.DeepEqual(sh.ShortName, new.ShortName) {
		changes = append(changes, NewChange(standardhistory.FieldShortName, sh.ShortName, new.ShortName))
	}
	if !reflect.DeepEqual(sh.Framework, new.Framework) {
		changes = append(changes, NewChange(standardhistory.FieldFramework, sh.Framework, new.Framework))
	}
	if !reflect.DeepEqual(sh.Description, new.Description) {
		changes = append(changes, NewChange(standardhistory.FieldDescription, sh.Description, new.Description))
	}
	if !reflect.DeepEqual(sh.GoverningBodyLogoURL, new.GoverningBodyLogoURL) {
		changes = append(changes, NewChange(standardhistory.FieldGoverningBodyLogoURL, sh.GoverningBodyLogoURL, new.GoverningBodyLogoURL))
	}
	if !reflect.DeepEqual(sh.GoverningBody, new.GoverningBody) {
		changes = append(changes, NewChange(standardhistory.FieldGoverningBody, sh.GoverningBody, new.GoverningBody))
	}
	if !reflect.DeepEqual(sh.Domains, new.Domains) {
		changes = append(changes, NewChange(standardhistory.FieldDomains, sh.Domains, new.Domains))
	}
	if !reflect.DeepEqual(sh.Link, new.Link) {
		changes = append(changes, NewChange(standardhistory.FieldLink, sh.Link, new.Link))
	}
	if !reflect.DeepEqual(sh.Status, new.Status) {
		changes = append(changes, NewChange(standardhistory.FieldStatus, sh.Status, new.Status))
	}
	if !reflect.DeepEqual(sh.IsPublic, new.IsPublic) {
		changes = append(changes, NewChange(standardhistory.FieldIsPublic, sh.IsPublic, new.IsPublic))
	}
	if !reflect.DeepEqual(sh.FreeToUse, new.FreeToUse) {
		changes = append(changes, NewChange(standardhistory.FieldFreeToUse, sh.FreeToUse, new.FreeToUse))
	}
	if !reflect.DeepEqual(sh.StandardType, new.StandardType) {
		changes = append(changes, NewChange(standardhistory.FieldStandardType, sh.StandardType, new.StandardType))
	}
	if !reflect.DeepEqual(sh.Version, new.Version) {
		changes = append(changes, NewChange(standardhistory.FieldVersion, sh.Version, new.Version))
	}
	return changes
}

func (sh *StandardHistory) Diff(history *StandardHistory) (*HistoryDiff[StandardHistory], error) {
	if sh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	shUnix, historyUnix := sh.HistoryTime.Unix(), history.HistoryTime.Unix()
	shOlder := shUnix < historyUnix || (shUnix == historyUnix && sh.ID < history.ID)
	historyOlder := shUnix > historyUnix || (shUnix == historyUnix && sh.ID > history.ID)

	if shOlder {
		return &HistoryDiff[StandardHistory]{
			Old:     sh,
			New:     history,
			Changes: sh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[StandardHistory]{
			Old:     history,
			New:     sh,
			Changes: history.changes(sh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (sh *SubcontrolHistory) changes(new *SubcontrolHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(sh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(subcontrolhistory.FieldCreatedAt, sh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(sh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(subcontrolhistory.FieldUpdatedAt, sh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(sh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(subcontrolhistory.FieldCreatedBy, sh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(sh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(subcontrolhistory.FieldDeletedAt, sh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(sh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(subcontrolhistory.FieldDeletedBy, sh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(sh.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(subcontrolhistory.FieldDisplayID, sh.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(sh.Tags, new.Tags) {
		changes = append(changes, NewChange(subcontrolhistory.FieldTags, sh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(sh.Description, new.Description) {
		changes = append(changes, NewChange(subcontrolhistory.FieldDescription, sh.Description, new.Description))
	}
	if !reflect.DeepEqual(sh.ReferenceID, new.ReferenceID) {
		changes = append(changes, NewChange(subcontrolhistory.FieldReferenceID, sh.ReferenceID, new.ReferenceID))
	}
	if !reflect.DeepEqual(sh.AuditorReferenceID, new.AuditorReferenceID) {
		changes = append(changes, NewChange(subcontrolhistory.FieldAuditorReferenceID, sh.AuditorReferenceID, new.AuditorReferenceID))
	}
	if !reflect.DeepEqual(sh.Status, new.Status) {
		changes = append(changes, NewChange(subcontrolhistory.FieldStatus, sh.Status, new.Status))
	}
	if !reflect.DeepEqual(sh.Source, new.Source) {
		changes = append(changes, NewChange(subcontrolhistory.FieldSource, sh.Source, new.Source))
	}
	if !reflect.DeepEqual(sh.ControlType, new.ControlType) {
		changes = append(changes, NewChange(subcontrolhistory.FieldControlType, sh.ControlType, new.ControlType))
	}
	if !reflect.DeepEqual(sh.Category, new.Category) {
		changes = append(changes, NewChange(subcontrolhistory.FieldCategory, sh.Category, new.Category))
	}
	if !reflect.DeepEqual(sh.CategoryID, new.CategoryID) {
		changes = append(changes, NewChange(subcontrolhistory.FieldCategoryID, sh.CategoryID, new.CategoryID))
	}
	if !reflect.DeepEqual(sh.Subcategory, new.Subcategory) {
		changes = append(changes, NewChange(subcontrolhistory.FieldSubcategory, sh.Subcategory, new.Subcategory))
	}
	if !reflect.DeepEqual(sh.MappedCategories, new.MappedCategories) {
		changes = append(changes, NewChange(subcontrolhistory.FieldMappedCategories, sh.MappedCategories, new.MappedCategories))
	}
	if !reflect.DeepEqual(sh.AssessmentObjectives, new.AssessmentObjectives) {
		changes = append(changes, NewChange(subcontrolhistory.FieldAssessmentObjectives, sh.AssessmentObjectives, new.AssessmentObjectives))
	}
	if !reflect.DeepEqual(sh.AssessmentMethods, new.AssessmentMethods) {
		changes = append(changes, NewChange(subcontrolhistory.FieldAssessmentMethods, sh.AssessmentMethods, new.AssessmentMethods))
	}
	if !reflect.DeepEqual(sh.ControlQuestions, new.ControlQuestions) {
		changes = append(changes, NewChange(subcontrolhistory.FieldControlQuestions, sh.ControlQuestions, new.ControlQuestions))
	}
	if !reflect.DeepEqual(sh.ImplementationGuidance, new.ImplementationGuidance) {
		changes = append(changes, NewChange(subcontrolhistory.FieldImplementationGuidance, sh.ImplementationGuidance, new.ImplementationGuidance))
	}
	if !reflect.DeepEqual(sh.ExampleEvidence, new.ExampleEvidence) {
		changes = append(changes, NewChange(subcontrolhistory.FieldExampleEvidence, sh.ExampleEvidence, new.ExampleEvidence))
	}
	if !reflect.DeepEqual(sh.References, new.References) {
		changes = append(changes, NewChange(subcontrolhistory.FieldReferences, sh.References, new.References))
	}
	if !reflect.DeepEqual(sh.ControlOwnerID, new.ControlOwnerID) {
		changes = append(changes, NewChange(subcontrolhistory.FieldControlOwnerID, sh.ControlOwnerID, new.ControlOwnerID))
	}
	if !reflect.DeepEqual(sh.DelegateID, new.DelegateID) {
		changes = append(changes, NewChange(subcontrolhistory.FieldDelegateID, sh.DelegateID, new.DelegateID))
	}
	if !reflect.DeepEqual(sh.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(subcontrolhistory.FieldOwnerID, sh.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(sh.RefCode, new.RefCode) {
		changes = append(changes, NewChange(subcontrolhistory.FieldRefCode, sh.RefCode, new.RefCode))
	}
	if !reflect.DeepEqual(sh.ControlID, new.ControlID) {
		changes = append(changes, NewChange(subcontrolhistory.FieldControlID, sh.ControlID, new.ControlID))
	}
	return changes
}

func (sh *SubcontrolHistory) Diff(history *SubcontrolHistory) (*HistoryDiff[SubcontrolHistory], error) {
	if sh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	shUnix, historyUnix := sh.HistoryTime.Unix(), history.HistoryTime.Unix()
	shOlder := shUnix < historyUnix || (shUnix == historyUnix && sh.ID < history.ID)
	historyOlder := shUnix > historyUnix || (shUnix == historyUnix && sh.ID > history.ID)

	if shOlder {
		return &HistoryDiff[SubcontrolHistory]{
			Old:     sh,
			New:     history,
			Changes: sh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[SubcontrolHistory]{
			Old:     history,
			New:     sh,
			Changes: history.changes(sh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (th *TaskHistory) changes(new *TaskHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(th.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(taskhistory.FieldCreatedAt, th.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(th.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(taskhistory.FieldUpdatedAt, th.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(th.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(taskhistory.FieldCreatedBy, th.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(th.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(taskhistory.FieldDeletedAt, th.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(th.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(taskhistory.FieldDeletedBy, th.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(th.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(taskhistory.FieldDisplayID, th.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(th.Tags, new.Tags) {
		changes = append(changes, NewChange(taskhistory.FieldTags, th.Tags, new.Tags))
	}
	if !reflect.DeepEqual(th.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(taskhistory.FieldOwnerID, th.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(th.Title, new.Title) {
		changes = append(changes, NewChange(taskhistory.FieldTitle, th.Title, new.Title))
	}
	if !reflect.DeepEqual(th.Details, new.Details) {
		changes = append(changes, NewChange(taskhistory.FieldDetails, th.Details, new.Details))
	}
	if !reflect.DeepEqual(th.Status, new.Status) {
		changes = append(changes, NewChange(taskhistory.FieldStatus, th.Status, new.Status))
	}
	if !reflect.DeepEqual(th.Category, new.Category) {
		changes = append(changes, NewChange(taskhistory.FieldCategory, th.Category, new.Category))
	}
	if !reflect.DeepEqual(th.Due, new.Due) {
		changes = append(changes, NewChange(taskhistory.FieldDue, th.Due, new.Due))
	}
	if !reflect.DeepEqual(th.Completed, new.Completed) {
		changes = append(changes, NewChange(taskhistory.FieldCompleted, th.Completed, new.Completed))
	}
	if !reflect.DeepEqual(th.AssigneeID, new.AssigneeID) {
		changes = append(changes, NewChange(taskhistory.FieldAssigneeID, th.AssigneeID, new.AssigneeID))
	}
	if !reflect.DeepEqual(th.AssignerID, new.AssignerID) {
		changes = append(changes, NewChange(taskhistory.FieldAssignerID, th.AssignerID, new.AssignerID))
	}
	return changes
}

func (th *TaskHistory) Diff(history *TaskHistory) (*HistoryDiff[TaskHistory], error) {
	if th.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	thUnix, historyUnix := th.HistoryTime.Unix(), history.HistoryTime.Unix()
	thOlder := thUnix < historyUnix || (thUnix == historyUnix && th.ID < history.ID)
	historyOlder := thUnix > historyUnix || (thUnix == historyUnix && th.ID > history.ID)

	if thOlder {
		return &HistoryDiff[TaskHistory]{
			Old:     th,
			New:     history,
			Changes: th.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[TaskHistory]{
			Old:     history,
			New:     th,
			Changes: history.changes(th),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (th *TemplateHistory) changes(new *TemplateHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(th.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(templatehistory.FieldCreatedAt, th.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(th.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(templatehistory.FieldUpdatedAt, th.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(th.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(templatehistory.FieldCreatedBy, th.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(th.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(templatehistory.FieldDeletedAt, th.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(th.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(templatehistory.FieldDeletedBy, th.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(th.Tags, new.Tags) {
		changes = append(changes, NewChange(templatehistory.FieldTags, th.Tags, new.Tags))
	}
	if !reflect.DeepEqual(th.OwnerID, new.OwnerID) {
		changes = append(changes, NewChange(templatehistory.FieldOwnerID, th.OwnerID, new.OwnerID))
	}
	if !reflect.DeepEqual(th.Name, new.Name) {
		changes = append(changes, NewChange(templatehistory.FieldName, th.Name, new.Name))
	}
	if !reflect.DeepEqual(th.TemplateType, new.TemplateType) {
		changes = append(changes, NewChange(templatehistory.FieldTemplateType, th.TemplateType, new.TemplateType))
	}
	if !reflect.DeepEqual(th.Description, new.Description) {
		changes = append(changes, NewChange(templatehistory.FieldDescription, th.Description, new.Description))
	}
	if !reflect.DeepEqual(th.Jsonconfig, new.Jsonconfig) {
		changes = append(changes, NewChange(templatehistory.FieldJsonconfig, th.Jsonconfig, new.Jsonconfig))
	}
	if !reflect.DeepEqual(th.Uischema, new.Uischema) {
		changes = append(changes, NewChange(templatehistory.FieldUischema, th.Uischema, new.Uischema))
	}
	return changes
}

func (th *TemplateHistory) Diff(history *TemplateHistory) (*HistoryDiff[TemplateHistory], error) {
	if th.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	thUnix, historyUnix := th.HistoryTime.Unix(), history.HistoryTime.Unix()
	thOlder := thUnix < historyUnix || (thUnix == historyUnix && th.ID < history.ID)
	historyOlder := thUnix > historyUnix || (thUnix == historyUnix && th.ID > history.ID)

	if thOlder {
		return &HistoryDiff[TemplateHistory]{
			Old:     th,
			New:     history,
			Changes: th.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[TemplateHistory]{
			Old:     history,
			New:     th,
			Changes: history.changes(th),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (uh *UserHistory) changes(new *UserHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(uh.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(userhistory.FieldCreatedAt, uh.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(uh.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(userhistory.FieldUpdatedAt, uh.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(uh.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(userhistory.FieldCreatedBy, uh.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(uh.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(userhistory.FieldDeletedAt, uh.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(uh.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(userhistory.FieldDeletedBy, uh.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(uh.DisplayID, new.DisplayID) {
		changes = append(changes, NewChange(userhistory.FieldDisplayID, uh.DisplayID, new.DisplayID))
	}
	if !reflect.DeepEqual(uh.Tags, new.Tags) {
		changes = append(changes, NewChange(userhistory.FieldTags, uh.Tags, new.Tags))
	}
	if !reflect.DeepEqual(uh.Email, new.Email) {
		changes = append(changes, NewChange(userhistory.FieldEmail, uh.Email, new.Email))
	}
	if !reflect.DeepEqual(uh.FirstName, new.FirstName) {
		changes = append(changes, NewChange(userhistory.FieldFirstName, uh.FirstName, new.FirstName))
	}
	if !reflect.DeepEqual(uh.LastName, new.LastName) {
		changes = append(changes, NewChange(userhistory.FieldLastName, uh.LastName, new.LastName))
	}
	if !reflect.DeepEqual(uh.DisplayName, new.DisplayName) {
		changes = append(changes, NewChange(userhistory.FieldDisplayName, uh.DisplayName, new.DisplayName))
	}
	if !reflect.DeepEqual(uh.AvatarRemoteURL, new.AvatarRemoteURL) {
		changes = append(changes, NewChange(userhistory.FieldAvatarRemoteURL, uh.AvatarRemoteURL, new.AvatarRemoteURL))
	}
	if !reflect.DeepEqual(uh.AvatarLocalFileID, new.AvatarLocalFileID) {
		changes = append(changes, NewChange(userhistory.FieldAvatarLocalFileID, uh.AvatarLocalFileID, new.AvatarLocalFileID))
	}
	if !reflect.DeepEqual(uh.AvatarUpdatedAt, new.AvatarUpdatedAt) {
		changes = append(changes, NewChange(userhistory.FieldAvatarUpdatedAt, uh.AvatarUpdatedAt, new.AvatarUpdatedAt))
	}
	if !reflect.DeepEqual(uh.LastSeen, new.LastSeen) {
		changes = append(changes, NewChange(userhistory.FieldLastSeen, uh.LastSeen, new.LastSeen))
	}
	if !reflect.DeepEqual(uh.LastLoginProvider, new.LastLoginProvider) {
		changes = append(changes, NewChange(userhistory.FieldLastLoginProvider, uh.LastLoginProvider, new.LastLoginProvider))
	}
	if !reflect.DeepEqual(uh.Password, new.Password) {
		changes = append(changes, NewChange(userhistory.FieldPassword, uh.Password, new.Password))
	}
	if !reflect.DeepEqual(uh.Sub, new.Sub) {
		changes = append(changes, NewChange(userhistory.FieldSub, uh.Sub, new.Sub))
	}
	if !reflect.DeepEqual(uh.AuthProvider, new.AuthProvider) {
		changes = append(changes, NewChange(userhistory.FieldAuthProvider, uh.AuthProvider, new.AuthProvider))
	}
	if !reflect.DeepEqual(uh.Role, new.Role) {
		changes = append(changes, NewChange(userhistory.FieldRole, uh.Role, new.Role))
	}
	return changes
}

func (uh *UserHistory) Diff(history *UserHistory) (*HistoryDiff[UserHistory], error) {
	if uh.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	uhUnix, historyUnix := uh.HistoryTime.Unix(), history.HistoryTime.Unix()
	uhOlder := uhUnix < historyUnix || (uhUnix == historyUnix && uh.ID < history.ID)
	historyOlder := uhUnix > historyUnix || (uhUnix == historyUnix && uh.ID > history.ID)

	if uhOlder {
		return &HistoryDiff[UserHistory]{
			Old:     uh,
			New:     history,
			Changes: uh.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[UserHistory]{
			Old:     history,
			New:     uh,
			Changes: history.changes(uh),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (ush *UserSettingHistory) changes(new *UserSettingHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(ush.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(usersettinghistory.FieldCreatedAt, ush.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(ush.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(usersettinghistory.FieldUpdatedAt, ush.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(ush.CreatedBy, new.CreatedBy) {
		changes = append(changes, NewChange(usersettinghistory.FieldCreatedBy, ush.CreatedBy, new.CreatedBy))
	}
	if !reflect.DeepEqual(ush.DeletedAt, new.DeletedAt) {
		changes = append(changes, NewChange(usersettinghistory.FieldDeletedAt, ush.DeletedAt, new.DeletedAt))
	}
	if !reflect.DeepEqual(ush.DeletedBy, new.DeletedBy) {
		changes = append(changes, NewChange(usersettinghistory.FieldDeletedBy, ush.DeletedBy, new.DeletedBy))
	}
	if !reflect.DeepEqual(ush.Tags, new.Tags) {
		changes = append(changes, NewChange(usersettinghistory.FieldTags, ush.Tags, new.Tags))
	}
	if !reflect.DeepEqual(ush.UserID, new.UserID) {
		changes = append(changes, NewChange(usersettinghistory.FieldUserID, ush.UserID, new.UserID))
	}
	if !reflect.DeepEqual(ush.Locked, new.Locked) {
		changes = append(changes, NewChange(usersettinghistory.FieldLocked, ush.Locked, new.Locked))
	}
	if !reflect.DeepEqual(ush.SilencedAt, new.SilencedAt) {
		changes = append(changes, NewChange(usersettinghistory.FieldSilencedAt, ush.SilencedAt, new.SilencedAt))
	}
	if !reflect.DeepEqual(ush.SuspendedAt, new.SuspendedAt) {
		changes = append(changes, NewChange(usersettinghistory.FieldSuspendedAt, ush.SuspendedAt, new.SuspendedAt))
	}
	if !reflect.DeepEqual(ush.Status, new.Status) {
		changes = append(changes, NewChange(usersettinghistory.FieldStatus, ush.Status, new.Status))
	}
	if !reflect.DeepEqual(ush.EmailConfirmed, new.EmailConfirmed) {
		changes = append(changes, NewChange(usersettinghistory.FieldEmailConfirmed, ush.EmailConfirmed, new.EmailConfirmed))
	}
	if !reflect.DeepEqual(ush.IsWebauthnAllowed, new.IsWebauthnAllowed) {
		changes = append(changes, NewChange(usersettinghistory.FieldIsWebauthnAllowed, ush.IsWebauthnAllowed, new.IsWebauthnAllowed))
	}
	if !reflect.DeepEqual(ush.IsTfaEnabled, new.IsTfaEnabled) {
		changes = append(changes, NewChange(usersettinghistory.FieldIsTfaEnabled, ush.IsTfaEnabled, new.IsTfaEnabled))
	}
	if !reflect.DeepEqual(ush.PhoneNumber, new.PhoneNumber) {
		changes = append(changes, NewChange(usersettinghistory.FieldPhoneNumber, ush.PhoneNumber, new.PhoneNumber))
	}
	return changes
}

func (ush *UserSettingHistory) Diff(history *UserSettingHistory) (*HistoryDiff[UserSettingHistory], error) {
	if ush.Ref != history.Ref {
		return nil, MismatchedRefError
	}

	ushUnix, historyUnix := ush.HistoryTime.Unix(), history.HistoryTime.Unix()
	ushOlder := ushUnix < historyUnix || (ushUnix == historyUnix && ush.ID < history.ID)
	historyOlder := ushUnix > historyUnix || (ushUnix == historyUnix && ush.ID > history.ID)

	if ushOlder {
		return &HistoryDiff[UserSettingHistory]{
			Old:     ush,
			New:     history,
			Changes: ush.changes(history),
		}, nil
	} else if historyOlder {
		return &HistoryDiff[UserSettingHistory]{
			Old:     history,
			New:     ush,
			Changes: history.changes(ush),
		}, nil
	}
	return nil, IdenticalHistoryError
}

func (c Change) String(op history.OpType) string {
	var newstr, oldstr string
	if c.New != nil {
		val, err := json.Marshal(c.New)
		if err != nil {
			newstr = fmt.Sprintf("%v", c.New)
		} else {
			newstr = string(val)
		}
	}
	if c.Old != nil {
		val, err := json.Marshal(c.Old)
		if err != nil {
			oldstr = fmt.Sprintf("%v", c.Old)
		} else {
			oldstr = string(val)
		}
	}
	switch op {
	case history.OpTypeInsert:
		return fmt.Sprintf("%s: %s", c.FieldName, newstr)
	case history.OpTypeDelete:
		return fmt.Sprintf("%s: %s", c.FieldName, oldstr)
	default:
		return fmt.Sprintf("%s: %s -> %s", c.FieldName, oldstr, newstr)
	}
}

func (c *Client) Audit(ctx context.Context) ([][]string, error) {
	records := [][]string{
		{"Table", "Ref Id", "History Time", "Operation", "Changes", "Updated By"},
	}
	var record [][]string
	var err error
	record, err = auditActionPlanHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditContactHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditControlHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditControlImplementationHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditControlObjectiveHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditCustomDomainHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditDocumentDataHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditEntityHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditEntityTypeHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditEventHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditEvidenceHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditFileHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditGroupHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditGroupMembershipHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditGroupSettingHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditHushHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditIntegrationHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditInternalPolicyHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditMappableDomainHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditMappedControlHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditNarrativeHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditNoteHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditOrgMembershipHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditOrgSubscriptionHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditOrganizationHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditOrganizationSettingHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditProcedureHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditProgramHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditProgramMembershipHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditRiskHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditStandardHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditSubcontrolHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditTaskHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditTemplateHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditUserHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	record, err = auditUserSettingHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, record...)

	return records, nil
}

func (c *Client) AuditWithFilter(ctx context.Context, tableName string) ([][]string, error) {
	records := [][]string{
		{"Table", "Ref Id", "History Time", "Operation", "Changes", "Updated By"},
	}
	var record [][]string
	var err error

	if tableName == "" || tableName == strings.TrimSuffix("ActionPlanHistory", "History") {
		record, err = auditActionPlanHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("ContactHistory", "History") {
		record, err = auditContactHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("ControlHistory", "History") {
		record, err = auditControlHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("ControlImplementationHistory", "History") {
		record, err = auditControlImplementationHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("ControlObjectiveHistory", "History") {
		record, err = auditControlObjectiveHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("CustomDomainHistory", "History") {
		record, err = auditCustomDomainHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("DocumentDataHistory", "History") {
		record, err = auditDocumentDataHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("EntityHistory", "History") {
		record, err = auditEntityHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("EntityTypeHistory", "History") {
		record, err = auditEntityTypeHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("EventHistory", "History") {
		record, err = auditEventHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("EvidenceHistory", "History") {
		record, err = auditEvidenceHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("FileHistory", "History") {
		record, err = auditFileHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("GroupHistory", "History") {
		record, err = auditGroupHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("GroupMembershipHistory", "History") {
		record, err = auditGroupMembershipHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("GroupSettingHistory", "History") {
		record, err = auditGroupSettingHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("HushHistory", "History") {
		record, err = auditHushHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("IntegrationHistory", "History") {
		record, err = auditIntegrationHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("InternalPolicyHistory", "History") {
		record, err = auditInternalPolicyHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("MappableDomainHistory", "History") {
		record, err = auditMappableDomainHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("MappedControlHistory", "History") {
		record, err = auditMappedControlHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("NarrativeHistory", "History") {
		record, err = auditNarrativeHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("NoteHistory", "History") {
		record, err = auditNoteHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("OrgMembershipHistory", "History") {
		record, err = auditOrgMembershipHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("OrgSubscriptionHistory", "History") {
		record, err = auditOrgSubscriptionHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("OrganizationHistory", "History") {
		record, err = auditOrganizationHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("OrganizationSettingHistory", "History") {
		record, err = auditOrganizationSettingHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("ProcedureHistory", "History") {
		record, err = auditProcedureHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("ProgramHistory", "History") {
		record, err = auditProgramHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("ProgramMembershipHistory", "History") {
		record, err = auditProgramMembershipHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("RiskHistory", "History") {
		record, err = auditRiskHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("StandardHistory", "History") {
		record, err = auditStandardHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("SubcontrolHistory", "History") {
		record, err = auditSubcontrolHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("TaskHistory", "History") {
		record, err = auditTaskHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("TemplateHistory", "History") {
		record, err = auditTemplateHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("UserHistory", "History") {
		record, err = auditUserHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	if tableName == "" || tableName == strings.TrimSuffix("UserSettingHistory", "History") {
		record, err = auditUserSettingHistory(ctx, c.config)
		if err != nil {
			return nil, err
		}

		records = append(records, record...)
	}

	return records, nil
}

type record struct {
	Table       string
	RefId       any
	HistoryTime time.Time
	Operation   history.OpType
	Changes     []Change
	UpdatedBy   string
}

func (r *record) toRow() []string {
	row := make([]string, 6)

	row[0] = r.Table
	row[1] = fmt.Sprintf("%v", r.RefId)
	row[2] = r.HistoryTime.Format(time.ANSIC)
	row[3] = r.Operation.String()
	for i, change := range r.Changes {
		if i == 0 {
			row[4] = change.String(r.Operation)
			continue
		}
		row[4] = fmt.Sprintf("%s\n%s", row[4], change.String(r.Operation))
	}
	if r.UpdatedBy != "" {
		row[5] = fmt.Sprintf("%v", r.UpdatedBy)
	}
	return row
}

type actionplanhistoryref struct {
	Ref string
}

func auditActionPlanHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []actionplanhistoryref
	client := NewActionPlanHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(actionplanhistory.ByRef()).
		Select(actionplanhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(actionplanhistory.Ref(currRef.Ref)).
			Order(actionplanhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "ActionPlanHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&ActionPlanHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&ActionPlanHistory{})
			default:
				if i == 0 {
					record.Changes = (&ActionPlanHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type contacthistoryref struct {
	Ref string
}

func auditContactHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []contacthistoryref
	client := NewContactHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(contacthistory.ByRef()).
		Select(contacthistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(contacthistory.Ref(currRef.Ref)).
			Order(contacthistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "ContactHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&ContactHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&ContactHistory{})
			default:
				if i == 0 {
					record.Changes = (&ContactHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type controlhistoryref struct {
	Ref string
}

func auditControlHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []controlhistoryref
	client := NewControlHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(controlhistory.ByRef()).
		Select(controlhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(controlhistory.Ref(currRef.Ref)).
			Order(controlhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "ControlHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&ControlHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&ControlHistory{})
			default:
				if i == 0 {
					record.Changes = (&ControlHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type controlimplementationhistoryref struct {
	Ref string
}

func auditControlImplementationHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []controlimplementationhistoryref
	client := NewControlImplementationHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(controlimplementationhistory.ByRef()).
		Select(controlimplementationhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(controlimplementationhistory.Ref(currRef.Ref)).
			Order(controlimplementationhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "ControlImplementationHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&ControlImplementationHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&ControlImplementationHistory{})
			default:
				if i == 0 {
					record.Changes = (&ControlImplementationHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type controlobjectivehistoryref struct {
	Ref string
}

func auditControlObjectiveHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []controlobjectivehistoryref
	client := NewControlObjectiveHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(controlobjectivehistory.ByRef()).
		Select(controlobjectivehistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(controlobjectivehistory.Ref(currRef.Ref)).
			Order(controlobjectivehistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "ControlObjectiveHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&ControlObjectiveHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&ControlObjectiveHistory{})
			default:
				if i == 0 {
					record.Changes = (&ControlObjectiveHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type customdomainhistoryref struct {
	Ref string
}

func auditCustomDomainHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []customdomainhistoryref
	client := NewCustomDomainHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(customdomainhistory.ByRef()).
		Select(customdomainhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(customdomainhistory.Ref(currRef.Ref)).
			Order(customdomainhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "CustomDomainHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&CustomDomainHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&CustomDomainHistory{})
			default:
				if i == 0 {
					record.Changes = (&CustomDomainHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type documentdatahistoryref struct {
	Ref string
}

func auditDocumentDataHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []documentdatahistoryref
	client := NewDocumentDataHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(documentdatahistory.ByRef()).
		Select(documentdatahistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(documentdatahistory.Ref(currRef.Ref)).
			Order(documentdatahistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "DocumentDataHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&DocumentDataHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&DocumentDataHistory{})
			default:
				if i == 0 {
					record.Changes = (&DocumentDataHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type entityhistoryref struct {
	Ref string
}

func auditEntityHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []entityhistoryref
	client := NewEntityHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(entityhistory.ByRef()).
		Select(entityhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(entityhistory.Ref(currRef.Ref)).
			Order(entityhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "EntityHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&EntityHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&EntityHistory{})
			default:
				if i == 0 {
					record.Changes = (&EntityHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type entitytypehistoryref struct {
	Ref string
}

func auditEntityTypeHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []entitytypehistoryref
	client := NewEntityTypeHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(entitytypehistory.ByRef()).
		Select(entitytypehistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(entitytypehistory.Ref(currRef.Ref)).
			Order(entitytypehistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "EntityTypeHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&EntityTypeHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&EntityTypeHistory{})
			default:
				if i == 0 {
					record.Changes = (&EntityTypeHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type eventhistoryref struct {
	Ref string
}

func auditEventHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []eventhistoryref
	client := NewEventHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(eventhistory.ByRef()).
		Select(eventhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(eventhistory.Ref(currRef.Ref)).
			Order(eventhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "EventHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&EventHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&EventHistory{})
			default:
				if i == 0 {
					record.Changes = (&EventHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type evidencehistoryref struct {
	Ref string
}

func auditEvidenceHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []evidencehistoryref
	client := NewEvidenceHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(evidencehistory.ByRef()).
		Select(evidencehistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(evidencehistory.Ref(currRef.Ref)).
			Order(evidencehistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "EvidenceHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&EvidenceHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&EvidenceHistory{})
			default:
				if i == 0 {
					record.Changes = (&EvidenceHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type filehistoryref struct {
	Ref string
}

func auditFileHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []filehistoryref
	client := NewFileHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(filehistory.ByRef()).
		Select(filehistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(filehistory.Ref(currRef.Ref)).
			Order(filehistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "FileHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&FileHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&FileHistory{})
			default:
				if i == 0 {
					record.Changes = (&FileHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type grouphistoryref struct {
	Ref string
}

func auditGroupHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []grouphistoryref
	client := NewGroupHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(grouphistory.ByRef()).
		Select(grouphistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(grouphistory.Ref(currRef.Ref)).
			Order(grouphistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "GroupHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&GroupHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&GroupHistory{})
			default:
				if i == 0 {
					record.Changes = (&GroupHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type groupmembershiphistoryref struct {
	Ref string
}

func auditGroupMembershipHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []groupmembershiphistoryref
	client := NewGroupMembershipHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(groupmembershiphistory.ByRef()).
		Select(groupmembershiphistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(groupmembershiphistory.Ref(currRef.Ref)).
			Order(groupmembershiphistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "GroupMembershipHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&GroupMembershipHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&GroupMembershipHistory{})
			default:
				if i == 0 {
					record.Changes = (&GroupMembershipHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type groupsettinghistoryref struct {
	Ref string
}

func auditGroupSettingHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []groupsettinghistoryref
	client := NewGroupSettingHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(groupsettinghistory.ByRef()).
		Select(groupsettinghistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(groupsettinghistory.Ref(currRef.Ref)).
			Order(groupsettinghistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "GroupSettingHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&GroupSettingHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&GroupSettingHistory{})
			default:
				if i == 0 {
					record.Changes = (&GroupSettingHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type hushhistoryref struct {
	Ref string
}

func auditHushHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []hushhistoryref
	client := NewHushHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(hushhistory.ByRef()).
		Select(hushhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(hushhistory.Ref(currRef.Ref)).
			Order(hushhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "HushHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&HushHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&HushHistory{})
			default:
				if i == 0 {
					record.Changes = (&HushHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type integrationhistoryref struct {
	Ref string
}

func auditIntegrationHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []integrationhistoryref
	client := NewIntegrationHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(integrationhistory.ByRef()).
		Select(integrationhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(integrationhistory.Ref(currRef.Ref)).
			Order(integrationhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "IntegrationHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&IntegrationHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&IntegrationHistory{})
			default:
				if i == 0 {
					record.Changes = (&IntegrationHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type internalpolicyhistoryref struct {
	Ref string
}

func auditInternalPolicyHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []internalpolicyhistoryref
	client := NewInternalPolicyHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(internalpolicyhistory.ByRef()).
		Select(internalpolicyhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(internalpolicyhistory.Ref(currRef.Ref)).
			Order(internalpolicyhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "InternalPolicyHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&InternalPolicyHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&InternalPolicyHistory{})
			default:
				if i == 0 {
					record.Changes = (&InternalPolicyHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type mappabledomainhistoryref struct {
	Ref string
}

func auditMappableDomainHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []mappabledomainhistoryref
	client := NewMappableDomainHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(mappabledomainhistory.ByRef()).
		Select(mappabledomainhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(mappabledomainhistory.Ref(currRef.Ref)).
			Order(mappabledomainhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "MappableDomainHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&MappableDomainHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&MappableDomainHistory{})
			default:
				if i == 0 {
					record.Changes = (&MappableDomainHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type mappedcontrolhistoryref struct {
	Ref string
}

func auditMappedControlHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []mappedcontrolhistoryref
	client := NewMappedControlHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(mappedcontrolhistory.ByRef()).
		Select(mappedcontrolhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(mappedcontrolhistory.Ref(currRef.Ref)).
			Order(mappedcontrolhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "MappedControlHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&MappedControlHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&MappedControlHistory{})
			default:
				if i == 0 {
					record.Changes = (&MappedControlHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type narrativehistoryref struct {
	Ref string
}

func auditNarrativeHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []narrativehistoryref
	client := NewNarrativeHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(narrativehistory.ByRef()).
		Select(narrativehistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(narrativehistory.Ref(currRef.Ref)).
			Order(narrativehistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "NarrativeHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&NarrativeHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&NarrativeHistory{})
			default:
				if i == 0 {
					record.Changes = (&NarrativeHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type notehistoryref struct {
	Ref string
}

func auditNoteHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []notehistoryref
	client := NewNoteHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(notehistory.ByRef()).
		Select(notehistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(notehistory.Ref(currRef.Ref)).
			Order(notehistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "NoteHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&NoteHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&NoteHistory{})
			default:
				if i == 0 {
					record.Changes = (&NoteHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type orgmembershiphistoryref struct {
	Ref string
}

func auditOrgMembershipHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []orgmembershiphistoryref
	client := NewOrgMembershipHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(orgmembershiphistory.ByRef()).
		Select(orgmembershiphistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(orgmembershiphistory.Ref(currRef.Ref)).
			Order(orgmembershiphistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "OrgMembershipHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&OrgMembershipHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&OrgMembershipHistory{})
			default:
				if i == 0 {
					record.Changes = (&OrgMembershipHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type orgsubscriptionhistoryref struct {
	Ref string
}

func auditOrgSubscriptionHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []orgsubscriptionhistoryref
	client := NewOrgSubscriptionHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(orgsubscriptionhistory.ByRef()).
		Select(orgsubscriptionhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(orgsubscriptionhistory.Ref(currRef.Ref)).
			Order(orgsubscriptionhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "OrgSubscriptionHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&OrgSubscriptionHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&OrgSubscriptionHistory{})
			default:
				if i == 0 {
					record.Changes = (&OrgSubscriptionHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type organizationhistoryref struct {
	Ref string
}

func auditOrganizationHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []organizationhistoryref
	client := NewOrganizationHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(organizationhistory.ByRef()).
		Select(organizationhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(organizationhistory.Ref(currRef.Ref)).
			Order(organizationhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "OrganizationHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&OrganizationHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&OrganizationHistory{})
			default:
				if i == 0 {
					record.Changes = (&OrganizationHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type organizationsettinghistoryref struct {
	Ref string
}

func auditOrganizationSettingHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []organizationsettinghistoryref
	client := NewOrganizationSettingHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(organizationsettinghistory.ByRef()).
		Select(organizationsettinghistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(organizationsettinghistory.Ref(currRef.Ref)).
			Order(organizationsettinghistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "OrganizationSettingHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&OrganizationSettingHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&OrganizationSettingHistory{})
			default:
				if i == 0 {
					record.Changes = (&OrganizationSettingHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type procedurehistoryref struct {
	Ref string
}

func auditProcedureHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []procedurehistoryref
	client := NewProcedureHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(procedurehistory.ByRef()).
		Select(procedurehistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(procedurehistory.Ref(currRef.Ref)).
			Order(procedurehistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "ProcedureHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&ProcedureHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&ProcedureHistory{})
			default:
				if i == 0 {
					record.Changes = (&ProcedureHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type programhistoryref struct {
	Ref string
}

func auditProgramHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []programhistoryref
	client := NewProgramHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(programhistory.ByRef()).
		Select(programhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(programhistory.Ref(currRef.Ref)).
			Order(programhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "ProgramHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&ProgramHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&ProgramHistory{})
			default:
				if i == 0 {
					record.Changes = (&ProgramHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type programmembershiphistoryref struct {
	Ref string
}

func auditProgramMembershipHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []programmembershiphistoryref
	client := NewProgramMembershipHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(programmembershiphistory.ByRef()).
		Select(programmembershiphistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(programmembershiphistory.Ref(currRef.Ref)).
			Order(programmembershiphistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "ProgramMembershipHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&ProgramMembershipHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&ProgramMembershipHistory{})
			default:
				if i == 0 {
					record.Changes = (&ProgramMembershipHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type riskhistoryref struct {
	Ref string
}

func auditRiskHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []riskhistoryref
	client := NewRiskHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(riskhistory.ByRef()).
		Select(riskhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(riskhistory.Ref(currRef.Ref)).
			Order(riskhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "RiskHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&RiskHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&RiskHistory{})
			default:
				if i == 0 {
					record.Changes = (&RiskHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type standardhistoryref struct {
	Ref string
}

func auditStandardHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []standardhistoryref
	client := NewStandardHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(standardhistory.ByRef()).
		Select(standardhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(standardhistory.Ref(currRef.Ref)).
			Order(standardhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "StandardHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&StandardHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&StandardHistory{})
			default:
				if i == 0 {
					record.Changes = (&StandardHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type subcontrolhistoryref struct {
	Ref string
}

func auditSubcontrolHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []subcontrolhistoryref
	client := NewSubcontrolHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(subcontrolhistory.ByRef()).
		Select(subcontrolhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(subcontrolhistory.Ref(currRef.Ref)).
			Order(subcontrolhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "SubcontrolHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&SubcontrolHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&SubcontrolHistory{})
			default:
				if i == 0 {
					record.Changes = (&SubcontrolHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type taskhistoryref struct {
	Ref string
}

func auditTaskHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []taskhistoryref
	client := NewTaskHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(taskhistory.ByRef()).
		Select(taskhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(taskhistory.Ref(currRef.Ref)).
			Order(taskhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "TaskHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&TaskHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&TaskHistory{})
			default:
				if i == 0 {
					record.Changes = (&TaskHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type templatehistoryref struct {
	Ref string
}

func auditTemplateHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []templatehistoryref
	client := NewTemplateHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(templatehistory.ByRef()).
		Select(templatehistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(templatehistory.Ref(currRef.Ref)).
			Order(templatehistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "TemplateHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&TemplateHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&TemplateHistory{})
			default:
				if i == 0 {
					record.Changes = (&TemplateHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type userhistoryref struct {
	Ref string
}

func auditUserHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []userhistoryref
	client := NewUserHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(userhistory.ByRef()).
		Select(userhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(userhistory.Ref(currRef.Ref)).
			Order(userhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "UserHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&UserHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&UserHistory{})
			default:
				if i == 0 {
					record.Changes = (&UserHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}

type usersettinghistoryref struct {
	Ref string
}

func auditUserSettingHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []usersettinghistoryref
	client := NewUserSettingHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(usersettinghistory.ByRef()).
		Select(usersettinghistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(usersettinghistory.Ref(currRef.Ref)).
			Order(usersettinghistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			record := record{
				Table:       "UserSettingHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case history.OpTypeInsert:
				record.Changes = (&UserSettingHistory{}).changes(curr)
			case history.OpTypeDelete:
				record.Changes = curr.changes(&UserSettingHistory{})
			default:
				if i == 0 {
					record.Changes = (&UserSettingHistory{}).changes(curr)
				} else {
					record.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, record.toRow())
		}
	}
	return records, nil
}
