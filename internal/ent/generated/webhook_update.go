// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/webhook"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// WebhookUpdate is the builder for updating Webhook entities.
type WebhookUpdate struct {
	config
	hooks     []Hook
	mutation  *WebhookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WebhookUpdate builder.
func (wu *WebhookUpdate) Where(ps ...predicate.Webhook) *WebhookUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WebhookUpdate) SetUpdatedAt(t time.Time) *WebhookUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wu *WebhookUpdate) ClearUpdatedAt() *WebhookUpdate {
	wu.mutation.ClearUpdatedAt()
	return wu
}

// SetUpdatedBy sets the "updated_by" field.
func (wu *WebhookUpdate) SetUpdatedBy(s string) *WebhookUpdate {
	wu.mutation.SetUpdatedBy(s)
	return wu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableUpdatedBy(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetUpdatedBy(*s)
	}
	return wu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (wu *WebhookUpdate) ClearUpdatedBy() *WebhookUpdate {
	wu.mutation.ClearUpdatedBy()
	return wu
}

// SetTags sets the "tags" field.
func (wu *WebhookUpdate) SetTags(s []string) *WebhookUpdate {
	wu.mutation.SetTags(s)
	return wu
}

// AppendTags appends s to the "tags" field.
func (wu *WebhookUpdate) AppendTags(s []string) *WebhookUpdate {
	wu.mutation.AppendTags(s)
	return wu
}

// ClearTags clears the value of the "tags" field.
func (wu *WebhookUpdate) ClearTags() *WebhookUpdate {
	wu.mutation.ClearTags()
	return wu
}

// SetDeletedAt sets the "deleted_at" field.
func (wu *WebhookUpdate) SetDeletedAt(t time.Time) *WebhookUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableDeletedAt(t *time.Time) *WebhookUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wu *WebhookUpdate) ClearDeletedAt() *WebhookUpdate {
	wu.mutation.ClearDeletedAt()
	return wu
}

// SetDeletedBy sets the "deleted_by" field.
func (wu *WebhookUpdate) SetDeletedBy(s string) *WebhookUpdate {
	wu.mutation.SetDeletedBy(s)
	return wu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableDeletedBy(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetDeletedBy(*s)
	}
	return wu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (wu *WebhookUpdate) ClearDeletedBy() *WebhookUpdate {
	wu.mutation.ClearDeletedBy()
	return wu
}

// SetOwnerID sets the "owner_id" field.
func (wu *WebhookUpdate) SetOwnerID(s string) *WebhookUpdate {
	wu.mutation.SetOwnerID(s)
	return wu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableOwnerID(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetOwnerID(*s)
	}
	return wu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (wu *WebhookUpdate) ClearOwnerID() *WebhookUpdate {
	wu.mutation.ClearOwnerID()
	return wu
}

// SetName sets the "name" field.
func (wu *WebhookUpdate) SetName(s string) *WebhookUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableName(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetDescription sets the "description" field.
func (wu *WebhookUpdate) SetDescription(s string) *WebhookUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableDescription(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetDescription(*s)
	}
	return wu
}

// ClearDescription clears the value of the "description" field.
func (wu *WebhookUpdate) ClearDescription() *WebhookUpdate {
	wu.mutation.ClearDescription()
	return wu
}

// SetDestinationURL sets the "destination_url" field.
func (wu *WebhookUpdate) SetDestinationURL(s string) *WebhookUpdate {
	wu.mutation.SetDestinationURL(s)
	return wu
}

// SetNillableDestinationURL sets the "destination_url" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableDestinationURL(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetDestinationURL(*s)
	}
	return wu
}

// SetEnabled sets the "enabled" field.
func (wu *WebhookUpdate) SetEnabled(b bool) *WebhookUpdate {
	wu.mutation.SetEnabled(b)
	return wu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableEnabled(b *bool) *WebhookUpdate {
	if b != nil {
		wu.SetEnabled(*b)
	}
	return wu
}

// SetCallback sets the "callback" field.
func (wu *WebhookUpdate) SetCallback(s string) *WebhookUpdate {
	wu.mutation.SetCallback(s)
	return wu
}

// SetNillableCallback sets the "callback" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableCallback(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetCallback(*s)
	}
	return wu
}

// ClearCallback clears the value of the "callback" field.
func (wu *WebhookUpdate) ClearCallback() *WebhookUpdate {
	wu.mutation.ClearCallback()
	return wu
}

// SetExpiresAt sets the "expires_at" field.
func (wu *WebhookUpdate) SetExpiresAt(t time.Time) *WebhookUpdate {
	wu.mutation.SetExpiresAt(t)
	return wu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableExpiresAt(t *time.Time) *WebhookUpdate {
	if t != nil {
		wu.SetExpiresAt(*t)
	}
	return wu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (wu *WebhookUpdate) ClearExpiresAt() *WebhookUpdate {
	wu.mutation.ClearExpiresAt()
	return wu
}

// SetSecret sets the "secret" field.
func (wu *WebhookUpdate) SetSecret(b []byte) *WebhookUpdate {
	wu.mutation.SetSecret(b)
	return wu
}

// ClearSecret clears the value of the "secret" field.
func (wu *WebhookUpdate) ClearSecret() *WebhookUpdate {
	wu.mutation.ClearSecret()
	return wu
}

// SetFailures sets the "failures" field.
func (wu *WebhookUpdate) SetFailures(i int) *WebhookUpdate {
	wu.mutation.ResetFailures()
	wu.mutation.SetFailures(i)
	return wu
}

// SetNillableFailures sets the "failures" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableFailures(i *int) *WebhookUpdate {
	if i != nil {
		wu.SetFailures(*i)
	}
	return wu
}

// AddFailures adds i to the "failures" field.
func (wu *WebhookUpdate) AddFailures(i int) *WebhookUpdate {
	wu.mutation.AddFailures(i)
	return wu
}

// ClearFailures clears the value of the "failures" field.
func (wu *WebhookUpdate) ClearFailures() *WebhookUpdate {
	wu.mutation.ClearFailures()
	return wu
}

// SetLastError sets the "last_error" field.
func (wu *WebhookUpdate) SetLastError(s string) *WebhookUpdate {
	wu.mutation.SetLastError(s)
	return wu
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableLastError(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetLastError(*s)
	}
	return wu
}

// ClearLastError clears the value of the "last_error" field.
func (wu *WebhookUpdate) ClearLastError() *WebhookUpdate {
	wu.mutation.ClearLastError()
	return wu
}

// SetLastResponse sets the "last_response" field.
func (wu *WebhookUpdate) SetLastResponse(s string) *WebhookUpdate {
	wu.mutation.SetLastResponse(s)
	return wu
}

// SetNillableLastResponse sets the "last_response" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableLastResponse(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetLastResponse(*s)
	}
	return wu
}

// ClearLastResponse clears the value of the "last_response" field.
func (wu *WebhookUpdate) ClearLastResponse() *WebhookUpdate {
	wu.mutation.ClearLastResponse()
	return wu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (wu *WebhookUpdate) SetOwner(o *Organization) *WebhookUpdate {
	return wu.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (wu *WebhookUpdate) AddEventIDs(ids ...string) *WebhookUpdate {
	wu.mutation.AddEventIDs(ids...)
	return wu
}

// AddEvents adds the "events" edges to the Event entity.
func (wu *WebhookUpdate) AddEvents(e ...*Event) *WebhookUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wu.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (wu *WebhookUpdate) AddIntegrationIDs(ids ...string) *WebhookUpdate {
	wu.mutation.AddIntegrationIDs(ids...)
	return wu
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (wu *WebhookUpdate) AddIntegrations(i ...*Integration) *WebhookUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wu.AddIntegrationIDs(ids...)
}

// Mutation returns the WebhookMutation object of the builder.
func (wu *WebhookUpdate) Mutation() *WebhookMutation {
	return wu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (wu *WebhookUpdate) ClearOwner() *WebhookUpdate {
	wu.mutation.ClearOwner()
	return wu
}

// ClearEvents clears all "events" edges to the Event entity.
func (wu *WebhookUpdate) ClearEvents() *WebhookUpdate {
	wu.mutation.ClearEvents()
	return wu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (wu *WebhookUpdate) RemoveEventIDs(ids ...string) *WebhookUpdate {
	wu.mutation.RemoveEventIDs(ids...)
	return wu
}

// RemoveEvents removes "events" edges to Event entities.
func (wu *WebhookUpdate) RemoveEvents(e ...*Event) *WebhookUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wu.RemoveEventIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (wu *WebhookUpdate) ClearIntegrations() *WebhookUpdate {
	wu.mutation.ClearIntegrations()
	return wu
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (wu *WebhookUpdate) RemoveIntegrationIDs(ids ...string) *WebhookUpdate {
	wu.mutation.RemoveIntegrationIDs(ids...)
	return wu
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (wu *WebhookUpdate) RemoveIntegrations(i ...*Integration) *WebhookUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wu.RemoveIntegrationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WebhookUpdate) Save(ctx context.Context) (int, error) {
	if err := wu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WebhookUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WebhookUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WebhookUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WebhookUpdate) defaults() error {
	if _, ok := wu.mutation.UpdatedAt(); !ok && !wu.mutation.UpdatedAtCleared() {
		if webhook.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized webhook.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := webhook.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wu *WebhookUpdate) check() error {
	if v, ok := wu.mutation.Name(); ok {
		if err := webhook.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Webhook.name": %w`, err)}
		}
	}
	if v, ok := wu.mutation.DestinationURL(); ok {
		if err := webhook.DestinationURLValidator(v); err != nil {
			return &ValidationError{Name: "destination_url", err: fmt.Errorf(`generated: validator failed for field "Webhook.destination_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WebhookUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WebhookUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WebhookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(webhook.Table, webhook.Columns, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wu.mutation.CreatedAtCleared() {
		_spec.ClearField(webhook.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.UpdatedAtCleared() {
		_spec.ClearField(webhook.FieldUpdatedAt, field.TypeTime)
	}
	if wu.mutation.CreatedByCleared() {
		_spec.ClearField(webhook.FieldCreatedBy, field.TypeString)
	}
	if value, ok := wu.mutation.UpdatedBy(); ok {
		_spec.SetField(webhook.FieldUpdatedBy, field.TypeString, value)
	}
	if wu.mutation.UpdatedByCleared() {
		_spec.ClearField(webhook.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := wu.mutation.Tags(); ok {
		_spec.SetField(webhook.FieldTags, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, webhook.FieldTags, value)
		})
	}
	if wu.mutation.TagsCleared() {
		_spec.ClearField(webhook.FieldTags, field.TypeJSON)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(webhook.FieldDeletedAt, field.TypeTime, value)
	}
	if wu.mutation.DeletedAtCleared() {
		_spec.ClearField(webhook.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.DeletedBy(); ok {
		_spec.SetField(webhook.FieldDeletedBy, field.TypeString, value)
	}
	if wu.mutation.DeletedByCleared() {
		_spec.ClearField(webhook.FieldDeletedBy, field.TypeString)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(webhook.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(webhook.FieldDescription, field.TypeString, value)
	}
	if wu.mutation.DescriptionCleared() {
		_spec.ClearField(webhook.FieldDescription, field.TypeString)
	}
	if value, ok := wu.mutation.DestinationURL(); ok {
		_spec.SetField(webhook.FieldDestinationURL, field.TypeString, value)
	}
	if value, ok := wu.mutation.Enabled(); ok {
		_spec.SetField(webhook.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := wu.mutation.Callback(); ok {
		_spec.SetField(webhook.FieldCallback, field.TypeString, value)
	}
	if wu.mutation.CallbackCleared() {
		_spec.ClearField(webhook.FieldCallback, field.TypeString)
	}
	if value, ok := wu.mutation.ExpiresAt(); ok {
		_spec.SetField(webhook.FieldExpiresAt, field.TypeTime, value)
	}
	if wu.mutation.ExpiresAtCleared() {
		_spec.ClearField(webhook.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := wu.mutation.Secret(); ok {
		_spec.SetField(webhook.FieldSecret, field.TypeBytes, value)
	}
	if wu.mutation.SecretCleared() {
		_spec.ClearField(webhook.FieldSecret, field.TypeBytes)
	}
	if value, ok := wu.mutation.Failures(); ok {
		_spec.SetField(webhook.FieldFailures, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedFailures(); ok {
		_spec.AddField(webhook.FieldFailures, field.TypeInt, value)
	}
	if wu.mutation.FailuresCleared() {
		_spec.ClearField(webhook.FieldFailures, field.TypeInt)
	}
	if value, ok := wu.mutation.LastError(); ok {
		_spec.SetField(webhook.FieldLastError, field.TypeString, value)
	}
	if wu.mutation.LastErrorCleared() {
		_spec.ClearField(webhook.FieldLastError, field.TypeString)
	}
	if value, ok := wu.mutation.LastResponse(); ok {
		_spec.SetField(webhook.FieldLastResponse, field.TypeString, value)
	}
	if wu.mutation.LastResponseCleared() {
		_spec.ClearField(webhook.FieldLastResponse, field.TypeString)
	}
	if wu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OwnerTable,
			Columns: []string{webhook.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.Webhook
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OwnerTable,
			Columns: []string{webhook.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.Webhook
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: webhook.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WebhookEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !wu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: webhook.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WebhookEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: webhook.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WebhookEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   webhook.IntegrationsTable,
			Columns: webhook.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.IntegrationWebhooks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !wu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   webhook.IntegrationsTable,
			Columns: webhook.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.IntegrationWebhooks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   webhook.IntegrationsTable,
			Columns: webhook.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.IntegrationWebhooks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = wu.schemaConfig.Webhook
	ctx = internal.NewSchemaConfigContext(ctx, wu.schemaConfig)
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WebhookUpdateOne is the builder for updating a single Webhook entity.
type WebhookUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WebhookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WebhookUpdateOne) SetUpdatedAt(t time.Time) *WebhookUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wuo *WebhookUpdateOne) ClearUpdatedAt() *WebhookUpdateOne {
	wuo.mutation.ClearUpdatedAt()
	return wuo
}

// SetUpdatedBy sets the "updated_by" field.
func (wuo *WebhookUpdateOne) SetUpdatedBy(s string) *WebhookUpdateOne {
	wuo.mutation.SetUpdatedBy(s)
	return wuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableUpdatedBy(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetUpdatedBy(*s)
	}
	return wuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (wuo *WebhookUpdateOne) ClearUpdatedBy() *WebhookUpdateOne {
	wuo.mutation.ClearUpdatedBy()
	return wuo
}

// SetTags sets the "tags" field.
func (wuo *WebhookUpdateOne) SetTags(s []string) *WebhookUpdateOne {
	wuo.mutation.SetTags(s)
	return wuo
}

// AppendTags appends s to the "tags" field.
func (wuo *WebhookUpdateOne) AppendTags(s []string) *WebhookUpdateOne {
	wuo.mutation.AppendTags(s)
	return wuo
}

// ClearTags clears the value of the "tags" field.
func (wuo *WebhookUpdateOne) ClearTags() *WebhookUpdateOne {
	wuo.mutation.ClearTags()
	return wuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wuo *WebhookUpdateOne) SetDeletedAt(t time.Time) *WebhookUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableDeletedAt(t *time.Time) *WebhookUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wuo *WebhookUpdateOne) ClearDeletedAt() *WebhookUpdateOne {
	wuo.mutation.ClearDeletedAt()
	return wuo
}

// SetDeletedBy sets the "deleted_by" field.
func (wuo *WebhookUpdateOne) SetDeletedBy(s string) *WebhookUpdateOne {
	wuo.mutation.SetDeletedBy(s)
	return wuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableDeletedBy(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetDeletedBy(*s)
	}
	return wuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (wuo *WebhookUpdateOne) ClearDeletedBy() *WebhookUpdateOne {
	wuo.mutation.ClearDeletedBy()
	return wuo
}

// SetOwnerID sets the "owner_id" field.
func (wuo *WebhookUpdateOne) SetOwnerID(s string) *WebhookUpdateOne {
	wuo.mutation.SetOwnerID(s)
	return wuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableOwnerID(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetOwnerID(*s)
	}
	return wuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (wuo *WebhookUpdateOne) ClearOwnerID() *WebhookUpdateOne {
	wuo.mutation.ClearOwnerID()
	return wuo
}

// SetName sets the "name" field.
func (wuo *WebhookUpdateOne) SetName(s string) *WebhookUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableName(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WebhookUpdateOne) SetDescription(s string) *WebhookUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableDescription(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetDescription(*s)
	}
	return wuo
}

// ClearDescription clears the value of the "description" field.
func (wuo *WebhookUpdateOne) ClearDescription() *WebhookUpdateOne {
	wuo.mutation.ClearDescription()
	return wuo
}

// SetDestinationURL sets the "destination_url" field.
func (wuo *WebhookUpdateOne) SetDestinationURL(s string) *WebhookUpdateOne {
	wuo.mutation.SetDestinationURL(s)
	return wuo
}

// SetNillableDestinationURL sets the "destination_url" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableDestinationURL(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetDestinationURL(*s)
	}
	return wuo
}

// SetEnabled sets the "enabled" field.
func (wuo *WebhookUpdateOne) SetEnabled(b bool) *WebhookUpdateOne {
	wuo.mutation.SetEnabled(b)
	return wuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableEnabled(b *bool) *WebhookUpdateOne {
	if b != nil {
		wuo.SetEnabled(*b)
	}
	return wuo
}

// SetCallback sets the "callback" field.
func (wuo *WebhookUpdateOne) SetCallback(s string) *WebhookUpdateOne {
	wuo.mutation.SetCallback(s)
	return wuo
}

// SetNillableCallback sets the "callback" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableCallback(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetCallback(*s)
	}
	return wuo
}

// ClearCallback clears the value of the "callback" field.
func (wuo *WebhookUpdateOne) ClearCallback() *WebhookUpdateOne {
	wuo.mutation.ClearCallback()
	return wuo
}

// SetExpiresAt sets the "expires_at" field.
func (wuo *WebhookUpdateOne) SetExpiresAt(t time.Time) *WebhookUpdateOne {
	wuo.mutation.SetExpiresAt(t)
	return wuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableExpiresAt(t *time.Time) *WebhookUpdateOne {
	if t != nil {
		wuo.SetExpiresAt(*t)
	}
	return wuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (wuo *WebhookUpdateOne) ClearExpiresAt() *WebhookUpdateOne {
	wuo.mutation.ClearExpiresAt()
	return wuo
}

// SetSecret sets the "secret" field.
func (wuo *WebhookUpdateOne) SetSecret(b []byte) *WebhookUpdateOne {
	wuo.mutation.SetSecret(b)
	return wuo
}

// ClearSecret clears the value of the "secret" field.
func (wuo *WebhookUpdateOne) ClearSecret() *WebhookUpdateOne {
	wuo.mutation.ClearSecret()
	return wuo
}

// SetFailures sets the "failures" field.
func (wuo *WebhookUpdateOne) SetFailures(i int) *WebhookUpdateOne {
	wuo.mutation.ResetFailures()
	wuo.mutation.SetFailures(i)
	return wuo
}

// SetNillableFailures sets the "failures" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableFailures(i *int) *WebhookUpdateOne {
	if i != nil {
		wuo.SetFailures(*i)
	}
	return wuo
}

// AddFailures adds i to the "failures" field.
func (wuo *WebhookUpdateOne) AddFailures(i int) *WebhookUpdateOne {
	wuo.mutation.AddFailures(i)
	return wuo
}

// ClearFailures clears the value of the "failures" field.
func (wuo *WebhookUpdateOne) ClearFailures() *WebhookUpdateOne {
	wuo.mutation.ClearFailures()
	return wuo
}

// SetLastError sets the "last_error" field.
func (wuo *WebhookUpdateOne) SetLastError(s string) *WebhookUpdateOne {
	wuo.mutation.SetLastError(s)
	return wuo
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableLastError(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetLastError(*s)
	}
	return wuo
}

// ClearLastError clears the value of the "last_error" field.
func (wuo *WebhookUpdateOne) ClearLastError() *WebhookUpdateOne {
	wuo.mutation.ClearLastError()
	return wuo
}

// SetLastResponse sets the "last_response" field.
func (wuo *WebhookUpdateOne) SetLastResponse(s string) *WebhookUpdateOne {
	wuo.mutation.SetLastResponse(s)
	return wuo
}

// SetNillableLastResponse sets the "last_response" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableLastResponse(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetLastResponse(*s)
	}
	return wuo
}

// ClearLastResponse clears the value of the "last_response" field.
func (wuo *WebhookUpdateOne) ClearLastResponse() *WebhookUpdateOne {
	wuo.mutation.ClearLastResponse()
	return wuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (wuo *WebhookUpdateOne) SetOwner(o *Organization) *WebhookUpdateOne {
	return wuo.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (wuo *WebhookUpdateOne) AddEventIDs(ids ...string) *WebhookUpdateOne {
	wuo.mutation.AddEventIDs(ids...)
	return wuo
}

// AddEvents adds the "events" edges to the Event entity.
func (wuo *WebhookUpdateOne) AddEvents(e ...*Event) *WebhookUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wuo.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (wuo *WebhookUpdateOne) AddIntegrationIDs(ids ...string) *WebhookUpdateOne {
	wuo.mutation.AddIntegrationIDs(ids...)
	return wuo
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (wuo *WebhookUpdateOne) AddIntegrations(i ...*Integration) *WebhookUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wuo.AddIntegrationIDs(ids...)
}

// Mutation returns the WebhookMutation object of the builder.
func (wuo *WebhookUpdateOne) Mutation() *WebhookMutation {
	return wuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (wuo *WebhookUpdateOne) ClearOwner() *WebhookUpdateOne {
	wuo.mutation.ClearOwner()
	return wuo
}

// ClearEvents clears all "events" edges to the Event entity.
func (wuo *WebhookUpdateOne) ClearEvents() *WebhookUpdateOne {
	wuo.mutation.ClearEvents()
	return wuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (wuo *WebhookUpdateOne) RemoveEventIDs(ids ...string) *WebhookUpdateOne {
	wuo.mutation.RemoveEventIDs(ids...)
	return wuo
}

// RemoveEvents removes "events" edges to Event entities.
func (wuo *WebhookUpdateOne) RemoveEvents(e ...*Event) *WebhookUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wuo.RemoveEventIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (wuo *WebhookUpdateOne) ClearIntegrations() *WebhookUpdateOne {
	wuo.mutation.ClearIntegrations()
	return wuo
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (wuo *WebhookUpdateOne) RemoveIntegrationIDs(ids ...string) *WebhookUpdateOne {
	wuo.mutation.RemoveIntegrationIDs(ids...)
	return wuo
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (wuo *WebhookUpdateOne) RemoveIntegrations(i ...*Integration) *WebhookUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wuo.RemoveIntegrationIDs(ids...)
}

// Where appends a list predicates to the WebhookUpdate builder.
func (wuo *WebhookUpdateOne) Where(ps ...predicate.Webhook) *WebhookUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WebhookUpdateOne) Select(field string, fields ...string) *WebhookUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Webhook entity.
func (wuo *WebhookUpdateOne) Save(ctx context.Context) (*Webhook, error) {
	if err := wuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WebhookUpdateOne) SaveX(ctx context.Context) *Webhook {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WebhookUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WebhookUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WebhookUpdateOne) defaults() error {
	if _, ok := wuo.mutation.UpdatedAt(); !ok && !wuo.mutation.UpdatedAtCleared() {
		if webhook.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized webhook.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := webhook.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WebhookUpdateOne) check() error {
	if v, ok := wuo.mutation.Name(); ok {
		if err := webhook.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Webhook.name": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.DestinationURL(); ok {
		if err := webhook.DestinationURLValidator(v); err != nil {
			return &ValidationError{Name: "destination_url", err: fmt.Errorf(`generated: validator failed for field "Webhook.destination_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WebhookUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WebhookUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WebhookUpdateOne) sqlSave(ctx context.Context) (_node *Webhook, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(webhook.Table, webhook.Columns, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Webhook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webhook.FieldID)
		for _, f := range fields {
			if !webhook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != webhook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wuo.mutation.CreatedAtCleared() {
		_spec.ClearField(webhook.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(webhook.FieldUpdatedAt, field.TypeTime)
	}
	if wuo.mutation.CreatedByCleared() {
		_spec.ClearField(webhook.FieldCreatedBy, field.TypeString)
	}
	if value, ok := wuo.mutation.UpdatedBy(); ok {
		_spec.SetField(webhook.FieldUpdatedBy, field.TypeString, value)
	}
	if wuo.mutation.UpdatedByCleared() {
		_spec.ClearField(webhook.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := wuo.mutation.Tags(); ok {
		_spec.SetField(webhook.FieldTags, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, webhook.FieldTags, value)
		})
	}
	if wuo.mutation.TagsCleared() {
		_spec.ClearField(webhook.FieldTags, field.TypeJSON)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(webhook.FieldDeletedAt, field.TypeTime, value)
	}
	if wuo.mutation.DeletedAtCleared() {
		_spec.ClearField(webhook.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.DeletedBy(); ok {
		_spec.SetField(webhook.FieldDeletedBy, field.TypeString, value)
	}
	if wuo.mutation.DeletedByCleared() {
		_spec.ClearField(webhook.FieldDeletedBy, field.TypeString)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(webhook.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(webhook.FieldDescription, field.TypeString, value)
	}
	if wuo.mutation.DescriptionCleared() {
		_spec.ClearField(webhook.FieldDescription, field.TypeString)
	}
	if value, ok := wuo.mutation.DestinationURL(); ok {
		_spec.SetField(webhook.FieldDestinationURL, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Enabled(); ok {
		_spec.SetField(webhook.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := wuo.mutation.Callback(); ok {
		_spec.SetField(webhook.FieldCallback, field.TypeString, value)
	}
	if wuo.mutation.CallbackCleared() {
		_spec.ClearField(webhook.FieldCallback, field.TypeString)
	}
	if value, ok := wuo.mutation.ExpiresAt(); ok {
		_spec.SetField(webhook.FieldExpiresAt, field.TypeTime, value)
	}
	if wuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(webhook.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.Secret(); ok {
		_spec.SetField(webhook.FieldSecret, field.TypeBytes, value)
	}
	if wuo.mutation.SecretCleared() {
		_spec.ClearField(webhook.FieldSecret, field.TypeBytes)
	}
	if value, ok := wuo.mutation.Failures(); ok {
		_spec.SetField(webhook.FieldFailures, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedFailures(); ok {
		_spec.AddField(webhook.FieldFailures, field.TypeInt, value)
	}
	if wuo.mutation.FailuresCleared() {
		_spec.ClearField(webhook.FieldFailures, field.TypeInt)
	}
	if value, ok := wuo.mutation.LastError(); ok {
		_spec.SetField(webhook.FieldLastError, field.TypeString, value)
	}
	if wuo.mutation.LastErrorCleared() {
		_spec.ClearField(webhook.FieldLastError, field.TypeString)
	}
	if value, ok := wuo.mutation.LastResponse(); ok {
		_spec.SetField(webhook.FieldLastResponse, field.TypeString, value)
	}
	if wuo.mutation.LastResponseCleared() {
		_spec.ClearField(webhook.FieldLastResponse, field.TypeString)
	}
	if wuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OwnerTable,
			Columns: []string{webhook.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.Webhook
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OwnerTable,
			Columns: []string{webhook.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.Webhook
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: webhook.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WebhookEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !wuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: webhook.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WebhookEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: webhook.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WebhookEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   webhook.IntegrationsTable,
			Columns: webhook.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.IntegrationWebhooks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !wuo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   webhook.IntegrationsTable,
			Columns: webhook.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.IntegrationWebhooks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   webhook.IntegrationsTable,
			Columns: webhook.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.IntegrationWebhooks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = wuo.schemaConfig.Webhook
	ctx = internal.NewSchemaConfigContext(ctx, wuo.schemaConfig)
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Webhook{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
