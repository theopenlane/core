// Code generated by ent, DO NOT EDIT.

package mappedcontrol

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the mappedcontrol type in the database.
	Label = "mapped_control"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldSystemOwned holds the string denoting the system_owned field in the database.
	FieldSystemOwned = "system_owned"
	// FieldInternalNotes holds the string denoting the internal_notes field in the database.
	FieldInternalNotes = "internal_notes"
	// FieldSystemInternalID holds the string denoting the system_internal_id field in the database.
	FieldSystemInternalID = "system_internal_id"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldMappingType holds the string denoting the mapping_type field in the database.
	FieldMappingType = "mapping_type"
	// FieldRelation holds the string denoting the relation field in the database.
	FieldRelation = "relation"
	// FieldConfidence holds the string denoting the confidence field in the database.
	FieldConfidence = "confidence"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeBlockedGroups holds the string denoting the blocked_groups edge name in mutations.
	EdgeBlockedGroups = "blocked_groups"
	// EdgeEditors holds the string denoting the editors edge name in mutations.
	EdgeEditors = "editors"
	// EdgeFromControls holds the string denoting the from_controls edge name in mutations.
	EdgeFromControls = "from_controls"
	// EdgeToControls holds the string denoting the to_controls edge name in mutations.
	EdgeToControls = "to_controls"
	// EdgeFromSubcontrols holds the string denoting the from_subcontrols edge name in mutations.
	EdgeFromSubcontrols = "from_subcontrols"
	// EdgeToSubcontrols holds the string denoting the to_subcontrols edge name in mutations.
	EdgeToSubcontrols = "to_subcontrols"
	// Table holds the table name of the mappedcontrol in the database.
	Table = "mapped_controls"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "mapped_controls"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// BlockedGroupsTable is the table that holds the blocked_groups relation/edge. The primary key declared below.
	BlockedGroupsTable = "mapped_control_blocked_groups"
	// BlockedGroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	BlockedGroupsInverseTable = "groups"
	// EditorsTable is the table that holds the editors relation/edge. The primary key declared below.
	EditorsTable = "mapped_control_editors"
	// EditorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	EditorsInverseTable = "groups"
	// FromControlsTable is the table that holds the from_controls relation/edge. The primary key declared below.
	FromControlsTable = "mapped_control_from_controls"
	// FromControlsInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	FromControlsInverseTable = "controls"
	// ToControlsTable is the table that holds the to_controls relation/edge. The primary key declared below.
	ToControlsTable = "mapped_control_to_controls"
	// ToControlsInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ToControlsInverseTable = "controls"
	// FromSubcontrolsTable is the table that holds the from_subcontrols relation/edge. The primary key declared below.
	FromSubcontrolsTable = "mapped_control_from_subcontrols"
	// FromSubcontrolsInverseTable is the table name for the Subcontrol entity.
	// It exists in this package in order to avoid circular dependency with the "subcontrol" package.
	FromSubcontrolsInverseTable = "subcontrols"
	// ToSubcontrolsTable is the table that holds the to_subcontrols relation/edge. The primary key declared below.
	ToSubcontrolsTable = "mapped_control_to_subcontrols"
	// ToSubcontrolsInverseTable is the table name for the Subcontrol entity.
	// It exists in this package in order to avoid circular dependency with the "subcontrol" package.
	ToSubcontrolsInverseTable = "subcontrols"
)

// Columns holds all SQL columns for mappedcontrol fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldSystemOwned,
	FieldInternalNotes,
	FieldSystemInternalID,
	FieldOwnerID,
	FieldMappingType,
	FieldRelation,
	FieldConfidence,
	FieldSource,
}

var (
	// BlockedGroupsPrimaryKey and BlockedGroupsColumn2 are the table columns denoting the
	// primary key for the blocked_groups relation (M2M).
	BlockedGroupsPrimaryKey = []string{"mapped_control_id", "group_id"}
	// EditorsPrimaryKey and EditorsColumn2 are the table columns denoting the
	// primary key for the editors relation (M2M).
	EditorsPrimaryKey = []string{"mapped_control_id", "group_id"}
	// FromControlsPrimaryKey and FromControlsColumn2 are the table columns denoting the
	// primary key for the from_controls relation (M2M).
	FromControlsPrimaryKey = []string{"mapped_control_id", "control_id"}
	// ToControlsPrimaryKey and ToControlsColumn2 are the table columns denoting the
	// primary key for the to_controls relation (M2M).
	ToControlsPrimaryKey = []string{"mapped_control_id", "control_id"}
	// FromSubcontrolsPrimaryKey and FromSubcontrolsColumn2 are the table columns denoting the
	// primary key for the from_subcontrols relation (M2M).
	FromSubcontrolsPrimaryKey = []string{"mapped_control_id", "subcontrol_id"}
	// ToSubcontrolsPrimaryKey and ToSubcontrolsColumn2 are the table columns denoting the
	// primary key for the to_subcontrols relation (M2M).
	ToSubcontrolsPrimaryKey = []string{"mapped_control_id", "subcontrol_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [10]ent.Hook
	Interceptors [3]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultSystemOwned holds the default value on creation for the "system_owned" field.
	DefaultSystemOwned bool
	// ConfidenceValidator is a validator for the "confidence" field. It is called by the builders before save.
	ConfidenceValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultMappingType enums.MappingType = "EQUAL"

// MappingTypeValidator is a validator for the "mapping_type" field enum values. It is called by the builders before save.
func MappingTypeValidator(mt enums.MappingType) error {
	switch mt.String() {
	case "EQUAL", "SUPERSET", "SUBSET", "INTERSECT", "PARTIAL":
		return nil
	default:
		return fmt.Errorf("mappedcontrol: invalid enum value for mapping_type field: %q", mt)
	}
}

const DefaultSource enums.MappingSource = "MANUAL"

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s enums.MappingSource) error {
	switch s.String() {
	case "MANUAL", "SUGGESTED", "IMPORTED":
		return nil
	default:
		return fmt.Errorf("mappedcontrol: invalid enum value for source field: %q", s)
	}
}

// OrderOption defines the ordering options for the MappedControl queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// BySystemOwned orders the results by the system_owned field.
func BySystemOwned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemOwned, opts...).ToFunc()
}

// ByInternalNotes orders the results by the internal_notes field.
func ByInternalNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalNotes, opts...).ToFunc()
}

// BySystemInternalID orders the results by the system_internal_id field.
func BySystemInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemInternalID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByMappingType orders the results by the mapping_type field.
func ByMappingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingType, opts...).ToFunc()
}

// ByRelation orders the results by the relation field.
func ByRelation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelation, opts...).ToFunc()
}

// ByConfidence orders the results by the confidence field.
func ByConfidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfidence, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockedGroupsCount orders the results by blocked_groups count.
func ByBlockedGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlockedGroupsStep(), opts...)
	}
}

// ByBlockedGroups orders the results by blocked_groups terms.
func ByBlockedGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockedGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEditorsCount orders the results by editors count.
func ByEditorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEditorsStep(), opts...)
	}
}

// ByEditors orders the results by editors terms.
func ByEditors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEditorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFromControlsCount orders the results by from_controls count.
func ByFromControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFromControlsStep(), opts...)
	}
}

// ByFromControls orders the results by from_controls terms.
func ByFromControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByToControlsCount orders the results by to_controls count.
func ByToControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newToControlsStep(), opts...)
	}
}

// ByToControls orders the results by to_controls terms.
func ByToControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFromSubcontrolsCount orders the results by from_subcontrols count.
func ByFromSubcontrolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFromSubcontrolsStep(), opts...)
	}
}

// ByFromSubcontrols orders the results by from_subcontrols terms.
func ByFromSubcontrols(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromSubcontrolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByToSubcontrolsCount orders the results by to_subcontrols count.
func ByToSubcontrolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newToSubcontrolsStep(), opts...)
	}
}

// ByToSubcontrols orders the results by to_subcontrols terms.
func ByToSubcontrols(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToSubcontrolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newBlockedGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockedGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BlockedGroupsTable, BlockedGroupsPrimaryKey...),
	)
}
func newEditorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EditorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EditorsTable, EditorsPrimaryKey...),
	)
}
func newFromControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FromControlsTable, FromControlsPrimaryKey...),
	)
}
func newToControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ToControlsTable, ToControlsPrimaryKey...),
	)
}
func newFromSubcontrolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromSubcontrolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FromSubcontrolsTable, FromSubcontrolsPrimaryKey...),
	)
}
func newToSubcontrolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToSubcontrolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ToSubcontrolsTable, ToSubcontrolsPrimaryKey...),
	)
}

var (
	// enums.MappingType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.MappingType)(nil)
	// enums.MappingType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.MappingType)(nil)
)

var (
	// enums.MappingSource must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.MappingSource)(nil)
	// enums.MappingSource must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.MappingSource)(nil)
)
