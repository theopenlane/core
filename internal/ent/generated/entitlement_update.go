// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// EntitlementUpdate is the builder for updating Entitlement entities.
type EntitlementUpdate struct {
	config
	hooks     []Hook
	mutation  *EntitlementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EntitlementUpdate builder.
func (eu *EntitlementUpdate) Where(ps ...predicate.Entitlement) *EntitlementUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EntitlementUpdate) SetUpdatedAt(t time.Time) *EntitlementUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EntitlementUpdate) ClearUpdatedAt() *EntitlementUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EntitlementUpdate) SetUpdatedBy(s string) *EntitlementUpdate {
	eu.mutation.SetUpdatedBy(s)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableUpdatedBy(s *string) *EntitlementUpdate {
	if s != nil {
		eu.SetUpdatedBy(*s)
	}
	return eu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eu *EntitlementUpdate) ClearUpdatedBy() *EntitlementUpdate {
	eu.mutation.ClearUpdatedBy()
	return eu
}

// SetTags sets the "tags" field.
func (eu *EntitlementUpdate) SetTags(s []string) *EntitlementUpdate {
	eu.mutation.SetTags(s)
	return eu
}

// AppendTags appends s to the "tags" field.
func (eu *EntitlementUpdate) AppendTags(s []string) *EntitlementUpdate {
	eu.mutation.AppendTags(s)
	return eu
}

// ClearTags clears the value of the "tags" field.
func (eu *EntitlementUpdate) ClearTags() *EntitlementUpdate {
	eu.mutation.ClearTags()
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EntitlementUpdate) SetDeletedAt(t time.Time) *EntitlementUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableDeletedAt(t *time.Time) *EntitlementUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EntitlementUpdate) ClearDeletedAt() *EntitlementUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetDeletedBy sets the "deleted_by" field.
func (eu *EntitlementUpdate) SetDeletedBy(s string) *EntitlementUpdate {
	eu.mutation.SetDeletedBy(s)
	return eu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableDeletedBy(s *string) *EntitlementUpdate {
	if s != nil {
		eu.SetDeletedBy(*s)
	}
	return eu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (eu *EntitlementUpdate) ClearDeletedBy() *EntitlementUpdate {
	eu.mutation.ClearDeletedBy()
	return eu
}

// SetOwnerID sets the "owner_id" field.
func (eu *EntitlementUpdate) SetOwnerID(s string) *EntitlementUpdate {
	eu.mutation.SetOwnerID(s)
	return eu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableOwnerID(s *string) *EntitlementUpdate {
	if s != nil {
		eu.SetOwnerID(*s)
	}
	return eu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (eu *EntitlementUpdate) ClearOwnerID() *EntitlementUpdate {
	eu.mutation.ClearOwnerID()
	return eu
}

// SetExternalCustomerID sets the "external_customer_id" field.
func (eu *EntitlementUpdate) SetExternalCustomerID(s string) *EntitlementUpdate {
	eu.mutation.SetExternalCustomerID(s)
	return eu
}

// SetNillableExternalCustomerID sets the "external_customer_id" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableExternalCustomerID(s *string) *EntitlementUpdate {
	if s != nil {
		eu.SetExternalCustomerID(*s)
	}
	return eu
}

// ClearExternalCustomerID clears the value of the "external_customer_id" field.
func (eu *EntitlementUpdate) ClearExternalCustomerID() *EntitlementUpdate {
	eu.mutation.ClearExternalCustomerID()
	return eu
}

// SetExternalSubscriptionID sets the "external_subscription_id" field.
func (eu *EntitlementUpdate) SetExternalSubscriptionID(s string) *EntitlementUpdate {
	eu.mutation.SetExternalSubscriptionID(s)
	return eu
}

// SetNillableExternalSubscriptionID sets the "external_subscription_id" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableExternalSubscriptionID(s *string) *EntitlementUpdate {
	if s != nil {
		eu.SetExternalSubscriptionID(*s)
	}
	return eu
}

// ClearExternalSubscriptionID clears the value of the "external_subscription_id" field.
func (eu *EntitlementUpdate) ClearExternalSubscriptionID() *EntitlementUpdate {
	eu.mutation.ClearExternalSubscriptionID()
	return eu
}

// SetExpires sets the "expires" field.
func (eu *EntitlementUpdate) SetExpires(b bool) *EntitlementUpdate {
	eu.mutation.SetExpires(b)
	return eu
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableExpires(b *bool) *EntitlementUpdate {
	if b != nil {
		eu.SetExpires(*b)
	}
	return eu
}

// SetExpiresAt sets the "expires_at" field.
func (eu *EntitlementUpdate) SetExpiresAt(t time.Time) *EntitlementUpdate {
	eu.mutation.SetExpiresAt(t)
	return eu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableExpiresAt(t *time.Time) *EntitlementUpdate {
	if t != nil {
		eu.SetExpiresAt(*t)
	}
	return eu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (eu *EntitlementUpdate) ClearExpiresAt() *EntitlementUpdate {
	eu.mutation.ClearExpiresAt()
	return eu
}

// SetCancelled sets the "cancelled" field.
func (eu *EntitlementUpdate) SetCancelled(b bool) *EntitlementUpdate {
	eu.mutation.SetCancelled(b)
	return eu
}

// SetNillableCancelled sets the "cancelled" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableCancelled(b *bool) *EntitlementUpdate {
	if b != nil {
		eu.SetCancelled(*b)
	}
	return eu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (eu *EntitlementUpdate) SetOwner(o *Organization) *EntitlementUpdate {
	return eu.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (eu *EntitlementUpdate) AddEventIDs(ids ...string) *EntitlementUpdate {
	eu.mutation.AddEventIDs(ids...)
	return eu
}

// AddEvents adds the "events" edges to the Event entity.
func (eu *EntitlementUpdate) AddEvents(e ...*Event) *EntitlementUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEventIDs(ids...)
}

// Mutation returns the EntitlementMutation object of the builder.
func (eu *EntitlementUpdate) Mutation() *EntitlementMutation {
	return eu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (eu *EntitlementUpdate) ClearOwner() *EntitlementUpdate {
	eu.mutation.ClearOwner()
	return eu
}

// ClearEvents clears all "events" edges to the Event entity.
func (eu *EntitlementUpdate) ClearEvents() *EntitlementUpdate {
	eu.mutation.ClearEvents()
	return eu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (eu *EntitlementUpdate) RemoveEventIDs(ids ...string) *EntitlementUpdate {
	eu.mutation.RemoveEventIDs(ids...)
	return eu
}

// RemoveEvents removes "events" edges to Event entities.
func (eu *EntitlementUpdate) RemoveEvents(e ...*Event) *EntitlementUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntitlementUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntitlementUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntitlementUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntitlementUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EntitlementUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok && !eu.mutation.UpdatedAtCleared() {
		if entitlement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlement.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlement.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EntitlementUpdate) check() error {
	if v, ok := eu.mutation.OwnerID(); ok {
		if err := entitlement.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Entitlement.owner_id": %w`, err)}
		}
	}
	if eu.mutation.PlanCleared() && len(eu.mutation.PlanIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Entitlement.plan"`)
	}
	if eu.mutation.OrganizationCleared() && len(eu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Entitlement.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EntitlementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EntitlementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlement.Table, entitlement.Columns, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlement.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlement.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlement.FieldUpdatedAt, field.TypeTime)
	}
	if eu.mutation.CreatedByCleared() {
		_spec.ClearField(entitlement.FieldCreatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlement.FieldUpdatedBy, field.TypeString, value)
	}
	if eu.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlement.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.Tags(); ok {
		_spec.SetField(entitlement.FieldTags, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlement.FieldTags, value)
		})
	}
	if eu.mutation.TagsCleared() {
		_spec.ClearField(entitlement.FieldTags, field.TypeJSON)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(entitlement.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.DeletedBy(); ok {
		_spec.SetField(entitlement.FieldDeletedBy, field.TypeString, value)
	}
	if eu.mutation.DeletedByCleared() {
		_spec.ClearField(entitlement.FieldDeletedBy, field.TypeString)
	}
	if value, ok := eu.mutation.ExternalCustomerID(); ok {
		_spec.SetField(entitlement.FieldExternalCustomerID, field.TypeString, value)
	}
	if eu.mutation.ExternalCustomerIDCleared() {
		_spec.ClearField(entitlement.FieldExternalCustomerID, field.TypeString)
	}
	if value, ok := eu.mutation.ExternalSubscriptionID(); ok {
		_spec.SetField(entitlement.FieldExternalSubscriptionID, field.TypeString, value)
	}
	if eu.mutation.ExternalSubscriptionIDCleared() {
		_spec.ClearField(entitlement.FieldExternalSubscriptionID, field.TypeString)
	}
	if value, ok := eu.mutation.Expires(); ok {
		_spec.SetField(entitlement.FieldExpires, field.TypeBool, value)
	}
	if value, ok := eu.mutation.ExpiresAt(); ok {
		_spec.SetField(entitlement.FieldExpiresAt, field.TypeTime, value)
	}
	if eu.mutation.ExpiresAtCleared() {
		_spec.ClearField(entitlement.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Cancelled(); ok {
		_spec.SetField(entitlement.FieldCancelled, field.TypeBool, value)
	}
	if eu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.OwnerTable,
			Columns: []string{entitlement.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.Entitlement
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.OwnerTable,
			Columns: []string{entitlement.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlement.EventsTable,
			Columns: entitlement.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !eu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlement.EventsTable,
			Columns: entitlement.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlement.EventsTable,
			Columns: entitlement.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = eu.schemaConfig.Entitlement
	ctx = internal.NewSchemaConfigContext(ctx, eu.schemaConfig)
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntitlementUpdateOne is the builder for updating a single Entitlement entity.
type EntitlementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EntitlementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EntitlementUpdateOne) SetUpdatedAt(t time.Time) *EntitlementUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EntitlementUpdateOne) ClearUpdatedAt() *EntitlementUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EntitlementUpdateOne) SetUpdatedBy(s string) *EntitlementUpdateOne {
	euo.mutation.SetUpdatedBy(s)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableUpdatedBy(s *string) *EntitlementUpdateOne {
	if s != nil {
		euo.SetUpdatedBy(*s)
	}
	return euo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (euo *EntitlementUpdateOne) ClearUpdatedBy() *EntitlementUpdateOne {
	euo.mutation.ClearUpdatedBy()
	return euo
}

// SetTags sets the "tags" field.
func (euo *EntitlementUpdateOne) SetTags(s []string) *EntitlementUpdateOne {
	euo.mutation.SetTags(s)
	return euo
}

// AppendTags appends s to the "tags" field.
func (euo *EntitlementUpdateOne) AppendTags(s []string) *EntitlementUpdateOne {
	euo.mutation.AppendTags(s)
	return euo
}

// ClearTags clears the value of the "tags" field.
func (euo *EntitlementUpdateOne) ClearTags() *EntitlementUpdateOne {
	euo.mutation.ClearTags()
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EntitlementUpdateOne) SetDeletedAt(t time.Time) *EntitlementUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableDeletedAt(t *time.Time) *EntitlementUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EntitlementUpdateOne) ClearDeletedAt() *EntitlementUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetDeletedBy sets the "deleted_by" field.
func (euo *EntitlementUpdateOne) SetDeletedBy(s string) *EntitlementUpdateOne {
	euo.mutation.SetDeletedBy(s)
	return euo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableDeletedBy(s *string) *EntitlementUpdateOne {
	if s != nil {
		euo.SetDeletedBy(*s)
	}
	return euo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (euo *EntitlementUpdateOne) ClearDeletedBy() *EntitlementUpdateOne {
	euo.mutation.ClearDeletedBy()
	return euo
}

// SetOwnerID sets the "owner_id" field.
func (euo *EntitlementUpdateOne) SetOwnerID(s string) *EntitlementUpdateOne {
	euo.mutation.SetOwnerID(s)
	return euo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableOwnerID(s *string) *EntitlementUpdateOne {
	if s != nil {
		euo.SetOwnerID(*s)
	}
	return euo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (euo *EntitlementUpdateOne) ClearOwnerID() *EntitlementUpdateOne {
	euo.mutation.ClearOwnerID()
	return euo
}

// SetExternalCustomerID sets the "external_customer_id" field.
func (euo *EntitlementUpdateOne) SetExternalCustomerID(s string) *EntitlementUpdateOne {
	euo.mutation.SetExternalCustomerID(s)
	return euo
}

// SetNillableExternalCustomerID sets the "external_customer_id" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableExternalCustomerID(s *string) *EntitlementUpdateOne {
	if s != nil {
		euo.SetExternalCustomerID(*s)
	}
	return euo
}

// ClearExternalCustomerID clears the value of the "external_customer_id" field.
func (euo *EntitlementUpdateOne) ClearExternalCustomerID() *EntitlementUpdateOne {
	euo.mutation.ClearExternalCustomerID()
	return euo
}

// SetExternalSubscriptionID sets the "external_subscription_id" field.
func (euo *EntitlementUpdateOne) SetExternalSubscriptionID(s string) *EntitlementUpdateOne {
	euo.mutation.SetExternalSubscriptionID(s)
	return euo
}

// SetNillableExternalSubscriptionID sets the "external_subscription_id" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableExternalSubscriptionID(s *string) *EntitlementUpdateOne {
	if s != nil {
		euo.SetExternalSubscriptionID(*s)
	}
	return euo
}

// ClearExternalSubscriptionID clears the value of the "external_subscription_id" field.
func (euo *EntitlementUpdateOne) ClearExternalSubscriptionID() *EntitlementUpdateOne {
	euo.mutation.ClearExternalSubscriptionID()
	return euo
}

// SetExpires sets the "expires" field.
func (euo *EntitlementUpdateOne) SetExpires(b bool) *EntitlementUpdateOne {
	euo.mutation.SetExpires(b)
	return euo
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableExpires(b *bool) *EntitlementUpdateOne {
	if b != nil {
		euo.SetExpires(*b)
	}
	return euo
}

// SetExpiresAt sets the "expires_at" field.
func (euo *EntitlementUpdateOne) SetExpiresAt(t time.Time) *EntitlementUpdateOne {
	euo.mutation.SetExpiresAt(t)
	return euo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableExpiresAt(t *time.Time) *EntitlementUpdateOne {
	if t != nil {
		euo.SetExpiresAt(*t)
	}
	return euo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (euo *EntitlementUpdateOne) ClearExpiresAt() *EntitlementUpdateOne {
	euo.mutation.ClearExpiresAt()
	return euo
}

// SetCancelled sets the "cancelled" field.
func (euo *EntitlementUpdateOne) SetCancelled(b bool) *EntitlementUpdateOne {
	euo.mutation.SetCancelled(b)
	return euo
}

// SetNillableCancelled sets the "cancelled" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableCancelled(b *bool) *EntitlementUpdateOne {
	if b != nil {
		euo.SetCancelled(*b)
	}
	return euo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (euo *EntitlementUpdateOne) SetOwner(o *Organization) *EntitlementUpdateOne {
	return euo.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (euo *EntitlementUpdateOne) AddEventIDs(ids ...string) *EntitlementUpdateOne {
	euo.mutation.AddEventIDs(ids...)
	return euo
}

// AddEvents adds the "events" edges to the Event entity.
func (euo *EntitlementUpdateOne) AddEvents(e ...*Event) *EntitlementUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEventIDs(ids...)
}

// Mutation returns the EntitlementMutation object of the builder.
func (euo *EntitlementUpdateOne) Mutation() *EntitlementMutation {
	return euo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (euo *EntitlementUpdateOne) ClearOwner() *EntitlementUpdateOne {
	euo.mutation.ClearOwner()
	return euo
}

// ClearEvents clears all "events" edges to the Event entity.
func (euo *EntitlementUpdateOne) ClearEvents() *EntitlementUpdateOne {
	euo.mutation.ClearEvents()
	return euo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (euo *EntitlementUpdateOne) RemoveEventIDs(ids ...string) *EntitlementUpdateOne {
	euo.mutation.RemoveEventIDs(ids...)
	return euo
}

// RemoveEvents removes "events" edges to Event entities.
func (euo *EntitlementUpdateOne) RemoveEvents(e ...*Event) *EntitlementUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the EntitlementUpdate builder.
func (euo *EntitlementUpdateOne) Where(ps ...predicate.Entitlement) *EntitlementUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntitlementUpdateOne) Select(field string, fields ...string) *EntitlementUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entitlement entity.
func (euo *EntitlementUpdateOne) Save(ctx context.Context) (*Entitlement, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntitlementUpdateOne) SaveX(ctx context.Context) *Entitlement {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntitlementUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntitlementUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EntitlementUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok && !euo.mutation.UpdatedAtCleared() {
		if entitlement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlement.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlement.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EntitlementUpdateOne) check() error {
	if v, ok := euo.mutation.OwnerID(); ok {
		if err := entitlement.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Entitlement.owner_id": %w`, err)}
		}
	}
	if euo.mutation.PlanCleared() && len(euo.mutation.PlanIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Entitlement.plan"`)
	}
	if euo.mutation.OrganizationCleared() && len(euo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Entitlement.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EntitlementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EntitlementUpdateOne) sqlSave(ctx context.Context) (_node *Entitlement, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlement.Table, entitlement.Columns, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Entitlement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlement.FieldID)
		for _, f := range fields {
			if !entitlement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != entitlement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlement.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlement.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlement.FieldUpdatedAt, field.TypeTime)
	}
	if euo.mutation.CreatedByCleared() {
		_spec.ClearField(entitlement.FieldCreatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlement.FieldUpdatedBy, field.TypeString, value)
	}
	if euo.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlement.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.Tags(); ok {
		_spec.SetField(entitlement.FieldTags, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlement.FieldTags, value)
		})
	}
	if euo.mutation.TagsCleared() {
		_spec.ClearField(entitlement.FieldTags, field.TypeJSON)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(entitlement.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlement.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.DeletedBy(); ok {
		_spec.SetField(entitlement.FieldDeletedBy, field.TypeString, value)
	}
	if euo.mutation.DeletedByCleared() {
		_spec.ClearField(entitlement.FieldDeletedBy, field.TypeString)
	}
	if value, ok := euo.mutation.ExternalCustomerID(); ok {
		_spec.SetField(entitlement.FieldExternalCustomerID, field.TypeString, value)
	}
	if euo.mutation.ExternalCustomerIDCleared() {
		_spec.ClearField(entitlement.FieldExternalCustomerID, field.TypeString)
	}
	if value, ok := euo.mutation.ExternalSubscriptionID(); ok {
		_spec.SetField(entitlement.FieldExternalSubscriptionID, field.TypeString, value)
	}
	if euo.mutation.ExternalSubscriptionIDCleared() {
		_spec.ClearField(entitlement.FieldExternalSubscriptionID, field.TypeString)
	}
	if value, ok := euo.mutation.Expires(); ok {
		_spec.SetField(entitlement.FieldExpires, field.TypeBool, value)
	}
	if value, ok := euo.mutation.ExpiresAt(); ok {
		_spec.SetField(entitlement.FieldExpiresAt, field.TypeTime, value)
	}
	if euo.mutation.ExpiresAtCleared() {
		_spec.ClearField(entitlement.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Cancelled(); ok {
		_spec.SetField(entitlement.FieldCancelled, field.TypeBool, value)
	}
	if euo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.OwnerTable,
			Columns: []string{entitlement.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.Entitlement
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.OwnerTable,
			Columns: []string{entitlement.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlement.EventsTable,
			Columns: entitlement.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !euo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlement.EventsTable,
			Columns: entitlement.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlement.EventsTable,
			Columns: entitlement.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = euo.schemaConfig.Entitlement
	ctx = internal.NewSchemaConfigContext(ctx, euo.schemaConfig)
	_spec.AddModifiers(euo.modifiers...)
	_node = &Entitlement{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
