// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedByID applies equality check predicate on the "created_by_id" field. It's identical to CreatedByIDEQ.
func CreatedByID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedByID, v))
}

// UpdatedByID applies equality check predicate on the "updated_by_id" field. It's identical to UpdatedByIDEQ.
func UpdatedByID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedByID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedByID applies equality check predicate on the "deleted_by_id" field. It's identical to DeletedByIDEQ.
func DeletedByID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedByID, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMappingID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisplayName, v))
}

// AvatarRemoteURL applies equality check predicate on the "avatar_remote_url" field. It's identical to AvatarRemoteURLEQ.
func AvatarRemoteURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarRemoteURL, v))
}

// AvatarLocalFile applies equality check predicate on the "avatar_local_file" field. It's identical to AvatarLocalFileEQ.
func AvatarLocalFile(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarLocalFile, v))
}

// AvatarLocalFileID applies equality check predicate on the "avatar_local_file_id" field. It's identical to AvatarLocalFileIDEQ.
func AvatarLocalFileID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarLocalFileID, v))
}

// AvatarUpdatedAt applies equality check predicate on the "avatar_updated_at" field. It's identical to AvatarUpdatedAtEQ.
func AvatarUpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarUpdatedAt, v))
}

// LastSeen applies equality check predicate on the "last_seen" field. It's identical to LastSeenEQ.
func LastSeen(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastSeen, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Sub applies equality check predicate on the "sub" field. It's identical to SubEQ.
func Sub(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSub, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByIDEQ applies the EQ predicate on the "created_by_id" field.
func CreatedByIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedByID, v))
}

// CreatedByIDNEQ applies the NEQ predicate on the "created_by_id" field.
func CreatedByIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedByID, v))
}

// CreatedByIDIn applies the In predicate on the "created_by_id" field.
func CreatedByIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedByID, vs...))
}

// CreatedByIDNotIn applies the NotIn predicate on the "created_by_id" field.
func CreatedByIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedByID, vs...))
}

// CreatedByIDGT applies the GT predicate on the "created_by_id" field.
func CreatedByIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedByID, v))
}

// CreatedByIDGTE applies the GTE predicate on the "created_by_id" field.
func CreatedByIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedByID, v))
}

// CreatedByIDLT applies the LT predicate on the "created_by_id" field.
func CreatedByIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedByID, v))
}

// CreatedByIDLTE applies the LTE predicate on the "created_by_id" field.
func CreatedByIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedByID, v))
}

// CreatedByIDContains applies the Contains predicate on the "created_by_id" field.
func CreatedByIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCreatedByID, v))
}

// CreatedByIDHasPrefix applies the HasPrefix predicate on the "created_by_id" field.
func CreatedByIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCreatedByID, v))
}

// CreatedByIDHasSuffix applies the HasSuffix predicate on the "created_by_id" field.
func CreatedByIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCreatedByID, v))
}

// CreatedByIDIsNil applies the IsNil predicate on the "created_by_id" field.
func CreatedByIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreatedByID))
}

// CreatedByIDNotNil applies the NotNil predicate on the "created_by_id" field.
func CreatedByIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreatedByID))
}

// CreatedByIDEqualFold applies the EqualFold predicate on the "created_by_id" field.
func CreatedByIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCreatedByID, v))
}

// CreatedByIDContainsFold applies the ContainsFold predicate on the "created_by_id" field.
func CreatedByIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCreatedByID, v))
}

// UpdatedByIDEQ applies the EQ predicate on the "updated_by_id" field.
func UpdatedByIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedByID, v))
}

// UpdatedByIDNEQ applies the NEQ predicate on the "updated_by_id" field.
func UpdatedByIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedByID, v))
}

// UpdatedByIDIn applies the In predicate on the "updated_by_id" field.
func UpdatedByIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDNotIn applies the NotIn predicate on the "updated_by_id" field.
func UpdatedByIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDGT applies the GT predicate on the "updated_by_id" field.
func UpdatedByIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedByID, v))
}

// UpdatedByIDGTE applies the GTE predicate on the "updated_by_id" field.
func UpdatedByIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedByID, v))
}

// UpdatedByIDLT applies the LT predicate on the "updated_by_id" field.
func UpdatedByIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedByID, v))
}

// UpdatedByIDLTE applies the LTE predicate on the "updated_by_id" field.
func UpdatedByIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedByID, v))
}

// UpdatedByIDContains applies the Contains predicate on the "updated_by_id" field.
func UpdatedByIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUpdatedByID, v))
}

// UpdatedByIDHasPrefix applies the HasPrefix predicate on the "updated_by_id" field.
func UpdatedByIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUpdatedByID, v))
}

// UpdatedByIDHasSuffix applies the HasSuffix predicate on the "updated_by_id" field.
func UpdatedByIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUpdatedByID, v))
}

// UpdatedByIDIsNil applies the IsNil predicate on the "updated_by_id" field.
func UpdatedByIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUpdatedByID))
}

// UpdatedByIDNotNil applies the NotNil predicate on the "updated_by_id" field.
func UpdatedByIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUpdatedByID))
}

// UpdatedByIDEqualFold applies the EqualFold predicate on the "updated_by_id" field.
func UpdatedByIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUpdatedByID, v))
}

// UpdatedByIDContainsFold applies the ContainsFold predicate on the "updated_by_id" field.
func UpdatedByIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUpdatedByID, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByIDEQ applies the EQ predicate on the "deleted_by_id" field.
func DeletedByIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedByID, v))
}

// DeletedByIDNEQ applies the NEQ predicate on the "deleted_by_id" field.
func DeletedByIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedByID, v))
}

// DeletedByIDIn applies the In predicate on the "deleted_by_id" field.
func DeletedByIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedByID, vs...))
}

// DeletedByIDNotIn applies the NotIn predicate on the "deleted_by_id" field.
func DeletedByIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedByID, vs...))
}

// DeletedByIDGT applies the GT predicate on the "deleted_by_id" field.
func DeletedByIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedByID, v))
}

// DeletedByIDGTE applies the GTE predicate on the "deleted_by_id" field.
func DeletedByIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedByID, v))
}

// DeletedByIDLT applies the LT predicate on the "deleted_by_id" field.
func DeletedByIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedByID, v))
}

// DeletedByIDLTE applies the LTE predicate on the "deleted_by_id" field.
func DeletedByIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedByID, v))
}

// DeletedByIDContains applies the Contains predicate on the "deleted_by_id" field.
func DeletedByIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDeletedByID, v))
}

// DeletedByIDHasPrefix applies the HasPrefix predicate on the "deleted_by_id" field.
func DeletedByIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDeletedByID, v))
}

// DeletedByIDHasSuffix applies the HasSuffix predicate on the "deleted_by_id" field.
func DeletedByIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDeletedByID, v))
}

// DeletedByIDIsNil applies the IsNil predicate on the "deleted_by_id" field.
func DeletedByIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedByID))
}

// DeletedByIDNotNil applies the NotNil predicate on the "deleted_by_id" field.
func DeletedByIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedByID))
}

// DeletedByIDEqualFold applies the EqualFold predicate on the "deleted_by_id" field.
func DeletedByIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDeletedByID, v))
}

// DeletedByIDContainsFold applies the ContainsFold predicate on the "deleted_by_id" field.
func DeletedByIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDeletedByID, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTags))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDisplayName, v))
}

// AvatarRemoteURLEQ applies the EQ predicate on the "avatar_remote_url" field.
func AvatarRemoteURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLNEQ applies the NEQ predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLIn applies the In predicate on the "avatar_remote_url" field.
func AvatarRemoteURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarRemoteURL, vs...))
}

// AvatarRemoteURLNotIn applies the NotIn predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarRemoteURL, vs...))
}

// AvatarRemoteURLGT applies the GT predicate on the "avatar_remote_url" field.
func AvatarRemoteURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLGTE applies the GTE predicate on the "avatar_remote_url" field.
func AvatarRemoteURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLLT applies the LT predicate on the "avatar_remote_url" field.
func AvatarRemoteURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLLTE applies the LTE predicate on the "avatar_remote_url" field.
func AvatarRemoteURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLContains applies the Contains predicate on the "avatar_remote_url" field.
func AvatarRemoteURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLHasPrefix applies the HasPrefix predicate on the "avatar_remote_url" field.
func AvatarRemoteURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLHasSuffix applies the HasSuffix predicate on the "avatar_remote_url" field.
func AvatarRemoteURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLIsNil applies the IsNil predicate on the "avatar_remote_url" field.
func AvatarRemoteURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatarRemoteURL))
}

// AvatarRemoteURLNotNil applies the NotNil predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatarRemoteURL))
}

// AvatarRemoteURLEqualFold applies the EqualFold predicate on the "avatar_remote_url" field.
func AvatarRemoteURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLContainsFold applies the ContainsFold predicate on the "avatar_remote_url" field.
func AvatarRemoteURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatarRemoteURL, v))
}

// AvatarLocalFileEQ applies the EQ predicate on the "avatar_local_file" field.
func AvatarLocalFileEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarLocalFile, v))
}

// AvatarLocalFileNEQ applies the NEQ predicate on the "avatar_local_file" field.
func AvatarLocalFileNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarLocalFile, v))
}

// AvatarLocalFileIn applies the In predicate on the "avatar_local_file" field.
func AvatarLocalFileIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarLocalFile, vs...))
}

// AvatarLocalFileNotIn applies the NotIn predicate on the "avatar_local_file" field.
func AvatarLocalFileNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarLocalFile, vs...))
}

// AvatarLocalFileGT applies the GT predicate on the "avatar_local_file" field.
func AvatarLocalFileGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarLocalFile, v))
}

// AvatarLocalFileGTE applies the GTE predicate on the "avatar_local_file" field.
func AvatarLocalFileGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarLocalFile, v))
}

// AvatarLocalFileLT applies the LT predicate on the "avatar_local_file" field.
func AvatarLocalFileLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarLocalFile, v))
}

// AvatarLocalFileLTE applies the LTE predicate on the "avatar_local_file" field.
func AvatarLocalFileLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarLocalFile, v))
}

// AvatarLocalFileContains applies the Contains predicate on the "avatar_local_file" field.
func AvatarLocalFileContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatarLocalFile, v))
}

// AvatarLocalFileHasPrefix applies the HasPrefix predicate on the "avatar_local_file" field.
func AvatarLocalFileHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatarLocalFile, v))
}

// AvatarLocalFileHasSuffix applies the HasSuffix predicate on the "avatar_local_file" field.
func AvatarLocalFileHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatarLocalFile, v))
}

// AvatarLocalFileIsNil applies the IsNil predicate on the "avatar_local_file" field.
func AvatarLocalFileIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatarLocalFile))
}

// AvatarLocalFileNotNil applies the NotNil predicate on the "avatar_local_file" field.
func AvatarLocalFileNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatarLocalFile))
}

// AvatarLocalFileEqualFold applies the EqualFold predicate on the "avatar_local_file" field.
func AvatarLocalFileEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatarLocalFile, v))
}

// AvatarLocalFileContainsFold applies the ContainsFold predicate on the "avatar_local_file" field.
func AvatarLocalFileContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatarLocalFile, v))
}

// AvatarLocalFileIDEQ applies the EQ predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDNEQ applies the NEQ predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDIn applies the In predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarLocalFileID, vs...))
}

// AvatarLocalFileIDNotIn applies the NotIn predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarLocalFileID, vs...))
}

// AvatarLocalFileIDGT applies the GT predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDGTE applies the GTE predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDLT applies the LT predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDLTE applies the LTE predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDContains applies the Contains predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDHasPrefix applies the HasPrefix predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDHasSuffix applies the HasSuffix predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDIsNil applies the IsNil predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatarLocalFileID))
}

// AvatarLocalFileIDNotNil applies the NotNil predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatarLocalFileID))
}

// AvatarLocalFileIDEqualFold applies the EqualFold predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDContainsFold applies the ContainsFold predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatarLocalFileID, v))
}

// AvatarUpdatedAtEQ applies the EQ predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtNEQ applies the NEQ predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtIn applies the In predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarUpdatedAt, vs...))
}

// AvatarUpdatedAtNotIn applies the NotIn predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarUpdatedAt, vs...))
}

// AvatarUpdatedAtGT applies the GT predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtGTE applies the GTE predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtLT applies the LT predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtLTE applies the LTE predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtIsNil applies the IsNil predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatarUpdatedAt))
}

// AvatarUpdatedAtNotNil applies the NotNil predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatarUpdatedAt))
}

// LastSeenEQ applies the EQ predicate on the "last_seen" field.
func LastSeenEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastSeen, v))
}

// LastSeenNEQ applies the NEQ predicate on the "last_seen" field.
func LastSeenNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastSeen, v))
}

// LastSeenIn applies the In predicate on the "last_seen" field.
func LastSeenIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastSeen, vs...))
}

// LastSeenNotIn applies the NotIn predicate on the "last_seen" field.
func LastSeenNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastSeen, vs...))
}

// LastSeenGT applies the GT predicate on the "last_seen" field.
func LastSeenGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastSeen, v))
}

// LastSeenGTE applies the GTE predicate on the "last_seen" field.
func LastSeenGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastSeen, v))
}

// LastSeenLT applies the LT predicate on the "last_seen" field.
func LastSeenLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastSeen, v))
}

// LastSeenLTE applies the LTE predicate on the "last_seen" field.
func LastSeenLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastSeen, v))
}

// LastSeenIsNil applies the IsNil predicate on the "last_seen" field.
func LastSeenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastSeen))
}

// LastSeenNotNil applies the NotNil predicate on the "last_seen" field.
func LastSeenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastSeen))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// SubEQ applies the EQ predicate on the "sub" field.
func SubEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSub, v))
}

// SubNEQ applies the NEQ predicate on the "sub" field.
func SubNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSub, v))
}

// SubIn applies the In predicate on the "sub" field.
func SubIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSub, vs...))
}

// SubNotIn applies the NotIn predicate on the "sub" field.
func SubNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSub, vs...))
}

// SubGT applies the GT predicate on the "sub" field.
func SubGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSub, v))
}

// SubGTE applies the GTE predicate on the "sub" field.
func SubGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSub, v))
}

// SubLT applies the LT predicate on the "sub" field.
func SubLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSub, v))
}

// SubLTE applies the LTE predicate on the "sub" field.
func SubLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSub, v))
}

// SubContains applies the Contains predicate on the "sub" field.
func SubContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSub, v))
}

// SubHasPrefix applies the HasPrefix predicate on the "sub" field.
func SubHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSub, v))
}

// SubHasSuffix applies the HasSuffix predicate on the "sub" field.
func SubHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSub, v))
}

// SubIsNil applies the IsNil predicate on the "sub" field.
func SubIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldSub))
}

// SubNotNil applies the NotNil predicate on the "sub" field.
func SubNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldSub))
}

// SubEqualFold applies the EqualFold predicate on the "sub" field.
func SubEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSub, v))
}

// SubContainsFold applies the ContainsFold predicate on the "sub" field.
func SubContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSub, v))
}

// AuthProviderEQ applies the EQ predicate on the "auth_provider" field.
func AuthProviderEQ(v enums.AuthProvider) predicate.User {
	vc := v
	return predicate.User(sql.FieldEQ(FieldAuthProvider, vc))
}

// AuthProviderNEQ applies the NEQ predicate on the "auth_provider" field.
func AuthProviderNEQ(v enums.AuthProvider) predicate.User {
	vc := v
	return predicate.User(sql.FieldNEQ(FieldAuthProvider, vc))
}

// AuthProviderIn applies the In predicate on the "auth_provider" field.
func AuthProviderIn(vs ...enums.AuthProvider) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldIn(FieldAuthProvider, v...))
}

// AuthProviderNotIn applies the NotIn predicate on the "auth_provider" field.
func AuthProviderNotIn(vs ...enums.AuthProvider) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldNotIn(FieldAuthProvider, v...))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v enums.Role) predicate.User {
	vc := v
	return predicate.User(sql.FieldEQ(FieldRole, vc))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v enums.Role) predicate.User {
	vc := v
	return predicate.User(sql.FieldNEQ(FieldRole, vc))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...enums.Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldIn(FieldRole, v...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...enums.Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldNotIn(FieldRole, v...))
}

// RoleIsNil applies the IsNil predicate on the "role" field.
func RoleIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRole))
}

// RoleNotNil applies the NotNil predicate on the "role" field.
func RoleNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRole))
}

// HasPersonalAccessTokens applies the HasEdge predicate on the "personal_access_tokens" edge.
func HasPersonalAccessTokens() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PersonalAccessTokensTable, PersonalAccessTokensColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.PersonalAccessToken
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonalAccessTokensWith applies the HasEdge predicate on the "personal_access_tokens" edge with a given conditions (other predicates).
func HasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPersonalAccessTokensStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.PersonalAccessToken
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTfaSettings applies the HasEdge predicate on the "tfa_settings" edge.
func HasTfaSettings() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TfaSettingsTable, TfaSettingsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.TFASetting
		step.Edge.Schema = schemaConfig.TFASetting
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTfaSettingsWith applies the HasEdge predicate on the "tfa_settings" edge with a given conditions (other predicates).
func HasTfaSettingsWith(preds ...predicate.TFASetting) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTfaSettingsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.TFASetting
		step.Edge.Schema = schemaConfig.TFASetting
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSetting applies the HasEdge predicate on the "setting" edge.
func HasSetting() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SettingTable, SettingColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.UserSetting
		step.Edge.Schema = schemaConfig.UserSetting
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSettingWith applies the HasEdge predicate on the "setting" edge with a given conditions (other predicates).
func HasSettingWith(preds ...predicate.UserSetting) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSettingStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.UserSetting
		step.Edge.Schema = schemaConfig.UserSetting
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmailVerificationTokens applies the HasEdge predicate on the "email_verification_tokens" edge.
func HasEmailVerificationTokens() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmailVerificationTokensTable, EmailVerificationTokensColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.EmailVerificationToken
		step.Edge.Schema = schemaConfig.EmailVerificationToken
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailVerificationTokensWith applies the HasEdge predicate on the "email_verification_tokens" edge with a given conditions (other predicates).
func HasEmailVerificationTokensWith(preds ...predicate.EmailVerificationToken) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEmailVerificationTokensStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.EmailVerificationToken
		step.Edge.Schema = schemaConfig.EmailVerificationToken
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPasswordResetTokens applies the HasEdge predicate on the "password_reset_tokens" edge.
func HasPasswordResetTokens() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PasswordResetTokensTable, PasswordResetTokensColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PasswordResetToken
		step.Edge.Schema = schemaConfig.PasswordResetToken
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPasswordResetTokensWith applies the HasEdge predicate on the "password_reset_tokens" edge with a given conditions (other predicates).
func HasPasswordResetTokensWith(preds ...predicate.PasswordResetToken) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPasswordResetTokensStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PasswordResetToken
		step.Edge.Schema = schemaConfig.PasswordResetToken
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GroupsTable, GroupsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupMembership
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGroupsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupMembership
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizations applies the HasEdge predicate on the "organizations" edge.
func HasOrganizations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OrganizationsTable, OrganizationsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgMembership
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationsWith applies the HasEdge predicate on the "organizations" edge with a given conditions (other predicates).
func HasOrganizationsWith(preds ...predicate.Organization) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOrganizationsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgMembership
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWebauthn applies the HasEdge predicate on the "webauthn" edge.
func HasWebauthn() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WebauthnTable, WebauthnColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Webauthn
		step.Edge.Schema = schemaConfig.Webauthn
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebauthnWith applies the HasEdge predicate on the "webauthn" edge with a given conditions (other predicates).
func HasWebauthnWith(preds ...predicate.Webauthn) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newWebauthnStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Webauthn
		step.Edge.Schema = schemaConfig.Webauthn
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.UserFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFilesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.UserFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileTable, FileColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.User
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFileStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.User
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.UserEvents
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEventsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.UserEvents
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActionPlans applies the HasEdge predicate on the "action_plans" edge.
func HasActionPlans() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ActionPlansTable, ActionPlansPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.UserActionPlans
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionPlansWith applies the HasEdge predicate on the "action_plans" edge with a given conditions (other predicates).
func HasActionPlansWith(preds ...predicate.ActionPlan) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newActionPlansStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.UserActionPlans
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubcontrols applies the HasEdge predicate on the "subcontrols" edge.
func HasSubcontrols() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubcontrolsTable, SubcontrolsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.UserSubcontrols
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubcontrolsWith applies the HasEdge predicate on the "subcontrols" edge with a given conditions (other predicates).
func HasSubcontrolsWith(preds ...predicate.Subcontrol) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSubcontrolsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.UserSubcontrols
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignerTasks applies the HasEdge predicate on the "assigner_tasks" edge.
func HasAssignerTasks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignerTasksTable, AssignerTasksColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignerTasksWith applies the HasEdge predicate on the "assigner_tasks" edge with a given conditions (other predicates).
func HasAssignerTasksWith(preds ...predicate.Task) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAssignerTasksStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssigneeTasks applies the HasEdge predicate on the "assignee_tasks" edge.
func HasAssigneeTasks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssigneeTasksTable, AssigneeTasksColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssigneeTasksWith applies the HasEdge predicate on the "assignee_tasks" edge with a given conditions (other predicates).
func HasAssigneeTasksWith(preds ...predicate.Task) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAssigneeTasksStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrograms applies the HasEdge predicate on the "programs" edge.
func HasPrograms() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProgramsTable, ProgramsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramMembership
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramsWith applies the HasEdge predicate on the "programs" edge with a given conditions (other predicates).
func HasProgramsWith(preds ...predicate.Program) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProgramsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramMembership
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroupMemberships applies the HasEdge predicate on the "group_memberships" edge.
func HasGroupMemberships() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, GroupMembershipsTable, GroupMembershipsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.GroupMembership
		step.Edge.Schema = schemaConfig.GroupMembership
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupMembershipsWith applies the HasEdge predicate on the "group_memberships" edge with a given conditions (other predicates).
func HasGroupMembershipsWith(preds ...predicate.GroupMembership) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGroupMembershipsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.GroupMembership
		step.Edge.Schema = schemaConfig.GroupMembership
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgMemberships applies the HasEdge predicate on the "org_memberships" edge.
func HasOrgMemberships() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrgMembershipsTable, OrgMembershipsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembership
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgMembershipsWith applies the HasEdge predicate on the "org_memberships" edge with a given conditions (other predicates).
func HasOrgMembershipsWith(preds ...predicate.OrgMembership) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOrgMembershipsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembership
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgramMemberships applies the HasEdge predicate on the "program_memberships" edge.
func HasProgramMemberships() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProgramMembershipsTable, ProgramMembershipsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProgramMembership
		step.Edge.Schema = schemaConfig.ProgramMembership
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramMembershipsWith applies the HasEdge predicate on the "program_memberships" edge with a given conditions (other predicates).
func HasProgramMembershipsWith(preds ...predicate.ProgramMembership) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProgramMembershipsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProgramMembership
		step.Edge.Schema = schemaConfig.ProgramMembership
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
