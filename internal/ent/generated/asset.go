// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// Asset is the model entity for the Asset schema.
type Asset struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the type of the asset, e.g. technology, domain, device, etc
	AssetType enums.AssetType `json:"asset_type,omitempty"`
	// the name of the asset, e.g. matts computer, office router, IP address, etc
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// unique identifier like domain, device id, etc
	Identifier string `json:"identifier,omitempty"`
	// the website of the asset, if applicable
	Website string `json:"website,omitempty"`
	// the CPE (Common Platform Enumeration) of the asset, if applicable
	Cpe string `json:"cpe,omitempty"`
	// the categories of the asset, e.g. web server, database, etc
	Categories []string `json:"categories,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetQuery when eager-loading is set.
	Edges        AssetEdges `json:"edges"`
	risk_assets  *string
	selectValues sql.SelectValues
}

// AssetEdges holds the relations/edges for other nodes in the graph.
type AssetEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// groups that are blocked from viewing or editing the risk
	BlockedGroups []*Group `json:"blocked_groups,omitempty"`
	// provides edit access to the risk to members of the group
	Editors []*Group `json:"editors,omitempty"`
	// provides view access to the risk to members of the group
	Viewers []*Group `json:"viewers,omitempty"`
	// Scans holds the value of the scans edge.
	Scans []*Scan `json:"scans,omitempty"`
	// Entities holds the value of the entities edge.
	Entities []*Entity `json:"entities,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedBlockedGroups map[string][]*Group
	namedEditors       map[string][]*Group
	namedViewers       map[string][]*Group
	namedScans         map[string][]*Scan
	namedEntities      map[string][]*Entity
	namedControls      map[string][]*Control
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BlockedGroupsOrErr returns the BlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) BlockedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.BlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "blocked_groups"}
}

// EditorsOrErr returns the Editors value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) EditorsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Editors, nil
	}
	return nil, &NotLoadedError{edge: "editors"}
}

// ViewersOrErr returns the Viewers value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) ViewersOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Viewers, nil
	}
	return nil, &NotLoadedError{edge: "viewers"}
}

// ScansOrErr returns the Scans value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) ScansOrErr() ([]*Scan, error) {
	if e.loadedTypes[4] {
		return e.Scans, nil
	}
	return nil, &NotLoadedError{edge: "scans"}
}

// EntitiesOrErr returns the Entities value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) EntitiesOrErr() ([]*Entity, error) {
	if e.loadedTypes[5] {
		return e.Entities, nil
	}
	return nil, &NotLoadedError{edge: "entities"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[6] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Asset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case asset.FieldTags, asset.FieldCategories:
			values[i] = new([]byte)
		case asset.FieldID, asset.FieldCreatedBy, asset.FieldUpdatedBy, asset.FieldDeletedBy, asset.FieldOwnerID, asset.FieldAssetType, asset.FieldName, asset.FieldDescription, asset.FieldIdentifier, asset.FieldWebsite, asset.FieldCpe:
			values[i] = new(sql.NullString)
		case asset.FieldCreatedAt, asset.FieldUpdatedAt, asset.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case asset.ForeignKeys[0]: // risk_assets
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Asset fields.
func (_m *Asset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asset.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case asset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case asset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case asset.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case asset.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case asset.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case asset.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case asset.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case asset.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case asset.FieldAssetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_type", values[i])
			} else if value.Valid {
				_m.AssetType = enums.AssetType(value.String)
			}
		case asset.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case asset.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case asset.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				_m.Identifier = value.String
			}
		case asset.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				_m.Website = value.String
			}
		case asset.FieldCpe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpe", values[i])
			} else if value.Valid {
				_m.Cpe = value.String
			}
		case asset.FieldCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Categories); err != nil {
					return fmt.Errorf("unmarshal field categories: %w", err)
				}
			}
		case asset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field risk_assets", values[i])
			} else if value.Valid {
				_m.risk_assets = new(string)
				*_m.risk_assets = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Asset.
// This includes values selected through modifiers, order, etc.
func (_m *Asset) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Asset entity.
func (_m *Asset) QueryOwner() *OrganizationQuery {
	return NewAssetClient(_m.config).QueryOwner(_m)
}

// QueryBlockedGroups queries the "blocked_groups" edge of the Asset entity.
func (_m *Asset) QueryBlockedGroups() *GroupQuery {
	return NewAssetClient(_m.config).QueryBlockedGroups(_m)
}

// QueryEditors queries the "editors" edge of the Asset entity.
func (_m *Asset) QueryEditors() *GroupQuery {
	return NewAssetClient(_m.config).QueryEditors(_m)
}

// QueryViewers queries the "viewers" edge of the Asset entity.
func (_m *Asset) QueryViewers() *GroupQuery {
	return NewAssetClient(_m.config).QueryViewers(_m)
}

// QueryScans queries the "scans" edge of the Asset entity.
func (_m *Asset) QueryScans() *ScanQuery {
	return NewAssetClient(_m.config).QueryScans(_m)
}

// QueryEntities queries the "entities" edge of the Asset entity.
func (_m *Asset) QueryEntities() *EntityQuery {
	return NewAssetClient(_m.config).QueryEntities(_m)
}

// QueryControls queries the "controls" edge of the Asset entity.
func (_m *Asset) QueryControls() *ControlQuery {
	return NewAssetClient(_m.config).QueryControls(_m)
}

// Update returns a builder for updating this Asset.
// Note that you need to call Asset.Unwrap() before calling this method if this Asset
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Asset) Update() *AssetUpdateOne {
	return NewAssetClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Asset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Asset) Unwrap() *Asset {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Asset is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Asset) String() string {
	var builder strings.Builder
	builder.WriteString("Asset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("asset_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.AssetType))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(_m.Identifier)
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(_m.Website)
	builder.WriteString(", ")
	builder.WriteString("cpe=")
	builder.WriteString(_m.Cpe)
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(fmt.Sprintf("%v", _m.Categories))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockedGroups returns the BlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Asset) NamedBlockedGroups(name string) ([]*Group, error) {
	if _m.Edges.namedBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Asset) appendNamedBlockedGroups(name string, edges ...*Group) {
	if _m.Edges.namedBlockedGroups == nil {
		_m.Edges.namedBlockedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedBlockedGroups[name] = []*Group{}
	} else {
		_m.Edges.namedBlockedGroups[name] = append(_m.Edges.namedBlockedGroups[name], edges...)
	}
}

// NamedEditors returns the Editors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Asset) NamedEditors(name string) ([]*Group, error) {
	if _m.Edges.namedEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Asset) appendNamedEditors(name string, edges ...*Group) {
	if _m.Edges.namedEditors == nil {
		_m.Edges.namedEditors = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedEditors[name] = []*Group{}
	} else {
		_m.Edges.namedEditors[name] = append(_m.Edges.namedEditors[name], edges...)
	}
}

// NamedViewers returns the Viewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Asset) NamedViewers(name string) ([]*Group, error) {
	if _m.Edges.namedViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Asset) appendNamedViewers(name string, edges ...*Group) {
	if _m.Edges.namedViewers == nil {
		_m.Edges.namedViewers = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedViewers[name] = []*Group{}
	} else {
		_m.Edges.namedViewers[name] = append(_m.Edges.namedViewers[name], edges...)
	}
}

// NamedScans returns the Scans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Asset) NamedScans(name string) ([]*Scan, error) {
	if _m.Edges.namedScans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedScans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Asset) appendNamedScans(name string, edges ...*Scan) {
	if _m.Edges.namedScans == nil {
		_m.Edges.namedScans = make(map[string][]*Scan)
	}
	if len(edges) == 0 {
		_m.Edges.namedScans[name] = []*Scan{}
	} else {
		_m.Edges.namedScans[name] = append(_m.Edges.namedScans[name], edges...)
	}
}

// NamedEntities returns the Entities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Asset) NamedEntities(name string) ([]*Entity, error) {
	if _m.Edges.namedEntities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEntities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Asset) appendNamedEntities(name string, edges ...*Entity) {
	if _m.Edges.namedEntities == nil {
		_m.Edges.namedEntities = make(map[string][]*Entity)
	}
	if len(edges) == 0 {
		_m.Edges.namedEntities[name] = []*Entity{}
	} else {
		_m.Edges.namedEntities[name] = append(_m.Edges.namedEntities[name], edges...)
	}
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Asset) NamedControls(name string) ([]*Control, error) {
	if _m.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Asset) appendNamedControls(name string, edges ...*Control) {
	if _m.Edges.namedControls == nil {
		_m.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		_m.Edges.namedControls[name] = []*Control{}
	} else {
		_m.Edges.namedControls[name] = append(_m.Edges.namedControls[name], edges...)
	}
}

// Assets is a parsable slice of Asset.
type Assets []*Asset
