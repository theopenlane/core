// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/entx/history"
)

// ActionPlanHistoryCreate is the builder for creating a ActionPlanHistory entity.
type ActionPlanHistoryCreate struct {
	config
	mutation *ActionPlanHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (aphc *ActionPlanHistoryCreate) SetHistoryTime(t time.Time) *ActionPlanHistoryCreate {
	aphc.mutation.SetHistoryTime(t)
	return aphc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableHistoryTime(t *time.Time) *ActionPlanHistoryCreate {
	if t != nil {
		aphc.SetHistoryTime(*t)
	}
	return aphc
}

// SetRef sets the "ref" field.
func (aphc *ActionPlanHistoryCreate) SetRef(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetRef(s)
	return aphc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableRef(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetRef(*s)
	}
	return aphc
}

// SetOperation sets the "operation" field.
func (aphc *ActionPlanHistoryCreate) SetOperation(ht history.OpType) *ActionPlanHistoryCreate {
	aphc.mutation.SetOperation(ht)
	return aphc
}

// SetCreatedAt sets the "created_at" field.
func (aphc *ActionPlanHistoryCreate) SetCreatedAt(t time.Time) *ActionPlanHistoryCreate {
	aphc.mutation.SetCreatedAt(t)
	return aphc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableCreatedAt(t *time.Time) *ActionPlanHistoryCreate {
	if t != nil {
		aphc.SetCreatedAt(*t)
	}
	return aphc
}

// SetUpdatedAt sets the "updated_at" field.
func (aphc *ActionPlanHistoryCreate) SetUpdatedAt(t time.Time) *ActionPlanHistoryCreate {
	aphc.mutation.SetUpdatedAt(t)
	return aphc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableUpdatedAt(t *time.Time) *ActionPlanHistoryCreate {
	if t != nil {
		aphc.SetUpdatedAt(*t)
	}
	return aphc
}

// SetCreatedBy sets the "created_by" field.
func (aphc *ActionPlanHistoryCreate) SetCreatedBy(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetCreatedBy(s)
	return aphc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableCreatedBy(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetCreatedBy(*s)
	}
	return aphc
}

// SetUpdatedBy sets the "updated_by" field.
func (aphc *ActionPlanHistoryCreate) SetUpdatedBy(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetUpdatedBy(s)
	return aphc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableUpdatedBy(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetUpdatedBy(*s)
	}
	return aphc
}

// SetDeletedAt sets the "deleted_at" field.
func (aphc *ActionPlanHistoryCreate) SetDeletedAt(t time.Time) *ActionPlanHistoryCreate {
	aphc.mutation.SetDeletedAt(t)
	return aphc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableDeletedAt(t *time.Time) *ActionPlanHistoryCreate {
	if t != nil {
		aphc.SetDeletedAt(*t)
	}
	return aphc
}

// SetDeletedBy sets the "deleted_by" field.
func (aphc *ActionPlanHistoryCreate) SetDeletedBy(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetDeletedBy(s)
	return aphc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableDeletedBy(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetDeletedBy(*s)
	}
	return aphc
}

// SetMappingID sets the "mapping_id" field.
func (aphc *ActionPlanHistoryCreate) SetMappingID(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetMappingID(s)
	return aphc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableMappingID(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetMappingID(*s)
	}
	return aphc
}

// SetTags sets the "tags" field.
func (aphc *ActionPlanHistoryCreate) SetTags(s []string) *ActionPlanHistoryCreate {
	aphc.mutation.SetTags(s)
	return aphc
}

// SetName sets the "name" field.
func (aphc *ActionPlanHistoryCreate) SetName(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetName(s)
	return aphc
}

// SetDescription sets the "description" field.
func (aphc *ActionPlanHistoryCreate) SetDescription(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetDescription(s)
	return aphc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableDescription(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetDescription(*s)
	}
	return aphc
}

// SetStatus sets the "status" field.
func (aphc *ActionPlanHistoryCreate) SetStatus(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetStatus(s)
	return aphc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableStatus(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetStatus(*s)
	}
	return aphc
}

// SetDueDate sets the "due_date" field.
func (aphc *ActionPlanHistoryCreate) SetDueDate(t time.Time) *ActionPlanHistoryCreate {
	aphc.mutation.SetDueDate(t)
	return aphc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableDueDate(t *time.Time) *ActionPlanHistoryCreate {
	if t != nil {
		aphc.SetDueDate(*t)
	}
	return aphc
}

// SetPriority sets the "priority" field.
func (aphc *ActionPlanHistoryCreate) SetPriority(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetPriority(s)
	return aphc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillablePriority(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetPriority(*s)
	}
	return aphc
}

// SetSource sets the "source" field.
func (aphc *ActionPlanHistoryCreate) SetSource(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetSource(s)
	return aphc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableSource(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetSource(*s)
	}
	return aphc
}

// SetDetails sets the "details" field.
func (aphc *ActionPlanHistoryCreate) SetDetails(m map[string]interface{}) *ActionPlanHistoryCreate {
	aphc.mutation.SetDetails(m)
	return aphc
}

// SetID sets the "id" field.
func (aphc *ActionPlanHistoryCreate) SetID(s string) *ActionPlanHistoryCreate {
	aphc.mutation.SetID(s)
	return aphc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aphc *ActionPlanHistoryCreate) SetNillableID(s *string) *ActionPlanHistoryCreate {
	if s != nil {
		aphc.SetID(*s)
	}
	return aphc
}

// Mutation returns the ActionPlanHistoryMutation object of the builder.
func (aphc *ActionPlanHistoryCreate) Mutation() *ActionPlanHistoryMutation {
	return aphc.mutation
}

// Save creates the ActionPlanHistory in the database.
func (aphc *ActionPlanHistoryCreate) Save(ctx context.Context) (*ActionPlanHistory, error) {
	aphc.defaults()
	return withHooks(ctx, aphc.sqlSave, aphc.mutation, aphc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aphc *ActionPlanHistoryCreate) SaveX(ctx context.Context) *ActionPlanHistory {
	v, err := aphc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aphc *ActionPlanHistoryCreate) Exec(ctx context.Context) error {
	_, err := aphc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aphc *ActionPlanHistoryCreate) ExecX(ctx context.Context) {
	if err := aphc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aphc *ActionPlanHistoryCreate) defaults() {
	if _, ok := aphc.mutation.HistoryTime(); !ok {
		v := actionplanhistory.DefaultHistoryTime()
		aphc.mutation.SetHistoryTime(v)
	}
	if _, ok := aphc.mutation.CreatedAt(); !ok {
		v := actionplanhistory.DefaultCreatedAt()
		aphc.mutation.SetCreatedAt(v)
	}
	if _, ok := aphc.mutation.UpdatedAt(); !ok {
		v := actionplanhistory.DefaultUpdatedAt()
		aphc.mutation.SetUpdatedAt(v)
	}
	if _, ok := aphc.mutation.MappingID(); !ok {
		v := actionplanhistory.DefaultMappingID()
		aphc.mutation.SetMappingID(v)
	}
	if _, ok := aphc.mutation.Tags(); !ok {
		v := actionplanhistory.DefaultTags
		aphc.mutation.SetTags(v)
	}
	if _, ok := aphc.mutation.ID(); !ok {
		v := actionplanhistory.DefaultID()
		aphc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aphc *ActionPlanHistoryCreate) check() error {
	if _, ok := aphc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ActionPlanHistory.history_time"`)}
	}
	if _, ok := aphc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ActionPlanHistory.operation"`)}
	}
	if v, ok := aphc.mutation.Operation(); ok {
		if err := actionplanhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.operation": %w`, err)}
		}
	}
	if _, ok := aphc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "ActionPlanHistory.mapping_id"`)}
	}
	if _, ok := aphc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ActionPlanHistory.name"`)}
	}
	return nil
}

func (aphc *ActionPlanHistoryCreate) sqlSave(ctx context.Context) (*ActionPlanHistory, error) {
	if err := aphc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aphc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aphc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ActionPlanHistory.ID type: %T", _spec.ID.Value)
		}
	}
	aphc.mutation.id = &_node.ID
	aphc.mutation.done = true
	return _node, nil
}

func (aphc *ActionPlanHistoryCreate) createSpec() (*ActionPlanHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ActionPlanHistory{config: aphc.config}
		_spec = sqlgraph.NewCreateSpec(actionplanhistory.Table, sqlgraph.NewFieldSpec(actionplanhistory.FieldID, field.TypeString))
	)
	_spec.Schema = aphc.schemaConfig.ActionPlanHistory
	if id, ok := aphc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aphc.mutation.HistoryTime(); ok {
		_spec.SetField(actionplanhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := aphc.mutation.Ref(); ok {
		_spec.SetField(actionplanhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := aphc.mutation.Operation(); ok {
		_spec.SetField(actionplanhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := aphc.mutation.CreatedAt(); ok {
		_spec.SetField(actionplanhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aphc.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aphc.mutation.CreatedBy(); ok {
		_spec.SetField(actionplanhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := aphc.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := aphc.mutation.DeletedAt(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := aphc.mutation.DeletedBy(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := aphc.mutation.MappingID(); ok {
		_spec.SetField(actionplanhistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := aphc.mutation.Tags(); ok {
		_spec.SetField(actionplanhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := aphc.mutation.Name(); ok {
		_spec.SetField(actionplanhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := aphc.mutation.Description(); ok {
		_spec.SetField(actionplanhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := aphc.mutation.Status(); ok {
		_spec.SetField(actionplanhistory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := aphc.mutation.DueDate(); ok {
		_spec.SetField(actionplanhistory.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := aphc.mutation.Priority(); ok {
		_spec.SetField(actionplanhistory.FieldPriority, field.TypeString, value)
		_node.Priority = value
	}
	if value, ok := aphc.mutation.Source(); ok {
		_spec.SetField(actionplanhistory.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := aphc.mutation.Details(); ok {
		_spec.SetField(actionplanhistory.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	return _node, _spec
}

// ActionPlanHistoryCreateBulk is the builder for creating many ActionPlanHistory entities in bulk.
type ActionPlanHistoryCreateBulk struct {
	config
	err      error
	builders []*ActionPlanHistoryCreate
}

// Save creates the ActionPlanHistory entities in the database.
func (aphcb *ActionPlanHistoryCreateBulk) Save(ctx context.Context) ([]*ActionPlanHistory, error) {
	if aphcb.err != nil {
		return nil, aphcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aphcb.builders))
	nodes := make([]*ActionPlanHistory, len(aphcb.builders))
	mutators := make([]Mutator, len(aphcb.builders))
	for i := range aphcb.builders {
		func(i int, root context.Context) {
			builder := aphcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActionPlanHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aphcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aphcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aphcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aphcb *ActionPlanHistoryCreateBulk) SaveX(ctx context.Context) []*ActionPlanHistory {
	v, err := aphcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aphcb *ActionPlanHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := aphcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aphcb *ActionPlanHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := aphcb.Exec(ctx); err != nil {
		panic(err)
	}
}
