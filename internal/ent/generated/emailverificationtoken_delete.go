// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/emailverificationtoken"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// EmailVerificationTokenDelete is the builder for deleting a EmailVerificationToken entity.
type EmailVerificationTokenDelete struct {
	config
	hooks    []Hook
	mutation *EmailVerificationTokenMutation
}

// Where appends a list predicates to the EmailVerificationTokenDelete builder.
func (evtd *EmailVerificationTokenDelete) Where(ps ...predicate.EmailVerificationToken) *EmailVerificationTokenDelete {
	evtd.mutation.Where(ps...)
	return evtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (evtd *EmailVerificationTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, evtd.sqlExec, evtd.mutation, evtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (evtd *EmailVerificationTokenDelete) ExecX(ctx context.Context) int {
	n, err := evtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (evtd *EmailVerificationTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(emailverificationtoken.Table, sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString))
	_spec.Node.Schema = evtd.schemaConfig.EmailVerificationToken
	ctx = internal.NewSchemaConfigContext(ctx, evtd.schemaConfig)
	if ps := evtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, evtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	evtd.mutation.done = true
	return affected, err
}

// EmailVerificationTokenDeleteOne is the builder for deleting a single EmailVerificationToken entity.
type EmailVerificationTokenDeleteOne struct {
	evtd *EmailVerificationTokenDelete
}

// Where appends a list predicates to the EmailVerificationTokenDelete builder.
func (evtdo *EmailVerificationTokenDeleteOne) Where(ps ...predicate.EmailVerificationToken) *EmailVerificationTokenDeleteOne {
	evtdo.evtd.mutation.Where(ps...)
	return evtdo
}

// Exec executes the deletion query.
func (evtdo *EmailVerificationTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := evtdo.evtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{emailverificationtoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (evtdo *EmailVerificationTokenDeleteOne) ExecX(ctx context.Context) {
	if err := evtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
