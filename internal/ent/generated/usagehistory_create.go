// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/usagehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// UsageHistoryCreate is the builder for creating a UsageHistory entity.
type UsageHistoryCreate struct {
	config
	mutation *UsageHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (uhc *UsageHistoryCreate) SetHistoryTime(t time.Time) *UsageHistoryCreate {
	uhc.mutation.SetHistoryTime(t)
	return uhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableHistoryTime(t *time.Time) *UsageHistoryCreate {
	if t != nil {
		uhc.SetHistoryTime(*t)
	}
	return uhc
}

// SetRef sets the "ref" field.
func (uhc *UsageHistoryCreate) SetRef(s string) *UsageHistoryCreate {
	uhc.mutation.SetRef(s)
	return uhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableRef(s *string) *UsageHistoryCreate {
	if s != nil {
		uhc.SetRef(*s)
	}
	return uhc
}

// SetOperation sets the "operation" field.
func (uhc *UsageHistoryCreate) SetOperation(ht history.OpType) *UsageHistoryCreate {
	uhc.mutation.SetOperation(ht)
	return uhc
}

// SetCreatedAt sets the "created_at" field.
func (uhc *UsageHistoryCreate) SetCreatedAt(t time.Time) *UsageHistoryCreate {
	uhc.mutation.SetCreatedAt(t)
	return uhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableCreatedAt(t *time.Time) *UsageHistoryCreate {
	if t != nil {
		uhc.SetCreatedAt(*t)
	}
	return uhc
}

// SetUpdatedAt sets the "updated_at" field.
func (uhc *UsageHistoryCreate) SetUpdatedAt(t time.Time) *UsageHistoryCreate {
	uhc.mutation.SetUpdatedAt(t)
	return uhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableUpdatedAt(t *time.Time) *UsageHistoryCreate {
	if t != nil {
		uhc.SetUpdatedAt(*t)
	}
	return uhc
}

// SetCreatedBy sets the "created_by" field.
func (uhc *UsageHistoryCreate) SetCreatedBy(s string) *UsageHistoryCreate {
	uhc.mutation.SetCreatedBy(s)
	return uhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableCreatedBy(s *string) *UsageHistoryCreate {
	if s != nil {
		uhc.SetCreatedBy(*s)
	}
	return uhc
}

// SetUpdatedBy sets the "updated_by" field.
func (uhc *UsageHistoryCreate) SetUpdatedBy(s string) *UsageHistoryCreate {
	uhc.mutation.SetUpdatedBy(s)
	return uhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableUpdatedBy(s *string) *UsageHistoryCreate {
	if s != nil {
		uhc.SetUpdatedBy(*s)
	}
	return uhc
}

// SetDeletedAt sets the "deleted_at" field.
func (uhc *UsageHistoryCreate) SetDeletedAt(t time.Time) *UsageHistoryCreate {
	uhc.mutation.SetDeletedAt(t)
	return uhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableDeletedAt(t *time.Time) *UsageHistoryCreate {
	if t != nil {
		uhc.SetDeletedAt(*t)
	}
	return uhc
}

// SetDeletedBy sets the "deleted_by" field.
func (uhc *UsageHistoryCreate) SetDeletedBy(s string) *UsageHistoryCreate {
	uhc.mutation.SetDeletedBy(s)
	return uhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableDeletedBy(s *string) *UsageHistoryCreate {
	if s != nil {
		uhc.SetDeletedBy(*s)
	}
	return uhc
}

// SetTags sets the "tags" field.
func (uhc *UsageHistoryCreate) SetTags(s []string) *UsageHistoryCreate {
	uhc.mutation.SetTags(s)
	return uhc
}

// SetOrganizationID sets the "organization_id" field.
func (uhc *UsageHistoryCreate) SetOrganizationID(s string) *UsageHistoryCreate {
	uhc.mutation.SetOrganizationID(s)
	return uhc
}

// SetResourceType sets the "resource_type" field.
func (uhc *UsageHistoryCreate) SetResourceType(et enums.UsageType) *UsageHistoryCreate {
	uhc.mutation.SetResourceType(et)
	return uhc
}

// SetUsed sets the "used" field.
func (uhc *UsageHistoryCreate) SetUsed(i int64) *UsageHistoryCreate {
	uhc.mutation.SetUsed(i)
	return uhc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableUsed(i *int64) *UsageHistoryCreate {
	if i != nil {
		uhc.SetUsed(*i)
	}
	return uhc
}

// SetLimit sets the "limit" field.
func (uhc *UsageHistoryCreate) SetLimit(i int64) *UsageHistoryCreate {
	uhc.mutation.SetLimit(i)
	return uhc
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableLimit(i *int64) *UsageHistoryCreate {
	if i != nil {
		uhc.SetLimit(*i)
	}
	return uhc
}

// SetID sets the "id" field.
func (uhc *UsageHistoryCreate) SetID(s string) *UsageHistoryCreate {
	uhc.mutation.SetID(s)
	return uhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uhc *UsageHistoryCreate) SetNillableID(s *string) *UsageHistoryCreate {
	if s != nil {
		uhc.SetID(*s)
	}
	return uhc
}

// Mutation returns the UsageHistoryMutation object of the builder.
func (uhc *UsageHistoryCreate) Mutation() *UsageHistoryMutation {
	return uhc.mutation
}

// Save creates the UsageHistory in the database.
func (uhc *UsageHistoryCreate) Save(ctx context.Context) (*UsageHistory, error) {
	uhc.defaults()
	return withHooks(ctx, uhc.sqlSave, uhc.mutation, uhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uhc *UsageHistoryCreate) SaveX(ctx context.Context) *UsageHistory {
	v, err := uhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uhc *UsageHistoryCreate) Exec(ctx context.Context) error {
	_, err := uhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhc *UsageHistoryCreate) ExecX(ctx context.Context) {
	if err := uhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhc *UsageHistoryCreate) defaults() {
	if _, ok := uhc.mutation.HistoryTime(); !ok {
		v := usagehistory.DefaultHistoryTime()
		uhc.mutation.SetHistoryTime(v)
	}
	if _, ok := uhc.mutation.CreatedAt(); !ok {
		v := usagehistory.DefaultCreatedAt()
		uhc.mutation.SetCreatedAt(v)
	}
	if _, ok := uhc.mutation.UpdatedAt(); !ok {
		v := usagehistory.DefaultUpdatedAt()
		uhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uhc.mutation.Tags(); !ok {
		v := usagehistory.DefaultTags
		uhc.mutation.SetTags(v)
	}
	if _, ok := uhc.mutation.Used(); !ok {
		v := usagehistory.DefaultUsed
		uhc.mutation.SetUsed(v)
	}
	if _, ok := uhc.mutation.Limit(); !ok {
		v := usagehistory.DefaultLimit
		uhc.mutation.SetLimit(v)
	}
	if _, ok := uhc.mutation.ID(); !ok {
		v := usagehistory.DefaultID()
		uhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhc *UsageHistoryCreate) check() error {
	if _, ok := uhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "UsageHistory.history_time"`)}
	}
	if _, ok := uhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "UsageHistory.operation"`)}
	}
	if v, ok := uhc.mutation.Operation(); ok {
		if err := usagehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "UsageHistory.operation": %w`, err)}
		}
	}
	if _, ok := uhc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`generated: missing required field "UsageHistory.organization_id"`)}
	}
	if _, ok := uhc.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`generated: missing required field "UsageHistory.resource_type"`)}
	}
	if v, ok := uhc.mutation.ResourceType(); ok {
		if err := usagehistory.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`generated: validator failed for field "UsageHistory.resource_type": %w`, err)}
		}
	}
	if _, ok := uhc.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`generated: missing required field "UsageHistory.used"`)}
	}
	if _, ok := uhc.mutation.Limit(); !ok {
		return &ValidationError{Name: "limit", err: errors.New(`generated: missing required field "UsageHistory.limit"`)}
	}
	return nil
}

func (uhc *UsageHistoryCreate) sqlSave(ctx context.Context) (*UsageHistory, error) {
	if err := uhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UsageHistory.ID type: %T", _spec.ID.Value)
		}
	}
	uhc.mutation.id = &_node.ID
	uhc.mutation.done = true
	return _node, nil
}

func (uhc *UsageHistoryCreate) createSpec() (*UsageHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &UsageHistory{config: uhc.config}
		_spec = sqlgraph.NewCreateSpec(usagehistory.Table, sqlgraph.NewFieldSpec(usagehistory.FieldID, field.TypeString))
	)
	_spec.Schema = uhc.schemaConfig.UsageHistory
	if id, ok := uhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uhc.mutation.HistoryTime(); ok {
		_spec.SetField(usagehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := uhc.mutation.Ref(); ok {
		_spec.SetField(usagehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := uhc.mutation.Operation(); ok {
		_spec.SetField(usagehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := uhc.mutation.CreatedAt(); ok {
		_spec.SetField(usagehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uhc.mutation.UpdatedAt(); ok {
		_spec.SetField(usagehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uhc.mutation.CreatedBy(); ok {
		_spec.SetField(usagehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := uhc.mutation.UpdatedBy(); ok {
		_spec.SetField(usagehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := uhc.mutation.DeletedAt(); ok {
		_spec.SetField(usagehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := uhc.mutation.DeletedBy(); ok {
		_spec.SetField(usagehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := uhc.mutation.Tags(); ok {
		_spec.SetField(usagehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := uhc.mutation.OrganizationID(); ok {
		_spec.SetField(usagehistory.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := uhc.mutation.ResourceType(); ok {
		_spec.SetField(usagehistory.FieldResourceType, field.TypeEnum, value)
		_node.ResourceType = value
	}
	if value, ok := uhc.mutation.Used(); ok {
		_spec.SetField(usagehistory.FieldUsed, field.TypeInt64, value)
		_node.Used = value
	}
	if value, ok := uhc.mutation.Limit(); ok {
		_spec.SetField(usagehistory.FieldLimit, field.TypeInt64, value)
		_node.Limit = value
	}
	return _node, _spec
}

// UsageHistoryCreateBulk is the builder for creating many UsageHistory entities in bulk.
type UsageHistoryCreateBulk struct {
	config
	err      error
	builders []*UsageHistoryCreate
}

// Save creates the UsageHistory entities in the database.
func (uhcb *UsageHistoryCreateBulk) Save(ctx context.Context) ([]*UsageHistory, error) {
	if uhcb.err != nil {
		return nil, uhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uhcb.builders))
	nodes := make([]*UsageHistory, len(uhcb.builders))
	mutators := make([]Mutator, len(uhcb.builders))
	for i := range uhcb.builders {
		func(i int, root context.Context) {
			builder := uhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsageHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uhcb *UsageHistoryCreateBulk) SaveX(ctx context.Context) []*UsageHistory {
	v, err := uhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uhcb *UsageHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := uhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhcb *UsageHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := uhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
