// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *FileCreate) SetCreatedAt(v time.Time) *FileCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableCreatedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *FileCreate) SetUpdatedAt(v time.Time) *FileCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableUpdatedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *FileCreate) SetCreatedBy(v string) *FileCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *FileCreate) SetNillableCreatedBy(v *string) *FileCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *FileCreate) SetUpdatedBy(v string) *FileCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *FileCreate) SetNillableUpdatedBy(v *string) *FileCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *FileCreate) SetDeletedAt(v time.Time) *FileCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableDeletedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *FileCreate) SetDeletedBy(v string) *FileCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *FileCreate) SetNillableDeletedBy(v *string) *FileCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *FileCreate) SetTags(v []string) *FileCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *FileCreate) SetSystemOwned(v bool) *FileCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *FileCreate) SetNillableSystemOwned(v *bool) *FileCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *FileCreate) SetInternalNotes(v string) *FileCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *FileCreate) SetNillableInternalNotes(v *string) *FileCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *FileCreate) SetSystemInternalID(v string) *FileCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *FileCreate) SetNillableSystemInternalID(v *string) *FileCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetProvidedFileName sets the "provided_file_name" field.
func (_c *FileCreate) SetProvidedFileName(v string) *FileCreate {
	_c.mutation.SetProvidedFileName(v)
	return _c
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (_c *FileCreate) SetProvidedFileExtension(v string) *FileCreate {
	_c.mutation.SetProvidedFileExtension(v)
	return _c
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (_c *FileCreate) SetProvidedFileSize(v int64) *FileCreate {
	_c.mutation.SetProvidedFileSize(v)
	return _c
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (_c *FileCreate) SetNillableProvidedFileSize(v *int64) *FileCreate {
	if v != nil {
		_c.SetProvidedFileSize(*v)
	}
	return _c
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (_c *FileCreate) SetPersistedFileSize(v int64) *FileCreate {
	_c.mutation.SetPersistedFileSize(v)
	return _c
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (_c *FileCreate) SetNillablePersistedFileSize(v *int64) *FileCreate {
	if v != nil {
		_c.SetPersistedFileSize(*v)
	}
	return _c
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (_c *FileCreate) SetDetectedMimeType(v string) *FileCreate {
	_c.mutation.SetDetectedMimeType(v)
	return _c
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (_c *FileCreate) SetNillableDetectedMimeType(v *string) *FileCreate {
	if v != nil {
		_c.SetDetectedMimeType(*v)
	}
	return _c
}

// SetMd5Hash sets the "md5_hash" field.
func (_c *FileCreate) SetMd5Hash(v string) *FileCreate {
	_c.mutation.SetMd5Hash(v)
	return _c
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (_c *FileCreate) SetNillableMd5Hash(v *string) *FileCreate {
	if v != nil {
		_c.SetMd5Hash(*v)
	}
	return _c
}

// SetDetectedContentType sets the "detected_content_type" field.
func (_c *FileCreate) SetDetectedContentType(v string) *FileCreate {
	_c.mutation.SetDetectedContentType(v)
	return _c
}

// SetStoreKey sets the "store_key" field.
func (_c *FileCreate) SetStoreKey(v string) *FileCreate {
	_c.mutation.SetStoreKey(v)
	return _c
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (_c *FileCreate) SetNillableStoreKey(v *string) *FileCreate {
	if v != nil {
		_c.SetStoreKey(*v)
	}
	return _c
}

// SetCategoryType sets the "category_type" field.
func (_c *FileCreate) SetCategoryType(v string) *FileCreate {
	_c.mutation.SetCategoryType(v)
	return _c
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (_c *FileCreate) SetNillableCategoryType(v *string) *FileCreate {
	if v != nil {
		_c.SetCategoryType(*v)
	}
	return _c
}

// SetURI sets the "uri" field.
func (_c *FileCreate) SetURI(v string) *FileCreate {
	_c.mutation.SetURI(v)
	return _c
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (_c *FileCreate) SetNillableURI(v *string) *FileCreate {
	if v != nil {
		_c.SetURI(*v)
	}
	return _c
}

// SetStorageScheme sets the "storage_scheme" field.
func (_c *FileCreate) SetStorageScheme(v string) *FileCreate {
	_c.mutation.SetStorageScheme(v)
	return _c
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (_c *FileCreate) SetNillableStorageScheme(v *string) *FileCreate {
	if v != nil {
		_c.SetStorageScheme(*v)
	}
	return _c
}

// SetStorageVolume sets the "storage_volume" field.
func (_c *FileCreate) SetStorageVolume(v string) *FileCreate {
	_c.mutation.SetStorageVolume(v)
	return _c
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (_c *FileCreate) SetNillableStorageVolume(v *string) *FileCreate {
	if v != nil {
		_c.SetStorageVolume(*v)
	}
	return _c
}

// SetStoragePath sets the "storage_path" field.
func (_c *FileCreate) SetStoragePath(v string) *FileCreate {
	_c.mutation.SetStoragePath(v)
	return _c
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (_c *FileCreate) SetNillableStoragePath(v *string) *FileCreate {
	if v != nil {
		_c.SetStoragePath(*v)
	}
	return _c
}

// SetFileContents sets the "file_contents" field.
func (_c *FileCreate) SetFileContents(v []byte) *FileCreate {
	_c.mutation.SetFileContents(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *FileCreate) SetMetadata(v map[string]interface{}) *FileCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetStorageRegion sets the "storage_region" field.
func (_c *FileCreate) SetStorageRegion(v string) *FileCreate {
	_c.mutation.SetStorageRegion(v)
	return _c
}

// SetNillableStorageRegion sets the "storage_region" field if the given value is not nil.
func (_c *FileCreate) SetNillableStorageRegion(v *string) *FileCreate {
	if v != nil {
		_c.SetStorageRegion(*v)
	}
	return _c
}

// SetStorageProvider sets the "storage_provider" field.
func (_c *FileCreate) SetStorageProvider(v string) *FileCreate {
	_c.mutation.SetStorageProvider(v)
	return _c
}

// SetNillableStorageProvider sets the "storage_provider" field if the given value is not nil.
func (_c *FileCreate) SetNillableStorageProvider(v *string) *FileCreate {
	if v != nil {
		_c.SetStorageProvider(*v)
	}
	return _c
}

// SetLastAccessedAt sets the "last_accessed_at" field.
func (_c *FileCreate) SetLastAccessedAt(v time.Time) *FileCreate {
	_c.mutation.SetLastAccessedAt(v)
	return _c
}

// SetNillableLastAccessedAt sets the "last_accessed_at" field if the given value is not nil.
func (_c *FileCreate) SetNillableLastAccessedAt(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetLastAccessedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *FileCreate) SetID(v string) *FileCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *FileCreate) SetNillableID(v *string) *FileCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (_c *FileCreate) AddUserIDs(ids ...string) *FileCreate {
	_c.mutation.AddUserIDs(ids...)
	return _c
}

// AddUser adds the "user" edges to the User entity.
func (_c *FileCreate) AddUser(v ...*User) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (_c *FileCreate) AddOrganizationIDs(ids ...string) *FileCreate {
	_c.mutation.AddOrganizationIDs(ids...)
	return _c
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (_c *FileCreate) AddOrganization(v ...*Organization) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrganizationIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_c *FileCreate) AddGroupIDs(ids ...string) *FileCreate {
	_c.mutation.AddGroupIDs(ids...)
	return _c
}

// AddGroups adds the "groups" edges to the Group entity.
func (_c *FileCreate) AddGroups(v ...*Group) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGroupIDs(ids...)
}

// AddContactIDs adds the "contact" edge to the Contact entity by IDs.
func (_c *FileCreate) AddContactIDs(ids ...string) *FileCreate {
	_c.mutation.AddContactIDs(ids...)
	return _c
}

// AddContact adds the "contact" edges to the Contact entity.
func (_c *FileCreate) AddContact(v ...*Contact) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddContactIDs(ids...)
}

// AddEntityIDs adds the "entity" edge to the Entity entity by IDs.
func (_c *FileCreate) AddEntityIDs(ids ...string) *FileCreate {
	_c.mutation.AddEntityIDs(ids...)
	return _c
}

// AddEntity adds the "entity" edges to the Entity entity.
func (_c *FileCreate) AddEntity(v ...*Entity) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntityIDs(ids...)
}

// AddUserSettingIDs adds the "user_setting" edge to the UserSetting entity by IDs.
func (_c *FileCreate) AddUserSettingIDs(ids ...string) *FileCreate {
	_c.mutation.AddUserSettingIDs(ids...)
	return _c
}

// AddUserSetting adds the "user_setting" edges to the UserSetting entity.
func (_c *FileCreate) AddUserSetting(v ...*UserSetting) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserSettingIDs(ids...)
}

// AddOrganizationSettingIDs adds the "organization_setting" edge to the OrganizationSetting entity by IDs.
func (_c *FileCreate) AddOrganizationSettingIDs(ids ...string) *FileCreate {
	_c.mutation.AddOrganizationSettingIDs(ids...)
	return _c
}

// AddOrganizationSetting adds the "organization_setting" edges to the OrganizationSetting entity.
func (_c *FileCreate) AddOrganizationSetting(v ...*OrganizationSetting) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrganizationSettingIDs(ids...)
}

// AddTemplateIDs adds the "template" edge to the Template entity by IDs.
func (_c *FileCreate) AddTemplateIDs(ids ...string) *FileCreate {
	_c.mutation.AddTemplateIDs(ids...)
	return _c
}

// AddTemplate adds the "template" edges to the Template entity.
func (_c *FileCreate) AddTemplate(v ...*Template) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTemplateIDs(ids...)
}

// AddDocumentIDs adds the "document" edge to the DocumentData entity by IDs.
func (_c *FileCreate) AddDocumentIDs(ids ...string) *FileCreate {
	_c.mutation.AddDocumentIDs(ids...)
	return _c
}

// AddDocument adds the "document" edges to the DocumentData entity.
func (_c *FileCreate) AddDocument(v ...*DocumentData) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDocumentIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (_c *FileCreate) AddProgramIDs(ids ...string) *FileCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddProgram adds the "program" edges to the Program entity.
func (_c *FileCreate) AddProgram(v ...*Program) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_c *FileCreate) AddEvidenceIDs(ids ...string) *FileCreate {
	_c.mutation.AddEvidenceIDs(ids...)
	return _c
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_c *FileCreate) AddEvidence(v ...*Evidence) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEvidenceIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_c *FileCreate) AddEventIDs(ids ...string) *FileCreate {
	_c.mutation.AddEventIDs(ids...)
	return _c
}

// AddEvents adds the "events" edges to the Event entity.
func (_c *FileCreate) AddEvents(v ...*Event) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDs(ids...)
}

// AddTrustCenterSettingIDs adds the "trust_center_setting" edge to the TrustCenterSetting entity by IDs.
func (_c *FileCreate) AddTrustCenterSettingIDs(ids ...string) *FileCreate {
	_c.mutation.AddTrustCenterSettingIDs(ids...)
	return _c
}

// AddTrustCenterSetting adds the "trust_center_setting" edges to the TrustCenterSetting entity.
func (_c *FileCreate) AddTrustCenterSetting(v ...*TrustCenterSetting) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTrustCenterSettingIDs(ids...)
}

// AddSubprocessorIDs adds the "subprocessor" edge to the Subprocessor entity by IDs.
func (_c *FileCreate) AddSubprocessorIDs(ids ...string) *FileCreate {
	_c.mutation.AddSubprocessorIDs(ids...)
	return _c
}

// AddSubprocessor adds the "subprocessor" edges to the Subprocessor entity.
func (_c *FileCreate) AddSubprocessor(v ...*Subprocessor) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubprocessorIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_c *FileCreate) AddIntegrationIDs(ids ...string) *FileCreate {
	_c.mutation.AddIntegrationIDs(ids...)
	return _c
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_c *FileCreate) AddIntegrations(v ...*Integration) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddIntegrationIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (_c *FileCreate) AddSecretIDs(ids ...string) *FileCreate {
	_c.mutation.AddSecretIDs(ids...)
	return _c
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (_c *FileCreate) AddSecrets(v ...*Hush) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSecretIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_c *FileCreate) Mutation() *FileMutation {
	return _c.mutation
}

// Save creates the File in the database.
func (_c *FileCreate) Save(ctx context.Context) (*File, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FileCreate) SaveX(ctx context.Context) *File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FileCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if file.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized file.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := file.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if file.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized file.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := file.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := file.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := file.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if file.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized file.DefaultID (forgotten import generated/runtime?)")
		}
		v := file.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *FileCreate) check() error {
	if _, ok := _c.mutation.ProvidedFileName(); !ok {
		return &ValidationError{Name: "provided_file_name", err: errors.New(`generated: missing required field "File.provided_file_name"`)}
	}
	if _, ok := _c.mutation.ProvidedFileExtension(); !ok {
		return &ValidationError{Name: "provided_file_extension", err: errors.New(`generated: missing required field "File.provided_file_extension"`)}
	}
	if v, ok := _c.mutation.ProvidedFileSize(); ok {
		if err := file.ProvidedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "provided_file_size", err: fmt.Errorf(`generated: validator failed for field "File.provided_file_size": %w`, err)}
		}
	}
	if v, ok := _c.mutation.PersistedFileSize(); ok {
		if err := file.PersistedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "persisted_file_size", err: fmt.Errorf(`generated: validator failed for field "File.persisted_file_size": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DetectedContentType(); !ok {
		return &ValidationError{Name: "detected_content_type", err: errors.New(`generated: missing required field "File.detected_content_type"`)}
	}
	return nil
}

func (_c *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected File.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.File
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(file.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(file.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(file.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(file.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(file.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	if value, ok := _c.mutation.ProvidedFileName(); ok {
		_spec.SetField(file.FieldProvidedFileName, field.TypeString, value)
		_node.ProvidedFileName = value
	}
	if value, ok := _c.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(file.FieldProvidedFileExtension, field.TypeString, value)
		_node.ProvidedFileExtension = value
	}
	if value, ok := _c.mutation.ProvidedFileSize(); ok {
		_spec.SetField(file.FieldProvidedFileSize, field.TypeInt64, value)
		_node.ProvidedFileSize = value
	}
	if value, ok := _c.mutation.PersistedFileSize(); ok {
		_spec.SetField(file.FieldPersistedFileSize, field.TypeInt64, value)
		_node.PersistedFileSize = value
	}
	if value, ok := _c.mutation.DetectedMimeType(); ok {
		_spec.SetField(file.FieldDetectedMimeType, field.TypeString, value)
		_node.DetectedMimeType = value
	}
	if value, ok := _c.mutation.Md5Hash(); ok {
		_spec.SetField(file.FieldMd5Hash, field.TypeString, value)
		_node.Md5Hash = value
	}
	if value, ok := _c.mutation.DetectedContentType(); ok {
		_spec.SetField(file.FieldDetectedContentType, field.TypeString, value)
		_node.DetectedContentType = value
	}
	if value, ok := _c.mutation.StoreKey(); ok {
		_spec.SetField(file.FieldStoreKey, field.TypeString, value)
		_node.StoreKey = value
	}
	if value, ok := _c.mutation.CategoryType(); ok {
		_spec.SetField(file.FieldCategoryType, field.TypeString, value)
		_node.CategoryType = value
	}
	if value, ok := _c.mutation.URI(); ok {
		_spec.SetField(file.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := _c.mutation.StorageScheme(); ok {
		_spec.SetField(file.FieldStorageScheme, field.TypeString, value)
		_node.StorageScheme = value
	}
	if value, ok := _c.mutation.StorageVolume(); ok {
		_spec.SetField(file.FieldStorageVolume, field.TypeString, value)
		_node.StorageVolume = value
	}
	if value, ok := _c.mutation.StoragePath(); ok {
		_spec.SetField(file.FieldStoragePath, field.TypeString, value)
		_node.StoragePath = value
	}
	if value, ok := _c.mutation.FileContents(); ok {
		_spec.SetField(file.FieldFileContents, field.TypeBytes, value)
		_node.FileContents = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(file.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.StorageRegion(); ok {
		_spec.SetField(file.FieldStorageRegion, field.TypeString, value)
		_node.StorageRegion = value
	}
	if value, ok := _c.mutation.StorageProvider(); ok {
		_spec.SetField(file.FieldStorageProvider, field.TypeString, value)
		_node.StorageProvider = value
	}
	if value, ok := _c.mutation.LastAccessedAt(); ok {
		_spec.SetField(file.FieldLastAccessedAt, field.TypeTime, value)
		_node.LastAccessedAt = &value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupsTable,
			Columns: file.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserSettingTable,
			Columns: file.UserSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrganizationSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationSettingTable,
			Columns: file.OrganizationSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentTable,
			Columns: file.DocumentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EvidenceTable,
			Columns: file.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TrustCenterSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TrustCenterSettingTable,
			Columns: file.TrustCenterSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubprocessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.SubprocessorTable,
			Columns: file.SubprocessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.IntegrationsTable,
			Columns: []string{file.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.SecretsTable,
			Columns: file.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.FileSecrets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	err      error
	builders []*FileCreate
}

// Save creates the File entities in the database.
func (_c *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*File, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
