// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessmenthistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssessmentHistoryUpdate is the builder for updating AssessmentHistory entities.
type AssessmentHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *AssessmentHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssessmentHistoryUpdate builder.
func (_u *AssessmentHistoryUpdate) Where(ps ...predicate.AssessmentHistory) *AssessmentHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AssessmentHistoryUpdate) SetUpdatedAt(v time.Time) *AssessmentHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *AssessmentHistoryUpdate) ClearUpdatedAt() *AssessmentHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *AssessmentHistoryUpdate) SetUpdatedBy(v string) *AssessmentHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *AssessmentHistoryUpdate) SetNillableUpdatedBy(v *string) *AssessmentHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *AssessmentHistoryUpdate) ClearUpdatedBy() *AssessmentHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AssessmentHistoryUpdate) SetDeletedAt(v time.Time) *AssessmentHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AssessmentHistoryUpdate) SetNillableDeletedAt(v *time.Time) *AssessmentHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AssessmentHistoryUpdate) ClearDeletedAt() *AssessmentHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *AssessmentHistoryUpdate) SetDeletedBy(v string) *AssessmentHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *AssessmentHistoryUpdate) SetNillableDeletedBy(v *string) *AssessmentHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *AssessmentHistoryUpdate) ClearDeletedBy() *AssessmentHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *AssessmentHistoryUpdate) SetTags(v []string) *AssessmentHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *AssessmentHistoryUpdate) AppendTags(v []string) *AssessmentHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *AssessmentHistoryUpdate) ClearTags() *AssessmentHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *AssessmentHistoryUpdate) SetOwnerID(v string) *AssessmentHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *AssessmentHistoryUpdate) SetNillableOwnerID(v *string) *AssessmentHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *AssessmentHistoryUpdate) ClearOwnerID() *AssessmentHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *AssessmentHistoryUpdate) SetName(v string) *AssessmentHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AssessmentHistoryUpdate) SetNillableName(v *string) *AssessmentHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTemplateID sets the "template_id" field.
func (_u *AssessmentHistoryUpdate) SetTemplateID(v string) *AssessmentHistoryUpdate {
	_u.mutation.SetTemplateID(v)
	return _u
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (_u *AssessmentHistoryUpdate) SetNillableTemplateID(v *string) *AssessmentHistoryUpdate {
	if v != nil {
		_u.SetTemplateID(*v)
	}
	return _u
}

// SetAssessmentOwnerID sets the "assessment_owner_id" field.
func (_u *AssessmentHistoryUpdate) SetAssessmentOwnerID(v string) *AssessmentHistoryUpdate {
	_u.mutation.SetAssessmentOwnerID(v)
	return _u
}

// SetNillableAssessmentOwnerID sets the "assessment_owner_id" field if the given value is not nil.
func (_u *AssessmentHistoryUpdate) SetNillableAssessmentOwnerID(v *string) *AssessmentHistoryUpdate {
	if v != nil {
		_u.SetAssessmentOwnerID(*v)
	}
	return _u
}

// ClearAssessmentOwnerID clears the value of the "assessment_owner_id" field.
func (_u *AssessmentHistoryUpdate) ClearAssessmentOwnerID() *AssessmentHistoryUpdate {
	_u.mutation.ClearAssessmentOwnerID()
	return _u
}

// Mutation returns the AssessmentHistoryMutation object of the builder.
func (_u *AssessmentHistoryUpdate) Mutation() *AssessmentHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AssessmentHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AssessmentHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AssessmentHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AssessmentHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AssessmentHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if assessmenthistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessmenthistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := assessmenthistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AssessmentHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssessmentHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AssessmentHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assessmenthistory.Table, assessmenthistory.Columns, sqlgraph.NewFieldSpec(assessmenthistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(assessmenthistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(assessmenthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmenthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(assessmenthistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(assessmenthistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmenthistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(assessmenthistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(assessmenthistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(assessmenthistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(assessmenthistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(assessmenthistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(assessmenthistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assessmenthistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(assessmenthistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(assessmenthistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(assessmenthistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(assessmenthistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.TemplateID(); ok {
		_spec.SetField(assessmenthistory.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := _u.mutation.AssessmentOwnerID(); ok {
		_spec.SetField(assessmenthistory.FieldAssessmentOwnerID, field.TypeString, value)
	}
	if _u.mutation.AssessmentOwnerIDCleared() {
		_spec.ClearField(assessmenthistory.FieldAssessmentOwnerID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.AssessmentHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assessmenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AssessmentHistoryUpdateOne is the builder for updating a single AssessmentHistory entity.
type AssessmentHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssessmentHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AssessmentHistoryUpdateOne) SetUpdatedAt(v time.Time) *AssessmentHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *AssessmentHistoryUpdateOne) ClearUpdatedAt() *AssessmentHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *AssessmentHistoryUpdateOne) SetUpdatedBy(v string) *AssessmentHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *AssessmentHistoryUpdateOne) SetNillableUpdatedBy(v *string) *AssessmentHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *AssessmentHistoryUpdateOne) ClearUpdatedBy() *AssessmentHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AssessmentHistoryUpdateOne) SetDeletedAt(v time.Time) *AssessmentHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AssessmentHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *AssessmentHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AssessmentHistoryUpdateOne) ClearDeletedAt() *AssessmentHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *AssessmentHistoryUpdateOne) SetDeletedBy(v string) *AssessmentHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *AssessmentHistoryUpdateOne) SetNillableDeletedBy(v *string) *AssessmentHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *AssessmentHistoryUpdateOne) ClearDeletedBy() *AssessmentHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *AssessmentHistoryUpdateOne) SetTags(v []string) *AssessmentHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *AssessmentHistoryUpdateOne) AppendTags(v []string) *AssessmentHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *AssessmentHistoryUpdateOne) ClearTags() *AssessmentHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *AssessmentHistoryUpdateOne) SetOwnerID(v string) *AssessmentHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *AssessmentHistoryUpdateOne) SetNillableOwnerID(v *string) *AssessmentHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *AssessmentHistoryUpdateOne) ClearOwnerID() *AssessmentHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *AssessmentHistoryUpdateOne) SetName(v string) *AssessmentHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AssessmentHistoryUpdateOne) SetNillableName(v *string) *AssessmentHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTemplateID sets the "template_id" field.
func (_u *AssessmentHistoryUpdateOne) SetTemplateID(v string) *AssessmentHistoryUpdateOne {
	_u.mutation.SetTemplateID(v)
	return _u
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (_u *AssessmentHistoryUpdateOne) SetNillableTemplateID(v *string) *AssessmentHistoryUpdateOne {
	if v != nil {
		_u.SetTemplateID(*v)
	}
	return _u
}

// SetAssessmentOwnerID sets the "assessment_owner_id" field.
func (_u *AssessmentHistoryUpdateOne) SetAssessmentOwnerID(v string) *AssessmentHistoryUpdateOne {
	_u.mutation.SetAssessmentOwnerID(v)
	return _u
}

// SetNillableAssessmentOwnerID sets the "assessment_owner_id" field if the given value is not nil.
func (_u *AssessmentHistoryUpdateOne) SetNillableAssessmentOwnerID(v *string) *AssessmentHistoryUpdateOne {
	if v != nil {
		_u.SetAssessmentOwnerID(*v)
	}
	return _u
}

// ClearAssessmentOwnerID clears the value of the "assessment_owner_id" field.
func (_u *AssessmentHistoryUpdateOne) ClearAssessmentOwnerID() *AssessmentHistoryUpdateOne {
	_u.mutation.ClearAssessmentOwnerID()
	return _u
}

// Mutation returns the AssessmentHistoryMutation object of the builder.
func (_u *AssessmentHistoryUpdateOne) Mutation() *AssessmentHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the AssessmentHistoryUpdate builder.
func (_u *AssessmentHistoryUpdateOne) Where(ps ...predicate.AssessmentHistory) *AssessmentHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AssessmentHistoryUpdateOne) Select(field string, fields ...string) *AssessmentHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AssessmentHistory entity.
func (_u *AssessmentHistoryUpdateOne) Save(ctx context.Context) (*AssessmentHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AssessmentHistoryUpdateOne) SaveX(ctx context.Context) *AssessmentHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AssessmentHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AssessmentHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AssessmentHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if assessmenthistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessmenthistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := assessmenthistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AssessmentHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssessmentHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AssessmentHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AssessmentHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(assessmenthistory.Table, assessmenthistory.Columns, sqlgraph.NewFieldSpec(assessmenthistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AssessmentHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assessmenthistory.FieldID)
		for _, f := range fields {
			if !assessmenthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != assessmenthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(assessmenthistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(assessmenthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmenthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(assessmenthistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(assessmenthistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmenthistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(assessmenthistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(assessmenthistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(assessmenthistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(assessmenthistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(assessmenthistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(assessmenthistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assessmenthistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(assessmenthistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(assessmenthistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(assessmenthistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(assessmenthistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.TemplateID(); ok {
		_spec.SetField(assessmenthistory.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := _u.mutation.AssessmentOwnerID(); ok {
		_spec.SetField(assessmenthistory.FieldAssessmentOwnerID, field.TypeString, value)
	}
	if _u.mutation.AssessmentOwnerIDCleared() {
		_spec.ClearField(assessmenthistory.FieldAssessmentOwnerID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.AssessmentHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &AssessmentHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assessmenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
