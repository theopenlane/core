// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// ControlCreate is the builder for creating a Control entity.
type ControlCreate struct {
	config
	mutation *ControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *ControlCreate) SetCreatedAt(v time.Time) *ControlCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ControlCreate) SetNillableCreatedAt(v *time.Time) *ControlCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ControlCreate) SetUpdatedAt(v time.Time) *ControlCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ControlCreate) SetNillableUpdatedAt(v *time.Time) *ControlCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ControlCreate) SetCreatedBy(v string) *ControlCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ControlCreate) SetNillableCreatedBy(v *string) *ControlCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ControlCreate) SetUpdatedBy(v string) *ControlCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ControlCreate) SetNillableUpdatedBy(v *string) *ControlCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ControlCreate) SetDeletedAt(v time.Time) *ControlCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ControlCreate) SetNillableDeletedAt(v *time.Time) *ControlCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ControlCreate) SetDeletedBy(v string) *ControlCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ControlCreate) SetNillableDeletedBy(v *string) *ControlCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *ControlCreate) SetDisplayID(v string) *ControlCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *ControlCreate) SetTags(v []string) *ControlCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *ControlCreate) SetTitle(v string) *ControlCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *ControlCreate) SetNillableTitle(v *string) *ControlCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *ControlCreate) SetDescription(v string) *ControlCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ControlCreate) SetNillableDescription(v *string) *ControlCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetReferenceID sets the "reference_id" field.
func (_c *ControlCreate) SetReferenceID(v string) *ControlCreate {
	_c.mutation.SetReferenceID(v)
	return _c
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableReferenceID(v *string) *ControlCreate {
	if v != nil {
		_c.SetReferenceID(*v)
	}
	return _c
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_c *ControlCreate) SetAuditorReferenceID(v string) *ControlCreate {
	_c.mutation.SetAuditorReferenceID(v)
	return _c
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableAuditorReferenceID(v *string) *ControlCreate {
	if v != nil {
		_c.SetAuditorReferenceID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ControlCreate) SetStatus(v enums.ControlStatus) *ControlCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ControlCreate) SetNillableStatus(v *enums.ControlStatus) *ControlCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetSource sets the "source" field.
func (_c *ControlCreate) SetSource(v enums.ControlSource) *ControlCreate {
	_c.mutation.SetSource(v)
	return _c
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_c *ControlCreate) SetNillableSource(v *enums.ControlSource) *ControlCreate {
	if v != nil {
		_c.SetSource(*v)
	}
	return _c
}

// SetReferenceFramework sets the "reference_framework" field.
func (_c *ControlCreate) SetReferenceFramework(v string) *ControlCreate {
	_c.mutation.SetReferenceFramework(v)
	return _c
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_c *ControlCreate) SetNillableReferenceFramework(v *string) *ControlCreate {
	if v != nil {
		_c.SetReferenceFramework(*v)
	}
	return _c
}

// SetControlType sets the "control_type" field.
func (_c *ControlCreate) SetControlType(v enums.ControlType) *ControlCreate {
	_c.mutation.SetControlType(v)
	return _c
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_c *ControlCreate) SetNillableControlType(v *enums.ControlType) *ControlCreate {
	if v != nil {
		_c.SetControlType(*v)
	}
	return _c
}

// SetCategory sets the "category" field.
func (_c *ControlCreate) SetCategory(v string) *ControlCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *ControlCreate) SetNillableCategory(v *string) *ControlCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetCategoryID sets the "category_id" field.
func (_c *ControlCreate) SetCategoryID(v string) *ControlCreate {
	_c.mutation.SetCategoryID(v)
	return _c
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableCategoryID(v *string) *ControlCreate {
	if v != nil {
		_c.SetCategoryID(*v)
	}
	return _c
}

// SetSubcategory sets the "subcategory" field.
func (_c *ControlCreate) SetSubcategory(v string) *ControlCreate {
	_c.mutation.SetSubcategory(v)
	return _c
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_c *ControlCreate) SetNillableSubcategory(v *string) *ControlCreate {
	if v != nil {
		_c.SetSubcategory(*v)
	}
	return _c
}

// SetMappedCategories sets the "mapped_categories" field.
func (_c *ControlCreate) SetMappedCategories(v []string) *ControlCreate {
	_c.mutation.SetMappedCategories(v)
	return _c
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_c *ControlCreate) SetAssessmentObjectives(v []models.AssessmentObjective) *ControlCreate {
	_c.mutation.SetAssessmentObjectives(v)
	return _c
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_c *ControlCreate) SetAssessmentMethods(v []models.AssessmentMethod) *ControlCreate {
	_c.mutation.SetAssessmentMethods(v)
	return _c
}

// SetControlQuestions sets the "control_questions" field.
func (_c *ControlCreate) SetControlQuestions(v []string) *ControlCreate {
	_c.mutation.SetControlQuestions(v)
	return _c
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_c *ControlCreate) SetImplementationGuidance(v []models.ImplementationGuidance) *ControlCreate {
	_c.mutation.SetImplementationGuidance(v)
	return _c
}

// SetExampleEvidence sets the "example_evidence" field.
func (_c *ControlCreate) SetExampleEvidence(v []models.ExampleEvidence) *ControlCreate {
	_c.mutation.SetExampleEvidence(v)
	return _c
}

// SetReferences sets the "references" field.
func (_c *ControlCreate) SetReferences(v []models.Reference) *ControlCreate {
	_c.mutation.SetReferences(v)
	return _c
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_c *ControlCreate) SetControlOwnerID(v string) *ControlCreate {
	_c.mutation.SetControlOwnerID(v)
	return _c
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableControlOwnerID(v *string) *ControlCreate {
	if v != nil {
		_c.SetControlOwnerID(*v)
	}
	return _c
}

// SetDelegateID sets the "delegate_id" field.
func (_c *ControlCreate) SetDelegateID(v string) *ControlCreate {
	_c.mutation.SetDelegateID(v)
	return _c
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableDelegateID(v *string) *ControlCreate {
	if v != nil {
		_c.SetDelegateID(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *ControlCreate) SetOwnerID(v string) *ControlCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableOwnerID(v *string) *ControlCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *ControlCreate) SetSystemOwned(v bool) *ControlCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *ControlCreate) SetNillableSystemOwned(v *bool) *ControlCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *ControlCreate) SetInternalNotes(v string) *ControlCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *ControlCreate) SetNillableInternalNotes(v *string) *ControlCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *ControlCreate) SetSystemInternalID(v string) *ControlCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableSystemInternalID(v *string) *ControlCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetRefCode sets the "ref_code" field.
func (_c *ControlCreate) SetRefCode(v string) *ControlCreate {
	_c.mutation.SetRefCode(v)
	return _c
}

// SetStandardID sets the "standard_id" field.
func (_c *ControlCreate) SetStandardID(v string) *ControlCreate {
	_c.mutation.SetStandardID(v)
	return _c
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableStandardID(v *string) *ControlCreate {
	if v != nil {
		_c.SetStandardID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ControlCreate) SetID(v string) *ControlCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ControlCreate) SetNillableID(v *string) *ControlCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_c *ControlCreate) AddEvidenceIDs(ids ...string) *ControlCreate {
	_c.mutation.AddEvidenceIDs(ids...)
	return _c
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_c *ControlCreate) AddEvidence(v ...*Evidence) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEvidenceIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_c *ControlCreate) AddControlObjectiveIDs(ids ...string) *ControlCreate {
	_c.mutation.AddControlObjectiveIDs(ids...)
	return _c
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_c *ControlCreate) AddControlObjectives(v ...*ControlObjective) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_c *ControlCreate) AddTaskIDs(ids ...string) *ControlCreate {
	_c.mutation.AddTaskIDs(ids...)
	return _c
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_c *ControlCreate) AddTasks(v ...*Task) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_c *ControlCreate) AddNarrativeIDs(ids ...string) *ControlCreate {
	_c.mutation.AddNarrativeIDs(ids...)
	return _c
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_c *ControlCreate) AddNarratives(v ...*Narrative) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_c *ControlCreate) AddRiskIDs(ids ...string) *ControlCreate {
	_c.mutation.AddRiskIDs(ids...)
	return _c
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_c *ControlCreate) AddRisks(v ...*Risk) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_c *ControlCreate) AddActionPlanIDs(ids ...string) *ControlCreate {
	_c.mutation.AddActionPlanIDs(ids...)
	return _c
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_c *ControlCreate) AddActionPlans(v ...*ActionPlan) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_c *ControlCreate) AddProcedureIDs(ids ...string) *ControlCreate {
	_c.mutation.AddProcedureIDs(ids...)
	return _c
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_c *ControlCreate) AddProcedures(v ...*Procedure) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_c *ControlCreate) AddInternalPolicyIDs(ids ...string) *ControlCreate {
	_c.mutation.AddInternalPolicyIDs(ids...)
	return _c
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_c *ControlCreate) AddInternalPolicies(v ...*InternalPolicy) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInternalPolicyIDs(ids...)
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (_c *ControlCreate) SetControlOwner(v *Group) *ControlCreate {
	return _c.SetControlOwnerID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_c *ControlCreate) SetDelegate(v *Group) *ControlCreate {
	return _c.SetDelegateID(v.ID)
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *ControlCreate) SetOwner(v *Organization) *ControlCreate {
	return _c.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_c *ControlCreate) AddBlockedGroupIDs(ids ...string) *ControlCreate {
	_c.mutation.AddBlockedGroupIDs(ids...)
	return _c
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_c *ControlCreate) AddBlockedGroups(v ...*Group) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_c *ControlCreate) AddEditorIDs(ids ...string) *ControlCreate {
	_c.mutation.AddEditorIDs(ids...)
	return _c
}

// AddEditors adds the "editors" edges to the Group entity.
func (_c *ControlCreate) AddEditors(v ...*Group) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEditorIDs(ids...)
}

// SetStandard sets the "standard" edge to the Standard entity.
func (_c *ControlCreate) SetStandard(v *Standard) *ControlCreate {
	return _c.SetStandardID(v.ID)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_c *ControlCreate) AddProgramIDs(ids ...string) *ControlCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_c *ControlCreate) AddPrograms(v ...*Program) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_c *ControlCreate) AddAssetIDs(ids ...string) *ControlCreate {
	_c.mutation.AddAssetIDs(ids...)
	return _c
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_c *ControlCreate) AddAssets(v ...*Asset) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAssetIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_c *ControlCreate) AddScanIDs(ids ...string) *ControlCreate {
	_c.mutation.AddScanIDs(ids...)
	return _c
}

// AddScans adds the "scans" edges to the Scan entity.
func (_c *ControlCreate) AddScans(v ...*Scan) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScanIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_c *ControlCreate) AddControlImplementationIDs(ids ...string) *ControlCreate {
	_c.mutation.AddControlImplementationIDs(ids...)
	return _c
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_c *ControlCreate) AddControlImplementations(v ...*ControlImplementation) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlImplementationIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_c *ControlCreate) AddSubcontrolIDs(ids ...string) *ControlCreate {
	_c.mutation.AddSubcontrolIDs(ids...)
	return _c
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_c *ControlCreate) AddSubcontrols(v ...*Subcontrol) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubcontrolIDs(ids...)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_c *ControlCreate) AddScheduledJobIDs(ids ...string) *ControlCreate {
	_c.mutation.AddScheduledJobIDs(ids...)
	return _c
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_c *ControlCreate) AddScheduledJobs(v ...*ScheduledJob) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScheduledJobIDs(ids...)
}

// AddMappedToControlIDs adds the "mapped_to_controls" edge to the MappedControl entity by IDs.
func (_c *ControlCreate) AddMappedToControlIDs(ids ...string) *ControlCreate {
	_c.mutation.AddMappedToControlIDs(ids...)
	return _c
}

// AddMappedToControls adds the "mapped_to_controls" edges to the MappedControl entity.
func (_c *ControlCreate) AddMappedToControls(v ...*MappedControl) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMappedToControlIDs(ids...)
}

// AddMappedFromControlIDs adds the "mapped_from_controls" edge to the MappedControl entity by IDs.
func (_c *ControlCreate) AddMappedFromControlIDs(ids ...string) *ControlCreate {
	_c.mutation.AddMappedFromControlIDs(ids...)
	return _c
}

// AddMappedFromControls adds the "mapped_from_controls" edges to the MappedControl entity.
func (_c *ControlCreate) AddMappedFromControls(v ...*MappedControl) *ControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMappedFromControlIDs(ids...)
}

// Mutation returns the ControlMutation object of the builder.
func (_c *ControlCreate) Mutation() *ControlMutation {
	return _c.mutation
}

// Save creates the Control in the database.
func (_c *ControlCreate) Save(ctx context.Context) (*Control, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ControlCreate) SaveX(ctx context.Context) *Control {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ControlCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ControlCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ControlCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if control.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized control.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := control.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if control.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized control.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := control.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := control.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := control.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Source(); !ok {
		v := control.DefaultSource
		_c.mutation.SetSource(v)
	}
	if _, ok := _c.mutation.ControlType(); !ok {
		v := control.DefaultControlType
		_c.mutation.SetControlType(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := control.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if control.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized control.DefaultID (forgotten import generated/runtime?)")
		}
		v := control.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ControlCreate) check() error {
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "Control.display_id"`)}
	}
	if v, ok := _c.mutation.DisplayID(); ok {
		if err := control.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "Control.display_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := control.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Control.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Source(); ok {
		if err := control.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Control.source": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ControlType(); ok {
		if err := control.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Control.control_type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := control.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Control.owner_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.RefCode(); !ok {
		return &ValidationError{Name: "ref_code", err: errors.New(`generated: missing required field "Control.ref_code"`)}
	}
	if v, ok := _c.mutation.RefCode(); ok {
		if err := control.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Control.ref_code": %w`, err)}
		}
	}
	return nil
}

func (_c *ControlCreate) sqlSave(ctx context.Context) (*Control, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Control.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ControlCreate) createSpec() (*Control, *sqlgraph.CreateSpec) {
	var (
		_node = &Control{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(control.Table, sqlgraph.NewFieldSpec(control.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Control
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(control.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(control.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(control.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(control.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(control.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(control.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(control.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(control.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(control.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(control.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ReferenceID(); ok {
		_spec.SetField(control.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := _c.mutation.AuditorReferenceID(); ok {
		_spec.SetField(control.FieldAuditorReferenceID, field.TypeString, value)
		_node.AuditorReferenceID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(control.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Source(); ok {
		_spec.SetField(control.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := _c.mutation.ReferenceFramework(); ok {
		_spec.SetField(control.FieldReferenceFramework, field.TypeString, value)
		_node.ReferenceFramework = &value
	}
	if value, ok := _c.mutation.ControlType(); ok {
		_spec.SetField(control.FieldControlType, field.TypeEnum, value)
		_node.ControlType = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(control.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.CategoryID(); ok {
		_spec.SetField(control.FieldCategoryID, field.TypeString, value)
		_node.CategoryID = value
	}
	if value, ok := _c.mutation.Subcategory(); ok {
		_spec.SetField(control.FieldSubcategory, field.TypeString, value)
		_node.Subcategory = value
	}
	if value, ok := _c.mutation.MappedCategories(); ok {
		_spec.SetField(control.FieldMappedCategories, field.TypeJSON, value)
		_node.MappedCategories = value
	}
	if value, ok := _c.mutation.AssessmentObjectives(); ok {
		_spec.SetField(control.FieldAssessmentObjectives, field.TypeJSON, value)
		_node.AssessmentObjectives = value
	}
	if value, ok := _c.mutation.AssessmentMethods(); ok {
		_spec.SetField(control.FieldAssessmentMethods, field.TypeJSON, value)
		_node.AssessmentMethods = value
	}
	if value, ok := _c.mutation.ControlQuestions(); ok {
		_spec.SetField(control.FieldControlQuestions, field.TypeJSON, value)
		_node.ControlQuestions = value
	}
	if value, ok := _c.mutation.ImplementationGuidance(); ok {
		_spec.SetField(control.FieldImplementationGuidance, field.TypeJSON, value)
		_node.ImplementationGuidance = value
	}
	if value, ok := _c.mutation.ExampleEvidence(); ok {
		_spec.SetField(control.FieldExampleEvidence, field.TypeJSON, value)
		_node.ExampleEvidence = value
	}
	if value, ok := _c.mutation.References(); ok {
		_spec.SetField(control.FieldReferences, field.TypeJSON, value)
		_node.References = value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(control.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(control.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(control.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	if value, ok := _c.mutation.RefCode(); ok {
		_spec.SetField(control.FieldRefCode, field.TypeString, value)
		_node.RefCode = value
	}
	if nodes := _c.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.InternalPoliciesTable,
			Columns: control.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.ControlOwnerTable,
			Columns: []string{control.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ControlOwnerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.DelegateTable,
			Columns: []string{control.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DelegateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.OwnerTable,
			Columns: []string{control.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: []string{control.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StandardID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.AssetsTable,
			Columns: control.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.ScansTable,
			Columns: []string{control.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ScheduledJobsTable,
			Columns: control.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MappedToControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedToControlsTable,
			Columns: control.MappedToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MappedFromControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedFromControlsTable,
			Columns: control.MappedFromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ControlCreateBulk is the builder for creating many Control entities in bulk.
type ControlCreateBulk struct {
	config
	err      error
	builders []*ControlCreate
}

// Save creates the Control entities in the database.
func (_c *ControlCreateBulk) Save(ctx context.Context) ([]*Control, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Control, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ControlCreateBulk) SaveX(ctx context.Context) []*Control {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ControlCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ControlCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
