// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// ControlCreate is the builder for creating a Control entity.
type ControlCreate struct {
	config
	mutation *ControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *ControlCreate) SetCreatedAt(t time.Time) *ControlCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ControlCreate) SetNillableCreatedAt(t *time.Time) *ControlCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ControlCreate) SetUpdatedAt(t time.Time) *ControlCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ControlCreate) SetNillableUpdatedAt(t *time.Time) *ControlCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *ControlCreate) SetCreatedBy(s string) *ControlCreate {
	cc.mutation.SetCreatedBy(s)
	return cc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cc *ControlCreate) SetNillableCreatedBy(s *string) *ControlCreate {
	if s != nil {
		cc.SetCreatedBy(*s)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *ControlCreate) SetUpdatedBy(s string) *ControlCreate {
	cc.mutation.SetUpdatedBy(s)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *ControlCreate) SetNillableUpdatedBy(s *string) *ControlCreate {
	if s != nil {
		cc.SetUpdatedBy(*s)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *ControlCreate) SetDeletedAt(t time.Time) *ControlCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *ControlCreate) SetNillableDeletedAt(t *time.Time) *ControlCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetDeletedBy sets the "deleted_by" field.
func (cc *ControlCreate) SetDeletedBy(s string) *ControlCreate {
	cc.mutation.SetDeletedBy(s)
	return cc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cc *ControlCreate) SetNillableDeletedBy(s *string) *ControlCreate {
	if s != nil {
		cc.SetDeletedBy(*s)
	}
	return cc
}

// SetDisplayID sets the "display_id" field.
func (cc *ControlCreate) SetDisplayID(s string) *ControlCreate {
	cc.mutation.SetDisplayID(s)
	return cc
}

// SetTags sets the "tags" field.
func (cc *ControlCreate) SetTags(s []string) *ControlCreate {
	cc.mutation.SetTags(s)
	return cc
}

// SetOwnerID sets the "owner_id" field.
func (cc *ControlCreate) SetOwnerID(s string) *ControlCreate {
	cc.mutation.SetOwnerID(s)
	return cc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cc *ControlCreate) SetNillableOwnerID(s *string) *ControlCreate {
	if s != nil {
		cc.SetOwnerID(*s)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *ControlCreate) SetDescription(s string) *ControlCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ControlCreate) SetNillableDescription(s *string) *ControlCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetReferenceID sets the "reference_id" field.
func (cc *ControlCreate) SetReferenceID(s string) *ControlCreate {
	cc.mutation.SetReferenceID(s)
	return cc
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (cc *ControlCreate) SetNillableReferenceID(s *string) *ControlCreate {
	if s != nil {
		cc.SetReferenceID(*s)
	}
	return cc
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (cc *ControlCreate) SetAuditorReferenceID(s string) *ControlCreate {
	cc.mutation.SetAuditorReferenceID(s)
	return cc
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (cc *ControlCreate) SetNillableAuditorReferenceID(s *string) *ControlCreate {
	if s != nil {
		cc.SetAuditorReferenceID(*s)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ControlCreate) SetStatus(es enums.ControlStatus) *ControlCreate {
	cc.mutation.SetStatus(es)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ControlCreate) SetNillableStatus(es *enums.ControlStatus) *ControlCreate {
	if es != nil {
		cc.SetStatus(*es)
	}
	return cc
}

// SetSource sets the "source" field.
func (cc *ControlCreate) SetSource(es enums.ControlSource) *ControlCreate {
	cc.mutation.SetSource(es)
	return cc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cc *ControlCreate) SetNillableSource(es *enums.ControlSource) *ControlCreate {
	if es != nil {
		cc.SetSource(*es)
	}
	return cc
}

// SetControlType sets the "control_type" field.
func (cc *ControlCreate) SetControlType(et enums.ControlType) *ControlCreate {
	cc.mutation.SetControlType(et)
	return cc
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (cc *ControlCreate) SetNillableControlType(et *enums.ControlType) *ControlCreate {
	if et != nil {
		cc.SetControlType(*et)
	}
	return cc
}

// SetCategory sets the "category" field.
func (cc *ControlCreate) SetCategory(s string) *ControlCreate {
	cc.mutation.SetCategory(s)
	return cc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cc *ControlCreate) SetNillableCategory(s *string) *ControlCreate {
	if s != nil {
		cc.SetCategory(*s)
	}
	return cc
}

// SetCategoryID sets the "category_id" field.
func (cc *ControlCreate) SetCategoryID(s string) *ControlCreate {
	cc.mutation.SetCategoryID(s)
	return cc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (cc *ControlCreate) SetNillableCategoryID(s *string) *ControlCreate {
	if s != nil {
		cc.SetCategoryID(*s)
	}
	return cc
}

// SetSubcategory sets the "subcategory" field.
func (cc *ControlCreate) SetSubcategory(s string) *ControlCreate {
	cc.mutation.SetSubcategory(s)
	return cc
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (cc *ControlCreate) SetNillableSubcategory(s *string) *ControlCreate {
	if s != nil {
		cc.SetSubcategory(*s)
	}
	return cc
}

// SetMappedCategories sets the "mapped_categories" field.
func (cc *ControlCreate) SetMappedCategories(s []string) *ControlCreate {
	cc.mutation.SetMappedCategories(s)
	return cc
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (cc *ControlCreate) SetAssessmentObjectives(mo []models.AssessmentObjective) *ControlCreate {
	cc.mutation.SetAssessmentObjectives(mo)
	return cc
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (cc *ControlCreate) SetAssessmentMethods(mm []models.AssessmentMethod) *ControlCreate {
	cc.mutation.SetAssessmentMethods(mm)
	return cc
}

// SetControlQuestions sets the "control_questions" field.
func (cc *ControlCreate) SetControlQuestions(s []string) *ControlCreate {
	cc.mutation.SetControlQuestions(s)
	return cc
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (cc *ControlCreate) SetImplementationGuidance(mg []models.ImplementationGuidance) *ControlCreate {
	cc.mutation.SetImplementationGuidance(mg)
	return cc
}

// SetExampleEvidence sets the "example_evidence" field.
func (cc *ControlCreate) SetExampleEvidence(me []models.ExampleEvidence) *ControlCreate {
	cc.mutation.SetExampleEvidence(me)
	return cc
}

// SetReferences sets the "references" field.
func (cc *ControlCreate) SetReferences(m []models.Reference) *ControlCreate {
	cc.mutation.SetReferences(m)
	return cc
}

// SetRefCode sets the "ref_code" field.
func (cc *ControlCreate) SetRefCode(s string) *ControlCreate {
	cc.mutation.SetRefCode(s)
	return cc
}

// SetStandardID sets the "standard_id" field.
func (cc *ControlCreate) SetStandardID(s string) *ControlCreate {
	cc.mutation.SetStandardID(s)
	return cc
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (cc *ControlCreate) SetNillableStandardID(s *string) *ControlCreate {
	if s != nil {
		cc.SetStandardID(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ControlCreate) SetID(s string) *ControlCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ControlCreate) SetNillableID(s *string) *ControlCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (cc *ControlCreate) SetOwner(o *Organization) *ControlCreate {
	return cc.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (cc *ControlCreate) AddBlockedGroupIDs(ids ...string) *ControlCreate {
	cc.mutation.AddBlockedGroupIDs(ids...)
	return cc
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (cc *ControlCreate) AddBlockedGroups(g ...*Group) *ControlCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (cc *ControlCreate) AddEditorIDs(ids ...string) *ControlCreate {
	cc.mutation.AddEditorIDs(ids...)
	return cc
}

// AddEditors adds the "editors" edges to the Group entity.
func (cc *ControlCreate) AddEditors(g ...*Group) *ControlCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (cc *ControlCreate) AddViewerIDs(ids ...string) *ControlCreate {
	cc.mutation.AddViewerIDs(ids...)
	return cc
}

// AddViewers adds the "viewers" edges to the Group entity.
func (cc *ControlCreate) AddViewers(g ...*Group) *ControlCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddViewerIDs(ids...)
}

// SetStandard sets the "standard" edge to the Standard entity.
func (cc *ControlCreate) SetStandard(s *Standard) *ControlCreate {
	return cc.SetStandardID(s.ID)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (cc *ControlCreate) AddProgramIDs(ids ...string) *ControlCreate {
	cc.mutation.AddProgramIDs(ids...)
	return cc
}

// AddPrograms adds the "programs" edges to the Program entity.
func (cc *ControlCreate) AddPrograms(p ...*Program) *ControlCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProgramIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (cc *ControlCreate) AddEvidenceIDs(ids ...string) *ControlCreate {
	cc.mutation.AddEvidenceIDs(ids...)
	return cc
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (cc *ControlCreate) AddEvidence(e ...*Evidence) *ControlCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddEvidenceIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (cc *ControlCreate) AddControlImplementationIDs(ids ...string) *ControlCreate {
	cc.mutation.AddControlImplementationIDs(ids...)
	return cc
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (cc *ControlCreate) AddControlImplementations(c ...*ControlImplementation) *ControlCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddControlImplementationIDs(ids...)
}

// AddMappedControlIDs adds the "mapped_controls" edge to the MappedControl entity by IDs.
func (cc *ControlCreate) AddMappedControlIDs(ids ...string) *ControlCreate {
	cc.mutation.AddMappedControlIDs(ids...)
	return cc
}

// AddMappedControls adds the "mapped_controls" edges to the MappedControl entity.
func (cc *ControlCreate) AddMappedControls(m ...*MappedControl) *ControlCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMappedControlIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (cc *ControlCreate) AddControlObjectiveIDs(ids ...string) *ControlCreate {
	cc.mutation.AddControlObjectiveIDs(ids...)
	return cc
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (cc *ControlCreate) AddControlObjectives(c ...*ControlObjective) *ControlCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddControlObjectiveIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (cc *ControlCreate) AddSubcontrolIDs(ids ...string) *ControlCreate {
	cc.mutation.AddSubcontrolIDs(ids...)
	return cc
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (cc *ControlCreate) AddSubcontrols(s ...*Subcontrol) *ControlCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddSubcontrolIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (cc *ControlCreate) AddTaskIDs(ids ...string) *ControlCreate {
	cc.mutation.AddTaskIDs(ids...)
	return cc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (cc *ControlCreate) AddTasks(t ...*Task) *ControlCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (cc *ControlCreate) AddNarrativeIDs(ids ...string) *ControlCreate {
	cc.mutation.AddNarrativeIDs(ids...)
	return cc
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (cc *ControlCreate) AddNarratives(n ...*Narrative) *ControlCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cc.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (cc *ControlCreate) AddRiskIDs(ids ...string) *ControlCreate {
	cc.mutation.AddRiskIDs(ids...)
	return cc
}

// AddRisks adds the "risks" edges to the Risk entity.
func (cc *ControlCreate) AddRisks(r ...*Risk) *ControlCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (cc *ControlCreate) AddActionPlanIDs(ids ...string) *ControlCreate {
	cc.mutation.AddActionPlanIDs(ids...)
	return cc
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (cc *ControlCreate) AddActionPlans(a ...*ActionPlan) *ControlCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (cc *ControlCreate) AddProcedureIDs(ids ...string) *ControlCreate {
	cc.mutation.AddProcedureIDs(ids...)
	return cc
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (cc *ControlCreate) AddProcedures(p ...*Procedure) *ControlCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (cc *ControlCreate) AddInternalPolicyIDs(ids ...string) *ControlCreate {
	cc.mutation.AddInternalPolicyIDs(ids...)
	return cc
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (cc *ControlCreate) AddInternalPolicies(i ...*InternalPolicy) *ControlCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cc.AddInternalPolicyIDs(ids...)
}

// SetControlOwnerID sets the "control_owner" edge to the Group entity by ID.
func (cc *ControlCreate) SetControlOwnerID(id string) *ControlCreate {
	cc.mutation.SetControlOwnerID(id)
	return cc
}

// SetNillableControlOwnerID sets the "control_owner" edge to the Group entity by ID if the given value is not nil.
func (cc *ControlCreate) SetNillableControlOwnerID(id *string) *ControlCreate {
	if id != nil {
		cc = cc.SetControlOwnerID(*id)
	}
	return cc
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (cc *ControlCreate) SetControlOwner(g *Group) *ControlCreate {
	return cc.SetControlOwnerID(g.ID)
}

// SetDelegateID sets the "delegate" edge to the Group entity by ID.
func (cc *ControlCreate) SetDelegateID(id string) *ControlCreate {
	cc.mutation.SetDelegateID(id)
	return cc
}

// SetNillableDelegateID sets the "delegate" edge to the Group entity by ID if the given value is not nil.
func (cc *ControlCreate) SetNillableDelegateID(id *string) *ControlCreate {
	if id != nil {
		cc = cc.SetDelegateID(*id)
	}
	return cc
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (cc *ControlCreate) SetDelegate(g *Group) *ControlCreate {
	return cc.SetDelegateID(g.ID)
}

// Mutation returns the ControlMutation object of the builder.
func (cc *ControlCreate) Mutation() *ControlMutation {
	return cc.mutation
}

// Save creates the Control in the database.
func (cc *ControlCreate) Save(ctx context.Context) (*Control, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ControlCreate) SaveX(ctx context.Context) *Control {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ControlCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ControlCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ControlCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if control.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized control.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := control.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if control.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized control.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := control.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Tags(); !ok {
		v := control.DefaultTags
		cc.mutation.SetTags(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := control.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Source(); !ok {
		v := control.DefaultSource
		cc.mutation.SetSource(v)
	}
	if _, ok := cc.mutation.ControlType(); !ok {
		v := control.DefaultControlType
		cc.mutation.SetControlType(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if control.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized control.DefaultID (forgotten import generated/runtime?)")
		}
		v := control.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ControlCreate) check() error {
	if _, ok := cc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "Control.display_id"`)}
	}
	if v, ok := cc.mutation.DisplayID(); ok {
		if err := control.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "Control.display_id": %w`, err)}
		}
	}
	if v, ok := cc.mutation.OwnerID(); ok {
		if err := control.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Control.owner_id": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := control.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Control.status": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Source(); ok {
		if err := control.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Control.source": %w`, err)}
		}
	}
	if v, ok := cc.mutation.ControlType(); ok {
		if err := control.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Control.control_type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.RefCode(); !ok {
		return &ValidationError{Name: "ref_code", err: errors.New(`generated: missing required field "Control.ref_code"`)}
	}
	if v, ok := cc.mutation.RefCode(); ok {
		if err := control.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Control.ref_code": %w`, err)}
		}
	}
	return nil
}

func (cc *ControlCreate) sqlSave(ctx context.Context) (*Control, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Control.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ControlCreate) createSpec() (*Control, *sqlgraph.CreateSpec) {
	var (
		_node = &Control{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(control.Table, sqlgraph.NewFieldSpec(control.FieldID, field.TypeString))
	)
	_spec.Schema = cc.schemaConfig.Control
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(control.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(control.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(control.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(control.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(control.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.DeletedBy(); ok {
		_spec.SetField(control.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := cc.mutation.DisplayID(); ok {
		_spec.SetField(control.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := cc.mutation.Tags(); ok {
		_spec.SetField(control.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(control.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.ReferenceID(); ok {
		_spec.SetField(control.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := cc.mutation.AuditorReferenceID(); ok {
		_spec.SetField(control.FieldAuditorReferenceID, field.TypeString, value)
		_node.AuditorReferenceID = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(control.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Source(); ok {
		_spec.SetField(control.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := cc.mutation.ControlType(); ok {
		_spec.SetField(control.FieldControlType, field.TypeEnum, value)
		_node.ControlType = value
	}
	if value, ok := cc.mutation.Category(); ok {
		_spec.SetField(control.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := cc.mutation.CategoryID(); ok {
		_spec.SetField(control.FieldCategoryID, field.TypeString, value)
		_node.CategoryID = value
	}
	if value, ok := cc.mutation.Subcategory(); ok {
		_spec.SetField(control.FieldSubcategory, field.TypeString, value)
		_node.Subcategory = value
	}
	if value, ok := cc.mutation.MappedCategories(); ok {
		_spec.SetField(control.FieldMappedCategories, field.TypeJSON, value)
		_node.MappedCategories = value
	}
	if value, ok := cc.mutation.AssessmentObjectives(); ok {
		_spec.SetField(control.FieldAssessmentObjectives, field.TypeJSON, value)
		_node.AssessmentObjectives = value
	}
	if value, ok := cc.mutation.AssessmentMethods(); ok {
		_spec.SetField(control.FieldAssessmentMethods, field.TypeJSON, value)
		_node.AssessmentMethods = value
	}
	if value, ok := cc.mutation.ControlQuestions(); ok {
		_spec.SetField(control.FieldControlQuestions, field.TypeJSON, value)
		_node.ControlQuestions = value
	}
	if value, ok := cc.mutation.ImplementationGuidance(); ok {
		_spec.SetField(control.FieldImplementationGuidance, field.TypeJSON, value)
		_node.ImplementationGuidance = value
	}
	if value, ok := cc.mutation.ExampleEvidence(); ok {
		_spec.SetField(control.FieldExampleEvidence, field.TypeJSON, value)
		_node.ExampleEvidence = value
	}
	if value, ok := cc.mutation.References(); ok {
		_spec.SetField(control.FieldReferences, field.TypeJSON, value)
		_node.References = value
	}
	if value, ok := cc.mutation.RefCode(); ok {
		_spec.SetField(control.FieldRefCode, field.TypeString, value)
		_node.RefCode = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.OwnerTable,
			Columns: []string{control.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.BlockedGroupsTable,
			Columns: control.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.EditorsTable,
			Columns: control.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ViewersTable,
			Columns: control.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   control.StandardTable,
			Columns: []string{control.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StandardID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.ProgramsTable,
			Columns: control.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.EvidenceTable,
			Columns: control.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlImplementationsTable,
			Columns: control.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MappedControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   control.MappedControlsTable,
			Columns: control.MappedControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.MappedControlControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ControlObjectivesTable,
			Columns: control.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.SubcontrolsTable,
			Columns: []string{control.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.TasksTable,
			Columns: control.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.NarrativesTable,
			Columns: control.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.RisksTable,
			Columns: control.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ActionPlansTable,
			Columns: control.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   control.ProceduresTable,
			Columns: control.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   control.InternalPoliciesTable,
			Columns: []string{control.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.ControlOwnerTable,
			Columns: []string{control.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.control_control_owner = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   control.DelegateTable,
			Columns: []string{control.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.control_delegate = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ControlCreateBulk is the builder for creating many Control entities in bulk.
type ControlCreateBulk struct {
	config
	err      error
	builders []*ControlCreate
}

// Save creates the Control entities in the database.
func (ccb *ControlCreateBulk) Save(ctx context.Context) ([]*Control, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Control, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ControlCreateBulk) SaveX(ctx context.Context) []*Control {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ControlCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ControlCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
