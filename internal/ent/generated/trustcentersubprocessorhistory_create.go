// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessorhistory"
	"github.com/theopenlane/entx/history"
)

// TrustCenterSubprocessorHistoryCreate is the builder for creating a TrustCenterSubprocessorHistory entity.
type TrustCenterSubprocessorHistoryCreate struct {
	config
	mutation *TrustCenterSubprocessorHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetHistoryTime(t time.Time) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetHistoryTime(t)
	return tcshc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableHistoryTime(t *time.Time) *TrustCenterSubprocessorHistoryCreate {
	if t != nil {
		tcshc.SetHistoryTime(*t)
	}
	return tcshc
}

// SetRef sets the "ref" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetRef(s string) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetRef(s)
	return tcshc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableRef(s *string) *TrustCenterSubprocessorHistoryCreate {
	if s != nil {
		tcshc.SetRef(*s)
	}
	return tcshc
}

// SetOperation sets the "operation" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetOperation(ht history.OpType) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetOperation(ht)
	return tcshc
}

// SetCreatedAt sets the "created_at" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetCreatedAt(t time.Time) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetCreatedAt(t)
	return tcshc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableCreatedAt(t *time.Time) *TrustCenterSubprocessorHistoryCreate {
	if t != nil {
		tcshc.SetCreatedAt(*t)
	}
	return tcshc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetUpdatedAt(t time.Time) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetUpdatedAt(t)
	return tcshc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableUpdatedAt(t *time.Time) *TrustCenterSubprocessorHistoryCreate {
	if t != nil {
		tcshc.SetUpdatedAt(*t)
	}
	return tcshc
}

// SetCreatedBy sets the "created_by" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetCreatedBy(s string) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetCreatedBy(s)
	return tcshc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableCreatedBy(s *string) *TrustCenterSubprocessorHistoryCreate {
	if s != nil {
		tcshc.SetCreatedBy(*s)
	}
	return tcshc
}

// SetUpdatedBy sets the "updated_by" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetUpdatedBy(s string) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetUpdatedBy(s)
	return tcshc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableUpdatedBy(s *string) *TrustCenterSubprocessorHistoryCreate {
	if s != nil {
		tcshc.SetUpdatedBy(*s)
	}
	return tcshc
}

// SetDeletedAt sets the "deleted_at" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetDeletedAt(t time.Time) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetDeletedAt(t)
	return tcshc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableDeletedAt(t *time.Time) *TrustCenterSubprocessorHistoryCreate {
	if t != nil {
		tcshc.SetDeletedAt(*t)
	}
	return tcshc
}

// SetDeletedBy sets the "deleted_by" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetDeletedBy(s string) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetDeletedBy(s)
	return tcshc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableDeletedBy(s *string) *TrustCenterSubprocessorHistoryCreate {
	if s != nil {
		tcshc.SetDeletedBy(*s)
	}
	return tcshc
}

// SetTags sets the "tags" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetTags(s []string) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetTags(s)
	return tcshc
}

// SetID sets the "id" field.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetID(s string) *TrustCenterSubprocessorHistoryCreate {
	tcshc.mutation.SetID(s)
	return tcshc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SetNillableID(s *string) *TrustCenterSubprocessorHistoryCreate {
	if s != nil {
		tcshc.SetID(*s)
	}
	return tcshc
}

// Mutation returns the TrustCenterSubprocessorHistoryMutation object of the builder.
func (tcshc *TrustCenterSubprocessorHistoryCreate) Mutation() *TrustCenterSubprocessorHistoryMutation {
	return tcshc.mutation
}

// Save creates the TrustCenterSubprocessorHistory in the database.
func (tcshc *TrustCenterSubprocessorHistoryCreate) Save(ctx context.Context) (*TrustCenterSubprocessorHistory, error) {
	tcshc.defaults()
	return withHooks(ctx, tcshc.sqlSave, tcshc.mutation, tcshc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcshc *TrustCenterSubprocessorHistoryCreate) SaveX(ctx context.Context) *TrustCenterSubprocessorHistory {
	v, err := tcshc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcshc *TrustCenterSubprocessorHistoryCreate) Exec(ctx context.Context) error {
	_, err := tcshc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcshc *TrustCenterSubprocessorHistoryCreate) ExecX(ctx context.Context) {
	if err := tcshc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcshc *TrustCenterSubprocessorHistoryCreate) defaults() {
	if _, ok := tcshc.mutation.HistoryTime(); !ok {
		v := trustcentersubprocessorhistory.DefaultHistoryTime()
		tcshc.mutation.SetHistoryTime(v)
	}
	if _, ok := tcshc.mutation.CreatedAt(); !ok {
		v := trustcentersubprocessorhistory.DefaultCreatedAt()
		tcshc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcshc.mutation.UpdatedAt(); !ok {
		v := trustcentersubprocessorhistory.DefaultUpdatedAt()
		tcshc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcshc.mutation.Tags(); !ok {
		v := trustcentersubprocessorhistory.DefaultTags
		tcshc.mutation.SetTags(v)
	}
	if _, ok := tcshc.mutation.ID(); !ok {
		v := trustcentersubprocessorhistory.DefaultID()
		tcshc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcshc *TrustCenterSubprocessorHistoryCreate) check() error {
	if _, ok := tcshc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "TrustCenterSubprocessorHistory.history_time"`)}
	}
	if _, ok := tcshc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "TrustCenterSubprocessorHistory.operation"`)}
	}
	if v, ok := tcshc.mutation.Operation(); ok {
		if err := trustcentersubprocessorhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessorHistory.operation": %w`, err)}
		}
	}
	return nil
}

func (tcshc *TrustCenterSubprocessorHistoryCreate) sqlSave(ctx context.Context) (*TrustCenterSubprocessorHistory, error) {
	if err := tcshc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcshc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcshc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TrustCenterSubprocessorHistory.ID type: %T", _spec.ID.Value)
		}
	}
	tcshc.mutation.id = &_node.ID
	tcshc.mutation.done = true
	return _node, nil
}

func (tcshc *TrustCenterSubprocessorHistoryCreate) createSpec() (*TrustCenterSubprocessorHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TrustCenterSubprocessorHistory{config: tcshc.config}
		_spec = sqlgraph.NewCreateSpec(trustcentersubprocessorhistory.Table, sqlgraph.NewFieldSpec(trustcentersubprocessorhistory.FieldID, field.TypeString))
	)
	_spec.Schema = tcshc.schemaConfig.TrustCenterSubprocessorHistory
	if id, ok := tcshc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcshc.mutation.HistoryTime(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := tcshc.mutation.Ref(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := tcshc.mutation.Operation(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := tcshc.mutation.CreatedAt(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcshc.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcshc.mutation.CreatedBy(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tcshc.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tcshc.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tcshc.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := tcshc.mutation.Tags(); ok {
		_spec.SetField(trustcentersubprocessorhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	return _node, _spec
}

// TrustCenterSubprocessorHistoryCreateBulk is the builder for creating many TrustCenterSubprocessorHistory entities in bulk.
type TrustCenterSubprocessorHistoryCreateBulk struct {
	config
	err      error
	builders []*TrustCenterSubprocessorHistoryCreate
}

// Save creates the TrustCenterSubprocessorHistory entities in the database.
func (tcshcb *TrustCenterSubprocessorHistoryCreateBulk) Save(ctx context.Context) ([]*TrustCenterSubprocessorHistory, error) {
	if tcshcb.err != nil {
		return nil, tcshcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcshcb.builders))
	nodes := make([]*TrustCenterSubprocessorHistory, len(tcshcb.builders))
	mutators := make([]Mutator, len(tcshcb.builders))
	for i := range tcshcb.builders {
		func(i int, root context.Context) {
			builder := tcshcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrustCenterSubprocessorHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcshcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcshcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcshcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcshcb *TrustCenterSubprocessorHistoryCreateBulk) SaveX(ctx context.Context) []*TrustCenterSubprocessorHistory {
	v, err := tcshcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcshcb *TrustCenterSubprocessorHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := tcshcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcshcb *TrustCenterSubprocessorHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := tcshcb.Exec(ctx); err != nil {
		panic(err)
	}
}
