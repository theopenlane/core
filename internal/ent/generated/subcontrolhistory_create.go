// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// SubcontrolHistoryCreate is the builder for creating a SubcontrolHistory entity.
type SubcontrolHistoryCreate struct {
	config
	mutation *SubcontrolHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (shc *SubcontrolHistoryCreate) SetHistoryTime(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetHistoryTime(t)
	return shc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableHistoryTime(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetHistoryTime(*t)
	}
	return shc
}

// SetRef sets the "ref" field.
func (shc *SubcontrolHistoryCreate) SetRef(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetRef(s)
	return shc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableRef(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetRef(*s)
	}
	return shc
}

// SetOperation sets the "operation" field.
func (shc *SubcontrolHistoryCreate) SetOperation(ht history.OpType) *SubcontrolHistoryCreate {
	shc.mutation.SetOperation(ht)
	return shc
}

// SetCreatedAt sets the "created_at" field.
func (shc *SubcontrolHistoryCreate) SetCreatedAt(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetCreatedAt(t)
	return shc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableCreatedAt(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetCreatedAt(*t)
	}
	return shc
}

// SetUpdatedAt sets the "updated_at" field.
func (shc *SubcontrolHistoryCreate) SetUpdatedAt(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetUpdatedAt(t)
	return shc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableUpdatedAt(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetUpdatedAt(*t)
	}
	return shc
}

// SetCreatedBy sets the "created_by" field.
func (shc *SubcontrolHistoryCreate) SetCreatedBy(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetCreatedBy(s)
	return shc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableCreatedBy(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetCreatedBy(*s)
	}
	return shc
}

// SetUpdatedBy sets the "updated_by" field.
func (shc *SubcontrolHistoryCreate) SetUpdatedBy(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetUpdatedBy(s)
	return shc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableUpdatedBy(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetUpdatedBy(*s)
	}
	return shc
}

// SetDeletedAt sets the "deleted_at" field.
func (shc *SubcontrolHistoryCreate) SetDeletedAt(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetDeletedAt(t)
	return shc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableDeletedAt(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetDeletedAt(*t)
	}
	return shc
}

// SetDeletedBy sets the "deleted_by" field.
func (shc *SubcontrolHistoryCreate) SetDeletedBy(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetDeletedBy(s)
	return shc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableDeletedBy(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetDeletedBy(*s)
	}
	return shc
}

// SetDisplayID sets the "display_id" field.
func (shc *SubcontrolHistoryCreate) SetDisplayID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetDisplayID(s)
	return shc
}

// SetTags sets the "tags" field.
func (shc *SubcontrolHistoryCreate) SetTags(s []string) *SubcontrolHistoryCreate {
	shc.mutation.SetTags(s)
	return shc
}

// SetOwnerID sets the "owner_id" field.
func (shc *SubcontrolHistoryCreate) SetOwnerID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetOwnerID(s)
	return shc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableOwnerID(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetOwnerID(*s)
	}
	return shc
}

// SetDescription sets the "description" field.
func (shc *SubcontrolHistoryCreate) SetDescription(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetDescription(s)
	return shc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableDescription(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetDescription(*s)
	}
	return shc
}

// SetReferenceID sets the "reference_id" field.
func (shc *SubcontrolHistoryCreate) SetReferenceID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetReferenceID(s)
	return shc
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableReferenceID(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetReferenceID(*s)
	}
	return shc
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (shc *SubcontrolHistoryCreate) SetAuditorReferenceID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetAuditorReferenceID(s)
	return shc
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableAuditorReferenceID(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetAuditorReferenceID(*s)
	}
	return shc
}

// SetStatus sets the "status" field.
func (shc *SubcontrolHistoryCreate) SetStatus(es enums.ControlStatus) *SubcontrolHistoryCreate {
	shc.mutation.SetStatus(es)
	return shc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableStatus(es *enums.ControlStatus) *SubcontrolHistoryCreate {
	if es != nil {
		shc.SetStatus(*es)
	}
	return shc
}

// SetSource sets the "source" field.
func (shc *SubcontrolHistoryCreate) SetSource(es enums.ControlSource) *SubcontrolHistoryCreate {
	shc.mutation.SetSource(es)
	return shc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableSource(es *enums.ControlSource) *SubcontrolHistoryCreate {
	if es != nil {
		shc.SetSource(*es)
	}
	return shc
}

// SetControlType sets the "control_type" field.
func (shc *SubcontrolHistoryCreate) SetControlType(et enums.ControlType) *SubcontrolHistoryCreate {
	shc.mutation.SetControlType(et)
	return shc
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableControlType(et *enums.ControlType) *SubcontrolHistoryCreate {
	if et != nil {
		shc.SetControlType(*et)
	}
	return shc
}

// SetCategory sets the "category" field.
func (shc *SubcontrolHistoryCreate) SetCategory(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetCategory(s)
	return shc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableCategory(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetCategory(*s)
	}
	return shc
}

// SetCategoryID sets the "category_id" field.
func (shc *SubcontrolHistoryCreate) SetCategoryID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetCategoryID(s)
	return shc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableCategoryID(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetCategoryID(*s)
	}
	return shc
}

// SetSubcategory sets the "subcategory" field.
func (shc *SubcontrolHistoryCreate) SetSubcategory(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetSubcategory(s)
	return shc
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableSubcategory(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetSubcategory(*s)
	}
	return shc
}

// SetMappedCategories sets the "mapped_categories" field.
func (shc *SubcontrolHistoryCreate) SetMappedCategories(s []string) *SubcontrolHistoryCreate {
	shc.mutation.SetMappedCategories(s)
	return shc
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (shc *SubcontrolHistoryCreate) SetAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolHistoryCreate {
	shc.mutation.SetAssessmentObjectives(mo)
	return shc
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (shc *SubcontrolHistoryCreate) SetAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolHistoryCreate {
	shc.mutation.SetAssessmentMethods(mm)
	return shc
}

// SetControlQuestions sets the "control_questions" field.
func (shc *SubcontrolHistoryCreate) SetControlQuestions(s []string) *SubcontrolHistoryCreate {
	shc.mutation.SetControlQuestions(s)
	return shc
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (shc *SubcontrolHistoryCreate) SetImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolHistoryCreate {
	shc.mutation.SetImplementationGuidance(mg)
	return shc
}

// SetExampleEvidence sets the "example_evidence" field.
func (shc *SubcontrolHistoryCreate) SetExampleEvidence(me []models.ExampleEvidence) *SubcontrolHistoryCreate {
	shc.mutation.SetExampleEvidence(me)
	return shc
}

// SetReferences sets the "references" field.
func (shc *SubcontrolHistoryCreate) SetReferences(m []models.Reference) *SubcontrolHistoryCreate {
	shc.mutation.SetReferences(m)
	return shc
}

// SetRefCode sets the "ref_code" field.
func (shc *SubcontrolHistoryCreate) SetRefCode(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetRefCode(s)
	return shc
}

// SetControlID sets the "control_id" field.
func (shc *SubcontrolHistoryCreate) SetControlID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetControlID(s)
	return shc
}

// SetID sets the "id" field.
func (shc *SubcontrolHistoryCreate) SetID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetID(s)
	return shc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableID(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetID(*s)
	}
	return shc
}

// Mutation returns the SubcontrolHistoryMutation object of the builder.
func (shc *SubcontrolHistoryCreate) Mutation() *SubcontrolHistoryMutation {
	return shc.mutation
}

// Save creates the SubcontrolHistory in the database.
func (shc *SubcontrolHistoryCreate) Save(ctx context.Context) (*SubcontrolHistory, error) {
	shc.defaults()
	return withHooks(ctx, shc.sqlSave, shc.mutation, shc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shc *SubcontrolHistoryCreate) SaveX(ctx context.Context) *SubcontrolHistory {
	v, err := shc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shc *SubcontrolHistoryCreate) Exec(ctx context.Context) error {
	_, err := shc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shc *SubcontrolHistoryCreate) ExecX(ctx context.Context) {
	if err := shc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shc *SubcontrolHistoryCreate) defaults() {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		v := subcontrolhistory.DefaultHistoryTime()
		shc.mutation.SetHistoryTime(v)
	}
	if _, ok := shc.mutation.CreatedAt(); !ok {
		v := subcontrolhistory.DefaultCreatedAt()
		shc.mutation.SetCreatedAt(v)
	}
	if _, ok := shc.mutation.UpdatedAt(); !ok {
		v := subcontrolhistory.DefaultUpdatedAt()
		shc.mutation.SetUpdatedAt(v)
	}
	if _, ok := shc.mutation.Tags(); !ok {
		v := subcontrolhistory.DefaultTags
		shc.mutation.SetTags(v)
	}
	if _, ok := shc.mutation.Status(); !ok {
		v := subcontrolhistory.DefaultStatus
		shc.mutation.SetStatus(v)
	}
	if _, ok := shc.mutation.Source(); !ok {
		v := subcontrolhistory.DefaultSource
		shc.mutation.SetSource(v)
	}
	if _, ok := shc.mutation.ControlType(); !ok {
		v := subcontrolhistory.DefaultControlType
		shc.mutation.SetControlType(v)
	}
	if _, ok := shc.mutation.ID(); !ok {
		v := subcontrolhistory.DefaultID()
		shc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shc *SubcontrolHistoryCreate) check() error {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "SubcontrolHistory.history_time"`)}
	}
	if _, ok := shc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "SubcontrolHistory.operation"`)}
	}
	if v, ok := shc.mutation.Operation(); ok {
		if err := subcontrolhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.operation": %w`, err)}
		}
	}
	if _, ok := shc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "SubcontrolHistory.display_id"`)}
	}
	if v, ok := shc.mutation.Status(); ok {
		if err := subcontrolhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.status": %w`, err)}
		}
	}
	if v, ok := shc.mutation.Source(); ok {
		if err := subcontrolhistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.source": %w`, err)}
		}
	}
	if v, ok := shc.mutation.ControlType(); ok {
		if err := subcontrolhistory.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.control_type": %w`, err)}
		}
	}
	if _, ok := shc.mutation.RefCode(); !ok {
		return &ValidationError{Name: "ref_code", err: errors.New(`generated: missing required field "SubcontrolHistory.ref_code"`)}
	}
	if _, ok := shc.mutation.ControlID(); !ok {
		return &ValidationError{Name: "control_id", err: errors.New(`generated: missing required field "SubcontrolHistory.control_id"`)}
	}
	return nil
}

func (shc *SubcontrolHistoryCreate) sqlSave(ctx context.Context) (*SubcontrolHistory, error) {
	if err := shc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubcontrolHistory.ID type: %T", _spec.ID.Value)
		}
	}
	shc.mutation.id = &_node.ID
	shc.mutation.done = true
	return _node, nil
}

func (shc *SubcontrolHistoryCreate) createSpec() (*SubcontrolHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &SubcontrolHistory{config: shc.config}
		_spec = sqlgraph.NewCreateSpec(subcontrolhistory.Table, sqlgraph.NewFieldSpec(subcontrolhistory.FieldID, field.TypeString))
	)
	_spec.Schema = shc.schemaConfig.SubcontrolHistory
	if id, ok := shc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := shc.mutation.HistoryTime(); ok {
		_spec.SetField(subcontrolhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := shc.mutation.Ref(); ok {
		_spec.SetField(subcontrolhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := shc.mutation.Operation(); ok {
		_spec.SetField(subcontrolhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := shc.mutation.CreatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shc.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := shc.mutation.CreatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := shc.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := shc.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := shc.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := shc.mutation.DisplayID(); ok {
		_spec.SetField(subcontrolhistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := shc.mutation.Tags(); ok {
		_spec.SetField(subcontrolhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := shc.mutation.OwnerID(); ok {
		_spec.SetField(subcontrolhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := shc.mutation.Description(); ok {
		_spec.SetField(subcontrolhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := shc.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := shc.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString, value)
		_node.AuditorReferenceID = value
	}
	if value, ok := shc.mutation.Status(); ok {
		_spec.SetField(subcontrolhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := shc.mutation.Source(); ok {
		_spec.SetField(subcontrolhistory.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := shc.mutation.ControlType(); ok {
		_spec.SetField(subcontrolhistory.FieldControlType, field.TypeEnum, value)
		_node.ControlType = value
	}
	if value, ok := shc.mutation.Category(); ok {
		_spec.SetField(subcontrolhistory.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := shc.mutation.CategoryID(); ok {
		_spec.SetField(subcontrolhistory.FieldCategoryID, field.TypeString, value)
		_node.CategoryID = value
	}
	if value, ok := shc.mutation.Subcategory(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcategory, field.TypeString, value)
		_node.Subcategory = value
	}
	if value, ok := shc.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrolhistory.FieldMappedCategories, field.TypeJSON, value)
		_node.MappedCategories = value
	}
	if value, ok := shc.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON, value)
		_node.AssessmentObjectives = value
	}
	if value, ok := shc.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON, value)
		_node.AssessmentMethods = value
	}
	if value, ok := shc.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrolhistory.FieldControlQuestions, field.TypeJSON, value)
		_node.ControlQuestions = value
	}
	if value, ok := shc.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON, value)
		_node.ImplementationGuidance = value
	}
	if value, ok := shc.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON, value)
		_node.ExampleEvidence = value
	}
	if value, ok := shc.mutation.References(); ok {
		_spec.SetField(subcontrolhistory.FieldReferences, field.TypeJSON, value)
		_node.References = value
	}
	if value, ok := shc.mutation.RefCode(); ok {
		_spec.SetField(subcontrolhistory.FieldRefCode, field.TypeString, value)
		_node.RefCode = value
	}
	if value, ok := shc.mutation.ControlID(); ok {
		_spec.SetField(subcontrolhistory.FieldControlID, field.TypeString, value)
		_node.ControlID = value
	}
	return _node, _spec
}

// SubcontrolHistoryCreateBulk is the builder for creating many SubcontrolHistory entities in bulk.
type SubcontrolHistoryCreateBulk struct {
	config
	err      error
	builders []*SubcontrolHistoryCreate
}

// Save creates the SubcontrolHistory entities in the database.
func (shcb *SubcontrolHistoryCreateBulk) Save(ctx context.Context) ([]*SubcontrolHistory, error) {
	if shcb.err != nil {
		return nil, shcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(shcb.builders))
	nodes := make([]*SubcontrolHistory, len(shcb.builders))
	mutators := make([]Mutator, len(shcb.builders))
	for i := range shcb.builders {
		func(i int, root context.Context) {
			builder := shcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubcontrolHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shcb *SubcontrolHistoryCreateBulk) SaveX(ctx context.Context) []*SubcontrolHistory {
	v, err := shcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shcb *SubcontrolHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := shcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shcb *SubcontrolHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := shcb.Exec(ctx); err != nil {
		panic(err)
	}
}
