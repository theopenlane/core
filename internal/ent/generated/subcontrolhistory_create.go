// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/entx/history"
)

// SubcontrolHistoryCreate is the builder for creating a SubcontrolHistory entity.
type SubcontrolHistoryCreate struct {
	config
	mutation *SubcontrolHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (shc *SubcontrolHistoryCreate) SetHistoryTime(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetHistoryTime(t)
	return shc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableHistoryTime(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetHistoryTime(*t)
	}
	return shc
}

// SetRef sets the "ref" field.
func (shc *SubcontrolHistoryCreate) SetRef(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetRef(s)
	return shc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableRef(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetRef(*s)
	}
	return shc
}

// SetOperation sets the "operation" field.
func (shc *SubcontrolHistoryCreate) SetOperation(ht history.OpType) *SubcontrolHistoryCreate {
	shc.mutation.SetOperation(ht)
	return shc
}

// SetCreatedAt sets the "created_at" field.
func (shc *SubcontrolHistoryCreate) SetCreatedAt(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetCreatedAt(t)
	return shc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableCreatedAt(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetCreatedAt(*t)
	}
	return shc
}

// SetUpdatedAt sets the "updated_at" field.
func (shc *SubcontrolHistoryCreate) SetUpdatedAt(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetUpdatedAt(t)
	return shc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableUpdatedAt(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetUpdatedAt(*t)
	}
	return shc
}

// SetCreatedBy sets the "created_by" field.
func (shc *SubcontrolHistoryCreate) SetCreatedBy(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetCreatedBy(s)
	return shc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableCreatedBy(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetCreatedBy(*s)
	}
	return shc
}

// SetUpdatedBy sets the "updated_by" field.
func (shc *SubcontrolHistoryCreate) SetUpdatedBy(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetUpdatedBy(s)
	return shc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableUpdatedBy(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetUpdatedBy(*s)
	}
	return shc
}

// SetDeletedAt sets the "deleted_at" field.
func (shc *SubcontrolHistoryCreate) SetDeletedAt(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetDeletedAt(t)
	return shc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableDeletedAt(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetDeletedAt(*t)
	}
	return shc
}

// SetDeletedBy sets the "deleted_by" field.
func (shc *SubcontrolHistoryCreate) SetDeletedBy(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetDeletedBy(s)
	return shc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableDeletedBy(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetDeletedBy(*s)
	}
	return shc
}

// SetMappingID sets the "mapping_id" field.
func (shc *SubcontrolHistoryCreate) SetMappingID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetMappingID(s)
	return shc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableMappingID(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetMappingID(*s)
	}
	return shc
}

// SetTags sets the "tags" field.
func (shc *SubcontrolHistoryCreate) SetTags(s []string) *SubcontrolHistoryCreate {
	shc.mutation.SetTags(s)
	return shc
}

// SetOwnerID sets the "owner_id" field.
func (shc *SubcontrolHistoryCreate) SetOwnerID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetOwnerID(s)
	return shc
}

// SetName sets the "name" field.
func (shc *SubcontrolHistoryCreate) SetName(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetName(s)
	return shc
}

// SetDescription sets the "description" field.
func (shc *SubcontrolHistoryCreate) SetDescription(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetDescription(s)
	return shc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableDescription(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetDescription(*s)
	}
	return shc
}

// SetStatus sets the "status" field.
func (shc *SubcontrolHistoryCreate) SetStatus(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetStatus(s)
	return shc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableStatus(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetStatus(*s)
	}
	return shc
}

// SetSubcontrolType sets the "subcontrol_type" field.
func (shc *SubcontrolHistoryCreate) SetSubcontrolType(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetSubcontrolType(s)
	return shc
}

// SetNillableSubcontrolType sets the "subcontrol_type" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableSubcontrolType(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetSubcontrolType(*s)
	}
	return shc
}

// SetVersion sets the "version" field.
func (shc *SubcontrolHistoryCreate) SetVersion(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetVersion(s)
	return shc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableVersion(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetVersion(*s)
	}
	return shc
}

// SetSubcontrolNumber sets the "subcontrol_number" field.
func (shc *SubcontrolHistoryCreate) SetSubcontrolNumber(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetSubcontrolNumber(s)
	return shc
}

// SetNillableSubcontrolNumber sets the "subcontrol_number" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableSubcontrolNumber(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetSubcontrolNumber(*s)
	}
	return shc
}

// SetFamily sets the "family" field.
func (shc *SubcontrolHistoryCreate) SetFamily(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetFamily(s)
	return shc
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableFamily(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetFamily(*s)
	}
	return shc
}

// SetClass sets the "class" field.
func (shc *SubcontrolHistoryCreate) SetClass(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetClass(s)
	return shc
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableClass(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetClass(*s)
	}
	return shc
}

// SetSource sets the "source" field.
func (shc *SubcontrolHistoryCreate) SetSource(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetSource(s)
	return shc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableSource(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetSource(*s)
	}
	return shc
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (shc *SubcontrolHistoryCreate) SetMappedFrameworks(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetMappedFrameworks(s)
	return shc
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableMappedFrameworks(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetMappedFrameworks(*s)
	}
	return shc
}

// SetImplementationEvidence sets the "implementation_evidence" field.
func (shc *SubcontrolHistoryCreate) SetImplementationEvidence(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetImplementationEvidence(s)
	return shc
}

// SetNillableImplementationEvidence sets the "implementation_evidence" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableImplementationEvidence(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetImplementationEvidence(*s)
	}
	return shc
}

// SetImplementationStatus sets the "implementation_status" field.
func (shc *SubcontrolHistoryCreate) SetImplementationStatus(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetImplementationStatus(s)
	return shc
}

// SetNillableImplementationStatus sets the "implementation_status" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableImplementationStatus(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetImplementationStatus(*s)
	}
	return shc
}

// SetImplementationDate sets the "implementation_date" field.
func (shc *SubcontrolHistoryCreate) SetImplementationDate(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetImplementationDate(t)
	return shc
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableImplementationDate(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetImplementationDate(*t)
	}
	return shc
}

// SetImplementationVerification sets the "implementation_verification" field.
func (shc *SubcontrolHistoryCreate) SetImplementationVerification(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetImplementationVerification(s)
	return shc
}

// SetNillableImplementationVerification sets the "implementation_verification" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableImplementationVerification(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetImplementationVerification(*s)
	}
	return shc
}

// SetImplementationVerificationDate sets the "implementation_verification_date" field.
func (shc *SubcontrolHistoryCreate) SetImplementationVerificationDate(t time.Time) *SubcontrolHistoryCreate {
	shc.mutation.SetImplementationVerificationDate(t)
	return shc
}

// SetNillableImplementationVerificationDate sets the "implementation_verification_date" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableImplementationVerificationDate(t *time.Time) *SubcontrolHistoryCreate {
	if t != nil {
		shc.SetImplementationVerificationDate(*t)
	}
	return shc
}

// SetDetails sets the "details" field.
func (shc *SubcontrolHistoryCreate) SetDetails(m map[string]interface{}) *SubcontrolHistoryCreate {
	shc.mutation.SetDetails(m)
	return shc
}

// SetID sets the "id" field.
func (shc *SubcontrolHistoryCreate) SetID(s string) *SubcontrolHistoryCreate {
	shc.mutation.SetID(s)
	return shc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (shc *SubcontrolHistoryCreate) SetNillableID(s *string) *SubcontrolHistoryCreate {
	if s != nil {
		shc.SetID(*s)
	}
	return shc
}

// Mutation returns the SubcontrolHistoryMutation object of the builder.
func (shc *SubcontrolHistoryCreate) Mutation() *SubcontrolHistoryMutation {
	return shc.mutation
}

// Save creates the SubcontrolHistory in the database.
func (shc *SubcontrolHistoryCreate) Save(ctx context.Context) (*SubcontrolHistory, error) {
	if err := shc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, shc.sqlSave, shc.mutation, shc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shc *SubcontrolHistoryCreate) SaveX(ctx context.Context) *SubcontrolHistory {
	v, err := shc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shc *SubcontrolHistoryCreate) Exec(ctx context.Context) error {
	_, err := shc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shc *SubcontrolHistoryCreate) ExecX(ctx context.Context) {
	if err := shc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shc *SubcontrolHistoryCreate) defaults() error {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		if subcontrolhistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized subcontrolhistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := subcontrolhistory.DefaultHistoryTime()
		shc.mutation.SetHistoryTime(v)
	}
	if _, ok := shc.mutation.CreatedAt(); !ok {
		if subcontrolhistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrolhistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrolhistory.DefaultCreatedAt()
		shc.mutation.SetCreatedAt(v)
	}
	if _, ok := shc.mutation.UpdatedAt(); !ok {
		if subcontrolhistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrolhistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrolhistory.DefaultUpdatedAt()
		shc.mutation.SetUpdatedAt(v)
	}
	if _, ok := shc.mutation.MappingID(); !ok {
		if subcontrolhistory.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized subcontrolhistory.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := subcontrolhistory.DefaultMappingID()
		shc.mutation.SetMappingID(v)
	}
	if _, ok := shc.mutation.Tags(); !ok {
		v := subcontrolhistory.DefaultTags
		shc.mutation.SetTags(v)
	}
	if _, ok := shc.mutation.ID(); !ok {
		if subcontrolhistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized subcontrolhistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := subcontrolhistory.DefaultID()
		shc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (shc *SubcontrolHistoryCreate) check() error {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "SubcontrolHistory.history_time"`)}
	}
	if _, ok := shc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "SubcontrolHistory.operation"`)}
	}
	if v, ok := shc.mutation.Operation(); ok {
		if err := subcontrolhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.operation": %w`, err)}
		}
	}
	if _, ok := shc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "SubcontrolHistory.mapping_id"`)}
	}
	if _, ok := shc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`generated: missing required field "SubcontrolHistory.owner_id"`)}
	}
	if _, ok := shc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "SubcontrolHistory.name"`)}
	}
	return nil
}

func (shc *SubcontrolHistoryCreate) sqlSave(ctx context.Context) (*SubcontrolHistory, error) {
	if err := shc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubcontrolHistory.ID type: %T", _spec.ID.Value)
		}
	}
	shc.mutation.id = &_node.ID
	shc.mutation.done = true
	return _node, nil
}

func (shc *SubcontrolHistoryCreate) createSpec() (*SubcontrolHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &SubcontrolHistory{config: shc.config}
		_spec = sqlgraph.NewCreateSpec(subcontrolhistory.Table, sqlgraph.NewFieldSpec(subcontrolhistory.FieldID, field.TypeString))
	)
	_spec.Schema = shc.schemaConfig.SubcontrolHistory
	if id, ok := shc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := shc.mutation.HistoryTime(); ok {
		_spec.SetField(subcontrolhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := shc.mutation.Ref(); ok {
		_spec.SetField(subcontrolhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := shc.mutation.Operation(); ok {
		_spec.SetField(subcontrolhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := shc.mutation.CreatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shc.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := shc.mutation.CreatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := shc.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := shc.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := shc.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := shc.mutation.MappingID(); ok {
		_spec.SetField(subcontrolhistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := shc.mutation.Tags(); ok {
		_spec.SetField(subcontrolhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := shc.mutation.OwnerID(); ok {
		_spec.SetField(subcontrolhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := shc.mutation.Name(); ok {
		_spec.SetField(subcontrolhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := shc.mutation.Description(); ok {
		_spec.SetField(subcontrolhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := shc.mutation.Status(); ok {
		_spec.SetField(subcontrolhistory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := shc.mutation.SubcontrolType(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcontrolType, field.TypeString, value)
		_node.SubcontrolType = value
	}
	if value, ok := shc.mutation.Version(); ok {
		_spec.SetField(subcontrolhistory.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := shc.mutation.SubcontrolNumber(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcontrolNumber, field.TypeString, value)
		_node.SubcontrolNumber = value
	}
	if value, ok := shc.mutation.Family(); ok {
		_spec.SetField(subcontrolhistory.FieldFamily, field.TypeString, value)
		_node.Family = value
	}
	if value, ok := shc.mutation.Class(); ok {
		_spec.SetField(subcontrolhistory.FieldClass, field.TypeString, value)
		_node.Class = value
	}
	if value, ok := shc.mutation.Source(); ok {
		_spec.SetField(subcontrolhistory.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := shc.mutation.MappedFrameworks(); ok {
		_spec.SetField(subcontrolhistory.FieldMappedFrameworks, field.TypeString, value)
		_node.MappedFrameworks = value
	}
	if value, ok := shc.mutation.ImplementationEvidence(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationEvidence, field.TypeString, value)
		_node.ImplementationEvidence = value
	}
	if value, ok := shc.mutation.ImplementationStatus(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationStatus, field.TypeString, value)
		_node.ImplementationStatus = value
	}
	if value, ok := shc.mutation.ImplementationDate(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationDate, field.TypeTime, value)
		_node.ImplementationDate = value
	}
	if value, ok := shc.mutation.ImplementationVerification(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationVerification, field.TypeString, value)
		_node.ImplementationVerification = value
	}
	if value, ok := shc.mutation.ImplementationVerificationDate(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationVerificationDate, field.TypeTime, value)
		_node.ImplementationVerificationDate = value
	}
	if value, ok := shc.mutation.Details(); ok {
		_spec.SetField(subcontrolhistory.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	return _node, _spec
}

// SubcontrolHistoryCreateBulk is the builder for creating many SubcontrolHistory entities in bulk.
type SubcontrolHistoryCreateBulk struct {
	config
	err      error
	builders []*SubcontrolHistoryCreate
}

// Save creates the SubcontrolHistory entities in the database.
func (shcb *SubcontrolHistoryCreateBulk) Save(ctx context.Context) ([]*SubcontrolHistory, error) {
	if shcb.err != nil {
		return nil, shcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(shcb.builders))
	nodes := make([]*SubcontrolHistory, len(shcb.builders))
	mutators := make([]Mutator, len(shcb.builders))
	for i := range shcb.builders {
		func(i int, root context.Context) {
			builder := shcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubcontrolHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shcb *SubcontrolHistoryCreateBulk) SaveX(ctx context.Context) []*SubcontrolHistory {
	v, err := shcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shcb *SubcontrolHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := shcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shcb *SubcontrolHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := shcb.Exec(ctx); err != nil {
		panic(err)
	}
}
