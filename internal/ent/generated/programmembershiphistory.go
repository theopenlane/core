// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/programmembershiphistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ProgramMembershipHistory is the model entity for the ProgramMembershipHistory schema.
type ProgramMembershipHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// Role holds the value of the "role" field.
	Role enums.Role `json:"role,omitempty"`
	// ProgramID holds the value of the "program_id" field.
	ProgramID string `json:"program_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID       string `json:"user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramMembershipHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programmembershiphistory.FieldOperation:
			values[i] = new(history.OpType)
		case programmembershiphistory.FieldID, programmembershiphistory.FieldRef, programmembershiphistory.FieldCreatedBy, programmembershiphistory.FieldUpdatedBy, programmembershiphistory.FieldMappingID, programmembershiphistory.FieldDeletedBy, programmembershiphistory.FieldRole, programmembershiphistory.FieldProgramID, programmembershiphistory.FieldUserID:
			values[i] = new(sql.NullString)
		case programmembershiphistory.FieldHistoryTime, programmembershiphistory.FieldCreatedAt, programmembershiphistory.FieldUpdatedAt, programmembershiphistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramMembershipHistory fields.
func (pmh *ProgramMembershipHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programmembershiphistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pmh.ID = value.String
			}
		case programmembershiphistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				pmh.HistoryTime = value.Time
			}
		case programmembershiphistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				pmh.Ref = value.String
			}
		case programmembershiphistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				pmh.Operation = *value
			}
		case programmembershiphistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pmh.CreatedAt = value.Time
			}
		case programmembershiphistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pmh.UpdatedAt = value.Time
			}
		case programmembershiphistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pmh.CreatedBy = value.String
			}
		case programmembershiphistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pmh.UpdatedBy = value.String
			}
		case programmembershiphistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				pmh.MappingID = value.String
			}
		case programmembershiphistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pmh.DeletedAt = value.Time
			}
		case programmembershiphistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pmh.DeletedBy = value.String
			}
		case programmembershiphistory.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				pmh.Role = enums.Role(value.String)
			}
		case programmembershiphistory.FieldProgramID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program_id", values[i])
			} else if value.Valid {
				pmh.ProgramID = value.String
			}
		case programmembershiphistory.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pmh.UserID = value.String
			}
		default:
			pmh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramMembershipHistory.
// This includes values selected through modifiers, order, etc.
func (pmh *ProgramMembershipHistory) Value(name string) (ent.Value, error) {
	return pmh.selectValues.Get(name)
}

// Update returns a builder for updating this ProgramMembershipHistory.
// Note that you need to call ProgramMembershipHistory.Unwrap() before calling this method if this ProgramMembershipHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (pmh *ProgramMembershipHistory) Update() *ProgramMembershipHistoryUpdateOne {
	return NewProgramMembershipHistoryClient(pmh.config).UpdateOne(pmh)
}

// Unwrap unwraps the ProgramMembershipHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pmh *ProgramMembershipHistory) Unwrap() *ProgramMembershipHistory {
	_tx, ok := pmh.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProgramMembershipHistory is not a transactional entity")
	}
	pmh.config.driver = _tx.drv
	return pmh
}

// String implements the fmt.Stringer.
func (pmh *ProgramMembershipHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramMembershipHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pmh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(pmh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(pmh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", pmh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pmh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pmh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pmh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pmh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(pmh.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pmh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(pmh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", pmh.Role))
	builder.WriteString(", ")
	builder.WriteString("program_id=")
	builder.WriteString(pmh.ProgramID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(pmh.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// ProgramMembershipHistories is a parsable slice of ProgramMembershipHistory.
type ProgramMembershipHistories []*ProgramMembershipHistory
