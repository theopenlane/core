// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobRunnerTokenUpdate is the builder for updating JobRunnerToken entities.
type JobRunnerTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *JobRunnerTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobRunnerTokenUpdate builder.
func (_u *JobRunnerTokenUpdate) Where(ps ...predicate.JobRunnerToken) *JobRunnerTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *JobRunnerTokenUpdate) SetUpdatedAt(v time.Time) *JobRunnerTokenUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *JobRunnerTokenUpdate) ClearUpdatedAt() *JobRunnerTokenUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *JobRunnerTokenUpdate) SetUpdatedBy(v string) *JobRunnerTokenUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableUpdatedBy(v *string) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *JobRunnerTokenUpdate) ClearUpdatedBy() *JobRunnerTokenUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *JobRunnerTokenUpdate) SetDeletedAt(v time.Time) *JobRunnerTokenUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableDeletedAt(v *time.Time) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *JobRunnerTokenUpdate) ClearDeletedAt() *JobRunnerTokenUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *JobRunnerTokenUpdate) SetDeletedBy(v string) *JobRunnerTokenUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableDeletedBy(v *string) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *JobRunnerTokenUpdate) ClearDeletedBy() *JobRunnerTokenUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *JobRunnerTokenUpdate) SetTags(v []string) *JobRunnerTokenUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *JobRunnerTokenUpdate) AppendTags(v []string) *JobRunnerTokenUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *JobRunnerTokenUpdate) ClearTags() *JobRunnerTokenUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *JobRunnerTokenUpdate) SetOwnerID(v string) *JobRunnerTokenUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableOwnerID(v *string) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *JobRunnerTokenUpdate) ClearOwnerID() *JobRunnerTokenUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *JobRunnerTokenUpdate) SetExpiresAt(v time.Time) *JobRunnerTokenUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableExpiresAt(v *time.Time) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *JobRunnerTokenUpdate) ClearExpiresAt() *JobRunnerTokenUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *JobRunnerTokenUpdate) SetLastUsedAt(v time.Time) *JobRunnerTokenUpdate {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableLastUsedAt(v *time.Time) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *JobRunnerTokenUpdate) ClearLastUsedAt() *JobRunnerTokenUpdate {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *JobRunnerTokenUpdate) SetIsActive(v bool) *JobRunnerTokenUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableIsActive(v *bool) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// ClearIsActive clears the value of the "is_active" field.
func (_u *JobRunnerTokenUpdate) ClearIsActive() *JobRunnerTokenUpdate {
	_u.mutation.ClearIsActive()
	return _u
}

// SetRevokedReason sets the "revoked_reason" field.
func (_u *JobRunnerTokenUpdate) SetRevokedReason(v string) *JobRunnerTokenUpdate {
	_u.mutation.SetRevokedReason(v)
	return _u
}

// SetNillableRevokedReason sets the "revoked_reason" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableRevokedReason(v *string) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetRevokedReason(*v)
	}
	return _u
}

// ClearRevokedReason clears the value of the "revoked_reason" field.
func (_u *JobRunnerTokenUpdate) ClearRevokedReason() *JobRunnerTokenUpdate {
	_u.mutation.ClearRevokedReason()
	return _u
}

// SetRevokedBy sets the "revoked_by" field.
func (_u *JobRunnerTokenUpdate) SetRevokedBy(v string) *JobRunnerTokenUpdate {
	_u.mutation.SetRevokedBy(v)
	return _u
}

// SetNillableRevokedBy sets the "revoked_by" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableRevokedBy(v *string) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetRevokedBy(*v)
	}
	return _u
}

// ClearRevokedBy clears the value of the "revoked_by" field.
func (_u *JobRunnerTokenUpdate) ClearRevokedBy() *JobRunnerTokenUpdate {
	_u.mutation.ClearRevokedBy()
	return _u
}

// SetRevokedAt sets the "revoked_at" field.
func (_u *JobRunnerTokenUpdate) SetRevokedAt(v time.Time) *JobRunnerTokenUpdate {
	_u.mutation.SetRevokedAt(v)
	return _u
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (_u *JobRunnerTokenUpdate) SetNillableRevokedAt(v *time.Time) *JobRunnerTokenUpdate {
	if v != nil {
		_u.SetRevokedAt(*v)
	}
	return _u
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (_u *JobRunnerTokenUpdate) ClearRevokedAt() *JobRunnerTokenUpdate {
	_u.mutation.ClearRevokedAt()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *JobRunnerTokenUpdate) SetOwner(v *Organization) *JobRunnerTokenUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddJobRunnerIDs adds the "job_runners" edge to the JobRunner entity by IDs.
func (_u *JobRunnerTokenUpdate) AddJobRunnerIDs(ids ...string) *JobRunnerTokenUpdate {
	_u.mutation.AddJobRunnerIDs(ids...)
	return _u
}

// AddJobRunners adds the "job_runners" edges to the JobRunner entity.
func (_u *JobRunnerTokenUpdate) AddJobRunners(v ...*JobRunner) *JobRunnerTokenUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobRunnerIDs(ids...)
}

// Mutation returns the JobRunnerTokenMutation object of the builder.
func (_u *JobRunnerTokenUpdate) Mutation() *JobRunnerTokenMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *JobRunnerTokenUpdate) ClearOwner() *JobRunnerTokenUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearJobRunners clears all "job_runners" edges to the JobRunner entity.
func (_u *JobRunnerTokenUpdate) ClearJobRunners() *JobRunnerTokenUpdate {
	_u.mutation.ClearJobRunners()
	return _u
}

// RemoveJobRunnerIDs removes the "job_runners" edge to JobRunner entities by IDs.
func (_u *JobRunnerTokenUpdate) RemoveJobRunnerIDs(ids ...string) *JobRunnerTokenUpdate {
	_u.mutation.RemoveJobRunnerIDs(ids...)
	return _u
}

// RemoveJobRunners removes "job_runners" edges to JobRunner entities.
func (_u *JobRunnerTokenUpdate) RemoveJobRunners(v ...*JobRunner) *JobRunnerTokenUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobRunnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *JobRunnerTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobRunnerTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *JobRunnerTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobRunnerTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobRunnerTokenUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if jobrunnertoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunnertoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunnertoken.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobRunnerTokenUpdate) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := jobrunnertoken.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "JobRunnerToken.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *JobRunnerTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobRunnerTokenUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *JobRunnerTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobrunnertoken.Table, jobrunnertoken.Columns, sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(jobrunnertoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(jobrunnertoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(jobrunnertoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(jobrunnertoken.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobrunnertoken.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(jobrunnertoken.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(jobrunnertoken.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(jobrunnertoken.FieldIsActive, field.TypeBool, value)
	}
	if _u.mutation.IsActiveCleared() {
		_spec.ClearField(jobrunnertoken.FieldIsActive, field.TypeBool)
	}
	if value, ok := _u.mutation.RevokedReason(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedReason, field.TypeString, value)
	}
	if _u.mutation.RevokedReasonCleared() {
		_spec.ClearField(jobrunnertoken.FieldRevokedReason, field.TypeString)
	}
	if value, ok := _u.mutation.RevokedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedBy, field.TypeString, value)
	}
	if _u.mutation.RevokedByCleared() {
		_spec.ClearField(jobrunnertoken.FieldRevokedBy, field.TypeString)
	}
	if value, ok := _u.mutation.RevokedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedAt, field.TypeTime, value)
	}
	if _u.mutation.RevokedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldRevokedAt, field.TypeTime)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnertoken.OwnerTable,
			Columns: []string{jobrunnertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnertoken.OwnerTable,
			Columns: []string{jobrunnertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobRunnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jobrunnertoken.JobRunnersTable,
			Columns: jobrunnertoken.JobRunnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerJobRunnerTokens
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobRunnersIDs(); len(nodes) > 0 && !_u.mutation.JobRunnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jobrunnertoken.JobRunnersTable,
			Columns: jobrunnertoken.JobRunnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobRunnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jobrunnertoken.JobRunnersTable,
			Columns: jobrunnertoken.JobRunnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.JobRunnerToken
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrunnertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// JobRunnerTokenUpdateOne is the builder for updating a single JobRunnerToken entity.
type JobRunnerTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobRunnerTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *JobRunnerTokenUpdateOne) SetUpdatedAt(v time.Time) *JobRunnerTokenUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *JobRunnerTokenUpdateOne) ClearUpdatedAt() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *JobRunnerTokenUpdateOne) SetUpdatedBy(v string) *JobRunnerTokenUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableUpdatedBy(v *string) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *JobRunnerTokenUpdateOne) ClearUpdatedBy() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *JobRunnerTokenUpdateOne) SetDeletedAt(v time.Time) *JobRunnerTokenUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableDeletedAt(v *time.Time) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *JobRunnerTokenUpdateOne) ClearDeletedAt() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *JobRunnerTokenUpdateOne) SetDeletedBy(v string) *JobRunnerTokenUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableDeletedBy(v *string) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *JobRunnerTokenUpdateOne) ClearDeletedBy() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *JobRunnerTokenUpdateOne) SetTags(v []string) *JobRunnerTokenUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *JobRunnerTokenUpdateOne) AppendTags(v []string) *JobRunnerTokenUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *JobRunnerTokenUpdateOne) ClearTags() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *JobRunnerTokenUpdateOne) SetOwnerID(v string) *JobRunnerTokenUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableOwnerID(v *string) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *JobRunnerTokenUpdateOne) ClearOwnerID() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *JobRunnerTokenUpdateOne) SetExpiresAt(v time.Time) *JobRunnerTokenUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableExpiresAt(v *time.Time) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *JobRunnerTokenUpdateOne) ClearExpiresAt() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *JobRunnerTokenUpdateOne) SetLastUsedAt(v time.Time) *JobRunnerTokenUpdateOne {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableLastUsedAt(v *time.Time) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *JobRunnerTokenUpdateOne) ClearLastUsedAt() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *JobRunnerTokenUpdateOne) SetIsActive(v bool) *JobRunnerTokenUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableIsActive(v *bool) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// ClearIsActive clears the value of the "is_active" field.
func (_u *JobRunnerTokenUpdateOne) ClearIsActive() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearIsActive()
	return _u
}

// SetRevokedReason sets the "revoked_reason" field.
func (_u *JobRunnerTokenUpdateOne) SetRevokedReason(v string) *JobRunnerTokenUpdateOne {
	_u.mutation.SetRevokedReason(v)
	return _u
}

// SetNillableRevokedReason sets the "revoked_reason" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableRevokedReason(v *string) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetRevokedReason(*v)
	}
	return _u
}

// ClearRevokedReason clears the value of the "revoked_reason" field.
func (_u *JobRunnerTokenUpdateOne) ClearRevokedReason() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearRevokedReason()
	return _u
}

// SetRevokedBy sets the "revoked_by" field.
func (_u *JobRunnerTokenUpdateOne) SetRevokedBy(v string) *JobRunnerTokenUpdateOne {
	_u.mutation.SetRevokedBy(v)
	return _u
}

// SetNillableRevokedBy sets the "revoked_by" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableRevokedBy(v *string) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetRevokedBy(*v)
	}
	return _u
}

// ClearRevokedBy clears the value of the "revoked_by" field.
func (_u *JobRunnerTokenUpdateOne) ClearRevokedBy() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearRevokedBy()
	return _u
}

// SetRevokedAt sets the "revoked_at" field.
func (_u *JobRunnerTokenUpdateOne) SetRevokedAt(v time.Time) *JobRunnerTokenUpdateOne {
	_u.mutation.SetRevokedAt(v)
	return _u
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (_u *JobRunnerTokenUpdateOne) SetNillableRevokedAt(v *time.Time) *JobRunnerTokenUpdateOne {
	if v != nil {
		_u.SetRevokedAt(*v)
	}
	return _u
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (_u *JobRunnerTokenUpdateOne) ClearRevokedAt() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearRevokedAt()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *JobRunnerTokenUpdateOne) SetOwner(v *Organization) *JobRunnerTokenUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddJobRunnerIDs adds the "job_runners" edge to the JobRunner entity by IDs.
func (_u *JobRunnerTokenUpdateOne) AddJobRunnerIDs(ids ...string) *JobRunnerTokenUpdateOne {
	_u.mutation.AddJobRunnerIDs(ids...)
	return _u
}

// AddJobRunners adds the "job_runners" edges to the JobRunner entity.
func (_u *JobRunnerTokenUpdateOne) AddJobRunners(v ...*JobRunner) *JobRunnerTokenUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobRunnerIDs(ids...)
}

// Mutation returns the JobRunnerTokenMutation object of the builder.
func (_u *JobRunnerTokenUpdateOne) Mutation() *JobRunnerTokenMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *JobRunnerTokenUpdateOne) ClearOwner() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearJobRunners clears all "job_runners" edges to the JobRunner entity.
func (_u *JobRunnerTokenUpdateOne) ClearJobRunners() *JobRunnerTokenUpdateOne {
	_u.mutation.ClearJobRunners()
	return _u
}

// RemoveJobRunnerIDs removes the "job_runners" edge to JobRunner entities by IDs.
func (_u *JobRunnerTokenUpdateOne) RemoveJobRunnerIDs(ids ...string) *JobRunnerTokenUpdateOne {
	_u.mutation.RemoveJobRunnerIDs(ids...)
	return _u
}

// RemoveJobRunners removes "job_runners" edges to JobRunner entities.
func (_u *JobRunnerTokenUpdateOne) RemoveJobRunners(v ...*JobRunner) *JobRunnerTokenUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobRunnerIDs(ids...)
}

// Where appends a list predicates to the JobRunnerTokenUpdate builder.
func (_u *JobRunnerTokenUpdateOne) Where(ps ...predicate.JobRunnerToken) *JobRunnerTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *JobRunnerTokenUpdateOne) Select(field string, fields ...string) *JobRunnerTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated JobRunnerToken entity.
func (_u *JobRunnerTokenUpdateOne) Save(ctx context.Context) (*JobRunnerToken, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobRunnerTokenUpdateOne) SaveX(ctx context.Context) *JobRunnerToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *JobRunnerTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobRunnerTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobRunnerTokenUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if jobrunnertoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunnertoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunnertoken.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobRunnerTokenUpdateOne) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := jobrunnertoken.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "JobRunnerToken.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *JobRunnerTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobRunnerTokenUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *JobRunnerTokenUpdateOne) sqlSave(ctx context.Context) (_node *JobRunnerToken, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobrunnertoken.Table, jobrunnertoken.Columns, sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "JobRunnerToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobrunnertoken.FieldID)
		for _, f := range fields {
			if !jobrunnertoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != jobrunnertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(jobrunnertoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(jobrunnertoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(jobrunnertoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(jobrunnertoken.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobrunnertoken.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(jobrunnertoken.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(jobrunnertoken.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(jobrunnertoken.FieldIsActive, field.TypeBool, value)
	}
	if _u.mutation.IsActiveCleared() {
		_spec.ClearField(jobrunnertoken.FieldIsActive, field.TypeBool)
	}
	if value, ok := _u.mutation.RevokedReason(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedReason, field.TypeString, value)
	}
	if _u.mutation.RevokedReasonCleared() {
		_spec.ClearField(jobrunnertoken.FieldRevokedReason, field.TypeString)
	}
	if value, ok := _u.mutation.RevokedBy(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedBy, field.TypeString, value)
	}
	if _u.mutation.RevokedByCleared() {
		_spec.ClearField(jobrunnertoken.FieldRevokedBy, field.TypeString)
	}
	if value, ok := _u.mutation.RevokedAt(); ok {
		_spec.SetField(jobrunnertoken.FieldRevokedAt, field.TypeTime, value)
	}
	if _u.mutation.RevokedAtCleared() {
		_spec.ClearField(jobrunnertoken.FieldRevokedAt, field.TypeTime)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnertoken.OwnerTable,
			Columns: []string{jobrunnertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnertoken.OwnerTable,
			Columns: []string{jobrunnertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobRunnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jobrunnertoken.JobRunnersTable,
			Columns: jobrunnertoken.JobRunnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerJobRunnerTokens
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobRunnersIDs(); len(nodes) > 0 && !_u.mutation.JobRunnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jobrunnertoken.JobRunnersTable,
			Columns: jobrunnertoken.JobRunnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobRunnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jobrunnertoken.JobRunnersTable,
			Columns: jobrunnertoken.JobRunnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.JobRunnerToken
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &JobRunnerToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrunnertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
