// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// TFASettingCreate is the builder for creating a TFASetting entity.
type TFASettingCreate struct {
	config
	mutation *TFASettingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *TFASettingCreate) SetCreatedAt(v time.Time) *TFASettingCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableCreatedAt(v *time.Time) *TFASettingCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TFASettingCreate) SetUpdatedAt(v time.Time) *TFASettingCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableUpdatedAt(v *time.Time) *TFASettingCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *TFASettingCreate) SetCreatedBy(v string) *TFASettingCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableCreatedBy(v *string) *TFASettingCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *TFASettingCreate) SetUpdatedBy(v string) *TFASettingCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableUpdatedBy(v *string) *TFASettingCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *TFASettingCreate) SetDeletedAt(v time.Time) *TFASettingCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableDeletedAt(v *time.Time) *TFASettingCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *TFASettingCreate) SetDeletedBy(v string) *TFASettingCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableDeletedBy(v *string) *TFASettingCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *TFASettingCreate) SetOwnerID(v string) *TFASettingCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableOwnerID(v *string) *TFASettingCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetTfaSecret sets the "tfa_secret" field.
func (_c *TFASettingCreate) SetTfaSecret(v string) *TFASettingCreate {
	_c.mutation.SetTfaSecret(v)
	return _c
}

// SetNillableTfaSecret sets the "tfa_secret" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableTfaSecret(v *string) *TFASettingCreate {
	if v != nil {
		_c.SetTfaSecret(*v)
	}
	return _c
}

// SetVerified sets the "verified" field.
func (_c *TFASettingCreate) SetVerified(v bool) *TFASettingCreate {
	_c.mutation.SetVerified(v)
	return _c
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableVerified(v *bool) *TFASettingCreate {
	if v != nil {
		_c.SetVerified(*v)
	}
	return _c
}

// SetRecoveryCodes sets the "recovery_codes" field.
func (_c *TFASettingCreate) SetRecoveryCodes(v []string) *TFASettingCreate {
	_c.mutation.SetRecoveryCodes(v)
	return _c
}

// SetPhoneOtpAllowed sets the "phone_otp_allowed" field.
func (_c *TFASettingCreate) SetPhoneOtpAllowed(v bool) *TFASettingCreate {
	_c.mutation.SetPhoneOtpAllowed(v)
	return _c
}

// SetNillablePhoneOtpAllowed sets the "phone_otp_allowed" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillablePhoneOtpAllowed(v *bool) *TFASettingCreate {
	if v != nil {
		_c.SetPhoneOtpAllowed(*v)
	}
	return _c
}

// SetEmailOtpAllowed sets the "email_otp_allowed" field.
func (_c *TFASettingCreate) SetEmailOtpAllowed(v bool) *TFASettingCreate {
	_c.mutation.SetEmailOtpAllowed(v)
	return _c
}

// SetNillableEmailOtpAllowed sets the "email_otp_allowed" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableEmailOtpAllowed(v *bool) *TFASettingCreate {
	if v != nil {
		_c.SetEmailOtpAllowed(*v)
	}
	return _c
}

// SetTotpAllowed sets the "totp_allowed" field.
func (_c *TFASettingCreate) SetTotpAllowed(v bool) *TFASettingCreate {
	_c.mutation.SetTotpAllowed(v)
	return _c
}

// SetNillableTotpAllowed sets the "totp_allowed" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableTotpAllowed(v *bool) *TFASettingCreate {
	if v != nil {
		_c.SetTotpAllowed(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TFASettingCreate) SetID(v string) *TFASettingCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TFASettingCreate) SetNillableID(v *string) *TFASettingCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the User entity.
func (_c *TFASettingCreate) SetOwner(v *User) *TFASettingCreate {
	return _c.SetOwnerID(v.ID)
}

// Mutation returns the TFASettingMutation object of the builder.
func (_c *TFASettingCreate) Mutation() *TFASettingMutation {
	return _c.mutation
}

// Save creates the TFASetting in the database.
func (_c *TFASettingCreate) Save(ctx context.Context) (*TFASetting, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TFASettingCreate) SaveX(ctx context.Context) *TFASetting {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TFASettingCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TFASettingCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TFASettingCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if tfasetting.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized tfasetting.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := tfasetting.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if tfasetting.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tfasetting.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tfasetting.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Verified(); !ok {
		v := tfasetting.DefaultVerified
		_c.mutation.SetVerified(v)
	}
	if _, ok := _c.mutation.PhoneOtpAllowed(); !ok {
		v := tfasetting.DefaultPhoneOtpAllowed
		_c.mutation.SetPhoneOtpAllowed(v)
	}
	if _, ok := _c.mutation.EmailOtpAllowed(); !ok {
		v := tfasetting.DefaultEmailOtpAllowed
		_c.mutation.SetEmailOtpAllowed(v)
	}
	if _, ok := _c.mutation.TotpAllowed(); !ok {
		v := tfasetting.DefaultTotpAllowed
		_c.mutation.SetTotpAllowed(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if tfasetting.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized tfasetting.DefaultID (forgotten import generated/runtime?)")
		}
		v := tfasetting.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *TFASettingCreate) check() error {
	if _, ok := _c.mutation.Verified(); !ok {
		return &ValidationError{Name: "verified", err: errors.New(`generated: missing required field "TFASetting.verified"`)}
	}
	return nil
}

func (_c *TFASettingCreate) sqlSave(ctx context.Context) (*TFASetting, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TFASetting.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TFASettingCreate) createSpec() (*TFASetting, *sqlgraph.CreateSpec) {
	var (
		_node = &TFASetting{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(tfasetting.Table, sqlgraph.NewFieldSpec(tfasetting.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.TFASetting
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(tfasetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(tfasetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(tfasetting.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(tfasetting.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(tfasetting.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(tfasetting.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.TfaSecret(); ok {
		_spec.SetField(tfasetting.FieldTfaSecret, field.TypeString, value)
		_node.TfaSecret = &value
	}
	if value, ok := _c.mutation.Verified(); ok {
		_spec.SetField(tfasetting.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if value, ok := _c.mutation.RecoveryCodes(); ok {
		_spec.SetField(tfasetting.FieldRecoveryCodes, field.TypeJSON, value)
		_node.RecoveryCodes = value
	}
	if value, ok := _c.mutation.PhoneOtpAllowed(); ok {
		_spec.SetField(tfasetting.FieldPhoneOtpAllowed, field.TypeBool, value)
		_node.PhoneOtpAllowed = value
	}
	if value, ok := _c.mutation.EmailOtpAllowed(); ok {
		_spec.SetField(tfasetting.FieldEmailOtpAllowed, field.TypeBool, value)
		_node.EmailOtpAllowed = value
	}
	if value, ok := _c.mutation.TotpAllowed(); ok {
		_spec.SetField(tfasetting.FieldTotpAllowed, field.TypeBool, value)
		_node.TotpAllowed = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tfasetting.OwnerTable,
			Columns: []string{tfasetting.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TFASetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TFASettingCreateBulk is the builder for creating many TFASetting entities in bulk.
type TFASettingCreateBulk struct {
	config
	err      error
	builders []*TFASettingCreate
}

// Save creates the TFASetting entities in the database.
func (_c *TFASettingCreateBulk) Save(ctx context.Context) ([]*TFASetting, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TFASetting, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TFASettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TFASettingCreateBulk) SaveX(ctx context.Context) []*TFASetting {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TFASettingCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TFASettingCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
