// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
)

// Subprocessor is the model entity for the Subprocessor schema.
type Subprocessor struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// name of the standard body
	Name string `json:"name,omitempty"`
	// description of the subprocessor
	Description string `json:"description,omitempty"`
	// URL of the logo
	LogoRemoteURL *string `json:"logo_remote_url,omitempty"`
	// The local logo file id, takes precedence over the logo remote URL
	LogoLocalFileID *string `json:"logo_local_file_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubprocessorQuery when eager-loading is set.
	Edges        SubprocessorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubprocessorEdges holds the relations/edges for other nodes in the graph.
type SubprocessorEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// LogoFile holds the value of the logo_file edge.
	LogoFile *File `json:"logo_file,omitempty"`
	// TrustCenterSubprocessors holds the value of the trust_center_subprocessors edge.
	TrustCenterSubprocessors []*TrustCenterSubprocessor `json:"trust_center_subprocessors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedFiles                    map[string][]*File
	namedTrustCenterSubprocessors map[string][]*TrustCenterSubprocessor
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubprocessorEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e SubprocessorEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// LogoFileOrErr returns the LogoFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubprocessorEdges) LogoFileOrErr() (*File, error) {
	if e.LogoFile != nil {
		return e.LogoFile, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "logo_file"}
}

// TrustCenterSubprocessorsOrErr returns the TrustCenterSubprocessors value or an error if the edge
// was not loaded in eager-loading.
func (e SubprocessorEdges) TrustCenterSubprocessorsOrErr() ([]*TrustCenterSubprocessor, error) {
	if e.loadedTypes[3] {
		return e.TrustCenterSubprocessors, nil
	}
	return nil, &NotLoadedError{edge: "trust_center_subprocessors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subprocessor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subprocessor.FieldTags:
			values[i] = new([]byte)
		case subprocessor.FieldSystemOwned:
			values[i] = new(sql.NullBool)
		case subprocessor.FieldID, subprocessor.FieldCreatedBy, subprocessor.FieldUpdatedBy, subprocessor.FieldDeletedBy, subprocessor.FieldOwnerID, subprocessor.FieldName, subprocessor.FieldDescription, subprocessor.FieldLogoRemoteURL, subprocessor.FieldLogoLocalFileID:
			values[i] = new(sql.NullString)
		case subprocessor.FieldCreatedAt, subprocessor.FieldUpdatedAt, subprocessor.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subprocessor fields.
func (s *Subprocessor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subprocessor.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case subprocessor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case subprocessor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case subprocessor.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.String
			}
		case subprocessor.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.String
			}
		case subprocessor.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case subprocessor.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				s.DeletedBy = value.String
			}
		case subprocessor.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case subprocessor.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				s.OwnerID = value.String
			}
		case subprocessor.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				s.SystemOwned = value.Bool
			}
		case subprocessor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case subprocessor.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case subprocessor.FieldLogoRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_remote_url", values[i])
			} else if value.Valid {
				s.LogoRemoteURL = new(string)
				*s.LogoRemoteURL = value.String
			}
		case subprocessor.FieldLogoLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_local_file_id", values[i])
			} else if value.Valid {
				s.LogoLocalFileID = new(string)
				*s.LogoLocalFileID = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subprocessor.
// This includes values selected through modifiers, order, etc.
func (s *Subprocessor) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Subprocessor entity.
func (s *Subprocessor) QueryOwner() *OrganizationQuery {
	return NewSubprocessorClient(s.config).QueryOwner(s)
}

// QueryFiles queries the "files" edge of the Subprocessor entity.
func (s *Subprocessor) QueryFiles() *FileQuery {
	return NewSubprocessorClient(s.config).QueryFiles(s)
}

// QueryLogoFile queries the "logo_file" edge of the Subprocessor entity.
func (s *Subprocessor) QueryLogoFile() *FileQuery {
	return NewSubprocessorClient(s.config).QueryLogoFile(s)
}

// QueryTrustCenterSubprocessors queries the "trust_center_subprocessors" edge of the Subprocessor entity.
func (s *Subprocessor) QueryTrustCenterSubprocessors() *TrustCenterSubprocessorQuery {
	return NewSubprocessorClient(s.config).QueryTrustCenterSubprocessors(s)
}

// Update returns a builder for updating this Subprocessor.
// Note that you need to call Subprocessor.Unwrap() before calling this method if this Subprocessor
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subprocessor) Update() *SubprocessorUpdateOne {
	return NewSubprocessorClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subprocessor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subprocessor) Unwrap() *Subprocessor {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("generated: Subprocessor is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subprocessor) String() string {
	var builder strings.Builder
	builder.WriteString("Subprocessor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(s.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(s.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(s.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", s.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(s.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", s.SystemOwned))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	if v := s.LogoRemoteURL; v != nil {
		builder.WriteString("logo_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := s.LogoLocalFileID; v != nil {
		builder.WriteString("logo_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subprocessor) NamedFiles(name string) ([]*File, error) {
	if s.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subprocessor) appendNamedFiles(name string, edges ...*File) {
	if s.Edges.namedFiles == nil {
		s.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		s.Edges.namedFiles[name] = []*File{}
	} else {
		s.Edges.namedFiles[name] = append(s.Edges.namedFiles[name], edges...)
	}
}

// NamedTrustCenterSubprocessors returns the TrustCenterSubprocessors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subprocessor) NamedTrustCenterSubprocessors(name string) ([]*TrustCenterSubprocessor, error) {
	if s.Edges.namedTrustCenterSubprocessors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedTrustCenterSubprocessors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subprocessor) appendNamedTrustCenterSubprocessors(name string, edges ...*TrustCenterSubprocessor) {
	if s.Edges.namedTrustCenterSubprocessors == nil {
		s.Edges.namedTrustCenterSubprocessors = make(map[string][]*TrustCenterSubprocessor)
	}
	if len(edges) == 0 {
		s.Edges.namedTrustCenterSubprocessors[name] = []*TrustCenterSubprocessor{}
	} else {
		s.Edges.namedTrustCenterSubprocessors[name] = append(s.Edges.namedTrustCenterSubprocessors[name], edges...)
	}
}

// Subprocessors is a parsable slice of Subprocessor.
type Subprocessors []*Subprocessor
