// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssessmentResponseDelete is the builder for deleting a AssessmentResponse entity.
type AssessmentResponseDelete struct {
	config
	hooks    []Hook
	mutation *AssessmentResponseMutation
}

// Where appends a list predicates to the AssessmentResponseDelete builder.
func (ard *AssessmentResponseDelete) Where(ps ...predicate.AssessmentResponse) *AssessmentResponseDelete {
	ard.mutation.Where(ps...)
	return ard
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ard *AssessmentResponseDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ard.sqlExec, ard.mutation, ard.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ard *AssessmentResponseDelete) ExecX(ctx context.Context) int {
	n, err := ard.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ard *AssessmentResponseDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(assessmentresponse.Table, sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString))
	_spec.Node.Schema = ard.schemaConfig.AssessmentResponse
	ctx = internal.NewSchemaConfigContext(ctx, ard.schemaConfig)
	if ps := ard.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ard.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ard.mutation.done = true
	return affected, err
}

// AssessmentResponseDeleteOne is the builder for deleting a single AssessmentResponse entity.
type AssessmentResponseDeleteOne struct {
	ard *AssessmentResponseDelete
}

// Where appends a list predicates to the AssessmentResponseDelete builder.
func (ardo *AssessmentResponseDeleteOne) Where(ps ...predicate.AssessmentResponse) *AssessmentResponseDeleteOne {
	ardo.ard.mutation.Where(ps...)
	return ardo
}

// Exec executes the deletion query.
func (ardo *AssessmentResponseDeleteOne) Exec(ctx context.Context) error {
	n, err := ardo.ard.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{assessmentresponse.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ardo *AssessmentResponseDeleteOne) ExecX(ctx context.Context) {
	if err := ardo.Exec(ctx); err != nil {
		panic(err)
	}
}
