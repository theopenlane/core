// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobRunnerHistoryUpdate is the builder for updating JobRunnerHistory entities.
type JobRunnerHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *JobRunnerHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobRunnerHistoryUpdate builder.
func (jrhu *JobRunnerHistoryUpdate) Where(ps ...predicate.JobRunnerHistory) *JobRunnerHistoryUpdate {
	jrhu.mutation.Where(ps...)
	return jrhu
}

// SetUpdatedAt sets the "updated_at" field.
func (jrhu *JobRunnerHistoryUpdate) SetUpdatedAt(t time.Time) *JobRunnerHistoryUpdate {
	jrhu.mutation.SetUpdatedAt(t)
	return jrhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jrhu *JobRunnerHistoryUpdate) ClearUpdatedAt() *JobRunnerHistoryUpdate {
	jrhu.mutation.ClearUpdatedAt()
	return jrhu
}

// SetUpdatedBy sets the "updated_by" field.
func (jrhu *JobRunnerHistoryUpdate) SetUpdatedBy(s string) *JobRunnerHistoryUpdate {
	jrhu.mutation.SetUpdatedBy(s)
	return jrhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jrhu *JobRunnerHistoryUpdate) SetNillableUpdatedBy(s *string) *JobRunnerHistoryUpdate {
	if s != nil {
		jrhu.SetUpdatedBy(*s)
	}
	return jrhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jrhu *JobRunnerHistoryUpdate) ClearUpdatedBy() *JobRunnerHistoryUpdate {
	jrhu.mutation.ClearUpdatedBy()
	return jrhu
}

// SetDeletedAt sets the "deleted_at" field.
func (jrhu *JobRunnerHistoryUpdate) SetDeletedAt(t time.Time) *JobRunnerHistoryUpdate {
	jrhu.mutation.SetDeletedAt(t)
	return jrhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jrhu *JobRunnerHistoryUpdate) SetNillableDeletedAt(t *time.Time) *JobRunnerHistoryUpdate {
	if t != nil {
		jrhu.SetDeletedAt(*t)
	}
	return jrhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jrhu *JobRunnerHistoryUpdate) ClearDeletedAt() *JobRunnerHistoryUpdate {
	jrhu.mutation.ClearDeletedAt()
	return jrhu
}

// SetDeletedBy sets the "deleted_by" field.
func (jrhu *JobRunnerHistoryUpdate) SetDeletedBy(s string) *JobRunnerHistoryUpdate {
	jrhu.mutation.SetDeletedBy(s)
	return jrhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jrhu *JobRunnerHistoryUpdate) SetNillableDeletedBy(s *string) *JobRunnerHistoryUpdate {
	if s != nil {
		jrhu.SetDeletedBy(*s)
	}
	return jrhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jrhu *JobRunnerHistoryUpdate) ClearDeletedBy() *JobRunnerHistoryUpdate {
	jrhu.mutation.ClearDeletedBy()
	return jrhu
}

// SetTags sets the "tags" field.
func (jrhu *JobRunnerHistoryUpdate) SetTags(s []string) *JobRunnerHistoryUpdate {
	jrhu.mutation.SetTags(s)
	return jrhu
}

// AppendTags appends s to the "tags" field.
func (jrhu *JobRunnerHistoryUpdate) AppendTags(s []string) *JobRunnerHistoryUpdate {
	jrhu.mutation.AppendTags(s)
	return jrhu
}

// ClearTags clears the value of the "tags" field.
func (jrhu *JobRunnerHistoryUpdate) ClearTags() *JobRunnerHistoryUpdate {
	jrhu.mutation.ClearTags()
	return jrhu
}

// SetOwnerID sets the "owner_id" field.
func (jrhu *JobRunnerHistoryUpdate) SetOwnerID(s string) *JobRunnerHistoryUpdate {
	jrhu.mutation.SetOwnerID(s)
	return jrhu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jrhu *JobRunnerHistoryUpdate) SetNillableOwnerID(s *string) *JobRunnerHistoryUpdate {
	if s != nil {
		jrhu.SetOwnerID(*s)
	}
	return jrhu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jrhu *JobRunnerHistoryUpdate) ClearOwnerID() *JobRunnerHistoryUpdate {
	jrhu.mutation.ClearOwnerID()
	return jrhu
}

// SetName sets the "name" field.
func (jrhu *JobRunnerHistoryUpdate) SetName(s string) *JobRunnerHistoryUpdate {
	jrhu.mutation.SetName(s)
	return jrhu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (jrhu *JobRunnerHistoryUpdate) SetNillableName(s *string) *JobRunnerHistoryUpdate {
	if s != nil {
		jrhu.SetName(*s)
	}
	return jrhu
}

// SetStatus sets the "status" field.
func (jrhu *JobRunnerHistoryUpdate) SetStatus(ers enums.JobRunnerStatus) *JobRunnerHistoryUpdate {
	jrhu.mutation.SetStatus(ers)
	return jrhu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jrhu *JobRunnerHistoryUpdate) SetNillableStatus(ers *enums.JobRunnerStatus) *JobRunnerHistoryUpdate {
	if ers != nil {
		jrhu.SetStatus(*ers)
	}
	return jrhu
}

// Mutation returns the JobRunnerHistoryMutation object of the builder.
func (jrhu *JobRunnerHistoryUpdate) Mutation() *JobRunnerHistoryMutation {
	return jrhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jrhu *JobRunnerHistoryUpdate) Save(ctx context.Context) (int, error) {
	jrhu.defaults()
	return withHooks(ctx, jrhu.sqlSave, jrhu.mutation, jrhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jrhu *JobRunnerHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := jrhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jrhu *JobRunnerHistoryUpdate) Exec(ctx context.Context) error {
	_, err := jrhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrhu *JobRunnerHistoryUpdate) ExecX(ctx context.Context) {
	if err := jrhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrhu *JobRunnerHistoryUpdate) defaults() {
	if _, ok := jrhu.mutation.UpdatedAt(); !ok && !jrhu.mutation.UpdatedAtCleared() {
		v := jobrunnerhistory.UpdateDefaultUpdatedAt()
		jrhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jrhu *JobRunnerHistoryUpdate) check() error {
	if v, ok := jrhu.mutation.Status(); ok {
		if err := jobrunnerhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobRunnerHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jrhu *JobRunnerHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobRunnerHistoryUpdate {
	jrhu.modifiers = append(jrhu.modifiers, modifiers...)
	return jrhu
}

func (jrhu *JobRunnerHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jrhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobrunnerhistory.Table, jobrunnerhistory.Columns, sqlgraph.NewFieldSpec(jobrunnerhistory.FieldID, field.TypeString))
	if ps := jrhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jrhu.mutation.RefCleared() {
		_spec.ClearField(jobrunnerhistory.FieldRef, field.TypeString)
	}
	if jrhu.mutation.CreatedAtCleared() {
		_spec.ClearField(jobrunnerhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jrhu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunnerhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if jrhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobrunnerhistory.FieldUpdatedAt, field.TypeTime)
	}
	if jrhu.mutation.CreatedByCleared() {
		_spec.ClearField(jobrunnerhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jrhu.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunnerhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if jrhu.mutation.UpdatedByCleared() {
		_spec.ClearField(jobrunnerhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jrhu.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunnerhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if jrhu.mutation.DeletedAtCleared() {
		_spec.ClearField(jobrunnerhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jrhu.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunnerhistory.FieldDeletedBy, field.TypeString, value)
	}
	if jrhu.mutation.DeletedByCleared() {
		_spec.ClearField(jobrunnerhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jrhu.mutation.Tags(); ok {
		_spec.SetField(jobrunnerhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := jrhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobrunnerhistory.FieldTags, value)
		})
	}
	if jrhu.mutation.TagsCleared() {
		_spec.ClearField(jobrunnerhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := jrhu.mutation.OwnerID(); ok {
		_spec.SetField(jobrunnerhistory.FieldOwnerID, field.TypeString, value)
	}
	if jrhu.mutation.OwnerIDCleared() {
		_spec.ClearField(jobrunnerhistory.FieldOwnerID, field.TypeString)
	}
	if jrhu.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobrunnerhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := jrhu.mutation.Name(); ok {
		_spec.SetField(jobrunnerhistory.FieldName, field.TypeString, value)
	}
	if value, ok := jrhu.mutation.Status(); ok {
		_spec.SetField(jobrunnerhistory.FieldStatus, field.TypeEnum, value)
	}
	_spec.Node.Schema = jrhu.schemaConfig.JobRunnerHistory
	ctx = internal.NewSchemaConfigContext(ctx, jrhu.schemaConfig)
	_spec.AddModifiers(jrhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jrhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrunnerhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jrhu.mutation.done = true
	return n, nil
}

// JobRunnerHistoryUpdateOne is the builder for updating a single JobRunnerHistory entity.
type JobRunnerHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobRunnerHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (jrhuo *JobRunnerHistoryUpdateOne) SetUpdatedAt(t time.Time) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.SetUpdatedAt(t)
	return jrhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jrhuo *JobRunnerHistoryUpdateOne) ClearUpdatedAt() *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.ClearUpdatedAt()
	return jrhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (jrhuo *JobRunnerHistoryUpdateOne) SetUpdatedBy(s string) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.SetUpdatedBy(s)
	return jrhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jrhuo *JobRunnerHistoryUpdateOne) SetNillableUpdatedBy(s *string) *JobRunnerHistoryUpdateOne {
	if s != nil {
		jrhuo.SetUpdatedBy(*s)
	}
	return jrhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jrhuo *JobRunnerHistoryUpdateOne) ClearUpdatedBy() *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.ClearUpdatedBy()
	return jrhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (jrhuo *JobRunnerHistoryUpdateOne) SetDeletedAt(t time.Time) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.SetDeletedAt(t)
	return jrhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jrhuo *JobRunnerHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *JobRunnerHistoryUpdateOne {
	if t != nil {
		jrhuo.SetDeletedAt(*t)
	}
	return jrhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jrhuo *JobRunnerHistoryUpdateOne) ClearDeletedAt() *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.ClearDeletedAt()
	return jrhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (jrhuo *JobRunnerHistoryUpdateOne) SetDeletedBy(s string) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.SetDeletedBy(s)
	return jrhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jrhuo *JobRunnerHistoryUpdateOne) SetNillableDeletedBy(s *string) *JobRunnerHistoryUpdateOne {
	if s != nil {
		jrhuo.SetDeletedBy(*s)
	}
	return jrhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jrhuo *JobRunnerHistoryUpdateOne) ClearDeletedBy() *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.ClearDeletedBy()
	return jrhuo
}

// SetTags sets the "tags" field.
func (jrhuo *JobRunnerHistoryUpdateOne) SetTags(s []string) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.SetTags(s)
	return jrhuo
}

// AppendTags appends s to the "tags" field.
func (jrhuo *JobRunnerHistoryUpdateOne) AppendTags(s []string) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.AppendTags(s)
	return jrhuo
}

// ClearTags clears the value of the "tags" field.
func (jrhuo *JobRunnerHistoryUpdateOne) ClearTags() *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.ClearTags()
	return jrhuo
}

// SetOwnerID sets the "owner_id" field.
func (jrhuo *JobRunnerHistoryUpdateOne) SetOwnerID(s string) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.SetOwnerID(s)
	return jrhuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jrhuo *JobRunnerHistoryUpdateOne) SetNillableOwnerID(s *string) *JobRunnerHistoryUpdateOne {
	if s != nil {
		jrhuo.SetOwnerID(*s)
	}
	return jrhuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jrhuo *JobRunnerHistoryUpdateOne) ClearOwnerID() *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.ClearOwnerID()
	return jrhuo
}

// SetName sets the "name" field.
func (jrhuo *JobRunnerHistoryUpdateOne) SetName(s string) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.SetName(s)
	return jrhuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (jrhuo *JobRunnerHistoryUpdateOne) SetNillableName(s *string) *JobRunnerHistoryUpdateOne {
	if s != nil {
		jrhuo.SetName(*s)
	}
	return jrhuo
}

// SetStatus sets the "status" field.
func (jrhuo *JobRunnerHistoryUpdateOne) SetStatus(ers enums.JobRunnerStatus) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.SetStatus(ers)
	return jrhuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jrhuo *JobRunnerHistoryUpdateOne) SetNillableStatus(ers *enums.JobRunnerStatus) *JobRunnerHistoryUpdateOne {
	if ers != nil {
		jrhuo.SetStatus(*ers)
	}
	return jrhuo
}

// Mutation returns the JobRunnerHistoryMutation object of the builder.
func (jrhuo *JobRunnerHistoryUpdateOne) Mutation() *JobRunnerHistoryMutation {
	return jrhuo.mutation
}

// Where appends a list predicates to the JobRunnerHistoryUpdate builder.
func (jrhuo *JobRunnerHistoryUpdateOne) Where(ps ...predicate.JobRunnerHistory) *JobRunnerHistoryUpdateOne {
	jrhuo.mutation.Where(ps...)
	return jrhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jrhuo *JobRunnerHistoryUpdateOne) Select(field string, fields ...string) *JobRunnerHistoryUpdateOne {
	jrhuo.fields = append([]string{field}, fields...)
	return jrhuo
}

// Save executes the query and returns the updated JobRunnerHistory entity.
func (jrhuo *JobRunnerHistoryUpdateOne) Save(ctx context.Context) (*JobRunnerHistory, error) {
	jrhuo.defaults()
	return withHooks(ctx, jrhuo.sqlSave, jrhuo.mutation, jrhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jrhuo *JobRunnerHistoryUpdateOne) SaveX(ctx context.Context) *JobRunnerHistory {
	node, err := jrhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jrhuo *JobRunnerHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := jrhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrhuo *JobRunnerHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := jrhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrhuo *JobRunnerHistoryUpdateOne) defaults() {
	if _, ok := jrhuo.mutation.UpdatedAt(); !ok && !jrhuo.mutation.UpdatedAtCleared() {
		v := jobrunnerhistory.UpdateDefaultUpdatedAt()
		jrhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jrhuo *JobRunnerHistoryUpdateOne) check() error {
	if v, ok := jrhuo.mutation.Status(); ok {
		if err := jobrunnerhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobRunnerHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jrhuo *JobRunnerHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobRunnerHistoryUpdateOne {
	jrhuo.modifiers = append(jrhuo.modifiers, modifiers...)
	return jrhuo
}

func (jrhuo *JobRunnerHistoryUpdateOne) sqlSave(ctx context.Context) (_node *JobRunnerHistory, err error) {
	if err := jrhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobrunnerhistory.Table, jobrunnerhistory.Columns, sqlgraph.NewFieldSpec(jobrunnerhistory.FieldID, field.TypeString))
	id, ok := jrhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "JobRunnerHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jrhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobrunnerhistory.FieldID)
		for _, f := range fields {
			if !jobrunnerhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != jobrunnerhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jrhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jrhuo.mutation.RefCleared() {
		_spec.ClearField(jobrunnerhistory.FieldRef, field.TypeString)
	}
	if jrhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(jobrunnerhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jrhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunnerhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if jrhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobrunnerhistory.FieldUpdatedAt, field.TypeTime)
	}
	if jrhuo.mutation.CreatedByCleared() {
		_spec.ClearField(jobrunnerhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jrhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunnerhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if jrhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(jobrunnerhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jrhuo.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunnerhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if jrhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobrunnerhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jrhuo.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunnerhistory.FieldDeletedBy, field.TypeString, value)
	}
	if jrhuo.mutation.DeletedByCleared() {
		_spec.ClearField(jobrunnerhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jrhuo.mutation.Tags(); ok {
		_spec.SetField(jobrunnerhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := jrhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobrunnerhistory.FieldTags, value)
		})
	}
	if jrhuo.mutation.TagsCleared() {
		_spec.ClearField(jobrunnerhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := jrhuo.mutation.OwnerID(); ok {
		_spec.SetField(jobrunnerhistory.FieldOwnerID, field.TypeString, value)
	}
	if jrhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(jobrunnerhistory.FieldOwnerID, field.TypeString)
	}
	if jrhuo.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobrunnerhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := jrhuo.mutation.Name(); ok {
		_spec.SetField(jobrunnerhistory.FieldName, field.TypeString, value)
	}
	if value, ok := jrhuo.mutation.Status(); ok {
		_spec.SetField(jobrunnerhistory.FieldStatus, field.TypeEnum, value)
	}
	_spec.Node.Schema = jrhuo.schemaConfig.JobRunnerHistory
	ctx = internal.NewSchemaConfigContext(ctx, jrhuo.schemaConfig)
	_spec.AddModifiers(jrhuo.modifiers...)
	_node = &JobRunnerHistory{config: jrhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jrhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrunnerhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jrhuo.mutation.done = true
	return _node, nil
}
