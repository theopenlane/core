// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
)

// InternalPolicy is the model entity for the InternalPolicy schema.
type InternalPolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the name of the policy
	Name string `json:"name,omitempty"`
	// description of the policy
	Description string `json:"description,omitempty"`
	// status of the policy
	Status string `json:"status,omitempty"`
	// type of the policy
	PolicyType string `json:"policy_type,omitempty"`
	// version of the policy
	Version string `json:"version,omitempty"`
	// purpose and scope
	PurposeAndScope string `json:"purpose_and_scope,omitempty"`
	// background of the policy
	Background string `json:"background,omitempty"`
	// json data for the policy document
	Details map[string]interface{} `json:"details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InternalPolicyQuery when eager-loading is set.
	Edges        InternalPolicyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InternalPolicyEdges holds the relations/edges for other nodes in the graph.
type InternalPolicyEdges struct {
	// Controlobjectives holds the value of the controlobjectives edge.
	Controlobjectives []*ControlObjective `json:"controlobjectives,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// Narratives holds the value of the narratives edge.
	Narratives []*Narrative `json:"narratives,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedControlobjectives map[string][]*ControlObjective
	namedControls          map[string][]*Control
	namedProcedures        map[string][]*Procedure
	namedNarratives        map[string][]*Narrative
	namedTasks             map[string][]*Task
	namedPrograms          map[string][]*Program
}

// ControlobjectivesOrErr returns the Controlobjectives value or an error if the edge
// was not loaded in eager-loading.
func (e InternalPolicyEdges) ControlobjectivesOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[0] {
		return e.Controlobjectives, nil
	}
	return nil, &NotLoadedError{edge: "controlobjectives"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e InternalPolicyEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[1] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e InternalPolicyEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[2] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// NarrativesOrErr returns the Narratives value or an error if the edge
// was not loaded in eager-loading.
func (e InternalPolicyEdges) NarrativesOrErr() ([]*Narrative, error) {
	if e.loadedTypes[3] {
		return e.Narratives, nil
	}
	return nil, &NotLoadedError{edge: "narratives"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e InternalPolicyEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[4] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e InternalPolicyEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[5] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InternalPolicy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case internalpolicy.FieldTags, internalpolicy.FieldDetails:
			values[i] = new([]byte)
		case internalpolicy.FieldID, internalpolicy.FieldCreatedBy, internalpolicy.FieldUpdatedBy, internalpolicy.FieldDeletedBy, internalpolicy.FieldMappingID, internalpolicy.FieldName, internalpolicy.FieldDescription, internalpolicy.FieldStatus, internalpolicy.FieldPolicyType, internalpolicy.FieldVersion, internalpolicy.FieldPurposeAndScope, internalpolicy.FieldBackground:
			values[i] = new(sql.NullString)
		case internalpolicy.FieldCreatedAt, internalpolicy.FieldUpdatedAt, internalpolicy.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InternalPolicy fields.
func (ip *InternalPolicy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case internalpolicy.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ip.ID = value.String
			}
		case internalpolicy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ip.CreatedAt = value.Time
			}
		case internalpolicy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ip.UpdatedAt = value.Time
			}
		case internalpolicy.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ip.CreatedBy = value.String
			}
		case internalpolicy.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ip.UpdatedBy = value.String
			}
		case internalpolicy.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ip.DeletedAt = value.Time
			}
		case internalpolicy.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ip.DeletedBy = value.String
			}
		case internalpolicy.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				ip.MappingID = value.String
			}
		case internalpolicy.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ip.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case internalpolicy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ip.Name = value.String
			}
		case internalpolicy.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ip.Description = value.String
			}
		case internalpolicy.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ip.Status = value.String
			}
		case internalpolicy.FieldPolicyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field policy_type", values[i])
			} else if value.Valid {
				ip.PolicyType = value.String
			}
		case internalpolicy.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ip.Version = value.String
			}
		case internalpolicy.FieldPurposeAndScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purpose_and_scope", values[i])
			} else if value.Valid {
				ip.PurposeAndScope = value.String
			}
		case internalpolicy.FieldBackground:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background", values[i])
			} else if value.Valid {
				ip.Background = value.String
			}
		case internalpolicy.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ip.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		default:
			ip.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InternalPolicy.
// This includes values selected through modifiers, order, etc.
func (ip *InternalPolicy) Value(name string) (ent.Value, error) {
	return ip.selectValues.Get(name)
}

// QueryControlobjectives queries the "controlobjectives" edge of the InternalPolicy entity.
func (ip *InternalPolicy) QueryControlobjectives() *ControlObjectiveQuery {
	return NewInternalPolicyClient(ip.config).QueryControlobjectives(ip)
}

// QueryControls queries the "controls" edge of the InternalPolicy entity.
func (ip *InternalPolicy) QueryControls() *ControlQuery {
	return NewInternalPolicyClient(ip.config).QueryControls(ip)
}

// QueryProcedures queries the "procedures" edge of the InternalPolicy entity.
func (ip *InternalPolicy) QueryProcedures() *ProcedureQuery {
	return NewInternalPolicyClient(ip.config).QueryProcedures(ip)
}

// QueryNarratives queries the "narratives" edge of the InternalPolicy entity.
func (ip *InternalPolicy) QueryNarratives() *NarrativeQuery {
	return NewInternalPolicyClient(ip.config).QueryNarratives(ip)
}

// QueryTasks queries the "tasks" edge of the InternalPolicy entity.
func (ip *InternalPolicy) QueryTasks() *TaskQuery {
	return NewInternalPolicyClient(ip.config).QueryTasks(ip)
}

// QueryPrograms queries the "programs" edge of the InternalPolicy entity.
func (ip *InternalPolicy) QueryPrograms() *ProgramQuery {
	return NewInternalPolicyClient(ip.config).QueryPrograms(ip)
}

// Update returns a builder for updating this InternalPolicy.
// Note that you need to call InternalPolicy.Unwrap() before calling this method if this InternalPolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ip *InternalPolicy) Update() *InternalPolicyUpdateOne {
	return NewInternalPolicyClient(ip.config).UpdateOne(ip)
}

// Unwrap unwraps the InternalPolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ip *InternalPolicy) Unwrap() *InternalPolicy {
	_tx, ok := ip.config.driver.(*txDriver)
	if !ok {
		panic("generated: InternalPolicy is not a transactional entity")
	}
	ip.config.driver = _tx.drv
	return ip
}

// String implements the fmt.Stringer.
func (ip *InternalPolicy) String() string {
	var builder strings.Builder
	builder.WriteString("InternalPolicy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ip.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ip.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ip.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ip.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ip.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ip.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ip.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(ip.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ip.Tags))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ip.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ip.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ip.Status)
	builder.WriteString(", ")
	builder.WriteString("policy_type=")
	builder.WriteString(ip.PolicyType)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ip.Version)
	builder.WriteString(", ")
	builder.WriteString("purpose_and_scope=")
	builder.WriteString(ip.PurposeAndScope)
	builder.WriteString(", ")
	builder.WriteString("background=")
	builder.WriteString(ip.Background)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", ip.Details))
	builder.WriteByte(')')
	return builder.String()
}

// NamedControlobjectives returns the Controlobjectives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ip *InternalPolicy) NamedControlobjectives(name string) ([]*ControlObjective, error) {
	if ip.Edges.namedControlobjectives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ip.Edges.namedControlobjectives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ip *InternalPolicy) appendNamedControlobjectives(name string, edges ...*ControlObjective) {
	if ip.Edges.namedControlobjectives == nil {
		ip.Edges.namedControlobjectives = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		ip.Edges.namedControlobjectives[name] = []*ControlObjective{}
	} else {
		ip.Edges.namedControlobjectives[name] = append(ip.Edges.namedControlobjectives[name], edges...)
	}
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ip *InternalPolicy) NamedControls(name string) ([]*Control, error) {
	if ip.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ip.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ip *InternalPolicy) appendNamedControls(name string, edges ...*Control) {
	if ip.Edges.namedControls == nil {
		ip.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		ip.Edges.namedControls[name] = []*Control{}
	} else {
		ip.Edges.namedControls[name] = append(ip.Edges.namedControls[name], edges...)
	}
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ip *InternalPolicy) NamedProcedures(name string) ([]*Procedure, error) {
	if ip.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ip.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ip *InternalPolicy) appendNamedProcedures(name string, edges ...*Procedure) {
	if ip.Edges.namedProcedures == nil {
		ip.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		ip.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		ip.Edges.namedProcedures[name] = append(ip.Edges.namedProcedures[name], edges...)
	}
}

// NamedNarratives returns the Narratives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ip *InternalPolicy) NamedNarratives(name string) ([]*Narrative, error) {
	if ip.Edges.namedNarratives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ip.Edges.namedNarratives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ip *InternalPolicy) appendNamedNarratives(name string, edges ...*Narrative) {
	if ip.Edges.namedNarratives == nil {
		ip.Edges.namedNarratives = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		ip.Edges.namedNarratives[name] = []*Narrative{}
	} else {
		ip.Edges.namedNarratives[name] = append(ip.Edges.namedNarratives[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ip *InternalPolicy) NamedTasks(name string) ([]*Task, error) {
	if ip.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ip.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ip *InternalPolicy) appendNamedTasks(name string, edges ...*Task) {
	if ip.Edges.namedTasks == nil {
		ip.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		ip.Edges.namedTasks[name] = []*Task{}
	} else {
		ip.Edges.namedTasks[name] = append(ip.Edges.namedTasks[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ip *InternalPolicy) NamedPrograms(name string) ([]*Program, error) {
	if ip.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ip.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ip *InternalPolicy) appendNamedPrograms(name string, edges ...*Program) {
	if ip.Edges.namedPrograms == nil {
		ip.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		ip.Edges.namedPrograms[name] = []*Program{}
	} else {
		ip.Edges.namedPrograms[name] = append(ip.Edges.namedPrograms[name], edges...)
	}
}

// InternalPolicies is a parsable slice of InternalPolicy.
type InternalPolicies []*InternalPolicy
