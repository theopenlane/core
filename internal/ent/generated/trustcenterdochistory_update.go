// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterdochistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterDocHistoryUpdate is the builder for updating TrustCenterDocHistory entities.
type TrustCenterDocHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterDocHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterDocHistoryUpdate builder.
func (_u *TrustCenterDocHistoryUpdate) Where(ps ...predicate.TrustCenterDocHistory) *TrustCenterDocHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterDocHistoryUpdate) SetUpdatedAt(v time.Time) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterDocHistoryUpdate) ClearUpdatedAt() *TrustCenterDocHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterDocHistoryUpdate) SetUpdatedBy(v string) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdate) SetNillableUpdatedBy(v *string) *TrustCenterDocHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterDocHistoryUpdate) ClearUpdatedBy() *TrustCenterDocHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterDocHistoryUpdate) SetDeletedAt(v time.Time) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdate) SetNillableDeletedAt(v *time.Time) *TrustCenterDocHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterDocHistoryUpdate) ClearDeletedAt() *TrustCenterDocHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterDocHistoryUpdate) SetDeletedBy(v string) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdate) SetNillableDeletedBy(v *string) *TrustCenterDocHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterDocHistoryUpdate) ClearDeletedBy() *TrustCenterDocHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TrustCenterDocHistoryUpdate) SetTags(v []string) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TrustCenterDocHistoryUpdate) AppendTags(v []string) *TrustCenterDocHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TrustCenterDocHistoryUpdate) ClearTags() *TrustCenterDocHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterDocHistoryUpdate) SetTrustCenterID(v string) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdate) SetNillableTrustCenterID(v *string) *TrustCenterDocHistoryUpdate {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterDocHistoryUpdate) ClearTrustCenterID() *TrustCenterDocHistoryUpdate {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TrustCenterDocHistoryUpdate) SetTitle(v string) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdate) SetNillableTitle(v *string) *TrustCenterDocHistoryUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *TrustCenterDocHistoryUpdate) SetCategory(v string) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdate) SetNillableCategory(v *string) *TrustCenterDocHistoryUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *TrustCenterDocHistoryUpdate) SetFileID(v string) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdate) SetNillableFileID(v *string) *TrustCenterDocHistoryUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *TrustCenterDocHistoryUpdate) ClearFileID() *TrustCenterDocHistoryUpdate {
	_u.mutation.ClearFileID()
	return _u
}

// SetVisibility sets the "visibility" field.
func (_u *TrustCenterDocHistoryUpdate) SetVisibility(v enums.TrustCenterDocumentVisibility) *TrustCenterDocHistoryUpdate {
	_u.mutation.SetVisibility(v)
	return _u
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdate) SetNillableVisibility(v *enums.TrustCenterDocumentVisibility) *TrustCenterDocHistoryUpdate {
	if v != nil {
		_u.SetVisibility(*v)
	}
	return _u
}

// ClearVisibility clears the value of the "visibility" field.
func (_u *TrustCenterDocHistoryUpdate) ClearVisibility() *TrustCenterDocHistoryUpdate {
	_u.mutation.ClearVisibility()
	return _u
}

// Mutation returns the TrustCenterDocHistoryMutation object of the builder.
func (_u *TrustCenterDocHistoryUpdate) Mutation() *TrustCenterDocHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustCenterDocHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterDocHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustCenterDocHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterDocHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterDocHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcenterdochistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenterdochistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenterdochistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterDocHistoryUpdate) check() error {
	if v, ok := _u.mutation.Visibility(); ok {
		if err := trustcenterdochistory.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`generated: validator failed for field "TrustCenterDocHistory.visibility": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterDocHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterDocHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterDocHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcenterdochistory.Table, trustcenterdochistory.Columns, sqlgraph.NewFieldSpec(trustcenterdochistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(trustcenterdochistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcenterdochistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcenterdochistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcenterdochistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcenterdochistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcenterdochistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcenterdochistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcenterdochistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcenterdochistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcenterdochistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcenterdochistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(trustcenterdochistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcenterdochistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(trustcenterdochistory.FieldTags, field.TypeJSON)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(trustcenterdochistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcenterdochistory.FieldTrustCenterID, field.TypeString, value)
	}
	if _u.mutation.TrustCenterIDCleared() {
		_spec.ClearField(trustcenterdochistory.FieldTrustCenterID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(trustcenterdochistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(trustcenterdochistory.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(trustcenterdochistory.FieldFileID, field.TypeString, value)
	}
	if _u.mutation.FileIDCleared() {
		_spec.ClearField(trustcenterdochistory.FieldFileID, field.TypeString)
	}
	if value, ok := _u.mutation.Visibility(); ok {
		_spec.SetField(trustcenterdochistory.FieldVisibility, field.TypeEnum, value)
	}
	if _u.mutation.VisibilityCleared() {
		_spec.ClearField(trustcenterdochistory.FieldVisibility, field.TypeEnum)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterDocHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcenterdochistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustCenterDocHistoryUpdateOne is the builder for updating a single TrustCenterDocHistory entity.
type TrustCenterDocHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterDocHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetUpdatedAt(v time.Time) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterDocHistoryUpdateOne) ClearUpdatedAt() *TrustCenterDocHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetUpdatedBy(v string) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdateOne) SetNillableUpdatedBy(v *string) *TrustCenterDocHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterDocHistoryUpdateOne) ClearUpdatedBy() *TrustCenterDocHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetDeletedAt(v time.Time) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *TrustCenterDocHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterDocHistoryUpdateOne) ClearDeletedAt() *TrustCenterDocHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetDeletedBy(v string) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdateOne) SetNillableDeletedBy(v *string) *TrustCenterDocHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterDocHistoryUpdateOne) ClearDeletedBy() *TrustCenterDocHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetTags(v []string) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TrustCenterDocHistoryUpdateOne) AppendTags(v []string) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TrustCenterDocHistoryUpdateOne) ClearTags() *TrustCenterDocHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetTrustCenterID(v string) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdateOne) SetNillableTrustCenterID(v *string) *TrustCenterDocHistoryUpdateOne {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterDocHistoryUpdateOne) ClearTrustCenterID() *TrustCenterDocHistoryUpdateOne {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetTitle(v string) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdateOne) SetNillableTitle(v *string) *TrustCenterDocHistoryUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetCategory(v string) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdateOne) SetNillableCategory(v *string) *TrustCenterDocHistoryUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetFileID(v string) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdateOne) SetNillableFileID(v *string) *TrustCenterDocHistoryUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *TrustCenterDocHistoryUpdateOne) ClearFileID() *TrustCenterDocHistoryUpdateOne {
	_u.mutation.ClearFileID()
	return _u
}

// SetVisibility sets the "visibility" field.
func (_u *TrustCenterDocHistoryUpdateOne) SetVisibility(v enums.TrustCenterDocumentVisibility) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.SetVisibility(v)
	return _u
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (_u *TrustCenterDocHistoryUpdateOne) SetNillableVisibility(v *enums.TrustCenterDocumentVisibility) *TrustCenterDocHistoryUpdateOne {
	if v != nil {
		_u.SetVisibility(*v)
	}
	return _u
}

// ClearVisibility clears the value of the "visibility" field.
func (_u *TrustCenterDocHistoryUpdateOne) ClearVisibility() *TrustCenterDocHistoryUpdateOne {
	_u.mutation.ClearVisibility()
	return _u
}

// Mutation returns the TrustCenterDocHistoryMutation object of the builder.
func (_u *TrustCenterDocHistoryUpdateOne) Mutation() *TrustCenterDocHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the TrustCenterDocHistoryUpdate builder.
func (_u *TrustCenterDocHistoryUpdateOne) Where(ps ...predicate.TrustCenterDocHistory) *TrustCenterDocHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustCenterDocHistoryUpdateOne) Select(field string, fields ...string) *TrustCenterDocHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustCenterDocHistory entity.
func (_u *TrustCenterDocHistoryUpdateOne) Save(ctx context.Context) (*TrustCenterDocHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterDocHistoryUpdateOne) SaveX(ctx context.Context) *TrustCenterDocHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustCenterDocHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterDocHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterDocHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcenterdochistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenterdochistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenterdochistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterDocHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Visibility(); ok {
		if err := trustcenterdochistory.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`generated: validator failed for field "TrustCenterDocHistory.visibility": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterDocHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterDocHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterDocHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterDocHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcenterdochistory.Table, trustcenterdochistory.Columns, sqlgraph.NewFieldSpec(trustcenterdochistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterDocHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcenterdochistory.FieldID)
		for _, f := range fields {
			if !trustcenterdochistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcenterdochistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(trustcenterdochistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcenterdochistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcenterdochistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcenterdochistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcenterdochistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcenterdochistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcenterdochistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcenterdochistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcenterdochistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcenterdochistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcenterdochistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(trustcenterdochistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcenterdochistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(trustcenterdochistory.FieldTags, field.TypeJSON)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(trustcenterdochistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcenterdochistory.FieldTrustCenterID, field.TypeString, value)
	}
	if _u.mutation.TrustCenterIDCleared() {
		_spec.ClearField(trustcenterdochistory.FieldTrustCenterID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(trustcenterdochistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(trustcenterdochistory.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(trustcenterdochistory.FieldFileID, field.TypeString, value)
	}
	if _u.mutation.FileIDCleared() {
		_spec.ClearField(trustcenterdochistory.FieldFileID, field.TypeString)
	}
	if value, ok := _u.mutation.Visibility(); ok {
		_spec.SetField(trustcenterdochistory.FieldVisibility, field.TypeEnum, value)
	}
	if _u.mutation.VisibilityCleared() {
		_spec.ClearField(trustcenterdochistory.FieldVisibility, field.TypeEnum)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterDocHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TrustCenterDocHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcenterdochistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
