// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// DNSVerificationCreate is the builder for creating a DNSVerification entity.
type DNSVerificationCreate struct {
	config
	mutation *DNSVerificationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dvc *DNSVerificationCreate) SetCreatedAt(t time.Time) *DNSVerificationCreate {
	dvc.mutation.SetCreatedAt(t)
	return dvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableCreatedAt(t *time.Time) *DNSVerificationCreate {
	if t != nil {
		dvc.SetCreatedAt(*t)
	}
	return dvc
}

// SetUpdatedAt sets the "updated_at" field.
func (dvc *DNSVerificationCreate) SetUpdatedAt(t time.Time) *DNSVerificationCreate {
	dvc.mutation.SetUpdatedAt(t)
	return dvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableUpdatedAt(t *time.Time) *DNSVerificationCreate {
	if t != nil {
		dvc.SetUpdatedAt(*t)
	}
	return dvc
}

// SetCreatedBy sets the "created_by" field.
func (dvc *DNSVerificationCreate) SetCreatedBy(s string) *DNSVerificationCreate {
	dvc.mutation.SetCreatedBy(s)
	return dvc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableCreatedBy(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetCreatedBy(*s)
	}
	return dvc
}

// SetUpdatedBy sets the "updated_by" field.
func (dvc *DNSVerificationCreate) SetUpdatedBy(s string) *DNSVerificationCreate {
	dvc.mutation.SetUpdatedBy(s)
	return dvc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableUpdatedBy(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetUpdatedBy(*s)
	}
	return dvc
}

// SetDeletedAt sets the "deleted_at" field.
func (dvc *DNSVerificationCreate) SetDeletedAt(t time.Time) *DNSVerificationCreate {
	dvc.mutation.SetDeletedAt(t)
	return dvc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableDeletedAt(t *time.Time) *DNSVerificationCreate {
	if t != nil {
		dvc.SetDeletedAt(*t)
	}
	return dvc
}

// SetDeletedBy sets the "deleted_by" field.
func (dvc *DNSVerificationCreate) SetDeletedBy(s string) *DNSVerificationCreate {
	dvc.mutation.SetDeletedBy(s)
	return dvc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableDeletedBy(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetDeletedBy(*s)
	}
	return dvc
}

// SetTags sets the "tags" field.
func (dvc *DNSVerificationCreate) SetTags(s []string) *DNSVerificationCreate {
	dvc.mutation.SetTags(s)
	return dvc
}

// SetOwnerID sets the "owner_id" field.
func (dvc *DNSVerificationCreate) SetOwnerID(s string) *DNSVerificationCreate {
	dvc.mutation.SetOwnerID(s)
	return dvc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableOwnerID(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetOwnerID(*s)
	}
	return dvc
}

// SetCloudflareHostnameID sets the "cloudflare_hostname_id" field.
func (dvc *DNSVerificationCreate) SetCloudflareHostnameID(s string) *DNSVerificationCreate {
	dvc.mutation.SetCloudflareHostnameID(s)
	return dvc
}

// SetDNSTxtRecord sets the "dns_txt_record" field.
func (dvc *DNSVerificationCreate) SetDNSTxtRecord(s string) *DNSVerificationCreate {
	dvc.mutation.SetDNSTxtRecord(s)
	return dvc
}

// SetDNSTxtValue sets the "dns_txt_value" field.
func (dvc *DNSVerificationCreate) SetDNSTxtValue(s string) *DNSVerificationCreate {
	dvc.mutation.SetDNSTxtValue(s)
	return dvc
}

// SetDNSVerificationStatus sets the "dns_verification_status" field.
func (dvc *DNSVerificationCreate) SetDNSVerificationStatus(evs enums.DNSVerificationStatus) *DNSVerificationCreate {
	dvc.mutation.SetDNSVerificationStatus(evs)
	return dvc
}

// SetNillableDNSVerificationStatus sets the "dns_verification_status" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableDNSVerificationStatus(evs *enums.DNSVerificationStatus) *DNSVerificationCreate {
	if evs != nil {
		dvc.SetDNSVerificationStatus(*evs)
	}
	return dvc
}

// SetDNSVerificationStatusReason sets the "dns_verification_status_reason" field.
func (dvc *DNSVerificationCreate) SetDNSVerificationStatusReason(s string) *DNSVerificationCreate {
	dvc.mutation.SetDNSVerificationStatusReason(s)
	return dvc
}

// SetNillableDNSVerificationStatusReason sets the "dns_verification_status_reason" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableDNSVerificationStatusReason(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetDNSVerificationStatusReason(*s)
	}
	return dvc
}

// SetAcmeChallengePath sets the "acme_challenge_path" field.
func (dvc *DNSVerificationCreate) SetAcmeChallengePath(s string) *DNSVerificationCreate {
	dvc.mutation.SetAcmeChallengePath(s)
	return dvc
}

// SetNillableAcmeChallengePath sets the "acme_challenge_path" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableAcmeChallengePath(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetAcmeChallengePath(*s)
	}
	return dvc
}

// SetExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field.
func (dvc *DNSVerificationCreate) SetExpectedAcmeChallengeValue(s string) *DNSVerificationCreate {
	dvc.mutation.SetExpectedAcmeChallengeValue(s)
	return dvc
}

// SetNillableExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableExpectedAcmeChallengeValue(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetExpectedAcmeChallengeValue(*s)
	}
	return dvc
}

// SetAcmeChallengeStatus sets the "acme_challenge_status" field.
func (dvc *DNSVerificationCreate) SetAcmeChallengeStatus(evs enums.SSLVerificationStatus) *DNSVerificationCreate {
	dvc.mutation.SetAcmeChallengeStatus(evs)
	return dvc
}

// SetNillableAcmeChallengeStatus sets the "acme_challenge_status" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableAcmeChallengeStatus(evs *enums.SSLVerificationStatus) *DNSVerificationCreate {
	if evs != nil {
		dvc.SetAcmeChallengeStatus(*evs)
	}
	return dvc
}

// SetAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field.
func (dvc *DNSVerificationCreate) SetAcmeChallengeStatusReason(s string) *DNSVerificationCreate {
	dvc.mutation.SetAcmeChallengeStatusReason(s)
	return dvc
}

// SetNillableAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableAcmeChallengeStatusReason(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetAcmeChallengeStatusReason(*s)
	}
	return dvc
}

// SetID sets the "id" field.
func (dvc *DNSVerificationCreate) SetID(s string) *DNSVerificationCreate {
	dvc.mutation.SetID(s)
	return dvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dvc *DNSVerificationCreate) SetNillableID(s *string) *DNSVerificationCreate {
	if s != nil {
		dvc.SetID(*s)
	}
	return dvc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (dvc *DNSVerificationCreate) SetOwner(o *Organization) *DNSVerificationCreate {
	return dvc.SetOwnerID(o.ID)
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (dvc *DNSVerificationCreate) AddCustomDomainIDs(ids ...string) *DNSVerificationCreate {
	dvc.mutation.AddCustomDomainIDs(ids...)
	return dvc
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (dvc *DNSVerificationCreate) AddCustomDomains(c ...*CustomDomain) *DNSVerificationCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dvc.AddCustomDomainIDs(ids...)
}

// Mutation returns the DNSVerificationMutation object of the builder.
func (dvc *DNSVerificationCreate) Mutation() *DNSVerificationMutation {
	return dvc.mutation
}

// Save creates the DNSVerification in the database.
func (dvc *DNSVerificationCreate) Save(ctx context.Context) (*DNSVerification, error) {
	if err := dvc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dvc.sqlSave, dvc.mutation, dvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dvc *DNSVerificationCreate) SaveX(ctx context.Context) *DNSVerification {
	v, err := dvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dvc *DNSVerificationCreate) Exec(ctx context.Context) error {
	_, err := dvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dvc *DNSVerificationCreate) ExecX(ctx context.Context) {
	if err := dvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dvc *DNSVerificationCreate) defaults() error {
	if _, ok := dvc.mutation.CreatedAt(); !ok {
		if dnsverification.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized dnsverification.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := dnsverification.DefaultCreatedAt()
		dvc.mutation.SetCreatedAt(v)
	}
	if _, ok := dvc.mutation.UpdatedAt(); !ok {
		if dnsverification.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized dnsverification.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := dnsverification.DefaultUpdatedAt()
		dvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dvc.mutation.Tags(); !ok {
		v := dnsverification.DefaultTags
		dvc.mutation.SetTags(v)
	}
	if _, ok := dvc.mutation.DNSVerificationStatus(); !ok {
		v := dnsverification.DefaultDNSVerificationStatus
		dvc.mutation.SetDNSVerificationStatus(v)
	}
	if _, ok := dvc.mutation.AcmeChallengeStatus(); !ok {
		v := dnsverification.DefaultAcmeChallengeStatus
		dvc.mutation.SetAcmeChallengeStatus(v)
	}
	if _, ok := dvc.mutation.ID(); !ok {
		if dnsverification.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized dnsverification.DefaultID (forgotten import generated/runtime?)")
		}
		v := dnsverification.DefaultID()
		dvc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dvc *DNSVerificationCreate) check() error {
	if _, ok := dvc.mutation.CloudflareHostnameID(); !ok {
		return &ValidationError{Name: "cloudflare_hostname_id", err: errors.New(`generated: missing required field "DNSVerification.cloudflare_hostname_id"`)}
	}
	if v, ok := dvc.mutation.CloudflareHostnameID(); ok {
		if err := dnsverification.CloudflareHostnameIDValidator(v); err != nil {
			return &ValidationError{Name: "cloudflare_hostname_id", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.cloudflare_hostname_id": %w`, err)}
		}
	}
	if _, ok := dvc.mutation.DNSTxtRecord(); !ok {
		return &ValidationError{Name: "dns_txt_record", err: errors.New(`generated: missing required field "DNSVerification.dns_txt_record"`)}
	}
	if v, ok := dvc.mutation.DNSTxtRecord(); ok {
		if err := dnsverification.DNSTxtRecordValidator(v); err != nil {
			return &ValidationError{Name: "dns_txt_record", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_txt_record": %w`, err)}
		}
	}
	if _, ok := dvc.mutation.DNSTxtValue(); !ok {
		return &ValidationError{Name: "dns_txt_value", err: errors.New(`generated: missing required field "DNSVerification.dns_txt_value"`)}
	}
	if v, ok := dvc.mutation.DNSTxtValue(); ok {
		if err := dnsverification.DNSTxtValueValidator(v); err != nil {
			return &ValidationError{Name: "dns_txt_value", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_txt_value": %w`, err)}
		}
	}
	if _, ok := dvc.mutation.DNSVerificationStatus(); !ok {
		return &ValidationError{Name: "dns_verification_status", err: errors.New(`generated: missing required field "DNSVerification.dns_verification_status"`)}
	}
	if v, ok := dvc.mutation.DNSVerificationStatus(); ok {
		if err := dnsverification.DNSVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_verification_status": %w`, err)}
		}
	}
	if v, ok := dvc.mutation.DNSVerificationStatusReason(); ok {
		if err := dnsverification.DNSVerificationStatusReasonValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status_reason", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_verification_status_reason": %w`, err)}
		}
	}
	if v, ok := dvc.mutation.AcmeChallengePath(); ok {
		if err := dnsverification.AcmeChallengePathValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_path", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_path": %w`, err)}
		}
	}
	if v, ok := dvc.mutation.ExpectedAcmeChallengeValue(); ok {
		if err := dnsverification.ExpectedAcmeChallengeValueValidator(v); err != nil {
			return &ValidationError{Name: "expected_acme_challenge_value", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.expected_acme_challenge_value": %w`, err)}
		}
	}
	if _, ok := dvc.mutation.AcmeChallengeStatus(); !ok {
		return &ValidationError{Name: "acme_challenge_status", err: errors.New(`generated: missing required field "DNSVerification.acme_challenge_status"`)}
	}
	if v, ok := dvc.mutation.AcmeChallengeStatus(); ok {
		if err := dnsverification.AcmeChallengeStatusValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_status": %w`, err)}
		}
	}
	if v, ok := dvc.mutation.AcmeChallengeStatusReason(); ok {
		if err := dnsverification.AcmeChallengeStatusReasonValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_status_reason", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_status_reason": %w`, err)}
		}
	}
	return nil
}

func (dvc *DNSVerificationCreate) sqlSave(ctx context.Context) (*DNSVerification, error) {
	if err := dvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected DNSVerification.ID type: %T", _spec.ID.Value)
		}
	}
	dvc.mutation.id = &_node.ID
	dvc.mutation.done = true
	return _node, nil
}

func (dvc *DNSVerificationCreate) createSpec() (*DNSVerification, *sqlgraph.CreateSpec) {
	var (
		_node = &DNSVerification{config: dvc.config}
		_spec = sqlgraph.NewCreateSpec(dnsverification.Table, sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString))
	)
	_spec.Schema = dvc.schemaConfig.DNSVerification
	if id, ok := dvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dvc.mutation.CreatedAt(); ok {
		_spec.SetField(dnsverification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dvc.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsverification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dvc.mutation.CreatedBy(); ok {
		_spec.SetField(dnsverification.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dvc.mutation.UpdatedBy(); ok {
		_spec.SetField(dnsverification.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := dvc.mutation.DeletedAt(); ok {
		_spec.SetField(dnsverification.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := dvc.mutation.DeletedBy(); ok {
		_spec.SetField(dnsverification.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := dvc.mutation.Tags(); ok {
		_spec.SetField(dnsverification.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := dvc.mutation.CloudflareHostnameID(); ok {
		_spec.SetField(dnsverification.FieldCloudflareHostnameID, field.TypeString, value)
		_node.CloudflareHostnameID = value
	}
	if value, ok := dvc.mutation.DNSTxtRecord(); ok {
		_spec.SetField(dnsverification.FieldDNSTxtRecord, field.TypeString, value)
		_node.DNSTxtRecord = value
	}
	if value, ok := dvc.mutation.DNSTxtValue(); ok {
		_spec.SetField(dnsverification.FieldDNSTxtValue, field.TypeString, value)
		_node.DNSTxtValue = value
	}
	if value, ok := dvc.mutation.DNSVerificationStatus(); ok {
		_spec.SetField(dnsverification.FieldDNSVerificationStatus, field.TypeEnum, value)
		_node.DNSVerificationStatus = value
	}
	if value, ok := dvc.mutation.DNSVerificationStatusReason(); ok {
		_spec.SetField(dnsverification.FieldDNSVerificationStatusReason, field.TypeString, value)
		_node.DNSVerificationStatusReason = value
	}
	if value, ok := dvc.mutation.AcmeChallengePath(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengePath, field.TypeString, value)
		_node.AcmeChallengePath = value
	}
	if value, ok := dvc.mutation.ExpectedAcmeChallengeValue(); ok {
		_spec.SetField(dnsverification.FieldExpectedAcmeChallengeValue, field.TypeString, value)
		_node.ExpectedAcmeChallengeValue = value
	}
	if value, ok := dvc.mutation.AcmeChallengeStatus(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengeStatus, field.TypeEnum, value)
		_node.AcmeChallengeStatus = value
	}
	if value, ok := dvc.mutation.AcmeChallengeStatusReason(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengeStatusReason, field.TypeString, value)
		_node.AcmeChallengeStatusReason = value
	}
	if nodes := dvc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsverification.OwnerTable,
			Columns: []string{dnsverification.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvc.schemaConfig.DNSVerification
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dvc.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsverification.CustomDomainsTable,
			Columns: []string{dnsverification.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvc.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DNSVerificationCreateBulk is the builder for creating many DNSVerification entities in bulk.
type DNSVerificationCreateBulk struct {
	config
	err      error
	builders []*DNSVerificationCreate
}

// Save creates the DNSVerification entities in the database.
func (dvcb *DNSVerificationCreateBulk) Save(ctx context.Context) ([]*DNSVerification, error) {
	if dvcb.err != nil {
		return nil, dvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dvcb.builders))
	nodes := make([]*DNSVerification, len(dvcb.builders))
	mutators := make([]Mutator, len(dvcb.builders))
	for i := range dvcb.builders {
		func(i int, root context.Context) {
			builder := dvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DNSVerificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dvcb *DNSVerificationCreateBulk) SaveX(ctx context.Context) []*DNSVerification {
	v, err := dvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dvcb *DNSVerificationCreateBulk) Exec(ctx context.Context) error {
	_, err := dvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dvcb *DNSVerificationCreateBulk) ExecX(ctx context.Context) {
	if err := dvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
