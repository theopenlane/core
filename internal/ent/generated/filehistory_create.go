// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/entx/history"
)

// FileHistoryCreate is the builder for creating a FileHistory entity.
type FileHistoryCreate struct {
	config
	mutation *FileHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (_c *FileHistoryCreate) SetHistoryTime(v time.Time) *FileHistoryCreate {
	_c.mutation.SetHistoryTime(v)
	return _c
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableHistoryTime(v *time.Time) *FileHistoryCreate {
	if v != nil {
		_c.SetHistoryTime(*v)
	}
	return _c
}

// SetRef sets the "ref" field.
func (_c *FileHistoryCreate) SetRef(v string) *FileHistoryCreate {
	_c.mutation.SetRef(v)
	return _c
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableRef(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetRef(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *FileHistoryCreate) SetOperation(v history.OpType) *FileHistoryCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *FileHistoryCreate) SetCreatedAt(v time.Time) *FileHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableCreatedAt(v *time.Time) *FileHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *FileHistoryCreate) SetUpdatedAt(v time.Time) *FileHistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableUpdatedAt(v *time.Time) *FileHistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *FileHistoryCreate) SetCreatedBy(v string) *FileHistoryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableCreatedBy(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *FileHistoryCreate) SetUpdatedBy(v string) *FileHistoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableUpdatedBy(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *FileHistoryCreate) SetDeletedAt(v time.Time) *FileHistoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableDeletedAt(v *time.Time) *FileHistoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *FileHistoryCreate) SetDeletedBy(v string) *FileHistoryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableDeletedBy(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *FileHistoryCreate) SetTags(v []string) *FileHistoryCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *FileHistoryCreate) SetSystemOwned(v bool) *FileHistoryCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableSystemOwned(v *bool) *FileHistoryCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *FileHistoryCreate) SetInternalNotes(v string) *FileHistoryCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableInternalNotes(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *FileHistoryCreate) SetSystemInternalID(v string) *FileHistoryCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableSystemInternalID(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetProvidedFileName sets the "provided_file_name" field.
func (_c *FileHistoryCreate) SetProvidedFileName(v string) *FileHistoryCreate {
	_c.mutation.SetProvidedFileName(v)
	return _c
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (_c *FileHistoryCreate) SetProvidedFileExtension(v string) *FileHistoryCreate {
	_c.mutation.SetProvidedFileExtension(v)
	return _c
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (_c *FileHistoryCreate) SetProvidedFileSize(v int64) *FileHistoryCreate {
	_c.mutation.SetProvidedFileSize(v)
	return _c
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableProvidedFileSize(v *int64) *FileHistoryCreate {
	if v != nil {
		_c.SetProvidedFileSize(*v)
	}
	return _c
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (_c *FileHistoryCreate) SetPersistedFileSize(v int64) *FileHistoryCreate {
	_c.mutation.SetPersistedFileSize(v)
	return _c
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillablePersistedFileSize(v *int64) *FileHistoryCreate {
	if v != nil {
		_c.SetPersistedFileSize(*v)
	}
	return _c
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (_c *FileHistoryCreate) SetDetectedMimeType(v string) *FileHistoryCreate {
	_c.mutation.SetDetectedMimeType(v)
	return _c
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableDetectedMimeType(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetDetectedMimeType(*v)
	}
	return _c
}

// SetMd5Hash sets the "md5_hash" field.
func (_c *FileHistoryCreate) SetMd5Hash(v string) *FileHistoryCreate {
	_c.mutation.SetMd5Hash(v)
	return _c
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableMd5Hash(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetMd5Hash(*v)
	}
	return _c
}

// SetDetectedContentType sets the "detected_content_type" field.
func (_c *FileHistoryCreate) SetDetectedContentType(v string) *FileHistoryCreate {
	_c.mutation.SetDetectedContentType(v)
	return _c
}

// SetStoreKey sets the "store_key" field.
func (_c *FileHistoryCreate) SetStoreKey(v string) *FileHistoryCreate {
	_c.mutation.SetStoreKey(v)
	return _c
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableStoreKey(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetStoreKey(*v)
	}
	return _c
}

// SetCategoryType sets the "category_type" field.
func (_c *FileHistoryCreate) SetCategoryType(v string) *FileHistoryCreate {
	_c.mutation.SetCategoryType(v)
	return _c
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableCategoryType(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetCategoryType(*v)
	}
	return _c
}

// SetURI sets the "uri" field.
func (_c *FileHistoryCreate) SetURI(v string) *FileHistoryCreate {
	_c.mutation.SetURI(v)
	return _c
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableURI(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetURI(*v)
	}
	return _c
}

// SetStorageScheme sets the "storage_scheme" field.
func (_c *FileHistoryCreate) SetStorageScheme(v string) *FileHistoryCreate {
	_c.mutation.SetStorageScheme(v)
	return _c
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableStorageScheme(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetStorageScheme(*v)
	}
	return _c
}

// SetStorageVolume sets the "storage_volume" field.
func (_c *FileHistoryCreate) SetStorageVolume(v string) *FileHistoryCreate {
	_c.mutation.SetStorageVolume(v)
	return _c
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableStorageVolume(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetStorageVolume(*v)
	}
	return _c
}

// SetStoragePath sets the "storage_path" field.
func (_c *FileHistoryCreate) SetStoragePath(v string) *FileHistoryCreate {
	_c.mutation.SetStoragePath(v)
	return _c
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableStoragePath(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetStoragePath(*v)
	}
	return _c
}

// SetFileContents sets the "file_contents" field.
func (_c *FileHistoryCreate) SetFileContents(v []byte) *FileHistoryCreate {
	_c.mutation.SetFileContents(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *FileHistoryCreate) SetMetadata(v map[string]interface{}) *FileHistoryCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetStorageRegion sets the "storage_region" field.
func (_c *FileHistoryCreate) SetStorageRegion(v string) *FileHistoryCreate {
	_c.mutation.SetStorageRegion(v)
	return _c
}

// SetNillableStorageRegion sets the "storage_region" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableStorageRegion(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetStorageRegion(*v)
	}
	return _c
}

// SetStorageProvider sets the "storage_provider" field.
func (_c *FileHistoryCreate) SetStorageProvider(v string) *FileHistoryCreate {
	_c.mutation.SetStorageProvider(v)
	return _c
}

// SetNillableStorageProvider sets the "storage_provider" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableStorageProvider(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetStorageProvider(*v)
	}
	return _c
}

// SetLastAccessedAt sets the "last_accessed_at" field.
func (_c *FileHistoryCreate) SetLastAccessedAt(v time.Time) *FileHistoryCreate {
	_c.mutation.SetLastAccessedAt(v)
	return _c
}

// SetNillableLastAccessedAt sets the "last_accessed_at" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableLastAccessedAt(v *time.Time) *FileHistoryCreate {
	if v != nil {
		_c.SetLastAccessedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *FileHistoryCreate) SetID(v string) *FileHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *FileHistoryCreate) SetNillableID(v *string) *FileHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the FileHistoryMutation object of the builder.
func (_c *FileHistoryCreate) Mutation() *FileHistoryMutation {
	return _c.mutation
}

// Save creates the FileHistory in the database.
func (_c *FileHistoryCreate) Save(ctx context.Context) (*FileHistory, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FileHistoryCreate) SaveX(ctx context.Context) *FileHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FileHistoryCreate) defaults() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		if filehistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized filehistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := filehistory.DefaultHistoryTime()
		_c.mutation.SetHistoryTime(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if filehistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized filehistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := filehistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if filehistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized filehistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := filehistory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := filehistory.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := filehistory.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if filehistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized filehistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := filehistory.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *FileHistoryCreate) check() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "FileHistory.history_time"`)}
	}
	if _, ok := _c.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "FileHistory.operation"`)}
	}
	if v, ok := _c.mutation.Operation(); ok {
		if err := filehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "FileHistory.operation": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProvidedFileName(); !ok {
		return &ValidationError{Name: "provided_file_name", err: errors.New(`generated: missing required field "FileHistory.provided_file_name"`)}
	}
	if _, ok := _c.mutation.ProvidedFileExtension(); !ok {
		return &ValidationError{Name: "provided_file_extension", err: errors.New(`generated: missing required field "FileHistory.provided_file_extension"`)}
	}
	if _, ok := _c.mutation.DetectedContentType(); !ok {
		return &ValidationError{Name: "detected_content_type", err: errors.New(`generated: missing required field "FileHistory.detected_content_type"`)}
	}
	return nil
}

func (_c *FileHistoryCreate) sqlSave(ctx context.Context) (*FileHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FileHistory.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FileHistoryCreate) createSpec() (*FileHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &FileHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(filehistory.Table, sqlgraph.NewFieldSpec(filehistory.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.FileHistory
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.HistoryTime(); ok {
		_spec.SetField(filehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := _c.mutation.Ref(); ok {
		_spec.SetField(filehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(filehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(filehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(filehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(filehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(filehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(filehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(filehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(filehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(filehistory.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(filehistory.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(filehistory.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	if value, ok := _c.mutation.ProvidedFileName(); ok {
		_spec.SetField(filehistory.FieldProvidedFileName, field.TypeString, value)
		_node.ProvidedFileName = value
	}
	if value, ok := _c.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(filehistory.FieldProvidedFileExtension, field.TypeString, value)
		_node.ProvidedFileExtension = value
	}
	if value, ok := _c.mutation.ProvidedFileSize(); ok {
		_spec.SetField(filehistory.FieldProvidedFileSize, field.TypeInt64, value)
		_node.ProvidedFileSize = value
	}
	if value, ok := _c.mutation.PersistedFileSize(); ok {
		_spec.SetField(filehistory.FieldPersistedFileSize, field.TypeInt64, value)
		_node.PersistedFileSize = value
	}
	if value, ok := _c.mutation.DetectedMimeType(); ok {
		_spec.SetField(filehistory.FieldDetectedMimeType, field.TypeString, value)
		_node.DetectedMimeType = value
	}
	if value, ok := _c.mutation.Md5Hash(); ok {
		_spec.SetField(filehistory.FieldMd5Hash, field.TypeString, value)
		_node.Md5Hash = value
	}
	if value, ok := _c.mutation.DetectedContentType(); ok {
		_spec.SetField(filehistory.FieldDetectedContentType, field.TypeString, value)
		_node.DetectedContentType = value
	}
	if value, ok := _c.mutation.StoreKey(); ok {
		_spec.SetField(filehistory.FieldStoreKey, field.TypeString, value)
		_node.StoreKey = value
	}
	if value, ok := _c.mutation.CategoryType(); ok {
		_spec.SetField(filehistory.FieldCategoryType, field.TypeString, value)
		_node.CategoryType = value
	}
	if value, ok := _c.mutation.URI(); ok {
		_spec.SetField(filehistory.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := _c.mutation.StorageScheme(); ok {
		_spec.SetField(filehistory.FieldStorageScheme, field.TypeString, value)
		_node.StorageScheme = value
	}
	if value, ok := _c.mutation.StorageVolume(); ok {
		_spec.SetField(filehistory.FieldStorageVolume, field.TypeString, value)
		_node.StorageVolume = value
	}
	if value, ok := _c.mutation.StoragePath(); ok {
		_spec.SetField(filehistory.FieldStoragePath, field.TypeString, value)
		_node.StoragePath = value
	}
	if value, ok := _c.mutation.FileContents(); ok {
		_spec.SetField(filehistory.FieldFileContents, field.TypeBytes, value)
		_node.FileContents = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(filehistory.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.StorageRegion(); ok {
		_spec.SetField(filehistory.FieldStorageRegion, field.TypeString, value)
		_node.StorageRegion = value
	}
	if value, ok := _c.mutation.StorageProvider(); ok {
		_spec.SetField(filehistory.FieldStorageProvider, field.TypeString, value)
		_node.StorageProvider = value
	}
	if value, ok := _c.mutation.LastAccessedAt(); ok {
		_spec.SetField(filehistory.FieldLastAccessedAt, field.TypeTime, value)
		_node.LastAccessedAt = &value
	}
	return _node, _spec
}

// FileHistoryCreateBulk is the builder for creating many FileHistory entities in bulk.
type FileHistoryCreateBulk struct {
	config
	err      error
	builders []*FileHistoryCreate
}

// Save creates the FileHistory entities in the database.
func (_c *FileHistoryCreateBulk) Save(ctx context.Context) ([]*FileHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*FileHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FileHistoryCreateBulk) SaveX(ctx context.Context) []*FileHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
