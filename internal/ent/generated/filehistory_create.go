// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/entx/history"
)

// FileHistoryCreate is the builder for creating a FileHistory entity.
type FileHistoryCreate struct {
	config
	mutation *FileHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (fhc *FileHistoryCreate) SetHistoryTime(t time.Time) *FileHistoryCreate {
	fhc.mutation.SetHistoryTime(t)
	return fhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableHistoryTime(t *time.Time) *FileHistoryCreate {
	if t != nil {
		fhc.SetHistoryTime(*t)
	}
	return fhc
}

// SetRef sets the "ref" field.
func (fhc *FileHistoryCreate) SetRef(s string) *FileHistoryCreate {
	fhc.mutation.SetRef(s)
	return fhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableRef(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetRef(*s)
	}
	return fhc
}

// SetOperation sets the "operation" field.
func (fhc *FileHistoryCreate) SetOperation(ht history.OpType) *FileHistoryCreate {
	fhc.mutation.SetOperation(ht)
	return fhc
}

// SetCreatedAt sets the "created_at" field.
func (fhc *FileHistoryCreate) SetCreatedAt(t time.Time) *FileHistoryCreate {
	fhc.mutation.SetCreatedAt(t)
	return fhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableCreatedAt(t *time.Time) *FileHistoryCreate {
	if t != nil {
		fhc.SetCreatedAt(*t)
	}
	return fhc
}

// SetUpdatedAt sets the "updated_at" field.
func (fhc *FileHistoryCreate) SetUpdatedAt(t time.Time) *FileHistoryCreate {
	fhc.mutation.SetUpdatedAt(t)
	return fhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableUpdatedAt(t *time.Time) *FileHistoryCreate {
	if t != nil {
		fhc.SetUpdatedAt(*t)
	}
	return fhc
}

// SetCreatedBy sets the "created_by" field.
func (fhc *FileHistoryCreate) SetCreatedBy(s string) *FileHistoryCreate {
	fhc.mutation.SetCreatedBy(s)
	return fhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableCreatedBy(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetCreatedBy(*s)
	}
	return fhc
}

// SetUpdatedBy sets the "updated_by" field.
func (fhc *FileHistoryCreate) SetUpdatedBy(s string) *FileHistoryCreate {
	fhc.mutation.SetUpdatedBy(s)
	return fhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableUpdatedBy(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetUpdatedBy(*s)
	}
	return fhc
}

// SetDeletedAt sets the "deleted_at" field.
func (fhc *FileHistoryCreate) SetDeletedAt(t time.Time) *FileHistoryCreate {
	fhc.mutation.SetDeletedAt(t)
	return fhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableDeletedAt(t *time.Time) *FileHistoryCreate {
	if t != nil {
		fhc.SetDeletedAt(*t)
	}
	return fhc
}

// SetDeletedBy sets the "deleted_by" field.
func (fhc *FileHistoryCreate) SetDeletedBy(s string) *FileHistoryCreate {
	fhc.mutation.SetDeletedBy(s)
	return fhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableDeletedBy(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetDeletedBy(*s)
	}
	return fhc
}

// SetMappingID sets the "mapping_id" field.
func (fhc *FileHistoryCreate) SetMappingID(s string) *FileHistoryCreate {
	fhc.mutation.SetMappingID(s)
	return fhc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableMappingID(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetMappingID(*s)
	}
	return fhc
}

// SetTags sets the "tags" field.
func (fhc *FileHistoryCreate) SetTags(s []string) *FileHistoryCreate {
	fhc.mutation.SetTags(s)
	return fhc
}

// SetProvidedFileName sets the "provided_file_name" field.
func (fhc *FileHistoryCreate) SetProvidedFileName(s string) *FileHistoryCreate {
	fhc.mutation.SetProvidedFileName(s)
	return fhc
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (fhc *FileHistoryCreate) SetProvidedFileExtension(s string) *FileHistoryCreate {
	fhc.mutation.SetProvidedFileExtension(s)
	return fhc
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (fhc *FileHistoryCreate) SetProvidedFileSize(i int64) *FileHistoryCreate {
	fhc.mutation.SetProvidedFileSize(i)
	return fhc
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableProvidedFileSize(i *int64) *FileHistoryCreate {
	if i != nil {
		fhc.SetProvidedFileSize(*i)
	}
	return fhc
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (fhc *FileHistoryCreate) SetPersistedFileSize(i int64) *FileHistoryCreate {
	fhc.mutation.SetPersistedFileSize(i)
	return fhc
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillablePersistedFileSize(i *int64) *FileHistoryCreate {
	if i != nil {
		fhc.SetPersistedFileSize(*i)
	}
	return fhc
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (fhc *FileHistoryCreate) SetDetectedMimeType(s string) *FileHistoryCreate {
	fhc.mutation.SetDetectedMimeType(s)
	return fhc
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableDetectedMimeType(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetDetectedMimeType(*s)
	}
	return fhc
}

// SetMd5Hash sets the "md5_hash" field.
func (fhc *FileHistoryCreate) SetMd5Hash(s string) *FileHistoryCreate {
	fhc.mutation.SetMd5Hash(s)
	return fhc
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableMd5Hash(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetMd5Hash(*s)
	}
	return fhc
}

// SetDetectedContentType sets the "detected_content_type" field.
func (fhc *FileHistoryCreate) SetDetectedContentType(s string) *FileHistoryCreate {
	fhc.mutation.SetDetectedContentType(s)
	return fhc
}

// SetStoreKey sets the "store_key" field.
func (fhc *FileHistoryCreate) SetStoreKey(s string) *FileHistoryCreate {
	fhc.mutation.SetStoreKey(s)
	return fhc
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableStoreKey(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetStoreKey(*s)
	}
	return fhc
}

// SetCategoryType sets the "category_type" field.
func (fhc *FileHistoryCreate) SetCategoryType(s string) *FileHistoryCreate {
	fhc.mutation.SetCategoryType(s)
	return fhc
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableCategoryType(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetCategoryType(*s)
	}
	return fhc
}

// SetURI sets the "uri" field.
func (fhc *FileHistoryCreate) SetURI(s string) *FileHistoryCreate {
	fhc.mutation.SetURI(s)
	return fhc
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableURI(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetURI(*s)
	}
	return fhc
}

// SetStorageScheme sets the "storage_scheme" field.
func (fhc *FileHistoryCreate) SetStorageScheme(s string) *FileHistoryCreate {
	fhc.mutation.SetStorageScheme(s)
	return fhc
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableStorageScheme(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetStorageScheme(*s)
	}
	return fhc
}

// SetStorageVolume sets the "storage_volume" field.
func (fhc *FileHistoryCreate) SetStorageVolume(s string) *FileHistoryCreate {
	fhc.mutation.SetStorageVolume(s)
	return fhc
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableStorageVolume(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetStorageVolume(*s)
	}
	return fhc
}

// SetStoragePath sets the "storage_path" field.
func (fhc *FileHistoryCreate) SetStoragePath(s string) *FileHistoryCreate {
	fhc.mutation.SetStoragePath(s)
	return fhc
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableStoragePath(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetStoragePath(*s)
	}
	return fhc
}

// SetFileContents sets the "file_contents" field.
func (fhc *FileHistoryCreate) SetFileContents(b []byte) *FileHistoryCreate {
	fhc.mutation.SetFileContents(b)
	return fhc
}

// SetID sets the "id" field.
func (fhc *FileHistoryCreate) SetID(s string) *FileHistoryCreate {
	fhc.mutation.SetID(s)
	return fhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableID(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetID(*s)
	}
	return fhc
}

// Mutation returns the FileHistoryMutation object of the builder.
func (fhc *FileHistoryCreate) Mutation() *FileHistoryMutation {
	return fhc.mutation
}

// Save creates the FileHistory in the database.
func (fhc *FileHistoryCreate) Save(ctx context.Context) (*FileHistory, error) {
	fhc.defaults()
	return withHooks(ctx, fhc.sqlSave, fhc.mutation, fhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fhc *FileHistoryCreate) SaveX(ctx context.Context) *FileHistory {
	v, err := fhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fhc *FileHistoryCreate) Exec(ctx context.Context) error {
	_, err := fhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fhc *FileHistoryCreate) ExecX(ctx context.Context) {
	if err := fhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fhc *FileHistoryCreate) defaults() {
	if _, ok := fhc.mutation.HistoryTime(); !ok {
		v := filehistory.DefaultHistoryTime()
		fhc.mutation.SetHistoryTime(v)
	}
	if _, ok := fhc.mutation.CreatedAt(); !ok {
		v := filehistory.DefaultCreatedAt()
		fhc.mutation.SetCreatedAt(v)
	}
	if _, ok := fhc.mutation.UpdatedAt(); !ok {
		v := filehistory.DefaultUpdatedAt()
		fhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fhc.mutation.MappingID(); !ok {
		v := filehistory.DefaultMappingID()
		fhc.mutation.SetMappingID(v)
	}
	if _, ok := fhc.mutation.Tags(); !ok {
		v := filehistory.DefaultTags
		fhc.mutation.SetTags(v)
	}
	if _, ok := fhc.mutation.ID(); !ok {
		v := filehistory.DefaultID()
		fhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fhc *FileHistoryCreate) check() error {
	if _, ok := fhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "FileHistory.history_time"`)}
	}
	if _, ok := fhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "FileHistory.operation"`)}
	}
	if v, ok := fhc.mutation.Operation(); ok {
		if err := filehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "FileHistory.operation": %w`, err)}
		}
	}
	if _, ok := fhc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "FileHistory.mapping_id"`)}
	}
	if _, ok := fhc.mutation.ProvidedFileName(); !ok {
		return &ValidationError{Name: "provided_file_name", err: errors.New(`generated: missing required field "FileHistory.provided_file_name"`)}
	}
	if _, ok := fhc.mutation.ProvidedFileExtension(); !ok {
		return &ValidationError{Name: "provided_file_extension", err: errors.New(`generated: missing required field "FileHistory.provided_file_extension"`)}
	}
	if _, ok := fhc.mutation.DetectedContentType(); !ok {
		return &ValidationError{Name: "detected_content_type", err: errors.New(`generated: missing required field "FileHistory.detected_content_type"`)}
	}
	return nil
}

func (fhc *FileHistoryCreate) sqlSave(ctx context.Context) (*FileHistory, error) {
	if err := fhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FileHistory.ID type: %T", _spec.ID.Value)
		}
	}
	fhc.mutation.id = &_node.ID
	fhc.mutation.done = true
	return _node, nil
}

func (fhc *FileHistoryCreate) createSpec() (*FileHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &FileHistory{config: fhc.config}
		_spec = sqlgraph.NewCreateSpec(filehistory.Table, sqlgraph.NewFieldSpec(filehistory.FieldID, field.TypeString))
	)
	_spec.Schema = fhc.schemaConfig.FileHistory
	if id, ok := fhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fhc.mutation.HistoryTime(); ok {
		_spec.SetField(filehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := fhc.mutation.Ref(); ok {
		_spec.SetField(filehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := fhc.mutation.Operation(); ok {
		_spec.SetField(filehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := fhc.mutation.CreatedAt(); ok {
		_spec.SetField(filehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fhc.mutation.UpdatedAt(); ok {
		_spec.SetField(filehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fhc.mutation.CreatedBy(); ok {
		_spec.SetField(filehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := fhc.mutation.UpdatedBy(); ok {
		_spec.SetField(filehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := fhc.mutation.DeletedAt(); ok {
		_spec.SetField(filehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := fhc.mutation.DeletedBy(); ok {
		_spec.SetField(filehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := fhc.mutation.MappingID(); ok {
		_spec.SetField(filehistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := fhc.mutation.Tags(); ok {
		_spec.SetField(filehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := fhc.mutation.ProvidedFileName(); ok {
		_spec.SetField(filehistory.FieldProvidedFileName, field.TypeString, value)
		_node.ProvidedFileName = value
	}
	if value, ok := fhc.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(filehistory.FieldProvidedFileExtension, field.TypeString, value)
		_node.ProvidedFileExtension = value
	}
	if value, ok := fhc.mutation.ProvidedFileSize(); ok {
		_spec.SetField(filehistory.FieldProvidedFileSize, field.TypeInt64, value)
		_node.ProvidedFileSize = value
	}
	if value, ok := fhc.mutation.PersistedFileSize(); ok {
		_spec.SetField(filehistory.FieldPersistedFileSize, field.TypeInt64, value)
		_node.PersistedFileSize = value
	}
	if value, ok := fhc.mutation.DetectedMimeType(); ok {
		_spec.SetField(filehistory.FieldDetectedMimeType, field.TypeString, value)
		_node.DetectedMimeType = value
	}
	if value, ok := fhc.mutation.Md5Hash(); ok {
		_spec.SetField(filehistory.FieldMd5Hash, field.TypeString, value)
		_node.Md5Hash = value
	}
	if value, ok := fhc.mutation.DetectedContentType(); ok {
		_spec.SetField(filehistory.FieldDetectedContentType, field.TypeString, value)
		_node.DetectedContentType = value
	}
	if value, ok := fhc.mutation.StoreKey(); ok {
		_spec.SetField(filehistory.FieldStoreKey, field.TypeString, value)
		_node.StoreKey = value
	}
	if value, ok := fhc.mutation.CategoryType(); ok {
		_spec.SetField(filehistory.FieldCategoryType, field.TypeString, value)
		_node.CategoryType = value
	}
	if value, ok := fhc.mutation.URI(); ok {
		_spec.SetField(filehistory.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := fhc.mutation.StorageScheme(); ok {
		_spec.SetField(filehistory.FieldStorageScheme, field.TypeString, value)
		_node.StorageScheme = value
	}
	if value, ok := fhc.mutation.StorageVolume(); ok {
		_spec.SetField(filehistory.FieldStorageVolume, field.TypeString, value)
		_node.StorageVolume = value
	}
	if value, ok := fhc.mutation.StoragePath(); ok {
		_spec.SetField(filehistory.FieldStoragePath, field.TypeString, value)
		_node.StoragePath = value
	}
	if value, ok := fhc.mutation.FileContents(); ok {
		_spec.SetField(filehistory.FieldFileContents, field.TypeBytes, value)
		_node.FileContents = value
	}
	return _node, _spec
}

// FileHistoryCreateBulk is the builder for creating many FileHistory entities in bulk.
type FileHistoryCreateBulk struct {
	config
	err      error
	builders []*FileHistoryCreate
}

// Save creates the FileHistory entities in the database.
func (fhcb *FileHistoryCreateBulk) Save(ctx context.Context) ([]*FileHistory, error) {
	if fhcb.err != nil {
		return nil, fhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fhcb.builders))
	nodes := make([]*FileHistory, len(fhcb.builders))
	mutators := make([]Mutator, len(fhcb.builders))
	for i := range fhcb.builders {
		func(i int, root context.Context) {
			builder := fhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fhcb *FileHistoryCreateBulk) SaveX(ctx context.Context) []*FileHistory {
	v, err := fhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fhcb *FileHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := fhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fhcb *FileHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := fhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
