// Code generated by ent, DO NOT EDIT.

package trustcenter

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the trustcenter type in the database.
	Label = "trust_center"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldCustomDomainID holds the string denoting the custom_domain_id field in the database.
	FieldCustomDomainID = "custom_domain_id"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeCustomDomain holds the string denoting the custom_domain edge name in mutations.
	EdgeCustomDomain = "custom_domain"
	// EdgeSetting holds the string denoting the setting edge name in mutations.
	EdgeSetting = "setting"
	// EdgeWatermarkConfig holds the string denoting the watermark_config edge name in mutations.
	EdgeWatermarkConfig = "watermark_config"
	// EdgeTrustCenterSubprocessors holds the string denoting the trust_center_subprocessors edge name in mutations.
	EdgeTrustCenterSubprocessors = "trust_center_subprocessors"
	// EdgeTrustCenterDocs holds the string denoting the trust_center_docs edge name in mutations.
	EdgeTrustCenterDocs = "trust_center_docs"
	// EdgeTrustCenterCompliances holds the string denoting the trust_center_compliances edge name in mutations.
	EdgeTrustCenterCompliances = "trust_center_compliances"
	// EdgeTemplates holds the string denoting the templates edge name in mutations.
	EdgeTemplates = "templates"
	// Table holds the table name of the trustcenter in the database.
	Table = "trust_centers"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "trust_centers"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// CustomDomainTable is the table that holds the custom_domain relation/edge.
	CustomDomainTable = "trust_centers"
	// CustomDomainInverseTable is the table name for the CustomDomain entity.
	// It exists in this package in order to avoid circular dependency with the "customdomain" package.
	CustomDomainInverseTable = "custom_domains"
	// CustomDomainColumn is the table column denoting the custom_domain relation/edge.
	CustomDomainColumn = "custom_domain_id"
	// SettingTable is the table that holds the setting relation/edge.
	SettingTable = "trust_center_settings"
	// SettingInverseTable is the table name for the TrustCenterSetting entity.
	// It exists in this package in order to avoid circular dependency with the "trustcentersetting" package.
	SettingInverseTable = "trust_center_settings"
	// SettingColumn is the table column denoting the setting relation/edge.
	SettingColumn = "trust_center_id"
	// WatermarkConfigTable is the table that holds the watermark_config relation/edge.
	WatermarkConfigTable = "trust_centers"
	// WatermarkConfigInverseTable is the table name for the TrustCenterWatermarkConfig entity.
	// It exists in this package in order to avoid circular dependency with the "trustcenterwatermarkconfig" package.
	WatermarkConfigInverseTable = "trust_center_watermark_configs"
	// WatermarkConfigColumn is the table column denoting the watermark_config relation/edge.
	WatermarkConfigColumn = "trust_center_watermark_config"
	// TrustCenterSubprocessorsTable is the table that holds the trust_center_subprocessors relation/edge.
	TrustCenterSubprocessorsTable = "trust_center_subprocessors"
	// TrustCenterSubprocessorsInverseTable is the table name for the TrustCenterSubprocessor entity.
	// It exists in this package in order to avoid circular dependency with the "trustcentersubprocessor" package.
	TrustCenterSubprocessorsInverseTable = "trust_center_subprocessors"
	// TrustCenterSubprocessorsColumn is the table column denoting the trust_center_subprocessors relation/edge.
	TrustCenterSubprocessorsColumn = "trust_center_id"
	// TrustCenterDocsTable is the table that holds the trust_center_docs relation/edge.
	TrustCenterDocsTable = "trust_center_docs"
	// TrustCenterDocsInverseTable is the table name for the TrustCenterDoc entity.
	// It exists in this package in order to avoid circular dependency with the "trustcenterdoc" package.
	TrustCenterDocsInverseTable = "trust_center_docs"
	// TrustCenterDocsColumn is the table column denoting the trust_center_docs relation/edge.
	TrustCenterDocsColumn = "trust_center_id"
	// TrustCenterCompliancesTable is the table that holds the trust_center_compliances relation/edge.
	TrustCenterCompliancesTable = "trust_center_compliances"
	// TrustCenterCompliancesInverseTable is the table name for the TrustCenterCompliance entity.
	// It exists in this package in order to avoid circular dependency with the "trustcentercompliance" package.
	TrustCenterCompliancesInverseTable = "trust_center_compliances"
	// TrustCenterCompliancesColumn is the table column denoting the trust_center_compliances relation/edge.
	TrustCenterCompliancesColumn = "trust_center_id"
	// TemplatesTable is the table that holds the templates relation/edge.
	TemplatesTable = "templates"
	// TemplatesInverseTable is the table name for the Template entity.
	// It exists in this package in order to avoid circular dependency with the "template" package.
	TemplatesInverseTable = "templates"
	// TemplatesColumn is the table column denoting the templates relation/edge.
	TemplatesColumn = "trust_center_id"
)

// Columns holds all SQL columns for trustcenter fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldOwnerID,
	FieldSlug,
	FieldCustomDomainID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "trust_centers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"trust_center_watermark_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [7]ent.Hook
	Interceptors [4]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the TrustCenter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByCustomDomainID orders the results by the custom_domain_id field.
func ByCustomDomainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomDomainID, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomDomainField orders the results by custom_domain field.
func ByCustomDomainField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomDomainStep(), sql.OrderByField(field, opts...))
	}
}

// BySettingField orders the results by setting field.
func BySettingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSettingStep(), sql.OrderByField(field, opts...))
	}
}

// ByWatermarkConfigField orders the results by watermark_config field.
func ByWatermarkConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWatermarkConfigStep(), sql.OrderByField(field, opts...))
	}
}

// ByTrustCenterSubprocessorsCount orders the results by trust_center_subprocessors count.
func ByTrustCenterSubprocessorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrustCenterSubprocessorsStep(), opts...)
	}
}

// ByTrustCenterSubprocessors orders the results by trust_center_subprocessors terms.
func ByTrustCenterSubprocessors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrustCenterSubprocessorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrustCenterDocsCount orders the results by trust_center_docs count.
func ByTrustCenterDocsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrustCenterDocsStep(), opts...)
	}
}

// ByTrustCenterDocs orders the results by trust_center_docs terms.
func ByTrustCenterDocs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrustCenterDocsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrustCenterCompliancesCount orders the results by trust_center_compliances count.
func ByTrustCenterCompliancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrustCenterCompliancesStep(), opts...)
	}
}

// ByTrustCenterCompliances orders the results by trust_center_compliances terms.
func ByTrustCenterCompliances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrustCenterCompliancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTemplatesCount orders the results by templates count.
func ByTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTemplatesStep(), opts...)
	}
}

// ByTemplates orders the results by templates terms.
func ByTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newCustomDomainStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomDomainInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CustomDomainTable, CustomDomainColumn),
	)
}
func newSettingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SettingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SettingTable, SettingColumn),
	)
}
func newWatermarkConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WatermarkConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WatermarkConfigTable, WatermarkConfigColumn),
	)
}
func newTrustCenterSubprocessorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrustCenterSubprocessorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrustCenterSubprocessorsTable, TrustCenterSubprocessorsColumn),
	)
}
func newTrustCenterDocsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrustCenterDocsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrustCenterDocsTable, TrustCenterDocsColumn),
	)
}
func newTrustCenterCompliancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrustCenterCompliancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrustCenterCompliancesTable, TrustCenterCompliancesColumn),
	)
}
func newTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TemplatesTable, TemplatesColumn),
	)
}
