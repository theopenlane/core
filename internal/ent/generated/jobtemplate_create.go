// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// JobTemplateCreate is the builder for creating a JobTemplate entity.
type JobTemplateCreate struct {
	config
	mutation *JobTemplateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (jtc *JobTemplateCreate) SetCreatedAt(t time.Time) *JobTemplateCreate {
	jtc.mutation.SetCreatedAt(t)
	return jtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableCreatedAt(t *time.Time) *JobTemplateCreate {
	if t != nil {
		jtc.SetCreatedAt(*t)
	}
	return jtc
}

// SetUpdatedAt sets the "updated_at" field.
func (jtc *JobTemplateCreate) SetUpdatedAt(t time.Time) *JobTemplateCreate {
	jtc.mutation.SetUpdatedAt(t)
	return jtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableUpdatedAt(t *time.Time) *JobTemplateCreate {
	if t != nil {
		jtc.SetUpdatedAt(*t)
	}
	return jtc
}

// SetCreatedBy sets the "created_by" field.
func (jtc *JobTemplateCreate) SetCreatedBy(s string) *JobTemplateCreate {
	jtc.mutation.SetCreatedBy(s)
	return jtc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableCreatedBy(s *string) *JobTemplateCreate {
	if s != nil {
		jtc.SetCreatedBy(*s)
	}
	return jtc
}

// SetUpdatedBy sets the "updated_by" field.
func (jtc *JobTemplateCreate) SetUpdatedBy(s string) *JobTemplateCreate {
	jtc.mutation.SetUpdatedBy(s)
	return jtc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableUpdatedBy(s *string) *JobTemplateCreate {
	if s != nil {
		jtc.SetUpdatedBy(*s)
	}
	return jtc
}

// SetDeletedAt sets the "deleted_at" field.
func (jtc *JobTemplateCreate) SetDeletedAt(t time.Time) *JobTemplateCreate {
	jtc.mutation.SetDeletedAt(t)
	return jtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableDeletedAt(t *time.Time) *JobTemplateCreate {
	if t != nil {
		jtc.SetDeletedAt(*t)
	}
	return jtc
}

// SetDeletedBy sets the "deleted_by" field.
func (jtc *JobTemplateCreate) SetDeletedBy(s string) *JobTemplateCreate {
	jtc.mutation.SetDeletedBy(s)
	return jtc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableDeletedBy(s *string) *JobTemplateCreate {
	if s != nil {
		jtc.SetDeletedBy(*s)
	}
	return jtc
}

// SetDisplayID sets the "display_id" field.
func (jtc *JobTemplateCreate) SetDisplayID(s string) *JobTemplateCreate {
	jtc.mutation.SetDisplayID(s)
	return jtc
}

// SetTags sets the "tags" field.
func (jtc *JobTemplateCreate) SetTags(s []string) *JobTemplateCreate {
	jtc.mutation.SetTags(s)
	return jtc
}

// SetOwnerID sets the "owner_id" field.
func (jtc *JobTemplateCreate) SetOwnerID(s string) *JobTemplateCreate {
	jtc.mutation.SetOwnerID(s)
	return jtc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableOwnerID(s *string) *JobTemplateCreate {
	if s != nil {
		jtc.SetOwnerID(*s)
	}
	return jtc
}

// SetSystemOwned sets the "system_owned" field.
func (jtc *JobTemplateCreate) SetSystemOwned(b bool) *JobTemplateCreate {
	jtc.mutation.SetSystemOwned(b)
	return jtc
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableSystemOwned(b *bool) *JobTemplateCreate {
	if b != nil {
		jtc.SetSystemOwned(*b)
	}
	return jtc
}

// SetTitle sets the "title" field.
func (jtc *JobTemplateCreate) SetTitle(s string) *JobTemplateCreate {
	jtc.mutation.SetTitle(s)
	return jtc
}

// SetDescription sets the "description" field.
func (jtc *JobTemplateCreate) SetDescription(s string) *JobTemplateCreate {
	jtc.mutation.SetDescription(s)
	return jtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableDescription(s *string) *JobTemplateCreate {
	if s != nil {
		jtc.SetDescription(*s)
	}
	return jtc
}

// SetPlatform sets the "platform" field.
func (jtc *JobTemplateCreate) SetPlatform(ept enums.JobPlatformType) *JobTemplateCreate {
	jtc.mutation.SetPlatform(ept)
	return jtc
}

// SetWindmillPath sets the "windmill_path" field.
func (jtc *JobTemplateCreate) SetWindmillPath(s string) *JobTemplateCreate {
	jtc.mutation.SetWindmillPath(s)
	return jtc
}

// SetNillableWindmillPath sets the "windmill_path" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableWindmillPath(s *string) *JobTemplateCreate {
	if s != nil {
		jtc.SetWindmillPath(*s)
	}
	return jtc
}

// SetDownloadURL sets the "download_url" field.
func (jtc *JobTemplateCreate) SetDownloadURL(s string) *JobTemplateCreate {
	jtc.mutation.SetDownloadURL(s)
	return jtc
}

// SetConfiguration sets the "configuration" field.
func (jtc *JobTemplateCreate) SetConfiguration(mc models.JobConfiguration) *JobTemplateCreate {
	jtc.mutation.SetConfiguration(mc)
	return jtc
}

// SetCron sets the "cron" field.
func (jtc *JobTemplateCreate) SetCron(m models.Cron) *JobTemplateCreate {
	jtc.mutation.SetCron(m)
	return jtc
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableCron(m *models.Cron) *JobTemplateCreate {
	if m != nil {
		jtc.SetCron(*m)
	}
	return jtc
}

// SetID sets the "id" field.
func (jtc *JobTemplateCreate) SetID(s string) *JobTemplateCreate {
	jtc.mutation.SetID(s)
	return jtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jtc *JobTemplateCreate) SetNillableID(s *string) *JobTemplateCreate {
	if s != nil {
		jtc.SetID(*s)
	}
	return jtc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jtc *JobTemplateCreate) SetOwner(o *Organization) *JobTemplateCreate {
	return jtc.SetOwnerID(o.ID)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (jtc *JobTemplateCreate) AddScheduledJobIDs(ids ...string) *JobTemplateCreate {
	jtc.mutation.AddScheduledJobIDs(ids...)
	return jtc
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (jtc *JobTemplateCreate) AddScheduledJobs(s ...*ScheduledJob) *JobTemplateCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jtc.AddScheduledJobIDs(ids...)
}

// Mutation returns the JobTemplateMutation object of the builder.
func (jtc *JobTemplateCreate) Mutation() *JobTemplateMutation {
	return jtc.mutation
}

// Save creates the JobTemplate in the database.
func (jtc *JobTemplateCreate) Save(ctx context.Context) (*JobTemplate, error) {
	if err := jtc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jtc.sqlSave, jtc.mutation, jtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jtc *JobTemplateCreate) SaveX(ctx context.Context) *JobTemplate {
	v, err := jtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jtc *JobTemplateCreate) Exec(ctx context.Context) error {
	_, err := jtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtc *JobTemplateCreate) ExecX(ctx context.Context) {
	if err := jtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtc *JobTemplateCreate) defaults() error {
	if _, ok := jtc.mutation.CreatedAt(); !ok {
		if jobtemplate.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplate.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplate.DefaultCreatedAt()
		jtc.mutation.SetCreatedAt(v)
	}
	if _, ok := jtc.mutation.UpdatedAt(); !ok {
		if jobtemplate.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplate.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplate.DefaultUpdatedAt()
		jtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jtc.mutation.Tags(); !ok {
		v := jobtemplate.DefaultTags
		jtc.mutation.SetTags(v)
	}
	if _, ok := jtc.mutation.SystemOwned(); !ok {
		v := jobtemplate.DefaultSystemOwned
		jtc.mutation.SetSystemOwned(v)
	}
	if _, ok := jtc.mutation.ID(); !ok {
		if jobtemplate.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized jobtemplate.DefaultID (forgotten import generated/runtime?)")
		}
		v := jobtemplate.DefaultID()
		jtc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jtc *JobTemplateCreate) check() error {
	if _, ok := jtc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "JobTemplate.display_id"`)}
	}
	if v, ok := jtc.mutation.DisplayID(); ok {
		if err := jobtemplate.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.display_id": %w`, err)}
		}
	}
	if _, ok := jtc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "JobTemplate.title"`)}
	}
	if v, ok := jtc.mutation.Title(); ok {
		if err := jobtemplate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.title": %w`, err)}
		}
	}
	if _, ok := jtc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`generated: missing required field "JobTemplate.platform"`)}
	}
	if v, ok := jtc.mutation.Platform(); ok {
		if err := jobtemplate.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.platform": %w`, err)}
		}
	}
	if _, ok := jtc.mutation.DownloadURL(); !ok {
		return &ValidationError{Name: "download_url", err: errors.New(`generated: missing required field "JobTemplate.download_url"`)}
	}
	if v, ok := jtc.mutation.Cron(); ok {
		if err := jobtemplate.CronValidator(string(v)); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "JobTemplate.cron": %w`, err)}
		}
	}
	return nil
}

func (jtc *JobTemplateCreate) sqlSave(ctx context.Context) (*JobTemplate, error) {
	if err := jtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobTemplate.ID type: %T", _spec.ID.Value)
		}
	}
	jtc.mutation.id = &_node.ID
	jtc.mutation.done = true
	return _node, nil
}

func (jtc *JobTemplateCreate) createSpec() (*JobTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &JobTemplate{config: jtc.config}
		_spec = sqlgraph.NewCreateSpec(jobtemplate.Table, sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString))
	)
	_spec.Schema = jtc.schemaConfig.JobTemplate
	if id, ok := jtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jtc.mutation.CreatedAt(); ok {
		_spec.SetField(jobtemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jtc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jtc.mutation.CreatedBy(); ok {
		_spec.SetField(jobtemplate.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := jtc.mutation.UpdatedBy(); ok {
		_spec.SetField(jobtemplate.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := jtc.mutation.DeletedAt(); ok {
		_spec.SetField(jobtemplate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jtc.mutation.DeletedBy(); ok {
		_spec.SetField(jobtemplate.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := jtc.mutation.DisplayID(); ok {
		_spec.SetField(jobtemplate.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := jtc.mutation.Tags(); ok {
		_spec.SetField(jobtemplate.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := jtc.mutation.SystemOwned(); ok {
		_spec.SetField(jobtemplate.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := jtc.mutation.Title(); ok {
		_spec.SetField(jobtemplate.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := jtc.mutation.Description(); ok {
		_spec.SetField(jobtemplate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := jtc.mutation.Platform(); ok {
		_spec.SetField(jobtemplate.FieldPlatform, field.TypeEnum, value)
		_node.Platform = value
	}
	if value, ok := jtc.mutation.WindmillPath(); ok {
		_spec.SetField(jobtemplate.FieldWindmillPath, field.TypeString, value)
		_node.WindmillPath = value
	}
	if value, ok := jtc.mutation.DownloadURL(); ok {
		_spec.SetField(jobtemplate.FieldDownloadURL, field.TypeString, value)
		_node.DownloadURL = value
	}
	if value, ok := jtc.mutation.Configuration(); ok {
		_spec.SetField(jobtemplate.FieldConfiguration, field.TypeJSON, value)
		_node.Configuration = value
	}
	if value, ok := jtc.mutation.Cron(); ok {
		_spec.SetField(jobtemplate.FieldCron, field.TypeString, value)
		_node.Cron = &value
	}
	if nodes := jtc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobtemplate.OwnerTable,
			Columns: []string{jobtemplate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtc.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jtc.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobtemplate.ScheduledJobsTable,
			Columns: []string{jobtemplate.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jtc.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobTemplateCreateBulk is the builder for creating many JobTemplate entities in bulk.
type JobTemplateCreateBulk struct {
	config
	err      error
	builders []*JobTemplateCreate
}

// Save creates the JobTemplate entities in the database.
func (jtcb *JobTemplateCreateBulk) Save(ctx context.Context) ([]*JobTemplate, error) {
	if jtcb.err != nil {
		return nil, jtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jtcb.builders))
	nodes := make([]*JobTemplate, len(jtcb.builders))
	mutators := make([]Mutator, len(jtcb.builders))
	for i := range jtcb.builders {
		func(i int, root context.Context) {
			builder := jtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jtcb *JobTemplateCreateBulk) SaveX(ctx context.Context) []*JobTemplate {
	v, err := jtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jtcb *JobTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := jtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtcb *JobTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := jtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
