// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
)

// SubprocessorCreate is the builder for creating a Subprocessor entity.
type SubprocessorCreate struct {
	config
	mutation *SubprocessorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubprocessorCreate) SetCreatedAt(t time.Time) *SubprocessorCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableCreatedAt(t *time.Time) *SubprocessorCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubprocessorCreate) SetUpdatedAt(t time.Time) *SubprocessorCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableUpdatedAt(t *time.Time) *SubprocessorCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SubprocessorCreate) SetCreatedBy(s string) *SubprocessorCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableCreatedBy(s *string) *SubprocessorCreate {
	if s != nil {
		sc.SetCreatedBy(*s)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SubprocessorCreate) SetUpdatedBy(s string) *SubprocessorCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableUpdatedBy(s *string) *SubprocessorCreate {
	if s != nil {
		sc.SetUpdatedBy(*s)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SubprocessorCreate) SetDeletedAt(t time.Time) *SubprocessorCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableDeletedAt(t *time.Time) *SubprocessorCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetDeletedBy sets the "deleted_by" field.
func (sc *SubprocessorCreate) SetDeletedBy(s string) *SubprocessorCreate {
	sc.mutation.SetDeletedBy(s)
	return sc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableDeletedBy(s *string) *SubprocessorCreate {
	if s != nil {
		sc.SetDeletedBy(*s)
	}
	return sc
}

// SetTags sets the "tags" field.
func (sc *SubprocessorCreate) SetTags(s []string) *SubprocessorCreate {
	sc.mutation.SetTags(s)
	return sc
}

// SetOwnerID sets the "owner_id" field.
func (sc *SubprocessorCreate) SetOwnerID(s string) *SubprocessorCreate {
	sc.mutation.SetOwnerID(s)
	return sc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableOwnerID(s *string) *SubprocessorCreate {
	if s != nil {
		sc.SetOwnerID(*s)
	}
	return sc
}

// SetSystemOwned sets the "system_owned" field.
func (sc *SubprocessorCreate) SetSystemOwned(b bool) *SubprocessorCreate {
	sc.mutation.SetSystemOwned(b)
	return sc
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableSystemOwned(b *bool) *SubprocessorCreate {
	if b != nil {
		sc.SetSystemOwned(*b)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SubprocessorCreate) SetName(s string) *SubprocessorCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SubprocessorCreate) SetDescription(s string) *SubprocessorCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableDescription(s *string) *SubprocessorCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (sc *SubprocessorCreate) SetLogoRemoteURL(s string) *SubprocessorCreate {
	sc.mutation.SetLogoRemoteURL(s)
	return sc
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableLogoRemoteURL(s *string) *SubprocessorCreate {
	if s != nil {
		sc.SetLogoRemoteURL(*s)
	}
	return sc
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (sc *SubprocessorCreate) SetLogoLocalFileID(s string) *SubprocessorCreate {
	sc.mutation.SetLogoLocalFileID(s)
	return sc
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableLogoLocalFileID(s *string) *SubprocessorCreate {
	if s != nil {
		sc.SetLogoLocalFileID(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubprocessorCreate) SetID(s string) *SubprocessorCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableID(s *string) *SubprocessorCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (sc *SubprocessorCreate) SetOwner(o *Organization) *SubprocessorCreate {
	return sc.SetOwnerID(o.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (sc *SubprocessorCreate) AddFileIDs(ids ...string) *SubprocessorCreate {
	sc.mutation.AddFileIDs(ids...)
	return sc
}

// AddFiles adds the "files" edges to the File entity.
func (sc *SubprocessorCreate) AddFiles(f ...*File) *SubprocessorCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return sc.AddFileIDs(ids...)
}

// SetLogoFileID sets the "logo_file" edge to the File entity by ID.
func (sc *SubprocessorCreate) SetLogoFileID(id string) *SubprocessorCreate {
	sc.mutation.SetLogoFileID(id)
	return sc
}

// SetNillableLogoFileID sets the "logo_file" edge to the File entity by ID if the given value is not nil.
func (sc *SubprocessorCreate) SetNillableLogoFileID(id *string) *SubprocessorCreate {
	if id != nil {
		sc = sc.SetLogoFileID(*id)
	}
	return sc
}

// SetLogoFile sets the "logo_file" edge to the File entity.
func (sc *SubprocessorCreate) SetLogoFile(f *File) *SubprocessorCreate {
	return sc.SetLogoFileID(f.ID)
}

// Mutation returns the SubprocessorMutation object of the builder.
func (sc *SubprocessorCreate) Mutation() *SubprocessorMutation {
	return sc.mutation
}

// Save creates the Subprocessor in the database.
func (sc *SubprocessorCreate) Save(ctx context.Context) (*Subprocessor, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubprocessorCreate) SaveX(ctx context.Context) *Subprocessor {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubprocessorCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubprocessorCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubprocessorCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if subprocessor.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized subprocessor.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := subprocessor.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if subprocessor.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subprocessor.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subprocessor.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Tags(); !ok {
		v := subprocessor.DefaultTags
		sc.mutation.SetTags(v)
	}
	if _, ok := sc.mutation.SystemOwned(); !ok {
		v := subprocessor.DefaultSystemOwned
		sc.mutation.SetSystemOwned(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if subprocessor.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized subprocessor.DefaultID (forgotten import generated/runtime?)")
		}
		v := subprocessor.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubprocessorCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Subprocessor.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := subprocessor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Subprocessor.name": %w`, err)}
		}
	}
	if v, ok := sc.mutation.LogoRemoteURL(); ok {
		if err := subprocessor.LogoRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_remote_url", err: fmt.Errorf(`generated: validator failed for field "Subprocessor.logo_remote_url": %w`, err)}
		}
	}
	return nil
}

func (sc *SubprocessorCreate) sqlSave(ctx context.Context) (*Subprocessor, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Subprocessor.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubprocessorCreate) createSpec() (*Subprocessor, *sqlgraph.CreateSpec) {
	var (
		_node = &Subprocessor{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subprocessor.Table, sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString))
	)
	_spec.Schema = sc.schemaConfig.Subprocessor
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subprocessor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subprocessor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(subprocessor.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(subprocessor.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(subprocessor.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.DeletedBy(); ok {
		_spec.SetField(subprocessor.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.SetField(subprocessor.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := sc.mutation.SystemOwned(); ok {
		_spec.SetField(subprocessor.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(subprocessor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(subprocessor.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.LogoRemoteURL(); ok {
		_spec.SetField(subprocessor.FieldLogoRemoteURL, field.TypeString, value)
		_node.LogoRemoteURL = &value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subprocessor.OwnerTable,
			Columns: []string{subprocessor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subprocessor.FilesTable,
			Columns: subprocessor.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.LogoFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subprocessor.LogoFileTable,
			Columns: []string{subprocessor.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LogoLocalFileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubprocessorCreateBulk is the builder for creating many Subprocessor entities in bulk.
type SubprocessorCreateBulk struct {
	config
	err      error
	builders []*SubprocessorCreate
}

// Save creates the Subprocessor entities in the database.
func (scb *SubprocessorCreateBulk) Save(ctx context.Context) ([]*Subprocessor, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subprocessor, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubprocessorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubprocessorCreateBulk) SaveX(ctx context.Context) []*Subprocessor {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubprocessorCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubprocessorCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
