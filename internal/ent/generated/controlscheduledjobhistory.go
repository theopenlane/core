// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/controlscheduledjobhistory"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// ControlScheduledJobHistory is the model entity for the ControlScheduledJobHistory schema.
type ControlScheduledJobHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the scheduled_job id to take the script to run from
	JobID string `json:"job_id,omitempty"`
	// the configuration to run this job
	Configuration models.JobConfiguration `json:"configuration,omitempty"`
	// cron syntax. If not provided, it would inherit the cron of the parent job
	Cron *models.Cron `json:"cron,omitempty"`
	// the runner that this job will run on. If not set, it will scheduled on a general runner instead
	JobRunnerID  string `json:"job_runner_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ControlScheduledJobHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case controlscheduledjobhistory.FieldCron:
			values[i] = &sql.NullScanner{S: new(models.Cron)}
		case controlscheduledjobhistory.FieldConfiguration:
			values[i] = new([]byte)
		case controlscheduledjobhistory.FieldOperation:
			values[i] = new(history.OpType)
		case controlscheduledjobhistory.FieldID, controlscheduledjobhistory.FieldRef, controlscheduledjobhistory.FieldCreatedBy, controlscheduledjobhistory.FieldUpdatedBy, controlscheduledjobhistory.FieldDeletedBy, controlscheduledjobhistory.FieldOwnerID, controlscheduledjobhistory.FieldJobID, controlscheduledjobhistory.FieldJobRunnerID:
			values[i] = new(sql.NullString)
		case controlscheduledjobhistory.FieldHistoryTime, controlscheduledjobhistory.FieldCreatedAt, controlscheduledjobhistory.FieldUpdatedAt, controlscheduledjobhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ControlScheduledJobHistory fields.
func (csjh *ControlScheduledJobHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case controlscheduledjobhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				csjh.ID = value.String
			}
		case controlscheduledjobhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				csjh.HistoryTime = value.Time
			}
		case controlscheduledjobhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				csjh.Ref = value.String
			}
		case controlscheduledjobhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				csjh.Operation = *value
			}
		case controlscheduledjobhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				csjh.CreatedAt = value.Time
			}
		case controlscheduledjobhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				csjh.UpdatedAt = value.Time
			}
		case controlscheduledjobhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				csjh.CreatedBy = value.String
			}
		case controlscheduledjobhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				csjh.UpdatedBy = value.String
			}
		case controlscheduledjobhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				csjh.DeletedAt = value.Time
			}
		case controlscheduledjobhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				csjh.DeletedBy = value.String
			}
		case controlscheduledjobhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				csjh.OwnerID = value.String
			}
		case controlscheduledjobhistory.FieldJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				csjh.JobID = value.String
			}
		case controlscheduledjobhistory.FieldConfiguration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field configuration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &csjh.Configuration); err != nil {
					return fmt.Errorf("unmarshal field configuration: %w", err)
				}
			}
		case controlscheduledjobhistory.FieldCron:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				csjh.Cron = new(models.Cron)
				*csjh.Cron = *value.S.(*models.Cron)
			}
		case controlscheduledjobhistory.FieldJobRunnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_runner_id", values[i])
			} else if value.Valid {
				csjh.JobRunnerID = value.String
			}
		default:
			csjh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ControlScheduledJobHistory.
// This includes values selected through modifiers, order, etc.
func (csjh *ControlScheduledJobHistory) Value(name string) (ent.Value, error) {
	return csjh.selectValues.Get(name)
}

// Update returns a builder for updating this ControlScheduledJobHistory.
// Note that you need to call ControlScheduledJobHistory.Unwrap() before calling this method if this ControlScheduledJobHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (csjh *ControlScheduledJobHistory) Update() *ControlScheduledJobHistoryUpdateOne {
	return NewControlScheduledJobHistoryClient(csjh.config).UpdateOne(csjh)
}

// Unwrap unwraps the ControlScheduledJobHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csjh *ControlScheduledJobHistory) Unwrap() *ControlScheduledJobHistory {
	_tx, ok := csjh.config.driver.(*txDriver)
	if !ok {
		panic("generated: ControlScheduledJobHistory is not a transactional entity")
	}
	csjh.config.driver = _tx.drv
	return csjh
}

// String implements the fmt.Stringer.
func (csjh *ControlScheduledJobHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ControlScheduledJobHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csjh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(csjh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(csjh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", csjh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(csjh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(csjh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(csjh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(csjh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(csjh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(csjh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(csjh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(csjh.JobID)
	builder.WriteString(", ")
	builder.WriteString("configuration=")
	builder.WriteString(fmt.Sprintf("%v", csjh.Configuration))
	builder.WriteString(", ")
	if v := csjh.Cron; v != nil {
		builder.WriteString("cron=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("job_runner_id=")
	builder.WriteString(csjh.JobRunnerID)
	builder.WriteByte(')')
	return builder.String()
}

// ControlScheduledJobHistories is a parsable slice of ControlScheduledJobHistory.
type ControlScheduledJobHistories []*ControlScheduledJobHistory
