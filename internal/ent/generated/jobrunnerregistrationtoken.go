// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// JobRunnerRegistrationToken is the model entity for the JobRunnerRegistrationToken schema.
type JobRunnerRegistrationToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// when the token expires
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`
	// the ID of the runner this token was used to register
	JobRunnerID string `json:"job_runner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobRunnerRegistrationTokenQuery when eager-loading is set.
	Edges        JobRunnerRegistrationTokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobRunnerRegistrationTokenEdges holds the relations/edges for other nodes in the graph.
type JobRunnerRegistrationTokenEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// JobRunner holds the value of the job_runner edge.
	JobRunner *JobRunner `json:"job_runner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRunnerRegistrationTokenEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// JobRunnerOrErr returns the JobRunner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRunnerRegistrationTokenEdges) JobRunnerOrErr() (*JobRunner, error) {
	if e.JobRunner != nil {
		return e.JobRunner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: jobrunner.Label}
	}
	return nil, &NotLoadedError{edge: "job_runner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobRunnerRegistrationToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobrunnerregistrationtoken.FieldTags:
			values[i] = new([]byte)
		case jobrunnerregistrationtoken.FieldID, jobrunnerregistrationtoken.FieldCreatedBy, jobrunnerregistrationtoken.FieldUpdatedBy, jobrunnerregistrationtoken.FieldDeletedBy, jobrunnerregistrationtoken.FieldOwnerID, jobrunnerregistrationtoken.FieldToken, jobrunnerregistrationtoken.FieldJobRunnerID:
			values[i] = new(sql.NullString)
		case jobrunnerregistrationtoken.FieldCreatedAt, jobrunnerregistrationtoken.FieldUpdatedAt, jobrunnerregistrationtoken.FieldDeletedAt, jobrunnerregistrationtoken.FieldExpiresAt, jobrunnerregistrationtoken.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobRunnerRegistrationToken fields.
func (jrrt *JobRunnerRegistrationToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobrunnerregistrationtoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				jrrt.ID = value.String
			}
		case jobrunnerregistrationtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jrrt.CreatedAt = value.Time
			}
		case jobrunnerregistrationtoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jrrt.UpdatedAt = value.Time
			}
		case jobrunnerregistrationtoken.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				jrrt.CreatedBy = value.String
			}
		case jobrunnerregistrationtoken.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				jrrt.UpdatedBy = value.String
			}
		case jobrunnerregistrationtoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jrrt.DeletedAt = value.Time
			}
		case jobrunnerregistrationtoken.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				jrrt.DeletedBy = value.String
			}
		case jobrunnerregistrationtoken.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &jrrt.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case jobrunnerregistrationtoken.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				jrrt.OwnerID = value.String
			}
		case jobrunnerregistrationtoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				jrrt.Token = value.String
			}
		case jobrunnerregistrationtoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				jrrt.ExpiresAt = value.Time
			}
		case jobrunnerregistrationtoken.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				jrrt.LastUsedAt = new(time.Time)
				*jrrt.LastUsedAt = value.Time
			}
		case jobrunnerregistrationtoken.FieldJobRunnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_runner_id", values[i])
			} else if value.Valid {
				jrrt.JobRunnerID = value.String
			}
		default:
			jrrt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobRunnerRegistrationToken.
// This includes values selected through modifiers, order, etc.
func (jrrt *JobRunnerRegistrationToken) Value(name string) (ent.Value, error) {
	return jrrt.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the JobRunnerRegistrationToken entity.
func (jrrt *JobRunnerRegistrationToken) QueryOwner() *OrganizationQuery {
	return NewJobRunnerRegistrationTokenClient(jrrt.config).QueryOwner(jrrt)
}

// QueryJobRunner queries the "job_runner" edge of the JobRunnerRegistrationToken entity.
func (jrrt *JobRunnerRegistrationToken) QueryJobRunner() *JobRunnerQuery {
	return NewJobRunnerRegistrationTokenClient(jrrt.config).QueryJobRunner(jrrt)
}

// Update returns a builder for updating this JobRunnerRegistrationToken.
// Note that you need to call JobRunnerRegistrationToken.Unwrap() before calling this method if this JobRunnerRegistrationToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (jrrt *JobRunnerRegistrationToken) Update() *JobRunnerRegistrationTokenUpdateOne {
	return NewJobRunnerRegistrationTokenClient(jrrt.config).UpdateOne(jrrt)
}

// Unwrap unwraps the JobRunnerRegistrationToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jrrt *JobRunnerRegistrationToken) Unwrap() *JobRunnerRegistrationToken {
	_tx, ok := jrrt.config.driver.(*txDriver)
	if !ok {
		panic("generated: JobRunnerRegistrationToken is not a transactional entity")
	}
	jrrt.config.driver = _tx.drv
	return jrrt
}

// String implements the fmt.Stringer.
func (jrrt *JobRunnerRegistrationToken) String() string {
	var builder strings.Builder
	builder.WriteString("JobRunnerRegistrationToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jrrt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(jrrt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jrrt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(jrrt.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(jrrt.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(jrrt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(jrrt.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", jrrt.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(jrrt.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(jrrt.Token)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(jrrt.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := jrrt.LastUsedAt; v != nil {
		builder.WriteString("last_used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("job_runner_id=")
	builder.WriteString(jrrt.JobRunnerID)
	builder.WriteByte(')')
	return builder.String()
}

// JobRunnerRegistrationTokens is a parsable slice of JobRunnerRegistrationToken.
type JobRunnerRegistrationTokens []*JobRunnerRegistrationToken
