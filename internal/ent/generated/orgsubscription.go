// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
)

// OrgSubscription is the model entity for the OrgSubscription schema.
type OrgSubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the stripe subscription id
	StripeSubscriptionID string `json:"stripe_subscription_id,omitempty"`
	// the common name of the product tier the subscription is associated with, e.g. starter tier
	ProductTier string `json:"product_tier,omitempty"`
	// the product id that represents the tier in stripe
	StripeProductTierID string `json:"stripe_product_tier_id,omitempty"`
	// the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
	StripeSubscriptionStatus string `json:"stripe_subscription_status,omitempty"`
	// indicates if the subscription is active
	Active bool `json:"active,omitempty"`
	// the customer ID the subscription is associated to
	StripeCustomerID string `json:"stripe_customer_id,omitempty"`
	// the time the subscription is set to expire; only populated if subscription is cancelled
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// the features associated with the subscription
	Features []string `json:"features,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgSubscriptionQuery when eager-loading is set.
	Edges        OrgSubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues

	SubscriptionURL string `json:"subscriptionURL,omitempty"`
}

// OrgSubscriptionEdges holds the relations/edges for other nodes in the graph.
type OrgSubscriptionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgSubscriptionEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgsubscription.FieldTags, orgsubscription.FieldFeatures:
			values[i] = new([]byte)
		case orgsubscription.FieldActive:
			values[i] = new(sql.NullBool)
		case orgsubscription.FieldID, orgsubscription.FieldCreatedBy, orgsubscription.FieldUpdatedBy, orgsubscription.FieldMappingID, orgsubscription.FieldDeletedBy, orgsubscription.FieldOwnerID, orgsubscription.FieldStripeSubscriptionID, orgsubscription.FieldProductTier, orgsubscription.FieldStripeProductTierID, orgsubscription.FieldStripeSubscriptionStatus, orgsubscription.FieldStripeCustomerID:
			values[i] = new(sql.NullString)
		case orgsubscription.FieldCreatedAt, orgsubscription.FieldUpdatedAt, orgsubscription.FieldDeletedAt, orgsubscription.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgSubscription fields.
func (os *OrgSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgsubscription.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				os.ID = value.String
			}
		case orgsubscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				os.CreatedAt = value.Time
			}
		case orgsubscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				os.UpdatedAt = value.Time
			}
		case orgsubscription.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				os.CreatedBy = value.String
			}
		case orgsubscription.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				os.UpdatedBy = value.String
			}
		case orgsubscription.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				os.MappingID = value.String
			}
		case orgsubscription.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &os.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case orgsubscription.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				os.DeletedAt = value.Time
			}
		case orgsubscription.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				os.DeletedBy = value.String
			}
		case orgsubscription.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				os.OwnerID = value.String
			}
		case orgsubscription.FieldStripeSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_subscription_id", values[i])
			} else if value.Valid {
				os.StripeSubscriptionID = value.String
			}
		case orgsubscription.FieldProductTier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_tier", values[i])
			} else if value.Valid {
				os.ProductTier = value.String
			}
		case orgsubscription.FieldStripeProductTierID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_product_tier_id", values[i])
			} else if value.Valid {
				os.StripeProductTierID = value.String
			}
		case orgsubscription.FieldStripeSubscriptionStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_subscription_status", values[i])
			} else if value.Valid {
				os.StripeSubscriptionStatus = value.String
			}
		case orgsubscription.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				os.Active = value.Bool
			}
		case orgsubscription.FieldStripeCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_customer_id", values[i])
			} else if value.Valid {
				os.StripeCustomerID = value.String
			}
		case orgsubscription.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				os.ExpiresAt = new(time.Time)
				*os.ExpiresAt = value.Time
			}
		case orgsubscription.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &os.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		default:
			os.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrgSubscription.
// This includes values selected through modifiers, order, etc.
func (os *OrgSubscription) Value(name string) (ent.Value, error) {
	return os.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the OrgSubscription entity.
func (os *OrgSubscription) QueryOwner() *OrganizationQuery {
	return NewOrgSubscriptionClient(os.config).QueryOwner(os)
}

// Update returns a builder for updating this OrgSubscription.
// Note that you need to call OrgSubscription.Unwrap() before calling this method if this OrgSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrgSubscription) Update() *OrgSubscriptionUpdateOne {
	return NewOrgSubscriptionClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OrgSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrgSubscription) Unwrap() *OrgSubscription {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrgSubscription is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrgSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("OrgSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("created_at=")
	builder.WriteString(os.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(os.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(os.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(os.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(os.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", os.Tags))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(os.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(os.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(os.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("stripe_subscription_id=")
	builder.WriteString(os.StripeSubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("product_tier=")
	builder.WriteString(os.ProductTier)
	builder.WriteString(", ")
	builder.WriteString("stripe_product_tier_id=")
	builder.WriteString(os.StripeProductTierID)
	builder.WriteString(", ")
	builder.WriteString("stripe_subscription_status=")
	builder.WriteString(os.StripeSubscriptionStatus)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", os.Active))
	builder.WriteString(", ")
	builder.WriteString("stripe_customer_id=")
	builder.WriteString(os.StripeCustomerID)
	builder.WriteString(", ")
	if v := os.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", os.Features))
	builder.WriteByte(')')
	return builder.String()
}

// OrgSubscriptions is a parsable slice of OrgSubscription.
type OrgSubscriptions []*OrgSubscription
