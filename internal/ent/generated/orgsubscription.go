// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/pkg/models"
)

// OrgSubscription is the model entity for the OrgSubscription schema.
type OrgSubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the stripe subscription id
	StripeSubscriptionID string `json:"stripe_subscription_id,omitempty"`
	// the common name of the product tier the subscription is associated with, e.g. starter tier
	ProductTier string `json:"product_tier,omitempty"`
	// the price of the product tier
	ProductPrice models.Price `json:"product_price,omitempty"`
	// the product id that represents the tier in stripe
	StripeProductTierID string `json:"stripe_product_tier_id,omitempty"`
	// the status of the subscription in stripe -- see https://docs.stripe.com/api/subscriptions/object#subscription_object-status
	StripeSubscriptionStatus string `json:"stripe_subscription_status,omitempty"`
	// indicates if the subscription is active
	Active bool `json:"active,omitempty"`
	// the time the subscription is set to expire; only populated if subscription is cancelled
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// the time the trial is set to expire
	TrialExpiresAt *time.Time `json:"trial_expires_at,omitempty"`
	// number of days until there is a due payment
	DaysUntilDue *string `json:"days_until_due,omitempty"`
	// the features associated with the subscription
	Features []string `json:"features,omitempty"`
	// the feature lookup keys associated with the subscription
	FeatureLookupKeys []string `json:"feature_lookup_keys,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgSubscriptionQuery when eager-loading is set.
	Edges        OrgSubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues

	// SubscriptionURL is the URL to the stripe checkout session
	SubscriptionURL      string            `json:"subscriptionURL,omitempty"`
	ManagePaymentMethods string            `json:"managePaymentMethods,omitempty"`
	Cancellation         string            `json:"cancellation,omitempty"`
	ModuleBillingURLs    map[string]string `json:"moduleBillingURLs,omitempty"`
}

// OrgSubscriptionEdges holds the relations/edges for other nodes in the graph.
type OrgSubscriptionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Modules holds the value of the modules edge.
	Modules []*OrgModule `json:"modules,omitempty"`
	// Products holds the value of the products edge.
	Products []*OrgProduct `json:"products,omitempty"`
	// Prices holds the value of the prices edge.
	Prices []*OrgPrice `json:"prices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedEvents   map[string][]*Event
	namedModules  map[string][]*OrgModule
	namedProducts map[string][]*OrgProduct
	namedPrices   map[string][]*OrgPrice
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgSubscriptionEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e OrgSubscriptionEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// ModulesOrErr returns the Modules value or an error if the edge
// was not loaded in eager-loading.
func (e OrgSubscriptionEdges) ModulesOrErr() ([]*OrgModule, error) {
	if e.loadedTypes[2] {
		return e.Modules, nil
	}
	return nil, &NotLoadedError{edge: "modules"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e OrgSubscriptionEdges) ProductsOrErr() ([]*OrgProduct, error) {
	if e.loadedTypes[3] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// PricesOrErr returns the Prices value or an error if the edge
// was not loaded in eager-loading.
func (e OrgSubscriptionEdges) PricesOrErr() ([]*OrgPrice, error) {
	if e.loadedTypes[4] {
		return e.Prices, nil
	}
	return nil, &NotLoadedError{edge: "prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgsubscription.FieldTags, orgsubscription.FieldProductPrice, orgsubscription.FieldFeatures, orgsubscription.FieldFeatureLookupKeys:
			values[i] = new([]byte)
		case orgsubscription.FieldActive:
			values[i] = new(sql.NullBool)
		case orgsubscription.FieldID, orgsubscription.FieldCreatedBy, orgsubscription.FieldUpdatedBy, orgsubscription.FieldDeletedBy, orgsubscription.FieldOwnerID, orgsubscription.FieldStripeSubscriptionID, orgsubscription.FieldProductTier, orgsubscription.FieldStripeProductTierID, orgsubscription.FieldStripeSubscriptionStatus, orgsubscription.FieldDaysUntilDue:
			values[i] = new(sql.NullString)
		case orgsubscription.FieldCreatedAt, orgsubscription.FieldUpdatedAt, orgsubscription.FieldDeletedAt, orgsubscription.FieldExpiresAt, orgsubscription.FieldTrialExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgSubscription fields.
func (_m *OrgSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgsubscription.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case orgsubscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case orgsubscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case orgsubscription.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case orgsubscription.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case orgsubscription.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case orgsubscription.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case orgsubscription.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case orgsubscription.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case orgsubscription.FieldStripeSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_subscription_id", values[i])
			} else if value.Valid {
				_m.StripeSubscriptionID = value.String
			}
		case orgsubscription.FieldProductTier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_tier", values[i])
			} else if value.Valid {
				_m.ProductTier = value.String
			}
		case orgsubscription.FieldProductPrice:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field product_price", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ProductPrice); err != nil {
					return fmt.Errorf("unmarshal field product_price: %w", err)
				}
			}
		case orgsubscription.FieldStripeProductTierID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_product_tier_id", values[i])
			} else if value.Valid {
				_m.StripeProductTierID = value.String
			}
		case orgsubscription.FieldStripeSubscriptionStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_subscription_status", values[i])
			} else if value.Valid {
				_m.StripeSubscriptionStatus = value.String
			}
		case orgsubscription.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				_m.Active = value.Bool
			}
		case orgsubscription.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = new(time.Time)
				*_m.ExpiresAt = value.Time
			}
		case orgsubscription.FieldTrialExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trial_expires_at", values[i])
			} else if value.Valid {
				_m.TrialExpiresAt = new(time.Time)
				*_m.TrialExpiresAt = value.Time
			}
		case orgsubscription.FieldDaysUntilDue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field days_until_due", values[i])
			} else if value.Valid {
				_m.DaysUntilDue = new(string)
				*_m.DaysUntilDue = value.String
			}
		case orgsubscription.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case orgsubscription.FieldFeatureLookupKeys:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field feature_lookup_keys", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.FeatureLookupKeys); err != nil {
					return fmt.Errorf("unmarshal field feature_lookup_keys: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrgSubscription.
// This includes values selected through modifiers, order, etc.
func (_m *OrgSubscription) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the OrgSubscription entity.
func (_m *OrgSubscription) QueryOwner() *OrganizationQuery {
	return NewOrgSubscriptionClient(_m.config).QueryOwner(_m)
}

// QueryEvents queries the "events" edge of the OrgSubscription entity.
func (_m *OrgSubscription) QueryEvents() *EventQuery {
	return NewOrgSubscriptionClient(_m.config).QueryEvents(_m)
}

// QueryModules queries the "modules" edge of the OrgSubscription entity.
func (_m *OrgSubscription) QueryModules() *OrgModuleQuery {
	return NewOrgSubscriptionClient(_m.config).QueryModules(_m)
}

// QueryProducts queries the "products" edge of the OrgSubscription entity.
func (_m *OrgSubscription) QueryProducts() *OrgProductQuery {
	return NewOrgSubscriptionClient(_m.config).QueryProducts(_m)
}

// QueryPrices queries the "prices" edge of the OrgSubscription entity.
func (_m *OrgSubscription) QueryPrices() *OrgPriceQuery {
	return NewOrgSubscriptionClient(_m.config).QueryPrices(_m)
}

// Update returns a builder for updating this OrgSubscription.
// Note that you need to call OrgSubscription.Unwrap() before calling this method if this OrgSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OrgSubscription) Update() *OrgSubscriptionUpdateOne {
	return NewOrgSubscriptionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OrgSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OrgSubscription) Unwrap() *OrgSubscription {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrgSubscription is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OrgSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("OrgSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("stripe_subscription_id=")
	builder.WriteString(_m.StripeSubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("product_tier=")
	builder.WriteString(_m.ProductTier)
	builder.WriteString(", ")
	builder.WriteString("product_price=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProductPrice))
	builder.WriteString(", ")
	builder.WriteString("stripe_product_tier_id=")
	builder.WriteString(_m.StripeProductTierID)
	builder.WriteString(", ")
	builder.WriteString("stripe_subscription_status=")
	builder.WriteString(_m.StripeSubscriptionStatus)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", _m.Active))
	builder.WriteString(", ")
	if v := _m.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.TrialExpiresAt; v != nil {
		builder.WriteString("trial_expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.DaysUntilDue; v != nil {
		builder.WriteString("days_until_due=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", _m.Features))
	builder.WriteString(", ")
	builder.WriteString("feature_lookup_keys=")
	builder.WriteString(fmt.Sprintf("%v", _m.FeatureLookupKeys))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OrgSubscription) NamedEvents(name string) ([]*Event, error) {
	if _m.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OrgSubscription) appendNamedEvents(name string, edges ...*Event) {
	if _m.Edges.namedEvents == nil {
		_m.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		_m.Edges.namedEvents[name] = []*Event{}
	} else {
		_m.Edges.namedEvents[name] = append(_m.Edges.namedEvents[name], edges...)
	}
}

// NamedModules returns the Modules named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OrgSubscription) NamedModules(name string) ([]*OrgModule, error) {
	if _m.Edges.namedModules == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedModules[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OrgSubscription) appendNamedModules(name string, edges ...*OrgModule) {
	if _m.Edges.namedModules == nil {
		_m.Edges.namedModules = make(map[string][]*OrgModule)
	}
	if len(edges) == 0 {
		_m.Edges.namedModules[name] = []*OrgModule{}
	} else {
		_m.Edges.namedModules[name] = append(_m.Edges.namedModules[name], edges...)
	}
}

// NamedProducts returns the Products named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OrgSubscription) NamedProducts(name string) ([]*OrgProduct, error) {
	if _m.Edges.namedProducts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedProducts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OrgSubscription) appendNamedProducts(name string, edges ...*OrgProduct) {
	if _m.Edges.namedProducts == nil {
		_m.Edges.namedProducts = make(map[string][]*OrgProduct)
	}
	if len(edges) == 0 {
		_m.Edges.namedProducts[name] = []*OrgProduct{}
	} else {
		_m.Edges.namedProducts[name] = append(_m.Edges.namedProducts[name], edges...)
	}
}

// NamedPrices returns the Prices named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OrgSubscription) NamedPrices(name string) ([]*OrgPrice, error) {
	if _m.Edges.namedPrices == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPrices[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OrgSubscription) appendNamedPrices(name string, edges ...*OrgPrice) {
	if _m.Edges.namedPrices == nil {
		_m.Edges.namedPrices = make(map[string][]*OrgPrice)
	}
	if len(edges) == 0 {
		_m.Edges.namedPrices[name] = []*OrgPrice{}
	} else {
		_m.Edges.namedPrices[name] = append(_m.Edges.namedPrices[name], edges...)
	}
}

// OrgSubscriptions is a parsable slice of OrgSubscription.
type OrgSubscriptions []*OrgSubscription
