// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/controlobjectivehistory"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/documentdatahistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/entitlementhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeaturehistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entityhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/eventhistory"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/featurehistory"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/integrationhistory"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicyhistory"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/narrativehistory"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/notehistory"
	"github.com/theopenlane/core/internal/ent/generated/oauthprovider"
	"github.com/theopenlane/core/internal/ent/generated/oauthproviderhistory"
	"github.com/theopenlane/core/internal/ent/generated/ohauthtootoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/organizationsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/standardhistory"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/userhistory"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/webhook"
	"github.com/theopenlane/core/internal/ent/generated/webhookhistory"
)

// Noder wraps the basic Node method.
type Noder interface {
	IsNode()
}

var apitokenImplementors = []string{"APIToken", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*APIToken) IsNode() {}

var actionplanImplementors = []string{"ActionPlan", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ActionPlan) IsNode() {}

var actionplanhistoryImplementors = []string{"ActionPlanHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ActionPlanHistory) IsNode() {}

var contactImplementors = []string{"Contact", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Contact) IsNode() {}

var contacthistoryImplementors = []string{"ContactHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ContactHistory) IsNode() {}

var controlImplementors = []string{"Control", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Control) IsNode() {}

var controlhistoryImplementors = []string{"ControlHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ControlHistory) IsNode() {}

var controlobjectiveImplementors = []string{"ControlObjective", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ControlObjective) IsNode() {}

var controlobjectivehistoryImplementors = []string{"ControlObjectiveHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ControlObjectiveHistory) IsNode() {}

var documentdataImplementors = []string{"DocumentData", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DocumentData) IsNode() {}

var documentdatahistoryImplementors = []string{"DocumentDataHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DocumentDataHistory) IsNode() {}

var entitlementImplementors = []string{"Entitlement", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Entitlement) IsNode() {}

var entitlementhistoryImplementors = []string{"EntitlementHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EntitlementHistory) IsNode() {}

var entitlementplanImplementors = []string{"EntitlementPlan", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EntitlementPlan) IsNode() {}

var entitlementplanfeatureImplementors = []string{"EntitlementPlanFeature", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EntitlementPlanFeature) IsNode() {}

var entitlementplanfeaturehistoryImplementors = []string{"EntitlementPlanFeatureHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EntitlementPlanFeatureHistory) IsNode() {}

var entitlementplanhistoryImplementors = []string{"EntitlementPlanHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EntitlementPlanHistory) IsNode() {}

var entityImplementors = []string{"Entity", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Entity) IsNode() {}

var entityhistoryImplementors = []string{"EntityHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EntityHistory) IsNode() {}

var entitytypeImplementors = []string{"EntityType", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EntityType) IsNode() {}

var entitytypehistoryImplementors = []string{"EntityTypeHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EntityTypeHistory) IsNode() {}

var eventImplementors = []string{"Event", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Event) IsNode() {}

var eventhistoryImplementors = []string{"EventHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EventHistory) IsNode() {}

var featureImplementors = []string{"Feature", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Feature) IsNode() {}

var featurehistoryImplementors = []string{"FeatureHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*FeatureHistory) IsNode() {}

var fileImplementors = []string{"File", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*File) IsNode() {}

var filehistoryImplementors = []string{"FileHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*FileHistory) IsNode() {}

var groupImplementors = []string{"Group", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Group) IsNode() {}

var grouphistoryImplementors = []string{"GroupHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GroupHistory) IsNode() {}

var groupmembershipImplementors = []string{"GroupMembership", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GroupMembership) IsNode() {}

var groupmembershiphistoryImplementors = []string{"GroupMembershipHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GroupMembershipHistory) IsNode() {}

var groupsettingImplementors = []string{"GroupSetting", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GroupSetting) IsNode() {}

var groupsettinghistoryImplementors = []string{"GroupSettingHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GroupSettingHistory) IsNode() {}

var hushImplementors = []string{"Hush", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Hush) IsNode() {}

var hushhistoryImplementors = []string{"HushHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*HushHistory) IsNode() {}

var integrationImplementors = []string{"Integration", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Integration) IsNode() {}

var integrationhistoryImplementors = []string{"IntegrationHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*IntegrationHistory) IsNode() {}

var internalpolicyImplementors = []string{"InternalPolicy", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*InternalPolicy) IsNode() {}

var internalpolicyhistoryImplementors = []string{"InternalPolicyHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*InternalPolicyHistory) IsNode() {}

var inviteImplementors = []string{"Invite", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Invite) IsNode() {}

var narrativeImplementors = []string{"Narrative", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Narrative) IsNode() {}

var narrativehistoryImplementors = []string{"NarrativeHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*NarrativeHistory) IsNode() {}

var noteImplementors = []string{"Note", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Note) IsNode() {}

var notehistoryImplementors = []string{"NoteHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*NoteHistory) IsNode() {}

var oauthproviderImplementors = []string{"OauthProvider", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OauthProvider) IsNode() {}

var oauthproviderhistoryImplementors = []string{"OauthProviderHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OauthProviderHistory) IsNode() {}

var ohauthtootokenImplementors = []string{"OhAuthTooToken", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OhAuthTooToken) IsNode() {}

var orgmembershipImplementors = []string{"OrgMembership", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OrgMembership) IsNode() {}

var orgmembershiphistoryImplementors = []string{"OrgMembershipHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OrgMembershipHistory) IsNode() {}

var organizationImplementors = []string{"Organization", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Organization) IsNode() {}

var organizationhistoryImplementors = []string{"OrganizationHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OrganizationHistory) IsNode() {}

var organizationsettingImplementors = []string{"OrganizationSetting", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OrganizationSetting) IsNode() {}

var organizationsettinghistoryImplementors = []string{"OrganizationSettingHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OrganizationSettingHistory) IsNode() {}

var personalaccesstokenImplementors = []string{"PersonalAccessToken", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PersonalAccessToken) IsNode() {}

var procedureImplementors = []string{"Procedure", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Procedure) IsNode() {}

var procedurehistoryImplementors = []string{"ProcedureHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ProcedureHistory) IsNode() {}

var programImplementors = []string{"Program", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Program) IsNode() {}

var programhistoryImplementors = []string{"ProgramHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ProgramHistory) IsNode() {}

var riskImplementors = []string{"Risk", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Risk) IsNode() {}

var riskhistoryImplementors = []string{"RiskHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*RiskHistory) IsNode() {}

var standardImplementors = []string{"Standard", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Standard) IsNode() {}

var standardhistoryImplementors = []string{"StandardHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*StandardHistory) IsNode() {}

var subcontrolImplementors = []string{"Subcontrol", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Subcontrol) IsNode() {}

var subcontrolhistoryImplementors = []string{"SubcontrolHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*SubcontrolHistory) IsNode() {}

var subscriberImplementors = []string{"Subscriber", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Subscriber) IsNode() {}

var tfasettingImplementors = []string{"TFASetting", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*TFASetting) IsNode() {}

var taskImplementors = []string{"Task", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Task) IsNode() {}

var taskhistoryImplementors = []string{"TaskHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*TaskHistory) IsNode() {}

var templateImplementors = []string{"Template", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Template) IsNode() {}

var templatehistoryImplementors = []string{"TemplateHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*TemplateHistory) IsNode() {}

var userImplementors = []string{"User", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*User) IsNode() {}

var userhistoryImplementors = []string{"UserHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*UserHistory) IsNode() {}

var usersettingImplementors = []string{"UserSetting", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*UserSetting) IsNode() {}

var usersettinghistoryImplementors = []string{"UserSettingHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*UserSettingHistory) IsNode() {}

var webhookImplementors = []string{"Webhook", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Webhook) IsNode() {}

var webhookhistoryImplementors = []string{"WebhookHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*WebhookHistory) IsNode() {}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, string) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, string) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, string) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id string) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id string, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id string) (Noder, error) {
	switch table {
	case apitoken.Table:
		query := c.APIToken.Query().
			Where(apitoken.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, apitokenImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case actionplan.Table:
		query := c.ActionPlan.Query().
			Where(actionplan.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, actionplanImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case actionplanhistory.Table:
		query := c.ActionPlanHistory.Query().
			Where(actionplanhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, actionplanhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case contact.Table:
		query := c.Contact.Query().
			Where(contact.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, contactImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case contacthistory.Table:
		query := c.ContactHistory.Query().
			Where(contacthistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, contacthistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case control.Table:
		query := c.Control.Query().
			Where(control.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, controlImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case controlhistory.Table:
		query := c.ControlHistory.Query().
			Where(controlhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, controlhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case controlobjective.Table:
		query := c.ControlObjective.Query().
			Where(controlobjective.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, controlobjectiveImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case controlobjectivehistory.Table:
		query := c.ControlObjectiveHistory.Query().
			Where(controlobjectivehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, controlobjectivehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case documentdata.Table:
		query := c.DocumentData.Query().
			Where(documentdata.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, documentdataImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case documentdatahistory.Table:
		query := c.DocumentDataHistory.Query().
			Where(documentdatahistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, documentdatahistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entitlement.Table:
		query := c.Entitlement.Query().
			Where(entitlement.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entitlementImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entitlementhistory.Table:
		query := c.EntitlementHistory.Query().
			Where(entitlementhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entitlementhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entitlementplan.Table:
		query := c.EntitlementPlan.Query().
			Where(entitlementplan.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entitlementplanImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entitlementplanfeature.Table:
		query := c.EntitlementPlanFeature.Query().
			Where(entitlementplanfeature.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entitlementplanfeatureImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entitlementplanfeaturehistory.Table:
		query := c.EntitlementPlanFeatureHistory.Query().
			Where(entitlementplanfeaturehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entitlementplanfeaturehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entitlementplanhistory.Table:
		query := c.EntitlementPlanHistory.Query().
			Where(entitlementplanhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entitlementplanhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entity.Table:
		query := c.Entity.Query().
			Where(entity.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entityImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entityhistory.Table:
		query := c.EntityHistory.Query().
			Where(entityhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entityhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entitytype.Table:
		query := c.EntityType.Query().
			Where(entitytype.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entitytypeImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case entitytypehistory.Table:
		query := c.EntityTypeHistory.Query().
			Where(entitytypehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, entitytypehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case event.Table:
		query := c.Event.Query().
			Where(event.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, eventImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case eventhistory.Table:
		query := c.EventHistory.Query().
			Where(eventhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, eventhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case feature.Table:
		query := c.Feature.Query().
			Where(feature.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, featureImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case featurehistory.Table:
		query := c.FeatureHistory.Query().
			Where(featurehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, featurehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case file.Table:
		query := c.File.Query().
			Where(file.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, fileImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case filehistory.Table:
		query := c.FileHistory.Query().
			Where(filehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, filehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case group.Table:
		query := c.Group.Query().
			Where(group.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case grouphistory.Table:
		query := c.GroupHistory.Query().
			Where(grouphistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, grouphistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case groupmembership.Table:
		query := c.GroupMembership.Query().
			Where(groupmembership.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupmembershipImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case groupmembershiphistory.Table:
		query := c.GroupMembershipHistory.Query().
			Where(groupmembershiphistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupmembershiphistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case groupsetting.Table:
		query := c.GroupSetting.Query().
			Where(groupsetting.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupsettingImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case groupsettinghistory.Table:
		query := c.GroupSettingHistory.Query().
			Where(groupsettinghistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupsettinghistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case hush.Table:
		query := c.Hush.Query().
			Where(hush.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, hushImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case hushhistory.Table:
		query := c.HushHistory.Query().
			Where(hushhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, hushhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case integration.Table:
		query := c.Integration.Query().
			Where(integration.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, integrationImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case integrationhistory.Table:
		query := c.IntegrationHistory.Query().
			Where(integrationhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, integrationhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case internalpolicy.Table:
		query := c.InternalPolicy.Query().
			Where(internalpolicy.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, internalpolicyImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case internalpolicyhistory.Table:
		query := c.InternalPolicyHistory.Query().
			Where(internalpolicyhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, internalpolicyhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case invite.Table:
		query := c.Invite.Query().
			Where(invite.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, inviteImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case narrative.Table:
		query := c.Narrative.Query().
			Where(narrative.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, narrativeImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case narrativehistory.Table:
		query := c.NarrativeHistory.Query().
			Where(narrativehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, narrativehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case note.Table:
		query := c.Note.Query().
			Where(note.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, noteImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case notehistory.Table:
		query := c.NoteHistory.Query().
			Where(notehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, notehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case oauthprovider.Table:
		query := c.OauthProvider.Query().
			Where(oauthprovider.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, oauthproviderImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case oauthproviderhistory.Table:
		query := c.OauthProviderHistory.Query().
			Where(oauthproviderhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, oauthproviderhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case ohauthtootoken.Table:
		query := c.OhAuthTooToken.Query().
			Where(ohauthtootoken.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, ohauthtootokenImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case orgmembership.Table:
		query := c.OrgMembership.Query().
			Where(orgmembership.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, orgmembershipImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case orgmembershiphistory.Table:
		query := c.OrgMembershipHistory.Query().
			Where(orgmembershiphistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, orgmembershiphistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case organization.Table:
		query := c.Organization.Query().
			Where(organization.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, organizationImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case organizationhistory.Table:
		query := c.OrganizationHistory.Query().
			Where(organizationhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, organizationhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case organizationsetting.Table:
		query := c.OrganizationSetting.Query().
			Where(organizationsetting.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, organizationsettingImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case organizationsettinghistory.Table:
		query := c.OrganizationSettingHistory.Query().
			Where(organizationsettinghistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, organizationsettinghistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case personalaccesstoken.Table:
		query := c.PersonalAccessToken.Query().
			Where(personalaccesstoken.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, personalaccesstokenImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case procedure.Table:
		query := c.Procedure.Query().
			Where(procedure.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, procedureImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case procedurehistory.Table:
		query := c.ProcedureHistory.Query().
			Where(procedurehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, procedurehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case program.Table:
		query := c.Program.Query().
			Where(program.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, programImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case programhistory.Table:
		query := c.ProgramHistory.Query().
			Where(programhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, programhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case risk.Table:
		query := c.Risk.Query().
			Where(risk.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, riskImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case riskhistory.Table:
		query := c.RiskHistory.Query().
			Where(riskhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, riskhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case standard.Table:
		query := c.Standard.Query().
			Where(standard.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, standardImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case standardhistory.Table:
		query := c.StandardHistory.Query().
			Where(standardhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, standardhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case subcontrol.Table:
		query := c.Subcontrol.Query().
			Where(subcontrol.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, subcontrolImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case subcontrolhistory.Table:
		query := c.SubcontrolHistory.Query().
			Where(subcontrolhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, subcontrolhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case subscriber.Table:
		query := c.Subscriber.Query().
			Where(subscriber.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, subscriberImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case tfasetting.Table:
		query := c.TFASetting.Query().
			Where(tfasetting.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, tfasettingImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case task.Table:
		query := c.Task.Query().
			Where(task.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, taskImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case taskhistory.Table:
		query := c.TaskHistory.Query().
			Where(taskhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, taskhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case template.Table:
		query := c.Template.Query().
			Where(template.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, templateImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case templatehistory.Table:
		query := c.TemplateHistory.Query().
			Where(templatehistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, templatehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case user.Table:
		query := c.User.Query().
			Where(user.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, userImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case userhistory.Table:
		query := c.UserHistory.Query().
			Where(userhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, userhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case usersetting.Table:
		query := c.UserSetting.Query().
			Where(usersetting.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, usersettingImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case usersettinghistory.Table:
		query := c.UserSettingHistory.Query().
			Where(usersettinghistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, usersettinghistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case webhook.Table:
		query := c.Webhook.Query().
			Where(webhook.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, webhookImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case webhookhistory.Table:
		query := c.WebhookHistory.Query().
			Where(webhookhistory.ID(id))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, webhookhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []string, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]string)
	id2idx := make(map[string][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []string) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[string][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case apitoken.Table:
		query := c.APIToken.Query().
			Where(apitoken.IDIn(ids...))
		query, err := query.CollectFields(ctx, apitokenImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case actionplan.Table:
		query := c.ActionPlan.Query().
			Where(actionplan.IDIn(ids...))
		query, err := query.CollectFields(ctx, actionplanImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case actionplanhistory.Table:
		query := c.ActionPlanHistory.Query().
			Where(actionplanhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, actionplanhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case contact.Table:
		query := c.Contact.Query().
			Where(contact.IDIn(ids...))
		query, err := query.CollectFields(ctx, contactImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case contacthistory.Table:
		query := c.ContactHistory.Query().
			Where(contacthistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, contacthistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case control.Table:
		query := c.Control.Query().
			Where(control.IDIn(ids...))
		query, err := query.CollectFields(ctx, controlImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case controlhistory.Table:
		query := c.ControlHistory.Query().
			Where(controlhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, controlhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case controlobjective.Table:
		query := c.ControlObjective.Query().
			Where(controlobjective.IDIn(ids...))
		query, err := query.CollectFields(ctx, controlobjectiveImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case controlobjectivehistory.Table:
		query := c.ControlObjectiveHistory.Query().
			Where(controlobjectivehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, controlobjectivehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case documentdata.Table:
		query := c.DocumentData.Query().
			Where(documentdata.IDIn(ids...))
		query, err := query.CollectFields(ctx, documentdataImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case documentdatahistory.Table:
		query := c.DocumentDataHistory.Query().
			Where(documentdatahistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, documentdatahistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entitlement.Table:
		query := c.Entitlement.Query().
			Where(entitlement.IDIn(ids...))
		query, err := query.CollectFields(ctx, entitlementImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entitlementhistory.Table:
		query := c.EntitlementHistory.Query().
			Where(entitlementhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, entitlementhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entitlementplan.Table:
		query := c.EntitlementPlan.Query().
			Where(entitlementplan.IDIn(ids...))
		query, err := query.CollectFields(ctx, entitlementplanImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entitlementplanfeature.Table:
		query := c.EntitlementPlanFeature.Query().
			Where(entitlementplanfeature.IDIn(ids...))
		query, err := query.CollectFields(ctx, entitlementplanfeatureImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entitlementplanfeaturehistory.Table:
		query := c.EntitlementPlanFeatureHistory.Query().
			Where(entitlementplanfeaturehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, entitlementplanfeaturehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entitlementplanhistory.Table:
		query := c.EntitlementPlanHistory.Query().
			Where(entitlementplanhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, entitlementplanhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entity.Table:
		query := c.Entity.Query().
			Where(entity.IDIn(ids...))
		query, err := query.CollectFields(ctx, entityImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entityhistory.Table:
		query := c.EntityHistory.Query().
			Where(entityhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, entityhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entitytype.Table:
		query := c.EntityType.Query().
			Where(entitytype.IDIn(ids...))
		query, err := query.CollectFields(ctx, entitytypeImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case entitytypehistory.Table:
		query := c.EntityTypeHistory.Query().
			Where(entitytypehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, entitytypehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case event.Table:
		query := c.Event.Query().
			Where(event.IDIn(ids...))
		query, err := query.CollectFields(ctx, eventImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case eventhistory.Table:
		query := c.EventHistory.Query().
			Where(eventhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, eventhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case feature.Table:
		query := c.Feature.Query().
			Where(feature.IDIn(ids...))
		query, err := query.CollectFields(ctx, featureImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case featurehistory.Table:
		query := c.FeatureHistory.Query().
			Where(featurehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, featurehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case file.Table:
		query := c.File.Query().
			Where(file.IDIn(ids...))
		query, err := query.CollectFields(ctx, fileImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case filehistory.Table:
		query := c.FileHistory.Query().
			Where(filehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, filehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case group.Table:
		query := c.Group.Query().
			Where(group.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case grouphistory.Table:
		query := c.GroupHistory.Query().
			Where(grouphistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, grouphistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case groupmembership.Table:
		query := c.GroupMembership.Query().
			Where(groupmembership.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupmembershipImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case groupmembershiphistory.Table:
		query := c.GroupMembershipHistory.Query().
			Where(groupmembershiphistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupmembershiphistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case groupsetting.Table:
		query := c.GroupSetting.Query().
			Where(groupsetting.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupsettingImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case groupsettinghistory.Table:
		query := c.GroupSettingHistory.Query().
			Where(groupsettinghistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupsettinghistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hush.Table:
		query := c.Hush.Query().
			Where(hush.IDIn(ids...))
		query, err := query.CollectFields(ctx, hushImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hushhistory.Table:
		query := c.HushHistory.Query().
			Where(hushhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, hushhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case integration.Table:
		query := c.Integration.Query().
			Where(integration.IDIn(ids...))
		query, err := query.CollectFields(ctx, integrationImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case integrationhistory.Table:
		query := c.IntegrationHistory.Query().
			Where(integrationhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, integrationhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case internalpolicy.Table:
		query := c.InternalPolicy.Query().
			Where(internalpolicy.IDIn(ids...))
		query, err := query.CollectFields(ctx, internalpolicyImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case internalpolicyhistory.Table:
		query := c.InternalPolicyHistory.Query().
			Where(internalpolicyhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, internalpolicyhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case invite.Table:
		query := c.Invite.Query().
			Where(invite.IDIn(ids...))
		query, err := query.CollectFields(ctx, inviteImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case narrative.Table:
		query := c.Narrative.Query().
			Where(narrative.IDIn(ids...))
		query, err := query.CollectFields(ctx, narrativeImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case narrativehistory.Table:
		query := c.NarrativeHistory.Query().
			Where(narrativehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, narrativehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case note.Table:
		query := c.Note.Query().
			Where(note.IDIn(ids...))
		query, err := query.CollectFields(ctx, noteImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case notehistory.Table:
		query := c.NoteHistory.Query().
			Where(notehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, notehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oauthprovider.Table:
		query := c.OauthProvider.Query().
			Where(oauthprovider.IDIn(ids...))
		query, err := query.CollectFields(ctx, oauthproviderImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oauthproviderhistory.Table:
		query := c.OauthProviderHistory.Query().
			Where(oauthproviderhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, oauthproviderhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case ohauthtootoken.Table:
		query := c.OhAuthTooToken.Query().
			Where(ohauthtootoken.IDIn(ids...))
		query, err := query.CollectFields(ctx, ohauthtootokenImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case orgmembership.Table:
		query := c.OrgMembership.Query().
			Where(orgmembership.IDIn(ids...))
		query, err := query.CollectFields(ctx, orgmembershipImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case orgmembershiphistory.Table:
		query := c.OrgMembershipHistory.Query().
			Where(orgmembershiphistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, orgmembershiphistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case organization.Table:
		query := c.Organization.Query().
			Where(organization.IDIn(ids...))
		query, err := query.CollectFields(ctx, organizationImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case organizationhistory.Table:
		query := c.OrganizationHistory.Query().
			Where(organizationhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, organizationhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case organizationsetting.Table:
		query := c.OrganizationSetting.Query().
			Where(organizationsetting.IDIn(ids...))
		query, err := query.CollectFields(ctx, organizationsettingImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case organizationsettinghistory.Table:
		query := c.OrganizationSettingHistory.Query().
			Where(organizationsettinghistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, organizationsettinghistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case personalaccesstoken.Table:
		query := c.PersonalAccessToken.Query().
			Where(personalaccesstoken.IDIn(ids...))
		query, err := query.CollectFields(ctx, personalaccesstokenImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case procedure.Table:
		query := c.Procedure.Query().
			Where(procedure.IDIn(ids...))
		query, err := query.CollectFields(ctx, procedureImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case procedurehistory.Table:
		query := c.ProcedureHistory.Query().
			Where(procedurehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, procedurehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case program.Table:
		query := c.Program.Query().
			Where(program.IDIn(ids...))
		query, err := query.CollectFields(ctx, programImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case programhistory.Table:
		query := c.ProgramHistory.Query().
			Where(programhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, programhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case risk.Table:
		query := c.Risk.Query().
			Where(risk.IDIn(ids...))
		query, err := query.CollectFields(ctx, riskImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case riskhistory.Table:
		query := c.RiskHistory.Query().
			Where(riskhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, riskhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case standard.Table:
		query := c.Standard.Query().
			Where(standard.IDIn(ids...))
		query, err := query.CollectFields(ctx, standardImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case standardhistory.Table:
		query := c.StandardHistory.Query().
			Where(standardhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, standardhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case subcontrol.Table:
		query := c.Subcontrol.Query().
			Where(subcontrol.IDIn(ids...))
		query, err := query.CollectFields(ctx, subcontrolImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case subcontrolhistory.Table:
		query := c.SubcontrolHistory.Query().
			Where(subcontrolhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, subcontrolhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case subscriber.Table:
		query := c.Subscriber.Query().
			Where(subscriber.IDIn(ids...))
		query, err := query.CollectFields(ctx, subscriberImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case tfasetting.Table:
		query := c.TFASetting.Query().
			Where(tfasetting.IDIn(ids...))
		query, err := query.CollectFields(ctx, tfasettingImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case task.Table:
		query := c.Task.Query().
			Where(task.IDIn(ids...))
		query, err := query.CollectFields(ctx, taskImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case taskhistory.Table:
		query := c.TaskHistory.Query().
			Where(taskhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, taskhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case template.Table:
		query := c.Template.Query().
			Where(template.IDIn(ids...))
		query, err := query.CollectFields(ctx, templateImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case templatehistory.Table:
		query := c.TemplateHistory.Query().
			Where(templatehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, templatehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		query := c.User.Query().
			Where(user.IDIn(ids...))
		query, err := query.CollectFields(ctx, userImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case userhistory.Table:
		query := c.UserHistory.Query().
			Where(userhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, userhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case usersetting.Table:
		query := c.UserSetting.Query().
			Where(usersetting.IDIn(ids...))
		query, err := query.CollectFields(ctx, usersettingImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case usersettinghistory.Table:
		query := c.UserSettingHistory.Query().
			Where(usersettinghistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, usersettinghistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case webhook.Table:
		query := c.Webhook.Query().
			Where(webhook.IDIn(ids...))
		query, err := query.CollectFields(ctx, webhookImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case webhookhistory.Table:
		query := c.WebhookHistory.Query().
			Where(webhookhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, webhookhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
