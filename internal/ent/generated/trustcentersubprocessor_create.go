// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"
)

// TrustCenterSubprocessorCreate is the builder for creating a TrustCenterSubprocessor entity.
type TrustCenterSubprocessorCreate struct {
	config
	mutation *TrustCenterSubprocessorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tcsc *TrustCenterSubprocessorCreate) SetCreatedAt(t time.Time) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetCreatedAt(t)
	return tcsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcsc *TrustCenterSubprocessorCreate) SetNillableCreatedAt(t *time.Time) *TrustCenterSubprocessorCreate {
	if t != nil {
		tcsc.SetCreatedAt(*t)
	}
	return tcsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcsc *TrustCenterSubprocessorCreate) SetUpdatedAt(t time.Time) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetUpdatedAt(t)
	return tcsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcsc *TrustCenterSubprocessorCreate) SetNillableUpdatedAt(t *time.Time) *TrustCenterSubprocessorCreate {
	if t != nil {
		tcsc.SetUpdatedAt(*t)
	}
	return tcsc
}

// SetCreatedBy sets the "created_by" field.
func (tcsc *TrustCenterSubprocessorCreate) SetCreatedBy(s string) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetCreatedBy(s)
	return tcsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tcsc *TrustCenterSubprocessorCreate) SetNillableCreatedBy(s *string) *TrustCenterSubprocessorCreate {
	if s != nil {
		tcsc.SetCreatedBy(*s)
	}
	return tcsc
}

// SetUpdatedBy sets the "updated_by" field.
func (tcsc *TrustCenterSubprocessorCreate) SetUpdatedBy(s string) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetUpdatedBy(s)
	return tcsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcsc *TrustCenterSubprocessorCreate) SetNillableUpdatedBy(s *string) *TrustCenterSubprocessorCreate {
	if s != nil {
		tcsc.SetUpdatedBy(*s)
	}
	return tcsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tcsc *TrustCenterSubprocessorCreate) SetDeletedAt(t time.Time) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetDeletedAt(t)
	return tcsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcsc *TrustCenterSubprocessorCreate) SetNillableDeletedAt(t *time.Time) *TrustCenterSubprocessorCreate {
	if t != nil {
		tcsc.SetDeletedAt(*t)
	}
	return tcsc
}

// SetDeletedBy sets the "deleted_by" field.
func (tcsc *TrustCenterSubprocessorCreate) SetDeletedBy(s string) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetDeletedBy(s)
	return tcsc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcsc *TrustCenterSubprocessorCreate) SetNillableDeletedBy(s *string) *TrustCenterSubprocessorCreate {
	if s != nil {
		tcsc.SetDeletedBy(*s)
	}
	return tcsc
}

// SetSubprocessorID sets the "subprocessor_id" field.
func (tcsc *TrustCenterSubprocessorCreate) SetSubprocessorID(s string) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetSubprocessorID(s)
	return tcsc
}

// SetTrustCenterID sets the "trust_center_id" field.
func (tcsc *TrustCenterSubprocessorCreate) SetTrustCenterID(s string) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetTrustCenterID(s)
	return tcsc
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (tcsc *TrustCenterSubprocessorCreate) SetNillableTrustCenterID(s *string) *TrustCenterSubprocessorCreate {
	if s != nil {
		tcsc.SetTrustCenterID(*s)
	}
	return tcsc
}

// SetCountries sets the "countries" field.
func (tcsc *TrustCenterSubprocessorCreate) SetCountries(s []string) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetCountries(s)
	return tcsc
}

// SetCategory sets the "category" field.
func (tcsc *TrustCenterSubprocessorCreate) SetCategory(s string) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetCategory(s)
	return tcsc
}

// SetID sets the "id" field.
func (tcsc *TrustCenterSubprocessorCreate) SetID(s string) *TrustCenterSubprocessorCreate {
	tcsc.mutation.SetID(s)
	return tcsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcsc *TrustCenterSubprocessorCreate) SetNillableID(s *string) *TrustCenterSubprocessorCreate {
	if s != nil {
		tcsc.SetID(*s)
	}
	return tcsc
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (tcsc *TrustCenterSubprocessorCreate) SetTrustCenter(t *TrustCenter) *TrustCenterSubprocessorCreate {
	return tcsc.SetTrustCenterID(t.ID)
}

// SetSubprocessor sets the "subprocessor" edge to the Subprocessor entity.
func (tcsc *TrustCenterSubprocessorCreate) SetSubprocessor(s *Subprocessor) *TrustCenterSubprocessorCreate {
	return tcsc.SetSubprocessorID(s.ID)
}

// Mutation returns the TrustCenterSubprocessorMutation object of the builder.
func (tcsc *TrustCenterSubprocessorCreate) Mutation() *TrustCenterSubprocessorMutation {
	return tcsc.mutation
}

// Save creates the TrustCenterSubprocessor in the database.
func (tcsc *TrustCenterSubprocessorCreate) Save(ctx context.Context) (*TrustCenterSubprocessor, error) {
	if err := tcsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tcsc.sqlSave, tcsc.mutation, tcsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcsc *TrustCenterSubprocessorCreate) SaveX(ctx context.Context) *TrustCenterSubprocessor {
	v, err := tcsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcsc *TrustCenterSubprocessorCreate) Exec(ctx context.Context) error {
	_, err := tcsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcsc *TrustCenterSubprocessorCreate) ExecX(ctx context.Context) {
	if err := tcsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcsc *TrustCenterSubprocessorCreate) defaults() error {
	if _, ok := tcsc.mutation.CreatedAt(); !ok {
		if trustcentersubprocessor.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersubprocessor.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersubprocessor.DefaultCreatedAt()
		tcsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcsc.mutation.UpdatedAt(); !ok {
		if trustcentersubprocessor.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersubprocessor.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersubprocessor.DefaultUpdatedAt()
		tcsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcsc.mutation.ID(); !ok {
		if trustcentersubprocessor.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized trustcentersubprocessor.DefaultID (forgotten import generated/runtime?)")
		}
		v := trustcentersubprocessor.DefaultID()
		tcsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcsc *TrustCenterSubprocessorCreate) check() error {
	if _, ok := tcsc.mutation.SubprocessorID(); !ok {
		return &ValidationError{Name: "subprocessor_id", err: errors.New(`generated: missing required field "TrustCenterSubprocessor.subprocessor_id"`)}
	}
	if v, ok := tcsc.mutation.SubprocessorID(); ok {
		if err := trustcentersubprocessor.SubprocessorIDValidator(v); err != nil {
			return &ValidationError{Name: "subprocessor_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.subprocessor_id": %w`, err)}
		}
	}
	if v, ok := tcsc.mutation.TrustCenterID(); ok {
		if err := trustcentersubprocessor.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.trust_center_id": %w`, err)}
		}
	}
	if _, ok := tcsc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`generated: missing required field "TrustCenterSubprocessor.category"`)}
	}
	if v, ok := tcsc.mutation.Category(); ok {
		if err := trustcentersubprocessor.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.category": %w`, err)}
		}
	}
	if len(tcsc.mutation.SubprocessorIDs()) == 0 {
		return &ValidationError{Name: "subprocessor", err: errors.New(`generated: missing required edge "TrustCenterSubprocessor.subprocessor"`)}
	}
	return nil
}

func (tcsc *TrustCenterSubprocessorCreate) sqlSave(ctx context.Context) (*TrustCenterSubprocessor, error) {
	if err := tcsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TrustCenterSubprocessor.ID type: %T", _spec.ID.Value)
		}
	}
	tcsc.mutation.id = &_node.ID
	tcsc.mutation.done = true
	return _node, nil
}

func (tcsc *TrustCenterSubprocessorCreate) createSpec() (*TrustCenterSubprocessor, *sqlgraph.CreateSpec) {
	var (
		_node = &TrustCenterSubprocessor{config: tcsc.config}
		_spec = sqlgraph.NewCreateSpec(trustcentersubprocessor.Table, sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString))
	)
	_spec.Schema = tcsc.schemaConfig.TrustCenterSubprocessor
	if id, ok := tcsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcsc.mutation.CreatedAt(); ok {
		_spec.SetField(trustcentersubprocessor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcsc.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersubprocessor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcsc.mutation.CreatedBy(); ok {
		_spec.SetField(trustcentersubprocessor.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tcsc.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersubprocessor.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tcsc.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersubprocessor.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tcsc.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersubprocessor.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := tcsc.mutation.Countries(); ok {
		_spec.SetField(trustcentersubprocessor.FieldCountries, field.TypeJSON, value)
		_node.Countries = value
	}
	if value, ok := tcsc.mutation.Category(); ok {
		_spec.SetField(trustcentersubprocessor.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if nodes := tcsc.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.TrustCenterTable,
			Columns: []string{trustcentersubprocessor.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcsc.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TrustCenterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcsc.mutation.SubprocessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.SubprocessorTable,
			Columns: []string{trustcentersubprocessor.SubprocessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcsc.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubprocessorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrustCenterSubprocessorCreateBulk is the builder for creating many TrustCenterSubprocessor entities in bulk.
type TrustCenterSubprocessorCreateBulk struct {
	config
	err      error
	builders []*TrustCenterSubprocessorCreate
}

// Save creates the TrustCenterSubprocessor entities in the database.
func (tcscb *TrustCenterSubprocessorCreateBulk) Save(ctx context.Context) ([]*TrustCenterSubprocessor, error) {
	if tcscb.err != nil {
		return nil, tcscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcscb.builders))
	nodes := make([]*TrustCenterSubprocessor, len(tcscb.builders))
	mutators := make([]Mutator, len(tcscb.builders))
	for i := range tcscb.builders {
		func(i int, root context.Context) {
			builder := tcscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrustCenterSubprocessorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcscb *TrustCenterSubprocessorCreateBulk) SaveX(ctx context.Context) []*TrustCenterSubprocessor {
	v, err := tcscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcscb *TrustCenterSubprocessorCreateBulk) Exec(ctx context.Context) error {
	_, err := tcscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcscb *TrustCenterSubprocessorCreateBulk) ExecX(ctx context.Context) {
	if err := tcscb.Exec(ctx); err != nil {
		panic(err)
	}
}
