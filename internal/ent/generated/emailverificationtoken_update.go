// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/emailverificationtoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EmailVerificationTokenUpdate is the builder for updating EmailVerificationToken entities.
type EmailVerificationTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *EmailVerificationTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EmailVerificationTokenUpdate builder.
func (evtu *EmailVerificationTokenUpdate) Where(ps ...predicate.EmailVerificationToken) *EmailVerificationTokenUpdate {
	evtu.mutation.Where(ps...)
	return evtu
}

// SetUpdatedAt sets the "updated_at" field.
func (evtu *EmailVerificationTokenUpdate) SetUpdatedAt(t time.Time) *EmailVerificationTokenUpdate {
	evtu.mutation.SetUpdatedAt(t)
	return evtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (evtu *EmailVerificationTokenUpdate) ClearUpdatedAt() *EmailVerificationTokenUpdate {
	evtu.mutation.ClearUpdatedAt()
	return evtu
}

// SetUpdatedBy sets the "updated_by" field.
func (evtu *EmailVerificationTokenUpdate) SetUpdatedBy(s string) *EmailVerificationTokenUpdate {
	evtu.mutation.SetUpdatedBy(s)
	return evtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (evtu *EmailVerificationTokenUpdate) SetNillableUpdatedBy(s *string) *EmailVerificationTokenUpdate {
	if s != nil {
		evtu.SetUpdatedBy(*s)
	}
	return evtu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (evtu *EmailVerificationTokenUpdate) ClearUpdatedBy() *EmailVerificationTokenUpdate {
	evtu.mutation.ClearUpdatedBy()
	return evtu
}

// SetDeletedAt sets the "deleted_at" field.
func (evtu *EmailVerificationTokenUpdate) SetDeletedAt(t time.Time) *EmailVerificationTokenUpdate {
	evtu.mutation.SetDeletedAt(t)
	return evtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (evtu *EmailVerificationTokenUpdate) SetNillableDeletedAt(t *time.Time) *EmailVerificationTokenUpdate {
	if t != nil {
		evtu.SetDeletedAt(*t)
	}
	return evtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (evtu *EmailVerificationTokenUpdate) ClearDeletedAt() *EmailVerificationTokenUpdate {
	evtu.mutation.ClearDeletedAt()
	return evtu
}

// SetDeletedBy sets the "deleted_by" field.
func (evtu *EmailVerificationTokenUpdate) SetDeletedBy(s string) *EmailVerificationTokenUpdate {
	evtu.mutation.SetDeletedBy(s)
	return evtu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (evtu *EmailVerificationTokenUpdate) SetNillableDeletedBy(s *string) *EmailVerificationTokenUpdate {
	if s != nil {
		evtu.SetDeletedBy(*s)
	}
	return evtu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (evtu *EmailVerificationTokenUpdate) ClearDeletedBy() *EmailVerificationTokenUpdate {
	evtu.mutation.ClearDeletedBy()
	return evtu
}

// SetOwnerID sets the "owner_id" field.
func (evtu *EmailVerificationTokenUpdate) SetOwnerID(s string) *EmailVerificationTokenUpdate {
	evtu.mutation.SetOwnerID(s)
	return evtu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (evtu *EmailVerificationTokenUpdate) SetNillableOwnerID(s *string) *EmailVerificationTokenUpdate {
	if s != nil {
		evtu.SetOwnerID(*s)
	}
	return evtu
}

// SetToken sets the "token" field.
func (evtu *EmailVerificationTokenUpdate) SetToken(s string) *EmailVerificationTokenUpdate {
	evtu.mutation.SetToken(s)
	return evtu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (evtu *EmailVerificationTokenUpdate) SetNillableToken(s *string) *EmailVerificationTokenUpdate {
	if s != nil {
		evtu.SetToken(*s)
	}
	return evtu
}

// SetTTL sets the "ttl" field.
func (evtu *EmailVerificationTokenUpdate) SetTTL(t time.Time) *EmailVerificationTokenUpdate {
	evtu.mutation.SetTTL(t)
	return evtu
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (evtu *EmailVerificationTokenUpdate) SetNillableTTL(t *time.Time) *EmailVerificationTokenUpdate {
	if t != nil {
		evtu.SetTTL(*t)
	}
	return evtu
}

// SetEmail sets the "email" field.
func (evtu *EmailVerificationTokenUpdate) SetEmail(s string) *EmailVerificationTokenUpdate {
	evtu.mutation.SetEmail(s)
	return evtu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (evtu *EmailVerificationTokenUpdate) SetNillableEmail(s *string) *EmailVerificationTokenUpdate {
	if s != nil {
		evtu.SetEmail(*s)
	}
	return evtu
}

// SetSecret sets the "secret" field.
func (evtu *EmailVerificationTokenUpdate) SetSecret(b []byte) *EmailVerificationTokenUpdate {
	evtu.mutation.SetSecret(b)
	return evtu
}

// SetOwner sets the "owner" edge to the User entity.
func (evtu *EmailVerificationTokenUpdate) SetOwner(u *User) *EmailVerificationTokenUpdate {
	return evtu.SetOwnerID(u.ID)
}

// Mutation returns the EmailVerificationTokenMutation object of the builder.
func (evtu *EmailVerificationTokenUpdate) Mutation() *EmailVerificationTokenMutation {
	return evtu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (evtu *EmailVerificationTokenUpdate) ClearOwner() *EmailVerificationTokenUpdate {
	evtu.mutation.ClearOwner()
	return evtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (evtu *EmailVerificationTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := evtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, evtu.sqlSave, evtu.mutation, evtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evtu *EmailVerificationTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := evtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (evtu *EmailVerificationTokenUpdate) Exec(ctx context.Context) error {
	_, err := evtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evtu *EmailVerificationTokenUpdate) ExecX(ctx context.Context) {
	if err := evtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evtu *EmailVerificationTokenUpdate) defaults() error {
	if _, ok := evtu.mutation.UpdatedAt(); !ok && !evtu.mutation.UpdatedAtCleared() {
		if emailverificationtoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized emailverificationtoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := emailverificationtoken.UpdateDefaultUpdatedAt()
		evtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (evtu *EmailVerificationTokenUpdate) check() error {
	if v, ok := evtu.mutation.Token(); ok {
		if err := emailverificationtoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationToken.token": %w`, err)}
		}
	}
	if v, ok := evtu.mutation.Email(); ok {
		if err := emailverificationtoken.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationToken.email": %w`, err)}
		}
	}
	if v, ok := evtu.mutation.Secret(); ok {
		if err := emailverificationtoken.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationToken.secret": %w`, err)}
		}
	}
	if evtu.mutation.OwnerCleared() && len(evtu.mutation.OwnerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "EmailVerificationToken.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (evtu *EmailVerificationTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EmailVerificationTokenUpdate {
	evtu.modifiers = append(evtu.modifiers, modifiers...)
	return evtu
}

func (evtu *EmailVerificationTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := evtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailverificationtoken.Table, emailverificationtoken.Columns, sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString))
	if ps := evtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if evtu.mutation.CreatedAtCleared() {
		_spec.ClearField(emailverificationtoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := evtu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailverificationtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if evtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(emailverificationtoken.FieldUpdatedAt, field.TypeTime)
	}
	if evtu.mutation.CreatedByCleared() {
		_spec.ClearField(emailverificationtoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := evtu.mutation.UpdatedBy(); ok {
		_spec.SetField(emailverificationtoken.FieldUpdatedBy, field.TypeString, value)
	}
	if evtu.mutation.UpdatedByCleared() {
		_spec.ClearField(emailverificationtoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := evtu.mutation.DeletedAt(); ok {
		_spec.SetField(emailverificationtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if evtu.mutation.DeletedAtCleared() {
		_spec.ClearField(emailverificationtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := evtu.mutation.DeletedBy(); ok {
		_spec.SetField(emailverificationtoken.FieldDeletedBy, field.TypeString, value)
	}
	if evtu.mutation.DeletedByCleared() {
		_spec.ClearField(emailverificationtoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := evtu.mutation.Token(); ok {
		_spec.SetField(emailverificationtoken.FieldToken, field.TypeString, value)
	}
	if value, ok := evtu.mutation.TTL(); ok {
		_spec.SetField(emailverificationtoken.FieldTTL, field.TypeTime, value)
	}
	if value, ok := evtu.mutation.Email(); ok {
		_spec.SetField(emailverificationtoken.FieldEmail, field.TypeString, value)
	}
	if value, ok := evtu.mutation.Secret(); ok {
		_spec.SetField(emailverificationtoken.FieldSecret, field.TypeBytes, value)
	}
	if evtu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailverificationtoken.OwnerTable,
			Columns: []string{emailverificationtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = evtu.schemaConfig.EmailVerificationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := evtu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailverificationtoken.OwnerTable,
			Columns: []string{emailverificationtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = evtu.schemaConfig.EmailVerificationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = evtu.schemaConfig.EmailVerificationToken
	ctx = internal.NewSchemaConfigContext(ctx, evtu.schemaConfig)
	_spec.AddModifiers(evtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, evtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailverificationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	evtu.mutation.done = true
	return n, nil
}

// EmailVerificationTokenUpdateOne is the builder for updating a single EmailVerificationToken entity.
type EmailVerificationTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EmailVerificationTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetUpdatedAt(t time.Time) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetUpdatedAt(t)
	return evtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (evtuo *EmailVerificationTokenUpdateOne) ClearUpdatedAt() *EmailVerificationTokenUpdateOne {
	evtuo.mutation.ClearUpdatedAt()
	return evtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetUpdatedBy(s string) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetUpdatedBy(s)
	return evtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (evtuo *EmailVerificationTokenUpdateOne) SetNillableUpdatedBy(s *string) *EmailVerificationTokenUpdateOne {
	if s != nil {
		evtuo.SetUpdatedBy(*s)
	}
	return evtuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (evtuo *EmailVerificationTokenUpdateOne) ClearUpdatedBy() *EmailVerificationTokenUpdateOne {
	evtuo.mutation.ClearUpdatedBy()
	return evtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetDeletedAt(t time.Time) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetDeletedAt(t)
	return evtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (evtuo *EmailVerificationTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *EmailVerificationTokenUpdateOne {
	if t != nil {
		evtuo.SetDeletedAt(*t)
	}
	return evtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (evtuo *EmailVerificationTokenUpdateOne) ClearDeletedAt() *EmailVerificationTokenUpdateOne {
	evtuo.mutation.ClearDeletedAt()
	return evtuo
}

// SetDeletedBy sets the "deleted_by" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetDeletedBy(s string) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetDeletedBy(s)
	return evtuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (evtuo *EmailVerificationTokenUpdateOne) SetNillableDeletedBy(s *string) *EmailVerificationTokenUpdateOne {
	if s != nil {
		evtuo.SetDeletedBy(*s)
	}
	return evtuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (evtuo *EmailVerificationTokenUpdateOne) ClearDeletedBy() *EmailVerificationTokenUpdateOne {
	evtuo.mutation.ClearDeletedBy()
	return evtuo
}

// SetOwnerID sets the "owner_id" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetOwnerID(s string) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetOwnerID(s)
	return evtuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (evtuo *EmailVerificationTokenUpdateOne) SetNillableOwnerID(s *string) *EmailVerificationTokenUpdateOne {
	if s != nil {
		evtuo.SetOwnerID(*s)
	}
	return evtuo
}

// SetToken sets the "token" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetToken(s string) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetToken(s)
	return evtuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (evtuo *EmailVerificationTokenUpdateOne) SetNillableToken(s *string) *EmailVerificationTokenUpdateOne {
	if s != nil {
		evtuo.SetToken(*s)
	}
	return evtuo
}

// SetTTL sets the "ttl" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetTTL(t time.Time) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetTTL(t)
	return evtuo
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (evtuo *EmailVerificationTokenUpdateOne) SetNillableTTL(t *time.Time) *EmailVerificationTokenUpdateOne {
	if t != nil {
		evtuo.SetTTL(*t)
	}
	return evtuo
}

// SetEmail sets the "email" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetEmail(s string) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetEmail(s)
	return evtuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (evtuo *EmailVerificationTokenUpdateOne) SetNillableEmail(s *string) *EmailVerificationTokenUpdateOne {
	if s != nil {
		evtuo.SetEmail(*s)
	}
	return evtuo
}

// SetSecret sets the "secret" field.
func (evtuo *EmailVerificationTokenUpdateOne) SetSecret(b []byte) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.SetSecret(b)
	return evtuo
}

// SetOwner sets the "owner" edge to the User entity.
func (evtuo *EmailVerificationTokenUpdateOne) SetOwner(u *User) *EmailVerificationTokenUpdateOne {
	return evtuo.SetOwnerID(u.ID)
}

// Mutation returns the EmailVerificationTokenMutation object of the builder.
func (evtuo *EmailVerificationTokenUpdateOne) Mutation() *EmailVerificationTokenMutation {
	return evtuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (evtuo *EmailVerificationTokenUpdateOne) ClearOwner() *EmailVerificationTokenUpdateOne {
	evtuo.mutation.ClearOwner()
	return evtuo
}

// Where appends a list predicates to the EmailVerificationTokenUpdate builder.
func (evtuo *EmailVerificationTokenUpdateOne) Where(ps ...predicate.EmailVerificationToken) *EmailVerificationTokenUpdateOne {
	evtuo.mutation.Where(ps...)
	return evtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (evtuo *EmailVerificationTokenUpdateOne) Select(field string, fields ...string) *EmailVerificationTokenUpdateOne {
	evtuo.fields = append([]string{field}, fields...)
	return evtuo
}

// Save executes the query and returns the updated EmailVerificationToken entity.
func (evtuo *EmailVerificationTokenUpdateOne) Save(ctx context.Context) (*EmailVerificationToken, error) {
	if err := evtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, evtuo.sqlSave, evtuo.mutation, evtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evtuo *EmailVerificationTokenUpdateOne) SaveX(ctx context.Context) *EmailVerificationToken {
	node, err := evtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (evtuo *EmailVerificationTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := evtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evtuo *EmailVerificationTokenUpdateOne) ExecX(ctx context.Context) {
	if err := evtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evtuo *EmailVerificationTokenUpdateOne) defaults() error {
	if _, ok := evtuo.mutation.UpdatedAt(); !ok && !evtuo.mutation.UpdatedAtCleared() {
		if emailverificationtoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized emailverificationtoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := emailverificationtoken.UpdateDefaultUpdatedAt()
		evtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (evtuo *EmailVerificationTokenUpdateOne) check() error {
	if v, ok := evtuo.mutation.Token(); ok {
		if err := emailverificationtoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationToken.token": %w`, err)}
		}
	}
	if v, ok := evtuo.mutation.Email(); ok {
		if err := emailverificationtoken.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationToken.email": %w`, err)}
		}
	}
	if v, ok := evtuo.mutation.Secret(); ok {
		if err := emailverificationtoken.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationToken.secret": %w`, err)}
		}
	}
	if evtuo.mutation.OwnerCleared() && len(evtuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "EmailVerificationToken.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (evtuo *EmailVerificationTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EmailVerificationTokenUpdateOne {
	evtuo.modifiers = append(evtuo.modifiers, modifiers...)
	return evtuo
}

func (evtuo *EmailVerificationTokenUpdateOne) sqlSave(ctx context.Context) (_node *EmailVerificationToken, err error) {
	if err := evtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailverificationtoken.Table, emailverificationtoken.Columns, sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString))
	id, ok := evtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EmailVerificationToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := evtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailverificationtoken.FieldID)
		for _, f := range fields {
			if !emailverificationtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != emailverificationtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := evtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if evtuo.mutation.CreatedAtCleared() {
		_spec.ClearField(emailverificationtoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := evtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailverificationtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if evtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(emailverificationtoken.FieldUpdatedAt, field.TypeTime)
	}
	if evtuo.mutation.CreatedByCleared() {
		_spec.ClearField(emailverificationtoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := evtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(emailverificationtoken.FieldUpdatedBy, field.TypeString, value)
	}
	if evtuo.mutation.UpdatedByCleared() {
		_spec.ClearField(emailverificationtoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := evtuo.mutation.DeletedAt(); ok {
		_spec.SetField(emailverificationtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if evtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(emailverificationtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := evtuo.mutation.DeletedBy(); ok {
		_spec.SetField(emailverificationtoken.FieldDeletedBy, field.TypeString, value)
	}
	if evtuo.mutation.DeletedByCleared() {
		_spec.ClearField(emailverificationtoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := evtuo.mutation.Token(); ok {
		_spec.SetField(emailverificationtoken.FieldToken, field.TypeString, value)
	}
	if value, ok := evtuo.mutation.TTL(); ok {
		_spec.SetField(emailverificationtoken.FieldTTL, field.TypeTime, value)
	}
	if value, ok := evtuo.mutation.Email(); ok {
		_spec.SetField(emailverificationtoken.FieldEmail, field.TypeString, value)
	}
	if value, ok := evtuo.mutation.Secret(); ok {
		_spec.SetField(emailverificationtoken.FieldSecret, field.TypeBytes, value)
	}
	if evtuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailverificationtoken.OwnerTable,
			Columns: []string{emailverificationtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = evtuo.schemaConfig.EmailVerificationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := evtuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailverificationtoken.OwnerTable,
			Columns: []string{emailverificationtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = evtuo.schemaConfig.EmailVerificationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = evtuo.schemaConfig.EmailVerificationToken
	ctx = internal.NewSchemaConfigContext(ctx, evtuo.schemaConfig)
	_spec.AddModifiers(evtuo.modifiers...)
	_node = &EmailVerificationToken{config: evtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, evtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailverificationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	evtuo.mutation.done = true
	return _node, nil
}
