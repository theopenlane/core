// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// NoteUpdate is the builder for updating Note entities.
type NoteUpdate struct {
	config
	hooks     []Hook
	mutation  *NoteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NoteUpdate builder.
func (_u *NoteUpdate) Where(ps ...predicate.Note) *NoteUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NoteUpdate) SetUpdatedAt(v time.Time) *NoteUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *NoteUpdate) ClearUpdatedAt() *NoteUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *NoteUpdate) SetUpdatedBy(v string) *NoteUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *NoteUpdate) SetNillableUpdatedBy(v *string) *NoteUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *NoteUpdate) ClearUpdatedBy() *NoteUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NoteUpdate) SetDeletedAt(v time.Time) *NoteUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NoteUpdate) SetNillableDeletedAt(v *time.Time) *NoteUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NoteUpdate) ClearDeletedAt() *NoteUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *NoteUpdate) SetDeletedBy(v string) *NoteUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *NoteUpdate) SetNillableDeletedBy(v *string) *NoteUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *NoteUpdate) ClearDeletedBy() *NoteUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetText sets the "text" field.
func (_u *NoteUpdate) SetText(v string) *NoteUpdate {
	_u.mutation.SetText(v)
	return _u
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_u *NoteUpdate) SetNillableText(v *string) *NoteUpdate {
	if v != nil {
		_u.SetText(*v)
	}
	return _u
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (_u *NoteUpdate) SetTaskID(id string) *NoteUpdate {
	_u.mutation.SetTaskID(id)
	return _u
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (_u *NoteUpdate) SetNillableTaskID(id *string) *NoteUpdate {
	if id != nil {
		_u = _u.SetTaskID(*id)
	}
	return _u
}

// SetTask sets the "task" edge to the Task entity.
func (_u *NoteUpdate) SetTask(v *Task) *NoteUpdate {
	return _u.SetTaskID(v.ID)
}

// SetControlID sets the "control" edge to the Control entity by ID.
func (_u *NoteUpdate) SetControlID(id string) *NoteUpdate {
	_u.mutation.SetControlID(id)
	return _u
}

// SetNillableControlID sets the "control" edge to the Control entity by ID if the given value is not nil.
func (_u *NoteUpdate) SetNillableControlID(id *string) *NoteUpdate {
	if id != nil {
		_u = _u.SetControlID(*id)
	}
	return _u
}

// SetControl sets the "control" edge to the Control entity.
func (_u *NoteUpdate) SetControl(v *Control) *NoteUpdate {
	return _u.SetControlID(v.ID)
}

// SetSubcontrolID sets the "subcontrol" edge to the Subcontrol entity by ID.
func (_u *NoteUpdate) SetSubcontrolID(id string) *NoteUpdate {
	_u.mutation.SetSubcontrolID(id)
	return _u
}

// SetNillableSubcontrolID sets the "subcontrol" edge to the Subcontrol entity by ID if the given value is not nil.
func (_u *NoteUpdate) SetNillableSubcontrolID(id *string) *NoteUpdate {
	if id != nil {
		_u = _u.SetSubcontrolID(*id)
	}
	return _u
}

// SetSubcontrol sets the "subcontrol" edge to the Subcontrol entity.
func (_u *NoteUpdate) SetSubcontrol(v *Subcontrol) *NoteUpdate {
	return _u.SetSubcontrolID(v.ID)
}

// SetProcedureID sets the "procedure" edge to the Procedure entity by ID.
func (_u *NoteUpdate) SetProcedureID(id string) *NoteUpdate {
	_u.mutation.SetProcedureID(id)
	return _u
}

// SetNillableProcedureID sets the "procedure" edge to the Procedure entity by ID if the given value is not nil.
func (_u *NoteUpdate) SetNillableProcedureID(id *string) *NoteUpdate {
	if id != nil {
		_u = _u.SetProcedureID(*id)
	}
	return _u
}

// SetProcedure sets the "procedure" edge to the Procedure entity.
func (_u *NoteUpdate) SetProcedure(v *Procedure) *NoteUpdate {
	return _u.SetProcedureID(v.ID)
}

// SetRiskID sets the "risk" edge to the Risk entity by ID.
func (_u *NoteUpdate) SetRiskID(id string) *NoteUpdate {
	_u.mutation.SetRiskID(id)
	return _u
}

// SetNillableRiskID sets the "risk" edge to the Risk entity by ID if the given value is not nil.
func (_u *NoteUpdate) SetNillableRiskID(id *string) *NoteUpdate {
	if id != nil {
		_u = _u.SetRiskID(*id)
	}
	return _u
}

// SetRisk sets the "risk" edge to the Risk entity.
func (_u *NoteUpdate) SetRisk(v *Risk) *NoteUpdate {
	return _u.SetRiskID(v.ID)
}

// SetInternalPolicyID sets the "internal_policy" edge to the InternalPolicy entity by ID.
func (_u *NoteUpdate) SetInternalPolicyID(id string) *NoteUpdate {
	_u.mutation.SetInternalPolicyID(id)
	return _u
}

// SetNillableInternalPolicyID sets the "internal_policy" edge to the InternalPolicy entity by ID if the given value is not nil.
func (_u *NoteUpdate) SetNillableInternalPolicyID(id *string) *NoteUpdate {
	if id != nil {
		_u = _u.SetInternalPolicyID(*id)
	}
	return _u
}

// SetInternalPolicy sets the "internal_policy" edge to the InternalPolicy entity.
func (_u *NoteUpdate) SetInternalPolicy(v *InternalPolicy) *NoteUpdate {
	return _u.SetInternalPolicyID(v.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *NoteUpdate) AddFileIDs(ids ...string) *NoteUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *NoteUpdate) AddFiles(v ...*File) *NoteUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (_u *NoteUpdate) Mutation() *NoteMutation {
	return _u.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (_u *NoteUpdate) ClearTask() *NoteUpdate {
	_u.mutation.ClearTask()
	return _u
}

// ClearControl clears the "control" edge to the Control entity.
func (_u *NoteUpdate) ClearControl() *NoteUpdate {
	_u.mutation.ClearControl()
	return _u
}

// ClearSubcontrol clears the "subcontrol" edge to the Subcontrol entity.
func (_u *NoteUpdate) ClearSubcontrol() *NoteUpdate {
	_u.mutation.ClearSubcontrol()
	return _u
}

// ClearProcedure clears the "procedure" edge to the Procedure entity.
func (_u *NoteUpdate) ClearProcedure() *NoteUpdate {
	_u.mutation.ClearProcedure()
	return _u
}

// ClearRisk clears the "risk" edge to the Risk entity.
func (_u *NoteUpdate) ClearRisk() *NoteUpdate {
	_u.mutation.ClearRisk()
	return _u
}

// ClearInternalPolicy clears the "internal_policy" edge to the InternalPolicy entity.
func (_u *NoteUpdate) ClearInternalPolicy() *NoteUpdate {
	_u.mutation.ClearInternalPolicy()
	return _u
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *NoteUpdate) ClearFiles() *NoteUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *NoteUpdate) RemoveFileIDs(ids ...string) *NoteUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *NoteUpdate) RemoveFiles(v ...*File) *NoteUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NoteUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NoteUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NoteUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NoteUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NoteUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if note.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized note.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := note.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *NoteUpdate) check() error {
	if v, ok := _u.mutation.Text(); ok {
		if err := note.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`generated: validator failed for field "Note.text": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NoteUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NoteUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NoteUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(note.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(note.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(note.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(note.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(note.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(note.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(note.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(note.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(note.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Text(); ok {
		_spec.SetField(note.FieldText, field.TypeString, value)
	}
	if _u.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TaskTable,
			Columns: []string{note.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TaskTable,
			Columns: []string{note.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ControlTable,
			Columns: []string{note.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ControlTable,
			Columns: []string{note.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.SubcontrolTable,
			Columns: []string{note.SubcontrolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.SubcontrolTable,
			Columns: []string{note.SubcontrolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ProcedureTable,
			Columns: []string{note.ProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ProcedureTable,
			Columns: []string{note.ProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.RiskTable,
			Columns: []string{note.RiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.RiskTable,
			Columns: []string{note.RiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.InternalPolicyTable,
			Columns: []string{note.InternalPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.InternalPolicyTable,
			Columns: []string{note.InternalPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.File
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.File
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.File
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Note
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NoteUpdateOne is the builder for updating a single Note entity.
type NoteUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NoteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NoteUpdateOne) SetUpdatedAt(v time.Time) *NoteUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *NoteUpdateOne) ClearUpdatedAt() *NoteUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *NoteUpdateOne) SetUpdatedBy(v string) *NoteUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableUpdatedBy(v *string) *NoteUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *NoteUpdateOne) ClearUpdatedBy() *NoteUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NoteUpdateOne) SetDeletedAt(v time.Time) *NoteUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableDeletedAt(v *time.Time) *NoteUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NoteUpdateOne) ClearDeletedAt() *NoteUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *NoteUpdateOne) SetDeletedBy(v string) *NoteUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableDeletedBy(v *string) *NoteUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *NoteUpdateOne) ClearDeletedBy() *NoteUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetText sets the "text" field.
func (_u *NoteUpdateOne) SetText(v string) *NoteUpdateOne {
	_u.mutation.SetText(v)
	return _u
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableText(v *string) *NoteUpdateOne {
	if v != nil {
		_u.SetText(*v)
	}
	return _u
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (_u *NoteUpdateOne) SetTaskID(id string) *NoteUpdateOne {
	_u.mutation.SetTaskID(id)
	return _u
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableTaskID(id *string) *NoteUpdateOne {
	if id != nil {
		_u = _u.SetTaskID(*id)
	}
	return _u
}

// SetTask sets the "task" edge to the Task entity.
func (_u *NoteUpdateOne) SetTask(v *Task) *NoteUpdateOne {
	return _u.SetTaskID(v.ID)
}

// SetControlID sets the "control" edge to the Control entity by ID.
func (_u *NoteUpdateOne) SetControlID(id string) *NoteUpdateOne {
	_u.mutation.SetControlID(id)
	return _u
}

// SetNillableControlID sets the "control" edge to the Control entity by ID if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableControlID(id *string) *NoteUpdateOne {
	if id != nil {
		_u = _u.SetControlID(*id)
	}
	return _u
}

// SetControl sets the "control" edge to the Control entity.
func (_u *NoteUpdateOne) SetControl(v *Control) *NoteUpdateOne {
	return _u.SetControlID(v.ID)
}

// SetSubcontrolID sets the "subcontrol" edge to the Subcontrol entity by ID.
func (_u *NoteUpdateOne) SetSubcontrolID(id string) *NoteUpdateOne {
	_u.mutation.SetSubcontrolID(id)
	return _u
}

// SetNillableSubcontrolID sets the "subcontrol" edge to the Subcontrol entity by ID if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableSubcontrolID(id *string) *NoteUpdateOne {
	if id != nil {
		_u = _u.SetSubcontrolID(*id)
	}
	return _u
}

// SetSubcontrol sets the "subcontrol" edge to the Subcontrol entity.
func (_u *NoteUpdateOne) SetSubcontrol(v *Subcontrol) *NoteUpdateOne {
	return _u.SetSubcontrolID(v.ID)
}

// SetProcedureID sets the "procedure" edge to the Procedure entity by ID.
func (_u *NoteUpdateOne) SetProcedureID(id string) *NoteUpdateOne {
	_u.mutation.SetProcedureID(id)
	return _u
}

// SetNillableProcedureID sets the "procedure" edge to the Procedure entity by ID if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableProcedureID(id *string) *NoteUpdateOne {
	if id != nil {
		_u = _u.SetProcedureID(*id)
	}
	return _u
}

// SetProcedure sets the "procedure" edge to the Procedure entity.
func (_u *NoteUpdateOne) SetProcedure(v *Procedure) *NoteUpdateOne {
	return _u.SetProcedureID(v.ID)
}

// SetRiskID sets the "risk" edge to the Risk entity by ID.
func (_u *NoteUpdateOne) SetRiskID(id string) *NoteUpdateOne {
	_u.mutation.SetRiskID(id)
	return _u
}

// SetNillableRiskID sets the "risk" edge to the Risk entity by ID if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableRiskID(id *string) *NoteUpdateOne {
	if id != nil {
		_u = _u.SetRiskID(*id)
	}
	return _u
}

// SetRisk sets the "risk" edge to the Risk entity.
func (_u *NoteUpdateOne) SetRisk(v *Risk) *NoteUpdateOne {
	return _u.SetRiskID(v.ID)
}

// SetInternalPolicyID sets the "internal_policy" edge to the InternalPolicy entity by ID.
func (_u *NoteUpdateOne) SetInternalPolicyID(id string) *NoteUpdateOne {
	_u.mutation.SetInternalPolicyID(id)
	return _u
}

// SetNillableInternalPolicyID sets the "internal_policy" edge to the InternalPolicy entity by ID if the given value is not nil.
func (_u *NoteUpdateOne) SetNillableInternalPolicyID(id *string) *NoteUpdateOne {
	if id != nil {
		_u = _u.SetInternalPolicyID(*id)
	}
	return _u
}

// SetInternalPolicy sets the "internal_policy" edge to the InternalPolicy entity.
func (_u *NoteUpdateOne) SetInternalPolicy(v *InternalPolicy) *NoteUpdateOne {
	return _u.SetInternalPolicyID(v.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *NoteUpdateOne) AddFileIDs(ids ...string) *NoteUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *NoteUpdateOne) AddFiles(v ...*File) *NoteUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (_u *NoteUpdateOne) Mutation() *NoteMutation {
	return _u.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (_u *NoteUpdateOne) ClearTask() *NoteUpdateOne {
	_u.mutation.ClearTask()
	return _u
}

// ClearControl clears the "control" edge to the Control entity.
func (_u *NoteUpdateOne) ClearControl() *NoteUpdateOne {
	_u.mutation.ClearControl()
	return _u
}

// ClearSubcontrol clears the "subcontrol" edge to the Subcontrol entity.
func (_u *NoteUpdateOne) ClearSubcontrol() *NoteUpdateOne {
	_u.mutation.ClearSubcontrol()
	return _u
}

// ClearProcedure clears the "procedure" edge to the Procedure entity.
func (_u *NoteUpdateOne) ClearProcedure() *NoteUpdateOne {
	_u.mutation.ClearProcedure()
	return _u
}

// ClearRisk clears the "risk" edge to the Risk entity.
func (_u *NoteUpdateOne) ClearRisk() *NoteUpdateOne {
	_u.mutation.ClearRisk()
	return _u
}

// ClearInternalPolicy clears the "internal_policy" edge to the InternalPolicy entity.
func (_u *NoteUpdateOne) ClearInternalPolicy() *NoteUpdateOne {
	_u.mutation.ClearInternalPolicy()
	return _u
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *NoteUpdateOne) ClearFiles() *NoteUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *NoteUpdateOne) RemoveFileIDs(ids ...string) *NoteUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *NoteUpdateOne) RemoveFiles(v ...*File) *NoteUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the NoteUpdate builder.
func (_u *NoteUpdateOne) Where(ps ...predicate.Note) *NoteUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NoteUpdateOne) Select(field string, fields ...string) *NoteUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Note entity.
func (_u *NoteUpdateOne) Save(ctx context.Context) (*Note, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NoteUpdateOne) SaveX(ctx context.Context) *Note {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NoteUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NoteUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NoteUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if note.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized note.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := note.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *NoteUpdateOne) check() error {
	if v, ok := _u.mutation.Text(); ok {
		if err := note.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`generated: validator failed for field "Note.text": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NoteUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NoteUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NoteUpdateOne) sqlSave(ctx context.Context) (_node *Note, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Note.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, note.FieldID)
		for _, f := range fields {
			if !note.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != note.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(note.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(note.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(note.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(note.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(note.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(note.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(note.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(note.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(note.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Text(); ok {
		_spec.SetField(note.FieldText, field.TypeString, value)
	}
	if _u.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TaskTable,
			Columns: []string{note.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.TaskTable,
			Columns: []string{note.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ControlTable,
			Columns: []string{note.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ControlTable,
			Columns: []string{note.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.SubcontrolTable,
			Columns: []string{note.SubcontrolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.SubcontrolTable,
			Columns: []string{note.SubcontrolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ProcedureTable,
			Columns: []string{note.ProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.ProcedureTable,
			Columns: []string{note.ProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.RiskTable,
			Columns: []string{note.RiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.RiskTable,
			Columns: []string{note.RiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.InternalPolicyTable,
			Columns: []string{note.InternalPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.InternalPolicyTable,
			Columns: []string{note.InternalPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.File
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.File
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.FilesTable,
			Columns: []string{note.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.File
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Note
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Note{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
