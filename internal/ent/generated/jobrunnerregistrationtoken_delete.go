// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
)

// JobRunnerRegistrationTokenDelete is the builder for deleting a JobRunnerRegistrationToken entity.
type JobRunnerRegistrationTokenDelete struct {
	config
	hooks    []Hook
	mutation *JobRunnerRegistrationTokenMutation
}

// Where appends a list predicates to the JobRunnerRegistrationTokenDelete builder.
func (jrrtd *JobRunnerRegistrationTokenDelete) Where(ps ...predicate.JobRunnerRegistrationToken) *JobRunnerRegistrationTokenDelete {
	jrrtd.mutation.Where(ps...)
	return jrrtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jrrtd *JobRunnerRegistrationTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jrrtd.sqlExec, jrrtd.mutation, jrrtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jrrtd *JobRunnerRegistrationTokenDelete) ExecX(ctx context.Context) int {
	n, err := jrrtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jrrtd *JobRunnerRegistrationTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobrunnerregistrationtoken.Table, sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString))
	_spec.Node.Schema = jrrtd.schemaConfig.JobRunnerRegistrationToken
	ctx = internal.NewSchemaConfigContext(ctx, jrrtd.schemaConfig)
	if ps := jrrtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jrrtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jrrtd.mutation.done = true
	return affected, err
}

// JobRunnerRegistrationTokenDeleteOne is the builder for deleting a single JobRunnerRegistrationToken entity.
type JobRunnerRegistrationTokenDeleteOne struct {
	jrrtd *JobRunnerRegistrationTokenDelete
}

// Where appends a list predicates to the JobRunnerRegistrationTokenDelete builder.
func (jrrtdo *JobRunnerRegistrationTokenDeleteOne) Where(ps ...predicate.JobRunnerRegistrationToken) *JobRunnerRegistrationTokenDeleteOne {
	jrrtdo.jrrtd.mutation.Where(ps...)
	return jrrtdo
}

// Exec executes the deletion query.
func (jrrtdo *JobRunnerRegistrationTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := jrrtdo.jrrtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobrunnerregistrationtoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jrrtdo *JobRunnerRegistrationTokenDeleteOne) ExecX(ctx context.Context) {
	if err := jrrtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
