// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EntitlementPlanHistoryUpdate is the builder for updating EntitlementPlanHistory entities.
type EntitlementPlanHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *EntitlementPlanHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EntitlementPlanHistoryUpdate builder.
func (ephu *EntitlementPlanHistoryUpdate) Where(ps ...predicate.EntitlementPlanHistory) *EntitlementPlanHistoryUpdate {
	ephu.mutation.Where(ps...)
	return ephu
}

// SetUpdatedAt sets the "updated_at" field.
func (ephu *EntitlementPlanHistoryUpdate) SetUpdatedAt(t time.Time) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetUpdatedAt(t)
	return ephu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearUpdatedAt() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearUpdatedAt()
	return ephu
}

// SetUpdatedBy sets the "updated_by" field.
func (ephu *EntitlementPlanHistoryUpdate) SetUpdatedBy(s string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetUpdatedBy(s)
	return ephu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ephu *EntitlementPlanHistoryUpdate) SetNillableUpdatedBy(s *string) *EntitlementPlanHistoryUpdate {
	if s != nil {
		ephu.SetUpdatedBy(*s)
	}
	return ephu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearUpdatedBy() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearUpdatedBy()
	return ephu
}

// SetDeletedAt sets the "deleted_at" field.
func (ephu *EntitlementPlanHistoryUpdate) SetDeletedAt(t time.Time) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetDeletedAt(t)
	return ephu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ephu *EntitlementPlanHistoryUpdate) SetNillableDeletedAt(t *time.Time) *EntitlementPlanHistoryUpdate {
	if t != nil {
		ephu.SetDeletedAt(*t)
	}
	return ephu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearDeletedAt() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearDeletedAt()
	return ephu
}

// SetDeletedBy sets the "deleted_by" field.
func (ephu *EntitlementPlanHistoryUpdate) SetDeletedBy(s string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetDeletedBy(s)
	return ephu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ephu *EntitlementPlanHistoryUpdate) SetNillableDeletedBy(s *string) *EntitlementPlanHistoryUpdate {
	if s != nil {
		ephu.SetDeletedBy(*s)
	}
	return ephu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearDeletedBy() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearDeletedBy()
	return ephu
}

// SetTags sets the "tags" field.
func (ephu *EntitlementPlanHistoryUpdate) SetTags(s []string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetTags(s)
	return ephu
}

// AppendTags appends s to the "tags" field.
func (ephu *EntitlementPlanHistoryUpdate) AppendTags(s []string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.AppendTags(s)
	return ephu
}

// ClearTags clears the value of the "tags" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearTags() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearTags()
	return ephu
}

// SetOwnerID sets the "owner_id" field.
func (ephu *EntitlementPlanHistoryUpdate) SetOwnerID(s string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetOwnerID(s)
	return ephu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ephu *EntitlementPlanHistoryUpdate) SetNillableOwnerID(s *string) *EntitlementPlanHistoryUpdate {
	if s != nil {
		ephu.SetOwnerID(*s)
	}
	return ephu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearOwnerID() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearOwnerID()
	return ephu
}

// SetDisplayName sets the "display_name" field.
func (ephu *EntitlementPlanHistoryUpdate) SetDisplayName(s string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetDisplayName(s)
	return ephu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ephu *EntitlementPlanHistoryUpdate) SetNillableDisplayName(s *string) *EntitlementPlanHistoryUpdate {
	if s != nil {
		ephu.SetDisplayName(*s)
	}
	return ephu
}

// ClearDisplayName clears the value of the "display_name" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearDisplayName() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearDisplayName()
	return ephu
}

// SetDescription sets the "description" field.
func (ephu *EntitlementPlanHistoryUpdate) SetDescription(s string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetDescription(s)
	return ephu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ephu *EntitlementPlanHistoryUpdate) SetNillableDescription(s *string) *EntitlementPlanHistoryUpdate {
	if s != nil {
		ephu.SetDescription(*s)
	}
	return ephu
}

// ClearDescription clears the value of the "description" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearDescription() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearDescription()
	return ephu
}

// SetMetadata sets the "metadata" field.
func (ephu *EntitlementPlanHistoryUpdate) SetMetadata(m map[string]interface{}) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetMetadata(m)
	return ephu
}

// ClearMetadata clears the value of the "metadata" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearMetadata() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearMetadata()
	return ephu
}

// SetStripeProductID sets the "stripe_product_id" field.
func (ephu *EntitlementPlanHistoryUpdate) SetStripeProductID(s string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetStripeProductID(s)
	return ephu
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (ephu *EntitlementPlanHistoryUpdate) SetNillableStripeProductID(s *string) *EntitlementPlanHistoryUpdate {
	if s != nil {
		ephu.SetStripeProductID(*s)
	}
	return ephu
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearStripeProductID() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearStripeProductID()
	return ephu
}

// SetStripePriceID sets the "stripe_price_id" field.
func (ephu *EntitlementPlanHistoryUpdate) SetStripePriceID(s string) *EntitlementPlanHistoryUpdate {
	ephu.mutation.SetStripePriceID(s)
	return ephu
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (ephu *EntitlementPlanHistoryUpdate) SetNillableStripePriceID(s *string) *EntitlementPlanHistoryUpdate {
	if s != nil {
		ephu.SetStripePriceID(*s)
	}
	return ephu
}

// ClearStripePriceID clears the value of the "stripe_price_id" field.
func (ephu *EntitlementPlanHistoryUpdate) ClearStripePriceID() *EntitlementPlanHistoryUpdate {
	ephu.mutation.ClearStripePriceID()
	return ephu
}

// Mutation returns the EntitlementPlanHistoryMutation object of the builder.
func (ephu *EntitlementPlanHistoryUpdate) Mutation() *EntitlementPlanHistoryMutation {
	return ephu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ephu *EntitlementPlanHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := ephu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ephu.sqlSave, ephu.mutation, ephu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ephu *EntitlementPlanHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ephu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ephu *EntitlementPlanHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ephu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ephu *EntitlementPlanHistoryUpdate) ExecX(ctx context.Context) {
	if err := ephu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ephu *EntitlementPlanHistoryUpdate) defaults() error {
	if _, ok := ephu.mutation.UpdatedAt(); !ok && !ephu.mutation.UpdatedAtCleared() {
		if entitlementplanhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanhistory.UpdateDefaultUpdatedAt()
		ephu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ephu *EntitlementPlanHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementPlanHistoryUpdate {
	ephu.modifiers = append(ephu.modifiers, modifiers...)
	return ephu
}

func (ephu *EntitlementPlanHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entitlementplanhistory.Table, entitlementplanhistory.Columns, sqlgraph.NewFieldSpec(entitlementplanhistory.FieldID, field.TypeString))
	if ps := ephu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ephu.mutation.RefCleared() {
		_spec.ClearField(entitlementplanhistory.FieldRef, field.TypeString)
	}
	if ephu.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlementplanhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ephu.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ephu.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlementplanhistory.FieldUpdatedAt, field.TypeTime)
	}
	if ephu.mutation.CreatedByCleared() {
		_spec.ClearField(entitlementplanhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ephu.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ephu.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlementplanhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ephu.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ephu.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlementplanhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ephu.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanhistory.FieldDeletedBy, field.TypeString, value)
	}
	if ephu.mutation.DeletedByCleared() {
		_spec.ClearField(entitlementplanhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ephu.mutation.Tags(); ok {
		_spec.SetField(entitlementplanhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ephu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlementplanhistory.FieldTags, value)
		})
	}
	if ephu.mutation.TagsCleared() {
		_spec.ClearField(entitlementplanhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := ephu.mutation.OwnerID(); ok {
		_spec.SetField(entitlementplanhistory.FieldOwnerID, field.TypeString, value)
	}
	if ephu.mutation.OwnerIDCleared() {
		_spec.ClearField(entitlementplanhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := ephu.mutation.DisplayName(); ok {
		_spec.SetField(entitlementplanhistory.FieldDisplayName, field.TypeString, value)
	}
	if ephu.mutation.DisplayNameCleared() {
		_spec.ClearField(entitlementplanhistory.FieldDisplayName, field.TypeString)
	}
	if value, ok := ephu.mutation.Description(); ok {
		_spec.SetField(entitlementplanhistory.FieldDescription, field.TypeString, value)
	}
	if ephu.mutation.DescriptionCleared() {
		_spec.ClearField(entitlementplanhistory.FieldDescription, field.TypeString)
	}
	if value, ok := ephu.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanhistory.FieldMetadata, field.TypeJSON, value)
	}
	if ephu.mutation.MetadataCleared() {
		_spec.ClearField(entitlementplanhistory.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ephu.mutation.StripeProductID(); ok {
		_spec.SetField(entitlementplanhistory.FieldStripeProductID, field.TypeString, value)
	}
	if ephu.mutation.StripeProductIDCleared() {
		_spec.ClearField(entitlementplanhistory.FieldStripeProductID, field.TypeString)
	}
	if value, ok := ephu.mutation.StripePriceID(); ok {
		_spec.SetField(entitlementplanhistory.FieldStripePriceID, field.TypeString, value)
	}
	if ephu.mutation.StripePriceIDCleared() {
		_spec.ClearField(entitlementplanhistory.FieldStripePriceID, field.TypeString)
	}
	_spec.Node.Schema = ephu.schemaConfig.EntitlementPlanHistory
	ctx = internal.NewSchemaConfigContext(ctx, ephu.schemaConfig)
	_spec.AddModifiers(ephu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ephu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementplanhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ephu.mutation.done = true
	return n, nil
}

// EntitlementPlanHistoryUpdateOne is the builder for updating a single EntitlementPlanHistory entity.
type EntitlementPlanHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EntitlementPlanHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetUpdatedAt(t time.Time) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetUpdatedAt(t)
	return ephuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearUpdatedAt() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearUpdatedAt()
	return ephuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetUpdatedBy(s string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetUpdatedBy(s)
	return ephuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetNillableUpdatedBy(s *string) *EntitlementPlanHistoryUpdateOne {
	if s != nil {
		ephuo.SetUpdatedBy(*s)
	}
	return ephuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearUpdatedBy() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearUpdatedBy()
	return ephuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetDeletedAt(t time.Time) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetDeletedAt(t)
	return ephuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *EntitlementPlanHistoryUpdateOne {
	if t != nil {
		ephuo.SetDeletedAt(*t)
	}
	return ephuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearDeletedAt() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearDeletedAt()
	return ephuo
}

// SetDeletedBy sets the "deleted_by" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetDeletedBy(s string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetDeletedBy(s)
	return ephuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetNillableDeletedBy(s *string) *EntitlementPlanHistoryUpdateOne {
	if s != nil {
		ephuo.SetDeletedBy(*s)
	}
	return ephuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearDeletedBy() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearDeletedBy()
	return ephuo
}

// SetTags sets the "tags" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetTags(s []string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetTags(s)
	return ephuo
}

// AppendTags appends s to the "tags" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) AppendTags(s []string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.AppendTags(s)
	return ephuo
}

// ClearTags clears the value of the "tags" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearTags() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearTags()
	return ephuo
}

// SetOwnerID sets the "owner_id" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetOwnerID(s string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetOwnerID(s)
	return ephuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetNillableOwnerID(s *string) *EntitlementPlanHistoryUpdateOne {
	if s != nil {
		ephuo.SetOwnerID(*s)
	}
	return ephuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearOwnerID() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearOwnerID()
	return ephuo
}

// SetDisplayName sets the "display_name" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetDisplayName(s string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetDisplayName(s)
	return ephuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetNillableDisplayName(s *string) *EntitlementPlanHistoryUpdateOne {
	if s != nil {
		ephuo.SetDisplayName(*s)
	}
	return ephuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearDisplayName() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearDisplayName()
	return ephuo
}

// SetDescription sets the "description" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetDescription(s string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetDescription(s)
	return ephuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetNillableDescription(s *string) *EntitlementPlanHistoryUpdateOne {
	if s != nil {
		ephuo.SetDescription(*s)
	}
	return ephuo
}

// ClearDescription clears the value of the "description" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearDescription() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearDescription()
	return ephuo
}

// SetMetadata sets the "metadata" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetMetadata(m map[string]interface{}) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetMetadata(m)
	return ephuo
}

// ClearMetadata clears the value of the "metadata" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearMetadata() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearMetadata()
	return ephuo
}

// SetStripeProductID sets the "stripe_product_id" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetStripeProductID(s string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetStripeProductID(s)
	return ephuo
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetNillableStripeProductID(s *string) *EntitlementPlanHistoryUpdateOne {
	if s != nil {
		ephuo.SetStripeProductID(*s)
	}
	return ephuo
}

// ClearStripeProductID clears the value of the "stripe_product_id" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearStripeProductID() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearStripeProductID()
	return ephuo
}

// SetStripePriceID sets the "stripe_price_id" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetStripePriceID(s string) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.SetStripePriceID(s)
	return ephuo
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (ephuo *EntitlementPlanHistoryUpdateOne) SetNillableStripePriceID(s *string) *EntitlementPlanHistoryUpdateOne {
	if s != nil {
		ephuo.SetStripePriceID(*s)
	}
	return ephuo
}

// ClearStripePriceID clears the value of the "stripe_price_id" field.
func (ephuo *EntitlementPlanHistoryUpdateOne) ClearStripePriceID() *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.ClearStripePriceID()
	return ephuo
}

// Mutation returns the EntitlementPlanHistoryMutation object of the builder.
func (ephuo *EntitlementPlanHistoryUpdateOne) Mutation() *EntitlementPlanHistoryMutation {
	return ephuo.mutation
}

// Where appends a list predicates to the EntitlementPlanHistoryUpdate builder.
func (ephuo *EntitlementPlanHistoryUpdateOne) Where(ps ...predicate.EntitlementPlanHistory) *EntitlementPlanHistoryUpdateOne {
	ephuo.mutation.Where(ps...)
	return ephuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ephuo *EntitlementPlanHistoryUpdateOne) Select(field string, fields ...string) *EntitlementPlanHistoryUpdateOne {
	ephuo.fields = append([]string{field}, fields...)
	return ephuo
}

// Save executes the query and returns the updated EntitlementPlanHistory entity.
func (ephuo *EntitlementPlanHistoryUpdateOne) Save(ctx context.Context) (*EntitlementPlanHistory, error) {
	if err := ephuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ephuo.sqlSave, ephuo.mutation, ephuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ephuo *EntitlementPlanHistoryUpdateOne) SaveX(ctx context.Context) *EntitlementPlanHistory {
	node, err := ephuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ephuo *EntitlementPlanHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ephuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ephuo *EntitlementPlanHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ephuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ephuo *EntitlementPlanHistoryUpdateOne) defaults() error {
	if _, ok := ephuo.mutation.UpdatedAt(); !ok && !ephuo.mutation.UpdatedAtCleared() {
		if entitlementplanhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanhistory.UpdateDefaultUpdatedAt()
		ephuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ephuo *EntitlementPlanHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementPlanHistoryUpdateOne {
	ephuo.modifiers = append(ephuo.modifiers, modifiers...)
	return ephuo
}

func (ephuo *EntitlementPlanHistoryUpdateOne) sqlSave(ctx context.Context) (_node *EntitlementPlanHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(entitlementplanhistory.Table, entitlementplanhistory.Columns, sqlgraph.NewFieldSpec(entitlementplanhistory.FieldID, field.TypeString))
	id, ok := ephuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EntitlementPlanHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ephuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlementplanhistory.FieldID)
		for _, f := range fields {
			if !entitlementplanhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != entitlementplanhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ephuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ephuo.mutation.RefCleared() {
		_spec.ClearField(entitlementplanhistory.FieldRef, field.TypeString)
	}
	if ephuo.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlementplanhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ephuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ephuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlementplanhistory.FieldUpdatedAt, field.TypeTime)
	}
	if ephuo.mutation.CreatedByCleared() {
		_spec.ClearField(entitlementplanhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ephuo.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ephuo.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlementplanhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ephuo.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ephuo.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlementplanhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ephuo.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanhistory.FieldDeletedBy, field.TypeString, value)
	}
	if ephuo.mutation.DeletedByCleared() {
		_spec.ClearField(entitlementplanhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ephuo.mutation.Tags(); ok {
		_spec.SetField(entitlementplanhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ephuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlementplanhistory.FieldTags, value)
		})
	}
	if ephuo.mutation.TagsCleared() {
		_spec.ClearField(entitlementplanhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := ephuo.mutation.OwnerID(); ok {
		_spec.SetField(entitlementplanhistory.FieldOwnerID, field.TypeString, value)
	}
	if ephuo.mutation.OwnerIDCleared() {
		_spec.ClearField(entitlementplanhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := ephuo.mutation.DisplayName(); ok {
		_spec.SetField(entitlementplanhistory.FieldDisplayName, field.TypeString, value)
	}
	if ephuo.mutation.DisplayNameCleared() {
		_spec.ClearField(entitlementplanhistory.FieldDisplayName, field.TypeString)
	}
	if value, ok := ephuo.mutation.Description(); ok {
		_spec.SetField(entitlementplanhistory.FieldDescription, field.TypeString, value)
	}
	if ephuo.mutation.DescriptionCleared() {
		_spec.ClearField(entitlementplanhistory.FieldDescription, field.TypeString)
	}
	if value, ok := ephuo.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanhistory.FieldMetadata, field.TypeJSON, value)
	}
	if ephuo.mutation.MetadataCleared() {
		_spec.ClearField(entitlementplanhistory.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ephuo.mutation.StripeProductID(); ok {
		_spec.SetField(entitlementplanhistory.FieldStripeProductID, field.TypeString, value)
	}
	if ephuo.mutation.StripeProductIDCleared() {
		_spec.ClearField(entitlementplanhistory.FieldStripeProductID, field.TypeString)
	}
	if value, ok := ephuo.mutation.StripePriceID(); ok {
		_spec.SetField(entitlementplanhistory.FieldStripePriceID, field.TypeString, value)
	}
	if ephuo.mutation.StripePriceIDCleared() {
		_spec.ClearField(entitlementplanhistory.FieldStripePriceID, field.TypeString)
	}
	_spec.Node.Schema = ephuo.schemaConfig.EntitlementPlanHistory
	ctx = internal.NewSchemaConfigContext(ctx, ephuo.schemaConfig)
	_spec.AddModifiers(ephuo.modifiers...)
	_node = &EntitlementPlanHistory{config: ephuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ephuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementplanhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ephuo.mutation.done = true
	return _node, nil
}
