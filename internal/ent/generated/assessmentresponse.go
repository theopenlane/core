// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/pkg/enums"
)

// AssessmentResponse is the model entity for the AssessmentResponse schema.
type AssessmentResponse struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the assessment this response is for
	AssessmentID string `json:"assessment_id,omitempty"`
	// the user who is responding to this assessment
	ResponderID string `json:"responder_id,omitempty"`
	// the current status of the assessment for this user
	Status enums.AssessmentResponseStatus `json:"status,omitempty"`
	// when the assessment was assigned to the user
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// when the user started the assessment
	StartedAt time.Time `json:"started_at,omitempty"`
	// when the user completed the assessment
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// when the assessment is due
	DueDate time.Time `json:"due_date,omitempty"`
	// the document containing the user's response data
	ResponseDataID string `json:"response_data_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssessmentResponseQuery when eager-loading is set.
	Edges        AssessmentResponseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssessmentResponseEdges holds the relations/edges for other nodes in the graph.
type AssessmentResponseEdges struct {
	// Assessment holds the value of the assessment edge.
	Assessment *Assessment `json:"assessment,omitempty"`
	// the document containing the user's response data
	Document *DocumentData `json:"document,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AssessmentOrErr returns the Assessment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentResponseEdges) AssessmentOrErr() (*Assessment, error) {
	if e.Assessment != nil {
		return e.Assessment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: assessment.Label}
	}
	return nil, &NotLoadedError{edge: "assessment"}
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentResponseEdges) DocumentOrErr() (*DocumentData, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: documentdata.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssessmentResponse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assessmentresponse.FieldTags:
			values[i] = new([]byte)
		case assessmentresponse.FieldID, assessmentresponse.FieldCreatedBy, assessmentresponse.FieldUpdatedBy, assessmentresponse.FieldDeletedBy, assessmentresponse.FieldAssessmentID, assessmentresponse.FieldResponderID, assessmentresponse.FieldStatus, assessmentresponse.FieldResponseDataID:
			values[i] = new(sql.NullString)
		case assessmentresponse.FieldCreatedAt, assessmentresponse.FieldUpdatedAt, assessmentresponse.FieldDeletedAt, assessmentresponse.FieldAssignedAt, assessmentresponse.FieldStartedAt, assessmentresponse.FieldCompletedAt, assessmentresponse.FieldDueDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssessmentResponse fields.
func (_m *AssessmentResponse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assessmentresponse.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case assessmentresponse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case assessmentresponse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case assessmentresponse.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case assessmentresponse.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case assessmentresponse.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case assessmentresponse.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case assessmentresponse.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case assessmentresponse.FieldAssessmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_id", values[i])
			} else if value.Valid {
				_m.AssessmentID = value.String
			}
		case assessmentresponse.FieldResponderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field responder_id", values[i])
			} else if value.Valid {
				_m.ResponderID = value.String
			}
		case assessmentresponse.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = enums.AssessmentResponseStatus(value.String)
			}
		case assessmentresponse.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				_m.AssignedAt = value.Time
			}
		case assessmentresponse.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				_m.StartedAt = value.Time
			}
		case assessmentresponse.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				_m.CompletedAt = value.Time
			}
		case assessmentresponse.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				_m.DueDate = value.Time
			}
		case assessmentresponse.FieldResponseDataID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_data_id", values[i])
			} else if value.Valid {
				_m.ResponseDataID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssessmentResponse.
// This includes values selected through modifiers, order, etc.
func (_m *AssessmentResponse) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAssessment queries the "assessment" edge of the AssessmentResponse entity.
func (_m *AssessmentResponse) QueryAssessment() *AssessmentQuery {
	return NewAssessmentResponseClient(_m.config).QueryAssessment(_m)
}

// QueryDocument queries the "document" edge of the AssessmentResponse entity.
func (_m *AssessmentResponse) QueryDocument() *DocumentDataQuery {
	return NewAssessmentResponseClient(_m.config).QueryDocument(_m)
}

// Update returns a builder for updating this AssessmentResponse.
// Note that you need to call AssessmentResponse.Unwrap() before calling this method if this AssessmentResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AssessmentResponse) Update() *AssessmentResponseUpdateOne {
	return NewAssessmentResponseClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AssessmentResponse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AssessmentResponse) Unwrap() *AssessmentResponse {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: AssessmentResponse is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AssessmentResponse) String() string {
	var builder strings.Builder
	builder.WriteString("AssessmentResponse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("assessment_id=")
	builder.WriteString(_m.AssessmentID)
	builder.WriteString(", ")
	builder.WriteString("responder_id=")
	builder.WriteString(_m.ResponderID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(_m.AssignedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(_m.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(_m.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(_m.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("response_data_id=")
	builder.WriteString(_m.ResponseDataID)
	builder.WriteByte(')')
	return builder.String()
}

// AssessmentResponses is a parsable slice of AssessmentResponse.
type AssessmentResponses []*AssessmentResponse
