// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// AssessmentResponse is the model entity for the AssessmentResponse schema.
type AssessmentResponse struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the assessment this response is for
	AssessmentID string `json:"assessment_id,omitempty"`
	// the user who is responding to the assessment
	UserID string `json:"user_id,omitempty"`
	// the current status of the assessment for this user
	Status enums.AssessmentResponseStatus `json:"status,omitempty"`
	// when the assessment was assigned to the user
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// when the user started the assessment
	StartedAt time.Time `json:"started_at,omitempty"`
	// when the user completed the assessment
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// when the assessment is due
	DueDate time.Time `json:"due_date,omitempty"`
	// the document containing the user's response data
	ResponseDataID string `json:"response_data_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssessmentResponseQuery when eager-loading is set.
	Edges        AssessmentResponseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssessmentResponseEdges holds the relations/edges for other nodes in the graph.
type AssessmentResponseEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// groups that are blocked from viewing or editing the risk
	BlockedGroups []*Group `json:"blocked_groups,omitempty"`
	// provides edit access to the risk to members of the group
	Editors []*Group `json:"editors,omitempty"`
	// provides view access to the risk to members of the group
	Viewers []*Group `json:"viewers,omitempty"`
	// Assessment holds the value of the assessment edge.
	Assessment *Assessment `json:"assessment,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// the document containing the user's response data
	Document *DocumentData `json:"document,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedBlockedGroups map[string][]*Group
	namedEditors       map[string][]*Group
	namedViewers       map[string][]*Group
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentResponseEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BlockedGroupsOrErr returns the BlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentResponseEdges) BlockedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.BlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "blocked_groups"}
}

// EditorsOrErr returns the Editors value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentResponseEdges) EditorsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Editors, nil
	}
	return nil, &NotLoadedError{edge: "editors"}
}

// ViewersOrErr returns the Viewers value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentResponseEdges) ViewersOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Viewers, nil
	}
	return nil, &NotLoadedError{edge: "viewers"}
}

// AssessmentOrErr returns the Assessment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentResponseEdges) AssessmentOrErr() (*Assessment, error) {
	if e.Assessment != nil {
		return e.Assessment, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: assessment.Label}
	}
	return nil, &NotLoadedError{edge: "assessment"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentResponseEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentResponseEdges) DocumentOrErr() (*DocumentData, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: documentdata.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssessmentResponse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assessmentresponse.FieldTags:
			values[i] = new([]byte)
		case assessmentresponse.FieldID, assessmentresponse.FieldCreatedBy, assessmentresponse.FieldUpdatedBy, assessmentresponse.FieldDeletedBy, assessmentresponse.FieldOwnerID, assessmentresponse.FieldAssessmentID, assessmentresponse.FieldUserID, assessmentresponse.FieldStatus, assessmentresponse.FieldResponseDataID:
			values[i] = new(sql.NullString)
		case assessmentresponse.FieldCreatedAt, assessmentresponse.FieldUpdatedAt, assessmentresponse.FieldDeletedAt, assessmentresponse.FieldAssignedAt, assessmentresponse.FieldStartedAt, assessmentresponse.FieldCompletedAt, assessmentresponse.FieldDueDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssessmentResponse fields.
func (ar *AssessmentResponse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assessmentresponse.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ar.ID = value.String
			}
		case assessmentresponse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		case assessmentresponse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ar.UpdatedAt = value.Time
			}
		case assessmentresponse.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ar.CreatedBy = value.String
			}
		case assessmentresponse.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ar.UpdatedBy = value.String
			}
		case assessmentresponse.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ar.DeletedAt = value.Time
			}
		case assessmentresponse.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ar.DeletedBy = value.String
			}
		case assessmentresponse.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ar.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case assessmentresponse.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				ar.OwnerID = value.String
			}
		case assessmentresponse.FieldAssessmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_id", values[i])
			} else if value.Valid {
				ar.AssessmentID = value.String
			}
		case assessmentresponse.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ar.UserID = value.String
			}
		case assessmentresponse.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ar.Status = enums.AssessmentResponseStatus(value.String)
			}
		case assessmentresponse.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				ar.AssignedAt = value.Time
			}
		case assessmentresponse.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				ar.StartedAt = value.Time
			}
		case assessmentresponse.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				ar.CompletedAt = value.Time
			}
		case assessmentresponse.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				ar.DueDate = value.Time
			}
		case assessmentresponse.FieldResponseDataID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_data_id", values[i])
			} else if value.Valid {
				ar.ResponseDataID = value.String
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssessmentResponse.
// This includes values selected through modifiers, order, etc.
func (ar *AssessmentResponse) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the AssessmentResponse entity.
func (ar *AssessmentResponse) QueryOwner() *OrganizationQuery {
	return NewAssessmentResponseClient(ar.config).QueryOwner(ar)
}

// QueryBlockedGroups queries the "blocked_groups" edge of the AssessmentResponse entity.
func (ar *AssessmentResponse) QueryBlockedGroups() *GroupQuery {
	return NewAssessmentResponseClient(ar.config).QueryBlockedGroups(ar)
}

// QueryEditors queries the "editors" edge of the AssessmentResponse entity.
func (ar *AssessmentResponse) QueryEditors() *GroupQuery {
	return NewAssessmentResponseClient(ar.config).QueryEditors(ar)
}

// QueryViewers queries the "viewers" edge of the AssessmentResponse entity.
func (ar *AssessmentResponse) QueryViewers() *GroupQuery {
	return NewAssessmentResponseClient(ar.config).QueryViewers(ar)
}

// QueryAssessment queries the "assessment" edge of the AssessmentResponse entity.
func (ar *AssessmentResponse) QueryAssessment() *AssessmentQuery {
	return NewAssessmentResponseClient(ar.config).QueryAssessment(ar)
}

// QueryUser queries the "user" edge of the AssessmentResponse entity.
func (ar *AssessmentResponse) QueryUser() *UserQuery {
	return NewAssessmentResponseClient(ar.config).QueryUser(ar)
}

// QueryDocument queries the "document" edge of the AssessmentResponse entity.
func (ar *AssessmentResponse) QueryDocument() *DocumentDataQuery {
	return NewAssessmentResponseClient(ar.config).QueryDocument(ar)
}

// Update returns a builder for updating this AssessmentResponse.
// Note that you need to call AssessmentResponse.Unwrap() before calling this method if this AssessmentResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AssessmentResponse) Update() *AssessmentResponseUpdateOne {
	return NewAssessmentResponseClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AssessmentResponse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AssessmentResponse) Unwrap() *AssessmentResponse {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("generated: AssessmentResponse is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AssessmentResponse) String() string {
	var builder strings.Builder
	builder.WriteString("AssessmentResponse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ar.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ar.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ar.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ar.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ar.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ar.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(ar.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("assessment_id=")
	builder.WriteString(ar.AssessmentID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ar.UserID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ar.Status))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(ar.AssignedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(ar.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(ar.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(ar.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("response_data_id=")
	builder.WriteString(ar.ResponseDataID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockedGroups returns the BlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ar *AssessmentResponse) NamedBlockedGroups(name string) ([]*Group, error) {
	if ar.Edges.namedBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ar.Edges.namedBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ar *AssessmentResponse) appendNamedBlockedGroups(name string, edges ...*Group) {
	if ar.Edges.namedBlockedGroups == nil {
		ar.Edges.namedBlockedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		ar.Edges.namedBlockedGroups[name] = []*Group{}
	} else {
		ar.Edges.namedBlockedGroups[name] = append(ar.Edges.namedBlockedGroups[name], edges...)
	}
}

// NamedEditors returns the Editors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ar *AssessmentResponse) NamedEditors(name string) ([]*Group, error) {
	if ar.Edges.namedEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ar.Edges.namedEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ar *AssessmentResponse) appendNamedEditors(name string, edges ...*Group) {
	if ar.Edges.namedEditors == nil {
		ar.Edges.namedEditors = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		ar.Edges.namedEditors[name] = []*Group{}
	} else {
		ar.Edges.namedEditors[name] = append(ar.Edges.namedEditors[name], edges...)
	}
}

// NamedViewers returns the Viewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ar *AssessmentResponse) NamedViewers(name string) ([]*Group, error) {
	if ar.Edges.namedViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ar.Edges.namedViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ar *AssessmentResponse) appendNamedViewers(name string, edges ...*Group) {
	if ar.Edges.namedViewers == nil {
		ar.Edges.namedViewers = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		ar.Edges.namedViewers[name] = []*Group{}
	} else {
		ar.Edges.namedViewers[name] = append(ar.Edges.namedViewers[name], edges...)
	}
}

// AssessmentResponses is a parsable slice of AssessmentResponse.
type AssessmentResponses []*AssessmentResponse
