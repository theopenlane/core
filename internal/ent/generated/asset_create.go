// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/pkg/enums"
)

// AssetCreate is the builder for creating a Asset entity.
type AssetCreate struct {
	config
	mutation *AssetMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *AssetCreate) SetCreatedAt(v time.Time) *AssetCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AssetCreate) SetNillableCreatedAt(v *time.Time) *AssetCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AssetCreate) SetUpdatedAt(v time.Time) *AssetCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AssetCreate) SetNillableUpdatedAt(v *time.Time) *AssetCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *AssetCreate) SetCreatedBy(v string) *AssetCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *AssetCreate) SetNillableCreatedBy(v *string) *AssetCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *AssetCreate) SetUpdatedBy(v string) *AssetCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *AssetCreate) SetNillableUpdatedBy(v *string) *AssetCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *AssetCreate) SetDeletedAt(v time.Time) *AssetCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *AssetCreate) SetNillableDeletedAt(v *time.Time) *AssetCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *AssetCreate) SetDeletedBy(v string) *AssetCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *AssetCreate) SetNillableDeletedBy(v *string) *AssetCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *AssetCreate) SetTags(v []string) *AssetCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *AssetCreate) SetOwnerID(v string) *AssetCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *AssetCreate) SetNillableOwnerID(v *string) *AssetCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetAssetType sets the "asset_type" field.
func (_c *AssetCreate) SetAssetType(v enums.AssetType) *AssetCreate {
	_c.mutation.SetAssetType(v)
	return _c
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (_c *AssetCreate) SetNillableAssetType(v *enums.AssetType) *AssetCreate {
	if v != nil {
		_c.SetAssetType(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *AssetCreate) SetName(v string) *AssetCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *AssetCreate) SetDescription(v string) *AssetCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *AssetCreate) SetNillableDescription(v *string) *AssetCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetIdentifier sets the "identifier" field.
func (_c *AssetCreate) SetIdentifier(v string) *AssetCreate {
	_c.mutation.SetIdentifier(v)
	return _c
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_c *AssetCreate) SetNillableIdentifier(v *string) *AssetCreate {
	if v != nil {
		_c.SetIdentifier(*v)
	}
	return _c
}

// SetWebsite sets the "website" field.
func (_c *AssetCreate) SetWebsite(v string) *AssetCreate {
	_c.mutation.SetWebsite(v)
	return _c
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (_c *AssetCreate) SetNillableWebsite(v *string) *AssetCreate {
	if v != nil {
		_c.SetWebsite(*v)
	}
	return _c
}

// SetCpe sets the "cpe" field.
func (_c *AssetCreate) SetCpe(v string) *AssetCreate {
	_c.mutation.SetCpe(v)
	return _c
}

// SetNillableCpe sets the "cpe" field if the given value is not nil.
func (_c *AssetCreate) SetNillableCpe(v *string) *AssetCreate {
	if v != nil {
		_c.SetCpe(*v)
	}
	return _c
}

// SetCategories sets the "categories" field.
func (_c *AssetCreate) SetCategories(v []string) *AssetCreate {
	_c.mutation.SetCategories(v)
	return _c
}

// SetID sets the "id" field.
func (_c *AssetCreate) SetID(v string) *AssetCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *AssetCreate) SetNillableID(v *string) *AssetCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *AssetCreate) SetOwner(v *Organization) *AssetCreate {
	return _c.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_c *AssetCreate) AddBlockedGroupIDs(ids ...string) *AssetCreate {
	_c.mutation.AddBlockedGroupIDs(ids...)
	return _c
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_c *AssetCreate) AddBlockedGroups(v ...*Group) *AssetCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_c *AssetCreate) AddEditorIDs(ids ...string) *AssetCreate {
	_c.mutation.AddEditorIDs(ids...)
	return _c
}

// AddEditors adds the "editors" edges to the Group entity.
func (_c *AssetCreate) AddEditors(v ...*Group) *AssetCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_c *AssetCreate) AddViewerIDs(ids ...string) *AssetCreate {
	_c.mutation.AddViewerIDs(ids...)
	return _c
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_c *AssetCreate) AddViewers(v ...*Group) *AssetCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddViewerIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_c *AssetCreate) AddScanIDs(ids ...string) *AssetCreate {
	_c.mutation.AddScanIDs(ids...)
	return _c
}

// AddScans adds the "scans" edges to the Scan entity.
func (_c *AssetCreate) AddScans(v ...*Scan) *AssetCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScanIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_c *AssetCreate) AddEntityIDs(ids ...string) *AssetCreate {
	_c.mutation.AddEntityIDs(ids...)
	return _c
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_c *AssetCreate) AddEntities(v ...*Entity) *AssetCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntityIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_c *AssetCreate) AddControlIDs(ids ...string) *AssetCreate {
	_c.mutation.AddControlIDs(ids...)
	return _c
}

// AddControls adds the "controls" edges to the Control entity.
func (_c *AssetCreate) AddControls(v ...*Control) *AssetCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (_c *AssetCreate) Mutation() *AssetMutation {
	return _c.mutation
}

// Save creates the Asset in the database.
func (_c *AssetCreate) Save(ctx context.Context) (*Asset, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AssetCreate) SaveX(ctx context.Context) *Asset {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AssetCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AssetCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AssetCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if asset.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized asset.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := asset.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if asset.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized asset.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := asset.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := asset.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.AssetType(); !ok {
		v := asset.DefaultAssetType
		_c.mutation.SetAssetType(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if asset.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized asset.DefaultID (forgotten import generated/runtime?)")
		}
		v := asset.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *AssetCreate) check() error {
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := asset.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Asset.owner_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AssetType(); !ok {
		return &ValidationError{Name: "asset_type", err: errors.New(`generated: missing required field "Asset.asset_type"`)}
	}
	if v, ok := _c.mutation.AssetType(); ok {
		if err := asset.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`generated: validator failed for field "Asset.asset_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Asset.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := asset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Asset.name": %w`, err)}
		}
	}
	return nil
}

func (_c *AssetCreate) sqlSave(ctx context.Context) (*Asset, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Asset.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AssetCreate) createSpec() (*Asset, *sqlgraph.CreateSpec) {
	var (
		_node = &Asset{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(asset.Table, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Asset
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(asset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(asset.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(asset.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(asset.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(asset.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(asset.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.AssetType(); ok {
		_spec.SetField(asset.FieldAssetType, field.TypeEnum, value)
		_node.AssetType = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(asset.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Identifier(); ok {
		_spec.SetField(asset.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := _c.mutation.Website(); ok {
		_spec.SetField(asset.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := _c.mutation.Cpe(); ok {
		_spec.SetField(asset.FieldCpe, field.TypeString, value)
		_node.Cpe = value
	}
	if value, ok := _c.mutation.Categories(); ok {
		_spec.SetField(asset.FieldCategories, field.TypeJSON, value)
		_node.Categories = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BlockedGroupsTable,
			Columns: []string{asset.BlockedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EditorsTable,
			Columns: []string{asset.EditorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ViewersTable,
			Columns: []string{asset.ViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ScansTable,
			Columns: asset.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.EntitiesTable,
			Columns: asset.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ControlsTable,
			Columns: asset.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssetCreateBulk is the builder for creating many Asset entities in bulk.
type AssetCreateBulk struct {
	config
	err      error
	builders []*AssetCreate
}

// Save creates the Asset entities in the database.
func (_c *AssetCreateBulk) Save(ctx context.Context) ([]*Asset, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Asset, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AssetCreateBulk) SaveX(ctx context.Context) []*Asset {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AssetCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AssetCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
