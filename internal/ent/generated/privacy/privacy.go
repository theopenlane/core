// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/theopenlane/core/internal/ent/generated"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, generated.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op generated.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op generated.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m generated.Mutation) error {
		return Denyf("generated/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The APITokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type APITokenQueryRuleFunc func(context.Context, *generated.APITokenQuery) error

// EvalQuery return f(ctx, q).
func (f APITokenQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.APITokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.APITokenQuery", q)
}

// The APITokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type APITokenMutationRuleFunc func(context.Context, *generated.APITokenMutation) error

// EvalMutation calls f(ctx, m).
func (f APITokenMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.APITokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.APITokenMutation", m)
}

// The ActionPlanQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActionPlanQueryRuleFunc func(context.Context, *generated.ActionPlanQuery) error

// EvalQuery return f(ctx, q).
func (f ActionPlanQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ActionPlanQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ActionPlanQuery", q)
}

// The ActionPlanMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActionPlanMutationRuleFunc func(context.Context, *generated.ActionPlanMutation) error

// EvalMutation calls f(ctx, m).
func (f ActionPlanMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ActionPlanMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ActionPlanMutation", m)
}

// The ActionPlanHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActionPlanHistoryQueryRuleFunc func(context.Context, *generated.ActionPlanHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ActionPlanHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ActionPlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ActionPlanHistoryQuery", q)
}

// The ActionPlanHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActionPlanHistoryMutationRuleFunc func(context.Context, *generated.ActionPlanHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ActionPlanHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ActionPlanHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ActionPlanHistoryMutation", m)
}

// The ContactQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ContactQueryRuleFunc func(context.Context, *generated.ContactQuery) error

// EvalQuery return f(ctx, q).
func (f ContactQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ContactQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ContactQuery", q)
}

// The ContactMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ContactMutationRuleFunc func(context.Context, *generated.ContactMutation) error

// EvalMutation calls f(ctx, m).
func (f ContactMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ContactMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ContactMutation", m)
}

// The ContactHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ContactHistoryQueryRuleFunc func(context.Context, *generated.ContactHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ContactHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ContactHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ContactHistoryQuery", q)
}

// The ContactHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ContactHistoryMutationRuleFunc func(context.Context, *generated.ContactHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ContactHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ContactHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ContactHistoryMutation", m)
}

// The ControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ControlQueryRuleFunc func(context.Context, *generated.ControlQuery) error

// EvalQuery return f(ctx, q).
func (f ControlQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ControlQuery", q)
}

// The ControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ControlMutationRuleFunc func(context.Context, *generated.ControlMutation) error

// EvalMutation calls f(ctx, m).
func (f ControlMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ControlMutation", m)
}

// The ControlHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ControlHistoryQueryRuleFunc func(context.Context, *generated.ControlHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ControlHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ControlHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ControlHistoryQuery", q)
}

// The ControlHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ControlHistoryMutationRuleFunc func(context.Context, *generated.ControlHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ControlHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ControlHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ControlHistoryMutation", m)
}

// The ControlObjectiveQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ControlObjectiveQueryRuleFunc func(context.Context, *generated.ControlObjectiveQuery) error

// EvalQuery return f(ctx, q).
func (f ControlObjectiveQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ControlObjectiveQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ControlObjectiveQuery", q)
}

// The ControlObjectiveMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ControlObjectiveMutationRuleFunc func(context.Context, *generated.ControlObjectiveMutation) error

// EvalMutation calls f(ctx, m).
func (f ControlObjectiveMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ControlObjectiveMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ControlObjectiveMutation", m)
}

// The ControlObjectiveHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ControlObjectiveHistoryQueryRuleFunc func(context.Context, *generated.ControlObjectiveHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ControlObjectiveHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ControlObjectiveHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ControlObjectiveHistoryQuery", q)
}

// The ControlObjectiveHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ControlObjectiveHistoryMutationRuleFunc func(context.Context, *generated.ControlObjectiveHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ControlObjectiveHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ControlObjectiveHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ControlObjectiveHistoryMutation", m)
}

// The DocumentDataQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentDataQueryRuleFunc func(context.Context, *generated.DocumentDataQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentDataQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.DocumentDataQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.DocumentDataQuery", q)
}

// The DocumentDataMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentDataMutationRuleFunc func(context.Context, *generated.DocumentDataMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentDataMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.DocumentDataMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.DocumentDataMutation", m)
}

// The DocumentDataHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentDataHistoryQueryRuleFunc func(context.Context, *generated.DocumentDataHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentDataHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.DocumentDataHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.DocumentDataHistoryQuery", q)
}

// The DocumentDataHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentDataHistoryMutationRuleFunc func(context.Context, *generated.DocumentDataHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentDataHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.DocumentDataHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.DocumentDataHistoryMutation", m)
}

// The EmailVerificationTokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmailVerificationTokenQueryRuleFunc func(context.Context, *generated.EmailVerificationTokenQuery) error

// EvalQuery return f(ctx, q).
func (f EmailVerificationTokenQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EmailVerificationTokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EmailVerificationTokenQuery", q)
}

// The EmailVerificationTokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmailVerificationTokenMutationRuleFunc func(context.Context, *generated.EmailVerificationTokenMutation) error

// EvalMutation calls f(ctx, m).
func (f EmailVerificationTokenMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EmailVerificationTokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EmailVerificationTokenMutation", m)
}

// The EntitlementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntitlementQueryRuleFunc func(context.Context, *generated.EntitlementQuery) error

// EvalQuery return f(ctx, q).
func (f EntitlementQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntitlementQuery", q)
}

// The EntitlementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntitlementMutationRuleFunc func(context.Context, *generated.EntitlementMutation) error

// EvalMutation calls f(ctx, m).
func (f EntitlementMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntitlementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntitlementMutation", m)
}

// The EntitlementHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntitlementHistoryQueryRuleFunc func(context.Context, *generated.EntitlementHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f EntitlementHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntitlementHistoryQuery", q)
}

// The EntitlementHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntitlementHistoryMutationRuleFunc func(context.Context, *generated.EntitlementHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f EntitlementHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntitlementHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntitlementHistoryMutation", m)
}

// The EntitlementPlanQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntitlementPlanQueryRuleFunc func(context.Context, *generated.EntitlementPlanQuery) error

// EvalQuery return f(ctx, q).
func (f EntitlementPlanQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementPlanQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntitlementPlanQuery", q)
}

// The EntitlementPlanMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntitlementPlanMutationRuleFunc func(context.Context, *generated.EntitlementPlanMutation) error

// EvalMutation calls f(ctx, m).
func (f EntitlementPlanMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntitlementPlanMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntitlementPlanMutation", m)
}

// The EntitlementPlanFeatureQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntitlementPlanFeatureQueryRuleFunc func(context.Context, *generated.EntitlementPlanFeatureQuery) error

// EvalQuery return f(ctx, q).
func (f EntitlementPlanFeatureQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementPlanFeatureQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntitlementPlanFeatureQuery", q)
}

// The EntitlementPlanFeatureMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntitlementPlanFeatureMutationRuleFunc func(context.Context, *generated.EntitlementPlanFeatureMutation) error

// EvalMutation calls f(ctx, m).
func (f EntitlementPlanFeatureMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntitlementPlanFeatureMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntitlementPlanFeatureMutation", m)
}

// The EntitlementPlanFeatureHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntitlementPlanFeatureHistoryQueryRuleFunc func(context.Context, *generated.EntitlementPlanFeatureHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f EntitlementPlanFeatureHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementPlanFeatureHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntitlementPlanFeatureHistoryQuery", q)
}

// The EntitlementPlanFeatureHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntitlementPlanFeatureHistoryMutationRuleFunc func(context.Context, *generated.EntitlementPlanFeatureHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f EntitlementPlanFeatureHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntitlementPlanFeatureHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntitlementPlanFeatureHistoryMutation", m)
}

// The EntitlementPlanHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntitlementPlanHistoryQueryRuleFunc func(context.Context, *generated.EntitlementPlanHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f EntitlementPlanHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementPlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntitlementPlanHistoryQuery", q)
}

// The EntitlementPlanHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntitlementPlanHistoryMutationRuleFunc func(context.Context, *generated.EntitlementPlanHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f EntitlementPlanHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntitlementPlanHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntitlementPlanHistoryMutation", m)
}

// The EntityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntityQueryRuleFunc func(context.Context, *generated.EntityQuery) error

// EvalQuery return f(ctx, q).
func (f EntityQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntityQuery", q)
}

// The EntityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntityMutationRuleFunc func(context.Context, *generated.EntityMutation) error

// EvalMutation calls f(ctx, m).
func (f EntityMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntityMutation", m)
}

// The EntityHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntityHistoryQueryRuleFunc func(context.Context, *generated.EntityHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f EntityHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntityHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntityHistoryQuery", q)
}

// The EntityHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntityHistoryMutationRuleFunc func(context.Context, *generated.EntityHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f EntityHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntityHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntityHistoryMutation", m)
}

// The EntityTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntityTypeQueryRuleFunc func(context.Context, *generated.EntityTypeQuery) error

// EvalQuery return f(ctx, q).
func (f EntityTypeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntityTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntityTypeQuery", q)
}

// The EntityTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntityTypeMutationRuleFunc func(context.Context, *generated.EntityTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f EntityTypeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntityTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntityTypeMutation", m)
}

// The EntityTypeHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntityTypeHistoryQueryRuleFunc func(context.Context, *generated.EntityTypeHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f EntityTypeHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntityTypeHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EntityTypeHistoryQuery", q)
}

// The EntityTypeHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntityTypeHistoryMutationRuleFunc func(context.Context, *generated.EntityTypeHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f EntityTypeHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EntityTypeHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EntityTypeHistoryMutation", m)
}

// The EventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventQueryRuleFunc func(context.Context, *generated.EventQuery) error

// EvalQuery return f(ctx, q).
func (f EventQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EventQuery", q)
}

// The EventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventMutationRuleFunc func(context.Context, *generated.EventMutation) error

// EvalMutation calls f(ctx, m).
func (f EventMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EventMutation", m)
}

// The EventHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventHistoryQueryRuleFunc func(context.Context, *generated.EventHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f EventHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EventHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.EventHistoryQuery", q)
}

// The EventHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventHistoryMutationRuleFunc func(context.Context, *generated.EventHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f EventHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.EventHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.EventHistoryMutation", m)
}

// The FeatureQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeatureQueryRuleFunc func(context.Context, *generated.FeatureQuery) error

// EvalQuery return f(ctx, q).
func (f FeatureQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FeatureQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FeatureQuery", q)
}

// The FeatureMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeatureMutationRuleFunc func(context.Context, *generated.FeatureMutation) error

// EvalMutation calls f(ctx, m).
func (f FeatureMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FeatureMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FeatureMutation", m)
}

// The FeatureHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeatureHistoryQueryRuleFunc func(context.Context, *generated.FeatureHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f FeatureHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FeatureHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FeatureHistoryQuery", q)
}

// The FeatureHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeatureHistoryMutationRuleFunc func(context.Context, *generated.FeatureHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f FeatureHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FeatureHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FeatureHistoryMutation", m)
}

// The FileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FileQueryRuleFunc func(context.Context, *generated.FileQuery) error

// EvalQuery return f(ctx, q).
func (f FileQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FileQuery", q)
}

// The FileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FileMutationRuleFunc func(context.Context, *generated.FileMutation) error

// EvalMutation calls f(ctx, m).
func (f FileMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FileMutation", m)
}

// The FileHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FileHistoryQueryRuleFunc func(context.Context, *generated.FileHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f FileHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FileHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.FileHistoryQuery", q)
}

// The FileHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FileHistoryMutationRuleFunc func(context.Context, *generated.FileHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f FileHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.FileHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.FileHistoryMutation", m)
}

// The GroupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GroupQueryRuleFunc func(context.Context, *generated.GroupQuery) error

// EvalQuery return f(ctx, q).
func (f GroupQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GroupQuery", q)
}

// The GroupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GroupMutationRuleFunc func(context.Context, *generated.GroupMutation) error

// EvalMutation calls f(ctx, m).
func (f GroupMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GroupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GroupMutation", m)
}

// The GroupHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GroupHistoryQueryRuleFunc func(context.Context, *generated.GroupHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f GroupHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GroupHistoryQuery", q)
}

// The GroupHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GroupHistoryMutationRuleFunc func(context.Context, *generated.GroupHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f GroupHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GroupHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GroupHistoryMutation", m)
}

// The GroupMembershipQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GroupMembershipQueryRuleFunc func(context.Context, *generated.GroupMembershipQuery) error

// EvalQuery return f(ctx, q).
func (f GroupMembershipQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupMembershipQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GroupMembershipQuery", q)
}

// The GroupMembershipMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GroupMembershipMutationRuleFunc func(context.Context, *generated.GroupMembershipMutation) error

// EvalMutation calls f(ctx, m).
func (f GroupMembershipMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GroupMembershipMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GroupMembershipMutation", m)
}

// The GroupMembershipHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GroupMembershipHistoryQueryRuleFunc func(context.Context, *generated.GroupMembershipHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f GroupMembershipHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupMembershipHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GroupMembershipHistoryQuery", q)
}

// The GroupMembershipHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GroupMembershipHistoryMutationRuleFunc func(context.Context, *generated.GroupMembershipHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f GroupMembershipHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GroupMembershipHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GroupMembershipHistoryMutation", m)
}

// The GroupSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GroupSettingQueryRuleFunc func(context.Context, *generated.GroupSettingQuery) error

// EvalQuery return f(ctx, q).
func (f GroupSettingQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GroupSettingQuery", q)
}

// The GroupSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GroupSettingMutationRuleFunc func(context.Context, *generated.GroupSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f GroupSettingMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GroupSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GroupSettingMutation", m)
}

// The GroupSettingHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GroupSettingHistoryQueryRuleFunc func(context.Context, *generated.GroupSettingHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f GroupSettingHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.GroupSettingHistoryQuery", q)
}

// The GroupSettingHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GroupSettingHistoryMutationRuleFunc func(context.Context, *generated.GroupSettingHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f GroupSettingHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.GroupSettingHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.GroupSettingHistoryMutation", m)
}

// The HushQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HushQueryRuleFunc func(context.Context, *generated.HushQuery) error

// EvalQuery return f(ctx, q).
func (f HushQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.HushQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.HushQuery", q)
}

// The HushMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HushMutationRuleFunc func(context.Context, *generated.HushMutation) error

// EvalMutation calls f(ctx, m).
func (f HushMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.HushMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.HushMutation", m)
}

// The HushHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HushHistoryQueryRuleFunc func(context.Context, *generated.HushHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f HushHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.HushHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.HushHistoryQuery", q)
}

// The HushHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HushHistoryMutationRuleFunc func(context.Context, *generated.HushHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f HushHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.HushHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.HushHistoryMutation", m)
}

// The IntegrationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IntegrationQueryRuleFunc func(context.Context, *generated.IntegrationQuery) error

// EvalQuery return f(ctx, q).
func (f IntegrationQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.IntegrationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.IntegrationQuery", q)
}

// The IntegrationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IntegrationMutationRuleFunc func(context.Context, *generated.IntegrationMutation) error

// EvalMutation calls f(ctx, m).
func (f IntegrationMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.IntegrationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.IntegrationMutation", m)
}

// The IntegrationHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IntegrationHistoryQueryRuleFunc func(context.Context, *generated.IntegrationHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f IntegrationHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.IntegrationHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.IntegrationHistoryQuery", q)
}

// The IntegrationHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IntegrationHistoryMutationRuleFunc func(context.Context, *generated.IntegrationHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f IntegrationHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.IntegrationHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.IntegrationHistoryMutation", m)
}

// The InternalPolicyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InternalPolicyQueryRuleFunc func(context.Context, *generated.InternalPolicyQuery) error

// EvalQuery return f(ctx, q).
func (f InternalPolicyQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.InternalPolicyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.InternalPolicyQuery", q)
}

// The InternalPolicyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InternalPolicyMutationRuleFunc func(context.Context, *generated.InternalPolicyMutation) error

// EvalMutation calls f(ctx, m).
func (f InternalPolicyMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.InternalPolicyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.InternalPolicyMutation", m)
}

// The InternalPolicyHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InternalPolicyHistoryQueryRuleFunc func(context.Context, *generated.InternalPolicyHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f InternalPolicyHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.InternalPolicyHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.InternalPolicyHistoryQuery", q)
}

// The InternalPolicyHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InternalPolicyHistoryMutationRuleFunc func(context.Context, *generated.InternalPolicyHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f InternalPolicyHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.InternalPolicyHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.InternalPolicyHistoryMutation", m)
}

// The InviteQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InviteQueryRuleFunc func(context.Context, *generated.InviteQuery) error

// EvalQuery return f(ctx, q).
func (f InviteQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.InviteQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.InviteQuery", q)
}

// The InviteMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InviteMutationRuleFunc func(context.Context, *generated.InviteMutation) error

// EvalMutation calls f(ctx, m).
func (f InviteMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.InviteMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.InviteMutation", m)
}

// The NarrativeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NarrativeQueryRuleFunc func(context.Context, *generated.NarrativeQuery) error

// EvalQuery return f(ctx, q).
func (f NarrativeQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.NarrativeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.NarrativeQuery", q)
}

// The NarrativeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NarrativeMutationRuleFunc func(context.Context, *generated.NarrativeMutation) error

// EvalMutation calls f(ctx, m).
func (f NarrativeMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.NarrativeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.NarrativeMutation", m)
}

// The NarrativeHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NarrativeHistoryQueryRuleFunc func(context.Context, *generated.NarrativeHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f NarrativeHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.NarrativeHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.NarrativeHistoryQuery", q)
}

// The NarrativeHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NarrativeHistoryMutationRuleFunc func(context.Context, *generated.NarrativeHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f NarrativeHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.NarrativeHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.NarrativeHistoryMutation", m)
}

// The NoteQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NoteQueryRuleFunc func(context.Context, *generated.NoteQuery) error

// EvalQuery return f(ctx, q).
func (f NoteQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.NoteQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.NoteQuery", q)
}

// The NoteMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NoteMutationRuleFunc func(context.Context, *generated.NoteMutation) error

// EvalMutation calls f(ctx, m).
func (f NoteMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.NoteMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.NoteMutation", m)
}

// The NoteHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NoteHistoryQueryRuleFunc func(context.Context, *generated.NoteHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f NoteHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.NoteHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.NoteHistoryQuery", q)
}

// The NoteHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NoteHistoryMutationRuleFunc func(context.Context, *generated.NoteHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f NoteHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.NoteHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.NoteHistoryMutation", m)
}

// The OauthProviderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OauthProviderQueryRuleFunc func(context.Context, *generated.OauthProviderQuery) error

// EvalQuery return f(ctx, q).
func (f OauthProviderQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OauthProviderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OauthProviderQuery", q)
}

// The OauthProviderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OauthProviderMutationRuleFunc func(context.Context, *generated.OauthProviderMutation) error

// EvalMutation calls f(ctx, m).
func (f OauthProviderMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OauthProviderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OauthProviderMutation", m)
}

// The OauthProviderHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OauthProviderHistoryQueryRuleFunc func(context.Context, *generated.OauthProviderHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f OauthProviderHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OauthProviderHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OauthProviderHistoryQuery", q)
}

// The OauthProviderHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OauthProviderHistoryMutationRuleFunc func(context.Context, *generated.OauthProviderHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f OauthProviderHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OauthProviderHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OauthProviderHistoryMutation", m)
}

// The OhAuthTooTokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OhAuthTooTokenQueryRuleFunc func(context.Context, *generated.OhAuthTooTokenQuery) error

// EvalQuery return f(ctx, q).
func (f OhAuthTooTokenQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OhAuthTooTokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OhAuthTooTokenQuery", q)
}

// The OhAuthTooTokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OhAuthTooTokenMutationRuleFunc func(context.Context, *generated.OhAuthTooTokenMutation) error

// EvalMutation calls f(ctx, m).
func (f OhAuthTooTokenMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OhAuthTooTokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OhAuthTooTokenMutation", m)
}

// The OrgMembershipQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrgMembershipQueryRuleFunc func(context.Context, *generated.OrgMembershipQuery) error

// EvalQuery return f(ctx, q).
func (f OrgMembershipQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrgMembershipQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrgMembershipQuery", q)
}

// The OrgMembershipMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrgMembershipMutationRuleFunc func(context.Context, *generated.OrgMembershipMutation) error

// EvalMutation calls f(ctx, m).
func (f OrgMembershipMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrgMembershipMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrgMembershipMutation", m)
}

// The OrgMembershipHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrgMembershipHistoryQueryRuleFunc func(context.Context, *generated.OrgMembershipHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f OrgMembershipHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrgMembershipHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrgMembershipHistoryQuery", q)
}

// The OrgMembershipHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrgMembershipHistoryMutationRuleFunc func(context.Context, *generated.OrgMembershipHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f OrgMembershipHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrgMembershipHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrgMembershipHistoryMutation", m)
}

// The OrganizationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationQueryRuleFunc func(context.Context, *generated.OrganizationQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrganizationQuery", q)
}

// The OrganizationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationMutationRuleFunc func(context.Context, *generated.OrganizationMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrganizationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrganizationMutation", m)
}

// The OrganizationHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationHistoryQueryRuleFunc func(context.Context, *generated.OrganizationHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrganizationHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrganizationHistoryQuery", q)
}

// The OrganizationHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationHistoryMutationRuleFunc func(context.Context, *generated.OrganizationHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrganizationHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrganizationHistoryMutation", m)
}

// The OrganizationSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationSettingQueryRuleFunc func(context.Context, *generated.OrganizationSettingQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationSettingQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrganizationSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrganizationSettingQuery", q)
}

// The OrganizationSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationSettingMutationRuleFunc func(context.Context, *generated.OrganizationSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationSettingMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrganizationSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrganizationSettingMutation", m)
}

// The OrganizationSettingHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationSettingHistoryQueryRuleFunc func(context.Context, *generated.OrganizationSettingHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationSettingHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrganizationSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.OrganizationSettingHistoryQuery", q)
}

// The OrganizationSettingHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationSettingHistoryMutationRuleFunc func(context.Context, *generated.OrganizationSettingHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationSettingHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.OrganizationSettingHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.OrganizationSettingHistoryMutation", m)
}

// The PasswordResetTokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PasswordResetTokenQueryRuleFunc func(context.Context, *generated.PasswordResetTokenQuery) error

// EvalQuery return f(ctx, q).
func (f PasswordResetTokenQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PasswordResetTokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PasswordResetTokenQuery", q)
}

// The PasswordResetTokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PasswordResetTokenMutationRuleFunc func(context.Context, *generated.PasswordResetTokenMutation) error

// EvalMutation calls f(ctx, m).
func (f PasswordResetTokenMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PasswordResetTokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PasswordResetTokenMutation", m)
}

// The PersonalAccessTokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PersonalAccessTokenQueryRuleFunc func(context.Context, *generated.PersonalAccessTokenQuery) error

// EvalQuery return f(ctx, q).
func (f PersonalAccessTokenQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PersonalAccessTokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.PersonalAccessTokenQuery", q)
}

// The PersonalAccessTokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PersonalAccessTokenMutationRuleFunc func(context.Context, *generated.PersonalAccessTokenMutation) error

// EvalMutation calls f(ctx, m).
func (f PersonalAccessTokenMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.PersonalAccessTokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.PersonalAccessTokenMutation", m)
}

// The ProcedureQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProcedureQueryRuleFunc func(context.Context, *generated.ProcedureQuery) error

// EvalQuery return f(ctx, q).
func (f ProcedureQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProcedureQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ProcedureQuery", q)
}

// The ProcedureMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProcedureMutationRuleFunc func(context.Context, *generated.ProcedureMutation) error

// EvalMutation calls f(ctx, m).
func (f ProcedureMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ProcedureMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ProcedureMutation", m)
}

// The ProcedureHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProcedureHistoryQueryRuleFunc func(context.Context, *generated.ProcedureHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ProcedureHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProcedureHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ProcedureHistoryQuery", q)
}

// The ProcedureHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProcedureHistoryMutationRuleFunc func(context.Context, *generated.ProcedureHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ProcedureHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ProcedureHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ProcedureHistoryMutation", m)
}

// The ProgramQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProgramQueryRuleFunc func(context.Context, *generated.ProgramQuery) error

// EvalQuery return f(ctx, q).
func (f ProgramQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProgramQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ProgramQuery", q)
}

// The ProgramMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProgramMutationRuleFunc func(context.Context, *generated.ProgramMutation) error

// EvalMutation calls f(ctx, m).
func (f ProgramMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ProgramMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ProgramMutation", m)
}

// The ProgramHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProgramHistoryQueryRuleFunc func(context.Context, *generated.ProgramHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ProgramHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProgramHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.ProgramHistoryQuery", q)
}

// The ProgramHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProgramHistoryMutationRuleFunc func(context.Context, *generated.ProgramHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ProgramHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.ProgramHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.ProgramHistoryMutation", m)
}

// The RiskQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RiskQueryRuleFunc func(context.Context, *generated.RiskQuery) error

// EvalQuery return f(ctx, q).
func (f RiskQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RiskQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.RiskQuery", q)
}

// The RiskMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RiskMutationRuleFunc func(context.Context, *generated.RiskMutation) error

// EvalMutation calls f(ctx, m).
func (f RiskMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.RiskMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.RiskMutation", m)
}

// The RiskHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RiskHistoryQueryRuleFunc func(context.Context, *generated.RiskHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f RiskHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RiskHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.RiskHistoryQuery", q)
}

// The RiskHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RiskHistoryMutationRuleFunc func(context.Context, *generated.RiskHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f RiskHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.RiskHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.RiskHistoryMutation", m)
}

// The StandardQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StandardQueryRuleFunc func(context.Context, *generated.StandardQuery) error

// EvalQuery return f(ctx, q).
func (f StandardQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.StandardQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.StandardQuery", q)
}

// The StandardMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StandardMutationRuleFunc func(context.Context, *generated.StandardMutation) error

// EvalMutation calls f(ctx, m).
func (f StandardMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.StandardMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.StandardMutation", m)
}

// The StandardHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StandardHistoryQueryRuleFunc func(context.Context, *generated.StandardHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f StandardHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.StandardHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.StandardHistoryQuery", q)
}

// The StandardHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StandardHistoryMutationRuleFunc func(context.Context, *generated.StandardHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f StandardHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.StandardHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.StandardHistoryMutation", m)
}

// The SubcontrolQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubcontrolQueryRuleFunc func(context.Context, *generated.SubcontrolQuery) error

// EvalQuery return f(ctx, q).
func (f SubcontrolQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubcontrolQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SubcontrolQuery", q)
}

// The SubcontrolMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubcontrolMutationRuleFunc func(context.Context, *generated.SubcontrolMutation) error

// EvalMutation calls f(ctx, m).
func (f SubcontrolMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SubcontrolMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SubcontrolMutation", m)
}

// The SubcontrolHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubcontrolHistoryQueryRuleFunc func(context.Context, *generated.SubcontrolHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f SubcontrolHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubcontrolHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SubcontrolHistoryQuery", q)
}

// The SubcontrolHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubcontrolHistoryMutationRuleFunc func(context.Context, *generated.SubcontrolHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f SubcontrolHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SubcontrolHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SubcontrolHistoryMutation", m)
}

// The SubscriberQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscriberQueryRuleFunc func(context.Context, *generated.SubscriberQuery) error

// EvalQuery return f(ctx, q).
func (f SubscriberQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubscriberQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.SubscriberQuery", q)
}

// The SubscriberMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscriberMutationRuleFunc func(context.Context, *generated.SubscriberMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscriberMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.SubscriberMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.SubscriberMutation", m)
}

// The TFASettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TFASettingQueryRuleFunc func(context.Context, *generated.TFASettingQuery) error

// EvalQuery return f(ctx, q).
func (f TFASettingQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TFASettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TFASettingQuery", q)
}

// The TFASettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TFASettingMutationRuleFunc func(context.Context, *generated.TFASettingMutation) error

// EvalMutation calls f(ctx, m).
func (f TFASettingMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TFASettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TFASettingMutation", m)
}

// The TaskQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TaskQueryRuleFunc func(context.Context, *generated.TaskQuery) error

// EvalQuery return f(ctx, q).
func (f TaskQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TaskQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TaskQuery", q)
}

// The TaskMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TaskMutationRuleFunc func(context.Context, *generated.TaskMutation) error

// EvalMutation calls f(ctx, m).
func (f TaskMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TaskMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TaskMutation", m)
}

// The TaskHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TaskHistoryQueryRuleFunc func(context.Context, *generated.TaskHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f TaskHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TaskHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TaskHistoryQuery", q)
}

// The TaskHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TaskHistoryMutationRuleFunc func(context.Context, *generated.TaskHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f TaskHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TaskHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TaskHistoryMutation", m)
}

// The TemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TemplateQueryRuleFunc func(context.Context, *generated.TemplateQuery) error

// EvalQuery return f(ctx, q).
func (f TemplateQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TemplateQuery", q)
}

// The TemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TemplateMutationRuleFunc func(context.Context, *generated.TemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f TemplateMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TemplateMutation", m)
}

// The TemplateHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TemplateHistoryQueryRuleFunc func(context.Context, *generated.TemplateHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f TemplateHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TemplateHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.TemplateHistoryQuery", q)
}

// The TemplateHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TemplateHistoryMutationRuleFunc func(context.Context, *generated.TemplateHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f TemplateHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.TemplateHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.TemplateHistoryMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *generated.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *generated.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.UserMutation", m)
}

// The UserHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserHistoryQueryRuleFunc func(context.Context, *generated.UserHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f UserHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.UserHistoryQuery", q)
}

// The UserHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserHistoryMutationRuleFunc func(context.Context, *generated.UserHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f UserHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.UserHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.UserHistoryMutation", m)
}

// The UserSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserSettingQueryRuleFunc func(context.Context, *generated.UserSettingQuery) error

// EvalQuery return f(ctx, q).
func (f UserSettingQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.UserSettingQuery", q)
}

// The UserSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserSettingMutationRuleFunc func(context.Context, *generated.UserSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f UserSettingMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.UserSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.UserSettingMutation", m)
}

// The UserSettingHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserSettingHistoryQueryRuleFunc func(context.Context, *generated.UserSettingHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f UserSettingHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.UserSettingHistoryQuery", q)
}

// The UserSettingHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserSettingHistoryMutationRuleFunc func(context.Context, *generated.UserSettingHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f UserSettingHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.UserSettingHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.UserSettingHistoryMutation", m)
}

// The WebauthnQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WebauthnQueryRuleFunc func(context.Context, *generated.WebauthnQuery) error

// EvalQuery return f(ctx, q).
func (f WebauthnQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.WebauthnQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.WebauthnQuery", q)
}

// The WebauthnMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WebauthnMutationRuleFunc func(context.Context, *generated.WebauthnMutation) error

// EvalMutation calls f(ctx, m).
func (f WebauthnMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.WebauthnMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.WebauthnMutation", m)
}

// The WebhookQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WebhookQueryRuleFunc func(context.Context, *generated.WebhookQuery) error

// EvalQuery return f(ctx, q).
func (f WebhookQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.WebhookQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.WebhookQuery", q)
}

// The WebhookMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WebhookMutationRuleFunc func(context.Context, *generated.WebhookMutation) error

// EvalMutation calls f(ctx, m).
func (f WebhookMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.WebhookMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.WebhookMutation", m)
}

// The WebhookHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WebhookHistoryQueryRuleFunc func(context.Context, *generated.WebhookHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f WebhookHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.WebhookHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("generated/privacy: unexpected query type %T, expect *generated.WebhookHistoryQuery", q)
}

// The WebhookHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WebhookHistoryMutationRuleFunc func(context.Context, *generated.WebhookHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f WebhookHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	if m, ok := m.(*generated.WebhookHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("generated/privacy: unexpected mutation type %T, expect *generated.WebhookHistoryMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q generated.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m generated.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q generated.Query) (Filter, error) {
	switch q := q.(type) {
	case *generated.APITokenQuery:
		return q.Filter(), nil
	case *generated.ActionPlanQuery:
		return q.Filter(), nil
	case *generated.ActionPlanHistoryQuery:
		return q.Filter(), nil
	case *generated.ContactQuery:
		return q.Filter(), nil
	case *generated.ContactHistoryQuery:
		return q.Filter(), nil
	case *generated.ControlQuery:
		return q.Filter(), nil
	case *generated.ControlHistoryQuery:
		return q.Filter(), nil
	case *generated.ControlObjectiveQuery:
		return q.Filter(), nil
	case *generated.ControlObjectiveHistoryQuery:
		return q.Filter(), nil
	case *generated.DocumentDataQuery:
		return q.Filter(), nil
	case *generated.DocumentDataHistoryQuery:
		return q.Filter(), nil
	case *generated.EmailVerificationTokenQuery:
		return q.Filter(), nil
	case *generated.EntitlementQuery:
		return q.Filter(), nil
	case *generated.EntitlementHistoryQuery:
		return q.Filter(), nil
	case *generated.EntitlementPlanQuery:
		return q.Filter(), nil
	case *generated.EntitlementPlanFeatureQuery:
		return q.Filter(), nil
	case *generated.EntitlementPlanFeatureHistoryQuery:
		return q.Filter(), nil
	case *generated.EntitlementPlanHistoryQuery:
		return q.Filter(), nil
	case *generated.EntityQuery:
		return q.Filter(), nil
	case *generated.EntityHistoryQuery:
		return q.Filter(), nil
	case *generated.EntityTypeQuery:
		return q.Filter(), nil
	case *generated.EntityTypeHistoryQuery:
		return q.Filter(), nil
	case *generated.EventQuery:
		return q.Filter(), nil
	case *generated.EventHistoryQuery:
		return q.Filter(), nil
	case *generated.FeatureQuery:
		return q.Filter(), nil
	case *generated.FeatureHistoryQuery:
		return q.Filter(), nil
	case *generated.FileQuery:
		return q.Filter(), nil
	case *generated.FileHistoryQuery:
		return q.Filter(), nil
	case *generated.GroupQuery:
		return q.Filter(), nil
	case *generated.GroupHistoryQuery:
		return q.Filter(), nil
	case *generated.GroupMembershipQuery:
		return q.Filter(), nil
	case *generated.GroupMembershipHistoryQuery:
		return q.Filter(), nil
	case *generated.GroupSettingQuery:
		return q.Filter(), nil
	case *generated.GroupSettingHistoryQuery:
		return q.Filter(), nil
	case *generated.HushQuery:
		return q.Filter(), nil
	case *generated.HushHistoryQuery:
		return q.Filter(), nil
	case *generated.IntegrationQuery:
		return q.Filter(), nil
	case *generated.IntegrationHistoryQuery:
		return q.Filter(), nil
	case *generated.InternalPolicyQuery:
		return q.Filter(), nil
	case *generated.InternalPolicyHistoryQuery:
		return q.Filter(), nil
	case *generated.InviteQuery:
		return q.Filter(), nil
	case *generated.NarrativeQuery:
		return q.Filter(), nil
	case *generated.NarrativeHistoryQuery:
		return q.Filter(), nil
	case *generated.NoteQuery:
		return q.Filter(), nil
	case *generated.NoteHistoryQuery:
		return q.Filter(), nil
	case *generated.OauthProviderQuery:
		return q.Filter(), nil
	case *generated.OauthProviderHistoryQuery:
		return q.Filter(), nil
	case *generated.OhAuthTooTokenQuery:
		return q.Filter(), nil
	case *generated.OrgMembershipQuery:
		return q.Filter(), nil
	case *generated.OrgMembershipHistoryQuery:
		return q.Filter(), nil
	case *generated.OrganizationQuery:
		return q.Filter(), nil
	case *generated.OrganizationHistoryQuery:
		return q.Filter(), nil
	case *generated.OrganizationSettingQuery:
		return q.Filter(), nil
	case *generated.OrganizationSettingHistoryQuery:
		return q.Filter(), nil
	case *generated.PasswordResetTokenQuery:
		return q.Filter(), nil
	case *generated.PersonalAccessTokenQuery:
		return q.Filter(), nil
	case *generated.ProcedureQuery:
		return q.Filter(), nil
	case *generated.ProcedureHistoryQuery:
		return q.Filter(), nil
	case *generated.ProgramQuery:
		return q.Filter(), nil
	case *generated.ProgramHistoryQuery:
		return q.Filter(), nil
	case *generated.RiskQuery:
		return q.Filter(), nil
	case *generated.RiskHistoryQuery:
		return q.Filter(), nil
	case *generated.StandardQuery:
		return q.Filter(), nil
	case *generated.StandardHistoryQuery:
		return q.Filter(), nil
	case *generated.SubcontrolQuery:
		return q.Filter(), nil
	case *generated.SubcontrolHistoryQuery:
		return q.Filter(), nil
	case *generated.SubscriberQuery:
		return q.Filter(), nil
	case *generated.TFASettingQuery:
		return q.Filter(), nil
	case *generated.TaskQuery:
		return q.Filter(), nil
	case *generated.TaskHistoryQuery:
		return q.Filter(), nil
	case *generated.TemplateQuery:
		return q.Filter(), nil
	case *generated.TemplateHistoryQuery:
		return q.Filter(), nil
	case *generated.UserQuery:
		return q.Filter(), nil
	case *generated.UserHistoryQuery:
		return q.Filter(), nil
	case *generated.UserSettingQuery:
		return q.Filter(), nil
	case *generated.UserSettingHistoryQuery:
		return q.Filter(), nil
	case *generated.WebauthnQuery:
		return q.Filter(), nil
	case *generated.WebhookQuery:
		return q.Filter(), nil
	case *generated.WebhookHistoryQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m generated.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *generated.APITokenMutation:
		return m.Filter(), nil
	case *generated.ActionPlanMutation:
		return m.Filter(), nil
	case *generated.ActionPlanHistoryMutation:
		return m.Filter(), nil
	case *generated.ContactMutation:
		return m.Filter(), nil
	case *generated.ContactHistoryMutation:
		return m.Filter(), nil
	case *generated.ControlMutation:
		return m.Filter(), nil
	case *generated.ControlHistoryMutation:
		return m.Filter(), nil
	case *generated.ControlObjectiveMutation:
		return m.Filter(), nil
	case *generated.ControlObjectiveHistoryMutation:
		return m.Filter(), nil
	case *generated.DocumentDataMutation:
		return m.Filter(), nil
	case *generated.DocumentDataHistoryMutation:
		return m.Filter(), nil
	case *generated.EmailVerificationTokenMutation:
		return m.Filter(), nil
	case *generated.EntitlementMutation:
		return m.Filter(), nil
	case *generated.EntitlementHistoryMutation:
		return m.Filter(), nil
	case *generated.EntitlementPlanMutation:
		return m.Filter(), nil
	case *generated.EntitlementPlanFeatureMutation:
		return m.Filter(), nil
	case *generated.EntitlementPlanFeatureHistoryMutation:
		return m.Filter(), nil
	case *generated.EntitlementPlanHistoryMutation:
		return m.Filter(), nil
	case *generated.EntityMutation:
		return m.Filter(), nil
	case *generated.EntityHistoryMutation:
		return m.Filter(), nil
	case *generated.EntityTypeMutation:
		return m.Filter(), nil
	case *generated.EntityTypeHistoryMutation:
		return m.Filter(), nil
	case *generated.EventMutation:
		return m.Filter(), nil
	case *generated.EventHistoryMutation:
		return m.Filter(), nil
	case *generated.FeatureMutation:
		return m.Filter(), nil
	case *generated.FeatureHistoryMutation:
		return m.Filter(), nil
	case *generated.FileMutation:
		return m.Filter(), nil
	case *generated.FileHistoryMutation:
		return m.Filter(), nil
	case *generated.GroupMutation:
		return m.Filter(), nil
	case *generated.GroupHistoryMutation:
		return m.Filter(), nil
	case *generated.GroupMembershipMutation:
		return m.Filter(), nil
	case *generated.GroupMembershipHistoryMutation:
		return m.Filter(), nil
	case *generated.GroupSettingMutation:
		return m.Filter(), nil
	case *generated.GroupSettingHistoryMutation:
		return m.Filter(), nil
	case *generated.HushMutation:
		return m.Filter(), nil
	case *generated.HushHistoryMutation:
		return m.Filter(), nil
	case *generated.IntegrationMutation:
		return m.Filter(), nil
	case *generated.IntegrationHistoryMutation:
		return m.Filter(), nil
	case *generated.InternalPolicyMutation:
		return m.Filter(), nil
	case *generated.InternalPolicyHistoryMutation:
		return m.Filter(), nil
	case *generated.InviteMutation:
		return m.Filter(), nil
	case *generated.NarrativeMutation:
		return m.Filter(), nil
	case *generated.NarrativeHistoryMutation:
		return m.Filter(), nil
	case *generated.NoteMutation:
		return m.Filter(), nil
	case *generated.NoteHistoryMutation:
		return m.Filter(), nil
	case *generated.OauthProviderMutation:
		return m.Filter(), nil
	case *generated.OauthProviderHistoryMutation:
		return m.Filter(), nil
	case *generated.OhAuthTooTokenMutation:
		return m.Filter(), nil
	case *generated.OrgMembershipMutation:
		return m.Filter(), nil
	case *generated.OrgMembershipHistoryMutation:
		return m.Filter(), nil
	case *generated.OrganizationMutation:
		return m.Filter(), nil
	case *generated.OrganizationHistoryMutation:
		return m.Filter(), nil
	case *generated.OrganizationSettingMutation:
		return m.Filter(), nil
	case *generated.OrganizationSettingHistoryMutation:
		return m.Filter(), nil
	case *generated.PasswordResetTokenMutation:
		return m.Filter(), nil
	case *generated.PersonalAccessTokenMutation:
		return m.Filter(), nil
	case *generated.ProcedureMutation:
		return m.Filter(), nil
	case *generated.ProcedureHistoryMutation:
		return m.Filter(), nil
	case *generated.ProgramMutation:
		return m.Filter(), nil
	case *generated.ProgramHistoryMutation:
		return m.Filter(), nil
	case *generated.RiskMutation:
		return m.Filter(), nil
	case *generated.RiskHistoryMutation:
		return m.Filter(), nil
	case *generated.StandardMutation:
		return m.Filter(), nil
	case *generated.StandardHistoryMutation:
		return m.Filter(), nil
	case *generated.SubcontrolMutation:
		return m.Filter(), nil
	case *generated.SubcontrolHistoryMutation:
		return m.Filter(), nil
	case *generated.SubscriberMutation:
		return m.Filter(), nil
	case *generated.TFASettingMutation:
		return m.Filter(), nil
	case *generated.TaskMutation:
		return m.Filter(), nil
	case *generated.TaskHistoryMutation:
		return m.Filter(), nil
	case *generated.TemplateMutation:
		return m.Filter(), nil
	case *generated.TemplateHistoryMutation:
		return m.Filter(), nil
	case *generated.UserMutation:
		return m.Filter(), nil
	case *generated.UserHistoryMutation:
		return m.Filter(), nil
	case *generated.UserSettingMutation:
		return m.Filter(), nil
	case *generated.UserSettingHistoryMutation:
		return m.Filter(), nil
	case *generated.WebauthnMutation:
		return m.Filter(), nil
	case *generated.WebhookMutation:
		return m.Filter(), nil
	case *generated.WebhookHistoryMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("generated/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
