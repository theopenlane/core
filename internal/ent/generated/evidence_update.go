// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EvidenceUpdate is the builder for updating Evidence entities.
type EvidenceUpdate struct {
	config
	hooks     []Hook
	mutation  *EvidenceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EvidenceUpdate builder.
func (_u *EvidenceUpdate) Where(ps ...predicate.Evidence) *EvidenceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EvidenceUpdate) SetUpdatedAt(v time.Time) *EvidenceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *EvidenceUpdate) ClearUpdatedAt() *EvidenceUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *EvidenceUpdate) SetUpdatedBy(v string) *EvidenceUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableUpdatedBy(v *string) *EvidenceUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *EvidenceUpdate) ClearUpdatedBy() *EvidenceUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EvidenceUpdate) SetDeletedAt(v time.Time) *EvidenceUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableDeletedAt(v *time.Time) *EvidenceUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EvidenceUpdate) ClearDeletedAt() *EvidenceUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *EvidenceUpdate) SetDeletedBy(v string) *EvidenceUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableDeletedBy(v *string) *EvidenceUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *EvidenceUpdate) ClearDeletedBy() *EvidenceUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *EvidenceUpdate) SetTags(v []string) *EvidenceUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EvidenceUpdate) AppendTags(v []string) *EvidenceUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *EvidenceUpdate) ClearTags() *EvidenceUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *EvidenceUpdate) SetName(v string) *EvidenceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableName(v *string) *EvidenceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *EvidenceUpdate) SetDescription(v string) *EvidenceUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableDescription(v *string) *EvidenceUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *EvidenceUpdate) ClearDescription() *EvidenceUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCollectionProcedure sets the "collection_procedure" field.
func (_u *EvidenceUpdate) SetCollectionProcedure(v string) *EvidenceUpdate {
	_u.mutation.SetCollectionProcedure(v)
	return _u
}

// SetNillableCollectionProcedure sets the "collection_procedure" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableCollectionProcedure(v *string) *EvidenceUpdate {
	if v != nil {
		_u.SetCollectionProcedure(*v)
	}
	return _u
}

// ClearCollectionProcedure clears the value of the "collection_procedure" field.
func (_u *EvidenceUpdate) ClearCollectionProcedure() *EvidenceUpdate {
	_u.mutation.ClearCollectionProcedure()
	return _u
}

// SetCreationDate sets the "creation_date" field.
func (_u *EvidenceUpdate) SetCreationDate(v time.Time) *EvidenceUpdate {
	_u.mutation.SetCreationDate(v)
	return _u
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableCreationDate(v *time.Time) *EvidenceUpdate {
	if v != nil {
		_u.SetCreationDate(*v)
	}
	return _u
}

// SetRenewalDate sets the "renewal_date" field.
func (_u *EvidenceUpdate) SetRenewalDate(v time.Time) *EvidenceUpdate {
	_u.mutation.SetRenewalDate(v)
	return _u
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableRenewalDate(v *time.Time) *EvidenceUpdate {
	if v != nil {
		_u.SetRenewalDate(*v)
	}
	return _u
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (_u *EvidenceUpdate) ClearRenewalDate() *EvidenceUpdate {
	_u.mutation.ClearRenewalDate()
	return _u
}

// SetSource sets the "source" field.
func (_u *EvidenceUpdate) SetSource(v string) *EvidenceUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableSource(v *string) *EvidenceUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *EvidenceUpdate) ClearSource() *EvidenceUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetIsAutomated sets the "is_automated" field.
func (_u *EvidenceUpdate) SetIsAutomated(v bool) *EvidenceUpdate {
	_u.mutation.SetIsAutomated(v)
	return _u
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableIsAutomated(v *bool) *EvidenceUpdate {
	if v != nil {
		_u.SetIsAutomated(*v)
	}
	return _u
}

// ClearIsAutomated clears the value of the "is_automated" field.
func (_u *EvidenceUpdate) ClearIsAutomated() *EvidenceUpdate {
	_u.mutation.ClearIsAutomated()
	return _u
}

// SetURL sets the "url" field.
func (_u *EvidenceUpdate) SetURL(v string) *EvidenceUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableURL(v *string) *EvidenceUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *EvidenceUpdate) ClearURL() *EvidenceUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetStatus sets the "status" field.
func (_u *EvidenceUpdate) SetStatus(v enums.EvidenceStatus) *EvidenceUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EvidenceUpdate) SetNillableStatus(v *enums.EvidenceStatus) *EvidenceUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *EvidenceUpdate) ClearStatus() *EvidenceUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *EvidenceUpdate) AddControlIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *EvidenceUpdate) AddControls(v ...*Control) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *EvidenceUpdate) AddSubcontrolIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *EvidenceUpdate) AddSubcontrols(v ...*Subcontrol) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *EvidenceUpdate) AddControlObjectiveIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *EvidenceUpdate) AddControlObjectives(v ...*ControlObjective) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *EvidenceUpdate) AddControlImplementationIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *EvidenceUpdate) AddControlImplementations(v ...*ControlImplementation) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *EvidenceUpdate) AddFileIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *EvidenceUpdate) AddFiles(v ...*File) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *EvidenceUpdate) AddProgramIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *EvidenceUpdate) AddPrograms(v ...*Program) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *EvidenceUpdate) AddTaskIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *EvidenceUpdate) AddTasks(v ...*Task) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// Mutation returns the EvidenceMutation object of the builder.
func (_u *EvidenceUpdate) Mutation() *EvidenceMutation {
	return _u.mutation
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *EvidenceUpdate) ClearControls() *EvidenceUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *EvidenceUpdate) RemoveControlIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *EvidenceUpdate) RemoveControls(v ...*Control) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *EvidenceUpdate) ClearSubcontrols() *EvidenceUpdate {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *EvidenceUpdate) RemoveSubcontrolIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *EvidenceUpdate) RemoveSubcontrols(v ...*Subcontrol) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *EvidenceUpdate) ClearControlObjectives() *EvidenceUpdate {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *EvidenceUpdate) RemoveControlObjectiveIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *EvidenceUpdate) RemoveControlObjectives(v ...*ControlObjective) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *EvidenceUpdate) ClearControlImplementations() *EvidenceUpdate {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *EvidenceUpdate) RemoveControlImplementationIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *EvidenceUpdate) RemoveControlImplementations(v ...*ControlImplementation) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *EvidenceUpdate) ClearFiles() *EvidenceUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *EvidenceUpdate) RemoveFileIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *EvidenceUpdate) RemoveFiles(v ...*File) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *EvidenceUpdate) ClearPrograms() *EvidenceUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *EvidenceUpdate) RemoveProgramIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *EvidenceUpdate) RemovePrograms(v ...*Program) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *EvidenceUpdate) ClearTasks() *EvidenceUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *EvidenceUpdate) RemoveTaskIDs(ids ...string) *EvidenceUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *EvidenceUpdate) RemoveTasks(v ...*Task) *EvidenceUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EvidenceUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EvidenceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EvidenceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EvidenceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EvidenceUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if evidence.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized evidence.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := evidence.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *EvidenceUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := evidence.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Evidence.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.URL(); ok {
		if err := evidence.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`generated: validator failed for field "Evidence.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := evidence.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Evidence.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *EvidenceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EvidenceUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *EvidenceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evidence.Table, evidence.Columns, sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(evidence.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(evidence.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(evidence.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(evidence.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(evidence.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(evidence.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(evidence.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(evidence.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(evidence.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(evidence.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(evidence.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, evidence.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(evidence.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(evidence.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(evidence.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(evidence.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CollectionProcedure(); ok {
		_spec.SetField(evidence.FieldCollectionProcedure, field.TypeString, value)
	}
	if _u.mutation.CollectionProcedureCleared() {
		_spec.ClearField(evidence.FieldCollectionProcedure, field.TypeString)
	}
	if value, ok := _u.mutation.CreationDate(); ok {
		_spec.SetField(evidence.FieldCreationDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RenewalDate(); ok {
		_spec.SetField(evidence.FieldRenewalDate, field.TypeTime, value)
	}
	if _u.mutation.RenewalDateCleared() {
		_spec.ClearField(evidence.FieldRenewalDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(evidence.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(evidence.FieldSource, field.TypeString)
	}
	if value, ok := _u.mutation.IsAutomated(); ok {
		_spec.SetField(evidence.FieldIsAutomated, field.TypeBool, value)
	}
	if _u.mutation.IsAutomatedCleared() {
		_spec.ClearField(evidence.FieldIsAutomated, field.TypeBool)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(evidence.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(evidence.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(evidence.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(evidence.FieldStatus, field.TypeEnum)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlsTable,
			Columns: evidence.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlsTable,
			Columns: evidence.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlsTable,
			Columns: evidence.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.SubcontrolsTable,
			Columns: evidence.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.SubcontrolsTable,
			Columns: evidence.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.SubcontrolsTable,
			Columns: evidence.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlObjectivesTable,
			Columns: evidence.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlObjectivesTable,
			Columns: evidence.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlObjectivesTable,
			Columns: evidence.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evidence.ControlImplementationsTable,
			Columns: []string{evidence.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evidence.ControlImplementationsTable,
			Columns: []string{evidence.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evidence.ControlImplementationsTable,
			Columns: []string{evidence.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.FilesTable,
			Columns: evidence.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.FilesTable,
			Columns: evidence.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.FilesTable,
			Columns: evidence.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.ProgramsTable,
			Columns: evidence.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEvidence
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.ProgramsTable,
			Columns: evidence.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.ProgramsTable,
			Columns: evidence.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.TasksTable,
			Columns: evidence.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TaskEvidence
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.TasksTable,
			Columns: evidence.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TaskEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.TasksTable,
			Columns: evidence.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TaskEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Evidence
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evidence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EvidenceUpdateOne is the builder for updating a single Evidence entity.
type EvidenceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EvidenceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EvidenceUpdateOne) SetUpdatedAt(v time.Time) *EvidenceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *EvidenceUpdateOne) ClearUpdatedAt() *EvidenceUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *EvidenceUpdateOne) SetUpdatedBy(v string) *EvidenceUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableUpdatedBy(v *string) *EvidenceUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *EvidenceUpdateOne) ClearUpdatedBy() *EvidenceUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EvidenceUpdateOne) SetDeletedAt(v time.Time) *EvidenceUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableDeletedAt(v *time.Time) *EvidenceUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EvidenceUpdateOne) ClearDeletedAt() *EvidenceUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *EvidenceUpdateOne) SetDeletedBy(v string) *EvidenceUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableDeletedBy(v *string) *EvidenceUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *EvidenceUpdateOne) ClearDeletedBy() *EvidenceUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *EvidenceUpdateOne) SetTags(v []string) *EvidenceUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EvidenceUpdateOne) AppendTags(v []string) *EvidenceUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *EvidenceUpdateOne) ClearTags() *EvidenceUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *EvidenceUpdateOne) SetName(v string) *EvidenceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableName(v *string) *EvidenceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *EvidenceUpdateOne) SetDescription(v string) *EvidenceUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableDescription(v *string) *EvidenceUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *EvidenceUpdateOne) ClearDescription() *EvidenceUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCollectionProcedure sets the "collection_procedure" field.
func (_u *EvidenceUpdateOne) SetCollectionProcedure(v string) *EvidenceUpdateOne {
	_u.mutation.SetCollectionProcedure(v)
	return _u
}

// SetNillableCollectionProcedure sets the "collection_procedure" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableCollectionProcedure(v *string) *EvidenceUpdateOne {
	if v != nil {
		_u.SetCollectionProcedure(*v)
	}
	return _u
}

// ClearCollectionProcedure clears the value of the "collection_procedure" field.
func (_u *EvidenceUpdateOne) ClearCollectionProcedure() *EvidenceUpdateOne {
	_u.mutation.ClearCollectionProcedure()
	return _u
}

// SetCreationDate sets the "creation_date" field.
func (_u *EvidenceUpdateOne) SetCreationDate(v time.Time) *EvidenceUpdateOne {
	_u.mutation.SetCreationDate(v)
	return _u
}

// SetNillableCreationDate sets the "creation_date" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableCreationDate(v *time.Time) *EvidenceUpdateOne {
	if v != nil {
		_u.SetCreationDate(*v)
	}
	return _u
}

// SetRenewalDate sets the "renewal_date" field.
func (_u *EvidenceUpdateOne) SetRenewalDate(v time.Time) *EvidenceUpdateOne {
	_u.mutation.SetRenewalDate(v)
	return _u
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableRenewalDate(v *time.Time) *EvidenceUpdateOne {
	if v != nil {
		_u.SetRenewalDate(*v)
	}
	return _u
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (_u *EvidenceUpdateOne) ClearRenewalDate() *EvidenceUpdateOne {
	_u.mutation.ClearRenewalDate()
	return _u
}

// SetSource sets the "source" field.
func (_u *EvidenceUpdateOne) SetSource(v string) *EvidenceUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableSource(v *string) *EvidenceUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *EvidenceUpdateOne) ClearSource() *EvidenceUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetIsAutomated sets the "is_automated" field.
func (_u *EvidenceUpdateOne) SetIsAutomated(v bool) *EvidenceUpdateOne {
	_u.mutation.SetIsAutomated(v)
	return _u
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableIsAutomated(v *bool) *EvidenceUpdateOne {
	if v != nil {
		_u.SetIsAutomated(*v)
	}
	return _u
}

// ClearIsAutomated clears the value of the "is_automated" field.
func (_u *EvidenceUpdateOne) ClearIsAutomated() *EvidenceUpdateOne {
	_u.mutation.ClearIsAutomated()
	return _u
}

// SetURL sets the "url" field.
func (_u *EvidenceUpdateOne) SetURL(v string) *EvidenceUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableURL(v *string) *EvidenceUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *EvidenceUpdateOne) ClearURL() *EvidenceUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetStatus sets the "status" field.
func (_u *EvidenceUpdateOne) SetStatus(v enums.EvidenceStatus) *EvidenceUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EvidenceUpdateOne) SetNillableStatus(v *enums.EvidenceStatus) *EvidenceUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *EvidenceUpdateOne) ClearStatus() *EvidenceUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *EvidenceUpdateOne) AddControlIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *EvidenceUpdateOne) AddControls(v ...*Control) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *EvidenceUpdateOne) AddSubcontrolIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *EvidenceUpdateOne) AddSubcontrols(v ...*Subcontrol) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *EvidenceUpdateOne) AddControlObjectiveIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *EvidenceUpdateOne) AddControlObjectives(v ...*ControlObjective) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *EvidenceUpdateOne) AddControlImplementationIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *EvidenceUpdateOne) AddControlImplementations(v ...*ControlImplementation) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *EvidenceUpdateOne) AddFileIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *EvidenceUpdateOne) AddFiles(v ...*File) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *EvidenceUpdateOne) AddProgramIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *EvidenceUpdateOne) AddPrograms(v ...*Program) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *EvidenceUpdateOne) AddTaskIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *EvidenceUpdateOne) AddTasks(v ...*Task) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// Mutation returns the EvidenceMutation object of the builder.
func (_u *EvidenceUpdateOne) Mutation() *EvidenceMutation {
	return _u.mutation
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *EvidenceUpdateOne) ClearControls() *EvidenceUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *EvidenceUpdateOne) RemoveControlIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *EvidenceUpdateOne) RemoveControls(v ...*Control) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *EvidenceUpdateOne) ClearSubcontrols() *EvidenceUpdateOne {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *EvidenceUpdateOne) RemoveSubcontrolIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *EvidenceUpdateOne) RemoveSubcontrols(v ...*Subcontrol) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *EvidenceUpdateOne) ClearControlObjectives() *EvidenceUpdateOne {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *EvidenceUpdateOne) RemoveControlObjectiveIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *EvidenceUpdateOne) RemoveControlObjectives(v ...*ControlObjective) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *EvidenceUpdateOne) ClearControlImplementations() *EvidenceUpdateOne {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *EvidenceUpdateOne) RemoveControlImplementationIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *EvidenceUpdateOne) RemoveControlImplementations(v ...*ControlImplementation) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *EvidenceUpdateOne) ClearFiles() *EvidenceUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *EvidenceUpdateOne) RemoveFileIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *EvidenceUpdateOne) RemoveFiles(v ...*File) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *EvidenceUpdateOne) ClearPrograms() *EvidenceUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *EvidenceUpdateOne) RemoveProgramIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *EvidenceUpdateOne) RemovePrograms(v ...*Program) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *EvidenceUpdateOne) ClearTasks() *EvidenceUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *EvidenceUpdateOne) RemoveTaskIDs(ids ...string) *EvidenceUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *EvidenceUpdateOne) RemoveTasks(v ...*Task) *EvidenceUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the EvidenceUpdate builder.
func (_u *EvidenceUpdateOne) Where(ps ...predicate.Evidence) *EvidenceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EvidenceUpdateOne) Select(field string, fields ...string) *EvidenceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Evidence entity.
func (_u *EvidenceUpdateOne) Save(ctx context.Context) (*Evidence, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EvidenceUpdateOne) SaveX(ctx context.Context) *Evidence {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EvidenceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EvidenceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EvidenceUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if evidence.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized evidence.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := evidence.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *EvidenceUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := evidence.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Evidence.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.URL(); ok {
		if err := evidence.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`generated: validator failed for field "Evidence.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := evidence.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Evidence.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *EvidenceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EvidenceUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *EvidenceUpdateOne) sqlSave(ctx context.Context) (_node *Evidence, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evidence.Table, evidence.Columns, sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Evidence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evidence.FieldID)
		for _, f := range fields {
			if !evidence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != evidence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(evidence.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(evidence.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(evidence.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(evidence.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(evidence.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(evidence.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(evidence.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(evidence.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(evidence.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(evidence.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(evidence.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, evidence.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(evidence.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(evidence.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(evidence.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(evidence.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CollectionProcedure(); ok {
		_spec.SetField(evidence.FieldCollectionProcedure, field.TypeString, value)
	}
	if _u.mutation.CollectionProcedureCleared() {
		_spec.ClearField(evidence.FieldCollectionProcedure, field.TypeString)
	}
	if value, ok := _u.mutation.CreationDate(); ok {
		_spec.SetField(evidence.FieldCreationDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RenewalDate(); ok {
		_spec.SetField(evidence.FieldRenewalDate, field.TypeTime, value)
	}
	if _u.mutation.RenewalDateCleared() {
		_spec.ClearField(evidence.FieldRenewalDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(evidence.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(evidence.FieldSource, field.TypeString)
	}
	if value, ok := _u.mutation.IsAutomated(); ok {
		_spec.SetField(evidence.FieldIsAutomated, field.TypeBool, value)
	}
	if _u.mutation.IsAutomatedCleared() {
		_spec.ClearField(evidence.FieldIsAutomated, field.TypeBool)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(evidence.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(evidence.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(evidence.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(evidence.FieldStatus, field.TypeEnum)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlsTable,
			Columns: evidence.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlsTable,
			Columns: evidence.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlsTable,
			Columns: evidence.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.SubcontrolsTable,
			Columns: evidence.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.SubcontrolsTable,
			Columns: evidence.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.SubcontrolsTable,
			Columns: evidence.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlObjectivesTable,
			Columns: evidence.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlObjectivesTable,
			Columns: evidence.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.ControlObjectivesTable,
			Columns: evidence.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evidence.ControlImplementationsTable,
			Columns: []string{evidence.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evidence.ControlImplementationsTable,
			Columns: []string{evidence.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evidence.ControlImplementationsTable,
			Columns: []string{evidence.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.FilesTable,
			Columns: evidence.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.FilesTable,
			Columns: evidence.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   evidence.FilesTable,
			Columns: evidence.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.ProgramsTable,
			Columns: evidence.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEvidence
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.ProgramsTable,
			Columns: evidence.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.ProgramsTable,
			Columns: evidence.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.TasksTable,
			Columns: evidence.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TaskEvidence
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.TasksTable,
			Columns: evidence.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TaskEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   evidence.TasksTable,
			Columns: evidence.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TaskEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Evidence
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Evidence{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evidence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
