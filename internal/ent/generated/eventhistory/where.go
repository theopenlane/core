// Code generated by ent, DO NOT EDIT.

package eventhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/entx/history"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldRef, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedByID applies equality check predicate on the "created_by_id" field. It's identical to CreatedByIDEQ.
func CreatedByID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedByID, v))
}

// UpdatedByID applies equality check predicate on the "updated_by_id" field. It's identical to UpdatedByIDEQ.
func UpdatedByID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedByID, v))
}

// CreatedByUserID applies equality check predicate on the "created_by_user_id" field. It's identical to CreatedByUserIDEQ.
func CreatedByUserID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedByUserID, v))
}

// UpdatedByUserID applies equality check predicate on the "updated_by_user_id" field. It's identical to UpdatedByUserIDEQ.
func UpdatedByUserID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedByUserID, v))
}

// CreatedByServiceID applies equality check predicate on the "created_by_service_id" field. It's identical to CreatedByServiceIDEQ.
func CreatedByServiceID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedByServiceID, v))
}

// UpdatedByServiceID applies equality check predicate on the "updated_by_service_id" field. It's identical to UpdatedByServiceIDEQ.
func UpdatedByServiceID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedByServiceID, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldMappingID, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldEventID, v))
}

// CorrelationID applies equality check predicate on the "correlation_id" field. It's identical to CorrelationIDEQ.
func CorrelationID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCorrelationID, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldEventType, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldRef))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldRef, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v history.OpType) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v history.OpType) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...history.OpType) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...history.OpType) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByIDEQ applies the EQ predicate on the "created_by_id" field.
func CreatedByIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedByID, v))
}

// CreatedByIDNEQ applies the NEQ predicate on the "created_by_id" field.
func CreatedByIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldCreatedByID, v))
}

// CreatedByIDIn applies the In predicate on the "created_by_id" field.
func CreatedByIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldCreatedByID, vs...))
}

// CreatedByIDNotIn applies the NotIn predicate on the "created_by_id" field.
func CreatedByIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldCreatedByID, vs...))
}

// CreatedByIDGT applies the GT predicate on the "created_by_id" field.
func CreatedByIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldCreatedByID, v))
}

// CreatedByIDGTE applies the GTE predicate on the "created_by_id" field.
func CreatedByIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldCreatedByID, v))
}

// CreatedByIDLT applies the LT predicate on the "created_by_id" field.
func CreatedByIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldCreatedByID, v))
}

// CreatedByIDLTE applies the LTE predicate on the "created_by_id" field.
func CreatedByIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldCreatedByID, v))
}

// CreatedByIDContains applies the Contains predicate on the "created_by_id" field.
func CreatedByIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldCreatedByID, v))
}

// CreatedByIDHasPrefix applies the HasPrefix predicate on the "created_by_id" field.
func CreatedByIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldCreatedByID, v))
}

// CreatedByIDHasSuffix applies the HasSuffix predicate on the "created_by_id" field.
func CreatedByIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldCreatedByID, v))
}

// CreatedByIDIsNil applies the IsNil predicate on the "created_by_id" field.
func CreatedByIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldCreatedByID))
}

// CreatedByIDNotNil applies the NotNil predicate on the "created_by_id" field.
func CreatedByIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldCreatedByID))
}

// CreatedByIDEqualFold applies the EqualFold predicate on the "created_by_id" field.
func CreatedByIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldCreatedByID, v))
}

// CreatedByIDContainsFold applies the ContainsFold predicate on the "created_by_id" field.
func CreatedByIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldCreatedByID, v))
}

// UpdatedByIDEQ applies the EQ predicate on the "updated_by_id" field.
func UpdatedByIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedByID, v))
}

// UpdatedByIDNEQ applies the NEQ predicate on the "updated_by_id" field.
func UpdatedByIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldUpdatedByID, v))
}

// UpdatedByIDIn applies the In predicate on the "updated_by_id" field.
func UpdatedByIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDNotIn applies the NotIn predicate on the "updated_by_id" field.
func UpdatedByIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDGT applies the GT predicate on the "updated_by_id" field.
func UpdatedByIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldUpdatedByID, v))
}

// UpdatedByIDGTE applies the GTE predicate on the "updated_by_id" field.
func UpdatedByIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldUpdatedByID, v))
}

// UpdatedByIDLT applies the LT predicate on the "updated_by_id" field.
func UpdatedByIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldUpdatedByID, v))
}

// UpdatedByIDLTE applies the LTE predicate on the "updated_by_id" field.
func UpdatedByIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldUpdatedByID, v))
}

// UpdatedByIDContains applies the Contains predicate on the "updated_by_id" field.
func UpdatedByIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldUpdatedByID, v))
}

// UpdatedByIDHasPrefix applies the HasPrefix predicate on the "updated_by_id" field.
func UpdatedByIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldUpdatedByID, v))
}

// UpdatedByIDHasSuffix applies the HasSuffix predicate on the "updated_by_id" field.
func UpdatedByIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldUpdatedByID, v))
}

// UpdatedByIDIsNil applies the IsNil predicate on the "updated_by_id" field.
func UpdatedByIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldUpdatedByID))
}

// UpdatedByIDNotNil applies the NotNil predicate on the "updated_by_id" field.
func UpdatedByIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldUpdatedByID))
}

// UpdatedByIDEqualFold applies the EqualFold predicate on the "updated_by_id" field.
func UpdatedByIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldUpdatedByID, v))
}

// UpdatedByIDContainsFold applies the ContainsFold predicate on the "updated_by_id" field.
func UpdatedByIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldUpdatedByID, v))
}

// CreatedByUserIDEQ applies the EQ predicate on the "created_by_user_id" field.
func CreatedByUserIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedByUserID, v))
}

// CreatedByUserIDNEQ applies the NEQ predicate on the "created_by_user_id" field.
func CreatedByUserIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldCreatedByUserID, v))
}

// CreatedByUserIDIn applies the In predicate on the "created_by_user_id" field.
func CreatedByUserIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldCreatedByUserID, vs...))
}

// CreatedByUserIDNotIn applies the NotIn predicate on the "created_by_user_id" field.
func CreatedByUserIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldCreatedByUserID, vs...))
}

// CreatedByUserIDGT applies the GT predicate on the "created_by_user_id" field.
func CreatedByUserIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldCreatedByUserID, v))
}

// CreatedByUserIDGTE applies the GTE predicate on the "created_by_user_id" field.
func CreatedByUserIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldCreatedByUserID, v))
}

// CreatedByUserIDLT applies the LT predicate on the "created_by_user_id" field.
func CreatedByUserIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldCreatedByUserID, v))
}

// CreatedByUserIDLTE applies the LTE predicate on the "created_by_user_id" field.
func CreatedByUserIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldCreatedByUserID, v))
}

// CreatedByUserIDContains applies the Contains predicate on the "created_by_user_id" field.
func CreatedByUserIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldCreatedByUserID, v))
}

// CreatedByUserIDHasPrefix applies the HasPrefix predicate on the "created_by_user_id" field.
func CreatedByUserIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldCreatedByUserID, v))
}

// CreatedByUserIDHasSuffix applies the HasSuffix predicate on the "created_by_user_id" field.
func CreatedByUserIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldCreatedByUserID, v))
}

// CreatedByUserIDIsNil applies the IsNil predicate on the "created_by_user_id" field.
func CreatedByUserIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldCreatedByUserID))
}

// CreatedByUserIDNotNil applies the NotNil predicate on the "created_by_user_id" field.
func CreatedByUserIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldCreatedByUserID))
}

// CreatedByUserIDEqualFold applies the EqualFold predicate on the "created_by_user_id" field.
func CreatedByUserIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldCreatedByUserID, v))
}

// CreatedByUserIDContainsFold applies the ContainsFold predicate on the "created_by_user_id" field.
func CreatedByUserIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldCreatedByUserID, v))
}

// UpdatedByUserIDEQ applies the EQ predicate on the "updated_by_user_id" field.
func UpdatedByUserIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDNEQ applies the NEQ predicate on the "updated_by_user_id" field.
func UpdatedByUserIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDIn applies the In predicate on the "updated_by_user_id" field.
func UpdatedByUserIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldUpdatedByUserID, vs...))
}

// UpdatedByUserIDNotIn applies the NotIn predicate on the "updated_by_user_id" field.
func UpdatedByUserIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldUpdatedByUserID, vs...))
}

// UpdatedByUserIDGT applies the GT predicate on the "updated_by_user_id" field.
func UpdatedByUserIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDGTE applies the GTE predicate on the "updated_by_user_id" field.
func UpdatedByUserIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDLT applies the LT predicate on the "updated_by_user_id" field.
func UpdatedByUserIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDLTE applies the LTE predicate on the "updated_by_user_id" field.
func UpdatedByUserIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDContains applies the Contains predicate on the "updated_by_user_id" field.
func UpdatedByUserIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDHasPrefix applies the HasPrefix predicate on the "updated_by_user_id" field.
func UpdatedByUserIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDHasSuffix applies the HasSuffix predicate on the "updated_by_user_id" field.
func UpdatedByUserIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDIsNil applies the IsNil predicate on the "updated_by_user_id" field.
func UpdatedByUserIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldUpdatedByUserID))
}

// UpdatedByUserIDNotNil applies the NotNil predicate on the "updated_by_user_id" field.
func UpdatedByUserIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldUpdatedByUserID))
}

// UpdatedByUserIDEqualFold applies the EqualFold predicate on the "updated_by_user_id" field.
func UpdatedByUserIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDContainsFold applies the ContainsFold predicate on the "updated_by_user_id" field.
func UpdatedByUserIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldUpdatedByUserID, v))
}

// CreatedByServiceIDEQ applies the EQ predicate on the "created_by_service_id" field.
func CreatedByServiceIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDNEQ applies the NEQ predicate on the "created_by_service_id" field.
func CreatedByServiceIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDIn applies the In predicate on the "created_by_service_id" field.
func CreatedByServiceIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldCreatedByServiceID, vs...))
}

// CreatedByServiceIDNotIn applies the NotIn predicate on the "created_by_service_id" field.
func CreatedByServiceIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldCreatedByServiceID, vs...))
}

// CreatedByServiceIDGT applies the GT predicate on the "created_by_service_id" field.
func CreatedByServiceIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDGTE applies the GTE predicate on the "created_by_service_id" field.
func CreatedByServiceIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDLT applies the LT predicate on the "created_by_service_id" field.
func CreatedByServiceIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDLTE applies the LTE predicate on the "created_by_service_id" field.
func CreatedByServiceIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDContains applies the Contains predicate on the "created_by_service_id" field.
func CreatedByServiceIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDHasPrefix applies the HasPrefix predicate on the "created_by_service_id" field.
func CreatedByServiceIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDHasSuffix applies the HasSuffix predicate on the "created_by_service_id" field.
func CreatedByServiceIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDIsNil applies the IsNil predicate on the "created_by_service_id" field.
func CreatedByServiceIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldCreatedByServiceID))
}

// CreatedByServiceIDNotNil applies the NotNil predicate on the "created_by_service_id" field.
func CreatedByServiceIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldCreatedByServiceID))
}

// CreatedByServiceIDEqualFold applies the EqualFold predicate on the "created_by_service_id" field.
func CreatedByServiceIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDContainsFold applies the ContainsFold predicate on the "created_by_service_id" field.
func CreatedByServiceIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldCreatedByServiceID, v))
}

// UpdatedByServiceIDEQ applies the EQ predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDNEQ applies the NEQ predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDIn applies the In predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldUpdatedByServiceID, vs...))
}

// UpdatedByServiceIDNotIn applies the NotIn predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldUpdatedByServiceID, vs...))
}

// UpdatedByServiceIDGT applies the GT predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDGTE applies the GTE predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDLT applies the LT predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDLTE applies the LTE predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDContains applies the Contains predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDHasPrefix applies the HasPrefix predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDHasSuffix applies the HasSuffix predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDIsNil applies the IsNil predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldUpdatedByServiceID))
}

// UpdatedByServiceIDNotNil applies the NotNil predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldUpdatedByServiceID))
}

// UpdatedByServiceIDEqualFold applies the EqualFold predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDContainsFold applies the ContainsFold predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldUpdatedByServiceID, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldTags))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDIsNil applies the IsNil predicate on the "event_id" field.
func EventIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldEventID))
}

// EventIDNotNil applies the NotNil predicate on the "event_id" field.
func EventIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldEventID))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldEventID, v))
}

// CorrelationIDEQ applies the EQ predicate on the "correlation_id" field.
func CorrelationIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCorrelationID, v))
}

// CorrelationIDNEQ applies the NEQ predicate on the "correlation_id" field.
func CorrelationIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldCorrelationID, v))
}

// CorrelationIDIn applies the In predicate on the "correlation_id" field.
func CorrelationIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldCorrelationID, vs...))
}

// CorrelationIDNotIn applies the NotIn predicate on the "correlation_id" field.
func CorrelationIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldCorrelationID, vs...))
}

// CorrelationIDGT applies the GT predicate on the "correlation_id" field.
func CorrelationIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldCorrelationID, v))
}

// CorrelationIDGTE applies the GTE predicate on the "correlation_id" field.
func CorrelationIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldCorrelationID, v))
}

// CorrelationIDLT applies the LT predicate on the "correlation_id" field.
func CorrelationIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldCorrelationID, v))
}

// CorrelationIDLTE applies the LTE predicate on the "correlation_id" field.
func CorrelationIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldCorrelationID, v))
}

// CorrelationIDContains applies the Contains predicate on the "correlation_id" field.
func CorrelationIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldCorrelationID, v))
}

// CorrelationIDHasPrefix applies the HasPrefix predicate on the "correlation_id" field.
func CorrelationIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldCorrelationID, v))
}

// CorrelationIDHasSuffix applies the HasSuffix predicate on the "correlation_id" field.
func CorrelationIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldCorrelationID, v))
}

// CorrelationIDIsNil applies the IsNil predicate on the "correlation_id" field.
func CorrelationIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldCorrelationID))
}

// CorrelationIDNotNil applies the NotNil predicate on the "correlation_id" field.
func CorrelationIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldCorrelationID))
}

// CorrelationIDEqualFold applies the EqualFold predicate on the "correlation_id" field.
func CorrelationIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldCorrelationID, v))
}

// CorrelationIDContainsFold applies the ContainsFold predicate on the "correlation_id" field.
func CorrelationIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldCorrelationID, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldEventType, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldMetadata))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventHistory) predicate.EventHistory {
	return predicate.EventHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventHistory) predicate.EventHistory {
	return predicate.EventHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventHistory) predicate.EventHistory {
	return predicate.EventHistory(sql.NotPredicates(p))
}
