// Code generated by ent, DO NOT EDIT.

package eventhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/entx/history"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldRef, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldEventID, v))
}

// CorrelationID applies equality check predicate on the "correlation_id" field. It's identical to CorrelationIDEQ.
func CorrelationID(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCorrelationID, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldEventType, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldSource, v))
}

// AdditionalProcessingRequired applies equality check predicate on the "additional_processing_required" field. It's identical to AdditionalProcessingRequiredEQ.
func AdditionalProcessingRequired(v bool) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldAdditionalProcessingRequired, v))
}

// AdditionalProcessingDetails applies equality check predicate on the "additional_processing_details" field. It's identical to AdditionalProcessingDetailsEQ.
func AdditionalProcessingDetails(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldAdditionalProcessingDetails, v))
}

// ProcessedBy applies equality check predicate on the "processed_by" field. It's identical to ProcessedByEQ.
func ProcessedBy(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldProcessedBy, v))
}

// ProcessedAt applies equality check predicate on the "processed_at" field. It's identical to ProcessedAtEQ.
func ProcessedAt(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldProcessedAt, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldRef))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldRef, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v history.OpType) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v history.OpType) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...history.OpType) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...history.OpType) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldTags))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldEventID, v))
}

// CorrelationIDEQ applies the EQ predicate on the "correlation_id" field.
func CorrelationIDEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldCorrelationID, v))
}

// CorrelationIDNEQ applies the NEQ predicate on the "correlation_id" field.
func CorrelationIDNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldCorrelationID, v))
}

// CorrelationIDIn applies the In predicate on the "correlation_id" field.
func CorrelationIDIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldCorrelationID, vs...))
}

// CorrelationIDNotIn applies the NotIn predicate on the "correlation_id" field.
func CorrelationIDNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldCorrelationID, vs...))
}

// CorrelationIDGT applies the GT predicate on the "correlation_id" field.
func CorrelationIDGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldCorrelationID, v))
}

// CorrelationIDGTE applies the GTE predicate on the "correlation_id" field.
func CorrelationIDGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldCorrelationID, v))
}

// CorrelationIDLT applies the LT predicate on the "correlation_id" field.
func CorrelationIDLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldCorrelationID, v))
}

// CorrelationIDLTE applies the LTE predicate on the "correlation_id" field.
func CorrelationIDLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldCorrelationID, v))
}

// CorrelationIDContains applies the Contains predicate on the "correlation_id" field.
func CorrelationIDContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldCorrelationID, v))
}

// CorrelationIDHasPrefix applies the HasPrefix predicate on the "correlation_id" field.
func CorrelationIDHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldCorrelationID, v))
}

// CorrelationIDHasSuffix applies the HasSuffix predicate on the "correlation_id" field.
func CorrelationIDHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldCorrelationID, v))
}

// CorrelationIDIsNil applies the IsNil predicate on the "correlation_id" field.
func CorrelationIDIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldCorrelationID))
}

// CorrelationIDNotNil applies the NotNil predicate on the "correlation_id" field.
func CorrelationIDNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldCorrelationID))
}

// CorrelationIDEqualFold applies the EqualFold predicate on the "correlation_id" field.
func CorrelationIDEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldCorrelationID, v))
}

// CorrelationIDContainsFold applies the ContainsFold predicate on the "correlation_id" field.
func CorrelationIDContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldCorrelationID, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeIsNil applies the IsNil predicate on the "event_type" field.
func EventTypeIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldEventType))
}

// EventTypeNotNil applies the NotNil predicate on the "event_type" field.
func EventTypeNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldEventType))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldEventType, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldMetadata))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldSource))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldSource, v))
}

// AdditionalProcessingRequiredEQ applies the EQ predicate on the "additional_processing_required" field.
func AdditionalProcessingRequiredEQ(v bool) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldAdditionalProcessingRequired, v))
}

// AdditionalProcessingRequiredNEQ applies the NEQ predicate on the "additional_processing_required" field.
func AdditionalProcessingRequiredNEQ(v bool) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldAdditionalProcessingRequired, v))
}

// AdditionalProcessingRequiredIsNil applies the IsNil predicate on the "additional_processing_required" field.
func AdditionalProcessingRequiredIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldAdditionalProcessingRequired))
}

// AdditionalProcessingRequiredNotNil applies the NotNil predicate on the "additional_processing_required" field.
func AdditionalProcessingRequiredNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldAdditionalProcessingRequired))
}

// AdditionalProcessingDetailsEQ applies the EQ predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsNEQ applies the NEQ predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsIn applies the In predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldAdditionalProcessingDetails, vs...))
}

// AdditionalProcessingDetailsNotIn applies the NotIn predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldAdditionalProcessingDetails, vs...))
}

// AdditionalProcessingDetailsGT applies the GT predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsGTE applies the GTE predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsLT applies the LT predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsLTE applies the LTE predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsContains applies the Contains predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsHasPrefix applies the HasPrefix predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsHasSuffix applies the HasSuffix predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsIsNil applies the IsNil predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldAdditionalProcessingDetails))
}

// AdditionalProcessingDetailsNotNil applies the NotNil predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldAdditionalProcessingDetails))
}

// AdditionalProcessingDetailsEqualFold applies the EqualFold predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldAdditionalProcessingDetails, v))
}

// AdditionalProcessingDetailsContainsFold applies the ContainsFold predicate on the "additional_processing_details" field.
func AdditionalProcessingDetailsContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldAdditionalProcessingDetails, v))
}

// ProcessedByEQ applies the EQ predicate on the "processed_by" field.
func ProcessedByEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldProcessedBy, v))
}

// ProcessedByNEQ applies the NEQ predicate on the "processed_by" field.
func ProcessedByNEQ(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldProcessedBy, v))
}

// ProcessedByIn applies the In predicate on the "processed_by" field.
func ProcessedByIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldProcessedBy, vs...))
}

// ProcessedByNotIn applies the NotIn predicate on the "processed_by" field.
func ProcessedByNotIn(vs ...string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldProcessedBy, vs...))
}

// ProcessedByGT applies the GT predicate on the "processed_by" field.
func ProcessedByGT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldProcessedBy, v))
}

// ProcessedByGTE applies the GTE predicate on the "processed_by" field.
func ProcessedByGTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldProcessedBy, v))
}

// ProcessedByLT applies the LT predicate on the "processed_by" field.
func ProcessedByLT(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldProcessedBy, v))
}

// ProcessedByLTE applies the LTE predicate on the "processed_by" field.
func ProcessedByLTE(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldProcessedBy, v))
}

// ProcessedByContains applies the Contains predicate on the "processed_by" field.
func ProcessedByContains(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContains(FieldProcessedBy, v))
}

// ProcessedByHasPrefix applies the HasPrefix predicate on the "processed_by" field.
func ProcessedByHasPrefix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasPrefix(FieldProcessedBy, v))
}

// ProcessedByHasSuffix applies the HasSuffix predicate on the "processed_by" field.
func ProcessedByHasSuffix(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldHasSuffix(FieldProcessedBy, v))
}

// ProcessedByIsNil applies the IsNil predicate on the "processed_by" field.
func ProcessedByIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldProcessedBy))
}

// ProcessedByNotNil applies the NotNil predicate on the "processed_by" field.
func ProcessedByNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldProcessedBy))
}

// ProcessedByEqualFold applies the EqualFold predicate on the "processed_by" field.
func ProcessedByEqualFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEqualFold(FieldProcessedBy, v))
}

// ProcessedByContainsFold applies the ContainsFold predicate on the "processed_by" field.
func ProcessedByContainsFold(v string) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldContainsFold(FieldProcessedBy, v))
}

// ProcessedAtEQ applies the EQ predicate on the "processed_at" field.
func ProcessedAtEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldEQ(FieldProcessedAt, v))
}

// ProcessedAtNEQ applies the NEQ predicate on the "processed_at" field.
func ProcessedAtNEQ(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNEQ(FieldProcessedAt, v))
}

// ProcessedAtIn applies the In predicate on the "processed_at" field.
func ProcessedAtIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIn(FieldProcessedAt, vs...))
}

// ProcessedAtNotIn applies the NotIn predicate on the "processed_at" field.
func ProcessedAtNotIn(vs ...time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotIn(FieldProcessedAt, vs...))
}

// ProcessedAtGT applies the GT predicate on the "processed_at" field.
func ProcessedAtGT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGT(FieldProcessedAt, v))
}

// ProcessedAtGTE applies the GTE predicate on the "processed_at" field.
func ProcessedAtGTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldGTE(FieldProcessedAt, v))
}

// ProcessedAtLT applies the LT predicate on the "processed_at" field.
func ProcessedAtLT(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLT(FieldProcessedAt, v))
}

// ProcessedAtLTE applies the LTE predicate on the "processed_at" field.
func ProcessedAtLTE(v time.Time) predicate.EventHistory {
	return predicate.EventHistory(sql.FieldLTE(FieldProcessedAt, v))
}

// ProcessedAtIsNil applies the IsNil predicate on the "processed_at" field.
func ProcessedAtIsNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldIsNull(FieldProcessedAt))
}

// ProcessedAtNotNil applies the NotNil predicate on the "processed_at" field.
func ProcessedAtNotNil() predicate.EventHistory {
	return predicate.EventHistory(sql.FieldNotNull(FieldProcessedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventHistory) predicate.EventHistory {
	return predicate.EventHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventHistory) predicate.EventHistory {
	return predicate.EventHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventHistory) predicate.EventHistory {
	return predicate.EventHistory(sql.NotPredicates(p))
}
