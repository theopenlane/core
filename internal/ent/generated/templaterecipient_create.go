// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/templaterecipient"
	"github.com/theopenlane/core/pkg/enums"
)

// TemplateRecipientCreate is the builder for creating a TemplateRecipient entity.
type TemplateRecipientCreate struct {
	config
	mutation *TemplateRecipientMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (trc *TemplateRecipientCreate) SetCreatedAt(t time.Time) *TemplateRecipientCreate {
	trc.mutation.SetCreatedAt(t)
	return trc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableCreatedAt(t *time.Time) *TemplateRecipientCreate {
	if t != nil {
		trc.SetCreatedAt(*t)
	}
	return trc
}

// SetUpdatedAt sets the "updated_at" field.
func (trc *TemplateRecipientCreate) SetUpdatedAt(t time.Time) *TemplateRecipientCreate {
	trc.mutation.SetUpdatedAt(t)
	return trc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableUpdatedAt(t *time.Time) *TemplateRecipientCreate {
	if t != nil {
		trc.SetUpdatedAt(*t)
	}
	return trc
}

// SetCreatedBy sets the "created_by" field.
func (trc *TemplateRecipientCreate) SetCreatedBy(s string) *TemplateRecipientCreate {
	trc.mutation.SetCreatedBy(s)
	return trc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableCreatedBy(s *string) *TemplateRecipientCreate {
	if s != nil {
		trc.SetCreatedBy(*s)
	}
	return trc
}

// SetUpdatedBy sets the "updated_by" field.
func (trc *TemplateRecipientCreate) SetUpdatedBy(s string) *TemplateRecipientCreate {
	trc.mutation.SetUpdatedBy(s)
	return trc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableUpdatedBy(s *string) *TemplateRecipientCreate {
	if s != nil {
		trc.SetUpdatedBy(*s)
	}
	return trc
}

// SetDeletedAt sets the "deleted_at" field.
func (trc *TemplateRecipientCreate) SetDeletedAt(t time.Time) *TemplateRecipientCreate {
	trc.mutation.SetDeletedAt(t)
	return trc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableDeletedAt(t *time.Time) *TemplateRecipientCreate {
	if t != nil {
		trc.SetDeletedAt(*t)
	}
	return trc
}

// SetDeletedBy sets the "deleted_by" field.
func (trc *TemplateRecipientCreate) SetDeletedBy(s string) *TemplateRecipientCreate {
	trc.mutation.SetDeletedBy(s)
	return trc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableDeletedBy(s *string) *TemplateRecipientCreate {
	if s != nil {
		trc.SetDeletedBy(*s)
	}
	return trc
}

// SetOwnerID sets the "owner_id" field.
func (trc *TemplateRecipientCreate) SetOwnerID(s string) *TemplateRecipientCreate {
	trc.mutation.SetOwnerID(s)
	return trc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableOwnerID(s *string) *TemplateRecipientCreate {
	if s != nil {
		trc.SetOwnerID(*s)
	}
	return trc
}

// SetToken sets the "token" field.
func (trc *TemplateRecipientCreate) SetToken(s string) *TemplateRecipientCreate {
	trc.mutation.SetToken(s)
	return trc
}

// SetExpiresAt sets the "expires_at" field.
func (trc *TemplateRecipientCreate) SetExpiresAt(t time.Time) *TemplateRecipientCreate {
	trc.mutation.SetExpiresAt(t)
	return trc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableExpiresAt(t *time.Time) *TemplateRecipientCreate {
	if t != nil {
		trc.SetExpiresAt(*t)
	}
	return trc
}

// SetEmail sets the "email" field.
func (trc *TemplateRecipientCreate) SetEmail(s string) *TemplateRecipientCreate {
	trc.mutation.SetEmail(s)
	return trc
}

// SetSecret sets the "secret" field.
func (trc *TemplateRecipientCreate) SetSecret(s string) *TemplateRecipientCreate {
	trc.mutation.SetSecret(s)
	return trc
}

// SetTemplateID sets the "template_id" field.
func (trc *TemplateRecipientCreate) SetTemplateID(s string) *TemplateRecipientCreate {
	trc.mutation.SetTemplateID(s)
	return trc
}

// SetSendAttempts sets the "send_attempts" field.
func (trc *TemplateRecipientCreate) SetSendAttempts(i int) *TemplateRecipientCreate {
	trc.mutation.SetSendAttempts(i)
	return trc
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableSendAttempts(i *int) *TemplateRecipientCreate {
	if i != nil {
		trc.SetSendAttempts(*i)
	}
	return trc
}

// SetStatus sets the "status" field.
func (trc *TemplateRecipientCreate) SetStatus(ers enums.TemplateRecipientStatus) *TemplateRecipientCreate {
	trc.mutation.SetStatus(ers)
	return trc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableStatus(ers *enums.TemplateRecipientStatus) *TemplateRecipientCreate {
	if ers != nil {
		trc.SetStatus(*ers)
	}
	return trc
}

// SetDocumentDataID sets the "document_data_id" field.
func (trc *TemplateRecipientCreate) SetDocumentDataID(s string) *TemplateRecipientCreate {
	trc.mutation.SetDocumentDataID(s)
	return trc
}

// SetNillableDocumentDataID sets the "document_data_id" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableDocumentDataID(s *string) *TemplateRecipientCreate {
	if s != nil {
		trc.SetDocumentDataID(*s)
	}
	return trc
}

// SetID sets the "id" field.
func (trc *TemplateRecipientCreate) SetID(s string) *TemplateRecipientCreate {
	trc.mutation.SetID(s)
	return trc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableID(s *string) *TemplateRecipientCreate {
	if s != nil {
		trc.SetID(*s)
	}
	return trc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (trc *TemplateRecipientCreate) SetOwner(o *Organization) *TemplateRecipientCreate {
	return trc.SetOwnerID(o.ID)
}

// SetDocumentID sets the "document" edge to the DocumentData entity by ID.
func (trc *TemplateRecipientCreate) SetDocumentID(id string) *TemplateRecipientCreate {
	trc.mutation.SetDocumentID(id)
	return trc
}

// SetNillableDocumentID sets the "document" edge to the DocumentData entity by ID if the given value is not nil.
func (trc *TemplateRecipientCreate) SetNillableDocumentID(id *string) *TemplateRecipientCreate {
	if id != nil {
		trc = trc.SetDocumentID(*id)
	}
	return trc
}

// SetDocument sets the "document" edge to the DocumentData entity.
func (trc *TemplateRecipientCreate) SetDocument(d *DocumentData) *TemplateRecipientCreate {
	return trc.SetDocumentID(d.ID)
}

// SetTemplate sets the "template" edge to the Template entity.
func (trc *TemplateRecipientCreate) SetTemplate(t *Template) *TemplateRecipientCreate {
	return trc.SetTemplateID(t.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (trc *TemplateRecipientCreate) AddEventIDs(ids ...string) *TemplateRecipientCreate {
	trc.mutation.AddEventIDs(ids...)
	return trc
}

// AddEvents adds the "events" edges to the Event entity.
func (trc *TemplateRecipientCreate) AddEvents(e ...*Event) *TemplateRecipientCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return trc.AddEventIDs(ids...)
}

// Mutation returns the TemplateRecipientMutation object of the builder.
func (trc *TemplateRecipientCreate) Mutation() *TemplateRecipientMutation {
	return trc.mutation
}

// Save creates the TemplateRecipient in the database.
func (trc *TemplateRecipientCreate) Save(ctx context.Context) (*TemplateRecipient, error) {
	if err := trc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TemplateRecipientCreate) SaveX(ctx context.Context) *TemplateRecipient {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TemplateRecipientCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TemplateRecipientCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TemplateRecipientCreate) defaults() error {
	if _, ok := trc.mutation.CreatedAt(); !ok {
		if templaterecipient.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized templaterecipient.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := templaterecipient.DefaultCreatedAt()
		trc.mutation.SetCreatedAt(v)
	}
	if _, ok := trc.mutation.UpdatedAt(); !ok {
		if templaterecipient.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized templaterecipient.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := templaterecipient.DefaultUpdatedAt()
		trc.mutation.SetUpdatedAt(v)
	}
	if _, ok := trc.mutation.ExpiresAt(); !ok {
		v := templaterecipient.DefaultExpiresAt
		trc.mutation.SetExpiresAt(v)
	}
	if _, ok := trc.mutation.SendAttempts(); !ok {
		v := templaterecipient.DefaultSendAttempts
		trc.mutation.SetSendAttempts(v)
	}
	if _, ok := trc.mutation.Status(); !ok {
		v := templaterecipient.DefaultStatus
		trc.mutation.SetStatus(v)
	}
	if _, ok := trc.mutation.ID(); !ok {
		if templaterecipient.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized templaterecipient.DefaultID (forgotten import generated/runtime?)")
		}
		v := templaterecipient.DefaultID()
		trc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (trc *TemplateRecipientCreate) check() error {
	if v, ok := trc.mutation.OwnerID(); ok {
		if err := templaterecipient.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TemplateRecipient.owner_id": %w`, err)}
		}
	}
	if _, ok := trc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`generated: missing required field "TemplateRecipient.token"`)}
	}
	if v, ok := trc.mutation.Token(); ok {
		if err := templaterecipient.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "TemplateRecipient.token": %w`, err)}
		}
	}
	if _, ok := trc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`generated: missing required field "TemplateRecipient.expires_at"`)}
	}
	if _, ok := trc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`generated: missing required field "TemplateRecipient.email"`)}
	}
	if v, ok := trc.mutation.Email(); ok {
		if err := templaterecipient.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "TemplateRecipient.email": %w`, err)}
		}
	}
	if _, ok := trc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`generated: missing required field "TemplateRecipient.secret"`)}
	}
	if _, ok := trc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`generated: missing required field "TemplateRecipient.template_id"`)}
	}
	if _, ok := trc.mutation.SendAttempts(); !ok {
		return &ValidationError{Name: "send_attempts", err: errors.New(`generated: missing required field "TemplateRecipient.send_attempts"`)}
	}
	if _, ok := trc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "TemplateRecipient.status"`)}
	}
	if v, ok := trc.mutation.Status(); ok {
		if err := templaterecipient.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TemplateRecipient.status": %w`, err)}
		}
	}
	if len(trc.mutation.TemplateIDs()) == 0 {
		return &ValidationError{Name: "template", err: errors.New(`generated: missing required edge "TemplateRecipient.template"`)}
	}
	return nil
}

func (trc *TemplateRecipientCreate) sqlSave(ctx context.Context) (*TemplateRecipient, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TemplateRecipient.ID type: %T", _spec.ID.Value)
		}
	}
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TemplateRecipientCreate) createSpec() (*TemplateRecipient, *sqlgraph.CreateSpec) {
	var (
		_node = &TemplateRecipient{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(templaterecipient.Table, sqlgraph.NewFieldSpec(templaterecipient.FieldID, field.TypeString))
	)
	_spec.Schema = trc.schemaConfig.TemplateRecipient
	if id, ok := trc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := trc.mutation.CreatedAt(); ok {
		_spec.SetField(templaterecipient.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := trc.mutation.UpdatedAt(); ok {
		_spec.SetField(templaterecipient.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := trc.mutation.CreatedBy(); ok {
		_spec.SetField(templaterecipient.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := trc.mutation.UpdatedBy(); ok {
		_spec.SetField(templaterecipient.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := trc.mutation.DeletedAt(); ok {
		_spec.SetField(templaterecipient.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := trc.mutation.DeletedBy(); ok {
		_spec.SetField(templaterecipient.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := trc.mutation.Token(); ok {
		_spec.SetField(templaterecipient.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := trc.mutation.ExpiresAt(); ok {
		_spec.SetField(templaterecipient.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := trc.mutation.Email(); ok {
		_spec.SetField(templaterecipient.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := trc.mutation.Secret(); ok {
		_spec.SetField(templaterecipient.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := trc.mutation.SendAttempts(); ok {
		_spec.SetField(templaterecipient.FieldSendAttempts, field.TypeInt, value)
		_node.SendAttempts = value
	}
	if value, ok := trc.mutation.Status(); ok {
		_spec.SetField(templaterecipient.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := trc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templaterecipient.OwnerTable,
			Columns: []string{templaterecipient.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = trc.schemaConfig.TemplateRecipient
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   templaterecipient.DocumentTable,
			Columns: []string{templaterecipient.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = trc.schemaConfig.TemplateRecipient
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DocumentDataID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   templaterecipient.TemplateTable,
			Columns: []string{templaterecipient.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = trc.schemaConfig.TemplateRecipient
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templaterecipient.EventsTable,
			Columns: []string{templaterecipient.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = trc.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TemplateRecipientCreateBulk is the builder for creating many TemplateRecipient entities in bulk.
type TemplateRecipientCreateBulk struct {
	config
	err      error
	builders []*TemplateRecipientCreate
}

// Save creates the TemplateRecipient entities in the database.
func (trcb *TemplateRecipientCreateBulk) Save(ctx context.Context) ([]*TemplateRecipient, error) {
	if trcb.err != nil {
		return nil, trcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TemplateRecipient, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateRecipientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TemplateRecipientCreateBulk) SaveX(ctx context.Context) []*TemplateRecipient {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TemplateRecipientCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TemplateRecipientCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}
