// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
)

// ActionPlan is the model entity for the ActionPlan schema.
type ActionPlan struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the name of the action plan
	Name string `json:"name,omitempty"`
	// description of the action plan
	Description string `json:"description,omitempty"`
	// status of the action plan
	Status string `json:"status,omitempty"`
	// assigned to
	Assigned string `json:"assigned,omitempty"`
	// due date
	DueDate string `json:"due_date,omitempty"`
	// priority
	Priority string `json:"priority,omitempty"`
	// source of the action plan
	Source string `json:"source,omitempty"`
	// json schema
	Jsonschema map[string]interface{} `json:"jsonschema,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActionPlanQuery when eager-loading is set.
	Edges        ActionPlanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ActionPlanEdges holds the relations/edges for other nodes in the graph.
type ActionPlanEdges struct {
	// Standard holds the value of the standard edge.
	Standard []*Standard `json:"standard,omitempty"`
	// Risk holds the value of the risk edge.
	Risk []*Risk `json:"risk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedStandard map[string][]*Standard
	namedRisk     map[string][]*Risk
}

// StandardOrErr returns the Standard value or an error if the edge
// was not loaded in eager-loading.
func (e ActionPlanEdges) StandardOrErr() ([]*Standard, error) {
	if e.loadedTypes[0] {
		return e.Standard, nil
	}
	return nil, &NotLoadedError{edge: "standard"}
}

// RiskOrErr returns the Risk value or an error if the edge
// was not loaded in eager-loading.
func (e ActionPlanEdges) RiskOrErr() ([]*Risk, error) {
	if e.loadedTypes[1] {
		return e.Risk, nil
	}
	return nil, &NotLoadedError{edge: "risk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActionPlan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case actionplan.FieldTags, actionplan.FieldJsonschema:
			values[i] = new([]byte)
		case actionplan.FieldID, actionplan.FieldCreatedBy, actionplan.FieldUpdatedBy, actionplan.FieldDeletedBy, actionplan.FieldMappingID, actionplan.FieldName, actionplan.FieldDescription, actionplan.FieldStatus, actionplan.FieldAssigned, actionplan.FieldDueDate, actionplan.FieldPriority, actionplan.FieldSource:
			values[i] = new(sql.NullString)
		case actionplan.FieldCreatedAt, actionplan.FieldUpdatedAt, actionplan.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActionPlan fields.
func (ap *ActionPlan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actionplan.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ap.ID = value.String
			}
		case actionplan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ap.CreatedAt = value.Time
			}
		case actionplan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ap.UpdatedAt = value.Time
			}
		case actionplan.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ap.CreatedBy = value.String
			}
		case actionplan.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ap.UpdatedBy = value.String
			}
		case actionplan.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ap.DeletedAt = value.Time
			}
		case actionplan.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ap.DeletedBy = value.String
			}
		case actionplan.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				ap.MappingID = value.String
			}
		case actionplan.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ap.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case actionplan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ap.Name = value.String
			}
		case actionplan.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ap.Description = value.String
			}
		case actionplan.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ap.Status = value.String
			}
		case actionplan.FieldAssigned:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assigned", values[i])
			} else if value.Valid {
				ap.Assigned = value.String
			}
		case actionplan.FieldDueDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				ap.DueDate = value.String
			}
		case actionplan.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				ap.Priority = value.String
			}
		case actionplan.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ap.Source = value.String
			}
		case actionplan.FieldJsonschema:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field jsonschema", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ap.Jsonschema); err != nil {
					return fmt.Errorf("unmarshal field jsonschema: %w", err)
				}
			}
		default:
			ap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActionPlan.
// This includes values selected through modifiers, order, etc.
func (ap *ActionPlan) Value(name string) (ent.Value, error) {
	return ap.selectValues.Get(name)
}

// QueryStandard queries the "standard" edge of the ActionPlan entity.
func (ap *ActionPlan) QueryStandard() *StandardQuery {
	return NewActionPlanClient(ap.config).QueryStandard(ap)
}

// QueryRisk queries the "risk" edge of the ActionPlan entity.
func (ap *ActionPlan) QueryRisk() *RiskQuery {
	return NewActionPlanClient(ap.config).QueryRisk(ap)
}

// Update returns a builder for updating this ActionPlan.
// Note that you need to call ActionPlan.Unwrap() before calling this method if this ActionPlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *ActionPlan) Update() *ActionPlanUpdateOne {
	return NewActionPlanClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the ActionPlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *ActionPlan) Unwrap() *ActionPlan {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("generated: ActionPlan is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *ActionPlan) String() string {
	var builder strings.Builder
	builder.WriteString("ActionPlan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ap.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ap.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ap.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ap.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(ap.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ap.Tags))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ap.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ap.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ap.Status)
	builder.WriteString(", ")
	builder.WriteString("assigned=")
	builder.WriteString(ap.Assigned)
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(ap.DueDate)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(ap.Priority)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(ap.Source)
	builder.WriteString(", ")
	builder.WriteString("jsonschema=")
	builder.WriteString(fmt.Sprintf("%v", ap.Jsonschema))
	builder.WriteByte(')')
	return builder.String()
}

// NamedStandard returns the Standard named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ap *ActionPlan) NamedStandard(name string) ([]*Standard, error) {
	if ap.Edges.namedStandard == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ap.Edges.namedStandard[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ap *ActionPlan) appendNamedStandard(name string, edges ...*Standard) {
	if ap.Edges.namedStandard == nil {
		ap.Edges.namedStandard = make(map[string][]*Standard)
	}
	if len(edges) == 0 {
		ap.Edges.namedStandard[name] = []*Standard{}
	} else {
		ap.Edges.namedStandard[name] = append(ap.Edges.namedStandard[name], edges...)
	}
}

// NamedRisk returns the Risk named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ap *ActionPlan) NamedRisk(name string) ([]*Risk, error) {
	if ap.Edges.namedRisk == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ap.Edges.namedRisk[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ap *ActionPlan) appendNamedRisk(name string, edges ...*Risk) {
	if ap.Edges.namedRisk == nil {
		ap.Edges.namedRisk = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		ap.Edges.namedRisk[name] = []*Risk{}
	} else {
		ap.Edges.namedRisk[name] = append(ap.Edges.namedRisk[name], edges...)
	}
}

// ActionPlans is a parsable slice of ActionPlan.
type ActionPlans []*ActionPlan
