// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/impersonationevent"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ImpersonationEventUpdate is the builder for updating ImpersonationEvent entities.
type ImpersonationEventUpdate struct {
	config
	hooks     []Hook
	mutation  *ImpersonationEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ImpersonationEventUpdate builder.
func (_u *ImpersonationEventUpdate) Where(ps ...predicate.ImpersonationEvent) *ImpersonationEventUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ImpersonationEventUpdate) SetUpdatedAt(v time.Time) *ImpersonationEventUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ImpersonationEventUpdate) ClearUpdatedAt() *ImpersonationEventUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ImpersonationEventUpdate) SetUpdatedBy(v string) *ImpersonationEventUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableUpdatedBy(v *string) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ImpersonationEventUpdate) ClearUpdatedBy() *ImpersonationEventUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ImpersonationEventUpdate) SetDeletedAt(v time.Time) *ImpersonationEventUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableDeletedAt(v *time.Time) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ImpersonationEventUpdate) ClearDeletedAt() *ImpersonationEventUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ImpersonationEventUpdate) SetDeletedBy(v string) *ImpersonationEventUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableDeletedBy(v *string) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ImpersonationEventUpdate) ClearDeletedBy() *ImpersonationEventUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ImpersonationEventUpdate) SetTags(v []string) *ImpersonationEventUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ImpersonationEventUpdate) AppendTags(v []string) *ImpersonationEventUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ImpersonationEventUpdate) ClearTags() *ImpersonationEventUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetImpersonationType sets the "impersonation_type" field.
func (_u *ImpersonationEventUpdate) SetImpersonationType(v enums.ImpersonationType) *ImpersonationEventUpdate {
	_u.mutation.SetImpersonationType(v)
	return _u
}

// SetNillableImpersonationType sets the "impersonation_type" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableImpersonationType(v *enums.ImpersonationType) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetImpersonationType(*v)
	}
	return _u
}

// SetAction sets the "action" field.
func (_u *ImpersonationEventUpdate) SetAction(v enums.ImpersonationAction) *ImpersonationEventUpdate {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableAction(v *enums.ImpersonationAction) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *ImpersonationEventUpdate) SetReason(v string) *ImpersonationEventUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableReason(v *string) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *ImpersonationEventUpdate) ClearReason() *ImpersonationEventUpdate {
	_u.mutation.ClearReason()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ImpersonationEventUpdate) SetIPAddress(v string) *ImpersonationEventUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableIPAddress(v *string) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ImpersonationEventUpdate) ClearIPAddress() *ImpersonationEventUpdate {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ImpersonationEventUpdate) SetUserAgent(v string) *ImpersonationEventUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableUserAgent(v *string) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ImpersonationEventUpdate) ClearUserAgent() *ImpersonationEventUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *ImpersonationEventUpdate) SetScopes(v []string) *ImpersonationEventUpdate {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *ImpersonationEventUpdate) AppendScopes(v []string) *ImpersonationEventUpdate {
	_u.mutation.AppendScopes(v)
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *ImpersonationEventUpdate) ClearScopes() *ImpersonationEventUpdate {
	_u.mutation.ClearScopes()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ImpersonationEventUpdate) SetUserID(v string) *ImpersonationEventUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableUserID(v *string) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *ImpersonationEventUpdate) SetOrganizationID(v string) *ImpersonationEventUpdate {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableOrganizationID(v *string) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// SetTargetUserID sets the "target_user_id" field.
func (_u *ImpersonationEventUpdate) SetTargetUserID(v string) *ImpersonationEventUpdate {
	_u.mutation.SetTargetUserID(v)
	return _u
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (_u *ImpersonationEventUpdate) SetNillableTargetUserID(v *string) *ImpersonationEventUpdate {
	if v != nil {
		_u.SetTargetUserID(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ImpersonationEventUpdate) SetUser(v *User) *ImpersonationEventUpdate {
	return _u.SetUserID(v.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (_u *ImpersonationEventUpdate) SetTargetUser(v *User) *ImpersonationEventUpdate {
	return _u.SetTargetUserID(v.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *ImpersonationEventUpdate) SetOrganization(v *Organization) *ImpersonationEventUpdate {
	return _u.SetOrganizationID(v.ID)
}

// Mutation returns the ImpersonationEventMutation object of the builder.
func (_u *ImpersonationEventUpdate) Mutation() *ImpersonationEventMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ImpersonationEventUpdate) ClearUser() *ImpersonationEventUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (_u *ImpersonationEventUpdate) ClearTargetUser() *ImpersonationEventUpdate {
	_u.mutation.ClearTargetUser()
	return _u
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *ImpersonationEventUpdate) ClearOrganization() *ImpersonationEventUpdate {
	_u.mutation.ClearOrganization()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ImpersonationEventUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImpersonationEventUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ImpersonationEventUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImpersonationEventUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ImpersonationEventUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if impersonationevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized impersonationevent.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := impersonationevent.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImpersonationEventUpdate) check() error {
	if v, ok := _u.mutation.ImpersonationType(); ok {
		if err := impersonationevent.ImpersonationTypeValidator(v); err != nil {
			return &ValidationError{Name: "impersonation_type", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEvent.impersonation_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Action(); ok {
		if err := impersonationevent.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEvent.action": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ImpersonationEvent.user"`)
	}
	if _u.mutation.TargetUserCleared() && len(_u.mutation.TargetUserIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ImpersonationEvent.target_user"`)
	}
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ImpersonationEvent.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ImpersonationEventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ImpersonationEventUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ImpersonationEventUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(impersonationevent.Table, impersonationevent.Columns, sqlgraph.NewFieldSpec(impersonationevent.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(impersonationevent.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(impersonationevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(impersonationevent.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(impersonationevent.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(impersonationevent.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(impersonationevent.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(impersonationevent.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(impersonationevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(impersonationevent.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(impersonationevent.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(impersonationevent.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, impersonationevent.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(impersonationevent.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImpersonationType(); ok {
		_spec.SetField(impersonationevent.FieldImpersonationType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(impersonationevent.FieldAction, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(impersonationevent.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(impersonationevent.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(impersonationevent.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(impersonationevent.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(impersonationevent.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(impersonationevent.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(impersonationevent.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, impersonationevent.FieldScopes, value)
		})
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(impersonationevent.FieldScopes, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.UserTable,
			Columns: []string{impersonationevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.UserTable,
			Columns: []string{impersonationevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.TargetUserTable,
			Columns: []string{impersonationevent.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.TargetUserTable,
			Columns: []string{impersonationevent.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.OrganizationTable,
			Columns: []string{impersonationevent.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.OrganizationTable,
			Columns: []string{impersonationevent.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.ImpersonationEvent
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{impersonationevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ImpersonationEventUpdateOne is the builder for updating a single ImpersonationEvent entity.
type ImpersonationEventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ImpersonationEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ImpersonationEventUpdateOne) SetUpdatedAt(v time.Time) *ImpersonationEventUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ImpersonationEventUpdateOne) ClearUpdatedAt() *ImpersonationEventUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ImpersonationEventUpdateOne) SetUpdatedBy(v string) *ImpersonationEventUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableUpdatedBy(v *string) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ImpersonationEventUpdateOne) ClearUpdatedBy() *ImpersonationEventUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ImpersonationEventUpdateOne) SetDeletedAt(v time.Time) *ImpersonationEventUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableDeletedAt(v *time.Time) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ImpersonationEventUpdateOne) ClearDeletedAt() *ImpersonationEventUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ImpersonationEventUpdateOne) SetDeletedBy(v string) *ImpersonationEventUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableDeletedBy(v *string) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ImpersonationEventUpdateOne) ClearDeletedBy() *ImpersonationEventUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ImpersonationEventUpdateOne) SetTags(v []string) *ImpersonationEventUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ImpersonationEventUpdateOne) AppendTags(v []string) *ImpersonationEventUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ImpersonationEventUpdateOne) ClearTags() *ImpersonationEventUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetImpersonationType sets the "impersonation_type" field.
func (_u *ImpersonationEventUpdateOne) SetImpersonationType(v enums.ImpersonationType) *ImpersonationEventUpdateOne {
	_u.mutation.SetImpersonationType(v)
	return _u
}

// SetNillableImpersonationType sets the "impersonation_type" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableImpersonationType(v *enums.ImpersonationType) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetImpersonationType(*v)
	}
	return _u
}

// SetAction sets the "action" field.
func (_u *ImpersonationEventUpdateOne) SetAction(v enums.ImpersonationAction) *ImpersonationEventUpdateOne {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableAction(v *enums.ImpersonationAction) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *ImpersonationEventUpdateOne) SetReason(v string) *ImpersonationEventUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableReason(v *string) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *ImpersonationEventUpdateOne) ClearReason() *ImpersonationEventUpdateOne {
	_u.mutation.ClearReason()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ImpersonationEventUpdateOne) SetIPAddress(v string) *ImpersonationEventUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableIPAddress(v *string) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ImpersonationEventUpdateOne) ClearIPAddress() *ImpersonationEventUpdateOne {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ImpersonationEventUpdateOne) SetUserAgent(v string) *ImpersonationEventUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableUserAgent(v *string) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ImpersonationEventUpdateOne) ClearUserAgent() *ImpersonationEventUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *ImpersonationEventUpdateOne) SetScopes(v []string) *ImpersonationEventUpdateOne {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *ImpersonationEventUpdateOne) AppendScopes(v []string) *ImpersonationEventUpdateOne {
	_u.mutation.AppendScopes(v)
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *ImpersonationEventUpdateOne) ClearScopes() *ImpersonationEventUpdateOne {
	_u.mutation.ClearScopes()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ImpersonationEventUpdateOne) SetUserID(v string) *ImpersonationEventUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableUserID(v *string) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *ImpersonationEventUpdateOne) SetOrganizationID(v string) *ImpersonationEventUpdateOne {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableOrganizationID(v *string) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// SetTargetUserID sets the "target_user_id" field.
func (_u *ImpersonationEventUpdateOne) SetTargetUserID(v string) *ImpersonationEventUpdateOne {
	_u.mutation.SetTargetUserID(v)
	return _u
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (_u *ImpersonationEventUpdateOne) SetNillableTargetUserID(v *string) *ImpersonationEventUpdateOne {
	if v != nil {
		_u.SetTargetUserID(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ImpersonationEventUpdateOne) SetUser(v *User) *ImpersonationEventUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (_u *ImpersonationEventUpdateOne) SetTargetUser(v *User) *ImpersonationEventUpdateOne {
	return _u.SetTargetUserID(v.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *ImpersonationEventUpdateOne) SetOrganization(v *Organization) *ImpersonationEventUpdateOne {
	return _u.SetOrganizationID(v.ID)
}

// Mutation returns the ImpersonationEventMutation object of the builder.
func (_u *ImpersonationEventUpdateOne) Mutation() *ImpersonationEventMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ImpersonationEventUpdateOne) ClearUser() *ImpersonationEventUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (_u *ImpersonationEventUpdateOne) ClearTargetUser() *ImpersonationEventUpdateOne {
	_u.mutation.ClearTargetUser()
	return _u
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *ImpersonationEventUpdateOne) ClearOrganization() *ImpersonationEventUpdateOne {
	_u.mutation.ClearOrganization()
	return _u
}

// Where appends a list predicates to the ImpersonationEventUpdate builder.
func (_u *ImpersonationEventUpdateOne) Where(ps ...predicate.ImpersonationEvent) *ImpersonationEventUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ImpersonationEventUpdateOne) Select(field string, fields ...string) *ImpersonationEventUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ImpersonationEvent entity.
func (_u *ImpersonationEventUpdateOne) Save(ctx context.Context) (*ImpersonationEvent, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImpersonationEventUpdateOne) SaveX(ctx context.Context) *ImpersonationEvent {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ImpersonationEventUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImpersonationEventUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ImpersonationEventUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if impersonationevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized impersonationevent.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := impersonationevent.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImpersonationEventUpdateOne) check() error {
	if v, ok := _u.mutation.ImpersonationType(); ok {
		if err := impersonationevent.ImpersonationTypeValidator(v); err != nil {
			return &ValidationError{Name: "impersonation_type", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEvent.impersonation_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Action(); ok {
		if err := impersonationevent.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEvent.action": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ImpersonationEvent.user"`)
	}
	if _u.mutation.TargetUserCleared() && len(_u.mutation.TargetUserIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ImpersonationEvent.target_user"`)
	}
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ImpersonationEvent.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ImpersonationEventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ImpersonationEventUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ImpersonationEventUpdateOne) sqlSave(ctx context.Context) (_node *ImpersonationEvent, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(impersonationevent.Table, impersonationevent.Columns, sqlgraph.NewFieldSpec(impersonationevent.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ImpersonationEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, impersonationevent.FieldID)
		for _, f := range fields {
			if !impersonationevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != impersonationevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(impersonationevent.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(impersonationevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(impersonationevent.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(impersonationevent.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(impersonationevent.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(impersonationevent.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(impersonationevent.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(impersonationevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(impersonationevent.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(impersonationevent.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(impersonationevent.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, impersonationevent.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(impersonationevent.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImpersonationType(); ok {
		_spec.SetField(impersonationevent.FieldImpersonationType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(impersonationevent.FieldAction, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(impersonationevent.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(impersonationevent.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(impersonationevent.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(impersonationevent.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(impersonationevent.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(impersonationevent.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(impersonationevent.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, impersonationevent.FieldScopes, value)
		})
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(impersonationevent.FieldScopes, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.UserTable,
			Columns: []string{impersonationevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.UserTable,
			Columns: []string{impersonationevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.TargetUserTable,
			Columns: []string{impersonationevent.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.TargetUserTable,
			Columns: []string{impersonationevent.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.OrganizationTable,
			Columns: []string{impersonationevent.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impersonationevent.OrganizationTable,
			Columns: []string{impersonationevent.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ImpersonationEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.ImpersonationEvent
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ImpersonationEvent{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{impersonationevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
