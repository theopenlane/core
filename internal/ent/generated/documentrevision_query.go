// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/documentrevision"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// DocumentRevisionQuery is the builder for querying DocumentRevision entities.
type DocumentRevisionQuery struct {
	config
	ctx                *QueryContext
	order              []documentrevision.OrderOption
	inters             []Interceptor
	predicates         []predicate.DocumentRevision
	withSubmittedBy    *UserQuery
	withApprovedBy     *UserQuery
	withInternalPolicy *InternalPolicyQuery
	withProcedure      *ProcedureQuery
	withActionPlan     *ActionPlanQuery
	withFKs            bool
	loadTotal          []func(context.Context, []*DocumentRevision) error
	modifiers          []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DocumentRevisionQuery builder.
func (drq *DocumentRevisionQuery) Where(ps ...predicate.DocumentRevision) *DocumentRevisionQuery {
	drq.predicates = append(drq.predicates, ps...)
	return drq
}

// Limit the number of records to be returned by this query.
func (drq *DocumentRevisionQuery) Limit(limit int) *DocumentRevisionQuery {
	drq.ctx.Limit = &limit
	return drq
}

// Offset to start from.
func (drq *DocumentRevisionQuery) Offset(offset int) *DocumentRevisionQuery {
	drq.ctx.Offset = &offset
	return drq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drq *DocumentRevisionQuery) Unique(unique bool) *DocumentRevisionQuery {
	drq.ctx.Unique = &unique
	return drq
}

// Order specifies how the records should be ordered.
func (drq *DocumentRevisionQuery) Order(o ...documentrevision.OrderOption) *DocumentRevisionQuery {
	drq.order = append(drq.order, o...)
	return drq
}

// QuerySubmittedBy chains the current query on the "submitted_by" edge.
func (drq *DocumentRevisionQuery) QuerySubmittedBy() *UserQuery {
	query := (&UserClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentrevision.Table, documentrevision.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, documentrevision.SubmittedByTable, documentrevision.SubmittedByColumn),
		)
		schemaConfig := drq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.DocumentRevision
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprovedBy chains the current query on the "approved_by" edge.
func (drq *DocumentRevisionQuery) QueryApprovedBy() *UserQuery {
	query := (&UserClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentrevision.Table, documentrevision.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, documentrevision.ApprovedByTable, documentrevision.ApprovedByColumn),
		)
		schemaConfig := drq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.DocumentRevision
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicy chains the current query on the "internal_policy" edge.
func (drq *DocumentRevisionQuery) QueryInternalPolicy() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentrevision.Table, documentrevision.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, documentrevision.InternalPolicyTable, documentrevision.InternalPolicyColumn),
		)
		schemaConfig := drq.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.DocumentRevision
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedure chains the current query on the "procedure" edge.
func (drq *DocumentRevisionQuery) QueryProcedure() *ProcedureQuery {
	query := (&ProcedureClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentrevision.Table, documentrevision.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, documentrevision.ProcedureTable, documentrevision.ProcedureColumn),
		)
		schemaConfig := drq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.DocumentRevision
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActionPlan chains the current query on the "action_plan" edge.
func (drq *DocumentRevisionQuery) QueryActionPlan() *ActionPlanQuery {
	query := (&ActionPlanClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentrevision.Table, documentrevision.FieldID, selector),
			sqlgraph.To(actionplan.Table, actionplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, documentrevision.ActionPlanTable, documentrevision.ActionPlanColumn),
		)
		schemaConfig := drq.schemaConfig
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.DocumentRevision
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DocumentRevision entity from the query.
// Returns a *NotFoundError when no DocumentRevision was found.
func (drq *DocumentRevisionQuery) First(ctx context.Context) (*DocumentRevision, error) {
	nodes, err := drq.Limit(1).All(setContextOp(ctx, drq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{documentrevision.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drq *DocumentRevisionQuery) FirstX(ctx context.Context) *DocumentRevision {
	node, err := drq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DocumentRevision ID from the query.
// Returns a *NotFoundError when no DocumentRevision ID was found.
func (drq *DocumentRevisionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = drq.Limit(1).IDs(setContextOp(ctx, drq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{documentrevision.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drq *DocumentRevisionQuery) FirstIDX(ctx context.Context) string {
	id, err := drq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DocumentRevision entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DocumentRevision entity is found.
// Returns a *NotFoundError when no DocumentRevision entities are found.
func (drq *DocumentRevisionQuery) Only(ctx context.Context) (*DocumentRevision, error) {
	nodes, err := drq.Limit(2).All(setContextOp(ctx, drq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{documentrevision.Label}
	default:
		return nil, &NotSingularError{documentrevision.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drq *DocumentRevisionQuery) OnlyX(ctx context.Context) *DocumentRevision {
	node, err := drq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DocumentRevision ID in the query.
// Returns a *NotSingularError when more than one DocumentRevision ID is found.
// Returns a *NotFoundError when no entities are found.
func (drq *DocumentRevisionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = drq.Limit(2).IDs(setContextOp(ctx, drq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{documentrevision.Label}
	default:
		err = &NotSingularError{documentrevision.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drq *DocumentRevisionQuery) OnlyIDX(ctx context.Context) string {
	id, err := drq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DocumentRevisions.
func (drq *DocumentRevisionQuery) All(ctx context.Context) ([]*DocumentRevision, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryAll)
	if err := drq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DocumentRevision, *DocumentRevisionQuery]()
	return withInterceptors[[]*DocumentRevision](ctx, drq, qr, drq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drq *DocumentRevisionQuery) AllX(ctx context.Context) []*DocumentRevision {
	nodes, err := drq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DocumentRevision IDs.
func (drq *DocumentRevisionQuery) IDs(ctx context.Context) (ids []string, err error) {
	if drq.ctx.Unique == nil && drq.path != nil {
		drq.Unique(true)
	}
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryIDs)
	if err = drq.Select(documentrevision.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drq *DocumentRevisionQuery) IDsX(ctx context.Context) []string {
	ids, err := drq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drq *DocumentRevisionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryCount)
	if err := drq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drq, querierCount[*DocumentRevisionQuery](), drq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drq *DocumentRevisionQuery) CountX(ctx context.Context) int {
	count, err := drq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drq *DocumentRevisionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryExist)
	switch _, err := drq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drq *DocumentRevisionQuery) ExistX(ctx context.Context) bool {
	exist, err := drq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DocumentRevisionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drq *DocumentRevisionQuery) Clone() *DocumentRevisionQuery {
	if drq == nil {
		return nil
	}
	return &DocumentRevisionQuery{
		config:             drq.config,
		ctx:                drq.ctx.Clone(),
		order:              append([]documentrevision.OrderOption{}, drq.order...),
		inters:             append([]Interceptor{}, drq.inters...),
		predicates:         append([]predicate.DocumentRevision{}, drq.predicates...),
		withSubmittedBy:    drq.withSubmittedBy.Clone(),
		withApprovedBy:     drq.withApprovedBy.Clone(),
		withInternalPolicy: drq.withInternalPolicy.Clone(),
		withProcedure:      drq.withProcedure.Clone(),
		withActionPlan:     drq.withActionPlan.Clone(),
		// clone intermediate query.
		sql:       drq.sql.Clone(),
		path:      drq.path,
		modifiers: append([]func(*sql.Selector){}, drq.modifiers...),
	}
}

// WithSubmittedBy tells the query-builder to eager-load the nodes that are connected to
// the "submitted_by" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DocumentRevisionQuery) WithSubmittedBy(opts ...func(*UserQuery)) *DocumentRevisionQuery {
	query := (&UserClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withSubmittedBy = query
	return drq
}

// WithApprovedBy tells the query-builder to eager-load the nodes that are connected to
// the "approved_by" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DocumentRevisionQuery) WithApprovedBy(opts ...func(*UserQuery)) *DocumentRevisionQuery {
	query := (&UserClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withApprovedBy = query
	return drq
}

// WithInternalPolicy tells the query-builder to eager-load the nodes that are connected to
// the "internal_policy" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DocumentRevisionQuery) WithInternalPolicy(opts ...func(*InternalPolicyQuery)) *DocumentRevisionQuery {
	query := (&InternalPolicyClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withInternalPolicy = query
	return drq
}

// WithProcedure tells the query-builder to eager-load the nodes that are connected to
// the "procedure" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DocumentRevisionQuery) WithProcedure(opts ...func(*ProcedureQuery)) *DocumentRevisionQuery {
	query := (&ProcedureClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withProcedure = query
	return drq
}

// WithActionPlan tells the query-builder to eager-load the nodes that are connected to
// the "action_plan" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DocumentRevisionQuery) WithActionPlan(opts ...func(*ActionPlanQuery)) *DocumentRevisionQuery {
	query := (&ActionPlanClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withActionPlan = query
	return drq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DocumentRevision.Query().
//		GroupBy(documentrevision.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (drq *DocumentRevisionQuery) GroupBy(field string, fields ...string) *DocumentRevisionGroupBy {
	drq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DocumentRevisionGroupBy{build: drq}
	grbuild.flds = &drq.ctx.Fields
	grbuild.label = documentrevision.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.DocumentRevision.Query().
//		Select(documentrevision.FieldCreatedAt).
//		Scan(ctx, &v)
func (drq *DocumentRevisionQuery) Select(fields ...string) *DocumentRevisionSelect {
	drq.ctx.Fields = append(drq.ctx.Fields, fields...)
	sbuild := &DocumentRevisionSelect{DocumentRevisionQuery: drq}
	sbuild.label = documentrevision.Label
	sbuild.flds, sbuild.scan = &drq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DocumentRevisionSelect configured with the given aggregations.
func (drq *DocumentRevisionQuery) Aggregate(fns ...AggregateFunc) *DocumentRevisionSelect {
	return drq.Select().Aggregate(fns...)
}

func (drq *DocumentRevisionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drq); err != nil {
				return err
			}
		}
	}
	for _, f := range drq.ctx.Fields {
		if !documentrevision.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if drq.path != nil {
		prev, err := drq.path(ctx)
		if err != nil {
			return err
		}
		drq.sql = prev
	}
	if documentrevision.Policy == nil {
		return errors.New("generated: uninitialized documentrevision.Policy (forgotten import generated/runtime?)")
	}
	if err := documentrevision.Policy.EvalQuery(ctx, drq); err != nil {
		return err
	}
	return nil
}

func (drq *DocumentRevisionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DocumentRevision, error) {
	var (
		nodes       = []*DocumentRevision{}
		withFKs     = drq.withFKs
		_spec       = drq.querySpec()
		loadedTypes = [5]bool{
			drq.withSubmittedBy != nil,
			drq.withApprovedBy != nil,
			drq.withInternalPolicy != nil,
			drq.withProcedure != nil,
			drq.withActionPlan != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, documentrevision.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DocumentRevision).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DocumentRevision{config: drq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = drq.schemaConfig.DocumentRevision
	ctx = internal.NewSchemaConfigContext(ctx, drq.schemaConfig)
	if len(drq.modifiers) > 0 {
		_spec.Modifiers = drq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drq.withSubmittedBy; query != nil {
		if err := drq.loadSubmittedBy(ctx, query, nodes, nil,
			func(n *DocumentRevision, e *User) { n.Edges.SubmittedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := drq.withApprovedBy; query != nil {
		if err := drq.loadApprovedBy(ctx, query, nodes, nil,
			func(n *DocumentRevision, e *User) { n.Edges.ApprovedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := drq.withInternalPolicy; query != nil {
		if err := drq.loadInternalPolicy(ctx, query, nodes, nil,
			func(n *DocumentRevision, e *InternalPolicy) { n.Edges.InternalPolicy = e }); err != nil {
			return nil, err
		}
	}
	if query := drq.withProcedure; query != nil {
		if err := drq.loadProcedure(ctx, query, nodes, nil,
			func(n *DocumentRevision, e *Procedure) { n.Edges.Procedure = e }); err != nil {
			return nil, err
		}
	}
	if query := drq.withActionPlan; query != nil {
		if err := drq.loadActionPlan(ctx, query, nodes, nil,
			func(n *DocumentRevision, e *ActionPlan) { n.Edges.ActionPlan = e }); err != nil {
			return nil, err
		}
	}
	for i := range drq.loadTotal {
		if err := drq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drq *DocumentRevisionQuery) loadSubmittedBy(ctx context.Context, query *UserQuery, nodes []*DocumentRevision, init func(*DocumentRevision), assign func(*DocumentRevision, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DocumentRevision)
	for i := range nodes {
		fk := nodes[i].SubmittedByID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "submitted_by_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drq *DocumentRevisionQuery) loadApprovedBy(ctx context.Context, query *UserQuery, nodes []*DocumentRevision, init func(*DocumentRevision), assign func(*DocumentRevision, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DocumentRevision)
	for i := range nodes {
		fk := nodes[i].ApprovedByID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "approved_by_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drq *DocumentRevisionQuery) loadInternalPolicy(ctx context.Context, query *InternalPolicyQuery, nodes []*DocumentRevision, init func(*DocumentRevision), assign func(*DocumentRevision, *InternalPolicy)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DocumentRevision)
	for i := range nodes {
		fk := nodes[i].InternalPolicyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(internalpolicy.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "internal_policy_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drq *DocumentRevisionQuery) loadProcedure(ctx context.Context, query *ProcedureQuery, nodes []*DocumentRevision, init func(*DocumentRevision), assign func(*DocumentRevision, *Procedure)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DocumentRevision)
	for i := range nodes {
		fk := nodes[i].ProcedureID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(procedure.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "procedure_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drq *DocumentRevisionQuery) loadActionPlan(ctx context.Context, query *ActionPlanQuery, nodes []*DocumentRevision, init func(*DocumentRevision), assign func(*DocumentRevision, *ActionPlan)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DocumentRevision)
	for i := range nodes {
		fk := nodes[i].ActionPlanID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(actionplan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "action_plan_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (drq *DocumentRevisionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drq.querySpec()
	_spec.Node.Schema = drq.schemaConfig.DocumentRevision
	ctx = internal.NewSchemaConfigContext(ctx, drq.schemaConfig)
	if len(drq.modifiers) > 0 {
		_spec.Modifiers = drq.modifiers
	}
	_spec.Node.Columns = drq.ctx.Fields
	if len(drq.ctx.Fields) > 0 {
		_spec.Unique = drq.ctx.Unique != nil && *drq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drq.driver, _spec)
}

func (drq *DocumentRevisionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(documentrevision.Table, documentrevision.Columns, sqlgraph.NewFieldSpec(documentrevision.FieldID, field.TypeString))
	_spec.From = drq.sql
	if unique := drq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drq.path != nil {
		_spec.Unique = true
	}
	if fields := drq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, documentrevision.FieldID)
		for i := range fields {
			if fields[i] != documentrevision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if drq.withSubmittedBy != nil {
			_spec.Node.AddColumnOnce(documentrevision.FieldSubmittedByID)
		}
		if drq.withApprovedBy != nil {
			_spec.Node.AddColumnOnce(documentrevision.FieldApprovedByID)
		}
		if drq.withInternalPolicy != nil {
			_spec.Node.AddColumnOnce(documentrevision.FieldInternalPolicyID)
		}
		if drq.withProcedure != nil {
			_spec.Node.AddColumnOnce(documentrevision.FieldProcedureID)
		}
		if drq.withActionPlan != nil {
			_spec.Node.AddColumnOnce(documentrevision.FieldActionPlanID)
		}
	}
	if ps := drq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drq *DocumentRevisionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drq.driver.Dialect())
	t1 := builder.Table(documentrevision.Table)
	columns := drq.ctx.Fields
	if len(columns) == 0 {
		columns = documentrevision.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drq.sql != nil {
		selector = drq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drq.ctx.Unique != nil && *drq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(drq.schemaConfig.DocumentRevision)
	ctx = internal.NewSchemaConfigContext(ctx, drq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range drq.modifiers {
		m(selector)
	}
	for _, p := range drq.predicates {
		p(selector)
	}
	for _, p := range drq.order {
		p(selector)
	}
	if offset := drq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (drq *DocumentRevisionQuery) Modify(modifiers ...func(s *sql.Selector)) *DocumentRevisionSelect {
	drq.modifiers = append(drq.modifiers, modifiers...)
	return drq.Select()
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (drq *DocumentRevisionQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryIDs)
	if err := drq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return drq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, drq, qr, drq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// DocumentRevisionGroupBy is the group-by builder for DocumentRevision entities.
type DocumentRevisionGroupBy struct {
	selector
	build *DocumentRevisionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drgb *DocumentRevisionGroupBy) Aggregate(fns ...AggregateFunc) *DocumentRevisionGroupBy {
	drgb.fns = append(drgb.fns, fns...)
	return drgb
}

// Scan applies the selector query and scans the result into the given value.
func (drgb *DocumentRevisionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drgb.build.ctx, ent.OpQueryGroupBy)
	if err := drgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentRevisionQuery, *DocumentRevisionGroupBy](ctx, drgb.build, drgb, drgb.build.inters, v)
}

func (drgb *DocumentRevisionGroupBy) sqlScan(ctx context.Context, root *DocumentRevisionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drgb.fns))
	for _, fn := range drgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drgb.flds)+len(drgb.fns))
		for _, f := range *drgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DocumentRevisionSelect is the builder for selecting fields of DocumentRevision entities.
type DocumentRevisionSelect struct {
	*DocumentRevisionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drs *DocumentRevisionSelect) Aggregate(fns ...AggregateFunc) *DocumentRevisionSelect {
	drs.fns = append(drs.fns, fns...)
	return drs
}

// Scan applies the selector query and scans the result into the given value.
func (drs *DocumentRevisionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drs.ctx, ent.OpQuerySelect)
	if err := drs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentRevisionQuery, *DocumentRevisionSelect](ctx, drs.DocumentRevisionQuery, drs, drs.inters, v)
}

func (drs *DocumentRevisionSelect) sqlScan(ctx context.Context, root *DocumentRevisionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drs.fns))
	for _, fn := range drs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (drs *DocumentRevisionSelect) Modify(modifiers ...func(s *sql.Selector)) *DocumentRevisionSelect {
	drs.modifiers = append(drs.modifiers, modifiers...)
	return drs
}
