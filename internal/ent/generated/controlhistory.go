// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// ControlHistory is the model entity for the ControlHistory schema.
type ControlHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// description of what the control is supposed to accomplish
	Description string `json:"description,omitempty"`
	// internal reference id of the control, can be used for internal tracking
	ReferenceID string `json:"reference_id,omitempty"`
	// external auditor id of the control, can be used to map to external audit partner mappings
	AuditorReferenceID string `json:"auditor_reference_id,omitempty"`
	// status of the control
	Status enums.ControlStatus `json:"status,omitempty"`
	// source of the control, e.g. framework, template, custom, etc.
	Source enums.ControlSource `json:"source,omitempty"`
	// type of the control e.g. preventive, detective, corrective, or deterrent.
	ControlType enums.ControlType `json:"control_type,omitempty"`
	// category of the control
	Category string `json:"category,omitempty"`
	// category id of the control
	CategoryID string `json:"category_id,omitempty"`
	// subcategory of the control
	Subcategory string `json:"subcategory,omitempty"`
	// mapped categories of the control to other standards
	MappedCategories []string `json:"mapped_categories,omitempty"`
	// objectives of the audit assessment for the control
	AssessmentObjectives []models.AssessmentObjective `json:"assessment_objectives,omitempty"`
	// methods used to verify the control implementation during an audit
	AssessmentMethods []models.AssessmentMethod `json:"assessment_methods,omitempty"`
	// questions to ask to verify the control
	ControlQuestions []string `json:"control_questions,omitempty"`
	// implementation guidance for the control
	ImplementationGuidance []models.ImplementationGuidance `json:"implementation_guidance,omitempty"`
	// examples of evidence for the control
	ExampleEvidence []models.ExampleEvidence `json:"example_evidence,omitempty"`
	// references for the control
	References []models.Reference `json:"references,omitempty"`
	// the unique reference code for the control
	RefCode string `json:"ref_code,omitempty"`
	// the id of the standard that the control belongs to, if applicable
	StandardID   string `json:"standard_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ControlHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case controlhistory.FieldTags, controlhistory.FieldMappedCategories, controlhistory.FieldAssessmentObjectives, controlhistory.FieldAssessmentMethods, controlhistory.FieldControlQuestions, controlhistory.FieldImplementationGuidance, controlhistory.FieldExampleEvidence, controlhistory.FieldReferences:
			values[i] = new([]byte)
		case controlhistory.FieldOperation:
			values[i] = new(history.OpType)
		case controlhistory.FieldID, controlhistory.FieldRef, controlhistory.FieldCreatedBy, controlhistory.FieldUpdatedBy, controlhistory.FieldDeletedBy, controlhistory.FieldDisplayID, controlhistory.FieldOwnerID, controlhistory.FieldDescription, controlhistory.FieldReferenceID, controlhistory.FieldAuditorReferenceID, controlhistory.FieldStatus, controlhistory.FieldSource, controlhistory.FieldControlType, controlhistory.FieldCategory, controlhistory.FieldCategoryID, controlhistory.FieldSubcategory, controlhistory.FieldRefCode, controlhistory.FieldStandardID:
			values[i] = new(sql.NullString)
		case controlhistory.FieldHistoryTime, controlhistory.FieldCreatedAt, controlhistory.FieldUpdatedAt, controlhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ControlHistory fields.
func (ch *ControlHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case controlhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ch.ID = value.String
			}
		case controlhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				ch.HistoryTime = value.Time
			}
		case controlhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				ch.Ref = value.String
			}
		case controlhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				ch.Operation = *value
			}
		case controlhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ch.CreatedAt = value.Time
			}
		case controlhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ch.UpdatedAt = value.Time
			}
		case controlhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ch.CreatedBy = value.String
			}
		case controlhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ch.UpdatedBy = value.String
			}
		case controlhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ch.DeletedAt = value.Time
			}
		case controlhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ch.DeletedBy = value.String
			}
		case controlhistory.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				ch.DisplayID = value.String
			}
		case controlhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case controlhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				ch.OwnerID = value.String
			}
		case controlhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ch.Description = value.String
			}
		case controlhistory.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				ch.ReferenceID = value.String
			}
		case controlhistory.FieldAuditorReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auditor_reference_id", values[i])
			} else if value.Valid {
				ch.AuditorReferenceID = value.String
			}
		case controlhistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ch.Status = enums.ControlStatus(value.String)
			}
		case controlhistory.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ch.Source = enums.ControlSource(value.String)
			}
		case controlhistory.FieldControlType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_type", values[i])
			} else if value.Valid {
				ch.ControlType = enums.ControlType(value.String)
			}
		case controlhistory.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				ch.Category = value.String
			}
		case controlhistory.FieldCategoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				ch.CategoryID = value.String
			}
		case controlhistory.FieldSubcategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcategory", values[i])
			} else if value.Valid {
				ch.Subcategory = value.String
			}
		case controlhistory.FieldMappedCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mapped_categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.MappedCategories); err != nil {
					return fmt.Errorf("unmarshal field mapped_categories: %w", err)
				}
			}
		case controlhistory.FieldAssessmentObjectives:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_objectives", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.AssessmentObjectives); err != nil {
					return fmt.Errorf("unmarshal field assessment_objectives: %w", err)
				}
			}
		case controlhistory.FieldAssessmentMethods:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_methods", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.AssessmentMethods); err != nil {
					return fmt.Errorf("unmarshal field assessment_methods: %w", err)
				}
			}
		case controlhistory.FieldControlQuestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field control_questions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.ControlQuestions); err != nil {
					return fmt.Errorf("unmarshal field control_questions: %w", err)
				}
			}
		case controlhistory.FieldImplementationGuidance:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_guidance", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.ImplementationGuidance); err != nil {
					return fmt.Errorf("unmarshal field implementation_guidance: %w", err)
				}
			}
		case controlhistory.FieldExampleEvidence:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field example_evidence", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.ExampleEvidence); err != nil {
					return fmt.Errorf("unmarshal field example_evidence: %w", err)
				}
			}
		case controlhistory.FieldReferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field references", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.References); err != nil {
					return fmt.Errorf("unmarshal field references: %w", err)
				}
			}
		case controlhistory.FieldRefCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref_code", values[i])
			} else if value.Valid {
				ch.RefCode = value.String
			}
		case controlhistory.FieldStandardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field standard_id", values[i])
			} else if value.Valid {
				ch.StandardID = value.String
			}
		default:
			ch.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ControlHistory.
// This includes values selected through modifiers, order, etc.
func (ch *ControlHistory) Value(name string) (ent.Value, error) {
	return ch.selectValues.Get(name)
}

// Update returns a builder for updating this ControlHistory.
// Note that you need to call ControlHistory.Unwrap() before calling this method if this ControlHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ch *ControlHistory) Update() *ControlHistoryUpdateOne {
	return NewControlHistoryClient(ch.config).UpdateOne(ch)
}

// Unwrap unwraps the ControlHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ch *ControlHistory) Unwrap() *ControlHistory {
	_tx, ok := ch.config.driver.(*txDriver)
	if !ok {
		panic("generated: ControlHistory is not a transactional entity")
	}
	ch.config.driver = _tx.drv
	return ch
}

// String implements the fmt.Stringer.
func (ch *ControlHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ControlHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ch.ID))
	builder.WriteString("history_time=")
	builder.WriteString(ch.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(ch.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", ch.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ch.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ch.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ch.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ch.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ch.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ch.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(ch.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ch.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(ch.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ch.Description)
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(ch.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("auditor_reference_id=")
	builder.WriteString(ch.AuditorReferenceID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ch.Status))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", ch.Source))
	builder.WriteString(", ")
	builder.WriteString("control_type=")
	builder.WriteString(fmt.Sprintf("%v", ch.ControlType))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(ch.Category)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(ch.CategoryID)
	builder.WriteString(", ")
	builder.WriteString("subcategory=")
	builder.WriteString(ch.Subcategory)
	builder.WriteString(", ")
	builder.WriteString("mapped_categories=")
	builder.WriteString(fmt.Sprintf("%v", ch.MappedCategories))
	builder.WriteString(", ")
	builder.WriteString("assessment_objectives=")
	builder.WriteString(fmt.Sprintf("%v", ch.AssessmentObjectives))
	builder.WriteString(", ")
	builder.WriteString("assessment_methods=")
	builder.WriteString(fmt.Sprintf("%v", ch.AssessmentMethods))
	builder.WriteString(", ")
	builder.WriteString("control_questions=")
	builder.WriteString(fmt.Sprintf("%v", ch.ControlQuestions))
	builder.WriteString(", ")
	builder.WriteString("implementation_guidance=")
	builder.WriteString(fmt.Sprintf("%v", ch.ImplementationGuidance))
	builder.WriteString(", ")
	builder.WriteString("example_evidence=")
	builder.WriteString(fmt.Sprintf("%v", ch.ExampleEvidence))
	builder.WriteString(", ")
	builder.WriteString("references=")
	builder.WriteString(fmt.Sprintf("%v", ch.References))
	builder.WriteString(", ")
	builder.WriteString("ref_code=")
	builder.WriteString(ch.RefCode)
	builder.WriteString(", ")
	builder.WriteString("standard_id=")
	builder.WriteString(ch.StandardID)
	builder.WriteByte(')')
	return builder.String()
}

// ControlHistories is a parsable slice of ControlHistory.
type ControlHistories []*ControlHistory
