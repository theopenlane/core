// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/entx/history"
)

// ControlHistory is the model entity for the ControlHistory schema.
type ControlHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the name of the control
	Name string `json:"name,omitempty"`
	// description of the control
	Description string `json:"description,omitempty"`
	// status of the control
	Status string `json:"status,omitempty"`
	// type of the control
	ControlType string `json:"control_type,omitempty"`
	// version of the control
	Version string `json:"version,omitempty"`
	// control number or identifier
	ControlNumber string `json:"control_number,omitempty"`
	// family associated with the control
	Family string `json:"family,omitempty"`
	// class associated with the control
	Class string `json:"class,omitempty"`
	// source of the control, e.g. framework, template, custom, etc.
	Source string `json:"source,omitempty"`
	// which control objectives are satisfied by the control
	Satisfies string `json:"satisfies,omitempty"`
	// mapped frameworks
	MappedFrameworks string `json:"mapped_frameworks,omitempty"`
	// json data including details of the control
	Details      map[string]interface{} `json:"details,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ControlHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case controlhistory.FieldTags, controlhistory.FieldDetails:
			values[i] = new([]byte)
		case controlhistory.FieldOperation:
			values[i] = new(history.OpType)
		case controlhistory.FieldID, controlhistory.FieldRef, controlhistory.FieldCreatedBy, controlhistory.FieldUpdatedBy, controlhistory.FieldDeletedBy, controlhistory.FieldMappingID, controlhistory.FieldName, controlhistory.FieldDescription, controlhistory.FieldStatus, controlhistory.FieldControlType, controlhistory.FieldVersion, controlhistory.FieldControlNumber, controlhistory.FieldFamily, controlhistory.FieldClass, controlhistory.FieldSource, controlhistory.FieldSatisfies, controlhistory.FieldMappedFrameworks:
			values[i] = new(sql.NullString)
		case controlhistory.FieldHistoryTime, controlhistory.FieldCreatedAt, controlhistory.FieldUpdatedAt, controlhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ControlHistory fields.
func (ch *ControlHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case controlhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ch.ID = value.String
			}
		case controlhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				ch.HistoryTime = value.Time
			}
		case controlhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				ch.Ref = value.String
			}
		case controlhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				ch.Operation = *value
			}
		case controlhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ch.CreatedAt = value.Time
			}
		case controlhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ch.UpdatedAt = value.Time
			}
		case controlhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ch.CreatedBy = value.String
			}
		case controlhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ch.UpdatedBy = value.String
			}
		case controlhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ch.DeletedAt = value.Time
			}
		case controlhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ch.DeletedBy = value.String
			}
		case controlhistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				ch.MappingID = value.String
			}
		case controlhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case controlhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ch.Name = value.String
			}
		case controlhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ch.Description = value.String
			}
		case controlhistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ch.Status = value.String
			}
		case controlhistory.FieldControlType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_type", values[i])
			} else if value.Valid {
				ch.ControlType = value.String
			}
		case controlhistory.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ch.Version = value.String
			}
		case controlhistory.FieldControlNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_number", values[i])
			} else if value.Valid {
				ch.ControlNumber = value.String
			}
		case controlhistory.FieldFamily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field family", values[i])
			} else if value.Valid {
				ch.Family = value.String
			}
		case controlhistory.FieldClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class", values[i])
			} else if value.Valid {
				ch.Class = value.String
			}
		case controlhistory.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ch.Source = value.String
			}
		case controlhistory.FieldSatisfies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field satisfies", values[i])
			} else if value.Valid {
				ch.Satisfies = value.String
			}
		case controlhistory.FieldMappedFrameworks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapped_frameworks", values[i])
			} else if value.Valid {
				ch.MappedFrameworks = value.String
			}
		case controlhistory.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ch.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		default:
			ch.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ControlHistory.
// This includes values selected through modifiers, order, etc.
func (ch *ControlHistory) Value(name string) (ent.Value, error) {
	return ch.selectValues.Get(name)
}

// Update returns a builder for updating this ControlHistory.
// Note that you need to call ControlHistory.Unwrap() before calling this method if this ControlHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ch *ControlHistory) Update() *ControlHistoryUpdateOne {
	return NewControlHistoryClient(ch.config).UpdateOne(ch)
}

// Unwrap unwraps the ControlHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ch *ControlHistory) Unwrap() *ControlHistory {
	_tx, ok := ch.config.driver.(*txDriver)
	if !ok {
		panic("generated: ControlHistory is not a transactional entity")
	}
	ch.config.driver = _tx.drv
	return ch
}

// String implements the fmt.Stringer.
func (ch *ControlHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ControlHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ch.ID))
	builder.WriteString("history_time=")
	builder.WriteString(ch.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(ch.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", ch.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ch.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ch.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ch.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ch.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ch.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ch.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(ch.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ch.Tags))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ch.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ch.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ch.Status)
	builder.WriteString(", ")
	builder.WriteString("control_type=")
	builder.WriteString(ch.ControlType)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ch.Version)
	builder.WriteString(", ")
	builder.WriteString("control_number=")
	builder.WriteString(ch.ControlNumber)
	builder.WriteString(", ")
	builder.WriteString("family=")
	builder.WriteString(ch.Family)
	builder.WriteString(", ")
	builder.WriteString("class=")
	builder.WriteString(ch.Class)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(ch.Source)
	builder.WriteString(", ")
	builder.WriteString("satisfies=")
	builder.WriteString(ch.Satisfies)
	builder.WriteString(", ")
	builder.WriteString("mapped_frameworks=")
	builder.WriteString(ch.MappedFrameworks)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", ch.Details))
	builder.WriteByte(')')
	return builder.String()
}

// ControlHistories is a parsable slice of ControlHistory.
type ControlHistories []*ControlHistory
