// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scanhistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ScanHistoryUpdate is the builder for updating ScanHistory entities.
type ScanHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ScanHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScanHistoryUpdate builder.
func (_u *ScanHistoryUpdate) Where(ps ...predicate.ScanHistory) *ScanHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ScanHistoryUpdate) SetUpdatedAt(v time.Time) *ScanHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ScanHistoryUpdate) ClearUpdatedAt() *ScanHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ScanHistoryUpdate) SetUpdatedBy(v string) *ScanHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ScanHistoryUpdate) SetNillableUpdatedBy(v *string) *ScanHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ScanHistoryUpdate) ClearUpdatedBy() *ScanHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ScanHistoryUpdate) SetDeletedAt(v time.Time) *ScanHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ScanHistoryUpdate) SetNillableDeletedAt(v *time.Time) *ScanHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ScanHistoryUpdate) ClearDeletedAt() *ScanHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ScanHistoryUpdate) SetDeletedBy(v string) *ScanHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ScanHistoryUpdate) SetNillableDeletedBy(v *string) *ScanHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ScanHistoryUpdate) ClearDeletedBy() *ScanHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ScanHistoryUpdate) SetTags(v []string) *ScanHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ScanHistoryUpdate) AppendTags(v []string) *ScanHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ScanHistoryUpdate) ClearTags() *ScanHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ScanHistoryUpdate) SetOwnerID(v string) *ScanHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ScanHistoryUpdate) SetNillableOwnerID(v *string) *ScanHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ScanHistoryUpdate) ClearOwnerID() *ScanHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetTarget sets the "target" field.
func (_u *ScanHistoryUpdate) SetTarget(v string) *ScanHistoryUpdate {
	_u.mutation.SetTarget(v)
	return _u
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (_u *ScanHistoryUpdate) SetNillableTarget(v *string) *ScanHistoryUpdate {
	if v != nil {
		_u.SetTarget(*v)
	}
	return _u
}

// SetScanType sets the "scan_type" field.
func (_u *ScanHistoryUpdate) SetScanType(v enums.ScanType) *ScanHistoryUpdate {
	_u.mutation.SetScanType(v)
	return _u
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (_u *ScanHistoryUpdate) SetNillableScanType(v *enums.ScanType) *ScanHistoryUpdate {
	if v != nil {
		_u.SetScanType(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ScanHistoryUpdate) SetMetadata(v map[string]interface{}) *ScanHistoryUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ScanHistoryUpdate) ClearMetadata() *ScanHistoryUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ScanHistoryUpdate) SetStatus(v enums.ScanStatus) *ScanHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ScanHistoryUpdate) SetNillableStatus(v *enums.ScanStatus) *ScanHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// Mutation returns the ScanHistoryMutation object of the builder.
func (_u *ScanHistoryUpdate) Mutation() *ScanHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ScanHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScanHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ScanHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScanHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScanHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if scanhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scanhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scanhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScanHistoryUpdate) check() error {
	if v, ok := _u.mutation.ScanType(); ok {
		if err := scanhistory.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`generated: validator failed for field "ScanHistory.scan_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := scanhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ScanHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ScanHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScanHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ScanHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scanhistory.Table, scanhistory.Columns, sqlgraph.NewFieldSpec(scanhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(scanhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(scanhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(scanhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(scanhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(scanhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(scanhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(scanhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(scanhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(scanhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(scanhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(scanhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(scanhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scanhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(scanhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(scanhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(scanhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Target(); ok {
		_spec.SetField(scanhistory.FieldTarget, field.TypeString, value)
	}
	if value, ok := _u.mutation.ScanType(); ok {
		_spec.SetField(scanhistory.FieldScanType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(scanhistory.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(scanhistory.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(scanhistory.FieldStatus, field.TypeEnum, value)
	}
	_spec.Node.Schema = _u.schemaConfig.ScanHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scanhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ScanHistoryUpdateOne is the builder for updating a single ScanHistory entity.
type ScanHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScanHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ScanHistoryUpdateOne) SetUpdatedAt(v time.Time) *ScanHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ScanHistoryUpdateOne) ClearUpdatedAt() *ScanHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ScanHistoryUpdateOne) SetUpdatedBy(v string) *ScanHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ScanHistoryUpdateOne) SetNillableUpdatedBy(v *string) *ScanHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ScanHistoryUpdateOne) ClearUpdatedBy() *ScanHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ScanHistoryUpdateOne) SetDeletedAt(v time.Time) *ScanHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ScanHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *ScanHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ScanHistoryUpdateOne) ClearDeletedAt() *ScanHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ScanHistoryUpdateOne) SetDeletedBy(v string) *ScanHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ScanHistoryUpdateOne) SetNillableDeletedBy(v *string) *ScanHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ScanHistoryUpdateOne) ClearDeletedBy() *ScanHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ScanHistoryUpdateOne) SetTags(v []string) *ScanHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ScanHistoryUpdateOne) AppendTags(v []string) *ScanHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ScanHistoryUpdateOne) ClearTags() *ScanHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ScanHistoryUpdateOne) SetOwnerID(v string) *ScanHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ScanHistoryUpdateOne) SetNillableOwnerID(v *string) *ScanHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ScanHistoryUpdateOne) ClearOwnerID() *ScanHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetTarget sets the "target" field.
func (_u *ScanHistoryUpdateOne) SetTarget(v string) *ScanHistoryUpdateOne {
	_u.mutation.SetTarget(v)
	return _u
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (_u *ScanHistoryUpdateOne) SetNillableTarget(v *string) *ScanHistoryUpdateOne {
	if v != nil {
		_u.SetTarget(*v)
	}
	return _u
}

// SetScanType sets the "scan_type" field.
func (_u *ScanHistoryUpdateOne) SetScanType(v enums.ScanType) *ScanHistoryUpdateOne {
	_u.mutation.SetScanType(v)
	return _u
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (_u *ScanHistoryUpdateOne) SetNillableScanType(v *enums.ScanType) *ScanHistoryUpdateOne {
	if v != nil {
		_u.SetScanType(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ScanHistoryUpdateOne) SetMetadata(v map[string]interface{}) *ScanHistoryUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ScanHistoryUpdateOne) ClearMetadata() *ScanHistoryUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ScanHistoryUpdateOne) SetStatus(v enums.ScanStatus) *ScanHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ScanHistoryUpdateOne) SetNillableStatus(v *enums.ScanStatus) *ScanHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// Mutation returns the ScanHistoryMutation object of the builder.
func (_u *ScanHistoryUpdateOne) Mutation() *ScanHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the ScanHistoryUpdate builder.
func (_u *ScanHistoryUpdateOne) Where(ps ...predicate.ScanHistory) *ScanHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ScanHistoryUpdateOne) Select(field string, fields ...string) *ScanHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ScanHistory entity.
func (_u *ScanHistoryUpdateOne) Save(ctx context.Context) (*ScanHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScanHistoryUpdateOne) SaveX(ctx context.Context) *ScanHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ScanHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScanHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScanHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if scanhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scanhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scanhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScanHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.ScanType(); ok {
		if err := scanhistory.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`generated: validator failed for field "ScanHistory.scan_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := scanhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ScanHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ScanHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScanHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ScanHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ScanHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scanhistory.Table, scanhistory.Columns, sqlgraph.NewFieldSpec(scanhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ScanHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scanhistory.FieldID)
		for _, f := range fields {
			if !scanhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != scanhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(scanhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(scanhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(scanhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(scanhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(scanhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(scanhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(scanhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(scanhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(scanhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(scanhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(scanhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(scanhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scanhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(scanhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(scanhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(scanhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Target(); ok {
		_spec.SetField(scanhistory.FieldTarget, field.TypeString, value)
	}
	if value, ok := _u.mutation.ScanType(); ok {
		_spec.SetField(scanhistory.FieldScanType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(scanhistory.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(scanhistory.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(scanhistory.FieldStatus, field.TypeEnum, value)
	}
	_spec.Node.Schema = _u.schemaConfig.ScanHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ScanHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scanhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
