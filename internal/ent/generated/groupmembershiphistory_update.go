// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// GroupMembershipHistoryUpdate is the builder for updating GroupMembershipHistory entities.
type GroupMembershipHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *GroupMembershipHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GroupMembershipHistoryUpdate builder.
func (gmhu *GroupMembershipHistoryUpdate) Where(ps ...predicate.GroupMembershipHistory) *GroupMembershipHistoryUpdate {
	gmhu.mutation.Where(ps...)
	return gmhu
}

// SetUpdatedAt sets the "updated_at" field.
func (gmhu *GroupMembershipHistoryUpdate) SetUpdatedAt(t time.Time) *GroupMembershipHistoryUpdate {
	gmhu.mutation.SetUpdatedAt(t)
	return gmhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gmhu *GroupMembershipHistoryUpdate) ClearUpdatedAt() *GroupMembershipHistoryUpdate {
	gmhu.mutation.ClearUpdatedAt()
	return gmhu
}

// SetUpdatedByID sets the "updated_by_id" field.
func (gmhu *GroupMembershipHistoryUpdate) SetUpdatedByID(s string) *GroupMembershipHistoryUpdate {
	gmhu.mutation.SetUpdatedByID(s)
	return gmhu
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (gmhu *GroupMembershipHistoryUpdate) SetNillableUpdatedByID(s *string) *GroupMembershipHistoryUpdate {
	if s != nil {
		gmhu.SetUpdatedByID(*s)
	}
	return gmhu
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (gmhu *GroupMembershipHistoryUpdate) ClearUpdatedByID() *GroupMembershipHistoryUpdate {
	gmhu.mutation.ClearUpdatedByID()
	return gmhu
}

// SetDeletedAt sets the "deleted_at" field.
func (gmhu *GroupMembershipHistoryUpdate) SetDeletedAt(t time.Time) *GroupMembershipHistoryUpdate {
	gmhu.mutation.SetDeletedAt(t)
	return gmhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmhu *GroupMembershipHistoryUpdate) SetNillableDeletedAt(t *time.Time) *GroupMembershipHistoryUpdate {
	if t != nil {
		gmhu.SetDeletedAt(*t)
	}
	return gmhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gmhu *GroupMembershipHistoryUpdate) ClearDeletedAt() *GroupMembershipHistoryUpdate {
	gmhu.mutation.ClearDeletedAt()
	return gmhu
}

// SetDeletedByID sets the "deleted_by_id" field.
func (gmhu *GroupMembershipHistoryUpdate) SetDeletedByID(s string) *GroupMembershipHistoryUpdate {
	gmhu.mutation.SetDeletedByID(s)
	return gmhu
}

// SetNillableDeletedByID sets the "deleted_by_id" field if the given value is not nil.
func (gmhu *GroupMembershipHistoryUpdate) SetNillableDeletedByID(s *string) *GroupMembershipHistoryUpdate {
	if s != nil {
		gmhu.SetDeletedByID(*s)
	}
	return gmhu
}

// ClearDeletedByID clears the value of the "deleted_by_id" field.
func (gmhu *GroupMembershipHistoryUpdate) ClearDeletedByID() *GroupMembershipHistoryUpdate {
	gmhu.mutation.ClearDeletedByID()
	return gmhu
}

// SetRole sets the "role" field.
func (gmhu *GroupMembershipHistoryUpdate) SetRole(e enums.Role) *GroupMembershipHistoryUpdate {
	gmhu.mutation.SetRole(e)
	return gmhu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (gmhu *GroupMembershipHistoryUpdate) SetNillableRole(e *enums.Role) *GroupMembershipHistoryUpdate {
	if e != nil {
		gmhu.SetRole(*e)
	}
	return gmhu
}

// Mutation returns the GroupMembershipHistoryMutation object of the builder.
func (gmhu *GroupMembershipHistoryUpdate) Mutation() *GroupMembershipHistoryMutation {
	return gmhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gmhu *GroupMembershipHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := gmhu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, gmhu.sqlSave, gmhu.mutation, gmhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gmhu *GroupMembershipHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := gmhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gmhu *GroupMembershipHistoryUpdate) Exec(ctx context.Context) error {
	_, err := gmhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmhu *GroupMembershipHistoryUpdate) ExecX(ctx context.Context) {
	if err := gmhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmhu *GroupMembershipHistoryUpdate) defaults() error {
	if _, ok := gmhu.mutation.UpdatedAt(); !ok && !gmhu.mutation.UpdatedAtCleared() {
		if groupmembershiphistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized groupmembershiphistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := groupmembershiphistory.UpdateDefaultUpdatedAt()
		gmhu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gmhu *GroupMembershipHistoryUpdate) check() error {
	if v, ok := gmhu.mutation.Role(); ok {
		if err := groupmembershiphistory.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "GroupMembershipHistory.role": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gmhu *GroupMembershipHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GroupMembershipHistoryUpdate {
	gmhu.modifiers = append(gmhu.modifiers, modifiers...)
	return gmhu
}

func (gmhu *GroupMembershipHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gmhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupmembershiphistory.Table, groupmembershiphistory.Columns, sqlgraph.NewFieldSpec(groupmembershiphistory.FieldID, field.TypeString))
	if ps := gmhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gmhu.mutation.RefCleared() {
		_spec.ClearField(groupmembershiphistory.FieldRef, field.TypeString)
	}
	if gmhu.mutation.UpdatedByCleared() {
		_spec.ClearField(groupmembershiphistory.FieldUpdatedBy, field.TypeString)
	}
	if gmhu.mutation.CreatedAtCleared() {
		_spec.ClearField(groupmembershiphistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := gmhu.mutation.UpdatedAt(); ok {
		_spec.SetField(groupmembershiphistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if gmhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(groupmembershiphistory.FieldUpdatedAt, field.TypeTime)
	}
	if gmhu.mutation.CreatedByIDCleared() {
		_spec.ClearField(groupmembershiphistory.FieldCreatedByID, field.TypeString)
	}
	if value, ok := gmhu.mutation.UpdatedByID(); ok {
		_spec.SetField(groupmembershiphistory.FieldUpdatedByID, field.TypeString, value)
	}
	if gmhu.mutation.UpdatedByIDCleared() {
		_spec.ClearField(groupmembershiphistory.FieldUpdatedByID, field.TypeString)
	}
	if value, ok := gmhu.mutation.DeletedAt(); ok {
		_spec.SetField(groupmembershiphistory.FieldDeletedAt, field.TypeTime, value)
	}
	if gmhu.mutation.DeletedAtCleared() {
		_spec.ClearField(groupmembershiphistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gmhu.mutation.DeletedByID(); ok {
		_spec.SetField(groupmembershiphistory.FieldDeletedByID, field.TypeString, value)
	}
	if gmhu.mutation.DeletedByIDCleared() {
		_spec.ClearField(groupmembershiphistory.FieldDeletedByID, field.TypeString)
	}
	if value, ok := gmhu.mutation.Role(); ok {
		_spec.SetField(groupmembershiphistory.FieldRole, field.TypeEnum, value)
	}
	_spec.Node.Schema = gmhu.schemaConfig.GroupMembershipHistory
	ctx = internal.NewSchemaConfigContext(ctx, gmhu.schemaConfig)
	_spec.AddModifiers(gmhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gmhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmembershiphistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gmhu.mutation.done = true
	return n, nil
}

// GroupMembershipHistoryUpdateOne is the builder for updating a single GroupMembershipHistory entity.
type GroupMembershipHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GroupMembershipHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetUpdatedAt(t time.Time) *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.SetUpdatedAt(t)
	return gmhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) ClearUpdatedAt() *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.ClearUpdatedAt()
	return gmhuo
}

// SetUpdatedByID sets the "updated_by_id" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetUpdatedByID(s string) *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.SetUpdatedByID(s)
	return gmhuo
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetNillableUpdatedByID(s *string) *GroupMembershipHistoryUpdateOne {
	if s != nil {
		gmhuo.SetUpdatedByID(*s)
	}
	return gmhuo
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) ClearUpdatedByID() *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.ClearUpdatedByID()
	return gmhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetDeletedAt(t time.Time) *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.SetDeletedAt(t)
	return gmhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *GroupMembershipHistoryUpdateOne {
	if t != nil {
		gmhuo.SetDeletedAt(*t)
	}
	return gmhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) ClearDeletedAt() *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.ClearDeletedAt()
	return gmhuo
}

// SetDeletedByID sets the "deleted_by_id" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetDeletedByID(s string) *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.SetDeletedByID(s)
	return gmhuo
}

// SetNillableDeletedByID sets the "deleted_by_id" field if the given value is not nil.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetNillableDeletedByID(s *string) *GroupMembershipHistoryUpdateOne {
	if s != nil {
		gmhuo.SetDeletedByID(*s)
	}
	return gmhuo
}

// ClearDeletedByID clears the value of the "deleted_by_id" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) ClearDeletedByID() *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.ClearDeletedByID()
	return gmhuo
}

// SetRole sets the "role" field.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetRole(e enums.Role) *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.SetRole(e)
	return gmhuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (gmhuo *GroupMembershipHistoryUpdateOne) SetNillableRole(e *enums.Role) *GroupMembershipHistoryUpdateOne {
	if e != nil {
		gmhuo.SetRole(*e)
	}
	return gmhuo
}

// Mutation returns the GroupMembershipHistoryMutation object of the builder.
func (gmhuo *GroupMembershipHistoryUpdateOne) Mutation() *GroupMembershipHistoryMutation {
	return gmhuo.mutation
}

// Where appends a list predicates to the GroupMembershipHistoryUpdate builder.
func (gmhuo *GroupMembershipHistoryUpdateOne) Where(ps ...predicate.GroupMembershipHistory) *GroupMembershipHistoryUpdateOne {
	gmhuo.mutation.Where(ps...)
	return gmhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gmhuo *GroupMembershipHistoryUpdateOne) Select(field string, fields ...string) *GroupMembershipHistoryUpdateOne {
	gmhuo.fields = append([]string{field}, fields...)
	return gmhuo
}

// Save executes the query and returns the updated GroupMembershipHistory entity.
func (gmhuo *GroupMembershipHistoryUpdateOne) Save(ctx context.Context) (*GroupMembershipHistory, error) {
	if err := gmhuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, gmhuo.sqlSave, gmhuo.mutation, gmhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gmhuo *GroupMembershipHistoryUpdateOne) SaveX(ctx context.Context) *GroupMembershipHistory {
	node, err := gmhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gmhuo *GroupMembershipHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := gmhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmhuo *GroupMembershipHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := gmhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmhuo *GroupMembershipHistoryUpdateOne) defaults() error {
	if _, ok := gmhuo.mutation.UpdatedAt(); !ok && !gmhuo.mutation.UpdatedAtCleared() {
		if groupmembershiphistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized groupmembershiphistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := groupmembershiphistory.UpdateDefaultUpdatedAt()
		gmhuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gmhuo *GroupMembershipHistoryUpdateOne) check() error {
	if v, ok := gmhuo.mutation.Role(); ok {
		if err := groupmembershiphistory.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "GroupMembershipHistory.role": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gmhuo *GroupMembershipHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GroupMembershipHistoryUpdateOne {
	gmhuo.modifiers = append(gmhuo.modifiers, modifiers...)
	return gmhuo
}

func (gmhuo *GroupMembershipHistoryUpdateOne) sqlSave(ctx context.Context) (_node *GroupMembershipHistory, err error) {
	if err := gmhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupmembershiphistory.Table, groupmembershiphistory.Columns, sqlgraph.NewFieldSpec(groupmembershiphistory.FieldID, field.TypeString))
	id, ok := gmhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "GroupMembershipHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gmhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupmembershiphistory.FieldID)
		for _, f := range fields {
			if !groupmembershiphistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != groupmembershiphistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gmhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gmhuo.mutation.RefCleared() {
		_spec.ClearField(groupmembershiphistory.FieldRef, field.TypeString)
	}
	if gmhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(groupmembershiphistory.FieldUpdatedBy, field.TypeString)
	}
	if gmhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(groupmembershiphistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := gmhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(groupmembershiphistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if gmhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(groupmembershiphistory.FieldUpdatedAt, field.TypeTime)
	}
	if gmhuo.mutation.CreatedByIDCleared() {
		_spec.ClearField(groupmembershiphistory.FieldCreatedByID, field.TypeString)
	}
	if value, ok := gmhuo.mutation.UpdatedByID(); ok {
		_spec.SetField(groupmembershiphistory.FieldUpdatedByID, field.TypeString, value)
	}
	if gmhuo.mutation.UpdatedByIDCleared() {
		_spec.ClearField(groupmembershiphistory.FieldUpdatedByID, field.TypeString)
	}
	if value, ok := gmhuo.mutation.DeletedAt(); ok {
		_spec.SetField(groupmembershiphistory.FieldDeletedAt, field.TypeTime, value)
	}
	if gmhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(groupmembershiphistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gmhuo.mutation.DeletedByID(); ok {
		_spec.SetField(groupmembershiphistory.FieldDeletedByID, field.TypeString, value)
	}
	if gmhuo.mutation.DeletedByIDCleared() {
		_spec.ClearField(groupmembershiphistory.FieldDeletedByID, field.TypeString)
	}
	if value, ok := gmhuo.mutation.Role(); ok {
		_spec.SetField(groupmembershiphistory.FieldRole, field.TypeEnum, value)
	}
	_spec.Node.Schema = gmhuo.schemaConfig.GroupMembershipHistory
	ctx = internal.NewSchemaConfigContext(ctx, gmhuo.schemaConfig)
	_spec.AddModifiers(gmhuo.modifiers...)
	_node = &GroupMembershipHistory{config: gmhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gmhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmembershiphistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gmhuo.mutation.done = true
	return _node, nil
}
