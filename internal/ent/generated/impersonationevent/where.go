// Code generated by ent, DO NOT EDIT.

package impersonationevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldDeletedBy, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldReason, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldUserAgent, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldUserID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldOrganizationID, v))
}

// TargetUserID applies equality check predicate on the "target_user_id" field. It's identical to TargetUserIDEQ.
func TargetUserID(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldTargetUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldTags))
}

// ImpersonationTypeEQ applies the EQ predicate on the "impersonation_type" field.
func ImpersonationTypeEQ(v enums.ImpersonationType) predicate.ImpersonationEvent {
	vc := v
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldImpersonationType, vc))
}

// ImpersonationTypeNEQ applies the NEQ predicate on the "impersonation_type" field.
func ImpersonationTypeNEQ(v enums.ImpersonationType) predicate.ImpersonationEvent {
	vc := v
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldImpersonationType, vc))
}

// ImpersonationTypeIn applies the In predicate on the "impersonation_type" field.
func ImpersonationTypeIn(vs ...enums.ImpersonationType) predicate.ImpersonationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImpersonationEvent(sql.FieldIn(FieldImpersonationType, v...))
}

// ImpersonationTypeNotIn applies the NotIn predicate on the "impersonation_type" field.
func ImpersonationTypeNotIn(vs ...enums.ImpersonationType) predicate.ImpersonationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldImpersonationType, v...))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v enums.ImpersonationAction) predicate.ImpersonationEvent {
	vc := v
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldAction, vc))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v enums.ImpersonationAction) predicate.ImpersonationEvent {
	vc := v
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldAction, vc))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...enums.ImpersonationAction) predicate.ImpersonationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImpersonationEvent(sql.FieldIn(FieldAction, v...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...enums.ImpersonationAction) predicate.ImpersonationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldAction, v...))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldReason, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldUserAgent, v))
}

// ScopesIsNil applies the IsNil predicate on the "scopes" field.
func ScopesIsNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIsNull(FieldScopes))
}

// ScopesNotNil applies the NotNil predicate on the "scopes" field.
func ScopesNotNil() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotNull(FieldScopes))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldUserID, v))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldOrganizationID, v))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldOrganizationID, v))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldOrganizationID, v))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldOrganizationID, v))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldOrganizationID, v))
}

// TargetUserIDEQ applies the EQ predicate on the "target_user_id" field.
func TargetUserIDEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEQ(FieldTargetUserID, v))
}

// TargetUserIDNEQ applies the NEQ predicate on the "target_user_id" field.
func TargetUserIDNEQ(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNEQ(FieldTargetUserID, v))
}

// TargetUserIDIn applies the In predicate on the "target_user_id" field.
func TargetUserIDIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldIn(FieldTargetUserID, vs...))
}

// TargetUserIDNotIn applies the NotIn predicate on the "target_user_id" field.
func TargetUserIDNotIn(vs ...string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldNotIn(FieldTargetUserID, vs...))
}

// TargetUserIDGT applies the GT predicate on the "target_user_id" field.
func TargetUserIDGT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGT(FieldTargetUserID, v))
}

// TargetUserIDGTE applies the GTE predicate on the "target_user_id" field.
func TargetUserIDGTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldGTE(FieldTargetUserID, v))
}

// TargetUserIDLT applies the LT predicate on the "target_user_id" field.
func TargetUserIDLT(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLT(FieldTargetUserID, v))
}

// TargetUserIDLTE applies the LTE predicate on the "target_user_id" field.
func TargetUserIDLTE(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldLTE(FieldTargetUserID, v))
}

// TargetUserIDContains applies the Contains predicate on the "target_user_id" field.
func TargetUserIDContains(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContains(FieldTargetUserID, v))
}

// TargetUserIDHasPrefix applies the HasPrefix predicate on the "target_user_id" field.
func TargetUserIDHasPrefix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasPrefix(FieldTargetUserID, v))
}

// TargetUserIDHasSuffix applies the HasSuffix predicate on the "target_user_id" field.
func TargetUserIDHasSuffix(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldHasSuffix(FieldTargetUserID, v))
}

// TargetUserIDEqualFold applies the EqualFold predicate on the "target_user_id" field.
func TargetUserIDEqualFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldEqualFold(FieldTargetUserID, v))
}

// TargetUserIDContainsFold applies the ContainsFold predicate on the "target_user_id" field.
func TargetUserIDContainsFold(v string) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.FieldContainsFold(FieldTargetUserID, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.ImpersonationEvent
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.ImpersonationEvent
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetUser applies the HasEdge predicate on the "target_user" edge.
func HasTargetUser() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TargetUserTable, TargetUserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.ImpersonationEvent
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetUserWith applies the HasEdge predicate on the "target_user" edge with a given conditions (other predicates).
func HasTargetUserWith(preds ...predicate.User) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(func(s *sql.Selector) {
		step := newTargetUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.ImpersonationEvent
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.ImpersonationEvent
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(func(s *sql.Selector) {
		step := newOrganizationStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.ImpersonationEvent
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ImpersonationEvent) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ImpersonationEvent) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ImpersonationEvent) predicate.ImpersonationEvent {
	return predicate.ImpersonationEvent(sql.NotPredicates(p))
}
