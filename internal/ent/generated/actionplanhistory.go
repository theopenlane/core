// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ActionPlanHistory is the model entity for the ActionPlanHistory schema.
type ActionPlanHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
	Revision string `json:"revision,omitempty"`
	// the name of the action_plan
	Name string `json:"name,omitempty"`
	// status of the action_plan, e.g. draft, published, archived, etc.
	Status enums.DocumentStatus `json:"status,omitempty"`
	// type of the action_plan, e.g. compliance, operational, health and safety, etc.
	ActionPlanType string `json:"action_plan_type,omitempty"`
	// details of the action_plan
	Details string `json:"details,omitempty"`
	// whether approval is required for edits to the action_plan
	ApprovalRequired bool `json:"approval_required,omitempty"`
	// the date the action_plan should be reviewed, calculated based on the review_frequency if not directly set
	ReviewDue time.Time `json:"review_due,omitempty"`
	// the frequency at which the action_plan should be reviewed, used to calculate the review_due date
	ReviewFrequency enums.Frequency `json:"review_frequency,omitempty"`
	// the id of the group responsible for approving the action_plan
	ApproverID string `json:"approver_id,omitempty"`
	// the id of the group responsible for approving the action_plan
	DelegateID string `json:"delegate_id,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// auto-generated tag suggestions for the action_plan
	TagSuggestions []string `json:"tag_suggestions,omitempty"`
	// tag suggestions dismissed by the user for the action_plan
	DismissedTagSuggestions []string `json:"dismissed_tag_suggestions,omitempty"`
	// proposed controls referenced in the action_plan
	ControlSuggestions []string `json:"control_suggestions,omitempty"`
	// control suggestions dismissed by the user for the action_plan
	DismissedControlSuggestions []string `json:"dismissed_control_suggestions,omitempty"`
	// suggested improvements for the action_plan
	ImprovementSuggestions []string `json:"improvement_suggestions,omitempty"`
	// improvement suggestions dismissed by the user for the action_plan
	DismissedImprovementSuggestions []string `json:"dismissed_improvement_suggestions,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// internal notes about the object creation, this field is only available to system admins
	InternalNotes *string `json:"internal_notes,omitempty"`
	// an internal identifier for the mapping, this field is only available to system admins
	SystemInternalID *string `json:"system_internal_id,omitempty"`
	// due date of the action plan
	DueDate time.Time `json:"due_date,omitempty"`
	// priority of the action plan
	Priority enums.Priority `json:"priority,omitempty"`
	// source of the action plan
	Source       string `json:"source,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActionPlanHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case actionplanhistory.FieldTags, actionplanhistory.FieldTagSuggestions, actionplanhistory.FieldDismissedTagSuggestions, actionplanhistory.FieldControlSuggestions, actionplanhistory.FieldDismissedControlSuggestions, actionplanhistory.FieldImprovementSuggestions, actionplanhistory.FieldDismissedImprovementSuggestions:
			values[i] = new([]byte)
		case actionplanhistory.FieldOperation:
			values[i] = new(history.OpType)
		case actionplanhistory.FieldApprovalRequired, actionplanhistory.FieldSystemOwned:
			values[i] = new(sql.NullBool)
		case actionplanhistory.FieldID, actionplanhistory.FieldRef, actionplanhistory.FieldCreatedBy, actionplanhistory.FieldUpdatedBy, actionplanhistory.FieldDeletedBy, actionplanhistory.FieldRevision, actionplanhistory.FieldName, actionplanhistory.FieldStatus, actionplanhistory.FieldActionPlanType, actionplanhistory.FieldDetails, actionplanhistory.FieldReviewFrequency, actionplanhistory.FieldApproverID, actionplanhistory.FieldDelegateID, actionplanhistory.FieldSummary, actionplanhistory.FieldOwnerID, actionplanhistory.FieldInternalNotes, actionplanhistory.FieldSystemInternalID, actionplanhistory.FieldPriority, actionplanhistory.FieldSource:
			values[i] = new(sql.NullString)
		case actionplanhistory.FieldHistoryTime, actionplanhistory.FieldCreatedAt, actionplanhistory.FieldUpdatedAt, actionplanhistory.FieldDeletedAt, actionplanhistory.FieldReviewDue, actionplanhistory.FieldDueDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActionPlanHistory fields.
func (_m *ActionPlanHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actionplanhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case actionplanhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				_m.HistoryTime = value.Time
			}
		case actionplanhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				_m.Ref = value.String
			}
		case actionplanhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				_m.Operation = *value
			}
		case actionplanhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case actionplanhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case actionplanhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case actionplanhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case actionplanhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case actionplanhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case actionplanhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case actionplanhistory.FieldRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				_m.Revision = value.String
			}
		case actionplanhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case actionplanhistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = enums.DocumentStatus(value.String)
			}
		case actionplanhistory.FieldActionPlanType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_plan_type", values[i])
			} else if value.Valid {
				_m.ActionPlanType = value.String
			}
		case actionplanhistory.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				_m.Details = value.String
			}
		case actionplanhistory.FieldApprovalRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approval_required", values[i])
			} else if value.Valid {
				_m.ApprovalRequired = value.Bool
			}
		case actionplanhistory.FieldReviewDue:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field review_due", values[i])
			} else if value.Valid {
				_m.ReviewDue = value.Time
			}
		case actionplanhistory.FieldReviewFrequency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_frequency", values[i])
			} else if value.Valid {
				_m.ReviewFrequency = enums.Frequency(value.String)
			}
		case actionplanhistory.FieldApproverID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				_m.ApproverID = value.String
			}
		case actionplanhistory.FieldDelegateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delegate_id", values[i])
			} else if value.Valid {
				_m.DelegateID = value.String
			}
		case actionplanhistory.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				_m.Summary = value.String
			}
		case actionplanhistory.FieldTagSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tag_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TagSuggestions); err != nil {
					return fmt.Errorf("unmarshal field tag_suggestions: %w", err)
				}
			}
		case actionplanhistory.FieldDismissedTagSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dismissed_tag_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.DismissedTagSuggestions); err != nil {
					return fmt.Errorf("unmarshal field dismissed_tag_suggestions: %w", err)
				}
			}
		case actionplanhistory.FieldControlSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field control_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ControlSuggestions); err != nil {
					return fmt.Errorf("unmarshal field control_suggestions: %w", err)
				}
			}
		case actionplanhistory.FieldDismissedControlSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dismissed_control_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.DismissedControlSuggestions); err != nil {
					return fmt.Errorf("unmarshal field dismissed_control_suggestions: %w", err)
				}
			}
		case actionplanhistory.FieldImprovementSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field improvement_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ImprovementSuggestions); err != nil {
					return fmt.Errorf("unmarshal field improvement_suggestions: %w", err)
				}
			}
		case actionplanhistory.FieldDismissedImprovementSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dismissed_improvement_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.DismissedImprovementSuggestions); err != nil {
					return fmt.Errorf("unmarshal field dismissed_improvement_suggestions: %w", err)
				}
			}
		case actionplanhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case actionplanhistory.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				_m.SystemOwned = value.Bool
			}
		case actionplanhistory.FieldInternalNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_notes", values[i])
			} else if value.Valid {
				_m.InternalNotes = new(string)
				*_m.InternalNotes = value.String
			}
		case actionplanhistory.FieldSystemInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_internal_id", values[i])
			} else if value.Valid {
				_m.SystemInternalID = new(string)
				*_m.SystemInternalID = value.String
			}
		case actionplanhistory.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				_m.DueDate = value.Time
			}
		case actionplanhistory.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				_m.Priority = enums.Priority(value.String)
			}
		case actionplanhistory.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				_m.Source = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActionPlanHistory.
// This includes values selected through modifiers, order, etc.
func (_m *ActionPlanHistory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ActionPlanHistory.
// Note that you need to call ActionPlanHistory.Unwrap() before calling this method if this ActionPlanHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ActionPlanHistory) Update() *ActionPlanHistoryUpdateOne {
	return NewActionPlanHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ActionPlanHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ActionPlanHistory) Unwrap() *ActionPlanHistory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: ActionPlanHistory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ActionPlanHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ActionPlanHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("history_time=")
	builder.WriteString(_m.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(_m.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", _m.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(_m.Revision)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("action_plan_type=")
	builder.WriteString(_m.ActionPlanType)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(_m.Details)
	builder.WriteString(", ")
	builder.WriteString("approval_required=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApprovalRequired))
	builder.WriteString(", ")
	builder.WriteString("review_due=")
	builder.WriteString(_m.ReviewDue.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("review_frequency=")
	builder.WriteString(fmt.Sprintf("%v", _m.ReviewFrequency))
	builder.WriteString(", ")
	builder.WriteString("approver_id=")
	builder.WriteString(_m.ApproverID)
	builder.WriteString(", ")
	builder.WriteString("delegate_id=")
	builder.WriteString(_m.DelegateID)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(_m.Summary)
	builder.WriteString(", ")
	builder.WriteString("tag_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.TagSuggestions))
	builder.WriteString(", ")
	builder.WriteString("dismissed_tag_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.DismissedTagSuggestions))
	builder.WriteString(", ")
	builder.WriteString("control_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.ControlSuggestions))
	builder.WriteString(", ")
	builder.WriteString("dismissed_control_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.DismissedControlSuggestions))
	builder.WriteString(", ")
	builder.WriteString("improvement_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImprovementSuggestions))
	builder.WriteString(", ")
	builder.WriteString("dismissed_improvement_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.DismissedImprovementSuggestions))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", _m.SystemOwned))
	builder.WriteString(", ")
	if v := _m.InternalNotes; v != nil {
		builder.WriteString("internal_notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SystemInternalID; v != nil {
		builder.WriteString("system_internal_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(_m.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", _m.Priority))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(_m.Source)
	builder.WriteByte(')')
	return builder.String()
}

// ActionPlanHistories is a parsable slice of ActionPlanHistory.
type ActionPlanHistories []*ActionPlanHistory
