// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/customtypeenum"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// CustomTypeEnum is the model entity for the CustomTypeEnum schema.
type CustomTypeEnum struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// internal notes about the object creation, this field is only available to system admins
	InternalNotes *string `json:"internal_notes,omitempty"`
	// an internal identifier for the mapping, this field is only available to system admins
	SystemInternalID *string `json:"system_internal_id,omitempty"`
	// the kind of object the type applies to, for example task
	ObjectType string `json:"object_type,omitempty"`
	// the field on the object the type applies to, for example type or category
	Field string `json:"field,omitempty"`
	// The name of the enum value, for example evidence request
	Name string `json:"name,omitempty"`
	// The description of the custom type
	Description string `json:"description,omitempty"`
	// indicates if the type was generated by the system
	SystemGenerated bool `json:"system_generated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomTypeEnumQuery when eager-loading is set.
	Edges        CustomTypeEnumEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomTypeEnumEdges holds the relations/edges for other nodes in the graph.
type CustomTypeEnumEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// Risks holds the value of the risks edge.
	Risks []*Risk `json:"risks,omitempty"`
	// InternalPolicies holds the value of the internal_policies edge.
	InternalPolicies []*InternalPolicy `json:"internal_policies,omitempty"`
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// ActionPlans holds the value of the action_plans edge.
	ActionPlans []*ActionPlan `json:"action_plans,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedTasks            map[string][]*Task
	namedControls         map[string][]*Control
	namedSubcontrols      map[string][]*Subcontrol
	namedRisks            map[string][]*Risk
	namedInternalPolicies map[string][]*InternalPolicy
	namedProcedures       map[string][]*Procedure
	namedActionPlans      map[string][]*ActionPlan
	namedPrograms         map[string][]*Program
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomTypeEnumEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e CustomTypeEnumEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e CustomTypeEnumEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[2] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e CustomTypeEnumEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[3] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// RisksOrErr returns the Risks value or an error if the edge
// was not loaded in eager-loading.
func (e CustomTypeEnumEdges) RisksOrErr() ([]*Risk, error) {
	if e.loadedTypes[4] {
		return e.Risks, nil
	}
	return nil, &NotLoadedError{edge: "risks"}
}

// InternalPoliciesOrErr returns the InternalPolicies value or an error if the edge
// was not loaded in eager-loading.
func (e CustomTypeEnumEdges) InternalPoliciesOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[5] {
		return e.InternalPolicies, nil
	}
	return nil, &NotLoadedError{edge: "internal_policies"}
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e CustomTypeEnumEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[6] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// ActionPlansOrErr returns the ActionPlans value or an error if the edge
// was not loaded in eager-loading.
func (e CustomTypeEnumEdges) ActionPlansOrErr() ([]*ActionPlan, error) {
	if e.loadedTypes[7] {
		return e.ActionPlans, nil
	}
	return nil, &NotLoadedError{edge: "action_plans"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e CustomTypeEnumEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[8] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomTypeEnum) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customtypeenum.FieldTags:
			values[i] = new([]byte)
		case customtypeenum.FieldSystemOwned, customtypeenum.FieldSystemGenerated:
			values[i] = new(sql.NullBool)
		case customtypeenum.FieldID, customtypeenum.FieldCreatedBy, customtypeenum.FieldUpdatedBy, customtypeenum.FieldDeletedBy, customtypeenum.FieldOwnerID, customtypeenum.FieldInternalNotes, customtypeenum.FieldSystemInternalID, customtypeenum.FieldObjectType, customtypeenum.FieldField, customtypeenum.FieldName, customtypeenum.FieldDescription:
			values[i] = new(sql.NullString)
		case customtypeenum.FieldCreatedAt, customtypeenum.FieldUpdatedAt, customtypeenum.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomTypeEnum fields.
func (_m *CustomTypeEnum) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customtypeenum.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case customtypeenum.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case customtypeenum.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case customtypeenum.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case customtypeenum.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case customtypeenum.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case customtypeenum.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case customtypeenum.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case customtypeenum.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case customtypeenum.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				_m.SystemOwned = value.Bool
			}
		case customtypeenum.FieldInternalNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_notes", values[i])
			} else if value.Valid {
				_m.InternalNotes = new(string)
				*_m.InternalNotes = value.String
			}
		case customtypeenum.FieldSystemInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_internal_id", values[i])
			} else if value.Valid {
				_m.SystemInternalID = new(string)
				*_m.SystemInternalID = value.String
			}
		case customtypeenum.FieldObjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_type", values[i])
			} else if value.Valid {
				_m.ObjectType = value.String
			}
		case customtypeenum.FieldField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field", values[i])
			} else if value.Valid {
				_m.Field = value.String
			}
		case customtypeenum.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case customtypeenum.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case customtypeenum.FieldSystemGenerated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_generated", values[i])
			} else if value.Valid {
				_m.SystemGenerated = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomTypeEnum.
// This includes values selected through modifiers, order, etc.
func (_m *CustomTypeEnum) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QueryOwner() *OrganizationQuery {
	return NewCustomTypeEnumClient(_m.config).QueryOwner(_m)
}

// QueryTasks queries the "tasks" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QueryTasks() *TaskQuery {
	return NewCustomTypeEnumClient(_m.config).QueryTasks(_m)
}

// QueryControls queries the "controls" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QueryControls() *ControlQuery {
	return NewCustomTypeEnumClient(_m.config).QueryControls(_m)
}

// QuerySubcontrols queries the "subcontrols" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QuerySubcontrols() *SubcontrolQuery {
	return NewCustomTypeEnumClient(_m.config).QuerySubcontrols(_m)
}

// QueryRisks queries the "risks" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QueryRisks() *RiskQuery {
	return NewCustomTypeEnumClient(_m.config).QueryRisks(_m)
}

// QueryInternalPolicies queries the "internal_policies" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QueryInternalPolicies() *InternalPolicyQuery {
	return NewCustomTypeEnumClient(_m.config).QueryInternalPolicies(_m)
}

// QueryProcedures queries the "procedures" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QueryProcedures() *ProcedureQuery {
	return NewCustomTypeEnumClient(_m.config).QueryProcedures(_m)
}

// QueryActionPlans queries the "action_plans" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QueryActionPlans() *ActionPlanQuery {
	return NewCustomTypeEnumClient(_m.config).QueryActionPlans(_m)
}

// QueryPrograms queries the "programs" edge of the CustomTypeEnum entity.
func (_m *CustomTypeEnum) QueryPrograms() *ProgramQuery {
	return NewCustomTypeEnumClient(_m.config).QueryPrograms(_m)
}

// Update returns a builder for updating this CustomTypeEnum.
// Note that you need to call CustomTypeEnum.Unwrap() before calling this method if this CustomTypeEnum
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CustomTypeEnum) Update() *CustomTypeEnumUpdateOne {
	return NewCustomTypeEnumClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CustomTypeEnum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CustomTypeEnum) Unwrap() *CustomTypeEnum {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: CustomTypeEnum is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CustomTypeEnum) String() string {
	var builder strings.Builder
	builder.WriteString("CustomTypeEnum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", _m.SystemOwned))
	builder.WriteString(", ")
	if v := _m.InternalNotes; v != nil {
		builder.WriteString("internal_notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SystemInternalID; v != nil {
		builder.WriteString("system_internal_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("object_type=")
	builder.WriteString(_m.ObjectType)
	builder.WriteString(", ")
	builder.WriteString("field=")
	builder.WriteString(_m.Field)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("system_generated=")
	builder.WriteString(fmt.Sprintf("%v", _m.SystemGenerated))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CustomTypeEnum) NamedTasks(name string) ([]*Task, error) {
	if _m.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CustomTypeEnum) appendNamedTasks(name string, edges ...*Task) {
	if _m.Edges.namedTasks == nil {
		_m.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		_m.Edges.namedTasks[name] = []*Task{}
	} else {
		_m.Edges.namedTasks[name] = append(_m.Edges.namedTasks[name], edges...)
	}
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CustomTypeEnum) NamedControls(name string) ([]*Control, error) {
	if _m.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CustomTypeEnum) appendNamedControls(name string, edges ...*Control) {
	if _m.Edges.namedControls == nil {
		_m.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		_m.Edges.namedControls[name] = []*Control{}
	} else {
		_m.Edges.namedControls[name] = append(_m.Edges.namedControls[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CustomTypeEnum) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if _m.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CustomTypeEnum) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if _m.Edges.namedSubcontrols == nil {
		_m.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		_m.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		_m.Edges.namedSubcontrols[name] = append(_m.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedRisks returns the Risks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CustomTypeEnum) NamedRisks(name string) ([]*Risk, error) {
	if _m.Edges.namedRisks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedRisks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CustomTypeEnum) appendNamedRisks(name string, edges ...*Risk) {
	if _m.Edges.namedRisks == nil {
		_m.Edges.namedRisks = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		_m.Edges.namedRisks[name] = []*Risk{}
	} else {
		_m.Edges.namedRisks[name] = append(_m.Edges.namedRisks[name], edges...)
	}
}

// NamedInternalPolicies returns the InternalPolicies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CustomTypeEnum) NamedInternalPolicies(name string) ([]*InternalPolicy, error) {
	if _m.Edges.namedInternalPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedInternalPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CustomTypeEnum) appendNamedInternalPolicies(name string, edges ...*InternalPolicy) {
	if _m.Edges.namedInternalPolicies == nil {
		_m.Edges.namedInternalPolicies = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		_m.Edges.namedInternalPolicies[name] = []*InternalPolicy{}
	} else {
		_m.Edges.namedInternalPolicies[name] = append(_m.Edges.namedInternalPolicies[name], edges...)
	}
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CustomTypeEnum) NamedProcedures(name string) ([]*Procedure, error) {
	if _m.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CustomTypeEnum) appendNamedProcedures(name string, edges ...*Procedure) {
	if _m.Edges.namedProcedures == nil {
		_m.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		_m.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		_m.Edges.namedProcedures[name] = append(_m.Edges.namedProcedures[name], edges...)
	}
}

// NamedActionPlans returns the ActionPlans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CustomTypeEnum) NamedActionPlans(name string) ([]*ActionPlan, error) {
	if _m.Edges.namedActionPlans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedActionPlans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CustomTypeEnum) appendNamedActionPlans(name string, edges ...*ActionPlan) {
	if _m.Edges.namedActionPlans == nil {
		_m.Edges.namedActionPlans = make(map[string][]*ActionPlan)
	}
	if len(edges) == 0 {
		_m.Edges.namedActionPlans[name] = []*ActionPlan{}
	} else {
		_m.Edges.namedActionPlans[name] = append(_m.Edges.namedActionPlans[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CustomTypeEnum) NamedPrograms(name string) ([]*Program, error) {
	if _m.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CustomTypeEnum) appendNamedPrograms(name string, edges ...*Program) {
	if _m.Edges.namedPrograms == nil {
		_m.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		_m.Edges.namedPrograms[name] = []*Program{}
	} else {
		_m.Edges.namedPrograms[name] = append(_m.Edges.namedPrograms[name], edges...)
	}
}

// CustomTypeEnums is a parsable slice of CustomTypeEnum.
type CustomTypeEnums []*CustomTypeEnum
