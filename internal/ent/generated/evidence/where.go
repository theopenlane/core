// Code generated by ent, DO NOT EDIT.

package evidence

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldUpdatedBy, v))
}

// DisplayID applies equality check predicate on the "display_id" field. It's identical to DisplayIDEQ.
func DisplayID(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldDisplayID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldDeletedBy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldOwnerID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldDescription, v))
}

// CollectionProcedure applies equality check predicate on the "collection_procedure" field. It's identical to CollectionProcedureEQ.
func CollectionProcedure(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldCollectionProcedure, v))
}

// CreationDate applies equality check predicate on the "creation_date" field. It's identical to CreationDateEQ.
func CreationDate(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldCreationDate, v))
}

// RenewalDate applies equality check predicate on the "renewal_date" field. It's identical to RenewalDateEQ.
func RenewalDate(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldRenewalDate, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldSource, v))
}

// IsAutomated applies equality check predicate on the "is_automated" field. It's identical to IsAutomatedEQ.
func IsAutomated(v bool) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldIsAutomated, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DisplayIDEQ applies the EQ predicate on the "display_id" field.
func DisplayIDEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldDisplayID, v))
}

// DisplayIDNEQ applies the NEQ predicate on the "display_id" field.
func DisplayIDNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldDisplayID, v))
}

// DisplayIDIn applies the In predicate on the "display_id" field.
func DisplayIDIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldDisplayID, vs...))
}

// DisplayIDNotIn applies the NotIn predicate on the "display_id" field.
func DisplayIDNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldDisplayID, vs...))
}

// DisplayIDGT applies the GT predicate on the "display_id" field.
func DisplayIDGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldDisplayID, v))
}

// DisplayIDGTE applies the GTE predicate on the "display_id" field.
func DisplayIDGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldDisplayID, v))
}

// DisplayIDLT applies the LT predicate on the "display_id" field.
func DisplayIDLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldDisplayID, v))
}

// DisplayIDLTE applies the LTE predicate on the "display_id" field.
func DisplayIDLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldDisplayID, v))
}

// DisplayIDContains applies the Contains predicate on the "display_id" field.
func DisplayIDContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldDisplayID, v))
}

// DisplayIDHasPrefix applies the HasPrefix predicate on the "display_id" field.
func DisplayIDHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldDisplayID, v))
}

// DisplayIDHasSuffix applies the HasSuffix predicate on the "display_id" field.
func DisplayIDHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldDisplayID, v))
}

// DisplayIDEqualFold applies the EqualFold predicate on the "display_id" field.
func DisplayIDEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldDisplayID, v))
}

// DisplayIDContainsFold applies the ContainsFold predicate on the "display_id" field.
func DisplayIDContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldDisplayID, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldOwnerID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldDescription, v))
}

// CollectionProcedureEQ applies the EQ predicate on the "collection_procedure" field.
func CollectionProcedureEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldCollectionProcedure, v))
}

// CollectionProcedureNEQ applies the NEQ predicate on the "collection_procedure" field.
func CollectionProcedureNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldCollectionProcedure, v))
}

// CollectionProcedureIn applies the In predicate on the "collection_procedure" field.
func CollectionProcedureIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldCollectionProcedure, vs...))
}

// CollectionProcedureNotIn applies the NotIn predicate on the "collection_procedure" field.
func CollectionProcedureNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldCollectionProcedure, vs...))
}

// CollectionProcedureGT applies the GT predicate on the "collection_procedure" field.
func CollectionProcedureGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldCollectionProcedure, v))
}

// CollectionProcedureGTE applies the GTE predicate on the "collection_procedure" field.
func CollectionProcedureGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldCollectionProcedure, v))
}

// CollectionProcedureLT applies the LT predicate on the "collection_procedure" field.
func CollectionProcedureLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldCollectionProcedure, v))
}

// CollectionProcedureLTE applies the LTE predicate on the "collection_procedure" field.
func CollectionProcedureLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldCollectionProcedure, v))
}

// CollectionProcedureContains applies the Contains predicate on the "collection_procedure" field.
func CollectionProcedureContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldCollectionProcedure, v))
}

// CollectionProcedureHasPrefix applies the HasPrefix predicate on the "collection_procedure" field.
func CollectionProcedureHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldCollectionProcedure, v))
}

// CollectionProcedureHasSuffix applies the HasSuffix predicate on the "collection_procedure" field.
func CollectionProcedureHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldCollectionProcedure, v))
}

// CollectionProcedureIsNil applies the IsNil predicate on the "collection_procedure" field.
func CollectionProcedureIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldCollectionProcedure))
}

// CollectionProcedureNotNil applies the NotNil predicate on the "collection_procedure" field.
func CollectionProcedureNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldCollectionProcedure))
}

// CollectionProcedureEqualFold applies the EqualFold predicate on the "collection_procedure" field.
func CollectionProcedureEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldCollectionProcedure, v))
}

// CollectionProcedureContainsFold applies the ContainsFold predicate on the "collection_procedure" field.
func CollectionProcedureContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldCollectionProcedure, v))
}

// CreationDateEQ applies the EQ predicate on the "creation_date" field.
func CreationDateEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldCreationDate, v))
}

// CreationDateNEQ applies the NEQ predicate on the "creation_date" field.
func CreationDateNEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldCreationDate, v))
}

// CreationDateIn applies the In predicate on the "creation_date" field.
func CreationDateIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldCreationDate, vs...))
}

// CreationDateNotIn applies the NotIn predicate on the "creation_date" field.
func CreationDateNotIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldCreationDate, vs...))
}

// CreationDateGT applies the GT predicate on the "creation_date" field.
func CreationDateGT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldCreationDate, v))
}

// CreationDateGTE applies the GTE predicate on the "creation_date" field.
func CreationDateGTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldCreationDate, v))
}

// CreationDateLT applies the LT predicate on the "creation_date" field.
func CreationDateLT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldCreationDate, v))
}

// CreationDateLTE applies the LTE predicate on the "creation_date" field.
func CreationDateLTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldCreationDate, v))
}

// RenewalDateEQ applies the EQ predicate on the "renewal_date" field.
func RenewalDateEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldRenewalDate, v))
}

// RenewalDateNEQ applies the NEQ predicate on the "renewal_date" field.
func RenewalDateNEQ(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldRenewalDate, v))
}

// RenewalDateIn applies the In predicate on the "renewal_date" field.
func RenewalDateIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldRenewalDate, vs...))
}

// RenewalDateNotIn applies the NotIn predicate on the "renewal_date" field.
func RenewalDateNotIn(vs ...time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldRenewalDate, vs...))
}

// RenewalDateGT applies the GT predicate on the "renewal_date" field.
func RenewalDateGT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldRenewalDate, v))
}

// RenewalDateGTE applies the GTE predicate on the "renewal_date" field.
func RenewalDateGTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldRenewalDate, v))
}

// RenewalDateLT applies the LT predicate on the "renewal_date" field.
func RenewalDateLT(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldRenewalDate, v))
}

// RenewalDateLTE applies the LTE predicate on the "renewal_date" field.
func RenewalDateLTE(v time.Time) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldRenewalDate, v))
}

// RenewalDateIsNil applies the IsNil predicate on the "renewal_date" field.
func RenewalDateIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldRenewalDate))
}

// RenewalDateNotNil applies the NotNil predicate on the "renewal_date" field.
func RenewalDateNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldRenewalDate))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldSource))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldSource, v))
}

// IsAutomatedEQ applies the EQ predicate on the "is_automated" field.
func IsAutomatedEQ(v bool) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldIsAutomated, v))
}

// IsAutomatedNEQ applies the NEQ predicate on the "is_automated" field.
func IsAutomatedNEQ(v bool) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldIsAutomated, v))
}

// IsAutomatedIsNil applies the IsNil predicate on the "is_automated" field.
func IsAutomatedIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldIsAutomated))
}

// IsAutomatedNotNil applies the NotNil predicate on the "is_automated" field.
func IsAutomatedNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldIsAutomated))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Evidence {
	return predicate.Evidence(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Evidence {
	return predicate.Evidence(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Evidence {
	return predicate.Evidence(sql.FieldContainsFold(FieldURL, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Evidence
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Evidence
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControlObjectives applies the HasEdge predicate on the "control_objectives" edge.
func HasControlObjectives() predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ControlObjectivesTable, ControlObjectivesPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.EvidenceControlObjectives
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlObjectivesWith applies the HasEdge predicate on the "control_objectives" edge with a given conditions (other predicates).
func HasControlObjectivesWith(preds ...predicate.ControlObjective) predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := newControlObjectivesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.EvidenceControlObjectives
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControls applies the HasEdge predicate on the "controls" edge.
func HasControls() predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ControlsTable, ControlsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.EvidenceControls
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlsWith applies the HasEdge predicate on the "controls" edge with a given conditions (other predicates).
func HasControlsWith(preds ...predicate.Control) predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := newControlsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.EvidenceControls
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubcontrols applies the HasEdge predicate on the "subcontrols" edge.
func HasSubcontrols() predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubcontrolsTable, SubcontrolsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.EvidenceSubcontrols
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubcontrolsWith applies the HasEdge predicate on the "subcontrols" edge with a given conditions (other predicates).
func HasSubcontrolsWith(preds ...predicate.Subcontrol) predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := newSubcontrolsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.EvidenceSubcontrols
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.EvidenceFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := newFilesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.EvidenceFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrograms applies the HasEdge predicate on the "programs" edge.
func HasPrograms() predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProgramsTable, ProgramsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramEvidence
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramsWith applies the HasEdge predicate on the "programs" edge with a given conditions (other predicates).
func HasProgramsWith(preds ...predicate.Program) predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := newProgramsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramEvidence
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TasksTable, TasksPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.TaskEvidence
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Evidence {
	return predicate.Evidence(func(s *sql.Selector) {
		step := newTasksStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.TaskEvidence
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Evidence) predicate.Evidence {
	return predicate.Evidence(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Evidence) predicate.Evidence {
	return predicate.Evidence(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Evidence) predicate.Evidence {
	return predicate.Evidence(sql.NotPredicates(p))
}
