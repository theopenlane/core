// Code generated by ent, DO NOT EDIT.

package group

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the group type in the database.
	Label = "group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldGravatarLogoURL holds the string denoting the gravatar_logo_url field in the database.
	FieldGravatarLogoURL = "gravatar_logo_url"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeSetting holds the string denoting the setting edge name in mutations.
	EdgeSetting = "setting"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeIntegrations holds the string denoting the integrations edge name in mutations.
	EdgeIntegrations = "integrations"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeProcedureEditors holds the string denoting the procedure_editors edge name in mutations.
	EdgeProcedureEditors = "procedure_editors"
	// EdgeProcedureBlockedGroups holds the string denoting the procedure_blocked_groups edge name in mutations.
	EdgeProcedureBlockedGroups = "procedure_blocked_groups"
	// EdgeInternalpolicyEditors holds the string denoting the internalpolicy_editors edge name in mutations.
	EdgeInternalpolicyEditors = "internalpolicy_editors"
	// EdgeInternalpolicyBlockedGroups holds the string denoting the internalpolicy_blocked_groups edge name in mutations.
	EdgeInternalpolicyBlockedGroups = "internalpolicy_blocked_groups"
	// EdgeProgramViewers holds the string denoting the program_viewers edge name in mutations.
	EdgeProgramViewers = "program_viewers"
	// EdgeProgramEditors holds the string denoting the program_editors edge name in mutations.
	EdgeProgramEditors = "program_editors"
	// EdgeProgramBlockedGroups holds the string denoting the program_blocked_groups edge name in mutations.
	EdgeProgramBlockedGroups = "program_blocked_groups"
	// EdgeRiskViewers holds the string denoting the risk_viewers edge name in mutations.
	EdgeRiskViewers = "risk_viewers"
	// EdgeRiskEditors holds the string denoting the risk_editors edge name in mutations.
	EdgeRiskEditors = "risk_editors"
	// EdgeRiskBlockedGroups holds the string denoting the risk_blocked_groups edge name in mutations.
	EdgeRiskBlockedGroups = "risk_blocked_groups"
	// EdgeControlobjectiveViewers holds the string denoting the controlobjective_viewers edge name in mutations.
	EdgeControlobjectiveViewers = "controlobjective_viewers"
	// EdgeControlobjectiveEditors holds the string denoting the controlobjective_editors edge name in mutations.
	EdgeControlobjectiveEditors = "controlobjective_editors"
	// EdgeControlobjectiveBlockedGroups holds the string denoting the controlobjective_blocked_groups edge name in mutations.
	EdgeControlobjectiveBlockedGroups = "controlobjective_blocked_groups"
	// EdgeNarrativeViewers holds the string denoting the narrative_viewers edge name in mutations.
	EdgeNarrativeViewers = "narrative_viewers"
	// EdgeNarrativeEditors holds the string denoting the narrative_editors edge name in mutations.
	EdgeNarrativeEditors = "narrative_editors"
	// EdgeNarrativeBlockedGroups holds the string denoting the narrative_blocked_groups edge name in mutations.
	EdgeNarrativeBlockedGroups = "narrative_blocked_groups"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// Table holds the table name of the group in the database.
	Table = "groups"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "groups"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// SettingTable is the table that holds the setting relation/edge.
	SettingTable = "group_settings"
	// SettingInverseTable is the table name for the GroupSetting entity.
	// It exists in this package in order to avoid circular dependency with the "groupsetting" package.
	SettingInverseTable = "group_settings"
	// SettingColumn is the table column denoting the setting relation/edge.
	SettingColumn = "group_id"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "group_memberships"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// EventsTable is the table that holds the events relation/edge. The primary key declared below.
	EventsTable = "group_events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// IntegrationsTable is the table that holds the integrations relation/edge.
	IntegrationsTable = "integrations"
	// IntegrationsInverseTable is the table name for the Integration entity.
	// It exists in this package in order to avoid circular dependency with the "integration" package.
	IntegrationsInverseTable = "integrations"
	// IntegrationsColumn is the table column denoting the integrations relation/edge.
	IntegrationsColumn = "group_integrations"
	// FilesTable is the table that holds the files relation/edge. The primary key declared below.
	FilesTable = "group_files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// TasksTable is the table that holds the tasks relation/edge. The primary key declared below.
	TasksTable = "group_tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// ProcedureEditorsTable is the table that holds the procedure_editors relation/edge. The primary key declared below.
	ProcedureEditorsTable = "procedure_editors"
	// ProcedureEditorsInverseTable is the table name for the Procedure entity.
	// It exists in this package in order to avoid circular dependency with the "procedure" package.
	ProcedureEditorsInverseTable = "procedures"
	// ProcedureBlockedGroupsTable is the table that holds the procedure_blocked_groups relation/edge. The primary key declared below.
	ProcedureBlockedGroupsTable = "procedure_blocked_groups"
	// ProcedureBlockedGroupsInverseTable is the table name for the Procedure entity.
	// It exists in this package in order to avoid circular dependency with the "procedure" package.
	ProcedureBlockedGroupsInverseTable = "procedures"
	// InternalpolicyEditorsTable is the table that holds the internalpolicy_editors relation/edge. The primary key declared below.
	InternalpolicyEditorsTable = "internal_policy_editors"
	// InternalpolicyEditorsInverseTable is the table name for the InternalPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "internalpolicy" package.
	InternalpolicyEditorsInverseTable = "internal_policies"
	// InternalpolicyBlockedGroupsTable is the table that holds the internalpolicy_blocked_groups relation/edge. The primary key declared below.
	InternalpolicyBlockedGroupsTable = "internal_policy_blocked_groups"
	// InternalpolicyBlockedGroupsInverseTable is the table name for the InternalPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "internalpolicy" package.
	InternalpolicyBlockedGroupsInverseTable = "internal_policies"
	// ProgramViewersTable is the table that holds the program_viewers relation/edge. The primary key declared below.
	ProgramViewersTable = "program_viewers"
	// ProgramViewersInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramViewersInverseTable = "programs"
	// ProgramEditorsTable is the table that holds the program_editors relation/edge. The primary key declared below.
	ProgramEditorsTable = "program_editors"
	// ProgramEditorsInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramEditorsInverseTable = "programs"
	// ProgramBlockedGroupsTable is the table that holds the program_blocked_groups relation/edge. The primary key declared below.
	ProgramBlockedGroupsTable = "program_blocked_groups"
	// ProgramBlockedGroupsInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramBlockedGroupsInverseTable = "programs"
	// RiskViewersTable is the table that holds the risk_viewers relation/edge. The primary key declared below.
	RiskViewersTable = "risk_viewers"
	// RiskViewersInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskViewersInverseTable = "risks"
	// RiskEditorsTable is the table that holds the risk_editors relation/edge. The primary key declared below.
	RiskEditorsTable = "risk_editors"
	// RiskEditorsInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskEditorsInverseTable = "risks"
	// RiskBlockedGroupsTable is the table that holds the risk_blocked_groups relation/edge. The primary key declared below.
	RiskBlockedGroupsTable = "risk_blocked_groups"
	// RiskBlockedGroupsInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskBlockedGroupsInverseTable = "risks"
	// ControlobjectiveViewersTable is the table that holds the controlobjective_viewers relation/edge. The primary key declared below.
	ControlobjectiveViewersTable = "control_objective_viewers"
	// ControlobjectiveViewersInverseTable is the table name for the ControlObjective entity.
	// It exists in this package in order to avoid circular dependency with the "controlobjective" package.
	ControlobjectiveViewersInverseTable = "control_objectives"
	// ControlobjectiveEditorsTable is the table that holds the controlobjective_editors relation/edge. The primary key declared below.
	ControlobjectiveEditorsTable = "control_objective_editors"
	// ControlobjectiveEditorsInverseTable is the table name for the ControlObjective entity.
	// It exists in this package in order to avoid circular dependency with the "controlobjective" package.
	ControlobjectiveEditorsInverseTable = "control_objectives"
	// ControlobjectiveBlockedGroupsTable is the table that holds the controlobjective_blocked_groups relation/edge. The primary key declared below.
	ControlobjectiveBlockedGroupsTable = "control_objective_blocked_groups"
	// ControlobjectiveBlockedGroupsInverseTable is the table name for the ControlObjective entity.
	// It exists in this package in order to avoid circular dependency with the "controlobjective" package.
	ControlobjectiveBlockedGroupsInverseTable = "control_objectives"
	// NarrativeViewersTable is the table that holds the narrative_viewers relation/edge. The primary key declared below.
	NarrativeViewersTable = "narrative_viewers"
	// NarrativeViewersInverseTable is the table name for the Narrative entity.
	// It exists in this package in order to avoid circular dependency with the "narrative" package.
	NarrativeViewersInverseTable = "narratives"
	// NarrativeEditorsTable is the table that holds the narrative_editors relation/edge. The primary key declared below.
	NarrativeEditorsTable = "narrative_editors"
	// NarrativeEditorsInverseTable is the table name for the Narrative entity.
	// It exists in this package in order to avoid circular dependency with the "narrative" package.
	NarrativeEditorsInverseTable = "narratives"
	// NarrativeBlockedGroupsTable is the table that holds the narrative_blocked_groups relation/edge. The primary key declared below.
	NarrativeBlockedGroupsTable = "narrative_blocked_groups"
	// NarrativeBlockedGroupsInverseTable is the table name for the Narrative entity.
	// It exists in this package in order to avoid circular dependency with the "narrative" package.
	NarrativeBlockedGroupsInverseTable = "narratives"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "group_memberships"
	// MembersInverseTable is the table name for the GroupMembership entity.
	// It exists in this package in order to avoid circular dependency with the "groupmembership" package.
	MembersInverseTable = "group_memberships"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "group_id"
)

// Columns holds all SQL columns for group fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldMappingID,
	FieldTags,
	FieldOwnerID,
	FieldName,
	FieldDescription,
	FieldGravatarLogoURL,
	FieldLogoURL,
	FieldDisplayName,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "group_id"}
	// EventsPrimaryKey and EventsColumn2 are the table columns denoting the
	// primary key for the events relation (M2M).
	EventsPrimaryKey = []string{"group_id", "event_id"}
	// FilesPrimaryKey and FilesColumn2 are the table columns denoting the
	// primary key for the files relation (M2M).
	FilesPrimaryKey = []string{"group_id", "file_id"}
	// TasksPrimaryKey and TasksColumn2 are the table columns denoting the
	// primary key for the tasks relation (M2M).
	TasksPrimaryKey = []string{"group_id", "task_id"}
	// ProcedureEditorsPrimaryKey and ProcedureEditorsColumn2 are the table columns denoting the
	// primary key for the procedure_editors relation (M2M).
	ProcedureEditorsPrimaryKey = []string{"procedure_id", "group_id"}
	// ProcedureBlockedGroupsPrimaryKey and ProcedureBlockedGroupsColumn2 are the table columns denoting the
	// primary key for the procedure_blocked_groups relation (M2M).
	ProcedureBlockedGroupsPrimaryKey = []string{"procedure_id", "group_id"}
	// InternalpolicyEditorsPrimaryKey and InternalpolicyEditorsColumn2 are the table columns denoting the
	// primary key for the internalpolicy_editors relation (M2M).
	InternalpolicyEditorsPrimaryKey = []string{"internal_policy_id", "group_id"}
	// InternalpolicyBlockedGroupsPrimaryKey and InternalpolicyBlockedGroupsColumn2 are the table columns denoting the
	// primary key for the internalpolicy_blocked_groups relation (M2M).
	InternalpolicyBlockedGroupsPrimaryKey = []string{"internal_policy_id", "group_id"}
	// ProgramViewersPrimaryKey and ProgramViewersColumn2 are the table columns denoting the
	// primary key for the program_viewers relation (M2M).
	ProgramViewersPrimaryKey = []string{"program_id", "group_id"}
	// ProgramEditorsPrimaryKey and ProgramEditorsColumn2 are the table columns denoting the
	// primary key for the program_editors relation (M2M).
	ProgramEditorsPrimaryKey = []string{"program_id", "group_id"}
	// ProgramBlockedGroupsPrimaryKey and ProgramBlockedGroupsColumn2 are the table columns denoting the
	// primary key for the program_blocked_groups relation (M2M).
	ProgramBlockedGroupsPrimaryKey = []string{"program_id", "group_id"}
	// RiskViewersPrimaryKey and RiskViewersColumn2 are the table columns denoting the
	// primary key for the risk_viewers relation (M2M).
	RiskViewersPrimaryKey = []string{"risk_id", "group_id"}
	// RiskEditorsPrimaryKey and RiskEditorsColumn2 are the table columns denoting the
	// primary key for the risk_editors relation (M2M).
	RiskEditorsPrimaryKey = []string{"risk_id", "group_id"}
	// RiskBlockedGroupsPrimaryKey and RiskBlockedGroupsColumn2 are the table columns denoting the
	// primary key for the risk_blocked_groups relation (M2M).
	RiskBlockedGroupsPrimaryKey = []string{"risk_id", "group_id"}
	// ControlobjectiveViewersPrimaryKey and ControlobjectiveViewersColumn2 are the table columns denoting the
	// primary key for the controlobjective_viewers relation (M2M).
	ControlobjectiveViewersPrimaryKey = []string{"control_objective_id", "group_id"}
	// ControlobjectiveEditorsPrimaryKey and ControlobjectiveEditorsColumn2 are the table columns denoting the
	// primary key for the controlobjective_editors relation (M2M).
	ControlobjectiveEditorsPrimaryKey = []string{"control_objective_id", "group_id"}
	// ControlobjectiveBlockedGroupsPrimaryKey and ControlobjectiveBlockedGroupsColumn2 are the table columns denoting the
	// primary key for the controlobjective_blocked_groups relation (M2M).
	ControlobjectiveBlockedGroupsPrimaryKey = []string{"control_objective_id", "group_id"}
	// NarrativeViewersPrimaryKey and NarrativeViewersColumn2 are the table columns denoting the
	// primary key for the narrative_viewers relation (M2M).
	NarrativeViewersPrimaryKey = []string{"narrative_id", "group_id"}
	// NarrativeEditorsPrimaryKey and NarrativeEditorsColumn2 are the table columns denoting the
	// primary key for the narrative_editors relation (M2M).
	NarrativeEditorsPrimaryKey = []string{"narrative_id", "group_id"}
	// NarrativeBlockedGroupsPrimaryKey and NarrativeBlockedGroupsColumn2 are the table columns denoting the
	// primary key for the narrative_blocked_groups relation (M2M).
	NarrativeBlockedGroupsPrimaryKey = []string{"narrative_id", "group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [6]ent.Hook
	Interceptors [3]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDisplayName holds the default value on creation for the "display_name" field.
	DefaultDisplayName string
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Group queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByGravatarLogoURL orders the results by the gravatar_logo_url field.
func ByGravatarLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGravatarLogoURL, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// BySettingField orders the results by setting field.
func BySettingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSettingStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIntegrationsCount orders the results by integrations count.
func ByIntegrationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIntegrationsStep(), opts...)
	}
}

// ByIntegrations orders the results by integrations terms.
func ByIntegrations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntegrationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProcedureEditorsCount orders the results by procedure_editors count.
func ByProcedureEditorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProcedureEditorsStep(), opts...)
	}
}

// ByProcedureEditors orders the results by procedure_editors terms.
func ByProcedureEditors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcedureEditorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProcedureBlockedGroupsCount orders the results by procedure_blocked_groups count.
func ByProcedureBlockedGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProcedureBlockedGroupsStep(), opts...)
	}
}

// ByProcedureBlockedGroups orders the results by procedure_blocked_groups terms.
func ByProcedureBlockedGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcedureBlockedGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalpolicyEditorsCount orders the results by internalpolicy_editors count.
func ByInternalpolicyEditorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalpolicyEditorsStep(), opts...)
	}
}

// ByInternalpolicyEditors orders the results by internalpolicy_editors terms.
func ByInternalpolicyEditors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalpolicyEditorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalpolicyBlockedGroupsCount orders the results by internalpolicy_blocked_groups count.
func ByInternalpolicyBlockedGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalpolicyBlockedGroupsStep(), opts...)
	}
}

// ByInternalpolicyBlockedGroups orders the results by internalpolicy_blocked_groups terms.
func ByInternalpolicyBlockedGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalpolicyBlockedGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramViewersCount orders the results by program_viewers count.
func ByProgramViewersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramViewersStep(), opts...)
	}
}

// ByProgramViewers orders the results by program_viewers terms.
func ByProgramViewers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramViewersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramEditorsCount orders the results by program_editors count.
func ByProgramEditorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramEditorsStep(), opts...)
	}
}

// ByProgramEditors orders the results by program_editors terms.
func ByProgramEditors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramEditorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramBlockedGroupsCount orders the results by program_blocked_groups count.
func ByProgramBlockedGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramBlockedGroupsStep(), opts...)
	}
}

// ByProgramBlockedGroups orders the results by program_blocked_groups terms.
func ByProgramBlockedGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramBlockedGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskViewersCount orders the results by risk_viewers count.
func ByRiskViewersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskViewersStep(), opts...)
	}
}

// ByRiskViewers orders the results by risk_viewers terms.
func ByRiskViewers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskViewersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskEditorsCount orders the results by risk_editors count.
func ByRiskEditorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskEditorsStep(), opts...)
	}
}

// ByRiskEditors orders the results by risk_editors terms.
func ByRiskEditors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskEditorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskBlockedGroupsCount orders the results by risk_blocked_groups count.
func ByRiskBlockedGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskBlockedGroupsStep(), opts...)
	}
}

// ByRiskBlockedGroups orders the results by risk_blocked_groups terms.
func ByRiskBlockedGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskBlockedGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlobjectiveViewersCount orders the results by controlobjective_viewers count.
func ByControlobjectiveViewersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlobjectiveViewersStep(), opts...)
	}
}

// ByControlobjectiveViewers orders the results by controlobjective_viewers terms.
func ByControlobjectiveViewers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlobjectiveViewersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlobjectiveEditorsCount orders the results by controlobjective_editors count.
func ByControlobjectiveEditorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlobjectiveEditorsStep(), opts...)
	}
}

// ByControlobjectiveEditors orders the results by controlobjective_editors terms.
func ByControlobjectiveEditors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlobjectiveEditorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlobjectiveBlockedGroupsCount orders the results by controlobjective_blocked_groups count.
func ByControlobjectiveBlockedGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlobjectiveBlockedGroupsStep(), opts...)
	}
}

// ByControlobjectiveBlockedGroups orders the results by controlobjective_blocked_groups terms.
func ByControlobjectiveBlockedGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlobjectiveBlockedGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarrativeViewersCount orders the results by narrative_viewers count.
func ByNarrativeViewersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarrativeViewersStep(), opts...)
	}
}

// ByNarrativeViewers orders the results by narrative_viewers terms.
func ByNarrativeViewers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarrativeViewersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarrativeEditorsCount orders the results by narrative_editors count.
func ByNarrativeEditorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarrativeEditorsStep(), opts...)
	}
}

// ByNarrativeEditors orders the results by narrative_editors terms.
func ByNarrativeEditors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarrativeEditorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarrativeBlockedGroupsCount orders the results by narrative_blocked_groups count.
func ByNarrativeBlockedGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarrativeBlockedGroupsStep(), opts...)
	}
}

// ByNarrativeBlockedGroups orders the results by narrative_blocked_groups terms.
func ByNarrativeBlockedGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarrativeBlockedGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newSettingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SettingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SettingTable, SettingColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
	)
}
func newIntegrationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntegrationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IntegrationsTable, IntegrationsColumn),
	)
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
	)
}
func newProcedureEditorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcedureEditorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProcedureEditorsTable, ProcedureEditorsPrimaryKey...),
	)
}
func newProcedureBlockedGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcedureBlockedGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProcedureBlockedGroupsTable, ProcedureBlockedGroupsPrimaryKey...),
	)
}
func newInternalpolicyEditorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalpolicyEditorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InternalpolicyEditorsTable, InternalpolicyEditorsPrimaryKey...),
	)
}
func newInternalpolicyBlockedGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalpolicyBlockedGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InternalpolicyBlockedGroupsTable, InternalpolicyBlockedGroupsPrimaryKey...),
	)
}
func newProgramViewersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramViewersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramViewersTable, ProgramViewersPrimaryKey...),
	)
}
func newProgramEditorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramEditorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramEditorsTable, ProgramEditorsPrimaryKey...),
	)
}
func newProgramBlockedGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramBlockedGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramBlockedGroupsTable, ProgramBlockedGroupsPrimaryKey...),
	)
}
func newRiskViewersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskViewersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RiskViewersTable, RiskViewersPrimaryKey...),
	)
}
func newRiskEditorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskEditorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RiskEditorsTable, RiskEditorsPrimaryKey...),
	)
}
func newRiskBlockedGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskBlockedGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RiskBlockedGroupsTable, RiskBlockedGroupsPrimaryKey...),
	)
}
func newControlobjectiveViewersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlobjectiveViewersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlobjectiveViewersTable, ControlobjectiveViewersPrimaryKey...),
	)
}
func newControlobjectiveEditorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlobjectiveEditorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlobjectiveEditorsTable, ControlobjectiveEditorsPrimaryKey...),
	)
}
func newControlobjectiveBlockedGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlobjectiveBlockedGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlobjectiveBlockedGroupsTable, ControlobjectiveBlockedGroupsPrimaryKey...),
	)
}
func newNarrativeViewersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarrativeViewersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NarrativeViewersTable, NarrativeViewersPrimaryKey...),
	)
}
func newNarrativeEditorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarrativeEditorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NarrativeEditorsTable, NarrativeEditorsPrimaryKey...),
	)
}
func newNarrativeBlockedGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarrativeBlockedGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NarrativeBlockedGroupsTable, NarrativeBlockedGroupsPrimaryKey...),
	)
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MembersTable, MembersColumn),
	)
}
