// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobsetting"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ScheduledJobSettingQuery is the builder for querying ScheduledJobSetting entities.
type ScheduledJobSettingQuery struct {
	config
	ctx              *QueryContext
	order            []scheduledjobsetting.OrderOption
	inters           []Interceptor
	predicates       []predicate.ScheduledJobSetting
	withScheduledJob *ScheduledJobQuery
	loadTotal        []func(context.Context, []*ScheduledJobSetting) error
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScheduledJobSettingQuery builder.
func (sjsq *ScheduledJobSettingQuery) Where(ps ...predicate.ScheduledJobSetting) *ScheduledJobSettingQuery {
	sjsq.predicates = append(sjsq.predicates, ps...)
	return sjsq
}

// Limit the number of records to be returned by this query.
func (sjsq *ScheduledJobSettingQuery) Limit(limit int) *ScheduledJobSettingQuery {
	sjsq.ctx.Limit = &limit
	return sjsq
}

// Offset to start from.
func (sjsq *ScheduledJobSettingQuery) Offset(offset int) *ScheduledJobSettingQuery {
	sjsq.ctx.Offset = &offset
	return sjsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sjsq *ScheduledJobSettingQuery) Unique(unique bool) *ScheduledJobSettingQuery {
	sjsq.ctx.Unique = &unique
	return sjsq
}

// Order specifies how the records should be ordered.
func (sjsq *ScheduledJobSettingQuery) Order(o ...scheduledjobsetting.OrderOption) *ScheduledJobSettingQuery {
	sjsq.order = append(sjsq.order, o...)
	return sjsq
}

// QueryScheduledJob chains the current query on the "scheduled_job" edge.
func (sjsq *ScheduledJobSettingQuery) QueryScheduledJob() *ScheduledJobQuery {
	query := (&ScheduledJobClient{config: sjsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sjsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sjsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scheduledjobsetting.Table, scheduledjobsetting.FieldID, selector),
			sqlgraph.To(scheduledjob.Table, scheduledjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, scheduledjobsetting.ScheduledJobTable, scheduledjobsetting.ScheduledJobColumn),
		)
		schemaConfig := sjsq.schemaConfig
		step.To.Schema = schemaConfig.ScheduledJob
		step.Edge.Schema = schemaConfig.ScheduledJobSetting
		fromU = sqlgraph.SetNeighbors(sjsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScheduledJobSetting entity from the query.
// Returns a *NotFoundError when no ScheduledJobSetting was found.
func (sjsq *ScheduledJobSettingQuery) First(ctx context.Context) (*ScheduledJobSetting, error) {
	nodes, err := sjsq.Limit(1).All(setContextOp(ctx, sjsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{scheduledjobsetting.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sjsq *ScheduledJobSettingQuery) FirstX(ctx context.Context) *ScheduledJobSetting {
	node, err := sjsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScheduledJobSetting ID from the query.
// Returns a *NotFoundError when no ScheduledJobSetting ID was found.
func (sjsq *ScheduledJobSettingQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sjsq.Limit(1).IDs(setContextOp(ctx, sjsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{scheduledjobsetting.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sjsq *ScheduledJobSettingQuery) FirstIDX(ctx context.Context) string {
	id, err := sjsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScheduledJobSetting entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScheduledJobSetting entity is found.
// Returns a *NotFoundError when no ScheduledJobSetting entities are found.
func (sjsq *ScheduledJobSettingQuery) Only(ctx context.Context) (*ScheduledJobSetting, error) {
	nodes, err := sjsq.Limit(2).All(setContextOp(ctx, sjsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{scheduledjobsetting.Label}
	default:
		return nil, &NotSingularError{scheduledjobsetting.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sjsq *ScheduledJobSettingQuery) OnlyX(ctx context.Context) *ScheduledJobSetting {
	node, err := sjsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScheduledJobSetting ID in the query.
// Returns a *NotSingularError when more than one ScheduledJobSetting ID is found.
// Returns a *NotFoundError when no entities are found.
func (sjsq *ScheduledJobSettingQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sjsq.Limit(2).IDs(setContextOp(ctx, sjsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{scheduledjobsetting.Label}
	default:
		err = &NotSingularError{scheduledjobsetting.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sjsq *ScheduledJobSettingQuery) OnlyIDX(ctx context.Context) string {
	id, err := sjsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScheduledJobSettings.
func (sjsq *ScheduledJobSettingQuery) All(ctx context.Context) ([]*ScheduledJobSetting, error) {
	ctx = setContextOp(ctx, sjsq.ctx, ent.OpQueryAll)
	if err := sjsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ScheduledJobSetting, *ScheduledJobSettingQuery]()
	return withInterceptors[[]*ScheduledJobSetting](ctx, sjsq, qr, sjsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sjsq *ScheduledJobSettingQuery) AllX(ctx context.Context) []*ScheduledJobSetting {
	nodes, err := sjsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScheduledJobSetting IDs.
func (sjsq *ScheduledJobSettingQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sjsq.ctx.Unique == nil && sjsq.path != nil {
		sjsq.Unique(true)
	}
	ctx = setContextOp(ctx, sjsq.ctx, ent.OpQueryIDs)
	if err = sjsq.Select(scheduledjobsetting.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sjsq *ScheduledJobSettingQuery) IDsX(ctx context.Context) []string {
	ids, err := sjsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sjsq *ScheduledJobSettingQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sjsq.ctx, ent.OpQueryCount)
	if err := sjsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sjsq, querierCount[*ScheduledJobSettingQuery](), sjsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sjsq *ScheduledJobSettingQuery) CountX(ctx context.Context) int {
	count, err := sjsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sjsq *ScheduledJobSettingQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sjsq.ctx, ent.OpQueryExist)
	switch _, err := sjsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sjsq *ScheduledJobSettingQuery) ExistX(ctx context.Context) bool {
	exist, err := sjsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScheduledJobSettingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sjsq *ScheduledJobSettingQuery) Clone() *ScheduledJobSettingQuery {
	if sjsq == nil {
		return nil
	}
	return &ScheduledJobSettingQuery{
		config:           sjsq.config,
		ctx:              sjsq.ctx.Clone(),
		order:            append([]scheduledjobsetting.OrderOption{}, sjsq.order...),
		inters:           append([]Interceptor{}, sjsq.inters...),
		predicates:       append([]predicate.ScheduledJobSetting{}, sjsq.predicates...),
		withScheduledJob: sjsq.withScheduledJob.Clone(),
		// clone intermediate query.
		sql:       sjsq.sql.Clone(),
		path:      sjsq.path,
		modifiers: append([]func(*sql.Selector){}, sjsq.modifiers...),
	}
}

// WithScheduledJob tells the query-builder to eager-load the nodes that are connected to
// the "scheduled_job" edge. The optional arguments are used to configure the query builder of the edge.
func (sjsq *ScheduledJobSettingQuery) WithScheduledJob(opts ...func(*ScheduledJobQuery)) *ScheduledJobSettingQuery {
	query := (&ScheduledJobClient{config: sjsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sjsq.withScheduledJob = query
	return sjsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScheduledJobSetting.Query().
//		GroupBy(scheduledjobsetting.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (sjsq *ScheduledJobSettingQuery) GroupBy(field string, fields ...string) *ScheduledJobSettingGroupBy {
	sjsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScheduledJobSettingGroupBy{build: sjsq}
	grbuild.flds = &sjsq.ctx.Fields
	grbuild.label = scheduledjobsetting.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ScheduledJobSetting.Query().
//		Select(scheduledjobsetting.FieldCreatedAt).
//		Scan(ctx, &v)
func (sjsq *ScheduledJobSettingQuery) Select(fields ...string) *ScheduledJobSettingSelect {
	sjsq.ctx.Fields = append(sjsq.ctx.Fields, fields...)
	sbuild := &ScheduledJobSettingSelect{ScheduledJobSettingQuery: sjsq}
	sbuild.label = scheduledjobsetting.Label
	sbuild.flds, sbuild.scan = &sjsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScheduledJobSettingSelect configured with the given aggregations.
func (sjsq *ScheduledJobSettingQuery) Aggregate(fns ...AggregateFunc) *ScheduledJobSettingSelect {
	return sjsq.Select().Aggregate(fns...)
}

func (sjsq *ScheduledJobSettingQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sjsq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sjsq); err != nil {
				return err
			}
		}
	}
	for _, f := range sjsq.ctx.Fields {
		if !scheduledjobsetting.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if sjsq.path != nil {
		prev, err := sjsq.path(ctx)
		if err != nil {
			return err
		}
		sjsq.sql = prev
	}
	if scheduledjobsetting.Policy == nil {
		return errors.New("generated: uninitialized scheduledjobsetting.Policy (forgotten import generated/runtime?)")
	}
	if err := scheduledjobsetting.Policy.EvalQuery(ctx, sjsq); err != nil {
		return err
	}
	return nil
}

func (sjsq *ScheduledJobSettingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScheduledJobSetting, error) {
	var (
		nodes       = []*ScheduledJobSetting{}
		_spec       = sjsq.querySpec()
		loadedTypes = [1]bool{
			sjsq.withScheduledJob != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ScheduledJobSetting).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ScheduledJobSetting{config: sjsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = sjsq.schemaConfig.ScheduledJobSetting
	ctx = internal.NewSchemaConfigContext(ctx, sjsq.schemaConfig)
	if len(sjsq.modifiers) > 0 {
		_spec.Modifiers = sjsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sjsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sjsq.withScheduledJob; query != nil {
		if err := sjsq.loadScheduledJob(ctx, query, nodes, nil,
			func(n *ScheduledJobSetting, e *ScheduledJob) { n.Edges.ScheduledJob = e }); err != nil {
			return nil, err
		}
	}
	for i := range sjsq.loadTotal {
		if err := sjsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sjsq *ScheduledJobSettingQuery) loadScheduledJob(ctx context.Context, query *ScheduledJobQuery, nodes []*ScheduledJobSetting, init func(*ScheduledJobSetting), assign func(*ScheduledJobSetting, *ScheduledJob)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ScheduledJobSetting)
	for i := range nodes {
		fk := nodes[i].ScheduledJobID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(scheduledjob.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "scheduled_job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sjsq *ScheduledJobSettingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sjsq.querySpec()
	_spec.Node.Schema = sjsq.schemaConfig.ScheduledJobSetting
	ctx = internal.NewSchemaConfigContext(ctx, sjsq.schemaConfig)
	if len(sjsq.modifiers) > 0 {
		_spec.Modifiers = sjsq.modifiers
	}
	_spec.Node.Columns = sjsq.ctx.Fields
	if len(sjsq.ctx.Fields) > 0 {
		_spec.Unique = sjsq.ctx.Unique != nil && *sjsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sjsq.driver, _spec)
}

func (sjsq *ScheduledJobSettingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(scheduledjobsetting.Table, scheduledjobsetting.Columns, sqlgraph.NewFieldSpec(scheduledjobsetting.FieldID, field.TypeString))
	_spec.From = sjsq.sql
	if unique := sjsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sjsq.path != nil {
		_spec.Unique = true
	}
	if fields := sjsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduledjobsetting.FieldID)
		for i := range fields {
			if fields[i] != scheduledjobsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sjsq.withScheduledJob != nil {
			_spec.Node.AddColumnOnce(scheduledjobsetting.FieldScheduledJobID)
		}
	}
	if ps := sjsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sjsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sjsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sjsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sjsq *ScheduledJobSettingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sjsq.driver.Dialect())
	t1 := builder.Table(scheduledjobsetting.Table)
	columns := sjsq.ctx.Fields
	if len(columns) == 0 {
		columns = scheduledjobsetting.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sjsq.sql != nil {
		selector = sjsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sjsq.ctx.Unique != nil && *sjsq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(sjsq.schemaConfig.ScheduledJobSetting)
	ctx = internal.NewSchemaConfigContext(ctx, sjsq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range sjsq.modifiers {
		m(selector)
	}
	for _, p := range sjsq.predicates {
		p(selector)
	}
	for _, p := range sjsq.order {
		p(selector)
	}
	if offset := sjsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sjsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sjsq *ScheduledJobSettingQuery) Modify(modifiers ...func(s *sql.Selector)) *ScheduledJobSettingSelect {
	sjsq.modifiers = append(sjsq.modifiers, modifiers...)
	return sjsq.Select()
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (sjsq *ScheduledJobSettingQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sjsq.ctx, ent.OpQueryIDs)
	if err := sjsq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return sjsq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, sjsq, qr, sjsq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// ScheduledJobSettingGroupBy is the group-by builder for ScheduledJobSetting entities.
type ScheduledJobSettingGroupBy struct {
	selector
	build *ScheduledJobSettingQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sjsgb *ScheduledJobSettingGroupBy) Aggregate(fns ...AggregateFunc) *ScheduledJobSettingGroupBy {
	sjsgb.fns = append(sjsgb.fns, fns...)
	return sjsgb
}

// Scan applies the selector query and scans the result into the given value.
func (sjsgb *ScheduledJobSettingGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sjsgb.build.ctx, ent.OpQueryGroupBy)
	if err := sjsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScheduledJobSettingQuery, *ScheduledJobSettingGroupBy](ctx, sjsgb.build, sjsgb, sjsgb.build.inters, v)
}

func (sjsgb *ScheduledJobSettingGroupBy) sqlScan(ctx context.Context, root *ScheduledJobSettingQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sjsgb.fns))
	for _, fn := range sjsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sjsgb.flds)+len(sjsgb.fns))
		for _, f := range *sjsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sjsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sjsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ScheduledJobSettingSelect is the builder for selecting fields of ScheduledJobSetting entities.
type ScheduledJobSettingSelect struct {
	*ScheduledJobSettingQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sjss *ScheduledJobSettingSelect) Aggregate(fns ...AggregateFunc) *ScheduledJobSettingSelect {
	sjss.fns = append(sjss.fns, fns...)
	return sjss
}

// Scan applies the selector query and scans the result into the given value.
func (sjss *ScheduledJobSettingSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sjss.ctx, ent.OpQuerySelect)
	if err := sjss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScheduledJobSettingQuery, *ScheduledJobSettingSelect](ctx, sjss.ScheduledJobSettingQuery, sjss, sjss.inters, v)
}

func (sjss *ScheduledJobSettingSelect) sqlScan(ctx context.Context, root *ScheduledJobSettingQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sjss.fns))
	for _, fn := range sjss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sjss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sjss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sjss *ScheduledJobSettingSelect) Modify(modifiers ...func(s *sql.Selector)) *ScheduledJobSettingSelect {
	sjss.modifiers = append(sjss.modifiers, modifiers...)
	return sjss
}
