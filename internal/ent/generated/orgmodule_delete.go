// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
)

// OrgModuleDelete is the builder for deleting a OrgModule entity.
type OrgModuleDelete struct {
	config
	hooks    []Hook
	mutation *OrgModuleMutation
}

// Where appends a list predicates to the OrgModuleDelete builder.
func (omd *OrgModuleDelete) Where(ps ...predicate.OrgModule) *OrgModuleDelete {
	omd.mutation.Where(ps...)
	return omd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (omd *OrgModuleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, omd.sqlExec, omd.mutation, omd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (omd *OrgModuleDelete) ExecX(ctx context.Context) int {
	n, err := omd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (omd *OrgModuleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(orgmodule.Table, sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString))
	_spec.Node.Schema = omd.schemaConfig.OrgModule
	ctx = internal.NewSchemaConfigContext(ctx, omd.schemaConfig)
	if ps := omd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, omd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	omd.mutation.done = true
	return affected, err
}

// OrgModuleDeleteOne is the builder for deleting a single OrgModule entity.
type OrgModuleDeleteOne struct {
	omd *OrgModuleDelete
}

// Where appends a list predicates to the OrgModuleDelete builder.
func (omdo *OrgModuleDeleteOne) Where(ps ...predicate.OrgModule) *OrgModuleDeleteOne {
	omdo.omd.mutation.Where(ps...)
	return omdo
}

// Exec executes the deletion query.
func (omdo *OrgModuleDeleteOne) Exec(ctx context.Context) error {
	n, err := omdo.omd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orgmodule.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (omdo *OrgModuleDeleteOne) ExecX(ctx context.Context) {
	if err := omdo.Exec(ctx); err != nil {
		panic(err)
	}
}
