// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/pkg/enums"
)

// ControlImplementationCreate is the builder for creating a ControlImplementation entity.
type ControlImplementationCreate struct {
	config
	mutation *ControlImplementationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cic *ControlImplementationCreate) SetCreatedAt(t time.Time) *ControlImplementationCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableCreatedAt(t *time.Time) *ControlImplementationCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetUpdatedAt sets the "updated_at" field.
func (cic *ControlImplementationCreate) SetUpdatedAt(t time.Time) *ControlImplementationCreate {
	cic.mutation.SetUpdatedAt(t)
	return cic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableUpdatedAt(t *time.Time) *ControlImplementationCreate {
	if t != nil {
		cic.SetUpdatedAt(*t)
	}
	return cic
}

// SetCreatedBy sets the "created_by" field.
func (cic *ControlImplementationCreate) SetCreatedBy(s string) *ControlImplementationCreate {
	cic.mutation.SetCreatedBy(s)
	return cic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableCreatedBy(s *string) *ControlImplementationCreate {
	if s != nil {
		cic.SetCreatedBy(*s)
	}
	return cic
}

// SetUpdatedBy sets the "updated_by" field.
func (cic *ControlImplementationCreate) SetUpdatedBy(s string) *ControlImplementationCreate {
	cic.mutation.SetUpdatedBy(s)
	return cic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableUpdatedBy(s *string) *ControlImplementationCreate {
	if s != nil {
		cic.SetUpdatedBy(*s)
	}
	return cic
}

// SetDeletedAt sets the "deleted_at" field.
func (cic *ControlImplementationCreate) SetDeletedAt(t time.Time) *ControlImplementationCreate {
	cic.mutation.SetDeletedAt(t)
	return cic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableDeletedAt(t *time.Time) *ControlImplementationCreate {
	if t != nil {
		cic.SetDeletedAt(*t)
	}
	return cic
}

// SetDeletedBy sets the "deleted_by" field.
func (cic *ControlImplementationCreate) SetDeletedBy(s string) *ControlImplementationCreate {
	cic.mutation.SetDeletedBy(s)
	return cic
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableDeletedBy(s *string) *ControlImplementationCreate {
	if s != nil {
		cic.SetDeletedBy(*s)
	}
	return cic
}

// SetTags sets the "tags" field.
func (cic *ControlImplementationCreate) SetTags(s []string) *ControlImplementationCreate {
	cic.mutation.SetTags(s)
	return cic
}

// SetStatus sets the "status" field.
func (cic *ControlImplementationCreate) SetStatus(es enums.DocumentStatus) *ControlImplementationCreate {
	cic.mutation.SetStatus(es)
	return cic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableStatus(es *enums.DocumentStatus) *ControlImplementationCreate {
	if es != nil {
		cic.SetStatus(*es)
	}
	return cic
}

// SetImplementationDate sets the "implementation_date" field.
func (cic *ControlImplementationCreate) SetImplementationDate(t time.Time) *ControlImplementationCreate {
	cic.mutation.SetImplementationDate(t)
	return cic
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableImplementationDate(t *time.Time) *ControlImplementationCreate {
	if t != nil {
		cic.SetImplementationDate(*t)
	}
	return cic
}

// SetVerified sets the "verified" field.
func (cic *ControlImplementationCreate) SetVerified(b bool) *ControlImplementationCreate {
	cic.mutation.SetVerified(b)
	return cic
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableVerified(b *bool) *ControlImplementationCreate {
	if b != nil {
		cic.SetVerified(*b)
	}
	return cic
}

// SetVerificationDate sets the "verification_date" field.
func (cic *ControlImplementationCreate) SetVerificationDate(t time.Time) *ControlImplementationCreate {
	cic.mutation.SetVerificationDate(t)
	return cic
}

// SetNillableVerificationDate sets the "verification_date" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableVerificationDate(t *time.Time) *ControlImplementationCreate {
	if t != nil {
		cic.SetVerificationDate(*t)
	}
	return cic
}

// SetDetails sets the "details" field.
func (cic *ControlImplementationCreate) SetDetails(s string) *ControlImplementationCreate {
	cic.mutation.SetDetails(s)
	return cic
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableDetails(s *string) *ControlImplementationCreate {
	if s != nil {
		cic.SetDetails(*s)
	}
	return cic
}

// SetID sets the "id" field.
func (cic *ControlImplementationCreate) SetID(s string) *ControlImplementationCreate {
	cic.mutation.SetID(s)
	return cic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cic *ControlImplementationCreate) SetNillableID(s *string) *ControlImplementationCreate {
	if s != nil {
		cic.SetID(*s)
	}
	return cic
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (cic *ControlImplementationCreate) AddControlIDs(ids ...string) *ControlImplementationCreate {
	cic.mutation.AddControlIDs(ids...)
	return cic
}

// AddControls adds the "controls" edges to the Control entity.
func (cic *ControlImplementationCreate) AddControls(c ...*Control) *ControlImplementationCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cic.AddControlIDs(ids...)
}

// Mutation returns the ControlImplementationMutation object of the builder.
func (cic *ControlImplementationCreate) Mutation() *ControlImplementationMutation {
	return cic.mutation
}

// Save creates the ControlImplementation in the database.
func (cic *ControlImplementationCreate) Save(ctx context.Context) (*ControlImplementation, error) {
	if err := cic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *ControlImplementationCreate) SaveX(ctx context.Context) *ControlImplementation {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *ControlImplementationCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *ControlImplementationCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *ControlImplementationCreate) defaults() error {
	if _, ok := cic.mutation.CreatedAt(); !ok {
		if controlimplementation.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlimplementation.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := controlimplementation.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		if controlimplementation.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlimplementation.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlimplementation.DefaultUpdatedAt()
		cic.mutation.SetUpdatedAt(v)
	}
	if _, ok := cic.mutation.Tags(); !ok {
		v := controlimplementation.DefaultTags
		cic.mutation.SetTags(v)
	}
	if _, ok := cic.mutation.Status(); !ok {
		v := controlimplementation.DefaultStatus
		cic.mutation.SetStatus(v)
	}
	if _, ok := cic.mutation.ID(); !ok {
		if controlimplementation.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized controlimplementation.DefaultID (forgotten import generated/runtime?)")
		}
		v := controlimplementation.DefaultID()
		cic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cic *ControlImplementationCreate) check() error {
	if v, ok := cic.mutation.Status(); ok {
		if err := controlimplementation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ControlImplementation.status": %w`, err)}
		}
	}
	return nil
}

func (cic *ControlImplementationCreate) sqlSave(ctx context.Context) (*ControlImplementation, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ControlImplementation.ID type: %T", _spec.ID.Value)
		}
	}
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *ControlImplementationCreate) createSpec() (*ControlImplementation, *sqlgraph.CreateSpec) {
	var (
		_node = &ControlImplementation{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(controlimplementation.Table, sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString))
	)
	_spec.Schema = cic.schemaConfig.ControlImplementation
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.SetField(controlimplementation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.SetField(controlimplementation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cic.mutation.CreatedBy(); ok {
		_spec.SetField(controlimplementation.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cic.mutation.UpdatedBy(); ok {
		_spec.SetField(controlimplementation.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cic.mutation.DeletedAt(); ok {
		_spec.SetField(controlimplementation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cic.mutation.DeletedBy(); ok {
		_spec.SetField(controlimplementation.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := cic.mutation.Tags(); ok {
		_spec.SetField(controlimplementation.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := cic.mutation.Status(); ok {
		_spec.SetField(controlimplementation.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cic.mutation.ImplementationDate(); ok {
		_spec.SetField(controlimplementation.FieldImplementationDate, field.TypeTime, value)
		_node.ImplementationDate = value
	}
	if value, ok := cic.mutation.Verified(); ok {
		_spec.SetField(controlimplementation.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if value, ok := cic.mutation.VerificationDate(); ok {
		_spec.SetField(controlimplementation.FieldVerificationDate, field.TypeTime, value)
		_node.VerificationDate = value
	}
	if value, ok := cic.mutation.Details(); ok {
		_spec.SetField(controlimplementation.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if nodes := cic.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = cic.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ControlImplementationCreateBulk is the builder for creating many ControlImplementation entities in bulk.
type ControlImplementationCreateBulk struct {
	config
	err      error
	builders []*ControlImplementationCreate
}

// Save creates the ControlImplementation entities in the database.
func (cicb *ControlImplementationCreateBulk) Save(ctx context.Context) ([]*ControlImplementation, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*ControlImplementation, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ControlImplementationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *ControlImplementationCreateBulk) SaveX(ctx context.Context) []*ControlImplementation {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *ControlImplementationCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *ControlImplementationCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
