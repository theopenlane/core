// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
)

// ControlImplementationCreate is the builder for creating a ControlImplementation entity.
type ControlImplementationCreate struct {
	config
	mutation *ControlImplementationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *ControlImplementationCreate) SetCreatedAt(v time.Time) *ControlImplementationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableCreatedAt(v *time.Time) *ControlImplementationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ControlImplementationCreate) SetUpdatedAt(v time.Time) *ControlImplementationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableUpdatedAt(v *time.Time) *ControlImplementationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ControlImplementationCreate) SetCreatedBy(v string) *ControlImplementationCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableCreatedBy(v *string) *ControlImplementationCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ControlImplementationCreate) SetUpdatedBy(v string) *ControlImplementationCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableUpdatedBy(v *string) *ControlImplementationCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ControlImplementationCreate) SetDeletedAt(v time.Time) *ControlImplementationCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableDeletedAt(v *time.Time) *ControlImplementationCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ControlImplementationCreate) SetDeletedBy(v string) *ControlImplementationCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableDeletedBy(v *string) *ControlImplementationCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *ControlImplementationCreate) SetTags(v []string) *ControlImplementationCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *ControlImplementationCreate) SetOwnerID(v string) *ControlImplementationCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableOwnerID(v *string) *ControlImplementationCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *ControlImplementationCreate) SetSystemOwned(v bool) *ControlImplementationCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableSystemOwned(v *bool) *ControlImplementationCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *ControlImplementationCreate) SetInternalNotes(v string) *ControlImplementationCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableInternalNotes(v *string) *ControlImplementationCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *ControlImplementationCreate) SetSystemInternalID(v string) *ControlImplementationCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableSystemInternalID(v *string) *ControlImplementationCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ControlImplementationCreate) SetStatus(v enums.DocumentStatus) *ControlImplementationCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableStatus(v *enums.DocumentStatus) *ControlImplementationCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetImplementationDate sets the "implementation_date" field.
func (_c *ControlImplementationCreate) SetImplementationDate(v time.Time) *ControlImplementationCreate {
	_c.mutation.SetImplementationDate(v)
	return _c
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableImplementationDate(v *time.Time) *ControlImplementationCreate {
	if v != nil {
		_c.SetImplementationDate(*v)
	}
	return _c
}

// SetVerified sets the "verified" field.
func (_c *ControlImplementationCreate) SetVerified(v bool) *ControlImplementationCreate {
	_c.mutation.SetVerified(v)
	return _c
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableVerified(v *bool) *ControlImplementationCreate {
	if v != nil {
		_c.SetVerified(*v)
	}
	return _c
}

// SetVerificationDate sets the "verification_date" field.
func (_c *ControlImplementationCreate) SetVerificationDate(v time.Time) *ControlImplementationCreate {
	_c.mutation.SetVerificationDate(v)
	return _c
}

// SetNillableVerificationDate sets the "verification_date" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableVerificationDate(v *time.Time) *ControlImplementationCreate {
	if v != nil {
		_c.SetVerificationDate(*v)
	}
	return _c
}

// SetDetails sets the "details" field.
func (_c *ControlImplementationCreate) SetDetails(v string) *ControlImplementationCreate {
	_c.mutation.SetDetails(v)
	return _c
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableDetails(v *string) *ControlImplementationCreate {
	if v != nil {
		_c.SetDetails(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ControlImplementationCreate) SetID(v string) *ControlImplementationCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ControlImplementationCreate) SetNillableID(v *string) *ControlImplementationCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *ControlImplementationCreate) SetOwner(v *Organization) *ControlImplementationCreate {
	return _c.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_c *ControlImplementationCreate) AddBlockedGroupIDs(ids ...string) *ControlImplementationCreate {
	_c.mutation.AddBlockedGroupIDs(ids...)
	return _c
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_c *ControlImplementationCreate) AddBlockedGroups(v ...*Group) *ControlImplementationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_c *ControlImplementationCreate) AddEditorIDs(ids ...string) *ControlImplementationCreate {
	_c.mutation.AddEditorIDs(ids...)
	return _c
}

// AddEditors adds the "editors" edges to the Group entity.
func (_c *ControlImplementationCreate) AddEditors(v ...*Group) *ControlImplementationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_c *ControlImplementationCreate) AddViewerIDs(ids ...string) *ControlImplementationCreate {
	_c.mutation.AddViewerIDs(ids...)
	return _c
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_c *ControlImplementationCreate) AddViewers(v ...*Group) *ControlImplementationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddViewerIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_c *ControlImplementationCreate) AddControlIDs(ids ...string) *ControlImplementationCreate {
	_c.mutation.AddControlIDs(ids...)
	return _c
}

// AddControls adds the "controls" edges to the Control entity.
func (_c *ControlImplementationCreate) AddControls(v ...*Control) *ControlImplementationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_c *ControlImplementationCreate) AddSubcontrolIDs(ids ...string) *ControlImplementationCreate {
	_c.mutation.AddSubcontrolIDs(ids...)
	return _c
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_c *ControlImplementationCreate) AddSubcontrols(v ...*Subcontrol) *ControlImplementationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubcontrolIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_c *ControlImplementationCreate) AddTaskIDs(ids ...string) *ControlImplementationCreate {
	_c.mutation.AddTaskIDs(ids...)
	return _c
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_c *ControlImplementationCreate) AddTasks(v ...*Task) *ControlImplementationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTaskIDs(ids...)
}

// Mutation returns the ControlImplementationMutation object of the builder.
func (_c *ControlImplementationCreate) Mutation() *ControlImplementationMutation {
	return _c.mutation
}

// Save creates the ControlImplementation in the database.
func (_c *ControlImplementationCreate) Save(ctx context.Context) (*ControlImplementation, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ControlImplementationCreate) SaveX(ctx context.Context) *ControlImplementation {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ControlImplementationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ControlImplementationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ControlImplementationCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if controlimplementation.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlimplementation.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := controlimplementation.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if controlimplementation.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlimplementation.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlimplementation.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := controlimplementation.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := controlimplementation.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := controlimplementation.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if controlimplementation.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized controlimplementation.DefaultID (forgotten import generated/runtime?)")
		}
		v := controlimplementation.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ControlImplementationCreate) check() error {
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := controlimplementation.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ControlImplementation.owner_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := controlimplementation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ControlImplementation.status": %w`, err)}
		}
	}
	return nil
}

func (_c *ControlImplementationCreate) sqlSave(ctx context.Context) (*ControlImplementation, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ControlImplementation.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ControlImplementationCreate) createSpec() (*ControlImplementation, *sqlgraph.CreateSpec) {
	var (
		_node = &ControlImplementation{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(controlimplementation.Table, sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.ControlImplementation
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(controlimplementation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(controlimplementation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(controlimplementation.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(controlimplementation.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(controlimplementation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(controlimplementation.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(controlimplementation.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(controlimplementation.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(controlimplementation.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(controlimplementation.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(controlimplementation.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ImplementationDate(); ok {
		_spec.SetField(controlimplementation.FieldImplementationDate, field.TypeTime, value)
		_node.ImplementationDate = value
	}
	if value, ok := _c.mutation.Verified(); ok {
		_spec.SetField(controlimplementation.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if value, ok := _c.mutation.VerificationDate(); ok {
		_spec.SetField(controlimplementation.FieldVerificationDate, field.TypeTime, value)
		_node.VerificationDate = value
	}
	if value, ok := _c.mutation.Details(); ok {
		_spec.SetField(controlimplementation.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlimplementation.OwnerTable,
			Columns: []string{controlimplementation.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.BlockedGroupsTable,
			Columns: controlimplementation.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.EditorsTable,
			Columns: controlimplementation.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.ViewersTable,
			Columns: controlimplementation.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.SubcontrolsTable,
			Columns: controlimplementation.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.TasksTable,
			Columns: controlimplementation.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ControlImplementationCreateBulk is the builder for creating many ControlImplementation entities in bulk.
type ControlImplementationCreateBulk struct {
	config
	err      error
	builders []*ControlImplementationCreate
}

// Save creates the ControlImplementation entities in the database.
func (_c *ControlImplementationCreateBulk) Save(ctx context.Context) ([]*ControlImplementation, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ControlImplementation, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ControlImplementationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ControlImplementationCreateBulk) SaveX(ctx context.Context) []*ControlImplementation {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ControlImplementationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ControlImplementationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
