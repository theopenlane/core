// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubcontrolHistoryUpdate is the builder for updating SubcontrolHistory entities.
type SubcontrolHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *SubcontrolHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubcontrolHistoryUpdate builder.
func (_u *SubcontrolHistoryUpdate) Where(ps ...predicate.SubcontrolHistory) *SubcontrolHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubcontrolHistoryUpdate) SetUpdatedAt(v time.Time) *SubcontrolHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SubcontrolHistoryUpdate) ClearUpdatedAt() *SubcontrolHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *SubcontrolHistoryUpdate) SetUpdatedBy(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableUpdatedBy(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *SubcontrolHistoryUpdate) ClearUpdatedBy() *SubcontrolHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubcontrolHistoryUpdate) SetDeletedAt(v time.Time) *SubcontrolHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableDeletedAt(v *time.Time) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubcontrolHistoryUpdate) ClearDeletedAt() *SubcontrolHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *SubcontrolHistoryUpdate) SetDeletedBy(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableDeletedBy(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *SubcontrolHistoryUpdate) ClearDeletedBy() *SubcontrolHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *SubcontrolHistoryUpdate) SetTags(v []string) *SubcontrolHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SubcontrolHistoryUpdate) AppendTags(v []string) *SubcontrolHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SubcontrolHistoryUpdate) ClearTags() *SubcontrolHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubcontrolHistoryUpdate) SetDescription(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableDescription(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubcontrolHistoryUpdate) ClearDescription() *SubcontrolHistoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetReferenceID sets the "reference_id" field.
func (_u *SubcontrolHistoryUpdate) SetReferenceID(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetReferenceID(v)
	return _u
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableReferenceID(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetReferenceID(*v)
	}
	return _u
}

// ClearReferenceID clears the value of the "reference_id" field.
func (_u *SubcontrolHistoryUpdate) ClearReferenceID() *SubcontrolHistoryUpdate {
	_u.mutation.ClearReferenceID()
	return _u
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_u *SubcontrolHistoryUpdate) SetAuditorReferenceID(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetAuditorReferenceID(v)
	return _u
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableAuditorReferenceID(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetAuditorReferenceID(*v)
	}
	return _u
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (_u *SubcontrolHistoryUpdate) ClearAuditorReferenceID() *SubcontrolHistoryUpdate {
	_u.mutation.ClearAuditorReferenceID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SubcontrolHistoryUpdate) SetStatus(v enums.ControlStatus) *SubcontrolHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableStatus(v *enums.ControlStatus) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *SubcontrolHistoryUpdate) ClearStatus() *SubcontrolHistoryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSource sets the "source" field.
func (_u *SubcontrolHistoryUpdate) SetSource(v enums.ControlSource) *SubcontrolHistoryUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableSource(v *enums.ControlSource) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *SubcontrolHistoryUpdate) ClearSource() *SubcontrolHistoryUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetReferenceFramework sets the "reference_framework" field.
func (_u *SubcontrolHistoryUpdate) SetReferenceFramework(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetReferenceFramework(v)
	return _u
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableReferenceFramework(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetReferenceFramework(*v)
	}
	return _u
}

// ClearReferenceFramework clears the value of the "reference_framework" field.
func (_u *SubcontrolHistoryUpdate) ClearReferenceFramework() *SubcontrolHistoryUpdate {
	_u.mutation.ClearReferenceFramework()
	return _u
}

// SetControlType sets the "control_type" field.
func (_u *SubcontrolHistoryUpdate) SetControlType(v enums.ControlType) *SubcontrolHistoryUpdate {
	_u.mutation.SetControlType(v)
	return _u
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableControlType(v *enums.ControlType) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetControlType(*v)
	}
	return _u
}

// ClearControlType clears the value of the "control_type" field.
func (_u *SubcontrolHistoryUpdate) ClearControlType() *SubcontrolHistoryUpdate {
	_u.mutation.ClearControlType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *SubcontrolHistoryUpdate) SetCategory(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableCategory(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *SubcontrolHistoryUpdate) ClearCategory() *SubcontrolHistoryUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *SubcontrolHistoryUpdate) SetCategoryID(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableCategoryID(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *SubcontrolHistoryUpdate) ClearCategoryID() *SubcontrolHistoryUpdate {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetSubcategory sets the "subcategory" field.
func (_u *SubcontrolHistoryUpdate) SetSubcategory(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetSubcategory(v)
	return _u
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableSubcategory(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetSubcategory(*v)
	}
	return _u
}

// ClearSubcategory clears the value of the "subcategory" field.
func (_u *SubcontrolHistoryUpdate) ClearSubcategory() *SubcontrolHistoryUpdate {
	_u.mutation.ClearSubcategory()
	return _u
}

// SetMappedCategories sets the "mapped_categories" field.
func (_u *SubcontrolHistoryUpdate) SetMappedCategories(v []string) *SubcontrolHistoryUpdate {
	_u.mutation.SetMappedCategories(v)
	return _u
}

// AppendMappedCategories appends value to the "mapped_categories" field.
func (_u *SubcontrolHistoryUpdate) AppendMappedCategories(v []string) *SubcontrolHistoryUpdate {
	_u.mutation.AppendMappedCategories(v)
	return _u
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (_u *SubcontrolHistoryUpdate) ClearMappedCategories() *SubcontrolHistoryUpdate {
	_u.mutation.ClearMappedCategories()
	return _u
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_u *SubcontrolHistoryUpdate) SetAssessmentObjectives(v []models.AssessmentObjective) *SubcontrolHistoryUpdate {
	_u.mutation.SetAssessmentObjectives(v)
	return _u
}

// AppendAssessmentObjectives appends value to the "assessment_objectives" field.
func (_u *SubcontrolHistoryUpdate) AppendAssessmentObjectives(v []models.AssessmentObjective) *SubcontrolHistoryUpdate {
	_u.mutation.AppendAssessmentObjectives(v)
	return _u
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (_u *SubcontrolHistoryUpdate) ClearAssessmentObjectives() *SubcontrolHistoryUpdate {
	_u.mutation.ClearAssessmentObjectives()
	return _u
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_u *SubcontrolHistoryUpdate) SetAssessmentMethods(v []models.AssessmentMethod) *SubcontrolHistoryUpdate {
	_u.mutation.SetAssessmentMethods(v)
	return _u
}

// AppendAssessmentMethods appends value to the "assessment_methods" field.
func (_u *SubcontrolHistoryUpdate) AppendAssessmentMethods(v []models.AssessmentMethod) *SubcontrolHistoryUpdate {
	_u.mutation.AppendAssessmentMethods(v)
	return _u
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (_u *SubcontrolHistoryUpdate) ClearAssessmentMethods() *SubcontrolHistoryUpdate {
	_u.mutation.ClearAssessmentMethods()
	return _u
}

// SetControlQuestions sets the "control_questions" field.
func (_u *SubcontrolHistoryUpdate) SetControlQuestions(v []string) *SubcontrolHistoryUpdate {
	_u.mutation.SetControlQuestions(v)
	return _u
}

// AppendControlQuestions appends value to the "control_questions" field.
func (_u *SubcontrolHistoryUpdate) AppendControlQuestions(v []string) *SubcontrolHistoryUpdate {
	_u.mutation.AppendControlQuestions(v)
	return _u
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (_u *SubcontrolHistoryUpdate) ClearControlQuestions() *SubcontrolHistoryUpdate {
	_u.mutation.ClearControlQuestions()
	return _u
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_u *SubcontrolHistoryUpdate) SetImplementationGuidance(v []models.ImplementationGuidance) *SubcontrolHistoryUpdate {
	_u.mutation.SetImplementationGuidance(v)
	return _u
}

// AppendImplementationGuidance appends value to the "implementation_guidance" field.
func (_u *SubcontrolHistoryUpdate) AppendImplementationGuidance(v []models.ImplementationGuidance) *SubcontrolHistoryUpdate {
	_u.mutation.AppendImplementationGuidance(v)
	return _u
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (_u *SubcontrolHistoryUpdate) ClearImplementationGuidance() *SubcontrolHistoryUpdate {
	_u.mutation.ClearImplementationGuidance()
	return _u
}

// SetExampleEvidence sets the "example_evidence" field.
func (_u *SubcontrolHistoryUpdate) SetExampleEvidence(v []models.ExampleEvidence) *SubcontrolHistoryUpdate {
	_u.mutation.SetExampleEvidence(v)
	return _u
}

// AppendExampleEvidence appends value to the "example_evidence" field.
func (_u *SubcontrolHistoryUpdate) AppendExampleEvidence(v []models.ExampleEvidence) *SubcontrolHistoryUpdate {
	_u.mutation.AppendExampleEvidence(v)
	return _u
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (_u *SubcontrolHistoryUpdate) ClearExampleEvidence() *SubcontrolHistoryUpdate {
	_u.mutation.ClearExampleEvidence()
	return _u
}

// SetReferences sets the "references" field.
func (_u *SubcontrolHistoryUpdate) SetReferences(v []models.Reference) *SubcontrolHistoryUpdate {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *SubcontrolHistoryUpdate) AppendReferences(v []models.Reference) *SubcontrolHistoryUpdate {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *SubcontrolHistoryUpdate) ClearReferences() *SubcontrolHistoryUpdate {
	_u.mutation.ClearReferences()
	return _u
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_u *SubcontrolHistoryUpdate) SetControlOwnerID(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetControlOwnerID(v)
	return _u
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableControlOwnerID(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetControlOwnerID(*v)
	}
	return _u
}

// ClearControlOwnerID clears the value of the "control_owner_id" field.
func (_u *SubcontrolHistoryUpdate) ClearControlOwnerID() *SubcontrolHistoryUpdate {
	_u.mutation.ClearControlOwnerID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *SubcontrolHistoryUpdate) SetDelegateID(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableDelegateID(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *SubcontrolHistoryUpdate) ClearDelegateID() *SubcontrolHistoryUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetRefCode sets the "ref_code" field.
func (_u *SubcontrolHistoryUpdate) SetRefCode(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetRefCode(v)
	return _u
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableRefCode(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetRefCode(*v)
	}
	return _u
}

// SetControlID sets the "control_id" field.
func (_u *SubcontrolHistoryUpdate) SetControlID(v string) *SubcontrolHistoryUpdate {
	_u.mutation.SetControlID(v)
	return _u
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdate) SetNillableControlID(v *string) *SubcontrolHistoryUpdate {
	if v != nil {
		_u.SetControlID(*v)
	}
	return _u
}

// Mutation returns the SubcontrolHistoryMutation object of the builder.
func (_u *SubcontrolHistoryUpdate) Mutation() *SubcontrolHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubcontrolHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubcontrolHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubcontrolHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubcontrolHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubcontrolHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if subcontrolhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrolhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrolhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubcontrolHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := subcontrolhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := subcontrolhistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.source": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlType(); ok {
		if err := subcontrolhistory.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.control_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SubcontrolHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SubcontrolHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subcontrolhistory.Table, subcontrolhistory.Columns, sqlgraph.NewFieldSpec(subcontrolhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(subcontrolhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(subcontrolhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(subcontrolhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subcontrolhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrolhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldReferenceID, field.TypeString, value)
	}
	if _u.mutation.ReferenceIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString, value)
	}
	if _u.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(subcontrolhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(subcontrolhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(subcontrolhistory.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(subcontrolhistory.FieldSource, field.TypeEnum)
	}
	if value, ok := _u.mutation.ReferenceFramework(); ok {
		_spec.SetField(subcontrolhistory.FieldReferenceFramework, field.TypeString, value)
	}
	if _u.mutation.ReferenceFrameworkCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferenceFramework, field.TypeString)
	}
	if value, ok := _u.mutation.ControlType(); ok {
		_spec.SetField(subcontrolhistory.FieldControlType, field.TypeEnum, value)
	}
	if _u.mutation.ControlTypeCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(subcontrolhistory.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(subcontrolhistory.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(subcontrolhistory.FieldCategoryID, field.TypeString, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldCategoryID, field.TypeString)
	}
	if value, ok := _u.mutation.Subcategory(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcategory, field.TypeString, value)
	}
	if _u.mutation.SubcategoryCleared() {
		_spec.ClearField(subcontrolhistory.FieldSubcategory, field.TypeString)
	}
	if value, ok := _u.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrolhistory.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldMappedCategories, value)
		})
	}
	if _u.mutation.MappedCategoriesCleared() {
		_spec.ClearField(subcontrolhistory.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldAssessmentObjectives, value)
		})
	}
	if _u.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldAssessmentMethods, value)
		})
	}
	if _u.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrolhistory.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldControlQuestions, value)
		})
	}
	if _u.mutation.ControlQuestionsCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldImplementationGuidance, value)
		})
	}
	if _u.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldExampleEvidence, value)
		})
	}
	if _u.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(subcontrolhistory.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlOwnerID(); ok {
		_spec.SetField(subcontrolhistory.FieldControlOwnerID, field.TypeString, value)
	}
	if _u.mutation.ControlOwnerIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(subcontrolhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldDelegateID, field.TypeString)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.RefCode(); ok {
		_spec.SetField(subcontrolhistory.FieldRefCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.ControlID(); ok {
		_spec.SetField(subcontrolhistory.FieldControlID, field.TypeString, value)
	}
	_spec.Node.Schema = _u.schemaConfig.SubcontrolHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrolhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubcontrolHistoryUpdateOne is the builder for updating a single SubcontrolHistory entity.
type SubcontrolHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubcontrolHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubcontrolHistoryUpdateOne) SetUpdatedAt(v time.Time) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SubcontrolHistoryUpdateOne) ClearUpdatedAt() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *SubcontrolHistoryUpdateOne) SetUpdatedBy(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableUpdatedBy(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *SubcontrolHistoryUpdateOne) ClearUpdatedBy() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubcontrolHistoryUpdateOne) SetDeletedAt(v time.Time) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubcontrolHistoryUpdateOne) ClearDeletedAt() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *SubcontrolHistoryUpdateOne) SetDeletedBy(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableDeletedBy(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *SubcontrolHistoryUpdateOne) ClearDeletedBy() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *SubcontrolHistoryUpdateOne) SetTags(v []string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SubcontrolHistoryUpdateOne) AppendTags(v []string) *SubcontrolHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SubcontrolHistoryUpdateOne) ClearTags() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubcontrolHistoryUpdateOne) SetDescription(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableDescription(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubcontrolHistoryUpdateOne) ClearDescription() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetReferenceID sets the "reference_id" field.
func (_u *SubcontrolHistoryUpdateOne) SetReferenceID(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetReferenceID(v)
	return _u
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableReferenceID(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetReferenceID(*v)
	}
	return _u
}

// ClearReferenceID clears the value of the "reference_id" field.
func (_u *SubcontrolHistoryUpdateOne) ClearReferenceID() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearReferenceID()
	return _u
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_u *SubcontrolHistoryUpdateOne) SetAuditorReferenceID(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetAuditorReferenceID(v)
	return _u
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableAuditorReferenceID(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetAuditorReferenceID(*v)
	}
	return _u
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (_u *SubcontrolHistoryUpdateOne) ClearAuditorReferenceID() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearAuditorReferenceID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SubcontrolHistoryUpdateOne) SetStatus(v enums.ControlStatus) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableStatus(v *enums.ControlStatus) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *SubcontrolHistoryUpdateOne) ClearStatus() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSource sets the "source" field.
func (_u *SubcontrolHistoryUpdateOne) SetSource(v enums.ControlSource) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableSource(v *enums.ControlSource) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *SubcontrolHistoryUpdateOne) ClearSource() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetReferenceFramework sets the "reference_framework" field.
func (_u *SubcontrolHistoryUpdateOne) SetReferenceFramework(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetReferenceFramework(v)
	return _u
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableReferenceFramework(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetReferenceFramework(*v)
	}
	return _u
}

// ClearReferenceFramework clears the value of the "reference_framework" field.
func (_u *SubcontrolHistoryUpdateOne) ClearReferenceFramework() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearReferenceFramework()
	return _u
}

// SetControlType sets the "control_type" field.
func (_u *SubcontrolHistoryUpdateOne) SetControlType(v enums.ControlType) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetControlType(v)
	return _u
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableControlType(v *enums.ControlType) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetControlType(*v)
	}
	return _u
}

// ClearControlType clears the value of the "control_type" field.
func (_u *SubcontrolHistoryUpdateOne) ClearControlType() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearControlType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *SubcontrolHistoryUpdateOne) SetCategory(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableCategory(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *SubcontrolHistoryUpdateOne) ClearCategory() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *SubcontrolHistoryUpdateOne) SetCategoryID(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableCategoryID(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *SubcontrolHistoryUpdateOne) ClearCategoryID() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetSubcategory sets the "subcategory" field.
func (_u *SubcontrolHistoryUpdateOne) SetSubcategory(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetSubcategory(v)
	return _u
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableSubcategory(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetSubcategory(*v)
	}
	return _u
}

// ClearSubcategory clears the value of the "subcategory" field.
func (_u *SubcontrolHistoryUpdateOne) ClearSubcategory() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearSubcategory()
	return _u
}

// SetMappedCategories sets the "mapped_categories" field.
func (_u *SubcontrolHistoryUpdateOne) SetMappedCategories(v []string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetMappedCategories(v)
	return _u
}

// AppendMappedCategories appends value to the "mapped_categories" field.
func (_u *SubcontrolHistoryUpdateOne) AppendMappedCategories(v []string) *SubcontrolHistoryUpdateOne {
	_u.mutation.AppendMappedCategories(v)
	return _u
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (_u *SubcontrolHistoryUpdateOne) ClearMappedCategories() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearMappedCategories()
	return _u
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_u *SubcontrolHistoryUpdateOne) SetAssessmentObjectives(v []models.AssessmentObjective) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetAssessmentObjectives(v)
	return _u
}

// AppendAssessmentObjectives appends value to the "assessment_objectives" field.
func (_u *SubcontrolHistoryUpdateOne) AppendAssessmentObjectives(v []models.AssessmentObjective) *SubcontrolHistoryUpdateOne {
	_u.mutation.AppendAssessmentObjectives(v)
	return _u
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (_u *SubcontrolHistoryUpdateOne) ClearAssessmentObjectives() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearAssessmentObjectives()
	return _u
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_u *SubcontrolHistoryUpdateOne) SetAssessmentMethods(v []models.AssessmentMethod) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetAssessmentMethods(v)
	return _u
}

// AppendAssessmentMethods appends value to the "assessment_methods" field.
func (_u *SubcontrolHistoryUpdateOne) AppendAssessmentMethods(v []models.AssessmentMethod) *SubcontrolHistoryUpdateOne {
	_u.mutation.AppendAssessmentMethods(v)
	return _u
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (_u *SubcontrolHistoryUpdateOne) ClearAssessmentMethods() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearAssessmentMethods()
	return _u
}

// SetControlQuestions sets the "control_questions" field.
func (_u *SubcontrolHistoryUpdateOne) SetControlQuestions(v []string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetControlQuestions(v)
	return _u
}

// AppendControlQuestions appends value to the "control_questions" field.
func (_u *SubcontrolHistoryUpdateOne) AppendControlQuestions(v []string) *SubcontrolHistoryUpdateOne {
	_u.mutation.AppendControlQuestions(v)
	return _u
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (_u *SubcontrolHistoryUpdateOne) ClearControlQuestions() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearControlQuestions()
	return _u
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_u *SubcontrolHistoryUpdateOne) SetImplementationGuidance(v []models.ImplementationGuidance) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetImplementationGuidance(v)
	return _u
}

// AppendImplementationGuidance appends value to the "implementation_guidance" field.
func (_u *SubcontrolHistoryUpdateOne) AppendImplementationGuidance(v []models.ImplementationGuidance) *SubcontrolHistoryUpdateOne {
	_u.mutation.AppendImplementationGuidance(v)
	return _u
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (_u *SubcontrolHistoryUpdateOne) ClearImplementationGuidance() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearImplementationGuidance()
	return _u
}

// SetExampleEvidence sets the "example_evidence" field.
func (_u *SubcontrolHistoryUpdateOne) SetExampleEvidence(v []models.ExampleEvidence) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetExampleEvidence(v)
	return _u
}

// AppendExampleEvidence appends value to the "example_evidence" field.
func (_u *SubcontrolHistoryUpdateOne) AppendExampleEvidence(v []models.ExampleEvidence) *SubcontrolHistoryUpdateOne {
	_u.mutation.AppendExampleEvidence(v)
	return _u
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (_u *SubcontrolHistoryUpdateOne) ClearExampleEvidence() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearExampleEvidence()
	return _u
}

// SetReferences sets the "references" field.
func (_u *SubcontrolHistoryUpdateOne) SetReferences(v []models.Reference) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *SubcontrolHistoryUpdateOne) AppendReferences(v []models.Reference) *SubcontrolHistoryUpdateOne {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *SubcontrolHistoryUpdateOne) ClearReferences() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearReferences()
	return _u
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_u *SubcontrolHistoryUpdateOne) SetControlOwnerID(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetControlOwnerID(v)
	return _u
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableControlOwnerID(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetControlOwnerID(*v)
	}
	return _u
}

// ClearControlOwnerID clears the value of the "control_owner_id" field.
func (_u *SubcontrolHistoryUpdateOne) ClearControlOwnerID() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearControlOwnerID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *SubcontrolHistoryUpdateOne) SetDelegateID(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableDelegateID(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *SubcontrolHistoryUpdateOne) ClearDelegateID() *SubcontrolHistoryUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetRefCode sets the "ref_code" field.
func (_u *SubcontrolHistoryUpdateOne) SetRefCode(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetRefCode(v)
	return _u
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableRefCode(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetRefCode(*v)
	}
	return _u
}

// SetControlID sets the "control_id" field.
func (_u *SubcontrolHistoryUpdateOne) SetControlID(v string) *SubcontrolHistoryUpdateOne {
	_u.mutation.SetControlID(v)
	return _u
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (_u *SubcontrolHistoryUpdateOne) SetNillableControlID(v *string) *SubcontrolHistoryUpdateOne {
	if v != nil {
		_u.SetControlID(*v)
	}
	return _u
}

// Mutation returns the SubcontrolHistoryMutation object of the builder.
func (_u *SubcontrolHistoryUpdateOne) Mutation() *SubcontrolHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the SubcontrolHistoryUpdate builder.
func (_u *SubcontrolHistoryUpdateOne) Where(ps ...predicate.SubcontrolHistory) *SubcontrolHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubcontrolHistoryUpdateOne) Select(field string, fields ...string) *SubcontrolHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SubcontrolHistory entity.
func (_u *SubcontrolHistoryUpdateOne) Save(ctx context.Context) (*SubcontrolHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubcontrolHistoryUpdateOne) SaveX(ctx context.Context) *SubcontrolHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubcontrolHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubcontrolHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubcontrolHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if subcontrolhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrolhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrolhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubcontrolHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := subcontrolhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := subcontrolhistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.source": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlType(); ok {
		if err := subcontrolhistory.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.control_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SubcontrolHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SubcontrolHistoryUpdateOne) sqlSave(ctx context.Context) (_node *SubcontrolHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subcontrolhistory.Table, subcontrolhistory.Columns, sqlgraph.NewFieldSpec(subcontrolhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SubcontrolHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrolhistory.FieldID)
		for _, f := range fields {
			if !subcontrolhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subcontrolhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(subcontrolhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(subcontrolhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(subcontrolhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subcontrolhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrolhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldReferenceID, field.TypeString, value)
	}
	if _u.mutation.ReferenceIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString, value)
	}
	if _u.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(subcontrolhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(subcontrolhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(subcontrolhistory.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(subcontrolhistory.FieldSource, field.TypeEnum)
	}
	if value, ok := _u.mutation.ReferenceFramework(); ok {
		_spec.SetField(subcontrolhistory.FieldReferenceFramework, field.TypeString, value)
	}
	if _u.mutation.ReferenceFrameworkCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferenceFramework, field.TypeString)
	}
	if value, ok := _u.mutation.ControlType(); ok {
		_spec.SetField(subcontrolhistory.FieldControlType, field.TypeEnum, value)
	}
	if _u.mutation.ControlTypeCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(subcontrolhistory.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(subcontrolhistory.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(subcontrolhistory.FieldCategoryID, field.TypeString, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldCategoryID, field.TypeString)
	}
	if value, ok := _u.mutation.Subcategory(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcategory, field.TypeString, value)
	}
	if _u.mutation.SubcategoryCleared() {
		_spec.ClearField(subcontrolhistory.FieldSubcategory, field.TypeString)
	}
	if value, ok := _u.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrolhistory.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldMappedCategories, value)
		})
	}
	if _u.mutation.MappedCategoriesCleared() {
		_spec.ClearField(subcontrolhistory.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldAssessmentObjectives, value)
		})
	}
	if _u.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldAssessmentMethods, value)
		})
	}
	if _u.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrolhistory.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldControlQuestions, value)
		})
	}
	if _u.mutation.ControlQuestionsCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldImplementationGuidance, value)
		})
	}
	if _u.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldExampleEvidence, value)
		})
	}
	if _u.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(subcontrolhistory.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlOwnerID(); ok {
		_spec.SetField(subcontrolhistory.FieldControlOwnerID, field.TypeString, value)
	}
	if _u.mutation.ControlOwnerIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(subcontrolhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldDelegateID, field.TypeString)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.RefCode(); ok {
		_spec.SetField(subcontrolhistory.FieldRefCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.ControlID(); ok {
		_spec.SetField(subcontrolhistory.FieldControlID, field.TypeString, value)
	}
	_spec.Node.Schema = _u.schemaConfig.SubcontrolHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &SubcontrolHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrolhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
