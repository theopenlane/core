// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubcontrolHistoryUpdate is the builder for updating SubcontrolHistory entities.
type SubcontrolHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *SubcontrolHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubcontrolHistoryUpdate builder.
func (shu *SubcontrolHistoryUpdate) Where(ps ...predicate.SubcontrolHistory) *SubcontrolHistoryUpdate {
	shu.mutation.Where(ps...)
	return shu
}

// SetUpdatedAt sets the "updated_at" field.
func (shu *SubcontrolHistoryUpdate) SetUpdatedAt(t time.Time) *SubcontrolHistoryUpdate {
	shu.mutation.SetUpdatedAt(t)
	return shu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (shu *SubcontrolHistoryUpdate) ClearUpdatedAt() *SubcontrolHistoryUpdate {
	shu.mutation.ClearUpdatedAt()
	return shu
}

// SetUpdatedBy sets the "updated_by" field.
func (shu *SubcontrolHistoryUpdate) SetUpdatedBy(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetUpdatedBy(s)
	return shu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableUpdatedBy(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetUpdatedBy(*s)
	}
	return shu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (shu *SubcontrolHistoryUpdate) ClearUpdatedBy() *SubcontrolHistoryUpdate {
	shu.mutation.ClearUpdatedBy()
	return shu
}

// SetDeletedAt sets the "deleted_at" field.
func (shu *SubcontrolHistoryUpdate) SetDeletedAt(t time.Time) *SubcontrolHistoryUpdate {
	shu.mutation.SetDeletedAt(t)
	return shu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableDeletedAt(t *time.Time) *SubcontrolHistoryUpdate {
	if t != nil {
		shu.SetDeletedAt(*t)
	}
	return shu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (shu *SubcontrolHistoryUpdate) ClearDeletedAt() *SubcontrolHistoryUpdate {
	shu.mutation.ClearDeletedAt()
	return shu
}

// SetDeletedBy sets the "deleted_by" field.
func (shu *SubcontrolHistoryUpdate) SetDeletedBy(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetDeletedBy(s)
	return shu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableDeletedBy(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetDeletedBy(*s)
	}
	return shu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (shu *SubcontrolHistoryUpdate) ClearDeletedBy() *SubcontrolHistoryUpdate {
	shu.mutation.ClearDeletedBy()
	return shu
}

// SetTags sets the "tags" field.
func (shu *SubcontrolHistoryUpdate) SetTags(s []string) *SubcontrolHistoryUpdate {
	shu.mutation.SetTags(s)
	return shu
}

// AppendTags appends s to the "tags" field.
func (shu *SubcontrolHistoryUpdate) AppendTags(s []string) *SubcontrolHistoryUpdate {
	shu.mutation.AppendTags(s)
	return shu
}

// ClearTags clears the value of the "tags" field.
func (shu *SubcontrolHistoryUpdate) ClearTags() *SubcontrolHistoryUpdate {
	shu.mutation.ClearTags()
	return shu
}

// SetDescription sets the "description" field.
func (shu *SubcontrolHistoryUpdate) SetDescription(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetDescription(s)
	return shu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableDescription(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetDescription(*s)
	}
	return shu
}

// ClearDescription clears the value of the "description" field.
func (shu *SubcontrolHistoryUpdate) ClearDescription() *SubcontrolHistoryUpdate {
	shu.mutation.ClearDescription()
	return shu
}

// SetReferenceID sets the "reference_id" field.
func (shu *SubcontrolHistoryUpdate) SetReferenceID(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetReferenceID(s)
	return shu
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableReferenceID(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetReferenceID(*s)
	}
	return shu
}

// ClearReferenceID clears the value of the "reference_id" field.
func (shu *SubcontrolHistoryUpdate) ClearReferenceID() *SubcontrolHistoryUpdate {
	shu.mutation.ClearReferenceID()
	return shu
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (shu *SubcontrolHistoryUpdate) SetAuditorReferenceID(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetAuditorReferenceID(s)
	return shu
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableAuditorReferenceID(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetAuditorReferenceID(*s)
	}
	return shu
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (shu *SubcontrolHistoryUpdate) ClearAuditorReferenceID() *SubcontrolHistoryUpdate {
	shu.mutation.ClearAuditorReferenceID()
	return shu
}

// SetStatus sets the "status" field.
func (shu *SubcontrolHistoryUpdate) SetStatus(es enums.ControlStatus) *SubcontrolHistoryUpdate {
	shu.mutation.SetStatus(es)
	return shu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableStatus(es *enums.ControlStatus) *SubcontrolHistoryUpdate {
	if es != nil {
		shu.SetStatus(*es)
	}
	return shu
}

// ClearStatus clears the value of the "status" field.
func (shu *SubcontrolHistoryUpdate) ClearStatus() *SubcontrolHistoryUpdate {
	shu.mutation.ClearStatus()
	return shu
}

// SetSource sets the "source" field.
func (shu *SubcontrolHistoryUpdate) SetSource(es enums.ControlSource) *SubcontrolHistoryUpdate {
	shu.mutation.SetSource(es)
	return shu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableSource(es *enums.ControlSource) *SubcontrolHistoryUpdate {
	if es != nil {
		shu.SetSource(*es)
	}
	return shu
}

// ClearSource clears the value of the "source" field.
func (shu *SubcontrolHistoryUpdate) ClearSource() *SubcontrolHistoryUpdate {
	shu.mutation.ClearSource()
	return shu
}

// SetControlType sets the "control_type" field.
func (shu *SubcontrolHistoryUpdate) SetControlType(et enums.ControlType) *SubcontrolHistoryUpdate {
	shu.mutation.SetControlType(et)
	return shu
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableControlType(et *enums.ControlType) *SubcontrolHistoryUpdate {
	if et != nil {
		shu.SetControlType(*et)
	}
	return shu
}

// ClearControlType clears the value of the "control_type" field.
func (shu *SubcontrolHistoryUpdate) ClearControlType() *SubcontrolHistoryUpdate {
	shu.mutation.ClearControlType()
	return shu
}

// SetCategory sets the "category" field.
func (shu *SubcontrolHistoryUpdate) SetCategory(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetCategory(s)
	return shu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableCategory(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetCategory(*s)
	}
	return shu
}

// ClearCategory clears the value of the "category" field.
func (shu *SubcontrolHistoryUpdate) ClearCategory() *SubcontrolHistoryUpdate {
	shu.mutation.ClearCategory()
	return shu
}

// SetCategoryID sets the "category_id" field.
func (shu *SubcontrolHistoryUpdate) SetCategoryID(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetCategoryID(s)
	return shu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableCategoryID(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetCategoryID(*s)
	}
	return shu
}

// ClearCategoryID clears the value of the "category_id" field.
func (shu *SubcontrolHistoryUpdate) ClearCategoryID() *SubcontrolHistoryUpdate {
	shu.mutation.ClearCategoryID()
	return shu
}

// SetSubcategory sets the "subcategory" field.
func (shu *SubcontrolHistoryUpdate) SetSubcategory(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetSubcategory(s)
	return shu
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableSubcategory(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetSubcategory(*s)
	}
	return shu
}

// ClearSubcategory clears the value of the "subcategory" field.
func (shu *SubcontrolHistoryUpdate) ClearSubcategory() *SubcontrolHistoryUpdate {
	shu.mutation.ClearSubcategory()
	return shu
}

// SetMappedCategories sets the "mapped_categories" field.
func (shu *SubcontrolHistoryUpdate) SetMappedCategories(s []string) *SubcontrolHistoryUpdate {
	shu.mutation.SetMappedCategories(s)
	return shu
}

// AppendMappedCategories appends s to the "mapped_categories" field.
func (shu *SubcontrolHistoryUpdate) AppendMappedCategories(s []string) *SubcontrolHistoryUpdate {
	shu.mutation.AppendMappedCategories(s)
	return shu
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (shu *SubcontrolHistoryUpdate) ClearMappedCategories() *SubcontrolHistoryUpdate {
	shu.mutation.ClearMappedCategories()
	return shu
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (shu *SubcontrolHistoryUpdate) SetAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolHistoryUpdate {
	shu.mutation.SetAssessmentObjectives(mo)
	return shu
}

// AppendAssessmentObjectives appends mo to the "assessment_objectives" field.
func (shu *SubcontrolHistoryUpdate) AppendAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolHistoryUpdate {
	shu.mutation.AppendAssessmentObjectives(mo)
	return shu
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (shu *SubcontrolHistoryUpdate) ClearAssessmentObjectives() *SubcontrolHistoryUpdate {
	shu.mutation.ClearAssessmentObjectives()
	return shu
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (shu *SubcontrolHistoryUpdate) SetAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolHistoryUpdate {
	shu.mutation.SetAssessmentMethods(mm)
	return shu
}

// AppendAssessmentMethods appends mm to the "assessment_methods" field.
func (shu *SubcontrolHistoryUpdate) AppendAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolHistoryUpdate {
	shu.mutation.AppendAssessmentMethods(mm)
	return shu
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (shu *SubcontrolHistoryUpdate) ClearAssessmentMethods() *SubcontrolHistoryUpdate {
	shu.mutation.ClearAssessmentMethods()
	return shu
}

// SetControlQuestions sets the "control_questions" field.
func (shu *SubcontrolHistoryUpdate) SetControlQuestions(s []string) *SubcontrolHistoryUpdate {
	shu.mutation.SetControlQuestions(s)
	return shu
}

// AppendControlQuestions appends s to the "control_questions" field.
func (shu *SubcontrolHistoryUpdate) AppendControlQuestions(s []string) *SubcontrolHistoryUpdate {
	shu.mutation.AppendControlQuestions(s)
	return shu
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (shu *SubcontrolHistoryUpdate) ClearControlQuestions() *SubcontrolHistoryUpdate {
	shu.mutation.ClearControlQuestions()
	return shu
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (shu *SubcontrolHistoryUpdate) SetImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolHistoryUpdate {
	shu.mutation.SetImplementationGuidance(mg)
	return shu
}

// AppendImplementationGuidance appends mg to the "implementation_guidance" field.
func (shu *SubcontrolHistoryUpdate) AppendImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolHistoryUpdate {
	shu.mutation.AppendImplementationGuidance(mg)
	return shu
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (shu *SubcontrolHistoryUpdate) ClearImplementationGuidance() *SubcontrolHistoryUpdate {
	shu.mutation.ClearImplementationGuidance()
	return shu
}

// SetExampleEvidence sets the "example_evidence" field.
func (shu *SubcontrolHistoryUpdate) SetExampleEvidence(me []models.ExampleEvidence) *SubcontrolHistoryUpdate {
	shu.mutation.SetExampleEvidence(me)
	return shu
}

// AppendExampleEvidence appends me to the "example_evidence" field.
func (shu *SubcontrolHistoryUpdate) AppendExampleEvidence(me []models.ExampleEvidence) *SubcontrolHistoryUpdate {
	shu.mutation.AppendExampleEvidence(me)
	return shu
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (shu *SubcontrolHistoryUpdate) ClearExampleEvidence() *SubcontrolHistoryUpdate {
	shu.mutation.ClearExampleEvidence()
	return shu
}

// SetReferences sets the "references" field.
func (shu *SubcontrolHistoryUpdate) SetReferences(m []models.Reference) *SubcontrolHistoryUpdate {
	shu.mutation.SetReferences(m)
	return shu
}

// AppendReferences appends m to the "references" field.
func (shu *SubcontrolHistoryUpdate) AppendReferences(m []models.Reference) *SubcontrolHistoryUpdate {
	shu.mutation.AppendReferences(m)
	return shu
}

// ClearReferences clears the value of the "references" field.
func (shu *SubcontrolHistoryUpdate) ClearReferences() *SubcontrolHistoryUpdate {
	shu.mutation.ClearReferences()
	return shu
}

// SetRefCode sets the "ref_code" field.
func (shu *SubcontrolHistoryUpdate) SetRefCode(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetRefCode(s)
	return shu
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableRefCode(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetRefCode(*s)
	}
	return shu
}

// SetControlID sets the "control_id" field.
func (shu *SubcontrolHistoryUpdate) SetControlID(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetControlID(s)
	return shu
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableControlID(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetControlID(*s)
	}
	return shu
}

// Mutation returns the SubcontrolHistoryMutation object of the builder.
func (shu *SubcontrolHistoryUpdate) Mutation() *SubcontrolHistoryMutation {
	return shu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (shu *SubcontrolHistoryUpdate) Save(ctx context.Context) (int, error) {
	shu.defaults()
	return withHooks(ctx, shu.sqlSave, shu.mutation, shu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shu *SubcontrolHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := shu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (shu *SubcontrolHistoryUpdate) Exec(ctx context.Context) error {
	_, err := shu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shu *SubcontrolHistoryUpdate) ExecX(ctx context.Context) {
	if err := shu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shu *SubcontrolHistoryUpdate) defaults() {
	if _, ok := shu.mutation.UpdatedAt(); !ok && !shu.mutation.UpdatedAtCleared() {
		v := subcontrolhistory.UpdateDefaultUpdatedAt()
		shu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shu *SubcontrolHistoryUpdate) check() error {
	if v, ok := shu.mutation.Status(); ok {
		if err := subcontrolhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.status": %w`, err)}
		}
	}
	if v, ok := shu.mutation.Source(); ok {
		if err := subcontrolhistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.source": %w`, err)}
		}
	}
	if v, ok := shu.mutation.ControlType(); ok {
		if err := subcontrolhistory.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.control_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (shu *SubcontrolHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolHistoryUpdate {
	shu.modifiers = append(shu.modifiers, modifiers...)
	return shu
}

func (shu *SubcontrolHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := shu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subcontrolhistory.Table, subcontrolhistory.Columns, sqlgraph.NewFieldSpec(subcontrolhistory.FieldID, field.TypeString))
	if ps := shu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if shu.mutation.RefCleared() {
		_spec.ClearField(subcontrolhistory.FieldRef, field.TypeString)
	}
	if shu.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := shu.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if shu.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedAt, field.TypeTime)
	}
	if shu.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := shu.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if shu.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := shu.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if shu.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := shu.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedBy, field.TypeString, value)
	}
	if shu.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := shu.mutation.Tags(); ok {
		_spec.SetField(subcontrolhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldTags, value)
		})
	}
	if shu.mutation.TagsCleared() {
		_spec.ClearField(subcontrolhistory.FieldTags, field.TypeJSON)
	}
	if shu.mutation.OwnerIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := shu.mutation.Description(); ok {
		_spec.SetField(subcontrolhistory.FieldDescription, field.TypeString, value)
	}
	if shu.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrolhistory.FieldDescription, field.TypeString)
	}
	if value, ok := shu.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldReferenceID, field.TypeString, value)
	}
	if shu.mutation.ReferenceIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferenceID, field.TypeString)
	}
	if value, ok := shu.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString, value)
	}
	if shu.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := shu.mutation.Status(); ok {
		_spec.SetField(subcontrolhistory.FieldStatus, field.TypeEnum, value)
	}
	if shu.mutation.StatusCleared() {
		_spec.ClearField(subcontrolhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := shu.mutation.Source(); ok {
		_spec.SetField(subcontrolhistory.FieldSource, field.TypeEnum, value)
	}
	if shu.mutation.SourceCleared() {
		_spec.ClearField(subcontrolhistory.FieldSource, field.TypeEnum)
	}
	if value, ok := shu.mutation.ControlType(); ok {
		_spec.SetField(subcontrolhistory.FieldControlType, field.TypeEnum, value)
	}
	if shu.mutation.ControlTypeCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlType, field.TypeEnum)
	}
	if value, ok := shu.mutation.Category(); ok {
		_spec.SetField(subcontrolhistory.FieldCategory, field.TypeString, value)
	}
	if shu.mutation.CategoryCleared() {
		_spec.ClearField(subcontrolhistory.FieldCategory, field.TypeString)
	}
	if value, ok := shu.mutation.CategoryID(); ok {
		_spec.SetField(subcontrolhistory.FieldCategoryID, field.TypeString, value)
	}
	if shu.mutation.CategoryIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldCategoryID, field.TypeString)
	}
	if value, ok := shu.mutation.Subcategory(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcategory, field.TypeString, value)
	}
	if shu.mutation.SubcategoryCleared() {
		_spec.ClearField(subcontrolhistory.FieldSubcategory, field.TypeString)
	}
	if value, ok := shu.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrolhistory.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldMappedCategories, value)
		})
	}
	if shu.mutation.MappedCategoriesCleared() {
		_spec.ClearField(subcontrolhistory.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := shu.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldAssessmentObjectives, value)
		})
	}
	if shu.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := shu.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldAssessmentMethods, value)
		})
	}
	if shu.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := shu.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrolhistory.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldControlQuestions, value)
		})
	}
	if shu.mutation.ControlQuestionsCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := shu.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldImplementationGuidance, value)
		})
	}
	if shu.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := shu.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldExampleEvidence, value)
		})
	}
	if shu.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := shu.mutation.References(); ok {
		_spec.SetField(subcontrolhistory.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldReferences, value)
		})
	}
	if shu.mutation.ReferencesCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferences, field.TypeJSON)
	}
	if value, ok := shu.mutation.RefCode(); ok {
		_spec.SetField(subcontrolhistory.FieldRefCode, field.TypeString, value)
	}
	if value, ok := shu.mutation.ControlID(); ok {
		_spec.SetField(subcontrolhistory.FieldControlID, field.TypeString, value)
	}
	_spec.Node.Schema = shu.schemaConfig.SubcontrolHistory
	ctx = internal.NewSchemaConfigContext(ctx, shu.schemaConfig)
	_spec.AddModifiers(shu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, shu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrolhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	shu.mutation.done = true
	return n, nil
}

// SubcontrolHistoryUpdateOne is the builder for updating a single SubcontrolHistory entity.
type SubcontrolHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubcontrolHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (shuo *SubcontrolHistoryUpdateOne) SetUpdatedAt(t time.Time) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetUpdatedAt(t)
	return shuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearUpdatedAt() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearUpdatedAt()
	return shuo
}

// SetUpdatedBy sets the "updated_by" field.
func (shuo *SubcontrolHistoryUpdateOne) SetUpdatedBy(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetUpdatedBy(s)
	return shuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableUpdatedBy(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetUpdatedBy(*s)
	}
	return shuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearUpdatedBy() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearUpdatedBy()
	return shuo
}

// SetDeletedAt sets the "deleted_at" field.
func (shuo *SubcontrolHistoryUpdateOne) SetDeletedAt(t time.Time) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetDeletedAt(t)
	return shuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *SubcontrolHistoryUpdateOne {
	if t != nil {
		shuo.SetDeletedAt(*t)
	}
	return shuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearDeletedAt() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearDeletedAt()
	return shuo
}

// SetDeletedBy sets the "deleted_by" field.
func (shuo *SubcontrolHistoryUpdateOne) SetDeletedBy(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetDeletedBy(s)
	return shuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableDeletedBy(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetDeletedBy(*s)
	}
	return shuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearDeletedBy() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearDeletedBy()
	return shuo
}

// SetTags sets the "tags" field.
func (shuo *SubcontrolHistoryUpdateOne) SetTags(s []string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetTags(s)
	return shuo
}

// AppendTags appends s to the "tags" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendTags(s []string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendTags(s)
	return shuo
}

// ClearTags clears the value of the "tags" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearTags() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearTags()
	return shuo
}

// SetDescription sets the "description" field.
func (shuo *SubcontrolHistoryUpdateOne) SetDescription(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetDescription(s)
	return shuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableDescription(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetDescription(*s)
	}
	return shuo
}

// ClearDescription clears the value of the "description" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearDescription() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearDescription()
	return shuo
}

// SetReferenceID sets the "reference_id" field.
func (shuo *SubcontrolHistoryUpdateOne) SetReferenceID(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetReferenceID(s)
	return shuo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableReferenceID(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetReferenceID(*s)
	}
	return shuo
}

// ClearReferenceID clears the value of the "reference_id" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearReferenceID() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearReferenceID()
	return shuo
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (shuo *SubcontrolHistoryUpdateOne) SetAuditorReferenceID(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetAuditorReferenceID(s)
	return shuo
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableAuditorReferenceID(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetAuditorReferenceID(*s)
	}
	return shuo
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearAuditorReferenceID() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearAuditorReferenceID()
	return shuo
}

// SetStatus sets the "status" field.
func (shuo *SubcontrolHistoryUpdateOne) SetStatus(es enums.ControlStatus) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetStatus(es)
	return shuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableStatus(es *enums.ControlStatus) *SubcontrolHistoryUpdateOne {
	if es != nil {
		shuo.SetStatus(*es)
	}
	return shuo
}

// ClearStatus clears the value of the "status" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearStatus() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearStatus()
	return shuo
}

// SetSource sets the "source" field.
func (shuo *SubcontrolHistoryUpdateOne) SetSource(es enums.ControlSource) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetSource(es)
	return shuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableSource(es *enums.ControlSource) *SubcontrolHistoryUpdateOne {
	if es != nil {
		shuo.SetSource(*es)
	}
	return shuo
}

// ClearSource clears the value of the "source" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearSource() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearSource()
	return shuo
}

// SetControlType sets the "control_type" field.
func (shuo *SubcontrolHistoryUpdateOne) SetControlType(et enums.ControlType) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetControlType(et)
	return shuo
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableControlType(et *enums.ControlType) *SubcontrolHistoryUpdateOne {
	if et != nil {
		shuo.SetControlType(*et)
	}
	return shuo
}

// ClearControlType clears the value of the "control_type" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearControlType() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearControlType()
	return shuo
}

// SetCategory sets the "category" field.
func (shuo *SubcontrolHistoryUpdateOne) SetCategory(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetCategory(s)
	return shuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableCategory(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetCategory(*s)
	}
	return shuo
}

// ClearCategory clears the value of the "category" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearCategory() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearCategory()
	return shuo
}

// SetCategoryID sets the "category_id" field.
func (shuo *SubcontrolHistoryUpdateOne) SetCategoryID(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetCategoryID(s)
	return shuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableCategoryID(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetCategoryID(*s)
	}
	return shuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearCategoryID() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearCategoryID()
	return shuo
}

// SetSubcategory sets the "subcategory" field.
func (shuo *SubcontrolHistoryUpdateOne) SetSubcategory(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetSubcategory(s)
	return shuo
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableSubcategory(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetSubcategory(*s)
	}
	return shuo
}

// ClearSubcategory clears the value of the "subcategory" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearSubcategory() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearSubcategory()
	return shuo
}

// SetMappedCategories sets the "mapped_categories" field.
func (shuo *SubcontrolHistoryUpdateOne) SetMappedCategories(s []string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetMappedCategories(s)
	return shuo
}

// AppendMappedCategories appends s to the "mapped_categories" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendMappedCategories(s []string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendMappedCategories(s)
	return shuo
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearMappedCategories() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearMappedCategories()
	return shuo
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (shuo *SubcontrolHistoryUpdateOne) SetAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetAssessmentObjectives(mo)
	return shuo
}

// AppendAssessmentObjectives appends mo to the "assessment_objectives" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendAssessmentObjectives(mo)
	return shuo
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearAssessmentObjectives() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearAssessmentObjectives()
	return shuo
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (shuo *SubcontrolHistoryUpdateOne) SetAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetAssessmentMethods(mm)
	return shuo
}

// AppendAssessmentMethods appends mm to the "assessment_methods" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendAssessmentMethods(mm)
	return shuo
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearAssessmentMethods() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearAssessmentMethods()
	return shuo
}

// SetControlQuestions sets the "control_questions" field.
func (shuo *SubcontrolHistoryUpdateOne) SetControlQuestions(s []string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetControlQuestions(s)
	return shuo
}

// AppendControlQuestions appends s to the "control_questions" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendControlQuestions(s []string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendControlQuestions(s)
	return shuo
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearControlQuestions() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearControlQuestions()
	return shuo
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (shuo *SubcontrolHistoryUpdateOne) SetImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetImplementationGuidance(mg)
	return shuo
}

// AppendImplementationGuidance appends mg to the "implementation_guidance" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendImplementationGuidance(mg)
	return shuo
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearImplementationGuidance() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearImplementationGuidance()
	return shuo
}

// SetExampleEvidence sets the "example_evidence" field.
func (shuo *SubcontrolHistoryUpdateOne) SetExampleEvidence(me []models.ExampleEvidence) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetExampleEvidence(me)
	return shuo
}

// AppendExampleEvidence appends me to the "example_evidence" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendExampleEvidence(me []models.ExampleEvidence) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendExampleEvidence(me)
	return shuo
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearExampleEvidence() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearExampleEvidence()
	return shuo
}

// SetReferences sets the "references" field.
func (shuo *SubcontrolHistoryUpdateOne) SetReferences(m []models.Reference) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetReferences(m)
	return shuo
}

// AppendReferences appends m to the "references" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendReferences(m []models.Reference) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendReferences(m)
	return shuo
}

// ClearReferences clears the value of the "references" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearReferences() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearReferences()
	return shuo
}

// SetRefCode sets the "ref_code" field.
func (shuo *SubcontrolHistoryUpdateOne) SetRefCode(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetRefCode(s)
	return shuo
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableRefCode(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetRefCode(*s)
	}
	return shuo
}

// SetControlID sets the "control_id" field.
func (shuo *SubcontrolHistoryUpdateOne) SetControlID(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetControlID(s)
	return shuo
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableControlID(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetControlID(*s)
	}
	return shuo
}

// Mutation returns the SubcontrolHistoryMutation object of the builder.
func (shuo *SubcontrolHistoryUpdateOne) Mutation() *SubcontrolHistoryMutation {
	return shuo.mutation
}

// Where appends a list predicates to the SubcontrolHistoryUpdate builder.
func (shuo *SubcontrolHistoryUpdateOne) Where(ps ...predicate.SubcontrolHistory) *SubcontrolHistoryUpdateOne {
	shuo.mutation.Where(ps...)
	return shuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (shuo *SubcontrolHistoryUpdateOne) Select(field string, fields ...string) *SubcontrolHistoryUpdateOne {
	shuo.fields = append([]string{field}, fields...)
	return shuo
}

// Save executes the query and returns the updated SubcontrolHistory entity.
func (shuo *SubcontrolHistoryUpdateOne) Save(ctx context.Context) (*SubcontrolHistory, error) {
	shuo.defaults()
	return withHooks(ctx, shuo.sqlSave, shuo.mutation, shuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shuo *SubcontrolHistoryUpdateOne) SaveX(ctx context.Context) *SubcontrolHistory {
	node, err := shuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (shuo *SubcontrolHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := shuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shuo *SubcontrolHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := shuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shuo *SubcontrolHistoryUpdateOne) defaults() {
	if _, ok := shuo.mutation.UpdatedAt(); !ok && !shuo.mutation.UpdatedAtCleared() {
		v := subcontrolhistory.UpdateDefaultUpdatedAt()
		shuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shuo *SubcontrolHistoryUpdateOne) check() error {
	if v, ok := shuo.mutation.Status(); ok {
		if err := subcontrolhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.status": %w`, err)}
		}
	}
	if v, ok := shuo.mutation.Source(); ok {
		if err := subcontrolhistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.source": %w`, err)}
		}
	}
	if v, ok := shuo.mutation.ControlType(); ok {
		if err := subcontrolhistory.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "SubcontrolHistory.control_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (shuo *SubcontrolHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolHistoryUpdateOne {
	shuo.modifiers = append(shuo.modifiers, modifiers...)
	return shuo
}

func (shuo *SubcontrolHistoryUpdateOne) sqlSave(ctx context.Context) (_node *SubcontrolHistory, err error) {
	if err := shuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subcontrolhistory.Table, subcontrolhistory.Columns, sqlgraph.NewFieldSpec(subcontrolhistory.FieldID, field.TypeString))
	id, ok := shuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SubcontrolHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := shuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrolhistory.FieldID)
		for _, f := range fields {
			if !subcontrolhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subcontrolhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := shuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if shuo.mutation.RefCleared() {
		_spec.ClearField(subcontrolhistory.FieldRef, field.TypeString)
	}
	if shuo.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := shuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if shuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedAt, field.TypeTime)
	}
	if shuo.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := shuo.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if shuo.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := shuo.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if shuo.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := shuo.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedBy, field.TypeString, value)
	}
	if shuo.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := shuo.mutation.Tags(); ok {
		_spec.SetField(subcontrolhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldTags, value)
		})
	}
	if shuo.mutation.TagsCleared() {
		_spec.ClearField(subcontrolhistory.FieldTags, field.TypeJSON)
	}
	if shuo.mutation.OwnerIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := shuo.mutation.Description(); ok {
		_spec.SetField(subcontrolhistory.FieldDescription, field.TypeString, value)
	}
	if shuo.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrolhistory.FieldDescription, field.TypeString)
	}
	if value, ok := shuo.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldReferenceID, field.TypeString, value)
	}
	if shuo.mutation.ReferenceIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferenceID, field.TypeString)
	}
	if value, ok := shuo.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString, value)
	}
	if shuo.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := shuo.mutation.Status(); ok {
		_spec.SetField(subcontrolhistory.FieldStatus, field.TypeEnum, value)
	}
	if shuo.mutation.StatusCleared() {
		_spec.ClearField(subcontrolhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := shuo.mutation.Source(); ok {
		_spec.SetField(subcontrolhistory.FieldSource, field.TypeEnum, value)
	}
	if shuo.mutation.SourceCleared() {
		_spec.ClearField(subcontrolhistory.FieldSource, field.TypeEnum)
	}
	if value, ok := shuo.mutation.ControlType(); ok {
		_spec.SetField(subcontrolhistory.FieldControlType, field.TypeEnum, value)
	}
	if shuo.mutation.ControlTypeCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlType, field.TypeEnum)
	}
	if value, ok := shuo.mutation.Category(); ok {
		_spec.SetField(subcontrolhistory.FieldCategory, field.TypeString, value)
	}
	if shuo.mutation.CategoryCleared() {
		_spec.ClearField(subcontrolhistory.FieldCategory, field.TypeString)
	}
	if value, ok := shuo.mutation.CategoryID(); ok {
		_spec.SetField(subcontrolhistory.FieldCategoryID, field.TypeString, value)
	}
	if shuo.mutation.CategoryIDCleared() {
		_spec.ClearField(subcontrolhistory.FieldCategoryID, field.TypeString)
	}
	if value, ok := shuo.mutation.Subcategory(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcategory, field.TypeString, value)
	}
	if shuo.mutation.SubcategoryCleared() {
		_spec.ClearField(subcontrolhistory.FieldSubcategory, field.TypeString)
	}
	if value, ok := shuo.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrolhistory.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldMappedCategories, value)
		})
	}
	if shuo.mutation.MappedCategoriesCleared() {
		_spec.ClearField(subcontrolhistory.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := shuo.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldAssessmentObjectives, value)
		})
	}
	if shuo.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(subcontrolhistory.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := shuo.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldAssessmentMethods, value)
		})
	}
	if shuo.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(subcontrolhistory.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := shuo.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrolhistory.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldControlQuestions, value)
		})
	}
	if shuo.mutation.ControlQuestionsCleared() {
		_spec.ClearField(subcontrolhistory.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := shuo.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldImplementationGuidance, value)
		})
	}
	if shuo.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := shuo.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldExampleEvidence, value)
		})
	}
	if shuo.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(subcontrolhistory.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := shuo.mutation.References(); ok {
		_spec.SetField(subcontrolhistory.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldReferences, value)
		})
	}
	if shuo.mutation.ReferencesCleared() {
		_spec.ClearField(subcontrolhistory.FieldReferences, field.TypeJSON)
	}
	if value, ok := shuo.mutation.RefCode(); ok {
		_spec.SetField(subcontrolhistory.FieldRefCode, field.TypeString, value)
	}
	if value, ok := shuo.mutation.ControlID(); ok {
		_spec.SetField(subcontrolhistory.FieldControlID, field.TypeString, value)
	}
	_spec.Node.Schema = shuo.schemaConfig.SubcontrolHistory
	ctx = internal.NewSchemaConfigContext(ctx, shuo.schemaConfig)
	_spec.AddModifiers(shuo.modifiers...)
	_node = &SubcontrolHistory{config: shuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, shuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrolhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	shuo.mutation.done = true
	return _node, nil
}
