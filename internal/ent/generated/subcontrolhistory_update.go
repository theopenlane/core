// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubcontrolHistoryUpdate is the builder for updating SubcontrolHistory entities.
type SubcontrolHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *SubcontrolHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubcontrolHistoryUpdate builder.
func (shu *SubcontrolHistoryUpdate) Where(ps ...predicate.SubcontrolHistory) *SubcontrolHistoryUpdate {
	shu.mutation.Where(ps...)
	return shu
}

// SetUpdatedAt sets the "updated_at" field.
func (shu *SubcontrolHistoryUpdate) SetUpdatedAt(t time.Time) *SubcontrolHistoryUpdate {
	shu.mutation.SetUpdatedAt(t)
	return shu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (shu *SubcontrolHistoryUpdate) ClearUpdatedAt() *SubcontrolHistoryUpdate {
	shu.mutation.ClearUpdatedAt()
	return shu
}

// SetUpdatedBy sets the "updated_by" field.
func (shu *SubcontrolHistoryUpdate) SetUpdatedBy(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetUpdatedBy(s)
	return shu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableUpdatedBy(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetUpdatedBy(*s)
	}
	return shu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (shu *SubcontrolHistoryUpdate) ClearUpdatedBy() *SubcontrolHistoryUpdate {
	shu.mutation.ClearUpdatedBy()
	return shu
}

// SetDeletedAt sets the "deleted_at" field.
func (shu *SubcontrolHistoryUpdate) SetDeletedAt(t time.Time) *SubcontrolHistoryUpdate {
	shu.mutation.SetDeletedAt(t)
	return shu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableDeletedAt(t *time.Time) *SubcontrolHistoryUpdate {
	if t != nil {
		shu.SetDeletedAt(*t)
	}
	return shu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (shu *SubcontrolHistoryUpdate) ClearDeletedAt() *SubcontrolHistoryUpdate {
	shu.mutation.ClearDeletedAt()
	return shu
}

// SetDeletedBy sets the "deleted_by" field.
func (shu *SubcontrolHistoryUpdate) SetDeletedBy(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetDeletedBy(s)
	return shu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableDeletedBy(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetDeletedBy(*s)
	}
	return shu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (shu *SubcontrolHistoryUpdate) ClearDeletedBy() *SubcontrolHistoryUpdate {
	shu.mutation.ClearDeletedBy()
	return shu
}

// SetTags sets the "tags" field.
func (shu *SubcontrolHistoryUpdate) SetTags(s []string) *SubcontrolHistoryUpdate {
	shu.mutation.SetTags(s)
	return shu
}

// AppendTags appends s to the "tags" field.
func (shu *SubcontrolHistoryUpdate) AppendTags(s []string) *SubcontrolHistoryUpdate {
	shu.mutation.AppendTags(s)
	return shu
}

// ClearTags clears the value of the "tags" field.
func (shu *SubcontrolHistoryUpdate) ClearTags() *SubcontrolHistoryUpdate {
	shu.mutation.ClearTags()
	return shu
}

// SetOwnerID sets the "owner_id" field.
func (shu *SubcontrolHistoryUpdate) SetOwnerID(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetOwnerID(s)
	return shu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableOwnerID(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetOwnerID(*s)
	}
	return shu
}

// SetName sets the "name" field.
func (shu *SubcontrolHistoryUpdate) SetName(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetName(s)
	return shu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableName(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetName(*s)
	}
	return shu
}

// SetDescription sets the "description" field.
func (shu *SubcontrolHistoryUpdate) SetDescription(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetDescription(s)
	return shu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableDescription(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetDescription(*s)
	}
	return shu
}

// ClearDescription clears the value of the "description" field.
func (shu *SubcontrolHistoryUpdate) ClearDescription() *SubcontrolHistoryUpdate {
	shu.mutation.ClearDescription()
	return shu
}

// SetStatus sets the "status" field.
func (shu *SubcontrolHistoryUpdate) SetStatus(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetStatus(s)
	return shu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableStatus(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetStatus(*s)
	}
	return shu
}

// ClearStatus clears the value of the "status" field.
func (shu *SubcontrolHistoryUpdate) ClearStatus() *SubcontrolHistoryUpdate {
	shu.mutation.ClearStatus()
	return shu
}

// SetSubcontrolType sets the "subcontrol_type" field.
func (shu *SubcontrolHistoryUpdate) SetSubcontrolType(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetSubcontrolType(s)
	return shu
}

// SetNillableSubcontrolType sets the "subcontrol_type" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableSubcontrolType(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetSubcontrolType(*s)
	}
	return shu
}

// ClearSubcontrolType clears the value of the "subcontrol_type" field.
func (shu *SubcontrolHistoryUpdate) ClearSubcontrolType() *SubcontrolHistoryUpdate {
	shu.mutation.ClearSubcontrolType()
	return shu
}

// SetVersion sets the "version" field.
func (shu *SubcontrolHistoryUpdate) SetVersion(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetVersion(s)
	return shu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableVersion(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetVersion(*s)
	}
	return shu
}

// ClearVersion clears the value of the "version" field.
func (shu *SubcontrolHistoryUpdate) ClearVersion() *SubcontrolHistoryUpdate {
	shu.mutation.ClearVersion()
	return shu
}

// SetSubcontrolNumber sets the "subcontrol_number" field.
func (shu *SubcontrolHistoryUpdate) SetSubcontrolNumber(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetSubcontrolNumber(s)
	return shu
}

// SetNillableSubcontrolNumber sets the "subcontrol_number" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableSubcontrolNumber(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetSubcontrolNumber(*s)
	}
	return shu
}

// ClearSubcontrolNumber clears the value of the "subcontrol_number" field.
func (shu *SubcontrolHistoryUpdate) ClearSubcontrolNumber() *SubcontrolHistoryUpdate {
	shu.mutation.ClearSubcontrolNumber()
	return shu
}

// SetFamily sets the "family" field.
func (shu *SubcontrolHistoryUpdate) SetFamily(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetFamily(s)
	return shu
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableFamily(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetFamily(*s)
	}
	return shu
}

// ClearFamily clears the value of the "family" field.
func (shu *SubcontrolHistoryUpdate) ClearFamily() *SubcontrolHistoryUpdate {
	shu.mutation.ClearFamily()
	return shu
}

// SetClass sets the "class" field.
func (shu *SubcontrolHistoryUpdate) SetClass(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetClass(s)
	return shu
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableClass(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetClass(*s)
	}
	return shu
}

// ClearClass clears the value of the "class" field.
func (shu *SubcontrolHistoryUpdate) ClearClass() *SubcontrolHistoryUpdate {
	shu.mutation.ClearClass()
	return shu
}

// SetSource sets the "source" field.
func (shu *SubcontrolHistoryUpdate) SetSource(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetSource(s)
	return shu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableSource(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetSource(*s)
	}
	return shu
}

// ClearSource clears the value of the "source" field.
func (shu *SubcontrolHistoryUpdate) ClearSource() *SubcontrolHistoryUpdate {
	shu.mutation.ClearSource()
	return shu
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (shu *SubcontrolHistoryUpdate) SetMappedFrameworks(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetMappedFrameworks(s)
	return shu
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableMappedFrameworks(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetMappedFrameworks(*s)
	}
	return shu
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (shu *SubcontrolHistoryUpdate) ClearMappedFrameworks() *SubcontrolHistoryUpdate {
	shu.mutation.ClearMappedFrameworks()
	return shu
}

// SetImplementationEvidence sets the "implementation_evidence" field.
func (shu *SubcontrolHistoryUpdate) SetImplementationEvidence(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetImplementationEvidence(s)
	return shu
}

// SetNillableImplementationEvidence sets the "implementation_evidence" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableImplementationEvidence(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetImplementationEvidence(*s)
	}
	return shu
}

// ClearImplementationEvidence clears the value of the "implementation_evidence" field.
func (shu *SubcontrolHistoryUpdate) ClearImplementationEvidence() *SubcontrolHistoryUpdate {
	shu.mutation.ClearImplementationEvidence()
	return shu
}

// SetImplementationStatus sets the "implementation_status" field.
func (shu *SubcontrolHistoryUpdate) SetImplementationStatus(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetImplementationStatus(s)
	return shu
}

// SetNillableImplementationStatus sets the "implementation_status" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableImplementationStatus(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetImplementationStatus(*s)
	}
	return shu
}

// ClearImplementationStatus clears the value of the "implementation_status" field.
func (shu *SubcontrolHistoryUpdate) ClearImplementationStatus() *SubcontrolHistoryUpdate {
	shu.mutation.ClearImplementationStatus()
	return shu
}

// SetImplementationDate sets the "implementation_date" field.
func (shu *SubcontrolHistoryUpdate) SetImplementationDate(t time.Time) *SubcontrolHistoryUpdate {
	shu.mutation.SetImplementationDate(t)
	return shu
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableImplementationDate(t *time.Time) *SubcontrolHistoryUpdate {
	if t != nil {
		shu.SetImplementationDate(*t)
	}
	return shu
}

// ClearImplementationDate clears the value of the "implementation_date" field.
func (shu *SubcontrolHistoryUpdate) ClearImplementationDate() *SubcontrolHistoryUpdate {
	shu.mutation.ClearImplementationDate()
	return shu
}

// SetImplementationVerification sets the "implementation_verification" field.
func (shu *SubcontrolHistoryUpdate) SetImplementationVerification(s string) *SubcontrolHistoryUpdate {
	shu.mutation.SetImplementationVerification(s)
	return shu
}

// SetNillableImplementationVerification sets the "implementation_verification" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableImplementationVerification(s *string) *SubcontrolHistoryUpdate {
	if s != nil {
		shu.SetImplementationVerification(*s)
	}
	return shu
}

// ClearImplementationVerification clears the value of the "implementation_verification" field.
func (shu *SubcontrolHistoryUpdate) ClearImplementationVerification() *SubcontrolHistoryUpdate {
	shu.mutation.ClearImplementationVerification()
	return shu
}

// SetImplementationVerificationDate sets the "implementation_verification_date" field.
func (shu *SubcontrolHistoryUpdate) SetImplementationVerificationDate(t time.Time) *SubcontrolHistoryUpdate {
	shu.mutation.SetImplementationVerificationDate(t)
	return shu
}

// SetNillableImplementationVerificationDate sets the "implementation_verification_date" field if the given value is not nil.
func (shu *SubcontrolHistoryUpdate) SetNillableImplementationVerificationDate(t *time.Time) *SubcontrolHistoryUpdate {
	if t != nil {
		shu.SetImplementationVerificationDate(*t)
	}
	return shu
}

// ClearImplementationVerificationDate clears the value of the "implementation_verification_date" field.
func (shu *SubcontrolHistoryUpdate) ClearImplementationVerificationDate() *SubcontrolHistoryUpdate {
	shu.mutation.ClearImplementationVerificationDate()
	return shu
}

// SetDetails sets the "details" field.
func (shu *SubcontrolHistoryUpdate) SetDetails(m map[string]interface{}) *SubcontrolHistoryUpdate {
	shu.mutation.SetDetails(m)
	return shu
}

// ClearDetails clears the value of the "details" field.
func (shu *SubcontrolHistoryUpdate) ClearDetails() *SubcontrolHistoryUpdate {
	shu.mutation.ClearDetails()
	return shu
}

// Mutation returns the SubcontrolHistoryMutation object of the builder.
func (shu *SubcontrolHistoryUpdate) Mutation() *SubcontrolHistoryMutation {
	return shu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (shu *SubcontrolHistoryUpdate) Save(ctx context.Context) (int, error) {
	shu.defaults()
	return withHooks(ctx, shu.sqlSave, shu.mutation, shu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shu *SubcontrolHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := shu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (shu *SubcontrolHistoryUpdate) Exec(ctx context.Context) error {
	_, err := shu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shu *SubcontrolHistoryUpdate) ExecX(ctx context.Context) {
	if err := shu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shu *SubcontrolHistoryUpdate) defaults() {
	if _, ok := shu.mutation.UpdatedAt(); !ok && !shu.mutation.UpdatedAtCleared() {
		v := subcontrolhistory.UpdateDefaultUpdatedAt()
		shu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (shu *SubcontrolHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolHistoryUpdate {
	shu.modifiers = append(shu.modifiers, modifiers...)
	return shu
}

func (shu *SubcontrolHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subcontrolhistory.Table, subcontrolhistory.Columns, sqlgraph.NewFieldSpec(subcontrolhistory.FieldID, field.TypeString))
	if ps := shu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if shu.mutation.RefCleared() {
		_spec.ClearField(subcontrolhistory.FieldRef, field.TypeString)
	}
	if shu.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := shu.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if shu.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedAt, field.TypeTime)
	}
	if shu.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := shu.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if shu.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := shu.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if shu.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := shu.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedBy, field.TypeString, value)
	}
	if shu.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := shu.mutation.Tags(); ok {
		_spec.SetField(subcontrolhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := shu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldTags, value)
		})
	}
	if shu.mutation.TagsCleared() {
		_spec.ClearField(subcontrolhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := shu.mutation.OwnerID(); ok {
		_spec.SetField(subcontrolhistory.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := shu.mutation.Name(); ok {
		_spec.SetField(subcontrolhistory.FieldName, field.TypeString, value)
	}
	if value, ok := shu.mutation.Description(); ok {
		_spec.SetField(subcontrolhistory.FieldDescription, field.TypeString, value)
	}
	if shu.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrolhistory.FieldDescription, field.TypeString)
	}
	if value, ok := shu.mutation.Status(); ok {
		_spec.SetField(subcontrolhistory.FieldStatus, field.TypeString, value)
	}
	if shu.mutation.StatusCleared() {
		_spec.ClearField(subcontrolhistory.FieldStatus, field.TypeString)
	}
	if value, ok := shu.mutation.SubcontrolType(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcontrolType, field.TypeString, value)
	}
	if shu.mutation.SubcontrolTypeCleared() {
		_spec.ClearField(subcontrolhistory.FieldSubcontrolType, field.TypeString)
	}
	if value, ok := shu.mutation.Version(); ok {
		_spec.SetField(subcontrolhistory.FieldVersion, field.TypeString, value)
	}
	if shu.mutation.VersionCleared() {
		_spec.ClearField(subcontrolhistory.FieldVersion, field.TypeString)
	}
	if value, ok := shu.mutation.SubcontrolNumber(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcontrolNumber, field.TypeString, value)
	}
	if shu.mutation.SubcontrolNumberCleared() {
		_spec.ClearField(subcontrolhistory.FieldSubcontrolNumber, field.TypeString)
	}
	if value, ok := shu.mutation.Family(); ok {
		_spec.SetField(subcontrolhistory.FieldFamily, field.TypeString, value)
	}
	if shu.mutation.FamilyCleared() {
		_spec.ClearField(subcontrolhistory.FieldFamily, field.TypeString)
	}
	if value, ok := shu.mutation.Class(); ok {
		_spec.SetField(subcontrolhistory.FieldClass, field.TypeString, value)
	}
	if shu.mutation.ClassCleared() {
		_spec.ClearField(subcontrolhistory.FieldClass, field.TypeString)
	}
	if value, ok := shu.mutation.Source(); ok {
		_spec.SetField(subcontrolhistory.FieldSource, field.TypeString, value)
	}
	if shu.mutation.SourceCleared() {
		_spec.ClearField(subcontrolhistory.FieldSource, field.TypeString)
	}
	if value, ok := shu.mutation.MappedFrameworks(); ok {
		_spec.SetField(subcontrolhistory.FieldMappedFrameworks, field.TypeString, value)
	}
	if shu.mutation.MappedFrameworksCleared() {
		_spec.ClearField(subcontrolhistory.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := shu.mutation.ImplementationEvidence(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationEvidence, field.TypeString, value)
	}
	if shu.mutation.ImplementationEvidenceCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationEvidence, field.TypeString)
	}
	if value, ok := shu.mutation.ImplementationStatus(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationStatus, field.TypeString, value)
	}
	if shu.mutation.ImplementationStatusCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationStatus, field.TypeString)
	}
	if value, ok := shu.mutation.ImplementationDate(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationDate, field.TypeTime, value)
	}
	if shu.mutation.ImplementationDateCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationDate, field.TypeTime)
	}
	if value, ok := shu.mutation.ImplementationVerification(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationVerification, field.TypeString, value)
	}
	if shu.mutation.ImplementationVerificationCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationVerification, field.TypeString)
	}
	if value, ok := shu.mutation.ImplementationVerificationDate(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationVerificationDate, field.TypeTime, value)
	}
	if shu.mutation.ImplementationVerificationDateCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationVerificationDate, field.TypeTime)
	}
	if value, ok := shu.mutation.Details(); ok {
		_spec.SetField(subcontrolhistory.FieldDetails, field.TypeJSON, value)
	}
	if shu.mutation.DetailsCleared() {
		_spec.ClearField(subcontrolhistory.FieldDetails, field.TypeJSON)
	}
	_spec.Node.Schema = shu.schemaConfig.SubcontrolHistory
	ctx = internal.NewSchemaConfigContext(ctx, shu.schemaConfig)
	_spec.AddModifiers(shu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, shu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrolhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	shu.mutation.done = true
	return n, nil
}

// SubcontrolHistoryUpdateOne is the builder for updating a single SubcontrolHistory entity.
type SubcontrolHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubcontrolHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (shuo *SubcontrolHistoryUpdateOne) SetUpdatedAt(t time.Time) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetUpdatedAt(t)
	return shuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearUpdatedAt() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearUpdatedAt()
	return shuo
}

// SetUpdatedBy sets the "updated_by" field.
func (shuo *SubcontrolHistoryUpdateOne) SetUpdatedBy(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetUpdatedBy(s)
	return shuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableUpdatedBy(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetUpdatedBy(*s)
	}
	return shuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearUpdatedBy() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearUpdatedBy()
	return shuo
}

// SetDeletedAt sets the "deleted_at" field.
func (shuo *SubcontrolHistoryUpdateOne) SetDeletedAt(t time.Time) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetDeletedAt(t)
	return shuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *SubcontrolHistoryUpdateOne {
	if t != nil {
		shuo.SetDeletedAt(*t)
	}
	return shuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearDeletedAt() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearDeletedAt()
	return shuo
}

// SetDeletedBy sets the "deleted_by" field.
func (shuo *SubcontrolHistoryUpdateOne) SetDeletedBy(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetDeletedBy(s)
	return shuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableDeletedBy(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetDeletedBy(*s)
	}
	return shuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearDeletedBy() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearDeletedBy()
	return shuo
}

// SetTags sets the "tags" field.
func (shuo *SubcontrolHistoryUpdateOne) SetTags(s []string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetTags(s)
	return shuo
}

// AppendTags appends s to the "tags" field.
func (shuo *SubcontrolHistoryUpdateOne) AppendTags(s []string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.AppendTags(s)
	return shuo
}

// ClearTags clears the value of the "tags" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearTags() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearTags()
	return shuo
}

// SetOwnerID sets the "owner_id" field.
func (shuo *SubcontrolHistoryUpdateOne) SetOwnerID(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetOwnerID(s)
	return shuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableOwnerID(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetOwnerID(*s)
	}
	return shuo
}

// SetName sets the "name" field.
func (shuo *SubcontrolHistoryUpdateOne) SetName(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetName(s)
	return shuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableName(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetName(*s)
	}
	return shuo
}

// SetDescription sets the "description" field.
func (shuo *SubcontrolHistoryUpdateOne) SetDescription(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetDescription(s)
	return shuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableDescription(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetDescription(*s)
	}
	return shuo
}

// ClearDescription clears the value of the "description" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearDescription() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearDescription()
	return shuo
}

// SetStatus sets the "status" field.
func (shuo *SubcontrolHistoryUpdateOne) SetStatus(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetStatus(s)
	return shuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableStatus(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetStatus(*s)
	}
	return shuo
}

// ClearStatus clears the value of the "status" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearStatus() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearStatus()
	return shuo
}

// SetSubcontrolType sets the "subcontrol_type" field.
func (shuo *SubcontrolHistoryUpdateOne) SetSubcontrolType(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetSubcontrolType(s)
	return shuo
}

// SetNillableSubcontrolType sets the "subcontrol_type" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableSubcontrolType(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetSubcontrolType(*s)
	}
	return shuo
}

// ClearSubcontrolType clears the value of the "subcontrol_type" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearSubcontrolType() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearSubcontrolType()
	return shuo
}

// SetVersion sets the "version" field.
func (shuo *SubcontrolHistoryUpdateOne) SetVersion(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetVersion(s)
	return shuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableVersion(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetVersion(*s)
	}
	return shuo
}

// ClearVersion clears the value of the "version" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearVersion() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearVersion()
	return shuo
}

// SetSubcontrolNumber sets the "subcontrol_number" field.
func (shuo *SubcontrolHistoryUpdateOne) SetSubcontrolNumber(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetSubcontrolNumber(s)
	return shuo
}

// SetNillableSubcontrolNumber sets the "subcontrol_number" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableSubcontrolNumber(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetSubcontrolNumber(*s)
	}
	return shuo
}

// ClearSubcontrolNumber clears the value of the "subcontrol_number" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearSubcontrolNumber() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearSubcontrolNumber()
	return shuo
}

// SetFamily sets the "family" field.
func (shuo *SubcontrolHistoryUpdateOne) SetFamily(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetFamily(s)
	return shuo
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableFamily(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetFamily(*s)
	}
	return shuo
}

// ClearFamily clears the value of the "family" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearFamily() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearFamily()
	return shuo
}

// SetClass sets the "class" field.
func (shuo *SubcontrolHistoryUpdateOne) SetClass(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetClass(s)
	return shuo
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableClass(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetClass(*s)
	}
	return shuo
}

// ClearClass clears the value of the "class" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearClass() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearClass()
	return shuo
}

// SetSource sets the "source" field.
func (shuo *SubcontrolHistoryUpdateOne) SetSource(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetSource(s)
	return shuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableSource(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetSource(*s)
	}
	return shuo
}

// ClearSource clears the value of the "source" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearSource() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearSource()
	return shuo
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (shuo *SubcontrolHistoryUpdateOne) SetMappedFrameworks(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetMappedFrameworks(s)
	return shuo
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableMappedFrameworks(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetMappedFrameworks(*s)
	}
	return shuo
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearMappedFrameworks() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearMappedFrameworks()
	return shuo
}

// SetImplementationEvidence sets the "implementation_evidence" field.
func (shuo *SubcontrolHistoryUpdateOne) SetImplementationEvidence(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetImplementationEvidence(s)
	return shuo
}

// SetNillableImplementationEvidence sets the "implementation_evidence" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableImplementationEvidence(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetImplementationEvidence(*s)
	}
	return shuo
}

// ClearImplementationEvidence clears the value of the "implementation_evidence" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearImplementationEvidence() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearImplementationEvidence()
	return shuo
}

// SetImplementationStatus sets the "implementation_status" field.
func (shuo *SubcontrolHistoryUpdateOne) SetImplementationStatus(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetImplementationStatus(s)
	return shuo
}

// SetNillableImplementationStatus sets the "implementation_status" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableImplementationStatus(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetImplementationStatus(*s)
	}
	return shuo
}

// ClearImplementationStatus clears the value of the "implementation_status" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearImplementationStatus() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearImplementationStatus()
	return shuo
}

// SetImplementationDate sets the "implementation_date" field.
func (shuo *SubcontrolHistoryUpdateOne) SetImplementationDate(t time.Time) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetImplementationDate(t)
	return shuo
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableImplementationDate(t *time.Time) *SubcontrolHistoryUpdateOne {
	if t != nil {
		shuo.SetImplementationDate(*t)
	}
	return shuo
}

// ClearImplementationDate clears the value of the "implementation_date" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearImplementationDate() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearImplementationDate()
	return shuo
}

// SetImplementationVerification sets the "implementation_verification" field.
func (shuo *SubcontrolHistoryUpdateOne) SetImplementationVerification(s string) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetImplementationVerification(s)
	return shuo
}

// SetNillableImplementationVerification sets the "implementation_verification" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableImplementationVerification(s *string) *SubcontrolHistoryUpdateOne {
	if s != nil {
		shuo.SetImplementationVerification(*s)
	}
	return shuo
}

// ClearImplementationVerification clears the value of the "implementation_verification" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearImplementationVerification() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearImplementationVerification()
	return shuo
}

// SetImplementationVerificationDate sets the "implementation_verification_date" field.
func (shuo *SubcontrolHistoryUpdateOne) SetImplementationVerificationDate(t time.Time) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetImplementationVerificationDate(t)
	return shuo
}

// SetNillableImplementationVerificationDate sets the "implementation_verification_date" field if the given value is not nil.
func (shuo *SubcontrolHistoryUpdateOne) SetNillableImplementationVerificationDate(t *time.Time) *SubcontrolHistoryUpdateOne {
	if t != nil {
		shuo.SetImplementationVerificationDate(*t)
	}
	return shuo
}

// ClearImplementationVerificationDate clears the value of the "implementation_verification_date" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearImplementationVerificationDate() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearImplementationVerificationDate()
	return shuo
}

// SetDetails sets the "details" field.
func (shuo *SubcontrolHistoryUpdateOne) SetDetails(m map[string]interface{}) *SubcontrolHistoryUpdateOne {
	shuo.mutation.SetDetails(m)
	return shuo
}

// ClearDetails clears the value of the "details" field.
func (shuo *SubcontrolHistoryUpdateOne) ClearDetails() *SubcontrolHistoryUpdateOne {
	shuo.mutation.ClearDetails()
	return shuo
}

// Mutation returns the SubcontrolHistoryMutation object of the builder.
func (shuo *SubcontrolHistoryUpdateOne) Mutation() *SubcontrolHistoryMutation {
	return shuo.mutation
}

// Where appends a list predicates to the SubcontrolHistoryUpdate builder.
func (shuo *SubcontrolHistoryUpdateOne) Where(ps ...predicate.SubcontrolHistory) *SubcontrolHistoryUpdateOne {
	shuo.mutation.Where(ps...)
	return shuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (shuo *SubcontrolHistoryUpdateOne) Select(field string, fields ...string) *SubcontrolHistoryUpdateOne {
	shuo.fields = append([]string{field}, fields...)
	return shuo
}

// Save executes the query and returns the updated SubcontrolHistory entity.
func (shuo *SubcontrolHistoryUpdateOne) Save(ctx context.Context) (*SubcontrolHistory, error) {
	shuo.defaults()
	return withHooks(ctx, shuo.sqlSave, shuo.mutation, shuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shuo *SubcontrolHistoryUpdateOne) SaveX(ctx context.Context) *SubcontrolHistory {
	node, err := shuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (shuo *SubcontrolHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := shuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shuo *SubcontrolHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := shuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shuo *SubcontrolHistoryUpdateOne) defaults() {
	if _, ok := shuo.mutation.UpdatedAt(); !ok && !shuo.mutation.UpdatedAtCleared() {
		v := subcontrolhistory.UpdateDefaultUpdatedAt()
		shuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (shuo *SubcontrolHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolHistoryUpdateOne {
	shuo.modifiers = append(shuo.modifiers, modifiers...)
	return shuo
}

func (shuo *SubcontrolHistoryUpdateOne) sqlSave(ctx context.Context) (_node *SubcontrolHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(subcontrolhistory.Table, subcontrolhistory.Columns, sqlgraph.NewFieldSpec(subcontrolhistory.FieldID, field.TypeString))
	id, ok := shuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SubcontrolHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := shuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrolhistory.FieldID)
		for _, f := range fields {
			if !subcontrolhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subcontrolhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := shuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if shuo.mutation.RefCleared() {
		_spec.ClearField(subcontrolhistory.FieldRef, field.TypeString)
	}
	if shuo.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := shuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if shuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedAt, field.TypeTime)
	}
	if shuo.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := shuo.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if shuo.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := shuo.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if shuo.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := shuo.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrolhistory.FieldDeletedBy, field.TypeString, value)
	}
	if shuo.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrolhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := shuo.mutation.Tags(); ok {
		_spec.SetField(subcontrolhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := shuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrolhistory.FieldTags, value)
		})
	}
	if shuo.mutation.TagsCleared() {
		_spec.ClearField(subcontrolhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := shuo.mutation.OwnerID(); ok {
		_spec.SetField(subcontrolhistory.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := shuo.mutation.Name(); ok {
		_spec.SetField(subcontrolhistory.FieldName, field.TypeString, value)
	}
	if value, ok := shuo.mutation.Description(); ok {
		_spec.SetField(subcontrolhistory.FieldDescription, field.TypeString, value)
	}
	if shuo.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrolhistory.FieldDescription, field.TypeString)
	}
	if value, ok := shuo.mutation.Status(); ok {
		_spec.SetField(subcontrolhistory.FieldStatus, field.TypeString, value)
	}
	if shuo.mutation.StatusCleared() {
		_spec.ClearField(subcontrolhistory.FieldStatus, field.TypeString)
	}
	if value, ok := shuo.mutation.SubcontrolType(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcontrolType, field.TypeString, value)
	}
	if shuo.mutation.SubcontrolTypeCleared() {
		_spec.ClearField(subcontrolhistory.FieldSubcontrolType, field.TypeString)
	}
	if value, ok := shuo.mutation.Version(); ok {
		_spec.SetField(subcontrolhistory.FieldVersion, field.TypeString, value)
	}
	if shuo.mutation.VersionCleared() {
		_spec.ClearField(subcontrolhistory.FieldVersion, field.TypeString)
	}
	if value, ok := shuo.mutation.SubcontrolNumber(); ok {
		_spec.SetField(subcontrolhistory.FieldSubcontrolNumber, field.TypeString, value)
	}
	if shuo.mutation.SubcontrolNumberCleared() {
		_spec.ClearField(subcontrolhistory.FieldSubcontrolNumber, field.TypeString)
	}
	if value, ok := shuo.mutation.Family(); ok {
		_spec.SetField(subcontrolhistory.FieldFamily, field.TypeString, value)
	}
	if shuo.mutation.FamilyCleared() {
		_spec.ClearField(subcontrolhistory.FieldFamily, field.TypeString)
	}
	if value, ok := shuo.mutation.Class(); ok {
		_spec.SetField(subcontrolhistory.FieldClass, field.TypeString, value)
	}
	if shuo.mutation.ClassCleared() {
		_spec.ClearField(subcontrolhistory.FieldClass, field.TypeString)
	}
	if value, ok := shuo.mutation.Source(); ok {
		_spec.SetField(subcontrolhistory.FieldSource, field.TypeString, value)
	}
	if shuo.mutation.SourceCleared() {
		_spec.ClearField(subcontrolhistory.FieldSource, field.TypeString)
	}
	if value, ok := shuo.mutation.MappedFrameworks(); ok {
		_spec.SetField(subcontrolhistory.FieldMappedFrameworks, field.TypeString, value)
	}
	if shuo.mutation.MappedFrameworksCleared() {
		_spec.ClearField(subcontrolhistory.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := shuo.mutation.ImplementationEvidence(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationEvidence, field.TypeString, value)
	}
	if shuo.mutation.ImplementationEvidenceCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationEvidence, field.TypeString)
	}
	if value, ok := shuo.mutation.ImplementationStatus(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationStatus, field.TypeString, value)
	}
	if shuo.mutation.ImplementationStatusCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationStatus, field.TypeString)
	}
	if value, ok := shuo.mutation.ImplementationDate(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationDate, field.TypeTime, value)
	}
	if shuo.mutation.ImplementationDateCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationDate, field.TypeTime)
	}
	if value, ok := shuo.mutation.ImplementationVerification(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationVerification, field.TypeString, value)
	}
	if shuo.mutation.ImplementationVerificationCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationVerification, field.TypeString)
	}
	if value, ok := shuo.mutation.ImplementationVerificationDate(); ok {
		_spec.SetField(subcontrolhistory.FieldImplementationVerificationDate, field.TypeTime, value)
	}
	if shuo.mutation.ImplementationVerificationDateCleared() {
		_spec.ClearField(subcontrolhistory.FieldImplementationVerificationDate, field.TypeTime)
	}
	if value, ok := shuo.mutation.Details(); ok {
		_spec.SetField(subcontrolhistory.FieldDetails, field.TypeJSON, value)
	}
	if shuo.mutation.DetailsCleared() {
		_spec.ClearField(subcontrolhistory.FieldDetails, field.TypeJSON)
	}
	_spec.Node.Schema = shuo.schemaConfig.SubcontrolHistory
	ctx = internal.NewSchemaConfigContext(ctx, shuo.schemaConfig)
	_spec.AddModifiers(shuo.modifiers...)
	_node = &SubcontrolHistory{config: shuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, shuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrolhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	shuo.mutation.done = true
	return _node, nil
}
