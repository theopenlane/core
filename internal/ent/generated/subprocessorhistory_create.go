// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/subprocessorhistory"
	"github.com/theopenlane/entx/history"
)

// SubprocessorHistoryCreate is the builder for creating a SubprocessorHistory entity.
type SubprocessorHistoryCreate struct {
	config
	mutation *SubprocessorHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (shc *SubprocessorHistoryCreate) SetHistoryTime(t time.Time) *SubprocessorHistoryCreate {
	shc.mutation.SetHistoryTime(t)
	return shc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableHistoryTime(t *time.Time) *SubprocessorHistoryCreate {
	if t != nil {
		shc.SetHistoryTime(*t)
	}
	return shc
}

// SetRef sets the "ref" field.
func (shc *SubprocessorHistoryCreate) SetRef(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetRef(s)
	return shc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableRef(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetRef(*s)
	}
	return shc
}

// SetOperation sets the "operation" field.
func (shc *SubprocessorHistoryCreate) SetOperation(ht history.OpType) *SubprocessorHistoryCreate {
	shc.mutation.SetOperation(ht)
	return shc
}

// SetCreatedAt sets the "created_at" field.
func (shc *SubprocessorHistoryCreate) SetCreatedAt(t time.Time) *SubprocessorHistoryCreate {
	shc.mutation.SetCreatedAt(t)
	return shc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableCreatedAt(t *time.Time) *SubprocessorHistoryCreate {
	if t != nil {
		shc.SetCreatedAt(*t)
	}
	return shc
}

// SetUpdatedAt sets the "updated_at" field.
func (shc *SubprocessorHistoryCreate) SetUpdatedAt(t time.Time) *SubprocessorHistoryCreate {
	shc.mutation.SetUpdatedAt(t)
	return shc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableUpdatedAt(t *time.Time) *SubprocessorHistoryCreate {
	if t != nil {
		shc.SetUpdatedAt(*t)
	}
	return shc
}

// SetCreatedBy sets the "created_by" field.
func (shc *SubprocessorHistoryCreate) SetCreatedBy(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetCreatedBy(s)
	return shc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableCreatedBy(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetCreatedBy(*s)
	}
	return shc
}

// SetUpdatedBy sets the "updated_by" field.
func (shc *SubprocessorHistoryCreate) SetUpdatedBy(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetUpdatedBy(s)
	return shc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableUpdatedBy(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetUpdatedBy(*s)
	}
	return shc
}

// SetDeletedAt sets the "deleted_at" field.
func (shc *SubprocessorHistoryCreate) SetDeletedAt(t time.Time) *SubprocessorHistoryCreate {
	shc.mutation.SetDeletedAt(t)
	return shc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableDeletedAt(t *time.Time) *SubprocessorHistoryCreate {
	if t != nil {
		shc.SetDeletedAt(*t)
	}
	return shc
}

// SetDeletedBy sets the "deleted_by" field.
func (shc *SubprocessorHistoryCreate) SetDeletedBy(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetDeletedBy(s)
	return shc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableDeletedBy(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetDeletedBy(*s)
	}
	return shc
}

// SetTags sets the "tags" field.
func (shc *SubprocessorHistoryCreate) SetTags(s []string) *SubprocessorHistoryCreate {
	shc.mutation.SetTags(s)
	return shc
}

// SetOwnerID sets the "owner_id" field.
func (shc *SubprocessorHistoryCreate) SetOwnerID(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetOwnerID(s)
	return shc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableOwnerID(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetOwnerID(*s)
	}
	return shc
}

// SetSystemOwned sets the "system_owned" field.
func (shc *SubprocessorHistoryCreate) SetSystemOwned(b bool) *SubprocessorHistoryCreate {
	shc.mutation.SetSystemOwned(b)
	return shc
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableSystemOwned(b *bool) *SubprocessorHistoryCreate {
	if b != nil {
		shc.SetSystemOwned(*b)
	}
	return shc
}

// SetName sets the "name" field.
func (shc *SubprocessorHistoryCreate) SetName(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetName(s)
	return shc
}

// SetDescription sets the "description" field.
func (shc *SubprocessorHistoryCreate) SetDescription(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetDescription(s)
	return shc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableDescription(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetDescription(*s)
	}
	return shc
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (shc *SubprocessorHistoryCreate) SetLogoRemoteURL(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetLogoRemoteURL(s)
	return shc
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableLogoRemoteURL(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetLogoRemoteURL(*s)
	}
	return shc
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (shc *SubprocessorHistoryCreate) SetLogoLocalFileID(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetLogoLocalFileID(s)
	return shc
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableLogoLocalFileID(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetLogoLocalFileID(*s)
	}
	return shc
}

// SetID sets the "id" field.
func (shc *SubprocessorHistoryCreate) SetID(s string) *SubprocessorHistoryCreate {
	shc.mutation.SetID(s)
	return shc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (shc *SubprocessorHistoryCreate) SetNillableID(s *string) *SubprocessorHistoryCreate {
	if s != nil {
		shc.SetID(*s)
	}
	return shc
}

// Mutation returns the SubprocessorHistoryMutation object of the builder.
func (shc *SubprocessorHistoryCreate) Mutation() *SubprocessorHistoryMutation {
	return shc.mutation
}

// Save creates the SubprocessorHistory in the database.
func (shc *SubprocessorHistoryCreate) Save(ctx context.Context) (*SubprocessorHistory, error) {
	shc.defaults()
	return withHooks(ctx, shc.sqlSave, shc.mutation, shc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shc *SubprocessorHistoryCreate) SaveX(ctx context.Context) *SubprocessorHistory {
	v, err := shc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shc *SubprocessorHistoryCreate) Exec(ctx context.Context) error {
	_, err := shc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shc *SubprocessorHistoryCreate) ExecX(ctx context.Context) {
	if err := shc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shc *SubprocessorHistoryCreate) defaults() {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		v := subprocessorhistory.DefaultHistoryTime()
		shc.mutation.SetHistoryTime(v)
	}
	if _, ok := shc.mutation.CreatedAt(); !ok {
		v := subprocessorhistory.DefaultCreatedAt()
		shc.mutation.SetCreatedAt(v)
	}
	if _, ok := shc.mutation.UpdatedAt(); !ok {
		v := subprocessorhistory.DefaultUpdatedAt()
		shc.mutation.SetUpdatedAt(v)
	}
	if _, ok := shc.mutation.Tags(); !ok {
		v := subprocessorhistory.DefaultTags
		shc.mutation.SetTags(v)
	}
	if _, ok := shc.mutation.SystemOwned(); !ok {
		v := subprocessorhistory.DefaultSystemOwned
		shc.mutation.SetSystemOwned(v)
	}
	if _, ok := shc.mutation.ID(); !ok {
		v := subprocessorhistory.DefaultID()
		shc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shc *SubprocessorHistoryCreate) check() error {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "SubprocessorHistory.history_time"`)}
	}
	if _, ok := shc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "SubprocessorHistory.operation"`)}
	}
	if v, ok := shc.mutation.Operation(); ok {
		if err := subprocessorhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "SubprocessorHistory.operation": %w`, err)}
		}
	}
	if _, ok := shc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "SubprocessorHistory.name"`)}
	}
	return nil
}

func (shc *SubprocessorHistoryCreate) sqlSave(ctx context.Context) (*SubprocessorHistory, error) {
	if err := shc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubprocessorHistory.ID type: %T", _spec.ID.Value)
		}
	}
	shc.mutation.id = &_node.ID
	shc.mutation.done = true
	return _node, nil
}

func (shc *SubprocessorHistoryCreate) createSpec() (*SubprocessorHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &SubprocessorHistory{config: shc.config}
		_spec = sqlgraph.NewCreateSpec(subprocessorhistory.Table, sqlgraph.NewFieldSpec(subprocessorhistory.FieldID, field.TypeString))
	)
	_spec.Schema = shc.schemaConfig.SubprocessorHistory
	if id, ok := shc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := shc.mutation.HistoryTime(); ok {
		_spec.SetField(subprocessorhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := shc.mutation.Ref(); ok {
		_spec.SetField(subprocessorhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := shc.mutation.Operation(); ok {
		_spec.SetField(subprocessorhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := shc.mutation.CreatedAt(); ok {
		_spec.SetField(subprocessorhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shc.mutation.UpdatedAt(); ok {
		_spec.SetField(subprocessorhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := shc.mutation.CreatedBy(); ok {
		_spec.SetField(subprocessorhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := shc.mutation.UpdatedBy(); ok {
		_spec.SetField(subprocessorhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := shc.mutation.DeletedAt(); ok {
		_spec.SetField(subprocessorhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := shc.mutation.DeletedBy(); ok {
		_spec.SetField(subprocessorhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := shc.mutation.Tags(); ok {
		_spec.SetField(subprocessorhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := shc.mutation.OwnerID(); ok {
		_spec.SetField(subprocessorhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := shc.mutation.SystemOwned(); ok {
		_spec.SetField(subprocessorhistory.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := shc.mutation.Name(); ok {
		_spec.SetField(subprocessorhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := shc.mutation.Description(); ok {
		_spec.SetField(subprocessorhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := shc.mutation.LogoRemoteURL(); ok {
		_spec.SetField(subprocessorhistory.FieldLogoRemoteURL, field.TypeString, value)
		_node.LogoRemoteURL = &value
	}
	if value, ok := shc.mutation.LogoLocalFileID(); ok {
		_spec.SetField(subprocessorhistory.FieldLogoLocalFileID, field.TypeString, value)
		_node.LogoLocalFileID = &value
	}
	return _node, _spec
}

// SubprocessorHistoryCreateBulk is the builder for creating many SubprocessorHistory entities in bulk.
type SubprocessorHistoryCreateBulk struct {
	config
	err      error
	builders []*SubprocessorHistoryCreate
}

// Save creates the SubprocessorHistory entities in the database.
func (shcb *SubprocessorHistoryCreateBulk) Save(ctx context.Context) ([]*SubprocessorHistory, error) {
	if shcb.err != nil {
		return nil, shcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(shcb.builders))
	nodes := make([]*SubprocessorHistory, len(shcb.builders))
	mutators := make([]Mutator, len(shcb.builders))
	for i := range shcb.builders {
		func(i int, root context.Context) {
			builder := shcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubprocessorHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shcb *SubprocessorHistoryCreateBulk) SaveX(ctx context.Context) []*SubprocessorHistory {
	v, err := shcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shcb *SubprocessorHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := shcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shcb *SubprocessorHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := shcb.Exec(ctx); err != nil {
		panic(err)
	}
}
