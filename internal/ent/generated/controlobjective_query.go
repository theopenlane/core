// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlObjectiveQuery is the builder for querying ControlObjective entities.
type ControlObjectiveQuery struct {
	config
	ctx                       *QueryContext
	order                     []controlobjective.OrderOption
	inters                    []Interceptor
	predicates                []predicate.ControlObjective
	withOwner                 *OrganizationQuery
	withBlockedGroups         *GroupQuery
	withEditors               *GroupQuery
	withViewers               *GroupQuery
	withPrograms              *ProgramQuery
	withEvidence              *EvidenceQuery
	withControls              *ControlQuery
	withSubcontrols           *SubcontrolQuery
	withInternalPolicies      *InternalPolicyQuery
	withProcedures            *ProcedureQuery
	withRisks                 *RiskQuery
	withNarratives            *NarrativeQuery
	withTasks                 *TaskQuery
	loadTotal                 []func(context.Context, []*ControlObjective) error
	modifiers                 []func(*sql.Selector)
	withNamedBlockedGroups    map[string]*GroupQuery
	withNamedEditors          map[string]*GroupQuery
	withNamedViewers          map[string]*GroupQuery
	withNamedPrograms         map[string]*ProgramQuery
	withNamedEvidence         map[string]*EvidenceQuery
	withNamedControls         map[string]*ControlQuery
	withNamedSubcontrols      map[string]*SubcontrolQuery
	withNamedInternalPolicies map[string]*InternalPolicyQuery
	withNamedProcedures       map[string]*ProcedureQuery
	withNamedRisks            map[string]*RiskQuery
	withNamedNarratives       map[string]*NarrativeQuery
	withNamedTasks            map[string]*TaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ControlObjectiveQuery builder.
func (coq *ControlObjectiveQuery) Where(ps ...predicate.ControlObjective) *ControlObjectiveQuery {
	coq.predicates = append(coq.predicates, ps...)
	return coq
}

// Limit the number of records to be returned by this query.
func (coq *ControlObjectiveQuery) Limit(limit int) *ControlObjectiveQuery {
	coq.ctx.Limit = &limit
	return coq
}

// Offset to start from.
func (coq *ControlObjectiveQuery) Offset(offset int) *ControlObjectiveQuery {
	coq.ctx.Offset = &offset
	return coq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (coq *ControlObjectiveQuery) Unique(unique bool) *ControlObjectiveQuery {
	coq.ctx.Unique = &unique
	return coq
}

// Order specifies how the records should be ordered.
func (coq *ControlObjectiveQuery) Order(o ...controlobjective.OrderOption) *ControlObjectiveQuery {
	coq.order = append(coq.order, o...)
	return coq
}

// QueryOwner chains the current query on the "owner" edge.
func (coq *ControlObjectiveQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, controlobjective.OwnerTable, controlobjective.OwnerColumn),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.ControlObjective
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedGroups chains the current query on the "blocked_groups" edge.
func (coq *ControlObjectiveQuery) QueryBlockedGroups() *GroupQuery {
	query := (&GroupClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, controlobjective.BlockedGroupsTable, controlobjective.BlockedGroupsPrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.ControlObjectiveBlockedGroups
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEditors chains the current query on the "editors" edge.
func (coq *ControlObjectiveQuery) QueryEditors() *GroupQuery {
	query := (&GroupClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, controlobjective.EditorsTable, controlobjective.EditorsPrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.ControlObjectiveEditors
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryViewers chains the current query on the "viewers" edge.
func (coq *ControlObjectiveQuery) QueryViewers() *GroupQuery {
	query := (&GroupClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, controlobjective.ViewersTable, controlobjective.ViewersPrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.ControlObjectiveViewers
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (coq *ControlObjectiveQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, controlobjective.ProgramsTable, controlobjective.ProgramsPrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramControlObjectives
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvidence chains the current query on the "evidence" edge.
func (coq *ControlObjectiveQuery) QueryEvidence() *EvidenceQuery {
	query := (&EvidenceClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(evidence.Table, evidence.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, controlobjective.EvidenceTable, controlobjective.EvidencePrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Evidence
		step.Edge.Schema = schemaConfig.EvidenceControlObjectives
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (coq *ControlObjectiveQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, controlobjective.ControlsTable, controlobjective.ControlsPrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlControlObjectives
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubcontrols chains the current query on the "subcontrols" edge.
func (coq *ControlObjectiveQuery) QuerySubcontrols() *SubcontrolQuery {
	query := (&SubcontrolClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(subcontrol.Table, subcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, controlobjective.SubcontrolsTable, controlobjective.SubcontrolsPrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.SubcontrolControlObjectives
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicies chains the current query on the "internal_policies" edge.
func (coq *ControlObjectiveQuery) QueryInternalPolicies() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, controlobjective.InternalPoliciesTable, controlobjective.InternalPoliciesPrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicyControlObjectives
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedures chains the current query on the "procedures" edge.
func (coq *ControlObjectiveQuery) QueryProcedures() *ProcedureQuery {
	query := (&ProcedureClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, controlobjective.ProceduresTable, controlobjective.ProceduresColumn),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.Procedure
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisks chains the current query on the "risks" edge.
func (coq *ControlObjectiveQuery) QueryRisks() *RiskQuery {
	query := (&RiskClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, controlobjective.RisksTable, controlobjective.RisksColumn),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.Risk
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarratives chains the current query on the "narratives" edge.
func (coq *ControlObjectiveQuery) QueryNarratives() *NarrativeQuery {
	query := (&NarrativeClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, controlobjective.NarrativesTable, controlobjective.NarrativesColumn),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.Narrative
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (coq *ControlObjectiveQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlobjective.Table, controlobjective.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, controlobjective.TasksTable, controlobjective.TasksPrimaryKey...),
		)
		schemaConfig := coq.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.ControlObjectiveTasks
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ControlObjective entity from the query.
// Returns a *NotFoundError when no ControlObjective was found.
func (coq *ControlObjectiveQuery) First(ctx context.Context) (*ControlObjective, error) {
	nodes, err := coq.Limit(1).All(setContextOp(ctx, coq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{controlobjective.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (coq *ControlObjectiveQuery) FirstX(ctx context.Context) *ControlObjective {
	node, err := coq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ControlObjective ID from the query.
// Returns a *NotFoundError when no ControlObjective ID was found.
func (coq *ControlObjectiveQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = coq.Limit(1).IDs(setContextOp(ctx, coq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{controlobjective.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (coq *ControlObjectiveQuery) FirstIDX(ctx context.Context) string {
	id, err := coq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ControlObjective entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ControlObjective entity is found.
// Returns a *NotFoundError when no ControlObjective entities are found.
func (coq *ControlObjectiveQuery) Only(ctx context.Context) (*ControlObjective, error) {
	nodes, err := coq.Limit(2).All(setContextOp(ctx, coq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{controlobjective.Label}
	default:
		return nil, &NotSingularError{controlobjective.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (coq *ControlObjectiveQuery) OnlyX(ctx context.Context) *ControlObjective {
	node, err := coq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ControlObjective ID in the query.
// Returns a *NotSingularError when more than one ControlObjective ID is found.
// Returns a *NotFoundError when no entities are found.
func (coq *ControlObjectiveQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = coq.Limit(2).IDs(setContextOp(ctx, coq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{controlobjective.Label}
	default:
		err = &NotSingularError{controlobjective.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (coq *ControlObjectiveQuery) OnlyIDX(ctx context.Context) string {
	id, err := coq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ControlObjectives.
func (coq *ControlObjectiveQuery) All(ctx context.Context) ([]*ControlObjective, error) {
	ctx = setContextOp(ctx, coq.ctx, ent.OpQueryAll)
	if err := coq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ControlObjective, *ControlObjectiveQuery]()
	return withInterceptors[[]*ControlObjective](ctx, coq, qr, coq.inters)
}

// AllX is like All, but panics if an error occurs.
func (coq *ControlObjectiveQuery) AllX(ctx context.Context) []*ControlObjective {
	nodes, err := coq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ControlObjective IDs.
func (coq *ControlObjectiveQuery) IDs(ctx context.Context) (ids []string, err error) {
	if coq.ctx.Unique == nil && coq.path != nil {
		coq.Unique(true)
	}
	ctx = setContextOp(ctx, coq.ctx, ent.OpQueryIDs)
	if err = coq.Select(controlobjective.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (coq *ControlObjectiveQuery) IDsX(ctx context.Context) []string {
	ids, err := coq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (coq *ControlObjectiveQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, coq.ctx, ent.OpQueryCount)
	if err := coq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, coq, querierCount[*ControlObjectiveQuery](), coq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (coq *ControlObjectiveQuery) CountX(ctx context.Context) int {
	count, err := coq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (coq *ControlObjectiveQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, coq.ctx, ent.OpQueryExist)
	switch _, err := coq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (coq *ControlObjectiveQuery) ExistX(ctx context.Context) bool {
	exist, err := coq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ControlObjectiveQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (coq *ControlObjectiveQuery) Clone() *ControlObjectiveQuery {
	if coq == nil {
		return nil
	}
	return &ControlObjectiveQuery{
		config:               coq.config,
		ctx:                  coq.ctx.Clone(),
		order:                append([]controlobjective.OrderOption{}, coq.order...),
		inters:               append([]Interceptor{}, coq.inters...),
		predicates:           append([]predicate.ControlObjective{}, coq.predicates...),
		withOwner:            coq.withOwner.Clone(),
		withBlockedGroups:    coq.withBlockedGroups.Clone(),
		withEditors:          coq.withEditors.Clone(),
		withViewers:          coq.withViewers.Clone(),
		withPrograms:         coq.withPrograms.Clone(),
		withEvidence:         coq.withEvidence.Clone(),
		withControls:         coq.withControls.Clone(),
		withSubcontrols:      coq.withSubcontrols.Clone(),
		withInternalPolicies: coq.withInternalPolicies.Clone(),
		withProcedures:       coq.withProcedures.Clone(),
		withRisks:            coq.withRisks.Clone(),
		withNarratives:       coq.withNarratives.Clone(),
		withTasks:            coq.withTasks.Clone(),
		// clone intermediate query.
		sql:       coq.sql.Clone(),
		path:      coq.path,
		modifiers: append([]func(*sql.Selector){}, coq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithOwner(opts ...func(*OrganizationQuery)) *ControlObjectiveQuery {
	query := (&OrganizationClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withOwner = query
	return coq
}

// WithBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithBlockedGroups(opts ...func(*GroupQuery)) *ControlObjectiveQuery {
	query := (&GroupClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withBlockedGroups = query
	return coq
}

// WithEditors tells the query-builder to eager-load the nodes that are connected to
// the "editors" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithEditors(opts ...func(*GroupQuery)) *ControlObjectiveQuery {
	query := (&GroupClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withEditors = query
	return coq
}

// WithViewers tells the query-builder to eager-load the nodes that are connected to
// the "viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithViewers(opts ...func(*GroupQuery)) *ControlObjectiveQuery {
	query := (&GroupClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withViewers = query
	return coq
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithPrograms(opts ...func(*ProgramQuery)) *ControlObjectiveQuery {
	query := (&ProgramClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withPrograms = query
	return coq
}

// WithEvidence tells the query-builder to eager-load the nodes that are connected to
// the "evidence" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithEvidence(opts ...func(*EvidenceQuery)) *ControlObjectiveQuery {
	query := (&EvidenceClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withEvidence = query
	return coq
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithControls(opts ...func(*ControlQuery)) *ControlObjectiveQuery {
	query := (&ControlClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withControls = query
	return coq
}

// WithSubcontrols tells the query-builder to eager-load the nodes that are connected to
// the "subcontrols" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithSubcontrols(opts ...func(*SubcontrolQuery)) *ControlObjectiveQuery {
	query := (&SubcontrolClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withSubcontrols = query
	return coq
}

// WithInternalPolicies tells the query-builder to eager-load the nodes that are connected to
// the "internal_policies" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithInternalPolicies(opts ...func(*InternalPolicyQuery)) *ControlObjectiveQuery {
	query := (&InternalPolicyClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withInternalPolicies = query
	return coq
}

// WithProcedures tells the query-builder to eager-load the nodes that are connected to
// the "procedures" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithProcedures(opts ...func(*ProcedureQuery)) *ControlObjectiveQuery {
	query := (&ProcedureClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withProcedures = query
	return coq
}

// WithRisks tells the query-builder to eager-load the nodes that are connected to
// the "risks" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithRisks(opts ...func(*RiskQuery)) *ControlObjectiveQuery {
	query := (&RiskClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withRisks = query
	return coq
}

// WithNarratives tells the query-builder to eager-load the nodes that are connected to
// the "narratives" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNarratives(opts ...func(*NarrativeQuery)) *ControlObjectiveQuery {
	query := (&NarrativeClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withNarratives = query
	return coq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithTasks(opts ...func(*TaskQuery)) *ControlObjectiveQuery {
	query := (&TaskClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withTasks = query
	return coq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ControlObjective.Query().
//		GroupBy(controlobjective.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (coq *ControlObjectiveQuery) GroupBy(field string, fields ...string) *ControlObjectiveGroupBy {
	coq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ControlObjectiveGroupBy{build: coq}
	grbuild.flds = &coq.ctx.Fields
	grbuild.label = controlobjective.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ControlObjective.Query().
//		Select(controlobjective.FieldCreatedAt).
//		Scan(ctx, &v)
func (coq *ControlObjectiveQuery) Select(fields ...string) *ControlObjectiveSelect {
	coq.ctx.Fields = append(coq.ctx.Fields, fields...)
	sbuild := &ControlObjectiveSelect{ControlObjectiveQuery: coq}
	sbuild.label = controlobjective.Label
	sbuild.flds, sbuild.scan = &coq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ControlObjectiveSelect configured with the given aggregations.
func (coq *ControlObjectiveQuery) Aggregate(fns ...AggregateFunc) *ControlObjectiveSelect {
	return coq.Select().Aggregate(fns...)
}

func (coq *ControlObjectiveQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range coq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, coq); err != nil {
				return err
			}
		}
	}
	for _, f := range coq.ctx.Fields {
		if !controlobjective.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if coq.path != nil {
		prev, err := coq.path(ctx)
		if err != nil {
			return err
		}
		coq.sql = prev
	}
	if controlobjective.Policy == nil {
		return errors.New("generated: uninitialized controlobjective.Policy (forgotten import generated/runtime?)")
	}
	if err := controlobjective.Policy.EvalQuery(ctx, coq); err != nil {
		return err
	}
	return nil
}

func (coq *ControlObjectiveQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ControlObjective, error) {
	var (
		nodes       = []*ControlObjective{}
		_spec       = coq.querySpec()
		loadedTypes = [13]bool{
			coq.withOwner != nil,
			coq.withBlockedGroups != nil,
			coq.withEditors != nil,
			coq.withViewers != nil,
			coq.withPrograms != nil,
			coq.withEvidence != nil,
			coq.withControls != nil,
			coq.withSubcontrols != nil,
			coq.withInternalPolicies != nil,
			coq.withProcedures != nil,
			coq.withRisks != nil,
			coq.withNarratives != nil,
			coq.withTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ControlObjective).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ControlObjective{config: coq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = coq.schemaConfig.ControlObjective
	ctx = internal.NewSchemaConfigContext(ctx, coq.schemaConfig)
	if len(coq.modifiers) > 0 {
		_spec.Modifiers = coq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, coq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := coq.withOwner; query != nil {
		if err := coq.loadOwner(ctx, query, nodes, nil,
			func(n *ControlObjective, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := coq.withBlockedGroups; query != nil {
		if err := coq.loadBlockedGroups(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.BlockedGroups = []*Group{} },
			func(n *ControlObjective, e *Group) { n.Edges.BlockedGroups = append(n.Edges.BlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withEditors; query != nil {
		if err := coq.loadEditors(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Editors = []*Group{} },
			func(n *ControlObjective, e *Group) { n.Edges.Editors = append(n.Edges.Editors, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withViewers; query != nil {
		if err := coq.loadViewers(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Viewers = []*Group{} },
			func(n *ControlObjective, e *Group) { n.Edges.Viewers = append(n.Edges.Viewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withPrograms; query != nil {
		if err := coq.loadPrograms(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Programs = []*Program{} },
			func(n *ControlObjective, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withEvidence; query != nil {
		if err := coq.loadEvidence(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Evidence = []*Evidence{} },
			func(n *ControlObjective, e *Evidence) { n.Edges.Evidence = append(n.Edges.Evidence, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withControls; query != nil {
		if err := coq.loadControls(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Controls = []*Control{} },
			func(n *ControlObjective, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withSubcontrols; query != nil {
		if err := coq.loadSubcontrols(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Subcontrols = []*Subcontrol{} },
			func(n *ControlObjective, e *Subcontrol) { n.Edges.Subcontrols = append(n.Edges.Subcontrols, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withInternalPolicies; query != nil {
		if err := coq.loadInternalPolicies(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.InternalPolicies = []*InternalPolicy{} },
			func(n *ControlObjective, e *InternalPolicy) {
				n.Edges.InternalPolicies = append(n.Edges.InternalPolicies, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := coq.withProcedures; query != nil {
		if err := coq.loadProcedures(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Procedures = []*Procedure{} },
			func(n *ControlObjective, e *Procedure) { n.Edges.Procedures = append(n.Edges.Procedures, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withRisks; query != nil {
		if err := coq.loadRisks(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Risks = []*Risk{} },
			func(n *ControlObjective, e *Risk) { n.Edges.Risks = append(n.Edges.Risks, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withNarratives; query != nil {
		if err := coq.loadNarratives(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Narratives = []*Narrative{} },
			func(n *ControlObjective, e *Narrative) { n.Edges.Narratives = append(n.Edges.Narratives, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withTasks; query != nil {
		if err := coq.loadTasks(ctx, query, nodes,
			func(n *ControlObjective) { n.Edges.Tasks = []*Task{} },
			func(n *ControlObjective, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedBlockedGroups {
		if err := coq.loadBlockedGroups(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedBlockedGroups(name) },
			func(n *ControlObjective, e *Group) { n.appendNamedBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedEditors {
		if err := coq.loadEditors(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedEditors(name) },
			func(n *ControlObjective, e *Group) { n.appendNamedEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedViewers {
		if err := coq.loadViewers(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedViewers(name) },
			func(n *ControlObjective, e *Group) { n.appendNamedViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedPrograms {
		if err := coq.loadPrograms(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedPrograms(name) },
			func(n *ControlObjective, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedEvidence {
		if err := coq.loadEvidence(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedEvidence(name) },
			func(n *ControlObjective, e *Evidence) { n.appendNamedEvidence(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedControls {
		if err := coq.loadControls(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedControls(name) },
			func(n *ControlObjective, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedSubcontrols {
		if err := coq.loadSubcontrols(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedSubcontrols(name) },
			func(n *ControlObjective, e *Subcontrol) { n.appendNamedSubcontrols(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedInternalPolicies {
		if err := coq.loadInternalPolicies(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedInternalPolicies(name) },
			func(n *ControlObjective, e *InternalPolicy) { n.appendNamedInternalPolicies(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedProcedures {
		if err := coq.loadProcedures(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedProcedures(name) },
			func(n *ControlObjective, e *Procedure) { n.appendNamedProcedures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedRisks {
		if err := coq.loadRisks(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedRisks(name) },
			func(n *ControlObjective, e *Risk) { n.appendNamedRisks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedNarratives {
		if err := coq.loadNarratives(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedNarratives(name) },
			func(n *ControlObjective, e *Narrative) { n.appendNamedNarratives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedTasks {
		if err := coq.loadTasks(ctx, query, nodes,
			func(n *ControlObjective) { n.appendNamedTasks(name) },
			func(n *ControlObjective, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range coq.loadTotal {
		if err := coq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (coq *ControlObjectiveQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ControlObjective)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadBlockedGroups(ctx context.Context, query *GroupQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.BlockedGroupsTable)
		joinT.Schema(coq.schemaConfig.ControlObjectiveBlockedGroups)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(controlobjective.BlockedGroupsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(controlobjective.BlockedGroupsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.BlockedGroupsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadEditors(ctx context.Context, query *GroupQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.EditorsTable)
		joinT.Schema(coq.schemaConfig.ControlObjectiveEditors)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(controlobjective.EditorsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(controlobjective.EditorsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.EditorsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadViewers(ctx context.Context, query *GroupQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.ViewersTable)
		joinT.Schema(coq.schemaConfig.ControlObjectiveViewers)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(controlobjective.ViewersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(controlobjective.ViewersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.ViewersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.ProgramsTable)
		joinT.Schema(coq.schemaConfig.ProgramControlObjectives)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(controlobjective.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(controlobjective.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadEvidence(ctx context.Context, query *EvidenceQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Evidence)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.EvidenceTable)
		joinT.Schema(coq.schemaConfig.EvidenceControlObjectives)
		s.Join(joinT).On(s.C(evidence.FieldID), joinT.C(controlobjective.EvidencePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(controlobjective.EvidencePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.EvidencePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Evidence](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "evidence" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.ControlsTable)
		joinT.Schema(coq.schemaConfig.ControlControlObjectives)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(controlobjective.ControlsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(controlobjective.ControlsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.ControlsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadSubcontrols(ctx context.Context, query *SubcontrolQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Subcontrol)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.SubcontrolsTable)
		joinT.Schema(coq.schemaConfig.SubcontrolControlObjectives)
		s.Join(joinT).On(s.C(subcontrol.FieldID), joinT.C(controlobjective.SubcontrolsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(controlobjective.SubcontrolsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.SubcontrolsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subcontrol](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subcontrols" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadInternalPolicies(ctx context.Context, query *InternalPolicyQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *InternalPolicy)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.InternalPoliciesTable)
		joinT.Schema(coq.schemaConfig.InternalPolicyControlObjectives)
		s.Join(joinT).On(s.C(internalpolicy.FieldID), joinT.C(controlobjective.InternalPoliciesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(controlobjective.InternalPoliciesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.InternalPoliciesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*InternalPolicy](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "internal_policies" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadProcedures(ctx context.Context, query *ProcedureQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Procedure)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ControlObjective)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Procedure(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(controlobjective.ProceduresColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.control_objective_procedures
		if fk == nil {
			return fmt.Errorf(`foreign-key "control_objective_procedures" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "control_objective_procedures" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadRisks(ctx context.Context, query *RiskQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Risk)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ControlObjective)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Risk(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(controlobjective.RisksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.control_objective_risks
		if fk == nil {
			return fmt.Errorf(`foreign-key "control_objective_risks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "control_objective_risks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadNarratives(ctx context.Context, query *NarrativeQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Narrative)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ControlObjective)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Narrative(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(controlobjective.NarrativesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.control_objective_narratives
		if fk == nil {
			return fmt.Errorf(`foreign-key "control_objective_narratives" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "control_objective_narratives" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (coq *ControlObjectiveQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*ControlObjective, init func(*ControlObjective), assign func(*ControlObjective, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlObjective)
	nids := make(map[string]map[*ControlObjective]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlobjective.TasksTable)
		joinT.Schema(coq.schemaConfig.ControlObjectiveTasks)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(controlobjective.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(controlobjective.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlobjective.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlObjective]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (coq *ControlObjectiveQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := coq.querySpec()
	_spec.Node.Schema = coq.schemaConfig.ControlObjective
	ctx = internal.NewSchemaConfigContext(ctx, coq.schemaConfig)
	if len(coq.modifiers) > 0 {
		_spec.Modifiers = coq.modifiers
	}
	_spec.Node.Columns = coq.ctx.Fields
	if len(coq.ctx.Fields) > 0 {
		_spec.Unique = coq.ctx.Unique != nil && *coq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, coq.driver, _spec)
}

func (coq *ControlObjectiveQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(controlobjective.Table, controlobjective.Columns, sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString))
	_spec.From = coq.sql
	if unique := coq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if coq.path != nil {
		_spec.Unique = true
	}
	if fields := coq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlobjective.FieldID)
		for i := range fields {
			if fields[i] != controlobjective.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if coq.withOwner != nil {
			_spec.Node.AddColumnOnce(controlobjective.FieldOwnerID)
		}
	}
	if ps := coq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := coq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := coq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := coq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (coq *ControlObjectiveQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(coq.driver.Dialect())
	t1 := builder.Table(controlobjective.Table)
	columns := coq.ctx.Fields
	if len(columns) == 0 {
		columns = controlobjective.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if coq.sql != nil {
		selector = coq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if coq.ctx.Unique != nil && *coq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(coq.schemaConfig.ControlObjective)
	ctx = internal.NewSchemaConfigContext(ctx, coq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range coq.modifiers {
		m(selector)
	}
	for _, p := range coq.predicates {
		p(selector)
	}
	for _, p := range coq.order {
		p(selector)
	}
	if offset := coq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := coq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (coq *ControlObjectiveQuery) Modify(modifiers ...func(s *sql.Selector)) *ControlObjectiveSelect {
	coq.modifiers = append(coq.modifiers, modifiers...)
	return coq.Select()
}

// WithNamedBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedBlockedGroups(name string, opts ...func(*GroupQuery)) *ControlObjectiveQuery {
	query := (&GroupClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedBlockedGroups == nil {
		coq.withNamedBlockedGroups = make(map[string]*GroupQuery)
	}
	coq.withNamedBlockedGroups[name] = query
	return coq
}

// WithNamedEditors tells the query-builder to eager-load the nodes that are connected to the "editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedEditors(name string, opts ...func(*GroupQuery)) *ControlObjectiveQuery {
	query := (&GroupClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedEditors == nil {
		coq.withNamedEditors = make(map[string]*GroupQuery)
	}
	coq.withNamedEditors[name] = query
	return coq
}

// WithNamedViewers tells the query-builder to eager-load the nodes that are connected to the "viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedViewers(name string, opts ...func(*GroupQuery)) *ControlObjectiveQuery {
	query := (&GroupClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedViewers == nil {
		coq.withNamedViewers = make(map[string]*GroupQuery)
	}
	coq.withNamedViewers[name] = query
	return coq
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *ControlObjectiveQuery {
	query := (&ProgramClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedPrograms == nil {
		coq.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	coq.withNamedPrograms[name] = query
	return coq
}

// WithNamedEvidence tells the query-builder to eager-load the nodes that are connected to the "evidence"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedEvidence(name string, opts ...func(*EvidenceQuery)) *ControlObjectiveQuery {
	query := (&EvidenceClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedEvidence == nil {
		coq.withNamedEvidence = make(map[string]*EvidenceQuery)
	}
	coq.withNamedEvidence[name] = query
	return coq
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *ControlObjectiveQuery {
	query := (&ControlClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedControls == nil {
		coq.withNamedControls = make(map[string]*ControlQuery)
	}
	coq.withNamedControls[name] = query
	return coq
}

// WithNamedSubcontrols tells the query-builder to eager-load the nodes that are connected to the "subcontrols"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedSubcontrols(name string, opts ...func(*SubcontrolQuery)) *ControlObjectiveQuery {
	query := (&SubcontrolClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedSubcontrols == nil {
		coq.withNamedSubcontrols = make(map[string]*SubcontrolQuery)
	}
	coq.withNamedSubcontrols[name] = query
	return coq
}

// WithNamedInternalPolicies tells the query-builder to eager-load the nodes that are connected to the "internal_policies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedInternalPolicies(name string, opts ...func(*InternalPolicyQuery)) *ControlObjectiveQuery {
	query := (&InternalPolicyClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedInternalPolicies == nil {
		coq.withNamedInternalPolicies = make(map[string]*InternalPolicyQuery)
	}
	coq.withNamedInternalPolicies[name] = query
	return coq
}

// WithNamedProcedures tells the query-builder to eager-load the nodes that are connected to the "procedures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedProcedures(name string, opts ...func(*ProcedureQuery)) *ControlObjectiveQuery {
	query := (&ProcedureClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedProcedures == nil {
		coq.withNamedProcedures = make(map[string]*ProcedureQuery)
	}
	coq.withNamedProcedures[name] = query
	return coq
}

// WithNamedRisks tells the query-builder to eager-load the nodes that are connected to the "risks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedRisks(name string, opts ...func(*RiskQuery)) *ControlObjectiveQuery {
	query := (&RiskClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedRisks == nil {
		coq.withNamedRisks = make(map[string]*RiskQuery)
	}
	coq.withNamedRisks[name] = query
	return coq
}

// WithNamedNarratives tells the query-builder to eager-load the nodes that are connected to the "narratives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedNarratives(name string, opts ...func(*NarrativeQuery)) *ControlObjectiveQuery {
	query := (&NarrativeClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedNarratives == nil {
		coq.withNamedNarratives = make(map[string]*NarrativeQuery)
	}
	coq.withNamedNarratives[name] = query
	return coq
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *ControlObjectiveQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *ControlObjectiveQuery {
	query := (&TaskClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedTasks == nil {
		coq.withNamedTasks = make(map[string]*TaskQuery)
	}
	coq.withNamedTasks[name] = query
	return coq
}

// ControlObjectiveGroupBy is the group-by builder for ControlObjective entities.
type ControlObjectiveGroupBy struct {
	selector
	build *ControlObjectiveQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cogb *ControlObjectiveGroupBy) Aggregate(fns ...AggregateFunc) *ControlObjectiveGroupBy {
	cogb.fns = append(cogb.fns, fns...)
	return cogb
}

// Scan applies the selector query and scans the result into the given value.
func (cogb *ControlObjectiveGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cogb.build.ctx, ent.OpQueryGroupBy)
	if err := cogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ControlObjectiveQuery, *ControlObjectiveGroupBy](ctx, cogb.build, cogb, cogb.build.inters, v)
}

func (cogb *ControlObjectiveGroupBy) sqlScan(ctx context.Context, root *ControlObjectiveQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cogb.fns))
	for _, fn := range cogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cogb.flds)+len(cogb.fns))
		for _, f := range *cogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ControlObjectiveSelect is the builder for selecting fields of ControlObjective entities.
type ControlObjectiveSelect struct {
	*ControlObjectiveQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cos *ControlObjectiveSelect) Aggregate(fns ...AggregateFunc) *ControlObjectiveSelect {
	cos.fns = append(cos.fns, fns...)
	return cos
}

// Scan applies the selector query and scans the result into the given value.
func (cos *ControlObjectiveSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cos.ctx, ent.OpQuerySelect)
	if err := cos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ControlObjectiveQuery, *ControlObjectiveSelect](ctx, cos.ControlObjectiveQuery, cos, cos.inters, v)
}

func (cos *ControlObjectiveSelect) sqlScan(ctx context.Context, root *ControlObjectiveQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cos.fns))
	for _, fn := range cos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cos *ControlObjectiveSelect) Modify(modifiers ...func(s *sql.Selector)) *ControlObjectiveSelect {
	cos.modifiers = append(cos.modifiers, modifiers...)
	return cos
}
