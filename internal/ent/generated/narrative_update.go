// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// NarrativeUpdate is the builder for updating Narrative entities.
type NarrativeUpdate struct {
	config
	hooks     []Hook
	mutation  *NarrativeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NarrativeUpdate builder.
func (nu *NarrativeUpdate) Where(ps ...predicate.Narrative) *NarrativeUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NarrativeUpdate) SetUpdatedAt(t time.Time) *NarrativeUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nu *NarrativeUpdate) ClearUpdatedAt() *NarrativeUpdate {
	nu.mutation.ClearUpdatedAt()
	return nu
}

// SetUpdatedBy sets the "updated_by" field.
func (nu *NarrativeUpdate) SetUpdatedBy(s string) *NarrativeUpdate {
	nu.mutation.SetUpdatedBy(s)
	return nu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (nu *NarrativeUpdate) SetNillableUpdatedBy(s *string) *NarrativeUpdate {
	if s != nil {
		nu.SetUpdatedBy(*s)
	}
	return nu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (nu *NarrativeUpdate) ClearUpdatedBy() *NarrativeUpdate {
	nu.mutation.ClearUpdatedBy()
	return nu
}

// SetDeletedAt sets the "deleted_at" field.
func (nu *NarrativeUpdate) SetDeletedAt(t time.Time) *NarrativeUpdate {
	nu.mutation.SetDeletedAt(t)
	return nu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nu *NarrativeUpdate) SetNillableDeletedAt(t *time.Time) *NarrativeUpdate {
	if t != nil {
		nu.SetDeletedAt(*t)
	}
	return nu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nu *NarrativeUpdate) ClearDeletedAt() *NarrativeUpdate {
	nu.mutation.ClearDeletedAt()
	return nu
}

// SetDeletedBy sets the "deleted_by" field.
func (nu *NarrativeUpdate) SetDeletedBy(s string) *NarrativeUpdate {
	nu.mutation.SetDeletedBy(s)
	return nu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (nu *NarrativeUpdate) SetNillableDeletedBy(s *string) *NarrativeUpdate {
	if s != nil {
		nu.SetDeletedBy(*s)
	}
	return nu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (nu *NarrativeUpdate) ClearDeletedBy() *NarrativeUpdate {
	nu.mutation.ClearDeletedBy()
	return nu
}

// SetTags sets the "tags" field.
func (nu *NarrativeUpdate) SetTags(s []string) *NarrativeUpdate {
	nu.mutation.SetTags(s)
	return nu
}

// AppendTags appends s to the "tags" field.
func (nu *NarrativeUpdate) AppendTags(s []string) *NarrativeUpdate {
	nu.mutation.AppendTags(s)
	return nu
}

// ClearTags clears the value of the "tags" field.
func (nu *NarrativeUpdate) ClearTags() *NarrativeUpdate {
	nu.mutation.ClearTags()
	return nu
}

// SetName sets the "name" field.
func (nu *NarrativeUpdate) SetName(s string) *NarrativeUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NarrativeUpdate) SetNillableName(s *string) *NarrativeUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetDescription sets the "description" field.
func (nu *NarrativeUpdate) SetDescription(s string) *NarrativeUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NarrativeUpdate) SetNillableDescription(s *string) *NarrativeUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// ClearDescription clears the value of the "description" field.
func (nu *NarrativeUpdate) ClearDescription() *NarrativeUpdate {
	nu.mutation.ClearDescription()
	return nu
}

// SetSatisfies sets the "satisfies" field.
func (nu *NarrativeUpdate) SetSatisfies(s string) *NarrativeUpdate {
	nu.mutation.SetSatisfies(s)
	return nu
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (nu *NarrativeUpdate) SetNillableSatisfies(s *string) *NarrativeUpdate {
	if s != nil {
		nu.SetSatisfies(*s)
	}
	return nu
}

// ClearSatisfies clears the value of the "satisfies" field.
func (nu *NarrativeUpdate) ClearSatisfies() *NarrativeUpdate {
	nu.mutation.ClearSatisfies()
	return nu
}

// SetDetails sets the "details" field.
func (nu *NarrativeUpdate) SetDetails(m map[string]interface{}) *NarrativeUpdate {
	nu.mutation.SetDetails(m)
	return nu
}

// ClearDetails clears the value of the "details" field.
func (nu *NarrativeUpdate) ClearDetails() *NarrativeUpdate {
	nu.mutation.ClearDetails()
	return nu
}

// AddPolicyIDs adds the "policy" edge to the InternalPolicy entity by IDs.
func (nu *NarrativeUpdate) AddPolicyIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.AddPolicyIDs(ids...)
	return nu
}

// AddPolicy adds the "policy" edges to the InternalPolicy entity.
func (nu *NarrativeUpdate) AddPolicy(i ...*InternalPolicy) *NarrativeUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.AddPolicyIDs(ids...)
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (nu *NarrativeUpdate) AddControlIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.AddControlIDs(ids...)
	return nu
}

// AddControl adds the "control" edges to the Control entity.
func (nu *NarrativeUpdate) AddControl(c ...*Control) *NarrativeUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedure" edge to the Procedure entity by IDs.
func (nu *NarrativeUpdate) AddProcedureIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.AddProcedureIDs(ids...)
	return nu
}

// AddProcedure adds the "procedure" edges to the Procedure entity.
func (nu *NarrativeUpdate) AddProcedure(p ...*Procedure) *NarrativeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddProcedureIDs(ids...)
}

// AddControlobjectiveIDs adds the "controlobjective" edge to the ControlObjective entity by IDs.
func (nu *NarrativeUpdate) AddControlobjectiveIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.AddControlobjectiveIDs(ids...)
	return nu
}

// AddControlobjective adds the "controlobjective" edges to the ControlObjective entity.
func (nu *NarrativeUpdate) AddControlobjective(c ...*ControlObjective) *NarrativeUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddControlobjectiveIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (nu *NarrativeUpdate) AddProgramIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.AddProgramIDs(ids...)
	return nu
}

// AddProgram adds the "program" edges to the Program entity.
func (nu *NarrativeUpdate) AddProgram(p ...*Program) *NarrativeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddProgramIDs(ids...)
}

// Mutation returns the NarrativeMutation object of the builder.
func (nu *NarrativeUpdate) Mutation() *NarrativeMutation {
	return nu.mutation
}

// ClearPolicy clears all "policy" edges to the InternalPolicy entity.
func (nu *NarrativeUpdate) ClearPolicy() *NarrativeUpdate {
	nu.mutation.ClearPolicy()
	return nu
}

// RemovePolicyIDs removes the "policy" edge to InternalPolicy entities by IDs.
func (nu *NarrativeUpdate) RemovePolicyIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.RemovePolicyIDs(ids...)
	return nu
}

// RemovePolicy removes "policy" edges to InternalPolicy entities.
func (nu *NarrativeUpdate) RemovePolicy(i ...*InternalPolicy) *NarrativeUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.RemovePolicyIDs(ids...)
}

// ClearControl clears all "control" edges to the Control entity.
func (nu *NarrativeUpdate) ClearControl() *NarrativeUpdate {
	nu.mutation.ClearControl()
	return nu
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (nu *NarrativeUpdate) RemoveControlIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.RemoveControlIDs(ids...)
	return nu
}

// RemoveControl removes "control" edges to Control entities.
func (nu *NarrativeUpdate) RemoveControl(c ...*Control) *NarrativeUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveControlIDs(ids...)
}

// ClearProcedure clears all "procedure" edges to the Procedure entity.
func (nu *NarrativeUpdate) ClearProcedure() *NarrativeUpdate {
	nu.mutation.ClearProcedure()
	return nu
}

// RemoveProcedureIDs removes the "procedure" edge to Procedure entities by IDs.
func (nu *NarrativeUpdate) RemoveProcedureIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.RemoveProcedureIDs(ids...)
	return nu
}

// RemoveProcedure removes "procedure" edges to Procedure entities.
func (nu *NarrativeUpdate) RemoveProcedure(p ...*Procedure) *NarrativeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveProcedureIDs(ids...)
}

// ClearControlobjective clears all "controlobjective" edges to the ControlObjective entity.
func (nu *NarrativeUpdate) ClearControlobjective() *NarrativeUpdate {
	nu.mutation.ClearControlobjective()
	return nu
}

// RemoveControlobjectiveIDs removes the "controlobjective" edge to ControlObjective entities by IDs.
func (nu *NarrativeUpdate) RemoveControlobjectiveIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.RemoveControlobjectiveIDs(ids...)
	return nu
}

// RemoveControlobjective removes "controlobjective" edges to ControlObjective entities.
func (nu *NarrativeUpdate) RemoveControlobjective(c ...*ControlObjective) *NarrativeUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveControlobjectiveIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (nu *NarrativeUpdate) ClearProgram() *NarrativeUpdate {
	nu.mutation.ClearProgram()
	return nu
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (nu *NarrativeUpdate) RemoveProgramIDs(ids ...string) *NarrativeUpdate {
	nu.mutation.RemoveProgramIDs(ids...)
	return nu
}

// RemoveProgram removes "program" edges to Program entities.
func (nu *NarrativeUpdate) RemoveProgram(p ...*Program) *NarrativeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NarrativeUpdate) Save(ctx context.Context) (int, error) {
	if err := nu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NarrativeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NarrativeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NarrativeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NarrativeUpdate) defaults() error {
	if _, ok := nu.mutation.UpdatedAt(); !ok && !nu.mutation.UpdatedAtCleared() {
		if narrative.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized narrative.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := narrative.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nu *NarrativeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NarrativeUpdate {
	nu.modifiers = append(nu.modifiers, modifiers...)
	return nu
}

func (nu *NarrativeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(narrative.Table, narrative.Columns, sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nu.mutation.CreatedAtCleared() {
		_spec.ClearField(narrative.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(narrative.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.UpdatedAtCleared() {
		_spec.ClearField(narrative.FieldUpdatedAt, field.TypeTime)
	}
	if nu.mutation.CreatedByCleared() {
		_spec.ClearField(narrative.FieldCreatedBy, field.TypeString)
	}
	if value, ok := nu.mutation.UpdatedBy(); ok {
		_spec.SetField(narrative.FieldUpdatedBy, field.TypeString, value)
	}
	if nu.mutation.UpdatedByCleared() {
		_spec.ClearField(narrative.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := nu.mutation.DeletedAt(); ok {
		_spec.SetField(narrative.FieldDeletedAt, field.TypeTime, value)
	}
	if nu.mutation.DeletedAtCleared() {
		_spec.ClearField(narrative.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nu.mutation.DeletedBy(); ok {
		_spec.SetField(narrative.FieldDeletedBy, field.TypeString, value)
	}
	if nu.mutation.DeletedByCleared() {
		_spec.ClearField(narrative.FieldDeletedBy, field.TypeString)
	}
	if value, ok := nu.mutation.Tags(); ok {
		_spec.SetField(narrative.FieldTags, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, narrative.FieldTags, value)
		})
	}
	if nu.mutation.TagsCleared() {
		_spec.ClearField(narrative.FieldTags, field.TypeJSON)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(narrative.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(narrative.FieldDescription, field.TypeString, value)
	}
	if nu.mutation.DescriptionCleared() {
		_spec.ClearField(narrative.FieldDescription, field.TypeString)
	}
	if value, ok := nu.mutation.Satisfies(); ok {
		_spec.SetField(narrative.FieldSatisfies, field.TypeString, value)
	}
	if nu.mutation.SatisfiesCleared() {
		_spec.ClearField(narrative.FieldSatisfies, field.TypeString)
	}
	if value, ok := nu.mutation.Details(); ok {
		_spec.SetField(narrative.FieldDetails, field.TypeJSON, value)
	}
	if nu.mutation.DetailsCleared() {
		_spec.ClearField(narrative.FieldDetails, field.TypeJSON)
	}
	if nu.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.PolicyTable,
			Columns: narrative.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.InternalPolicyNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedPolicyIDs(); len(nodes) > 0 && !nu.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.PolicyTable,
			Columns: narrative.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.PolicyTable,
			Columns: narrative.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlTable,
			Columns: narrative.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ControlNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedControlIDs(); len(nodes) > 0 && !nu.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlTable,
			Columns: narrative.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlTable,
			Columns: narrative.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProcedureTable,
			Columns: narrative.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ProcedureNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedProcedureIDs(); len(nodes) > 0 && !nu.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProcedureTable,
			Columns: narrative.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProcedureTable,
			Columns: narrative.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ControlobjectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlobjectiveTable,
			Columns: narrative.ControlobjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ControlObjectiveNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedControlobjectiveIDs(); len(nodes) > 0 && !nu.mutation.ControlobjectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlobjectiveTable,
			Columns: narrative.ControlobjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ControlobjectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlobjectiveTable,
			Columns: narrative.ControlobjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProgramTable,
			Columns: narrative.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ProgramNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedProgramIDs(); len(nodes) > 0 && !nu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProgramTable,
			Columns: narrative.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProgramTable,
			Columns: narrative.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = nu.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = nu.schemaConfig.Narrative
	ctx = internal.NewSchemaConfigContext(ctx, nu.schemaConfig)
	_spec.AddModifiers(nu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{narrative.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NarrativeUpdateOne is the builder for updating a single Narrative entity.
type NarrativeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NarrativeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NarrativeUpdateOne) SetUpdatedAt(t time.Time) *NarrativeUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nuo *NarrativeUpdateOne) ClearUpdatedAt() *NarrativeUpdateOne {
	nuo.mutation.ClearUpdatedAt()
	return nuo
}

// SetUpdatedBy sets the "updated_by" field.
func (nuo *NarrativeUpdateOne) SetUpdatedBy(s string) *NarrativeUpdateOne {
	nuo.mutation.SetUpdatedBy(s)
	return nuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (nuo *NarrativeUpdateOne) SetNillableUpdatedBy(s *string) *NarrativeUpdateOne {
	if s != nil {
		nuo.SetUpdatedBy(*s)
	}
	return nuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (nuo *NarrativeUpdateOne) ClearUpdatedBy() *NarrativeUpdateOne {
	nuo.mutation.ClearUpdatedBy()
	return nuo
}

// SetDeletedAt sets the "deleted_at" field.
func (nuo *NarrativeUpdateOne) SetDeletedAt(t time.Time) *NarrativeUpdateOne {
	nuo.mutation.SetDeletedAt(t)
	return nuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nuo *NarrativeUpdateOne) SetNillableDeletedAt(t *time.Time) *NarrativeUpdateOne {
	if t != nil {
		nuo.SetDeletedAt(*t)
	}
	return nuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nuo *NarrativeUpdateOne) ClearDeletedAt() *NarrativeUpdateOne {
	nuo.mutation.ClearDeletedAt()
	return nuo
}

// SetDeletedBy sets the "deleted_by" field.
func (nuo *NarrativeUpdateOne) SetDeletedBy(s string) *NarrativeUpdateOne {
	nuo.mutation.SetDeletedBy(s)
	return nuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (nuo *NarrativeUpdateOne) SetNillableDeletedBy(s *string) *NarrativeUpdateOne {
	if s != nil {
		nuo.SetDeletedBy(*s)
	}
	return nuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (nuo *NarrativeUpdateOne) ClearDeletedBy() *NarrativeUpdateOne {
	nuo.mutation.ClearDeletedBy()
	return nuo
}

// SetTags sets the "tags" field.
func (nuo *NarrativeUpdateOne) SetTags(s []string) *NarrativeUpdateOne {
	nuo.mutation.SetTags(s)
	return nuo
}

// AppendTags appends s to the "tags" field.
func (nuo *NarrativeUpdateOne) AppendTags(s []string) *NarrativeUpdateOne {
	nuo.mutation.AppendTags(s)
	return nuo
}

// ClearTags clears the value of the "tags" field.
func (nuo *NarrativeUpdateOne) ClearTags() *NarrativeUpdateOne {
	nuo.mutation.ClearTags()
	return nuo
}

// SetName sets the "name" field.
func (nuo *NarrativeUpdateOne) SetName(s string) *NarrativeUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NarrativeUpdateOne) SetNillableName(s *string) *NarrativeUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NarrativeUpdateOne) SetDescription(s string) *NarrativeUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NarrativeUpdateOne) SetNillableDescription(s *string) *NarrativeUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// ClearDescription clears the value of the "description" field.
func (nuo *NarrativeUpdateOne) ClearDescription() *NarrativeUpdateOne {
	nuo.mutation.ClearDescription()
	return nuo
}

// SetSatisfies sets the "satisfies" field.
func (nuo *NarrativeUpdateOne) SetSatisfies(s string) *NarrativeUpdateOne {
	nuo.mutation.SetSatisfies(s)
	return nuo
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (nuo *NarrativeUpdateOne) SetNillableSatisfies(s *string) *NarrativeUpdateOne {
	if s != nil {
		nuo.SetSatisfies(*s)
	}
	return nuo
}

// ClearSatisfies clears the value of the "satisfies" field.
func (nuo *NarrativeUpdateOne) ClearSatisfies() *NarrativeUpdateOne {
	nuo.mutation.ClearSatisfies()
	return nuo
}

// SetDetails sets the "details" field.
func (nuo *NarrativeUpdateOne) SetDetails(m map[string]interface{}) *NarrativeUpdateOne {
	nuo.mutation.SetDetails(m)
	return nuo
}

// ClearDetails clears the value of the "details" field.
func (nuo *NarrativeUpdateOne) ClearDetails() *NarrativeUpdateOne {
	nuo.mutation.ClearDetails()
	return nuo
}

// AddPolicyIDs adds the "policy" edge to the InternalPolicy entity by IDs.
func (nuo *NarrativeUpdateOne) AddPolicyIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.AddPolicyIDs(ids...)
	return nuo
}

// AddPolicy adds the "policy" edges to the InternalPolicy entity.
func (nuo *NarrativeUpdateOne) AddPolicy(i ...*InternalPolicy) *NarrativeUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.AddPolicyIDs(ids...)
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (nuo *NarrativeUpdateOne) AddControlIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.AddControlIDs(ids...)
	return nuo
}

// AddControl adds the "control" edges to the Control entity.
func (nuo *NarrativeUpdateOne) AddControl(c ...*Control) *NarrativeUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedure" edge to the Procedure entity by IDs.
func (nuo *NarrativeUpdateOne) AddProcedureIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.AddProcedureIDs(ids...)
	return nuo
}

// AddProcedure adds the "procedure" edges to the Procedure entity.
func (nuo *NarrativeUpdateOne) AddProcedure(p ...*Procedure) *NarrativeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddProcedureIDs(ids...)
}

// AddControlobjectiveIDs adds the "controlobjective" edge to the ControlObjective entity by IDs.
func (nuo *NarrativeUpdateOne) AddControlobjectiveIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.AddControlobjectiveIDs(ids...)
	return nuo
}

// AddControlobjective adds the "controlobjective" edges to the ControlObjective entity.
func (nuo *NarrativeUpdateOne) AddControlobjective(c ...*ControlObjective) *NarrativeUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddControlobjectiveIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (nuo *NarrativeUpdateOne) AddProgramIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.AddProgramIDs(ids...)
	return nuo
}

// AddProgram adds the "program" edges to the Program entity.
func (nuo *NarrativeUpdateOne) AddProgram(p ...*Program) *NarrativeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddProgramIDs(ids...)
}

// Mutation returns the NarrativeMutation object of the builder.
func (nuo *NarrativeUpdateOne) Mutation() *NarrativeMutation {
	return nuo.mutation
}

// ClearPolicy clears all "policy" edges to the InternalPolicy entity.
func (nuo *NarrativeUpdateOne) ClearPolicy() *NarrativeUpdateOne {
	nuo.mutation.ClearPolicy()
	return nuo
}

// RemovePolicyIDs removes the "policy" edge to InternalPolicy entities by IDs.
func (nuo *NarrativeUpdateOne) RemovePolicyIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.RemovePolicyIDs(ids...)
	return nuo
}

// RemovePolicy removes "policy" edges to InternalPolicy entities.
func (nuo *NarrativeUpdateOne) RemovePolicy(i ...*InternalPolicy) *NarrativeUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.RemovePolicyIDs(ids...)
}

// ClearControl clears all "control" edges to the Control entity.
func (nuo *NarrativeUpdateOne) ClearControl() *NarrativeUpdateOne {
	nuo.mutation.ClearControl()
	return nuo
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (nuo *NarrativeUpdateOne) RemoveControlIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.RemoveControlIDs(ids...)
	return nuo
}

// RemoveControl removes "control" edges to Control entities.
func (nuo *NarrativeUpdateOne) RemoveControl(c ...*Control) *NarrativeUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveControlIDs(ids...)
}

// ClearProcedure clears all "procedure" edges to the Procedure entity.
func (nuo *NarrativeUpdateOne) ClearProcedure() *NarrativeUpdateOne {
	nuo.mutation.ClearProcedure()
	return nuo
}

// RemoveProcedureIDs removes the "procedure" edge to Procedure entities by IDs.
func (nuo *NarrativeUpdateOne) RemoveProcedureIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.RemoveProcedureIDs(ids...)
	return nuo
}

// RemoveProcedure removes "procedure" edges to Procedure entities.
func (nuo *NarrativeUpdateOne) RemoveProcedure(p ...*Procedure) *NarrativeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveProcedureIDs(ids...)
}

// ClearControlobjective clears all "controlobjective" edges to the ControlObjective entity.
func (nuo *NarrativeUpdateOne) ClearControlobjective() *NarrativeUpdateOne {
	nuo.mutation.ClearControlobjective()
	return nuo
}

// RemoveControlobjectiveIDs removes the "controlobjective" edge to ControlObjective entities by IDs.
func (nuo *NarrativeUpdateOne) RemoveControlobjectiveIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.RemoveControlobjectiveIDs(ids...)
	return nuo
}

// RemoveControlobjective removes "controlobjective" edges to ControlObjective entities.
func (nuo *NarrativeUpdateOne) RemoveControlobjective(c ...*ControlObjective) *NarrativeUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveControlobjectiveIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (nuo *NarrativeUpdateOne) ClearProgram() *NarrativeUpdateOne {
	nuo.mutation.ClearProgram()
	return nuo
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (nuo *NarrativeUpdateOne) RemoveProgramIDs(ids ...string) *NarrativeUpdateOne {
	nuo.mutation.RemoveProgramIDs(ids...)
	return nuo
}

// RemoveProgram removes "program" edges to Program entities.
func (nuo *NarrativeUpdateOne) RemoveProgram(p ...*Program) *NarrativeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the NarrativeUpdate builder.
func (nuo *NarrativeUpdateOne) Where(ps ...predicate.Narrative) *NarrativeUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NarrativeUpdateOne) Select(field string, fields ...string) *NarrativeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Narrative entity.
func (nuo *NarrativeUpdateOne) Save(ctx context.Context) (*Narrative, error) {
	if err := nuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NarrativeUpdateOne) SaveX(ctx context.Context) *Narrative {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NarrativeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NarrativeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NarrativeUpdateOne) defaults() error {
	if _, ok := nuo.mutation.UpdatedAt(); !ok && !nuo.mutation.UpdatedAtCleared() {
		if narrative.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized narrative.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := narrative.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nuo *NarrativeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NarrativeUpdateOne {
	nuo.modifiers = append(nuo.modifiers, modifiers...)
	return nuo
}

func (nuo *NarrativeUpdateOne) sqlSave(ctx context.Context) (_node *Narrative, err error) {
	_spec := sqlgraph.NewUpdateSpec(narrative.Table, narrative.Columns, sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Narrative.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, narrative.FieldID)
		for _, f := range fields {
			if !narrative.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != narrative.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nuo.mutation.CreatedAtCleared() {
		_spec.ClearField(narrative.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(narrative.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(narrative.FieldUpdatedAt, field.TypeTime)
	}
	if nuo.mutation.CreatedByCleared() {
		_spec.ClearField(narrative.FieldCreatedBy, field.TypeString)
	}
	if value, ok := nuo.mutation.UpdatedBy(); ok {
		_spec.SetField(narrative.FieldUpdatedBy, field.TypeString, value)
	}
	if nuo.mutation.UpdatedByCleared() {
		_spec.ClearField(narrative.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := nuo.mutation.DeletedAt(); ok {
		_spec.SetField(narrative.FieldDeletedAt, field.TypeTime, value)
	}
	if nuo.mutation.DeletedAtCleared() {
		_spec.ClearField(narrative.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.DeletedBy(); ok {
		_spec.SetField(narrative.FieldDeletedBy, field.TypeString, value)
	}
	if nuo.mutation.DeletedByCleared() {
		_spec.ClearField(narrative.FieldDeletedBy, field.TypeString)
	}
	if value, ok := nuo.mutation.Tags(); ok {
		_spec.SetField(narrative.FieldTags, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, narrative.FieldTags, value)
		})
	}
	if nuo.mutation.TagsCleared() {
		_spec.ClearField(narrative.FieldTags, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(narrative.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(narrative.FieldDescription, field.TypeString, value)
	}
	if nuo.mutation.DescriptionCleared() {
		_spec.ClearField(narrative.FieldDescription, field.TypeString)
	}
	if value, ok := nuo.mutation.Satisfies(); ok {
		_spec.SetField(narrative.FieldSatisfies, field.TypeString, value)
	}
	if nuo.mutation.SatisfiesCleared() {
		_spec.ClearField(narrative.FieldSatisfies, field.TypeString)
	}
	if value, ok := nuo.mutation.Details(); ok {
		_spec.SetField(narrative.FieldDetails, field.TypeJSON, value)
	}
	if nuo.mutation.DetailsCleared() {
		_spec.ClearField(narrative.FieldDetails, field.TypeJSON)
	}
	if nuo.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.PolicyTable,
			Columns: narrative.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.InternalPolicyNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedPolicyIDs(); len(nodes) > 0 && !nuo.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.PolicyTable,
			Columns: narrative.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.PolicyTable,
			Columns: narrative.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlTable,
			Columns: narrative.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ControlNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedControlIDs(); len(nodes) > 0 && !nuo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlTable,
			Columns: narrative.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlTable,
			Columns: narrative.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProcedureTable,
			Columns: narrative.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ProcedureNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedProcedureIDs(); len(nodes) > 0 && !nuo.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProcedureTable,
			Columns: narrative.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProcedureTable,
			Columns: narrative.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ControlobjectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlobjectiveTable,
			Columns: narrative.ControlobjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ControlObjectiveNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedControlobjectiveIDs(); len(nodes) > 0 && !nuo.mutation.ControlobjectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlobjectiveTable,
			Columns: narrative.ControlobjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ControlobjectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlobjectiveTable,
			Columns: narrative.ControlobjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProgramTable,
			Columns: narrative.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ProgramNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedProgramIDs(); len(nodes) > 0 && !nuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProgramTable,
			Columns: narrative.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProgramTable,
			Columns: narrative.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = nuo.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = nuo.schemaConfig.Narrative
	ctx = internal.NewSchemaConfigContext(ctx, nuo.schemaConfig)
	_spec.AddModifiers(nuo.modifiers...)
	_node = &Narrative{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{narrative.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
