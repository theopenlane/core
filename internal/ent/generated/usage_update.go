// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/usage"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// UsageUpdate is the builder for updating Usage entities.
type UsageUpdate struct {
	config
	hooks     []Hook
	mutation  *UsageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UsageUpdate builder.
func (uu *UsageUpdate) Where(ps ...predicate.Usage) *UsageUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UsageUpdate) SetUpdatedAt(t time.Time) *UsageUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UsageUpdate) ClearUpdatedAt() *UsageUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetUpdatedBy sets the "updated_by" field.
func (uu *UsageUpdate) SetUpdatedBy(s string) *UsageUpdate {
	uu.mutation.SetUpdatedBy(s)
	return uu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableUpdatedBy(s *string) *UsageUpdate {
	if s != nil {
		uu.SetUpdatedBy(*s)
	}
	return uu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uu *UsageUpdate) ClearUpdatedBy() *UsageUpdate {
	uu.mutation.ClearUpdatedBy()
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UsageUpdate) SetDeletedAt(t time.Time) *UsageUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableDeletedAt(t *time.Time) *UsageUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UsageUpdate) ClearDeletedAt() *UsageUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetDeletedBy sets the "deleted_by" field.
func (uu *UsageUpdate) SetDeletedBy(s string) *UsageUpdate {
	uu.mutation.SetDeletedBy(s)
	return uu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableDeletedBy(s *string) *UsageUpdate {
	if s != nil {
		uu.SetDeletedBy(*s)
	}
	return uu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uu *UsageUpdate) ClearDeletedBy() *UsageUpdate {
	uu.mutation.ClearDeletedBy()
	return uu
}

// SetTags sets the "tags" field.
func (uu *UsageUpdate) SetTags(s []string) *UsageUpdate {
	uu.mutation.SetTags(s)
	return uu
}

// AppendTags appends s to the "tags" field.
func (uu *UsageUpdate) AppendTags(s []string) *UsageUpdate {
	uu.mutation.AppendTags(s)
	return uu
}

// ClearTags clears the value of the "tags" field.
func (uu *UsageUpdate) ClearTags() *UsageUpdate {
	uu.mutation.ClearTags()
	return uu
}

// SetOrganizationID sets the "organization_id" field.
func (uu *UsageUpdate) SetOrganizationID(s string) *UsageUpdate {
	uu.mutation.SetOrganizationID(s)
	return uu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableOrganizationID(s *string) *UsageUpdate {
	if s != nil {
		uu.SetOrganizationID(*s)
	}
	return uu
}

// SetResourceType sets the "resource_type" field.
func (uu *UsageUpdate) SetResourceType(et enums.UsageType) *UsageUpdate {
	uu.mutation.SetResourceType(et)
	return uu
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableResourceType(et *enums.UsageType) *UsageUpdate {
	if et != nil {
		uu.SetResourceType(*et)
	}
	return uu
}

// SetUsed sets the "used" field.
func (uu *UsageUpdate) SetUsed(i int64) *UsageUpdate {
	uu.mutation.ResetUsed()
	uu.mutation.SetUsed(i)
	return uu
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableUsed(i *int64) *UsageUpdate {
	if i != nil {
		uu.SetUsed(*i)
	}
	return uu
}

// AddUsed adds i to the "used" field.
func (uu *UsageUpdate) AddUsed(i int64) *UsageUpdate {
	uu.mutation.AddUsed(i)
	return uu
}

// SetLimit sets the "limit" field.
func (uu *UsageUpdate) SetLimit(i int64) *UsageUpdate {
	uu.mutation.ResetLimit()
	uu.mutation.SetLimit(i)
	return uu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableLimit(i *int64) *UsageUpdate {
	if i != nil {
		uu.SetLimit(*i)
	}
	return uu
}

// AddLimit adds i to the "limit" field.
func (uu *UsageUpdate) AddLimit(i int64) *UsageUpdate {
	uu.mutation.AddLimit(i)
	return uu
}

// Mutation returns the UsageMutation object of the builder.
func (uu *UsageUpdate) Mutation() *UsageMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsageUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsageUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsageUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsageUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UsageUpdate) defaults() error {
	if _, ok := uu.mutation.UpdatedAt(); !ok && !uu.mutation.UpdatedAtCleared() {
		if usage.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized usage.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := usage.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UsageUpdate) check() error {
	if v, ok := uu.mutation.ResourceType(); ok {
		if err := usage.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`generated: validator failed for field "Usage.resource_type": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Used(); ok {
		if err := usage.UsedValidator(v); err != nil {
			return &ValidationError{Name: "used", err: fmt.Errorf(`generated: validator failed for field "Usage.used": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Limit(); ok {
		if err := usage.LimitValidator(v); err != nil {
			return &ValidationError{Name: "limit", err: fmt.Errorf(`generated: validator failed for field "Usage.limit": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UsageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UsageUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UsageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usage.Table, usage.Columns, sqlgraph.NewFieldSpec(usage.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(usage.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(usage.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(usage.FieldUpdatedAt, field.TypeTime)
	}
	if uu.mutation.CreatedByCleared() {
		_spec.ClearField(usage.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uu.mutation.UpdatedBy(); ok {
		_spec.SetField(usage.FieldUpdatedBy, field.TypeString, value)
	}
	if uu.mutation.UpdatedByCleared() {
		_spec.ClearField(usage.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(usage.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(usage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.DeletedBy(); ok {
		_spec.SetField(usage.FieldDeletedBy, field.TypeString, value)
	}
	if uu.mutation.DeletedByCleared() {
		_spec.ClearField(usage.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uu.mutation.Tags(); ok {
		_spec.SetField(usage.FieldTags, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usage.FieldTags, value)
		})
	}
	if uu.mutation.TagsCleared() {
		_spec.ClearField(usage.FieldTags, field.TypeJSON)
	}
	if value, ok := uu.mutation.OrganizationID(); ok {
		_spec.SetField(usage.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := uu.mutation.ResourceType(); ok {
		_spec.SetField(usage.FieldResourceType, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Used(); ok {
		_spec.SetField(usage.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedUsed(); ok {
		_spec.AddField(usage.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.Limit(); ok {
		_spec.SetField(usage.FieldLimit, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedLimit(); ok {
		_spec.AddField(usage.FieldLimit, field.TypeInt64, value)
	}
	_spec.Node.Schema = uu.schemaConfig.Usage
	ctx = internal.NewSchemaConfigContext(ctx, uu.schemaConfig)
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UsageUpdateOne is the builder for updating a single Usage entity.
type UsageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UsageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UsageUpdateOne) SetUpdatedAt(t time.Time) *UsageUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UsageUpdateOne) ClearUpdatedAt() *UsageUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetUpdatedBy sets the "updated_by" field.
func (uuo *UsageUpdateOne) SetUpdatedBy(s string) *UsageUpdateOne {
	uuo.mutation.SetUpdatedBy(s)
	return uuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableUpdatedBy(s *string) *UsageUpdateOne {
	if s != nil {
		uuo.SetUpdatedBy(*s)
	}
	return uuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uuo *UsageUpdateOne) ClearUpdatedBy() *UsageUpdateOne {
	uuo.mutation.ClearUpdatedBy()
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UsageUpdateOne) SetDeletedAt(t time.Time) *UsageUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableDeletedAt(t *time.Time) *UsageUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UsageUpdateOne) ClearDeletedAt() *UsageUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetDeletedBy sets the "deleted_by" field.
func (uuo *UsageUpdateOne) SetDeletedBy(s string) *UsageUpdateOne {
	uuo.mutation.SetDeletedBy(s)
	return uuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableDeletedBy(s *string) *UsageUpdateOne {
	if s != nil {
		uuo.SetDeletedBy(*s)
	}
	return uuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uuo *UsageUpdateOne) ClearDeletedBy() *UsageUpdateOne {
	uuo.mutation.ClearDeletedBy()
	return uuo
}

// SetTags sets the "tags" field.
func (uuo *UsageUpdateOne) SetTags(s []string) *UsageUpdateOne {
	uuo.mutation.SetTags(s)
	return uuo
}

// AppendTags appends s to the "tags" field.
func (uuo *UsageUpdateOne) AppendTags(s []string) *UsageUpdateOne {
	uuo.mutation.AppendTags(s)
	return uuo
}

// ClearTags clears the value of the "tags" field.
func (uuo *UsageUpdateOne) ClearTags() *UsageUpdateOne {
	uuo.mutation.ClearTags()
	return uuo
}

// SetOrganizationID sets the "organization_id" field.
func (uuo *UsageUpdateOne) SetOrganizationID(s string) *UsageUpdateOne {
	uuo.mutation.SetOrganizationID(s)
	return uuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableOrganizationID(s *string) *UsageUpdateOne {
	if s != nil {
		uuo.SetOrganizationID(*s)
	}
	return uuo
}

// SetResourceType sets the "resource_type" field.
func (uuo *UsageUpdateOne) SetResourceType(et enums.UsageType) *UsageUpdateOne {
	uuo.mutation.SetResourceType(et)
	return uuo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableResourceType(et *enums.UsageType) *UsageUpdateOne {
	if et != nil {
		uuo.SetResourceType(*et)
	}
	return uuo
}

// SetUsed sets the "used" field.
func (uuo *UsageUpdateOne) SetUsed(i int64) *UsageUpdateOne {
	uuo.mutation.ResetUsed()
	uuo.mutation.SetUsed(i)
	return uuo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableUsed(i *int64) *UsageUpdateOne {
	if i != nil {
		uuo.SetUsed(*i)
	}
	return uuo
}

// AddUsed adds i to the "used" field.
func (uuo *UsageUpdateOne) AddUsed(i int64) *UsageUpdateOne {
	uuo.mutation.AddUsed(i)
	return uuo
}

// SetLimit sets the "limit" field.
func (uuo *UsageUpdateOne) SetLimit(i int64) *UsageUpdateOne {
	uuo.mutation.ResetLimit()
	uuo.mutation.SetLimit(i)
	return uuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableLimit(i *int64) *UsageUpdateOne {
	if i != nil {
		uuo.SetLimit(*i)
	}
	return uuo
}

// AddLimit adds i to the "limit" field.
func (uuo *UsageUpdateOne) AddLimit(i int64) *UsageUpdateOne {
	uuo.mutation.AddLimit(i)
	return uuo
}

// Mutation returns the UsageMutation object of the builder.
func (uuo *UsageUpdateOne) Mutation() *UsageMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UsageUpdate builder.
func (uuo *UsageUpdateOne) Where(ps ...predicate.Usage) *UsageUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsageUpdateOne) Select(field string, fields ...string) *UsageUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Usage entity.
func (uuo *UsageUpdateOne) Save(ctx context.Context) (*Usage, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsageUpdateOne) SaveX(ctx context.Context) *Usage {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsageUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsageUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UsageUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdatedAt(); !ok && !uuo.mutation.UpdatedAtCleared() {
		if usage.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized usage.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := usage.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UsageUpdateOne) check() error {
	if v, ok := uuo.mutation.ResourceType(); ok {
		if err := usage.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`generated: validator failed for field "Usage.resource_type": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Used(); ok {
		if err := usage.UsedValidator(v); err != nil {
			return &ValidationError{Name: "used", err: fmt.Errorf(`generated: validator failed for field "Usage.used": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Limit(); ok {
		if err := usage.LimitValidator(v); err != nil {
			return &ValidationError{Name: "limit", err: fmt.Errorf(`generated: validator failed for field "Usage.limit": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UsageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UsageUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UsageUpdateOne) sqlSave(ctx context.Context) (_node *Usage, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usage.Table, usage.Columns, sqlgraph.NewFieldSpec(usage.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Usage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usage.FieldID)
		for _, f := range fields {
			if !usage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != usage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(usage.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usage.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(usage.FieldUpdatedAt, field.TypeTime)
	}
	if uuo.mutation.CreatedByCleared() {
		_spec.ClearField(usage.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uuo.mutation.UpdatedBy(); ok {
		_spec.SetField(usage.FieldUpdatedBy, field.TypeString, value)
	}
	if uuo.mutation.UpdatedByCleared() {
		_spec.ClearField(usage.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(usage.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(usage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.DeletedBy(); ok {
		_spec.SetField(usage.FieldDeletedBy, field.TypeString, value)
	}
	if uuo.mutation.DeletedByCleared() {
		_spec.ClearField(usage.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uuo.mutation.Tags(); ok {
		_spec.SetField(usage.FieldTags, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usage.FieldTags, value)
		})
	}
	if uuo.mutation.TagsCleared() {
		_spec.ClearField(usage.FieldTags, field.TypeJSON)
	}
	if value, ok := uuo.mutation.OrganizationID(); ok {
		_spec.SetField(usage.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ResourceType(); ok {
		_spec.SetField(usage.FieldResourceType, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Used(); ok {
		_spec.SetField(usage.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedUsed(); ok {
		_spec.AddField(usage.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.Limit(); ok {
		_spec.SetField(usage.FieldLimit, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedLimit(); ok {
		_spec.AddField(usage.FieldLimit, field.TypeInt64, value)
	}
	_spec.Node.Schema = uuo.schemaConfig.Usage
	ctx = internal.NewSchemaConfigContext(ctx, uuo.schemaConfig)
	_spec.AddModifiers(uuo.modifiers...)
	_node = &Usage{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
