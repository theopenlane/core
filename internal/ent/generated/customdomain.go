// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomain"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// CustomDomain is the model entity for the CustomDomain schema.
type CustomDomain struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// internal notes about the object creation, this field is only available to system admins
	InternalNotes *string `json:"internal_notes,omitempty"`
	// an internal identifier for the mapping, this field is only available to system admins
	SystemInternalID *string `json:"system_internal_id,omitempty"`
	// the name of the custom domain
	CnameRecord string `json:"cname_record,omitempty"`
	// The mappable domain id that this custom domain maps to
	MappableDomainID string `json:"mappable_domain_id,omitempty"`
	// The ID of the dns verification record
	DNSVerificationID string `json:"dns_verification_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomDomainQuery when eager-loading is set.
	Edges                           CustomDomainEdges `json:"edges"`
	dns_verification_custom_domains *string
	mappable_domain_custom_domains  *string
	selectValues                    sql.SelectValues
}

// CustomDomainEdges holds the relations/edges for other nodes in the graph.
type CustomDomainEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// MappableDomain holds the value of the mappable_domain edge.
	MappableDomain *MappableDomain `json:"mappable_domain,omitempty"`
	// DNSVerification holds the value of the dns_verification edge.
	DNSVerification *DNSVerification `json:"dns_verification,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomDomainEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// MappableDomainOrErr returns the MappableDomain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomDomainEdges) MappableDomainOrErr() (*MappableDomain, error) {
	if e.MappableDomain != nil {
		return e.MappableDomain, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: mappabledomain.Label}
	}
	return nil, &NotLoadedError{edge: "mappable_domain"}
}

// DNSVerificationOrErr returns the DNSVerification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomDomainEdges) DNSVerificationOrErr() (*DNSVerification, error) {
	if e.DNSVerification != nil {
		return e.DNSVerification, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: dnsverification.Label}
	}
	return nil, &NotLoadedError{edge: "dns_verification"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomDomain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customdomain.FieldTags:
			values[i] = new([]byte)
		case customdomain.FieldSystemOwned:
			values[i] = new(sql.NullBool)
		case customdomain.FieldID, customdomain.FieldCreatedBy, customdomain.FieldUpdatedBy, customdomain.FieldDeletedBy, customdomain.FieldOwnerID, customdomain.FieldInternalNotes, customdomain.FieldSystemInternalID, customdomain.FieldCnameRecord, customdomain.FieldMappableDomainID, customdomain.FieldDNSVerificationID:
			values[i] = new(sql.NullString)
		case customdomain.FieldCreatedAt, customdomain.FieldUpdatedAt, customdomain.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case customdomain.ForeignKeys[0]: // dns_verification_custom_domains
			values[i] = new(sql.NullString)
		case customdomain.ForeignKeys[1]: // mappable_domain_custom_domains
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomDomain fields.
func (_m *CustomDomain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customdomain.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case customdomain.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case customdomain.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case customdomain.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case customdomain.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case customdomain.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case customdomain.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case customdomain.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case customdomain.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case customdomain.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				_m.SystemOwned = value.Bool
			}
		case customdomain.FieldInternalNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_notes", values[i])
			} else if value.Valid {
				_m.InternalNotes = new(string)
				*_m.InternalNotes = value.String
			}
		case customdomain.FieldSystemInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_internal_id", values[i])
			} else if value.Valid {
				_m.SystemInternalID = new(string)
				*_m.SystemInternalID = value.String
			}
		case customdomain.FieldCnameRecord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cname_record", values[i])
			} else if value.Valid {
				_m.CnameRecord = value.String
			}
		case customdomain.FieldMappableDomainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mappable_domain_id", values[i])
			} else if value.Valid {
				_m.MappableDomainID = value.String
			}
		case customdomain.FieldDNSVerificationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_verification_id", values[i])
			} else if value.Valid {
				_m.DNSVerificationID = value.String
			}
		case customdomain.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_verification_custom_domains", values[i])
			} else if value.Valid {
				_m.dns_verification_custom_domains = new(string)
				*_m.dns_verification_custom_domains = value.String
			}
		case customdomain.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mappable_domain_custom_domains", values[i])
			} else if value.Valid {
				_m.mappable_domain_custom_domains = new(string)
				*_m.mappable_domain_custom_domains = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomDomain.
// This includes values selected through modifiers, order, etc.
func (_m *CustomDomain) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the CustomDomain entity.
func (_m *CustomDomain) QueryOwner() *OrganizationQuery {
	return NewCustomDomainClient(_m.config).QueryOwner(_m)
}

// QueryMappableDomain queries the "mappable_domain" edge of the CustomDomain entity.
func (_m *CustomDomain) QueryMappableDomain() *MappableDomainQuery {
	return NewCustomDomainClient(_m.config).QueryMappableDomain(_m)
}

// QueryDNSVerification queries the "dns_verification" edge of the CustomDomain entity.
func (_m *CustomDomain) QueryDNSVerification() *DNSVerificationQuery {
	return NewCustomDomainClient(_m.config).QueryDNSVerification(_m)
}

// Update returns a builder for updating this CustomDomain.
// Note that you need to call CustomDomain.Unwrap() before calling this method if this CustomDomain
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CustomDomain) Update() *CustomDomainUpdateOne {
	return NewCustomDomainClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CustomDomain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CustomDomain) Unwrap() *CustomDomain {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: CustomDomain is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CustomDomain) String() string {
	var builder strings.Builder
	builder.WriteString("CustomDomain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", _m.SystemOwned))
	builder.WriteString(", ")
	if v := _m.InternalNotes; v != nil {
		builder.WriteString("internal_notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SystemInternalID; v != nil {
		builder.WriteString("system_internal_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("cname_record=")
	builder.WriteString(_m.CnameRecord)
	builder.WriteString(", ")
	builder.WriteString("mappable_domain_id=")
	builder.WriteString(_m.MappableDomainID)
	builder.WriteString(", ")
	builder.WriteString("dns_verification_id=")
	builder.WriteString(_m.DNSVerificationID)
	builder.WriteByte(')')
	return builder.String()
}

// CustomDomains is a parsable slice of CustomDomain.
type CustomDomains []*CustomDomain
