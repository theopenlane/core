// Code generated by ent, DO NOT EDIT.

package program

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the program type in the database.
	Label = "program"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldAuditorReady holds the string denoting the auditor_ready field in the database.
	FieldAuditorReady = "auditor_ready"
	// FieldAuditorWriteComments holds the string denoting the auditor_write_comments field in the database.
	FieldAuditorWriteComments = "auditor_write_comments"
	// FieldAuditorReadComments holds the string denoting the auditor_read_comments field in the database.
	FieldAuditorReadComments = "auditor_read_comments"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeControls holds the string denoting the controls edge name in mutations.
	EdgeControls = "controls"
	// EdgeSubcontrols holds the string denoting the subcontrols edge name in mutations.
	EdgeSubcontrols = "subcontrols"
	// EdgeControlobjectives holds the string denoting the controlobjectives edge name in mutations.
	EdgeControlobjectives = "controlobjectives"
	// EdgePolicies holds the string denoting the policies edge name in mutations.
	EdgePolicies = "policies"
	// EdgeProcedures holds the string denoting the procedures edge name in mutations.
	EdgeProcedures = "procedures"
	// EdgeRisks holds the string denoting the risks edge name in mutations.
	EdgeRisks = "risks"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeNotes holds the string denoting the notes edge name in mutations.
	EdgeNotes = "notes"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeNarratives holds the string denoting the narratives edge name in mutations.
	EdgeNarratives = "narratives"
	// EdgeActionplans holds the string denoting the actionplans edge name in mutations.
	EdgeActionplans = "actionplans"
	// EdgeStandards holds the string denoting the standards edge name in mutations.
	EdgeStandards = "standards"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// Table holds the table name of the program in the database.
	Table = "programs"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "programs"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// ControlsTable is the table that holds the controls relation/edge. The primary key declared below.
	ControlsTable = "program_controls"
	// ControlsInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlsInverseTable = "controls"
	// SubcontrolsTable is the table that holds the subcontrols relation/edge. The primary key declared below.
	SubcontrolsTable = "program_subcontrols"
	// SubcontrolsInverseTable is the table name for the Subcontrol entity.
	// It exists in this package in order to avoid circular dependency with the "subcontrol" package.
	SubcontrolsInverseTable = "subcontrols"
	// ControlobjectivesTable is the table that holds the controlobjectives relation/edge. The primary key declared below.
	ControlobjectivesTable = "program_controlobjectives"
	// ControlobjectivesInverseTable is the table name for the ControlObjective entity.
	// It exists in this package in order to avoid circular dependency with the "controlobjective" package.
	ControlobjectivesInverseTable = "control_objectives"
	// PoliciesTable is the table that holds the policies relation/edge. The primary key declared below.
	PoliciesTable = "program_policies"
	// PoliciesInverseTable is the table name for the InternalPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "internalpolicy" package.
	PoliciesInverseTable = "internal_policies"
	// ProceduresTable is the table that holds the procedures relation/edge. The primary key declared below.
	ProceduresTable = "program_procedures"
	// ProceduresInverseTable is the table name for the Procedure entity.
	// It exists in this package in order to avoid circular dependency with the "procedure" package.
	ProceduresInverseTable = "procedures"
	// RisksTable is the table that holds the risks relation/edge. The primary key declared below.
	RisksTable = "program_risks"
	// RisksInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RisksInverseTable = "risks"
	// TasksTable is the table that holds the tasks relation/edge. The primary key declared below.
	TasksTable = "program_tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// NotesTable is the table that holds the notes relation/edge. The primary key declared below.
	NotesTable = "program_notes"
	// NotesInverseTable is the table name for the Note entity.
	// It exists in this package in order to avoid circular dependency with the "note" package.
	NotesInverseTable = "notes"
	// FilesTable is the table that holds the files relation/edge. The primary key declared below.
	FilesTable = "program_files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// NarrativesTable is the table that holds the narratives relation/edge. The primary key declared below.
	NarrativesTable = "program_narratives"
	// NarrativesInverseTable is the table name for the Narrative entity.
	// It exists in this package in order to avoid circular dependency with the "narrative" package.
	NarrativesInverseTable = "narratives"
	// ActionplansTable is the table that holds the actionplans relation/edge. The primary key declared below.
	ActionplansTable = "program_actionplans"
	// ActionplansInverseTable is the table name for the ActionPlan entity.
	// It exists in this package in order to avoid circular dependency with the "actionplan" package.
	ActionplansInverseTable = "action_plans"
	// StandardsTable is the table that holds the standards relation/edge. The primary key declared below.
	StandardsTable = "standard_programs"
	// StandardsInverseTable is the table name for the Standard entity.
	// It exists in this package in order to avoid circular dependency with the "standard" package.
	StandardsInverseTable = "standards"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "program_memberships"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "program_memberships"
	// MembersInverseTable is the table name for the ProgramMembership entity.
	// It exists in this package in order to avoid circular dependency with the "programmembership" package.
	MembersInverseTable = "program_memberships"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "program_id"
)

// Columns holds all SQL columns for program fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldMappingID,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldOwnerID,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldStartDate,
	FieldEndDate,
	FieldAuditorReady,
	FieldAuditorWriteComments,
	FieldAuditorReadComments,
}

var (
	// ControlsPrimaryKey and ControlsColumn2 are the table columns denoting the
	// primary key for the controls relation (M2M).
	ControlsPrimaryKey = []string{"program_id", "control_id"}
	// SubcontrolsPrimaryKey and SubcontrolsColumn2 are the table columns denoting the
	// primary key for the subcontrols relation (M2M).
	SubcontrolsPrimaryKey = []string{"program_id", "subcontrol_id"}
	// ControlobjectivesPrimaryKey and ControlobjectivesColumn2 are the table columns denoting the
	// primary key for the controlobjectives relation (M2M).
	ControlobjectivesPrimaryKey = []string{"program_id", "control_objective_id"}
	// PoliciesPrimaryKey and PoliciesColumn2 are the table columns denoting the
	// primary key for the policies relation (M2M).
	PoliciesPrimaryKey = []string{"program_id", "internal_policy_id"}
	// ProceduresPrimaryKey and ProceduresColumn2 are the table columns denoting the
	// primary key for the procedures relation (M2M).
	ProceduresPrimaryKey = []string{"program_id", "procedure_id"}
	// RisksPrimaryKey and RisksColumn2 are the table columns denoting the
	// primary key for the risks relation (M2M).
	RisksPrimaryKey = []string{"program_id", "risk_id"}
	// TasksPrimaryKey and TasksColumn2 are the table columns denoting the
	// primary key for the tasks relation (M2M).
	TasksPrimaryKey = []string{"program_id", "task_id"}
	// NotesPrimaryKey and NotesColumn2 are the table columns denoting the
	// primary key for the notes relation (M2M).
	NotesPrimaryKey = []string{"program_id", "note_id"}
	// FilesPrimaryKey and FilesColumn2 are the table columns denoting the
	// primary key for the files relation (M2M).
	FilesPrimaryKey = []string{"program_id", "file_id"}
	// NarrativesPrimaryKey and NarrativesColumn2 are the table columns denoting the
	// primary key for the narratives relation (M2M).
	NarrativesPrimaryKey = []string{"program_id", "narrative_id"}
	// ActionplansPrimaryKey and ActionplansColumn2 are the table columns denoting the
	// primary key for the actionplans relation (M2M).
	ActionplansPrimaryKey = []string{"program_id", "action_plan_id"}
	// StandardsPrimaryKey and StandardsColumn2 are the table columns denoting the
	// primary key for the standards relation (M2M).
	StandardsPrimaryKey = []string{"standard_id", "program_id"}
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "program_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [2]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultAuditorReady holds the default value on creation for the "auditor_ready" field.
	DefaultAuditorReady bool
	// DefaultAuditorWriteComments holds the default value on creation for the "auditor_write_comments" field.
	DefaultAuditorWriteComments bool
	// DefaultAuditorReadComments holds the default value on creation for the "auditor_read_comments" field.
	DefaultAuditorReadComments bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultStatus enums.ProgramStatus = "NOT_STARTED"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.ProgramStatus) error {
	switch s.String() {
	case "NOT_STARTED", "IN_PROGRESS", "READY_FOR_AUDITOR", "COMPLETED", "ACTION_REQUIRED":
		return nil
	default:
		return fmt.Errorf("program: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Program queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByAuditorReady orders the results by the auditor_ready field.
func ByAuditorReady(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuditorReady, opts...).ToFunc()
}

// ByAuditorWriteComments orders the results by the auditor_write_comments field.
func ByAuditorWriteComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuditorWriteComments, opts...).ToFunc()
}

// ByAuditorReadComments orders the results by the auditor_read_comments field.
func ByAuditorReadComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuditorReadComments, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByControlsCount orders the results by controls count.
func ByControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlsStep(), opts...)
	}
}

// ByControls orders the results by controls terms.
func ByControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubcontrolsCount orders the results by subcontrols count.
func BySubcontrolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubcontrolsStep(), opts...)
	}
}

// BySubcontrols orders the results by subcontrols terms.
func BySubcontrols(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubcontrolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlobjectivesCount orders the results by controlobjectives count.
func ByControlobjectivesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlobjectivesStep(), opts...)
	}
}

// ByControlobjectives orders the results by controlobjectives terms.
func ByControlobjectives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlobjectivesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPoliciesCount orders the results by policies count.
func ByPoliciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPoliciesStep(), opts...)
	}
}

// ByPolicies orders the results by policies terms.
func ByPolicies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPoliciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProceduresCount orders the results by procedures count.
func ByProceduresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProceduresStep(), opts...)
	}
}

// ByProcedures orders the results by procedures terms.
func ByProcedures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProceduresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRisksCount orders the results by risks count.
func ByRisksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRisksStep(), opts...)
	}
}

// ByRisks orders the results by risks terms.
func ByRisks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRisksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotesCount orders the results by notes count.
func ByNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotesStep(), opts...)
	}
}

// ByNotes orders the results by notes terms.
func ByNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarrativesCount orders the results by narratives count.
func ByNarrativesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarrativesStep(), opts...)
	}
}

// ByNarratives orders the results by narratives terms.
func ByNarratives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarrativesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActionplansCount orders the results by actionplans count.
func ByActionplansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActionplansStep(), opts...)
	}
}

// ByActionplans orders the results by actionplans terms.
func ByActionplans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionplansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStandardsCount orders the results by standards count.
func ByStandardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStandardsStep(), opts...)
	}
}

// ByStandards orders the results by standards terms.
func ByStandards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStandardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ControlsTable, ControlsPrimaryKey...),
	)
}
func newSubcontrolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubcontrolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SubcontrolsTable, SubcontrolsPrimaryKey...),
	)
}
func newControlobjectivesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlobjectivesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ControlobjectivesTable, ControlobjectivesPrimaryKey...),
	)
}
func newPoliciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PoliciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PoliciesTable, PoliciesPrimaryKey...),
	)
}
func newProceduresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProceduresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProceduresTable, ProceduresPrimaryKey...),
	)
}
func newRisksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RisksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RisksTable, RisksPrimaryKey...),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
	)
}
func newNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NotesTable, NotesPrimaryKey...),
	)
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
	)
}
func newNarrativesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarrativesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NarrativesTable, NarrativesPrimaryKey...),
	)
}
func newActionplansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionplansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ActionplansTable, ActionplansPrimaryKey...),
	)
}
func newStandardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StandardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, StandardsTable, StandardsPrimaryKey...),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
	)
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MembersTable, MembersColumn),
	)
}

var (
	// enums.ProgramStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ProgramStatus)(nil)
	// enums.ProgramStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ProgramStatus)(nil)
)
