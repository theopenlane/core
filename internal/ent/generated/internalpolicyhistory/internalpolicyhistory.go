// Code generated by ent, DO NOT EDIT.

package internalpolicyhistory

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the internalpolicyhistory type in the database.
	Label = "internal_policy_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDisplayID holds the string denoting the display_id field in the database.
	FieldDisplayID = "display_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPolicyType holds the string denoting the policy_type field in the database.
	FieldPolicyType = "policy_type"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// FieldApprovalRequired holds the string denoting the approval_required field in the database.
	FieldApprovalRequired = "approval_required"
	// FieldReviewDue holds the string denoting the review_due field in the database.
	FieldReviewDue = "review_due"
	// FieldReviewFrequency holds the string denoting the review_frequency field in the database.
	FieldReviewFrequency = "review_frequency"
	// FieldApproverID holds the string denoting the approver_id field in the database.
	FieldApproverID = "approver_id"
	// FieldDelegateID holds the string denoting the delegate_id field in the database.
	FieldDelegateID = "delegate_id"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// Table holds the table name of the internalpolicyhistory in the database.
	Table = "internal_policy_history"
)

// Columns holds all SQL columns for internalpolicyhistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldDisplayID,
	FieldTags,
	FieldRevision,
	FieldOwnerID,
	FieldName,
	FieldStatus,
	FieldPolicyType,
	FieldDetails,
	FieldApprovalRequired,
	FieldReviewDue,
	FieldReviewFrequency,
	FieldApproverID,
	FieldDelegateID,
	FieldSummary,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Interceptors [1]ent.Interceptor
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultRevision holds the default value on creation for the "revision" field.
	DefaultRevision string
	// DefaultApprovalRequired holds the default value on creation for the "approval_required" field.
	DefaultApprovalRequired bool
	// DefaultReviewDue holds the default value on creation for the "review_due" field.
	DefaultReviewDue time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("internalpolicyhistory: invalid enum value for operation field: %q", o)
	}
}

const DefaultStatus enums.DocumentStatus = "DRAFT"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.DocumentStatus) error {
	switch s.String() {
	case "PUBLISHED", "DRAFT", "NEEDS_APPROVAL", "APPROVED", "ARCHIVED":
		return nil
	default:
		return fmt.Errorf("internalpolicyhistory: invalid enum value for status field: %q", s)
	}
}

const DefaultReviewFrequency enums.Frequency = "YEARLY"

// ReviewFrequencyValidator is a validator for the "review_frequency" field enum values. It is called by the builders before save.
func ReviewFrequencyValidator(rf enums.Frequency) error {
	switch rf.String() {
	case "YEARLY", "QUARTERLY", "BIANNUALLY", "MONTHLY":
		return nil
	default:
		return fmt.Errorf("internalpolicyhistory: invalid enum value for review_frequency field: %q", rf)
	}
}

// OrderOption defines the ordering options for the InternalPolicyHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDisplayID orders the results by the display_id field.
func ByDisplayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayID, opts...).ToFunc()
}

// ByRevision orders the results by the revision field.
func ByRevision(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevision, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPolicyType orders the results by the policy_type field.
func ByPolicyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPolicyType, opts...).ToFunc()
}

// ByDetails orders the results by the details field.
func ByDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetails, opts...).ToFunc()
}

// ByApprovalRequired orders the results by the approval_required field.
func ByApprovalRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalRequired, opts...).ToFunc()
}

// ByReviewDue orders the results by the review_due field.
func ByReviewDue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewDue, opts...).ToFunc()
}

// ByReviewFrequency orders the results by the review_frequency field.
func ByReviewFrequency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewFrequency, opts...).ToFunc()
}

// ByApproverID orders the results by the approver_id field.
func ByApproverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproverID, opts...).ToFunc()
}

// ByDelegateID orders the results by the delegate_id field.
func ByDelegateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelegateID, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)

var (
	// enums.DocumentStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.DocumentStatus)(nil)
	// enums.DocumentStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.DocumentStatus)(nil)
)

var (
	// enums.Frequency must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.Frequency)(nil)
	// enums.Frequency must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.Frequency)(nil)
)
