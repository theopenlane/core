// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgMembershipHistoryQuery is the builder for querying OrgMembershipHistory entities.
type OrgMembershipHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []orgmembershiphistory.OrderOption
	inters     []Interceptor
	predicates []predicate.OrgMembershipHistory
	loadTotal  []func(context.Context, []*OrgMembershipHistory) error
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrgMembershipHistoryQuery builder.
func (omhq *OrgMembershipHistoryQuery) Where(ps ...predicate.OrgMembershipHistory) *OrgMembershipHistoryQuery {
	omhq.predicates = append(omhq.predicates, ps...)
	return omhq
}

// Limit the number of records to be returned by this query.
func (omhq *OrgMembershipHistoryQuery) Limit(limit int) *OrgMembershipHistoryQuery {
	omhq.ctx.Limit = &limit
	return omhq
}

// Offset to start from.
func (omhq *OrgMembershipHistoryQuery) Offset(offset int) *OrgMembershipHistoryQuery {
	omhq.ctx.Offset = &offset
	return omhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (omhq *OrgMembershipHistoryQuery) Unique(unique bool) *OrgMembershipHistoryQuery {
	omhq.ctx.Unique = &unique
	return omhq
}

// Order specifies how the records should be ordered.
func (omhq *OrgMembershipHistoryQuery) Order(o ...orgmembershiphistory.OrderOption) *OrgMembershipHistoryQuery {
	omhq.order = append(omhq.order, o...)
	return omhq
}

// First returns the first OrgMembershipHistory entity from the query.
// Returns a *NotFoundError when no OrgMembershipHistory was found.
func (omhq *OrgMembershipHistoryQuery) First(ctx context.Context) (*OrgMembershipHistory, error) {
	nodes, err := omhq.Limit(1).All(setContextOp(ctx, omhq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orgmembershiphistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (omhq *OrgMembershipHistoryQuery) FirstX(ctx context.Context) *OrgMembershipHistory {
	node, err := omhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrgMembershipHistory ID from the query.
// Returns a *NotFoundError when no OrgMembershipHistory ID was found.
func (omhq *OrgMembershipHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = omhq.Limit(1).IDs(setContextOp(ctx, omhq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orgmembershiphistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (omhq *OrgMembershipHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := omhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrgMembershipHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrgMembershipHistory entity is found.
// Returns a *NotFoundError when no OrgMembershipHistory entities are found.
func (omhq *OrgMembershipHistoryQuery) Only(ctx context.Context) (*OrgMembershipHistory, error) {
	nodes, err := omhq.Limit(2).All(setContextOp(ctx, omhq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orgmembershiphistory.Label}
	default:
		return nil, &NotSingularError{orgmembershiphistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (omhq *OrgMembershipHistoryQuery) OnlyX(ctx context.Context) *OrgMembershipHistory {
	node, err := omhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrgMembershipHistory ID in the query.
// Returns a *NotSingularError when more than one OrgMembershipHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (omhq *OrgMembershipHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = omhq.Limit(2).IDs(setContextOp(ctx, omhq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orgmembershiphistory.Label}
	default:
		err = &NotSingularError{orgmembershiphistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (omhq *OrgMembershipHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := omhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrgMembershipHistories.
func (omhq *OrgMembershipHistoryQuery) All(ctx context.Context) ([]*OrgMembershipHistory, error) {
	ctx = setContextOp(ctx, omhq.ctx, ent.OpQueryAll)
	if err := omhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrgMembershipHistory, *OrgMembershipHistoryQuery]()
	return withInterceptors[[]*OrgMembershipHistory](ctx, omhq, qr, omhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (omhq *OrgMembershipHistoryQuery) AllX(ctx context.Context) []*OrgMembershipHistory {
	nodes, err := omhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrgMembershipHistory IDs.
func (omhq *OrgMembershipHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if omhq.ctx.Unique == nil && omhq.path != nil {
		omhq.Unique(true)
	}
	ctx = setContextOp(ctx, omhq.ctx, ent.OpQueryIDs)
	if err = omhq.Select(orgmembershiphistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (omhq *OrgMembershipHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := omhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (omhq *OrgMembershipHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, omhq.ctx, ent.OpQueryCount)
	if err := omhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, omhq, querierCount[*OrgMembershipHistoryQuery](), omhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (omhq *OrgMembershipHistoryQuery) CountX(ctx context.Context) int {
	count, err := omhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (omhq *OrgMembershipHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, omhq.ctx, ent.OpQueryExist)
	switch _, err := omhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (omhq *OrgMembershipHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := omhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrgMembershipHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (omhq *OrgMembershipHistoryQuery) Clone() *OrgMembershipHistoryQuery {
	if omhq == nil {
		return nil
	}
	return &OrgMembershipHistoryQuery{
		config:     omhq.config,
		ctx:        omhq.ctx.Clone(),
		order:      append([]orgmembershiphistory.OrderOption{}, omhq.order...),
		inters:     append([]Interceptor{}, omhq.inters...),
		predicates: append([]predicate.OrgMembershipHistory{}, omhq.predicates...),
		// clone intermediate query.
		sql:       omhq.sql.Clone(),
		path:      omhq.path,
		modifiers: append([]func(*sql.Selector){}, omhq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrgMembershipHistory.Query().
//		GroupBy(orgmembershiphistory.FieldHistoryTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (omhq *OrgMembershipHistoryQuery) GroupBy(field string, fields ...string) *OrgMembershipHistoryGroupBy {
	omhq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrgMembershipHistoryGroupBy{build: omhq}
	grbuild.flds = &omhq.ctx.Fields
	grbuild.label = orgmembershiphistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//	}
//
//	client.OrgMembershipHistory.Query().
//		Select(orgmembershiphistory.FieldHistoryTime).
//		Scan(ctx, &v)
func (omhq *OrgMembershipHistoryQuery) Select(fields ...string) *OrgMembershipHistorySelect {
	omhq.ctx.Fields = append(omhq.ctx.Fields, fields...)
	sbuild := &OrgMembershipHistorySelect{OrgMembershipHistoryQuery: omhq}
	sbuild.label = orgmembershiphistory.Label
	sbuild.flds, sbuild.scan = &omhq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrgMembershipHistorySelect configured with the given aggregations.
func (omhq *OrgMembershipHistoryQuery) Aggregate(fns ...AggregateFunc) *OrgMembershipHistorySelect {
	return omhq.Select().Aggregate(fns...)
}

func (omhq *OrgMembershipHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range omhq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, omhq); err != nil {
				return err
			}
		}
	}
	for _, f := range omhq.ctx.Fields {
		if !orgmembershiphistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if omhq.path != nil {
		prev, err := omhq.path(ctx)
		if err != nil {
			return err
		}
		omhq.sql = prev
	}
	if orgmembershiphistory.Policy == nil {
		return errors.New("generated: uninitialized orgmembershiphistory.Policy (forgotten import generated/runtime?)")
	}
	if err := orgmembershiphistory.Policy.EvalQuery(ctx, omhq); err != nil {
		return err
	}
	return nil
}

func (omhq *OrgMembershipHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrgMembershipHistory, error) {
	var (
		nodes = []*OrgMembershipHistory{}
		_spec = omhq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrgMembershipHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrgMembershipHistory{config: omhq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = omhq.schemaConfig.OrgMembershipHistory
	ctx = internal.NewSchemaConfigContext(ctx, omhq.schemaConfig)
	if len(omhq.modifiers) > 0 {
		_spec.Modifiers = omhq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, omhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range omhq.loadTotal {
		if err := omhq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (omhq *OrgMembershipHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := omhq.querySpec()
	_spec.Node.Schema = omhq.schemaConfig.OrgMembershipHistory
	ctx = internal.NewSchemaConfigContext(ctx, omhq.schemaConfig)
	if len(omhq.modifiers) > 0 {
		_spec.Modifiers = omhq.modifiers
	}
	_spec.Node.Columns = omhq.ctx.Fields
	if len(omhq.ctx.Fields) > 0 {
		_spec.Unique = omhq.ctx.Unique != nil && *omhq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, omhq.driver, _spec)
}

func (omhq *OrgMembershipHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(orgmembershiphistory.Table, orgmembershiphistory.Columns, sqlgraph.NewFieldSpec(orgmembershiphistory.FieldID, field.TypeString))
	_spec.From = omhq.sql
	if unique := omhq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if omhq.path != nil {
		_spec.Unique = true
	}
	if fields := omhq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgmembershiphistory.FieldID)
		for i := range fields {
			if fields[i] != orgmembershiphistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := omhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := omhq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := omhq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := omhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (omhq *OrgMembershipHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(omhq.driver.Dialect())
	t1 := builder.Table(orgmembershiphistory.Table)
	columns := omhq.ctx.Fields
	if len(columns) == 0 {
		columns = orgmembershiphistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if omhq.sql != nil {
		selector = omhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if omhq.ctx.Unique != nil && *omhq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(omhq.schemaConfig.OrgMembershipHistory)
	ctx = internal.NewSchemaConfigContext(ctx, omhq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range omhq.modifiers {
		m(selector)
	}
	for _, p := range omhq.predicates {
		p(selector)
	}
	for _, p := range omhq.order {
		p(selector)
	}
	if offset := omhq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := omhq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (omhq *OrgMembershipHistoryQuery) Modify(modifiers ...func(s *sql.Selector)) *OrgMembershipHistorySelect {
	omhq.modifiers = append(omhq.modifiers, modifiers...)
	return omhq.Select()
}

// OrgMembershipHistoryGroupBy is the group-by builder for OrgMembershipHistory entities.
type OrgMembershipHistoryGroupBy struct {
	selector
	build *OrgMembershipHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (omhgb *OrgMembershipHistoryGroupBy) Aggregate(fns ...AggregateFunc) *OrgMembershipHistoryGroupBy {
	omhgb.fns = append(omhgb.fns, fns...)
	return omhgb
}

// Scan applies the selector query and scans the result into the given value.
func (omhgb *OrgMembershipHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, omhgb.build.ctx, ent.OpQueryGroupBy)
	if err := omhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgMembershipHistoryQuery, *OrgMembershipHistoryGroupBy](ctx, omhgb.build, omhgb, omhgb.build.inters, v)
}

func (omhgb *OrgMembershipHistoryGroupBy) sqlScan(ctx context.Context, root *OrgMembershipHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(omhgb.fns))
	for _, fn := range omhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*omhgb.flds)+len(omhgb.fns))
		for _, f := range *omhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*omhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := omhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrgMembershipHistorySelect is the builder for selecting fields of OrgMembershipHistory entities.
type OrgMembershipHistorySelect struct {
	*OrgMembershipHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (omhs *OrgMembershipHistorySelect) Aggregate(fns ...AggregateFunc) *OrgMembershipHistorySelect {
	omhs.fns = append(omhs.fns, fns...)
	return omhs
}

// Scan applies the selector query and scans the result into the given value.
func (omhs *OrgMembershipHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, omhs.ctx, ent.OpQuerySelect)
	if err := omhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgMembershipHistoryQuery, *OrgMembershipHistorySelect](ctx, omhs.OrgMembershipHistoryQuery, omhs, omhs.inters, v)
}

func (omhs *OrgMembershipHistorySelect) sqlScan(ctx context.Context, root *OrgMembershipHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(omhs.fns))
	for _, fn := range omhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*omhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := omhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (omhs *OrgMembershipHistorySelect) Modify(modifiers ...func(s *sql.Selector)) *OrgMembershipHistorySelect {
	omhs.modifiers = append(omhs.modifiers, modifiers...)
	return omhs
}
