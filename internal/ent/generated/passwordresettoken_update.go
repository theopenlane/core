// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/passwordresettoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// PasswordResetTokenUpdate is the builder for updating PasswordResetToken entities.
type PasswordResetTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *PasswordResetTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PasswordResetTokenUpdate builder.
func (prtu *PasswordResetTokenUpdate) Where(ps ...predicate.PasswordResetToken) *PasswordResetTokenUpdate {
	prtu.mutation.Where(ps...)
	return prtu
}

// SetUpdatedAt sets the "updated_at" field.
func (prtu *PasswordResetTokenUpdate) SetUpdatedAt(t time.Time) *PasswordResetTokenUpdate {
	prtu.mutation.SetUpdatedAt(t)
	return prtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (prtu *PasswordResetTokenUpdate) ClearUpdatedAt() *PasswordResetTokenUpdate {
	prtu.mutation.ClearUpdatedAt()
	return prtu
}

// SetUpdatedBy sets the "updated_by" field.
func (prtu *PasswordResetTokenUpdate) SetUpdatedBy(s string) *PasswordResetTokenUpdate {
	prtu.mutation.SetUpdatedBy(s)
	return prtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (prtu *PasswordResetTokenUpdate) SetNillableUpdatedBy(s *string) *PasswordResetTokenUpdate {
	if s != nil {
		prtu.SetUpdatedBy(*s)
	}
	return prtu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (prtu *PasswordResetTokenUpdate) ClearUpdatedBy() *PasswordResetTokenUpdate {
	prtu.mutation.ClearUpdatedBy()
	return prtu
}

// SetDeletedAt sets the "deleted_at" field.
func (prtu *PasswordResetTokenUpdate) SetDeletedAt(t time.Time) *PasswordResetTokenUpdate {
	prtu.mutation.SetDeletedAt(t)
	return prtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prtu *PasswordResetTokenUpdate) SetNillableDeletedAt(t *time.Time) *PasswordResetTokenUpdate {
	if t != nil {
		prtu.SetDeletedAt(*t)
	}
	return prtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (prtu *PasswordResetTokenUpdate) ClearDeletedAt() *PasswordResetTokenUpdate {
	prtu.mutation.ClearDeletedAt()
	return prtu
}

// SetDeletedBy sets the "deleted_by" field.
func (prtu *PasswordResetTokenUpdate) SetDeletedBy(s string) *PasswordResetTokenUpdate {
	prtu.mutation.SetDeletedBy(s)
	return prtu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (prtu *PasswordResetTokenUpdate) SetNillableDeletedBy(s *string) *PasswordResetTokenUpdate {
	if s != nil {
		prtu.SetDeletedBy(*s)
	}
	return prtu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (prtu *PasswordResetTokenUpdate) ClearDeletedBy() *PasswordResetTokenUpdate {
	prtu.mutation.ClearDeletedBy()
	return prtu
}

// SetOwnerID sets the "owner_id" field.
func (prtu *PasswordResetTokenUpdate) SetOwnerID(s string) *PasswordResetTokenUpdate {
	prtu.mutation.SetOwnerID(s)
	return prtu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (prtu *PasswordResetTokenUpdate) SetNillableOwnerID(s *string) *PasswordResetTokenUpdate {
	if s != nil {
		prtu.SetOwnerID(*s)
	}
	return prtu
}

// SetToken sets the "token" field.
func (prtu *PasswordResetTokenUpdate) SetToken(s string) *PasswordResetTokenUpdate {
	prtu.mutation.SetToken(s)
	return prtu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (prtu *PasswordResetTokenUpdate) SetNillableToken(s *string) *PasswordResetTokenUpdate {
	if s != nil {
		prtu.SetToken(*s)
	}
	return prtu
}

// SetTTL sets the "ttl" field.
func (prtu *PasswordResetTokenUpdate) SetTTL(t time.Time) *PasswordResetTokenUpdate {
	prtu.mutation.SetTTL(t)
	return prtu
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (prtu *PasswordResetTokenUpdate) SetNillableTTL(t *time.Time) *PasswordResetTokenUpdate {
	if t != nil {
		prtu.SetTTL(*t)
	}
	return prtu
}

// SetEmail sets the "email" field.
func (prtu *PasswordResetTokenUpdate) SetEmail(s string) *PasswordResetTokenUpdate {
	prtu.mutation.SetEmail(s)
	return prtu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (prtu *PasswordResetTokenUpdate) SetNillableEmail(s *string) *PasswordResetTokenUpdate {
	if s != nil {
		prtu.SetEmail(*s)
	}
	return prtu
}

// SetSecret sets the "secret" field.
func (prtu *PasswordResetTokenUpdate) SetSecret(b []byte) *PasswordResetTokenUpdate {
	prtu.mutation.SetSecret(b)
	return prtu
}

// SetOwner sets the "owner" edge to the User entity.
func (prtu *PasswordResetTokenUpdate) SetOwner(u *User) *PasswordResetTokenUpdate {
	return prtu.SetOwnerID(u.ID)
}

// Mutation returns the PasswordResetTokenMutation object of the builder.
func (prtu *PasswordResetTokenUpdate) Mutation() *PasswordResetTokenMutation {
	return prtu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (prtu *PasswordResetTokenUpdate) ClearOwner() *PasswordResetTokenUpdate {
	prtu.mutation.ClearOwner()
	return prtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prtu *PasswordResetTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := prtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, prtu.sqlSave, prtu.mutation, prtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prtu *PasswordResetTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := prtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prtu *PasswordResetTokenUpdate) Exec(ctx context.Context) error {
	_, err := prtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prtu *PasswordResetTokenUpdate) ExecX(ctx context.Context) {
	if err := prtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prtu *PasswordResetTokenUpdate) defaults() error {
	if _, ok := prtu.mutation.UpdatedAt(); !ok && !prtu.mutation.UpdatedAtCleared() {
		if passwordresettoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized passwordresettoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := passwordresettoken.UpdateDefaultUpdatedAt()
		prtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (prtu *PasswordResetTokenUpdate) check() error {
	if v, ok := prtu.mutation.Token(); ok {
		if err := passwordresettoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "PasswordResetToken.token": %w`, err)}
		}
	}
	if v, ok := prtu.mutation.Email(); ok {
		if err := passwordresettoken.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "PasswordResetToken.email": %w`, err)}
		}
	}
	if v, ok := prtu.mutation.Secret(); ok {
		if err := passwordresettoken.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "PasswordResetToken.secret": %w`, err)}
		}
	}
	if prtu.mutation.OwnerCleared() && len(prtu.mutation.OwnerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "PasswordResetToken.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (prtu *PasswordResetTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PasswordResetTokenUpdate {
	prtu.modifiers = append(prtu.modifiers, modifiers...)
	return prtu
}

func (prtu *PasswordResetTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := prtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(passwordresettoken.Table, passwordresettoken.Columns, sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString))
	if ps := prtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if prtu.mutation.CreatedAtCleared() {
		_spec.ClearField(passwordresettoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := prtu.mutation.UpdatedAt(); ok {
		_spec.SetField(passwordresettoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if prtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(passwordresettoken.FieldUpdatedAt, field.TypeTime)
	}
	if prtu.mutation.CreatedByCleared() {
		_spec.ClearField(passwordresettoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := prtu.mutation.UpdatedBy(); ok {
		_spec.SetField(passwordresettoken.FieldUpdatedBy, field.TypeString, value)
	}
	if prtu.mutation.UpdatedByCleared() {
		_spec.ClearField(passwordresettoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := prtu.mutation.DeletedAt(); ok {
		_spec.SetField(passwordresettoken.FieldDeletedAt, field.TypeTime, value)
	}
	if prtu.mutation.DeletedAtCleared() {
		_spec.ClearField(passwordresettoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := prtu.mutation.DeletedBy(); ok {
		_spec.SetField(passwordresettoken.FieldDeletedBy, field.TypeString, value)
	}
	if prtu.mutation.DeletedByCleared() {
		_spec.ClearField(passwordresettoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := prtu.mutation.Token(); ok {
		_spec.SetField(passwordresettoken.FieldToken, field.TypeString, value)
	}
	if value, ok := prtu.mutation.TTL(); ok {
		_spec.SetField(passwordresettoken.FieldTTL, field.TypeTime, value)
	}
	if value, ok := prtu.mutation.Email(); ok {
		_spec.SetField(passwordresettoken.FieldEmail, field.TypeString, value)
	}
	if value, ok := prtu.mutation.Secret(); ok {
		_spec.SetField(passwordresettoken.FieldSecret, field.TypeBytes, value)
	}
	if prtu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresettoken.OwnerTable,
			Columns: []string{passwordresettoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = prtu.schemaConfig.PasswordResetToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresettoken.OwnerTable,
			Columns: []string{passwordresettoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = prtu.schemaConfig.PasswordResetToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = prtu.schemaConfig.PasswordResetToken
	ctx = internal.NewSchemaConfigContext(ctx, prtu.schemaConfig)
	_spec.AddModifiers(prtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, prtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordresettoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	prtu.mutation.done = true
	return n, nil
}

// PasswordResetTokenUpdateOne is the builder for updating a single PasswordResetToken entity.
type PasswordResetTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PasswordResetTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (prtuo *PasswordResetTokenUpdateOne) SetUpdatedAt(t time.Time) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetUpdatedAt(t)
	return prtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (prtuo *PasswordResetTokenUpdateOne) ClearUpdatedAt() *PasswordResetTokenUpdateOne {
	prtuo.mutation.ClearUpdatedAt()
	return prtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (prtuo *PasswordResetTokenUpdateOne) SetUpdatedBy(s string) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetUpdatedBy(s)
	return prtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (prtuo *PasswordResetTokenUpdateOne) SetNillableUpdatedBy(s *string) *PasswordResetTokenUpdateOne {
	if s != nil {
		prtuo.SetUpdatedBy(*s)
	}
	return prtuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (prtuo *PasswordResetTokenUpdateOne) ClearUpdatedBy() *PasswordResetTokenUpdateOne {
	prtuo.mutation.ClearUpdatedBy()
	return prtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (prtuo *PasswordResetTokenUpdateOne) SetDeletedAt(t time.Time) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetDeletedAt(t)
	return prtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prtuo *PasswordResetTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *PasswordResetTokenUpdateOne {
	if t != nil {
		prtuo.SetDeletedAt(*t)
	}
	return prtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (prtuo *PasswordResetTokenUpdateOne) ClearDeletedAt() *PasswordResetTokenUpdateOne {
	prtuo.mutation.ClearDeletedAt()
	return prtuo
}

// SetDeletedBy sets the "deleted_by" field.
func (prtuo *PasswordResetTokenUpdateOne) SetDeletedBy(s string) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetDeletedBy(s)
	return prtuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (prtuo *PasswordResetTokenUpdateOne) SetNillableDeletedBy(s *string) *PasswordResetTokenUpdateOne {
	if s != nil {
		prtuo.SetDeletedBy(*s)
	}
	return prtuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (prtuo *PasswordResetTokenUpdateOne) ClearDeletedBy() *PasswordResetTokenUpdateOne {
	prtuo.mutation.ClearDeletedBy()
	return prtuo
}

// SetOwnerID sets the "owner_id" field.
func (prtuo *PasswordResetTokenUpdateOne) SetOwnerID(s string) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetOwnerID(s)
	return prtuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (prtuo *PasswordResetTokenUpdateOne) SetNillableOwnerID(s *string) *PasswordResetTokenUpdateOne {
	if s != nil {
		prtuo.SetOwnerID(*s)
	}
	return prtuo
}

// SetToken sets the "token" field.
func (prtuo *PasswordResetTokenUpdateOne) SetToken(s string) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetToken(s)
	return prtuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (prtuo *PasswordResetTokenUpdateOne) SetNillableToken(s *string) *PasswordResetTokenUpdateOne {
	if s != nil {
		prtuo.SetToken(*s)
	}
	return prtuo
}

// SetTTL sets the "ttl" field.
func (prtuo *PasswordResetTokenUpdateOne) SetTTL(t time.Time) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetTTL(t)
	return prtuo
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (prtuo *PasswordResetTokenUpdateOne) SetNillableTTL(t *time.Time) *PasswordResetTokenUpdateOne {
	if t != nil {
		prtuo.SetTTL(*t)
	}
	return prtuo
}

// SetEmail sets the "email" field.
func (prtuo *PasswordResetTokenUpdateOne) SetEmail(s string) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetEmail(s)
	return prtuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (prtuo *PasswordResetTokenUpdateOne) SetNillableEmail(s *string) *PasswordResetTokenUpdateOne {
	if s != nil {
		prtuo.SetEmail(*s)
	}
	return prtuo
}

// SetSecret sets the "secret" field.
func (prtuo *PasswordResetTokenUpdateOne) SetSecret(b []byte) *PasswordResetTokenUpdateOne {
	prtuo.mutation.SetSecret(b)
	return prtuo
}

// SetOwner sets the "owner" edge to the User entity.
func (prtuo *PasswordResetTokenUpdateOne) SetOwner(u *User) *PasswordResetTokenUpdateOne {
	return prtuo.SetOwnerID(u.ID)
}

// Mutation returns the PasswordResetTokenMutation object of the builder.
func (prtuo *PasswordResetTokenUpdateOne) Mutation() *PasswordResetTokenMutation {
	return prtuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (prtuo *PasswordResetTokenUpdateOne) ClearOwner() *PasswordResetTokenUpdateOne {
	prtuo.mutation.ClearOwner()
	return prtuo
}

// Where appends a list predicates to the PasswordResetTokenUpdate builder.
func (prtuo *PasswordResetTokenUpdateOne) Where(ps ...predicate.PasswordResetToken) *PasswordResetTokenUpdateOne {
	prtuo.mutation.Where(ps...)
	return prtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prtuo *PasswordResetTokenUpdateOne) Select(field string, fields ...string) *PasswordResetTokenUpdateOne {
	prtuo.fields = append([]string{field}, fields...)
	return prtuo
}

// Save executes the query and returns the updated PasswordResetToken entity.
func (prtuo *PasswordResetTokenUpdateOne) Save(ctx context.Context) (*PasswordResetToken, error) {
	if err := prtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, prtuo.sqlSave, prtuo.mutation, prtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prtuo *PasswordResetTokenUpdateOne) SaveX(ctx context.Context) *PasswordResetToken {
	node, err := prtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prtuo *PasswordResetTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := prtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prtuo *PasswordResetTokenUpdateOne) ExecX(ctx context.Context) {
	if err := prtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prtuo *PasswordResetTokenUpdateOne) defaults() error {
	if _, ok := prtuo.mutation.UpdatedAt(); !ok && !prtuo.mutation.UpdatedAtCleared() {
		if passwordresettoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized passwordresettoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := passwordresettoken.UpdateDefaultUpdatedAt()
		prtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (prtuo *PasswordResetTokenUpdateOne) check() error {
	if v, ok := prtuo.mutation.Token(); ok {
		if err := passwordresettoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "PasswordResetToken.token": %w`, err)}
		}
	}
	if v, ok := prtuo.mutation.Email(); ok {
		if err := passwordresettoken.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "PasswordResetToken.email": %w`, err)}
		}
	}
	if v, ok := prtuo.mutation.Secret(); ok {
		if err := passwordresettoken.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "PasswordResetToken.secret": %w`, err)}
		}
	}
	if prtuo.mutation.OwnerCleared() && len(prtuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "PasswordResetToken.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (prtuo *PasswordResetTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PasswordResetTokenUpdateOne {
	prtuo.modifiers = append(prtuo.modifiers, modifiers...)
	return prtuo
}

func (prtuo *PasswordResetTokenUpdateOne) sqlSave(ctx context.Context) (_node *PasswordResetToken, err error) {
	if err := prtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(passwordresettoken.Table, passwordresettoken.Columns, sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString))
	id, ok := prtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PasswordResetToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := prtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, passwordresettoken.FieldID)
		for _, f := range fields {
			if !passwordresettoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != passwordresettoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if prtuo.mutation.CreatedAtCleared() {
		_spec.ClearField(passwordresettoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := prtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(passwordresettoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if prtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(passwordresettoken.FieldUpdatedAt, field.TypeTime)
	}
	if prtuo.mutation.CreatedByCleared() {
		_spec.ClearField(passwordresettoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := prtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(passwordresettoken.FieldUpdatedBy, field.TypeString, value)
	}
	if prtuo.mutation.UpdatedByCleared() {
		_spec.ClearField(passwordresettoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := prtuo.mutation.DeletedAt(); ok {
		_spec.SetField(passwordresettoken.FieldDeletedAt, field.TypeTime, value)
	}
	if prtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(passwordresettoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := prtuo.mutation.DeletedBy(); ok {
		_spec.SetField(passwordresettoken.FieldDeletedBy, field.TypeString, value)
	}
	if prtuo.mutation.DeletedByCleared() {
		_spec.ClearField(passwordresettoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := prtuo.mutation.Token(); ok {
		_spec.SetField(passwordresettoken.FieldToken, field.TypeString, value)
	}
	if value, ok := prtuo.mutation.TTL(); ok {
		_spec.SetField(passwordresettoken.FieldTTL, field.TypeTime, value)
	}
	if value, ok := prtuo.mutation.Email(); ok {
		_spec.SetField(passwordresettoken.FieldEmail, field.TypeString, value)
	}
	if value, ok := prtuo.mutation.Secret(); ok {
		_spec.SetField(passwordresettoken.FieldSecret, field.TypeBytes, value)
	}
	if prtuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresettoken.OwnerTable,
			Columns: []string{passwordresettoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = prtuo.schemaConfig.PasswordResetToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresettoken.OwnerTable,
			Columns: []string{passwordresettoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = prtuo.schemaConfig.PasswordResetToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = prtuo.schemaConfig.PasswordResetToken
	ctx = internal.NewSchemaConfigContext(ctx, prtuo.schemaConfig)
	_spec.AddModifiers(prtuo.modifiers...)
	_node = &PasswordResetToken{config: prtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordresettoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	prtuo.mutation.done = true
	return _node, nil
}
