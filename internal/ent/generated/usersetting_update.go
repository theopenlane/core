// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// UserSettingUpdate is the builder for updating UserSetting entities.
type UserSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *UserSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserSettingUpdate builder.
func (_u *UserSettingUpdate) Where(ps ...predicate.UserSetting) *UserSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserSettingUpdate) SetUpdatedAt(v time.Time) *UserSettingUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserSettingUpdate) ClearUpdatedAt() *UserSettingUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *UserSettingUpdate) SetUpdatedBy(v string) *UserSettingUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableUpdatedBy(v *string) *UserSettingUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *UserSettingUpdate) ClearUpdatedBy() *UserSettingUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *UserSettingUpdate) SetDeletedAt(v time.Time) *UserSettingUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableDeletedAt(v *time.Time) *UserSettingUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *UserSettingUpdate) ClearDeletedAt() *UserSettingUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *UserSettingUpdate) SetDeletedBy(v string) *UserSettingUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableDeletedBy(v *string) *UserSettingUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *UserSettingUpdate) ClearDeletedBy() *UserSettingUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *UserSettingUpdate) SetTags(v []string) *UserSettingUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *UserSettingUpdate) AppendTags(v []string) *UserSettingUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *UserSettingUpdate) ClearTags() *UserSettingUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserSettingUpdate) SetUserID(v string) *UserSettingUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableUserID(v *string) *UserSettingUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *UserSettingUpdate) ClearUserID() *UserSettingUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetLocked sets the "locked" field.
func (_u *UserSettingUpdate) SetLocked(v bool) *UserSettingUpdate {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableLocked(v *bool) *UserSettingUpdate {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetSilencedAt sets the "silenced_at" field.
func (_u *UserSettingUpdate) SetSilencedAt(v time.Time) *UserSettingUpdate {
	_u.mutation.SetSilencedAt(v)
	return _u
}

// SetNillableSilencedAt sets the "silenced_at" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableSilencedAt(v *time.Time) *UserSettingUpdate {
	if v != nil {
		_u.SetSilencedAt(*v)
	}
	return _u
}

// ClearSilencedAt clears the value of the "silenced_at" field.
func (_u *UserSettingUpdate) ClearSilencedAt() *UserSettingUpdate {
	_u.mutation.ClearSilencedAt()
	return _u
}

// SetSuspendedAt sets the "suspended_at" field.
func (_u *UserSettingUpdate) SetSuspendedAt(v time.Time) *UserSettingUpdate {
	_u.mutation.SetSuspendedAt(v)
	return _u
}

// SetNillableSuspendedAt sets the "suspended_at" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableSuspendedAt(v *time.Time) *UserSettingUpdate {
	if v != nil {
		_u.SetSuspendedAt(*v)
	}
	return _u
}

// ClearSuspendedAt clears the value of the "suspended_at" field.
func (_u *UserSettingUpdate) ClearSuspendedAt() *UserSettingUpdate {
	_u.mutation.ClearSuspendedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserSettingUpdate) SetStatus(v enums.UserStatus) *UserSettingUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableStatus(v *enums.UserStatus) *UserSettingUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (_u *UserSettingUpdate) SetEmailConfirmed(v bool) *UserSettingUpdate {
	_u.mutation.SetEmailConfirmed(v)
	return _u
}

// SetNillableEmailConfirmed sets the "email_confirmed" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableEmailConfirmed(v *bool) *UserSettingUpdate {
	if v != nil {
		_u.SetEmailConfirmed(*v)
	}
	return _u
}

// SetIsWebauthnAllowed sets the "is_webauthn_allowed" field.
func (_u *UserSettingUpdate) SetIsWebauthnAllowed(v bool) *UserSettingUpdate {
	_u.mutation.SetIsWebauthnAllowed(v)
	return _u
}

// SetNillableIsWebauthnAllowed sets the "is_webauthn_allowed" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableIsWebauthnAllowed(v *bool) *UserSettingUpdate {
	if v != nil {
		_u.SetIsWebauthnAllowed(*v)
	}
	return _u
}

// ClearIsWebauthnAllowed clears the value of the "is_webauthn_allowed" field.
func (_u *UserSettingUpdate) ClearIsWebauthnAllowed() *UserSettingUpdate {
	_u.mutation.ClearIsWebauthnAllowed()
	return _u
}

// SetIsTfaEnabled sets the "is_tfa_enabled" field.
func (_u *UserSettingUpdate) SetIsTfaEnabled(v bool) *UserSettingUpdate {
	_u.mutation.SetIsTfaEnabled(v)
	return _u
}

// SetNillableIsTfaEnabled sets the "is_tfa_enabled" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableIsTfaEnabled(v *bool) *UserSettingUpdate {
	if v != nil {
		_u.SetIsTfaEnabled(*v)
	}
	return _u
}

// ClearIsTfaEnabled clears the value of the "is_tfa_enabled" field.
func (_u *UserSettingUpdate) ClearIsTfaEnabled() *UserSettingUpdate {
	_u.mutation.ClearIsTfaEnabled()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *UserSettingUpdate) SetPhoneNumber(v string) *UserSettingUpdate {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *UserSettingUpdate) SetNillablePhoneNumber(v *string) *UserSettingUpdate {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *UserSettingUpdate) ClearPhoneNumber() *UserSettingUpdate {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserSettingUpdate) SetUser(v *User) *UserSettingUpdate {
	return _u.SetUserID(v.ID)
}

// SetDefaultOrgID sets the "default_org" edge to the Organization entity by ID.
func (_u *UserSettingUpdate) SetDefaultOrgID(id string) *UserSettingUpdate {
	_u.mutation.SetDefaultOrgID(id)
	return _u
}

// SetNillableDefaultOrgID sets the "default_org" edge to the Organization entity by ID if the given value is not nil.
func (_u *UserSettingUpdate) SetNillableDefaultOrgID(id *string) *UserSettingUpdate {
	if id != nil {
		_u = _u.SetDefaultOrgID(*id)
	}
	return _u
}

// SetDefaultOrg sets the "default_org" edge to the Organization entity.
func (_u *UserSettingUpdate) SetDefaultOrg(v *Organization) *UserSettingUpdate {
	return _u.SetDefaultOrgID(v.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *UserSettingUpdate) AddFileIDs(ids ...string) *UserSettingUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *UserSettingUpdate) AddFiles(v ...*File) *UserSettingUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the UserSettingMutation object of the builder.
func (_u *UserSettingUpdate) Mutation() *UserSettingMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserSettingUpdate) ClearUser() *UserSettingUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearDefaultOrg clears the "default_org" edge to the Organization entity.
func (_u *UserSettingUpdate) ClearDefaultOrg() *UserSettingUpdate {
	_u.mutation.ClearDefaultOrg()
	return _u
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *UserSettingUpdate) ClearFiles() *UserSettingUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *UserSettingUpdate) RemoveFileIDs(ids ...string) *UserSettingUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *UserSettingUpdate) RemoveFiles(v ...*File) *UserSettingUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserSettingUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if usersetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized usersetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := usersetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserSettingUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := usersetting.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "UserSetting.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserSettingUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersetting.Table, usersetting.Columns, sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(usersetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(usersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(usersetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(usersetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(usersetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(usersetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(usersetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(usersetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(usersetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(usersetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(usersetting.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usersetting.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(usersetting.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(usersetting.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SilencedAt(); ok {
		_spec.SetField(usersetting.FieldSilencedAt, field.TypeTime, value)
	}
	if _u.mutation.SilencedAtCleared() {
		_spec.ClearField(usersetting.FieldSilencedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.SuspendedAt(); ok {
		_spec.SetField(usersetting.FieldSuspendedAt, field.TypeTime, value)
	}
	if _u.mutation.SuspendedAtCleared() {
		_spec.ClearField(usersetting.FieldSuspendedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(usersetting.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.EmailConfirmed(); ok {
		_spec.SetField(usersetting.FieldEmailConfirmed, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsWebauthnAllowed(); ok {
		_spec.SetField(usersetting.FieldIsWebauthnAllowed, field.TypeBool, value)
	}
	if _u.mutation.IsWebauthnAllowedCleared() {
		_spec.ClearField(usersetting.FieldIsWebauthnAllowed, field.TypeBool)
	}
	if value, ok := _u.mutation.IsTfaEnabled(); ok {
		_spec.SetField(usersetting.FieldIsTfaEnabled, field.TypeBool, value)
	}
	if _u.mutation.IsTfaEnabledCleared() {
		_spec.ClearField(usersetting.FieldIsTfaEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(usersetting.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(usersetting.FieldPhoneNumber, field.TypeString)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DefaultOrgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersetting.DefaultOrgTable,
			Columns: []string{usersetting.DefaultOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DefaultOrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersetting.DefaultOrgTable,
			Columns: []string{usersetting.DefaultOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersetting.FilesTable,
			Columns: usersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersetting.FilesTable,
			Columns: usersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersetting.FilesTable,
			Columns: usersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.UserSetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserSettingUpdateOne is the builder for updating a single UserSetting entity.
type UserSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserSettingUpdateOne) SetUpdatedAt(v time.Time) *UserSettingUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserSettingUpdateOne) ClearUpdatedAt() *UserSettingUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *UserSettingUpdateOne) SetUpdatedBy(v string) *UserSettingUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableUpdatedBy(v *string) *UserSettingUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *UserSettingUpdateOne) ClearUpdatedBy() *UserSettingUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *UserSettingUpdateOne) SetDeletedAt(v time.Time) *UserSettingUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableDeletedAt(v *time.Time) *UserSettingUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *UserSettingUpdateOne) ClearDeletedAt() *UserSettingUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *UserSettingUpdateOne) SetDeletedBy(v string) *UserSettingUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableDeletedBy(v *string) *UserSettingUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *UserSettingUpdateOne) ClearDeletedBy() *UserSettingUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *UserSettingUpdateOne) SetTags(v []string) *UserSettingUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *UserSettingUpdateOne) AppendTags(v []string) *UserSettingUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *UserSettingUpdateOne) ClearTags() *UserSettingUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserSettingUpdateOne) SetUserID(v string) *UserSettingUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableUserID(v *string) *UserSettingUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *UserSettingUpdateOne) ClearUserID() *UserSettingUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetLocked sets the "locked" field.
func (_u *UserSettingUpdateOne) SetLocked(v bool) *UserSettingUpdateOne {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableLocked(v *bool) *UserSettingUpdateOne {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetSilencedAt sets the "silenced_at" field.
func (_u *UserSettingUpdateOne) SetSilencedAt(v time.Time) *UserSettingUpdateOne {
	_u.mutation.SetSilencedAt(v)
	return _u
}

// SetNillableSilencedAt sets the "silenced_at" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableSilencedAt(v *time.Time) *UserSettingUpdateOne {
	if v != nil {
		_u.SetSilencedAt(*v)
	}
	return _u
}

// ClearSilencedAt clears the value of the "silenced_at" field.
func (_u *UserSettingUpdateOne) ClearSilencedAt() *UserSettingUpdateOne {
	_u.mutation.ClearSilencedAt()
	return _u
}

// SetSuspendedAt sets the "suspended_at" field.
func (_u *UserSettingUpdateOne) SetSuspendedAt(v time.Time) *UserSettingUpdateOne {
	_u.mutation.SetSuspendedAt(v)
	return _u
}

// SetNillableSuspendedAt sets the "suspended_at" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableSuspendedAt(v *time.Time) *UserSettingUpdateOne {
	if v != nil {
		_u.SetSuspendedAt(*v)
	}
	return _u
}

// ClearSuspendedAt clears the value of the "suspended_at" field.
func (_u *UserSettingUpdateOne) ClearSuspendedAt() *UserSettingUpdateOne {
	_u.mutation.ClearSuspendedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserSettingUpdateOne) SetStatus(v enums.UserStatus) *UserSettingUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableStatus(v *enums.UserStatus) *UserSettingUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (_u *UserSettingUpdateOne) SetEmailConfirmed(v bool) *UserSettingUpdateOne {
	_u.mutation.SetEmailConfirmed(v)
	return _u
}

// SetNillableEmailConfirmed sets the "email_confirmed" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableEmailConfirmed(v *bool) *UserSettingUpdateOne {
	if v != nil {
		_u.SetEmailConfirmed(*v)
	}
	return _u
}

// SetIsWebauthnAllowed sets the "is_webauthn_allowed" field.
func (_u *UserSettingUpdateOne) SetIsWebauthnAllowed(v bool) *UserSettingUpdateOne {
	_u.mutation.SetIsWebauthnAllowed(v)
	return _u
}

// SetNillableIsWebauthnAllowed sets the "is_webauthn_allowed" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableIsWebauthnAllowed(v *bool) *UserSettingUpdateOne {
	if v != nil {
		_u.SetIsWebauthnAllowed(*v)
	}
	return _u
}

// ClearIsWebauthnAllowed clears the value of the "is_webauthn_allowed" field.
func (_u *UserSettingUpdateOne) ClearIsWebauthnAllowed() *UserSettingUpdateOne {
	_u.mutation.ClearIsWebauthnAllowed()
	return _u
}

// SetIsTfaEnabled sets the "is_tfa_enabled" field.
func (_u *UserSettingUpdateOne) SetIsTfaEnabled(v bool) *UserSettingUpdateOne {
	_u.mutation.SetIsTfaEnabled(v)
	return _u
}

// SetNillableIsTfaEnabled sets the "is_tfa_enabled" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableIsTfaEnabled(v *bool) *UserSettingUpdateOne {
	if v != nil {
		_u.SetIsTfaEnabled(*v)
	}
	return _u
}

// ClearIsTfaEnabled clears the value of the "is_tfa_enabled" field.
func (_u *UserSettingUpdateOne) ClearIsTfaEnabled() *UserSettingUpdateOne {
	_u.mutation.ClearIsTfaEnabled()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *UserSettingUpdateOne) SetPhoneNumber(v string) *UserSettingUpdateOne {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillablePhoneNumber(v *string) *UserSettingUpdateOne {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *UserSettingUpdateOne) ClearPhoneNumber() *UserSettingUpdateOne {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserSettingUpdateOne) SetUser(v *User) *UserSettingUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetDefaultOrgID sets the "default_org" edge to the Organization entity by ID.
func (_u *UserSettingUpdateOne) SetDefaultOrgID(id string) *UserSettingUpdateOne {
	_u.mutation.SetDefaultOrgID(id)
	return _u
}

// SetNillableDefaultOrgID sets the "default_org" edge to the Organization entity by ID if the given value is not nil.
func (_u *UserSettingUpdateOne) SetNillableDefaultOrgID(id *string) *UserSettingUpdateOne {
	if id != nil {
		_u = _u.SetDefaultOrgID(*id)
	}
	return _u
}

// SetDefaultOrg sets the "default_org" edge to the Organization entity.
func (_u *UserSettingUpdateOne) SetDefaultOrg(v *Organization) *UserSettingUpdateOne {
	return _u.SetDefaultOrgID(v.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *UserSettingUpdateOne) AddFileIDs(ids ...string) *UserSettingUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *UserSettingUpdateOne) AddFiles(v ...*File) *UserSettingUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the UserSettingMutation object of the builder.
func (_u *UserSettingUpdateOne) Mutation() *UserSettingMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserSettingUpdateOne) ClearUser() *UserSettingUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearDefaultOrg clears the "default_org" edge to the Organization entity.
func (_u *UserSettingUpdateOne) ClearDefaultOrg() *UserSettingUpdateOne {
	_u.mutation.ClearDefaultOrg()
	return _u
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *UserSettingUpdateOne) ClearFiles() *UserSettingUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *UserSettingUpdateOne) RemoveFileIDs(ids ...string) *UserSettingUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *UserSettingUpdateOne) RemoveFiles(v ...*File) *UserSettingUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the UserSettingUpdate builder.
func (_u *UserSettingUpdateOne) Where(ps ...predicate.UserSetting) *UserSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserSettingUpdateOne) Select(field string, fields ...string) *UserSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserSetting entity.
func (_u *UserSettingUpdateOne) Save(ctx context.Context) (*UserSetting, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserSettingUpdateOne) SaveX(ctx context.Context) *UserSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserSettingUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if usersetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized usersetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := usersetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserSettingUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := usersetting.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "UserSetting.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserSettingUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserSettingUpdateOne) sqlSave(ctx context.Context) (_node *UserSetting, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersetting.Table, usersetting.Columns, sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersetting.FieldID)
		for _, f := range fields {
			if !usersetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != usersetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(usersetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(usersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(usersetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(usersetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(usersetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(usersetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(usersetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(usersetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(usersetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(usersetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(usersetting.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usersetting.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(usersetting.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(usersetting.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SilencedAt(); ok {
		_spec.SetField(usersetting.FieldSilencedAt, field.TypeTime, value)
	}
	if _u.mutation.SilencedAtCleared() {
		_spec.ClearField(usersetting.FieldSilencedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.SuspendedAt(); ok {
		_spec.SetField(usersetting.FieldSuspendedAt, field.TypeTime, value)
	}
	if _u.mutation.SuspendedAtCleared() {
		_spec.ClearField(usersetting.FieldSuspendedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(usersetting.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.EmailConfirmed(); ok {
		_spec.SetField(usersetting.FieldEmailConfirmed, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsWebauthnAllowed(); ok {
		_spec.SetField(usersetting.FieldIsWebauthnAllowed, field.TypeBool, value)
	}
	if _u.mutation.IsWebauthnAllowedCleared() {
		_spec.ClearField(usersetting.FieldIsWebauthnAllowed, field.TypeBool)
	}
	if value, ok := _u.mutation.IsTfaEnabled(); ok {
		_spec.SetField(usersetting.FieldIsTfaEnabled, field.TypeBool, value)
	}
	if _u.mutation.IsTfaEnabledCleared() {
		_spec.ClearField(usersetting.FieldIsTfaEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(usersetting.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(usersetting.FieldPhoneNumber, field.TypeString)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DefaultOrgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersetting.DefaultOrgTable,
			Columns: []string{usersetting.DefaultOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DefaultOrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersetting.DefaultOrgTable,
			Columns: []string{usersetting.DefaultOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersetting.FilesTable,
			Columns: usersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersetting.FilesTable,
			Columns: usersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   usersetting.FilesTable,
			Columns: usersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.UserSetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &UserSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
