// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/standard"
)

// Standard is the model entity for the Standard schema.
type Standard struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the name of the standard body, e.g. TSC, NIST, SOC, HITRUST, FedRamp, etc.
	Name string `json:"name,omitempty"`
	// description of the standard
	Description string `json:"description,omitempty"`
	// family of the standard, e.g. 800-53, 800-171, 27001, etc.
	Family string `json:"family,omitempty"`
	// status of the standard - active, deprecated, etc.
	Status string `json:"status,omitempty"`
	// type of the standard - security, privacy, etc.
	StandardType string `json:"standard_type,omitempty"`
	// version of the standard
	Version string `json:"version,omitempty"`
	// purpose and scope
	PurposeAndScope string `json:"purpose_and_scope,omitempty"`
	// background of the standard
	Background string `json:"background,omitempty"`
	// which controls are satisfied by the standard
	Satisfies string `json:"satisfies,omitempty"`
	// json data with details of the standard
	Details map[string]interface{} `json:"details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StandardQuery when eager-loading is set.
	Edges        StandardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StandardEdges holds the relations/edges for other nodes in the graph.
type StandardEdges struct {
	// ControlObjectives holds the value of the control_objectives edge.
	ControlObjectives []*ControlObjective `json:"control_objectives,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// ActionPlans holds the value of the action_plans edge.
	ActionPlans []*ActionPlan `json:"action_plans,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedControlObjectives map[string][]*ControlObjective
	namedControls          map[string][]*Control
	namedProcedures        map[string][]*Procedure
	namedActionPlans       map[string][]*ActionPlan
	namedPrograms          map[string][]*Program
}

// ControlObjectivesOrErr returns the ControlObjectives value or an error if the edge
// was not loaded in eager-loading.
func (e StandardEdges) ControlObjectivesOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[0] {
		return e.ControlObjectives, nil
	}
	return nil, &NotLoadedError{edge: "control_objectives"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e StandardEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[1] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e StandardEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[2] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// ActionPlansOrErr returns the ActionPlans value or an error if the edge
// was not loaded in eager-loading.
func (e StandardEdges) ActionPlansOrErr() ([]*ActionPlan, error) {
	if e.loadedTypes[3] {
		return e.ActionPlans, nil
	}
	return nil, &NotLoadedError{edge: "action_plans"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e StandardEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[4] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Standard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case standard.FieldTags, standard.FieldDetails:
			values[i] = new([]byte)
		case standard.FieldID, standard.FieldCreatedBy, standard.FieldUpdatedBy, standard.FieldDeletedBy, standard.FieldName, standard.FieldDescription, standard.FieldFamily, standard.FieldStatus, standard.FieldStandardType, standard.FieldVersion, standard.FieldPurposeAndScope, standard.FieldBackground, standard.FieldSatisfies:
			values[i] = new(sql.NullString)
		case standard.FieldCreatedAt, standard.FieldUpdatedAt, standard.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Standard fields.
func (s *Standard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case standard.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case standard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case standard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case standard.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.String
			}
		case standard.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.String
			}
		case standard.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case standard.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				s.DeletedBy = value.String
			}
		case standard.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case standard.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case standard.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case standard.FieldFamily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field family", values[i])
			} else if value.Valid {
				s.Family = value.String
			}
		case standard.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case standard.FieldStandardType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field standard_type", values[i])
			} else if value.Valid {
				s.StandardType = value.String
			}
		case standard.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				s.Version = value.String
			}
		case standard.FieldPurposeAndScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purpose_and_scope", values[i])
			} else if value.Valid {
				s.PurposeAndScope = value.String
			}
		case standard.FieldBackground:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background", values[i])
			} else if value.Valid {
				s.Background = value.String
			}
		case standard.FieldSatisfies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field satisfies", values[i])
			} else if value.Valid {
				s.Satisfies = value.String
			}
		case standard.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Standard.
// This includes values selected through modifiers, order, etc.
func (s *Standard) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryControlObjectives queries the "control_objectives" edge of the Standard entity.
func (s *Standard) QueryControlObjectives() *ControlObjectiveQuery {
	return NewStandardClient(s.config).QueryControlObjectives(s)
}

// QueryControls queries the "controls" edge of the Standard entity.
func (s *Standard) QueryControls() *ControlQuery {
	return NewStandardClient(s.config).QueryControls(s)
}

// QueryProcedures queries the "procedures" edge of the Standard entity.
func (s *Standard) QueryProcedures() *ProcedureQuery {
	return NewStandardClient(s.config).QueryProcedures(s)
}

// QueryActionPlans queries the "action_plans" edge of the Standard entity.
func (s *Standard) QueryActionPlans() *ActionPlanQuery {
	return NewStandardClient(s.config).QueryActionPlans(s)
}

// QueryPrograms queries the "programs" edge of the Standard entity.
func (s *Standard) QueryPrograms() *ProgramQuery {
	return NewStandardClient(s.config).QueryPrograms(s)
}

// Update returns a builder for updating this Standard.
// Note that you need to call Standard.Unwrap() before calling this method if this Standard
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Standard) Update() *StandardUpdateOne {
	return NewStandardClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Standard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Standard) Unwrap() *Standard {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("generated: Standard is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Standard) String() string {
	var builder strings.Builder
	builder.WriteString("Standard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(s.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(s.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(s.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", s.Tags))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("family=")
	builder.WriteString(s.Family)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(s.Status)
	builder.WriteString(", ")
	builder.WriteString("standard_type=")
	builder.WriteString(s.StandardType)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(s.Version)
	builder.WriteString(", ")
	builder.WriteString("purpose_and_scope=")
	builder.WriteString(s.PurposeAndScope)
	builder.WriteString(", ")
	builder.WriteString("background=")
	builder.WriteString(s.Background)
	builder.WriteString(", ")
	builder.WriteString("satisfies=")
	builder.WriteString(s.Satisfies)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", s.Details))
	builder.WriteByte(')')
	return builder.String()
}

// NamedControlObjectives returns the ControlObjectives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Standard) NamedControlObjectives(name string) ([]*ControlObjective, error) {
	if s.Edges.namedControlObjectives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedControlObjectives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Standard) appendNamedControlObjectives(name string, edges ...*ControlObjective) {
	if s.Edges.namedControlObjectives == nil {
		s.Edges.namedControlObjectives = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		s.Edges.namedControlObjectives[name] = []*ControlObjective{}
	} else {
		s.Edges.namedControlObjectives[name] = append(s.Edges.namedControlObjectives[name], edges...)
	}
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Standard) NamedControls(name string) ([]*Control, error) {
	if s.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Standard) appendNamedControls(name string, edges ...*Control) {
	if s.Edges.namedControls == nil {
		s.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		s.Edges.namedControls[name] = []*Control{}
	} else {
		s.Edges.namedControls[name] = append(s.Edges.namedControls[name], edges...)
	}
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Standard) NamedProcedures(name string) ([]*Procedure, error) {
	if s.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Standard) appendNamedProcedures(name string, edges ...*Procedure) {
	if s.Edges.namedProcedures == nil {
		s.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		s.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		s.Edges.namedProcedures[name] = append(s.Edges.namedProcedures[name], edges...)
	}
}

// NamedActionPlans returns the ActionPlans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Standard) NamedActionPlans(name string) ([]*ActionPlan, error) {
	if s.Edges.namedActionPlans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedActionPlans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Standard) appendNamedActionPlans(name string, edges ...*ActionPlan) {
	if s.Edges.namedActionPlans == nil {
		s.Edges.namedActionPlans = make(map[string][]*ActionPlan)
	}
	if len(edges) == 0 {
		s.Edges.namedActionPlans[name] = []*ActionPlan{}
	} else {
		s.Edges.namedActionPlans[name] = append(s.Edges.namedActionPlans[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Standard) NamedPrograms(name string) ([]*Program, error) {
	if s.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Standard) appendNamedPrograms(name string, edges ...*Program) {
	if s.Edges.namedPrograms == nil {
		s.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		s.Edges.namedPrograms[name] = []*Program{}
	} else {
		s.Edges.namedPrograms[name] = append(s.Edges.namedPrograms[name], edges...)
	}
}

// Standards is a parsable slice of Standard.
type Standards []*Standard
