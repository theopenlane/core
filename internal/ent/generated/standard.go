// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/pkg/enums"
)

// Standard is the model entity for the Standard schema.
type Standard struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
	Revision string `json:"revision,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// the long name of the standard body
	Name string `json:"name,omitempty"`
	// short name of the standard, e.g. SOC 2, ISO 27001, etc.
	ShortName string `json:"short_name,omitempty"`
	// unique identifier of the standard with version
	Framework string `json:"framework,omitempty"`
	// long description of the standard with details of what is covered
	Description string `json:"description,omitempty"`
	// URL to the logo of the governing body
	GoverningBodyLogoURL string `json:"governing_body_logo_url,omitempty"`
	// governing body of the standard, e.g. AICPA, etc.
	GoverningBody string `json:"governing_body,omitempty"`
	// domains the standard covers, e.g. availability, confidentiality, etc.
	Domains []string `json:"domains,omitempty"`
	// link to the official standard documentation
	Link string `json:"link,omitempty"`
	// status of the standard - active, draft, and archived
	Status enums.StandardStatus `json:"status,omitempty"`
	// indicates if the standard should be made available to all users, only for system owned standards
	IsPublic bool `json:"is_public,omitempty"`
	// indicates if the standard is freely distributable under a trial license, only for system owned standards
	FreeToUse bool `json:"free_to_use,omitempty"`
	// type of the standard - cybersecurity, healthcare , financial, etc.
	StandardType string `json:"standard_type,omitempty"`
	// version of the standard
	Version string `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StandardQuery when eager-loading is set.
	Edges        StandardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StandardEdges holds the relations/edges for other nodes in the graph.
type StandardEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// TrustCenterCompliances holds the value of the trust_center_compliances edge.
	TrustCenterCompliances []*TrustCenterCompliance `json:"trust_center_compliances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedControls               map[string][]*Control
	namedTrustCenterCompliances map[string][]*TrustCenterCompliance
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StandardEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e StandardEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[1] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// TrustCenterCompliancesOrErr returns the TrustCenterCompliances value or an error if the edge
// was not loaded in eager-loading.
func (e StandardEdges) TrustCenterCompliancesOrErr() ([]*TrustCenterCompliance, error) {
	if e.loadedTypes[2] {
		return e.TrustCenterCompliances, nil
	}
	return nil, &NotLoadedError{edge: "trust_center_compliances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Standard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case standard.FieldTags, standard.FieldDomains:
			values[i] = new([]byte)
		case standard.FieldSystemOwned, standard.FieldIsPublic, standard.FieldFreeToUse:
			values[i] = new(sql.NullBool)
		case standard.FieldID, standard.FieldCreatedBy, standard.FieldUpdatedBy, standard.FieldDeletedBy, standard.FieldRevision, standard.FieldOwnerID, standard.FieldName, standard.FieldShortName, standard.FieldFramework, standard.FieldDescription, standard.FieldGoverningBodyLogoURL, standard.FieldGoverningBody, standard.FieldLink, standard.FieldStatus, standard.FieldStandardType, standard.FieldVersion:
			values[i] = new(sql.NullString)
		case standard.FieldCreatedAt, standard.FieldUpdatedAt, standard.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Standard fields.
func (_m *Standard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case standard.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case standard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case standard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case standard.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case standard.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case standard.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case standard.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case standard.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case standard.FieldRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				_m.Revision = value.String
			}
		case standard.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case standard.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				_m.SystemOwned = value.Bool
			}
		case standard.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case standard.FieldShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_name", values[i])
			} else if value.Valid {
				_m.ShortName = value.String
			}
		case standard.FieldFramework:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field framework", values[i])
			} else if value.Valid {
				_m.Framework = value.String
			}
		case standard.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case standard.FieldGoverningBodyLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field governing_body_logo_url", values[i])
			} else if value.Valid {
				_m.GoverningBodyLogoURL = value.String
			}
		case standard.FieldGoverningBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field governing_body", values[i])
			} else if value.Valid {
				_m.GoverningBody = value.String
			}
		case standard.FieldDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Domains); err != nil {
					return fmt.Errorf("unmarshal field domains: %w", err)
				}
			}
		case standard.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				_m.Link = value.String
			}
		case standard.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = enums.StandardStatus(value.String)
			}
		case standard.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				_m.IsPublic = value.Bool
			}
		case standard.FieldFreeToUse:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field free_to_use", values[i])
			} else if value.Valid {
				_m.FreeToUse = value.Bool
			}
		case standard.FieldStandardType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field standard_type", values[i])
			} else if value.Valid {
				_m.StandardType = value.String
			}
		case standard.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Standard.
// This includes values selected through modifiers, order, etc.
func (_m *Standard) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Standard entity.
func (_m *Standard) QueryOwner() *OrganizationQuery {
	return NewStandardClient(_m.config).QueryOwner(_m)
}

// QueryControls queries the "controls" edge of the Standard entity.
func (_m *Standard) QueryControls() *ControlQuery {
	return NewStandardClient(_m.config).QueryControls(_m)
}

// QueryTrustCenterCompliances queries the "trust_center_compliances" edge of the Standard entity.
func (_m *Standard) QueryTrustCenterCompliances() *TrustCenterComplianceQuery {
	return NewStandardClient(_m.config).QueryTrustCenterCompliances(_m)
}

// Update returns a builder for updating this Standard.
// Note that you need to call Standard.Unwrap() before calling this method if this Standard
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Standard) Update() *StandardUpdateOne {
	return NewStandardClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Standard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Standard) Unwrap() *Standard {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Standard is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Standard) String() string {
	var builder strings.Builder
	builder.WriteString("Standard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(_m.Revision)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", _m.SystemOwned))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("short_name=")
	builder.WriteString(_m.ShortName)
	builder.WriteString(", ")
	builder.WriteString("framework=")
	builder.WriteString(_m.Framework)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("governing_body_logo_url=")
	builder.WriteString(_m.GoverningBodyLogoURL)
	builder.WriteString(", ")
	builder.WriteString("governing_body=")
	builder.WriteString(_m.GoverningBody)
	builder.WriteString(", ")
	builder.WriteString("domains=")
	builder.WriteString(fmt.Sprintf("%v", _m.Domains))
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(_m.Link)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("free_to_use=")
	builder.WriteString(fmt.Sprintf("%v", _m.FreeToUse))
	builder.WriteString(", ")
	builder.WriteString("standard_type=")
	builder.WriteString(_m.StandardType)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(_m.Version)
	builder.WriteByte(')')
	return builder.String()
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Standard) NamedControls(name string) ([]*Control, error) {
	if _m.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Standard) appendNamedControls(name string, edges ...*Control) {
	if _m.Edges.namedControls == nil {
		_m.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		_m.Edges.namedControls[name] = []*Control{}
	} else {
		_m.Edges.namedControls[name] = append(_m.Edges.namedControls[name], edges...)
	}
}

// NamedTrustCenterCompliances returns the TrustCenterCompliances named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Standard) NamedTrustCenterCompliances(name string) ([]*TrustCenterCompliance, error) {
	if _m.Edges.namedTrustCenterCompliances == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTrustCenterCompliances[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Standard) appendNamedTrustCenterCompliances(name string, edges ...*TrustCenterCompliance) {
	if _m.Edges.namedTrustCenterCompliances == nil {
		_m.Edges.namedTrustCenterCompliances = make(map[string][]*TrustCenterCompliance)
	}
	if len(edges) == 0 {
		_m.Edges.namedTrustCenterCompliances[name] = []*TrustCenterCompliance{}
	} else {
		_m.Edges.namedTrustCenterCompliances[name] = append(_m.Edges.namedTrustCenterCompliances[name], edges...)
	}
}

// Standards is a parsable slice of Standard.
type Standards []*Standard
