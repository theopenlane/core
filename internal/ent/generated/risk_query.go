// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// RiskQuery is the builder for querying Risk entities.
type RiskQuery struct {
	config
	ctx                    *QueryContext
	order                  []risk.OrderOption
	inters                 []Interceptor
	predicates             []predicate.Risk
	withOwner              *OrganizationQuery
	withBlockedGroups      *GroupQuery
	withEditors            *GroupQuery
	withViewers            *GroupQuery
	withControls           *ControlQuery
	withProcedures         *ProcedureQuery
	withPrograms           *ProgramQuery
	withActionPlans        *ActionPlanQuery
	withStakeholder        *GroupQuery
	withDelegate           *GroupQuery
	withFKs                bool
	loadTotal              []func(context.Context, []*Risk) error
	modifiers              []func(*sql.Selector)
	withNamedBlockedGroups map[string]*GroupQuery
	withNamedEditors       map[string]*GroupQuery
	withNamedViewers       map[string]*GroupQuery
	withNamedControls      map[string]*ControlQuery
	withNamedProcedures    map[string]*ProcedureQuery
	withNamedPrograms      map[string]*ProgramQuery
	withNamedActionPlans   map[string]*ActionPlanQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RiskQuery builder.
func (rq *RiskQuery) Where(ps ...predicate.Risk) *RiskQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit the number of records to be returned by this query.
func (rq *RiskQuery) Limit(limit int) *RiskQuery {
	rq.ctx.Limit = &limit
	return rq
}

// Offset to start from.
func (rq *RiskQuery) Offset(offset int) *RiskQuery {
	rq.ctx.Offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *RiskQuery) Unique(unique bool) *RiskQuery {
	rq.ctx.Unique = &unique
	return rq
}

// Order specifies how the records should be ordered.
func (rq *RiskQuery) Order(o ...risk.OrderOption) *RiskQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryOwner chains the current query on the "owner" edge.
func (rq *RiskQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, risk.OwnerTable, risk.OwnerColumn),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Risk
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedGroups chains the current query on the "blocked_groups" edge.
func (rq *RiskQuery) QueryBlockedGroups() *GroupQuery {
	query := (&GroupClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, risk.BlockedGroupsTable, risk.BlockedGroupsPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.RiskBlockedGroups
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEditors chains the current query on the "editors" edge.
func (rq *RiskQuery) QueryEditors() *GroupQuery {
	query := (&GroupClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, risk.EditorsTable, risk.EditorsPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.RiskEditors
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryViewers chains the current query on the "viewers" edge.
func (rq *RiskQuery) QueryViewers() *GroupQuery {
	query := (&GroupClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, risk.ViewersTable, risk.ViewersPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.RiskViewers
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (rq *RiskQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, risk.ControlsTable, risk.ControlsPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlRisks
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedures chains the current query on the "procedures" edge.
func (rq *RiskQuery) QueryProcedures() *ProcedureQuery {
	query := (&ProcedureClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, risk.ProceduresTable, risk.ProceduresPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.ProcedureRisks
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (rq *RiskQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, risk.ProgramsTable, risk.ProgramsPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramRisks
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActionPlans chains the current query on the "action_plans" edge.
func (rq *RiskQuery) QueryActionPlans() *ActionPlanQuery {
	query := (&ActionPlanClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(actionplan.Table, actionplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, risk.ActionPlansTable, risk.ActionPlansPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.RiskActionPlans
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStakeholder chains the current query on the "stakeholder" edge.
func (rq *RiskQuery) QueryStakeholder() *GroupQuery {
	query := (&GroupClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, risk.StakeholderTable, risk.StakeholderColumn),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Risk
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDelegate chains the current query on the "delegate" edge.
func (rq *RiskQuery) QueryDelegate() *GroupQuery {
	query := (&GroupClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, risk.DelegateTable, risk.DelegateColumn),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Risk
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Risk entity from the query.
// Returns a *NotFoundError when no Risk was found.
func (rq *RiskQuery) First(ctx context.Context) (*Risk, error) {
	nodes, err := rq.Limit(1).All(setContextOp(ctx, rq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{risk.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *RiskQuery) FirstX(ctx context.Context) *Risk {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Risk ID from the query.
// Returns a *NotFoundError when no Risk ID was found.
func (rq *RiskQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rq.Limit(1).IDs(setContextOp(ctx, rq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{risk.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *RiskQuery) FirstIDX(ctx context.Context) string {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Risk entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Risk entity is found.
// Returns a *NotFoundError when no Risk entities are found.
func (rq *RiskQuery) Only(ctx context.Context) (*Risk, error) {
	nodes, err := rq.Limit(2).All(setContextOp(ctx, rq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{risk.Label}
	default:
		return nil, &NotSingularError{risk.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *RiskQuery) OnlyX(ctx context.Context) *Risk {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Risk ID in the query.
// Returns a *NotSingularError when more than one Risk ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *RiskQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rq.Limit(2).IDs(setContextOp(ctx, rq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{risk.Label}
	default:
		err = &NotSingularError{risk.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *RiskQuery) OnlyIDX(ctx context.Context) string {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Risks.
func (rq *RiskQuery) All(ctx context.Context) ([]*Risk, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryAll)
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Risk, *RiskQuery]()
	return withInterceptors[[]*Risk](ctx, rq, qr, rq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rq *RiskQuery) AllX(ctx context.Context) []*Risk {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Risk IDs.
func (rq *RiskQuery) IDs(ctx context.Context) (ids []string, err error) {
	if rq.ctx.Unique == nil && rq.path != nil {
		rq.Unique(true)
	}
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryIDs)
	if err = rq.Select(risk.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *RiskQuery) IDsX(ctx context.Context) []string {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *RiskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryCount)
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rq, querierCount[*RiskQuery](), rq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rq *RiskQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *RiskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryExist)
	switch _, err := rq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *RiskQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RiskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *RiskQuery) Clone() *RiskQuery {
	if rq == nil {
		return nil
	}
	return &RiskQuery{
		config:            rq.config,
		ctx:               rq.ctx.Clone(),
		order:             append([]risk.OrderOption{}, rq.order...),
		inters:            append([]Interceptor{}, rq.inters...),
		predicates:        append([]predicate.Risk{}, rq.predicates...),
		withOwner:         rq.withOwner.Clone(),
		withBlockedGroups: rq.withBlockedGroups.Clone(),
		withEditors:       rq.withEditors.Clone(),
		withViewers:       rq.withViewers.Clone(),
		withControls:      rq.withControls.Clone(),
		withProcedures:    rq.withProcedures.Clone(),
		withPrograms:      rq.withPrograms.Clone(),
		withActionPlans:   rq.withActionPlans.Clone(),
		withStakeholder:   rq.withStakeholder.Clone(),
		withDelegate:      rq.withDelegate.Clone(),
		// clone intermediate query.
		sql:       rq.sql.Clone(),
		path:      rq.path,
		modifiers: append([]func(*sql.Selector){}, rq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithOwner(opts ...func(*OrganizationQuery)) *RiskQuery {
	query := (&OrganizationClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withOwner = query
	return rq
}

// WithBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithBlockedGroups(opts ...func(*GroupQuery)) *RiskQuery {
	query := (&GroupClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withBlockedGroups = query
	return rq
}

// WithEditors tells the query-builder to eager-load the nodes that are connected to
// the "editors" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithEditors(opts ...func(*GroupQuery)) *RiskQuery {
	query := (&GroupClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withEditors = query
	return rq
}

// WithViewers tells the query-builder to eager-load the nodes that are connected to
// the "viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithViewers(opts ...func(*GroupQuery)) *RiskQuery {
	query := (&GroupClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withViewers = query
	return rq
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithControls(opts ...func(*ControlQuery)) *RiskQuery {
	query := (&ControlClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withControls = query
	return rq
}

// WithProcedures tells the query-builder to eager-load the nodes that are connected to
// the "procedures" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithProcedures(opts ...func(*ProcedureQuery)) *RiskQuery {
	query := (&ProcedureClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withProcedures = query
	return rq
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithPrograms(opts ...func(*ProgramQuery)) *RiskQuery {
	query := (&ProgramClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withPrograms = query
	return rq
}

// WithActionPlans tells the query-builder to eager-load the nodes that are connected to
// the "action_plans" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithActionPlans(opts ...func(*ActionPlanQuery)) *RiskQuery {
	query := (&ActionPlanClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withActionPlans = query
	return rq
}

// WithStakeholder tells the query-builder to eager-load the nodes that are connected to
// the "stakeholder" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithStakeholder(opts ...func(*GroupQuery)) *RiskQuery {
	query := (&GroupClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withStakeholder = query
	return rq
}

// WithDelegate tells the query-builder to eager-load the nodes that are connected to
// the "delegate" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithDelegate(opts ...func(*GroupQuery)) *RiskQuery {
	query := (&GroupClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withDelegate = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Risk.Query().
//		GroupBy(risk.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (rq *RiskQuery) GroupBy(field string, fields ...string) *RiskGroupBy {
	rq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RiskGroupBy{build: rq}
	grbuild.flds = &rq.ctx.Fields
	grbuild.label = risk.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Risk.Query().
//		Select(risk.FieldCreatedAt).
//		Scan(ctx, &v)
func (rq *RiskQuery) Select(fields ...string) *RiskSelect {
	rq.ctx.Fields = append(rq.ctx.Fields, fields...)
	sbuild := &RiskSelect{RiskQuery: rq}
	sbuild.label = risk.Label
	sbuild.flds, sbuild.scan = &rq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RiskSelect configured with the given aggregations.
func (rq *RiskQuery) Aggregate(fns ...AggregateFunc) *RiskSelect {
	return rq.Select().Aggregate(fns...)
}

func (rq *RiskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rq); err != nil {
				return err
			}
		}
	}
	for _, f := range rq.ctx.Fields {
		if !risk.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	if risk.Policy == nil {
		return errors.New("generated: uninitialized risk.Policy (forgotten import generated/runtime?)")
	}
	if err := risk.Policy.EvalQuery(ctx, rq); err != nil {
		return err
	}
	return nil
}

func (rq *RiskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Risk, error) {
	var (
		nodes       = []*Risk{}
		withFKs     = rq.withFKs
		_spec       = rq.querySpec()
		loadedTypes = [10]bool{
			rq.withOwner != nil,
			rq.withBlockedGroups != nil,
			rq.withEditors != nil,
			rq.withViewers != nil,
			rq.withControls != nil,
			rq.withProcedures != nil,
			rq.withPrograms != nil,
			rq.withActionPlans != nil,
			rq.withStakeholder != nil,
			rq.withDelegate != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, risk.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Risk).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Risk{config: rq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = rq.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, rq.schemaConfig)
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rq.withOwner; query != nil {
		if err := rq.loadOwner(ctx, query, nodes, nil,
			func(n *Risk, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withBlockedGroups; query != nil {
		if err := rq.loadBlockedGroups(ctx, query, nodes,
			func(n *Risk) { n.Edges.BlockedGroups = []*Group{} },
			func(n *Risk, e *Group) { n.Edges.BlockedGroups = append(n.Edges.BlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withEditors; query != nil {
		if err := rq.loadEditors(ctx, query, nodes,
			func(n *Risk) { n.Edges.Editors = []*Group{} },
			func(n *Risk, e *Group) { n.Edges.Editors = append(n.Edges.Editors, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withViewers; query != nil {
		if err := rq.loadViewers(ctx, query, nodes,
			func(n *Risk) { n.Edges.Viewers = []*Group{} },
			func(n *Risk, e *Group) { n.Edges.Viewers = append(n.Edges.Viewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withControls; query != nil {
		if err := rq.loadControls(ctx, query, nodes,
			func(n *Risk) { n.Edges.Controls = []*Control{} },
			func(n *Risk, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withProcedures; query != nil {
		if err := rq.loadProcedures(ctx, query, nodes,
			func(n *Risk) { n.Edges.Procedures = []*Procedure{} },
			func(n *Risk, e *Procedure) { n.Edges.Procedures = append(n.Edges.Procedures, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withPrograms; query != nil {
		if err := rq.loadPrograms(ctx, query, nodes,
			func(n *Risk) { n.Edges.Programs = []*Program{} },
			func(n *Risk, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withActionPlans; query != nil {
		if err := rq.loadActionPlans(ctx, query, nodes,
			func(n *Risk) { n.Edges.ActionPlans = []*ActionPlan{} },
			func(n *Risk, e *ActionPlan) { n.Edges.ActionPlans = append(n.Edges.ActionPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withStakeholder; query != nil {
		if err := rq.loadStakeholder(ctx, query, nodes, nil,
			func(n *Risk, e *Group) { n.Edges.Stakeholder = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withDelegate; query != nil {
		if err := rq.loadDelegate(ctx, query, nodes, nil,
			func(n *Risk, e *Group) { n.Edges.Delegate = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedBlockedGroups {
		if err := rq.loadBlockedGroups(ctx, query, nodes,
			func(n *Risk) { n.appendNamedBlockedGroups(name) },
			func(n *Risk, e *Group) { n.appendNamedBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedEditors {
		if err := rq.loadEditors(ctx, query, nodes,
			func(n *Risk) { n.appendNamedEditors(name) },
			func(n *Risk, e *Group) { n.appendNamedEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedViewers {
		if err := rq.loadViewers(ctx, query, nodes,
			func(n *Risk) { n.appendNamedViewers(name) },
			func(n *Risk, e *Group) { n.appendNamedViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedControls {
		if err := rq.loadControls(ctx, query, nodes,
			func(n *Risk) { n.appendNamedControls(name) },
			func(n *Risk, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedProcedures {
		if err := rq.loadProcedures(ctx, query, nodes,
			func(n *Risk) { n.appendNamedProcedures(name) },
			func(n *Risk, e *Procedure) { n.appendNamedProcedures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedPrograms {
		if err := rq.loadPrograms(ctx, query, nodes,
			func(n *Risk) { n.appendNamedPrograms(name) },
			func(n *Risk, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedActionPlans {
		if err := rq.loadActionPlans(ctx, query, nodes,
			func(n *Risk) { n.appendNamedActionPlans(name) },
			func(n *Risk, e *ActionPlan) { n.appendNamedActionPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range rq.loadTotal {
		if err := rq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rq *RiskQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Risk)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadBlockedGroups(ctx context.Context, query *GroupQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.BlockedGroupsTable)
		joinT.Schema(rq.schemaConfig.RiskBlockedGroups)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(risk.BlockedGroupsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(risk.BlockedGroupsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.BlockedGroupsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadEditors(ctx context.Context, query *GroupQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.EditorsTable)
		joinT.Schema(rq.schemaConfig.RiskEditors)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(risk.EditorsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(risk.EditorsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.EditorsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadViewers(ctx context.Context, query *GroupQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ViewersTable)
		joinT.Schema(rq.schemaConfig.RiskViewers)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(risk.ViewersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(risk.ViewersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ViewersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ControlsTable)
		joinT.Schema(rq.schemaConfig.ControlRisks)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(risk.ControlsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(risk.ControlsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ControlsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadProcedures(ctx context.Context, query *ProcedureQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Procedure)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ProceduresTable)
		joinT.Schema(rq.schemaConfig.ProcedureRisks)
		s.Join(joinT).On(s.C(procedure.FieldID), joinT.C(risk.ProceduresPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(risk.ProceduresPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ProceduresPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Procedure](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "procedures" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ProgramsTable)
		joinT.Schema(rq.schemaConfig.ProgramRisks)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(risk.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(risk.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadActionPlans(ctx context.Context, query *ActionPlanQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *ActionPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ActionPlansTable)
		joinT.Schema(rq.schemaConfig.RiskActionPlans)
		s.Join(joinT).On(s.C(actionplan.FieldID), joinT.C(risk.ActionPlansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(risk.ActionPlansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ActionPlansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ActionPlan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "action_plans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadStakeholder(ctx context.Context, query *GroupQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Group)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Risk)
	for i := range nodes {
		fk := nodes[i].StakeholderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "stakeholder_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadDelegate(ctx context.Context, query *GroupQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Group)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Risk)
	for i := range nodes {
		fk := nodes[i].DelegateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delegate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rq *RiskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	_spec.Node.Schema = rq.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, rq.schemaConfig)
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	_spec.Node.Columns = rq.ctx.Fields
	if len(rq.ctx.Fields) > 0 {
		_spec.Unique = rq.ctx.Unique != nil && *rq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *RiskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	_spec.From = rq.sql
	if unique := rq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rq.path != nil {
		_spec.Unique = true
	}
	if fields := rq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, risk.FieldID)
		for i := range fields {
			if fields[i] != risk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rq.withOwner != nil {
			_spec.Node.AddColumnOnce(risk.FieldOwnerID)
		}
		if rq.withStakeholder != nil {
			_spec.Node.AddColumnOnce(risk.FieldStakeholderID)
		}
		if rq.withDelegate != nil {
			_spec.Node.AddColumnOnce(risk.FieldDelegateID)
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *RiskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(risk.Table)
	columns := rq.ctx.Fields
	if len(columns) == 0 {
		columns = risk.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.ctx.Unique != nil && *rq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(rq.schemaConfig.Risk)
	ctx = internal.NewSchemaConfigContext(ctx, rq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range rq.modifiers {
		m(selector)
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rq *RiskQuery) Modify(modifiers ...func(s *sql.Selector)) *RiskSelect {
	rq.modifiers = append(rq.modifiers, modifiers...)
	return rq.Select()
}

// WithNamedBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedBlockedGroups(name string, opts ...func(*GroupQuery)) *RiskQuery {
	query := (&GroupClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedBlockedGroups == nil {
		rq.withNamedBlockedGroups = make(map[string]*GroupQuery)
	}
	rq.withNamedBlockedGroups[name] = query
	return rq
}

// WithNamedEditors tells the query-builder to eager-load the nodes that are connected to the "editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedEditors(name string, opts ...func(*GroupQuery)) *RiskQuery {
	query := (&GroupClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedEditors == nil {
		rq.withNamedEditors = make(map[string]*GroupQuery)
	}
	rq.withNamedEditors[name] = query
	return rq
}

// WithNamedViewers tells the query-builder to eager-load the nodes that are connected to the "viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedViewers(name string, opts ...func(*GroupQuery)) *RiskQuery {
	query := (&GroupClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedViewers == nil {
		rq.withNamedViewers = make(map[string]*GroupQuery)
	}
	rq.withNamedViewers[name] = query
	return rq
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *RiskQuery {
	query := (&ControlClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedControls == nil {
		rq.withNamedControls = make(map[string]*ControlQuery)
	}
	rq.withNamedControls[name] = query
	return rq
}

// WithNamedProcedures tells the query-builder to eager-load the nodes that are connected to the "procedures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedProcedures(name string, opts ...func(*ProcedureQuery)) *RiskQuery {
	query := (&ProcedureClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedProcedures == nil {
		rq.withNamedProcedures = make(map[string]*ProcedureQuery)
	}
	rq.withNamedProcedures[name] = query
	return rq
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *RiskQuery {
	query := (&ProgramClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedPrograms == nil {
		rq.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	rq.withNamedPrograms[name] = query
	return rq
}

// WithNamedActionPlans tells the query-builder to eager-load the nodes that are connected to the "action_plans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedActionPlans(name string, opts ...func(*ActionPlanQuery)) *RiskQuery {
	query := (&ActionPlanClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedActionPlans == nil {
		rq.withNamedActionPlans = make(map[string]*ActionPlanQuery)
	}
	rq.withNamedActionPlans[name] = query
	return rq
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (rq *RiskQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryIDs)
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return rq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, rq, qr, rq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// RiskGroupBy is the group-by builder for Risk entities.
type RiskGroupBy struct {
	selector
	build *RiskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *RiskGroupBy) Aggregate(fns ...AggregateFunc) *RiskGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the selector query and scans the result into the given value.
func (rgb *RiskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rgb.build.ctx, ent.OpQueryGroupBy)
	if err := rgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RiskQuery, *RiskGroupBy](ctx, rgb.build, rgb, rgb.build.inters, v)
}

func (rgb *RiskGroupBy) sqlScan(ctx context.Context, root *RiskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rgb.flds)+len(rgb.fns))
		for _, f := range *rgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RiskSelect is the builder for selecting fields of Risk entities.
type RiskSelect struct {
	*RiskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rs *RiskSelect) Aggregate(fns ...AggregateFunc) *RiskSelect {
	rs.fns = append(rs.fns, fns...)
	return rs
}

// Scan applies the selector query and scans the result into the given value.
func (rs *RiskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rs.ctx, ent.OpQuerySelect)
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RiskQuery, *RiskSelect](ctx, rs.RiskQuery, rs, rs.inters, v)
}

func (rs *RiskSelect) sqlScan(ctx context.Context, root *RiskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rs.fns))
	for _, fn := range rs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rs *RiskSelect) Modify(modifiers ...func(s *sql.Selector)) *RiskSelect {
	rs.modifiers = append(rs.modifiers, modifiers...)
	return rs
}
