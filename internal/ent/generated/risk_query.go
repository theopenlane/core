// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// RiskQuery is the builder for querying Risk entities.
type RiskQuery struct {
	config
	ctx                  *QueryContext
	order                []risk.OrderOption
	inters               []Interceptor
	predicates           []predicate.Risk
	withControl          *ControlQuery
	withProcedure        *ProcedureQuery
	withActionplans      *ActionPlanQuery
	withProgram          *ProgramQuery
	withFKs              bool
	loadTotal            []func(context.Context, []*Risk) error
	modifiers            []func(*sql.Selector)
	withNamedControl     map[string]*ControlQuery
	withNamedProcedure   map[string]*ProcedureQuery
	withNamedActionplans map[string]*ActionPlanQuery
	withNamedProgram     map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RiskQuery builder.
func (rq *RiskQuery) Where(ps ...predicate.Risk) *RiskQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit the number of records to be returned by this query.
func (rq *RiskQuery) Limit(limit int) *RiskQuery {
	rq.ctx.Limit = &limit
	return rq
}

// Offset to start from.
func (rq *RiskQuery) Offset(offset int) *RiskQuery {
	rq.ctx.Offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *RiskQuery) Unique(unique bool) *RiskQuery {
	rq.ctx.Unique = &unique
	return rq
}

// Order specifies how the records should be ordered.
func (rq *RiskQuery) Order(o ...risk.OrderOption) *RiskQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryControl chains the current query on the "control" edge.
func (rq *RiskQuery) QueryControl() *ControlQuery {
	query := (&ControlClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, risk.ControlTable, risk.ControlPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlRisks
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedure chains the current query on the "procedure" edge.
func (rq *RiskQuery) QueryProcedure() *ProcedureQuery {
	query := (&ProcedureClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, risk.ProcedureTable, risk.ProcedurePrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.ProcedureRisks
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActionplans chains the current query on the "actionplans" edge.
func (rq *RiskQuery) QueryActionplans() *ActionPlanQuery {
	query := (&ActionPlanClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(actionplan.Table, actionplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, risk.ActionplansTable, risk.ActionplansPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.RiskActionplans
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgram chains the current query on the "program" edge.
func (rq *RiskQuery) QueryProgram() *ProgramQuery {
	query := (&ProgramClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(risk.Table, risk.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, risk.ProgramTable, risk.ProgramPrimaryKey...),
		)
		schemaConfig := rq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramRisks
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Risk entity from the query.
// Returns a *NotFoundError when no Risk was found.
func (rq *RiskQuery) First(ctx context.Context) (*Risk, error) {
	nodes, err := rq.Limit(1).All(setContextOp(ctx, rq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{risk.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *RiskQuery) FirstX(ctx context.Context) *Risk {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Risk ID from the query.
// Returns a *NotFoundError when no Risk ID was found.
func (rq *RiskQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rq.Limit(1).IDs(setContextOp(ctx, rq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{risk.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *RiskQuery) FirstIDX(ctx context.Context) string {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Risk entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Risk entity is found.
// Returns a *NotFoundError when no Risk entities are found.
func (rq *RiskQuery) Only(ctx context.Context) (*Risk, error) {
	nodes, err := rq.Limit(2).All(setContextOp(ctx, rq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{risk.Label}
	default:
		return nil, &NotSingularError{risk.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *RiskQuery) OnlyX(ctx context.Context) *Risk {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Risk ID in the query.
// Returns a *NotSingularError when more than one Risk ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *RiskQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rq.Limit(2).IDs(setContextOp(ctx, rq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{risk.Label}
	default:
		err = &NotSingularError{risk.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *RiskQuery) OnlyIDX(ctx context.Context) string {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Risks.
func (rq *RiskQuery) All(ctx context.Context) ([]*Risk, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryAll)
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Risk, *RiskQuery]()
	return withInterceptors[[]*Risk](ctx, rq, qr, rq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rq *RiskQuery) AllX(ctx context.Context) []*Risk {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Risk IDs.
func (rq *RiskQuery) IDs(ctx context.Context) (ids []string, err error) {
	if rq.ctx.Unique == nil && rq.path != nil {
		rq.Unique(true)
	}
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryIDs)
	if err = rq.Select(risk.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *RiskQuery) IDsX(ctx context.Context) []string {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *RiskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryCount)
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rq, querierCount[*RiskQuery](), rq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rq *RiskQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *RiskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryExist)
	switch _, err := rq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *RiskQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RiskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *RiskQuery) Clone() *RiskQuery {
	if rq == nil {
		return nil
	}
	return &RiskQuery{
		config:          rq.config,
		ctx:             rq.ctx.Clone(),
		order:           append([]risk.OrderOption{}, rq.order...),
		inters:          append([]Interceptor{}, rq.inters...),
		predicates:      append([]predicate.Risk{}, rq.predicates...),
		withControl:     rq.withControl.Clone(),
		withProcedure:   rq.withProcedure.Clone(),
		withActionplans: rq.withActionplans.Clone(),
		withProgram:     rq.withProgram.Clone(),
		// clone intermediate query.
		sql:       rq.sql.Clone(),
		path:      rq.path,
		modifiers: append([]func(*sql.Selector){}, rq.modifiers...),
	}
}

// WithControl tells the query-builder to eager-load the nodes that are connected to
// the "control" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithControl(opts ...func(*ControlQuery)) *RiskQuery {
	query := (&ControlClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withControl = query
	return rq
}

// WithProcedure tells the query-builder to eager-load the nodes that are connected to
// the "procedure" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithProcedure(opts ...func(*ProcedureQuery)) *RiskQuery {
	query := (&ProcedureClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withProcedure = query
	return rq
}

// WithActionplans tells the query-builder to eager-load the nodes that are connected to
// the "actionplans" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithActionplans(opts ...func(*ActionPlanQuery)) *RiskQuery {
	query := (&ActionPlanClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withActionplans = query
	return rq
}

// WithProgram tells the query-builder to eager-load the nodes that are connected to
// the "program" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithProgram(opts ...func(*ProgramQuery)) *RiskQuery {
	query := (&ProgramClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withProgram = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Risk.Query().
//		GroupBy(risk.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (rq *RiskQuery) GroupBy(field string, fields ...string) *RiskGroupBy {
	rq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RiskGroupBy{build: rq}
	grbuild.flds = &rq.ctx.Fields
	grbuild.label = risk.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Risk.Query().
//		Select(risk.FieldCreatedAt).
//		Scan(ctx, &v)
func (rq *RiskQuery) Select(fields ...string) *RiskSelect {
	rq.ctx.Fields = append(rq.ctx.Fields, fields...)
	sbuild := &RiskSelect{RiskQuery: rq}
	sbuild.label = risk.Label
	sbuild.flds, sbuild.scan = &rq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RiskSelect configured with the given aggregations.
func (rq *RiskQuery) Aggregate(fns ...AggregateFunc) *RiskSelect {
	return rq.Select().Aggregate(fns...)
}

func (rq *RiskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rq); err != nil {
				return err
			}
		}
	}
	for _, f := range rq.ctx.Fields {
		if !risk.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	return nil
}

func (rq *RiskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Risk, error) {
	var (
		nodes       = []*Risk{}
		withFKs     = rq.withFKs
		_spec       = rq.querySpec()
		loadedTypes = [4]bool{
			rq.withControl != nil,
			rq.withProcedure != nil,
			rq.withActionplans != nil,
			rq.withProgram != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, risk.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Risk).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Risk{config: rq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = rq.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, rq.schemaConfig)
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rq.withControl; query != nil {
		if err := rq.loadControl(ctx, query, nodes,
			func(n *Risk) { n.Edges.Control = []*Control{} },
			func(n *Risk, e *Control) { n.Edges.Control = append(n.Edges.Control, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withProcedure; query != nil {
		if err := rq.loadProcedure(ctx, query, nodes,
			func(n *Risk) { n.Edges.Procedure = []*Procedure{} },
			func(n *Risk, e *Procedure) { n.Edges.Procedure = append(n.Edges.Procedure, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withActionplans; query != nil {
		if err := rq.loadActionplans(ctx, query, nodes,
			func(n *Risk) { n.Edges.Actionplans = []*ActionPlan{} },
			func(n *Risk, e *ActionPlan) { n.Edges.Actionplans = append(n.Edges.Actionplans, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withProgram; query != nil {
		if err := rq.loadProgram(ctx, query, nodes,
			func(n *Risk) { n.Edges.Program = []*Program{} },
			func(n *Risk, e *Program) { n.Edges.Program = append(n.Edges.Program, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedControl {
		if err := rq.loadControl(ctx, query, nodes,
			func(n *Risk) { n.appendNamedControl(name) },
			func(n *Risk, e *Control) { n.appendNamedControl(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedProcedure {
		if err := rq.loadProcedure(ctx, query, nodes,
			func(n *Risk) { n.appendNamedProcedure(name) },
			func(n *Risk, e *Procedure) { n.appendNamedProcedure(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedActionplans {
		if err := rq.loadActionplans(ctx, query, nodes,
			func(n *Risk) { n.appendNamedActionplans(name) },
			func(n *Risk, e *ActionPlan) { n.appendNamedActionplans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedProgram {
		if err := rq.loadProgram(ctx, query, nodes,
			func(n *Risk) { n.appendNamedProgram(name) },
			func(n *Risk, e *Program) { n.appendNamedProgram(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range rq.loadTotal {
		if err := rq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rq *RiskQuery) loadControl(ctx context.Context, query *ControlQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ControlTable)
		joinT.Schema(rq.schemaConfig.ControlRisks)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(risk.ControlPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(risk.ControlPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ControlPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadProcedure(ctx context.Context, query *ProcedureQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Procedure)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ProcedureTable)
		joinT.Schema(rq.schemaConfig.ProcedureRisks)
		s.Join(joinT).On(s.C(procedure.FieldID), joinT.C(risk.ProcedurePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(risk.ProcedurePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ProcedurePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Procedure](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "procedure" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadActionplans(ctx context.Context, query *ActionPlanQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *ActionPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ActionplansTable)
		joinT.Schema(rq.schemaConfig.RiskActionplans)
		s.Join(joinT).On(s.C(actionplan.FieldID), joinT.C(risk.ActionplansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(risk.ActionplansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ActionplansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ActionPlan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "actionplans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RiskQuery) loadProgram(ctx context.Context, query *ProgramQuery, nodes []*Risk, init func(*Risk), assign func(*Risk, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Risk)
	nids := make(map[string]map[*Risk]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(risk.ProgramTable)
		joinT.Schema(rq.schemaConfig.ProgramRisks)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(risk.ProgramPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(risk.ProgramPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(risk.ProgramPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Risk]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "program" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (rq *RiskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	_spec.Node.Schema = rq.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, rq.schemaConfig)
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	_spec.Node.Columns = rq.ctx.Fields
	if len(rq.ctx.Fields) > 0 {
		_spec.Unique = rq.ctx.Unique != nil && *rq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *RiskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	_spec.From = rq.sql
	if unique := rq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rq.path != nil {
		_spec.Unique = true
	}
	if fields := rq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, risk.FieldID)
		for i := range fields {
			if fields[i] != risk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *RiskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(risk.Table)
	columns := rq.ctx.Fields
	if len(columns) == 0 {
		columns = risk.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.ctx.Unique != nil && *rq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(rq.schemaConfig.Risk)
	ctx = internal.NewSchemaConfigContext(ctx, rq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range rq.modifiers {
		m(selector)
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rq *RiskQuery) Modify(modifiers ...func(s *sql.Selector)) *RiskSelect {
	rq.modifiers = append(rq.modifiers, modifiers...)
	return rq.Select()
}

// WithNamedControl tells the query-builder to eager-load the nodes that are connected to the "control"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedControl(name string, opts ...func(*ControlQuery)) *RiskQuery {
	query := (&ControlClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedControl == nil {
		rq.withNamedControl = make(map[string]*ControlQuery)
	}
	rq.withNamedControl[name] = query
	return rq
}

// WithNamedProcedure tells the query-builder to eager-load the nodes that are connected to the "procedure"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedProcedure(name string, opts ...func(*ProcedureQuery)) *RiskQuery {
	query := (&ProcedureClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedProcedure == nil {
		rq.withNamedProcedure = make(map[string]*ProcedureQuery)
	}
	rq.withNamedProcedure[name] = query
	return rq
}

// WithNamedActionplans tells the query-builder to eager-load the nodes that are connected to the "actionplans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedActionplans(name string, opts ...func(*ActionPlanQuery)) *RiskQuery {
	query := (&ActionPlanClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedActionplans == nil {
		rq.withNamedActionplans = make(map[string]*ActionPlanQuery)
	}
	rq.withNamedActionplans[name] = query
	return rq
}

// WithNamedProgram tells the query-builder to eager-load the nodes that are connected to the "program"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RiskQuery) WithNamedProgram(name string, opts ...func(*ProgramQuery)) *RiskQuery {
	query := (&ProgramClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedProgram == nil {
		rq.withNamedProgram = make(map[string]*ProgramQuery)
	}
	rq.withNamedProgram[name] = query
	return rq
}

// RiskGroupBy is the group-by builder for Risk entities.
type RiskGroupBy struct {
	selector
	build *RiskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *RiskGroupBy) Aggregate(fns ...AggregateFunc) *RiskGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the selector query and scans the result into the given value.
func (rgb *RiskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rgb.build.ctx, ent.OpQueryGroupBy)
	if err := rgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RiskQuery, *RiskGroupBy](ctx, rgb.build, rgb, rgb.build.inters, v)
}

func (rgb *RiskGroupBy) sqlScan(ctx context.Context, root *RiskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rgb.flds)+len(rgb.fns))
		for _, f := range *rgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RiskSelect is the builder for selecting fields of Risk entities.
type RiskSelect struct {
	*RiskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rs *RiskSelect) Aggregate(fns ...AggregateFunc) *RiskSelect {
	rs.fns = append(rs.fns, fns...)
	return rs
}

// Scan applies the selector query and scans the result into the given value.
func (rs *RiskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rs.ctx, ent.OpQuerySelect)
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RiskQuery, *RiskSelect](ctx, rs.RiskQuery, rs, rs.inters, v)
}

func (rs *RiskSelect) sqlScan(ctx context.Context, root *RiskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rs.fns))
	for _, fn := range rs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rs *RiskSelect) Modify(modifiers ...func(s *sql.Selector)) *RiskSelect {
	rs.modifiers = append(rs.modifiers, modifiers...)
	return rs
}
