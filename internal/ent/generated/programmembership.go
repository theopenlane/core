// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// ProgramMembership is the model entity for the ProgramMembership schema.
type ProgramMembership struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID string `json:"created_by_id,omitempty"`
	// UpdatedByID holds the value of the "updated_by_id" field.
	UpdatedByID string `json:"updated_by_id,omitempty"`
	// CreatedByUserID holds the value of the "created_by_user_id" field.
	CreatedByUserID string `json:"created_by_user_id,omitempty"`
	// UpdatedByUserID holds the value of the "updated_by_user_id" field.
	UpdatedByUserID string `json:"updated_by_user_id,omitempty"`
	// CreatedByServiceID holds the value of the "created_by_service_id" field.
	CreatedByServiceID string `json:"created_by_service_id,omitempty"`
	// UpdatedByServiceID holds the value of the "updated_by_service_id" field.
	UpdatedByServiceID string `json:"updated_by_service_id,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedByID holds the value of the "deleted_by_id" field.
	DeletedByID string `json:"deleted_by_id,omitempty"`
	// Role holds the value of the "role" field.
	Role enums.Role `json:"role,omitempty"`
	// ProgramID holds the value of the "program_id" field.
	ProgramID string `json:"program_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramMembershipQuery when eager-loading is set.
	Edges        ProgramMembershipEdges `json:"edges"`
	selectValues sql.SelectValues

	// CreatedBy includes the details about the user or service that created the object
	CreatedBy models.Actor `json:"created_by,omitempty"`
	// UpdatedBy includes the details about the user or service that last updated the object
	UpdatedBy models.Actor `json:"updated_by,omitempty"`
}

// ProgramMembershipEdges holds the relations/edges for other nodes in the graph.
type ProgramMembershipEdges struct {
	// CreatedByUser holds the value of the created_by_user edge.
	CreatedByUser *User `json:"created_by_user,omitempty"`
	// UpdatedByUser holds the value of the updated_by_user edge.
	UpdatedByUser *User `json:"updated_by_user,omitempty"`
	// CreatedByService holds the value of the created_by_service edge.
	CreatedByService *APIToken `json:"created_by_service,omitempty"`
	// UpdatedByService holds the value of the updated_by_service edge.
	UpdatedByService *APIToken `json:"updated_by_service,omitempty"`
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int
}

// CreatedByUserOrErr returns the CreatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) CreatedByUserOrErr() (*User, error) {
	if e.CreatedByUser != nil {
		return e.CreatedByUser, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_user"}
}

// UpdatedByUserOrErr returns the UpdatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) UpdatedByUserOrErr() (*User, error) {
	if e.UpdatedByUser != nil {
		return e.UpdatedByUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by_user"}
}

// CreatedByServiceOrErr returns the CreatedByService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) CreatedByServiceOrErr() (*APIToken, error) {
	if e.CreatedByService != nil {
		return e.CreatedByService, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: apitoken.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_service"}
}

// UpdatedByServiceOrErr returns the UpdatedByService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) UpdatedByServiceOrErr() (*APIToken, error) {
	if e.UpdatedByService != nil {
		return e.UpdatedByService, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: apitoken.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by_service"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramMembership) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programmembership.FieldID, programmembership.FieldCreatedByID, programmembership.FieldUpdatedByID, programmembership.FieldCreatedByUserID, programmembership.FieldUpdatedByUserID, programmembership.FieldCreatedByServiceID, programmembership.FieldUpdatedByServiceID, programmembership.FieldMappingID, programmembership.FieldDeletedByID, programmembership.FieldRole, programmembership.FieldProgramID, programmembership.FieldUserID:
			values[i] = new(sql.NullString)
		case programmembership.FieldCreatedAt, programmembership.FieldUpdatedAt, programmembership.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramMembership fields.
func (pm *ProgramMembership) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programmembership.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pm.ID = value.String
			}
		case programmembership.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case programmembership.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case programmembership.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				pm.CreatedByID = value.String
			}
		case programmembership.FieldUpdatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_id", values[i])
			} else if value.Valid {
				pm.UpdatedByID = value.String
			}
		case programmembership.FieldCreatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_id", values[i])
			} else if value.Valid {
				pm.CreatedByUserID = value.String
			}
		case programmembership.FieldUpdatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_user_id", values[i])
			} else if value.Valid {
				pm.UpdatedByUserID = value.String
			}
		case programmembership.FieldCreatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_service_id", values[i])
			} else if value.Valid {
				pm.CreatedByServiceID = value.String
			}
		case programmembership.FieldUpdatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_service_id", values[i])
			} else if value.Valid {
				pm.UpdatedByServiceID = value.String
			}
		case programmembership.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				pm.MappingID = value.String
			}
		case programmembership.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pm.DeletedAt = value.Time
			}
		case programmembership.FieldDeletedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by_id", values[i])
			} else if value.Valid {
				pm.DeletedByID = value.String
			}
		case programmembership.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				pm.Role = enums.Role(value.String)
			}
		case programmembership.FieldProgramID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program_id", values[i])
			} else if value.Valid {
				pm.ProgramID = value.String
			}
		case programmembership.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pm.UserID = value.String
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramMembership.
// This includes values selected through modifiers, order, etc.
func (pm *ProgramMembership) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryCreatedByUser queries the "created_by_user" edge of the ProgramMembership entity.
func (pm *ProgramMembership) QueryCreatedByUser() *UserQuery {
	return NewProgramMembershipClient(pm.config).QueryCreatedByUser(pm)
}

// QueryUpdatedByUser queries the "updated_by_user" edge of the ProgramMembership entity.
func (pm *ProgramMembership) QueryUpdatedByUser() *UserQuery {
	return NewProgramMembershipClient(pm.config).QueryUpdatedByUser(pm)
}

// QueryCreatedByService queries the "created_by_service" edge of the ProgramMembership entity.
func (pm *ProgramMembership) QueryCreatedByService() *APITokenQuery {
	return NewProgramMembershipClient(pm.config).QueryCreatedByService(pm)
}

// QueryUpdatedByService queries the "updated_by_service" edge of the ProgramMembership entity.
func (pm *ProgramMembership) QueryUpdatedByService() *APITokenQuery {
	return NewProgramMembershipClient(pm.config).QueryUpdatedByService(pm)
}

// QueryProgram queries the "program" edge of the ProgramMembership entity.
func (pm *ProgramMembership) QueryProgram() *ProgramQuery {
	return NewProgramMembershipClient(pm.config).QueryProgram(pm)
}

// QueryUser queries the "user" edge of the ProgramMembership entity.
func (pm *ProgramMembership) QueryUser() *UserQuery {
	return NewProgramMembershipClient(pm.config).QueryUser(pm)
}

// Update returns a builder for updating this ProgramMembership.
// Note that you need to call ProgramMembership.Unwrap() before calling this method if this ProgramMembership
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *ProgramMembership) Update() *ProgramMembershipUpdateOne {
	return NewProgramMembershipClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the ProgramMembership entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *ProgramMembership) Unwrap() *ProgramMembership {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProgramMembership is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *ProgramMembership) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramMembership(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by_id=")
	builder.WriteString(pm.CreatedByID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_id=")
	builder.WriteString(pm.UpdatedByID)
	builder.WriteString(", ")
	builder.WriteString("created_by_user_id=")
	builder.WriteString(pm.CreatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_user_id=")
	builder.WriteString(pm.UpdatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("created_by_service_id=")
	builder.WriteString(pm.CreatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_service_id=")
	builder.WriteString(pm.UpdatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(pm.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pm.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by_id=")
	builder.WriteString(pm.DeletedByID)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", pm.Role))
	builder.WriteString(", ")
	builder.WriteString("program_id=")
	builder.WriteString(pm.ProgramID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(pm.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// ProgramMemberships is a parsable slice of ProgramMembership.
type ProgramMemberships []*ProgramMembership
