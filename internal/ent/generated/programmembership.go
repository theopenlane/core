// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// ProgramMembership is the model entity for the ProgramMembership schema.
type ProgramMembership struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Role holds the value of the "role" field.
	Role enums.Role `json:"role,omitempty"`
	// ProgramID holds the value of the "program_id" field.
	ProgramID string `json:"program_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramMembershipQuery when eager-loading is set.
	Edges                             ProgramMembershipEdges `json:"edges"`
	program_membership_org_membership *string
	selectValues                      sql.SelectValues
}

// ProgramMembershipEdges holds the relations/edges for other nodes in the graph.
type ProgramMembershipEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// OrgMembership holds the value of the org_membership edge.
	OrgMembership *OrgMembership `json:"org_membership,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrgMembershipOrErr returns the OrgMembership value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramMembershipEdges) OrgMembershipOrErr() (*OrgMembership, error) {
	if e.OrgMembership != nil {
		return e.OrgMembership, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: orgmembership.Label}
	}
	return nil, &NotLoadedError{edge: "org_membership"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramMembership) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programmembership.FieldID, programmembership.FieldCreatedBy, programmembership.FieldUpdatedBy, programmembership.FieldRole, programmembership.FieldProgramID, programmembership.FieldUserID:
			values[i] = new(sql.NullString)
		case programmembership.FieldCreatedAt, programmembership.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case programmembership.ForeignKeys[0]: // program_membership_org_membership
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramMembership fields.
func (_m *ProgramMembership) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programmembership.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case programmembership.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case programmembership.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case programmembership.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case programmembership.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case programmembership.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				_m.Role = enums.Role(value.String)
			}
		case programmembership.FieldProgramID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program_id", values[i])
			} else if value.Valid {
				_m.ProgramID = value.String
			}
		case programmembership.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case programmembership.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program_membership_org_membership", values[i])
			} else if value.Valid {
				_m.program_membership_org_membership = new(string)
				*_m.program_membership_org_membership = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramMembership.
// This includes values selected through modifiers, order, etc.
func (_m *ProgramMembership) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the ProgramMembership entity.
func (_m *ProgramMembership) QueryProgram() *ProgramQuery {
	return NewProgramMembershipClient(_m.config).QueryProgram(_m)
}

// QueryUser queries the "user" edge of the ProgramMembership entity.
func (_m *ProgramMembership) QueryUser() *UserQuery {
	return NewProgramMembershipClient(_m.config).QueryUser(_m)
}

// QueryOrgMembership queries the "org_membership" edge of the ProgramMembership entity.
func (_m *ProgramMembership) QueryOrgMembership() *OrgMembershipQuery {
	return NewProgramMembershipClient(_m.config).QueryOrgMembership(_m)
}

// Update returns a builder for updating this ProgramMembership.
// Note that you need to call ProgramMembership.Unwrap() before calling this method if this ProgramMembership
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ProgramMembership) Update() *ProgramMembershipUpdateOne {
	return NewProgramMembershipClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ProgramMembership entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ProgramMembership) Unwrap() *ProgramMembership {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProgramMembership is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ProgramMembership) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramMembership(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", _m.Role))
	builder.WriteString(", ")
	builder.WriteString("program_id=")
	builder.WriteString(_m.ProgramID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// ProgramMemberships is a parsable slice of ProgramMembership.
type ProgramMemberships []*ProgramMembership
