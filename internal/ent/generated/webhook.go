// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/webhook"
)

// Webhook is the model entity for the Webhook schema.
type Webhook struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the webhook
	Name string `json:"name,omitempty"`
	// a description of the webhook
	Description string `json:"description,omitempty"`
	// the url to send the webhook to
	DestinationURL string `json:"destination_url,omitempty"`
	// indicates if the webhook is active and enabled
	Enabled bool `json:"enabled,omitempty"`
	// the call back string
	Callback string `json:"callback,omitempty"`
	// the ttl of the webhook delivery
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// the comparison secret to verify the token's signature
	Secret []byte `json:"secret,omitempty"`
	// the number of failures
	Failures int `json:"failures,omitempty"`
	// the last error message
	LastError string `json:"last_error,omitempty"`
	// the last response
	LastResponse string `json:"last_response,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WebhookQuery when eager-loading is set.
	Edges        WebhookEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WebhookEdges holds the relations/edges for other nodes in the graph.
type WebhookEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Integrations holds the value of the integrations edge.
	Integrations []*Integration `json:"integrations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedEvents       map[string][]*Event
	namedIntegrations map[string][]*Integration
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WebhookEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e WebhookEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e WebhookEdges) IntegrationsOrErr() ([]*Integration, error) {
	if e.loadedTypes[2] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Webhook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webhook.FieldTags, webhook.FieldSecret:
			values[i] = new([]byte)
		case webhook.FieldEnabled:
			values[i] = new(sql.NullBool)
		case webhook.FieldFailures:
			values[i] = new(sql.NullInt64)
		case webhook.FieldID, webhook.FieldCreatedBy, webhook.FieldUpdatedBy, webhook.FieldMappingID, webhook.FieldDeletedBy, webhook.FieldOwnerID, webhook.FieldName, webhook.FieldDescription, webhook.FieldDestinationURL, webhook.FieldCallback, webhook.FieldLastError, webhook.FieldLastResponse:
			values[i] = new(sql.NullString)
		case webhook.FieldCreatedAt, webhook.FieldUpdatedAt, webhook.FieldDeletedAt, webhook.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Webhook fields.
func (w *Webhook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webhook.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				w.ID = value.String
			}
		case webhook.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case webhook.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case webhook.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				w.CreatedBy = value.String
			}
		case webhook.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				w.UpdatedBy = value.String
			}
		case webhook.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				w.MappingID = value.String
			}
		case webhook.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case webhook.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				w.DeletedAt = value.Time
			}
		case webhook.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				w.DeletedBy = value.String
			}
		case webhook.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				w.OwnerID = value.String
			}
		case webhook.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case webhook.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = value.String
			}
		case webhook.FieldDestinationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination_url", values[i])
			} else if value.Valid {
				w.DestinationURL = value.String
			}
		case webhook.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				w.Enabled = value.Bool
			}
		case webhook.FieldCallback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field callback", values[i])
			} else if value.Valid {
				w.Callback = value.String
			}
		case webhook.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				w.ExpiresAt = value.Time
			}
		case webhook.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				w.Secret = *value
			}
		case webhook.FieldFailures:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failures", values[i])
			} else if value.Valid {
				w.Failures = int(value.Int64)
			}
		case webhook.FieldLastError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error", values[i])
			} else if value.Valid {
				w.LastError = value.String
			}
		case webhook.FieldLastResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_response", values[i])
			} else if value.Valid {
				w.LastResponse = value.String
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Webhook.
// This includes values selected through modifiers, order, etc.
func (w *Webhook) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Webhook entity.
func (w *Webhook) QueryOwner() *OrganizationQuery {
	return NewWebhookClient(w.config).QueryOwner(w)
}

// QueryEvents queries the "events" edge of the Webhook entity.
func (w *Webhook) QueryEvents() *EventQuery {
	return NewWebhookClient(w.config).QueryEvents(w)
}

// QueryIntegrations queries the "integrations" edge of the Webhook entity.
func (w *Webhook) QueryIntegrations() *IntegrationQuery {
	return NewWebhookClient(w.config).QueryIntegrations(w)
}

// Update returns a builder for updating this Webhook.
// Note that you need to call Webhook.Unwrap() before calling this method if this Webhook
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Webhook) Update() *WebhookUpdateOne {
	return NewWebhookClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Webhook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Webhook) Unwrap() *Webhook {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("generated: Webhook is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Webhook) String() string {
	var builder strings.Builder
	builder.WriteString("Webhook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(w.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(w.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(w.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", w.Tags))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(w.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(w.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(w.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(w.Description)
	builder.WriteString(", ")
	builder.WriteString("destination_url=")
	builder.WriteString(w.DestinationURL)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", w.Enabled))
	builder.WriteString(", ")
	builder.WriteString("callback=")
	builder.WriteString(w.Callback)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(w.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(fmt.Sprintf("%v", w.Secret))
	builder.WriteString(", ")
	builder.WriteString("failures=")
	builder.WriteString(fmt.Sprintf("%v", w.Failures))
	builder.WriteString(", ")
	builder.WriteString("last_error=")
	builder.WriteString(w.LastError)
	builder.WriteString(", ")
	builder.WriteString("last_response=")
	builder.WriteString(w.LastResponse)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Webhook) NamedEvents(name string) ([]*Event, error) {
	if w.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Webhook) appendNamedEvents(name string, edges ...*Event) {
	if w.Edges.namedEvents == nil {
		w.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		w.Edges.namedEvents[name] = []*Event{}
	} else {
		w.Edges.namedEvents[name] = append(w.Edges.namedEvents[name], edges...)
	}
}

// NamedIntegrations returns the Integrations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Webhook) NamedIntegrations(name string) ([]*Integration, error) {
	if w.Edges.namedIntegrations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedIntegrations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Webhook) appendNamedIntegrations(name string, edges ...*Integration) {
	if w.Edges.namedIntegrations == nil {
		w.Edges.namedIntegrations = make(map[string][]*Integration)
	}
	if len(edges) == 0 {
		w.Edges.namedIntegrations[name] = []*Integration{}
	} else {
		w.Edges.namedIntegrations[name] = append(w.Edges.namedIntegrations[name], edges...)
	}
}

// Webhooks is a parsable slice of Webhook.
type Webhooks []*Webhook
