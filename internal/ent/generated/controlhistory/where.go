// Code generated by ent, DO NOT EDIT.

package controlhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/entx/history"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldRef, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldMappingID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldStatus, v))
}

// ControlType applies equality check predicate on the "control_type" field. It's identical to ControlTypeEQ.
func ControlType(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldControlType, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldVersion, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldOwner, v))
}

// ControlNumber applies equality check predicate on the "control_number" field. It's identical to ControlNumberEQ.
func ControlNumber(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldControlNumber, v))
}

// ControlFamily applies equality check predicate on the "control_family" field. It's identical to ControlFamilyEQ.
func ControlFamily(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldControlFamily, v))
}

// ControlClass applies equality check predicate on the "control_class" field. It's identical to ControlClassEQ.
func ControlClass(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldControlClass, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldSource, v))
}

// Satisfies applies equality check predicate on the "satisfies" field. It's identical to SatisfiesEQ.
func Satisfies(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldSatisfies, v))
}

// MappedFrameworks applies equality check predicate on the "mapped_frameworks" field. It's identical to MappedFrameworksEQ.
func MappedFrameworks(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldMappedFrameworks, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldRef))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldRef, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v history.OpType) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v history.OpType) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...history.OpType) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...history.OpType) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldDeletedBy, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldTags))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldStatus, v))
}

// ControlTypeEQ applies the EQ predicate on the "control_type" field.
func ControlTypeEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldControlType, v))
}

// ControlTypeNEQ applies the NEQ predicate on the "control_type" field.
func ControlTypeNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldControlType, v))
}

// ControlTypeIn applies the In predicate on the "control_type" field.
func ControlTypeIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldControlType, vs...))
}

// ControlTypeNotIn applies the NotIn predicate on the "control_type" field.
func ControlTypeNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldControlType, vs...))
}

// ControlTypeGT applies the GT predicate on the "control_type" field.
func ControlTypeGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldControlType, v))
}

// ControlTypeGTE applies the GTE predicate on the "control_type" field.
func ControlTypeGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldControlType, v))
}

// ControlTypeLT applies the LT predicate on the "control_type" field.
func ControlTypeLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldControlType, v))
}

// ControlTypeLTE applies the LTE predicate on the "control_type" field.
func ControlTypeLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldControlType, v))
}

// ControlTypeContains applies the Contains predicate on the "control_type" field.
func ControlTypeContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldControlType, v))
}

// ControlTypeHasPrefix applies the HasPrefix predicate on the "control_type" field.
func ControlTypeHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldControlType, v))
}

// ControlTypeHasSuffix applies the HasSuffix predicate on the "control_type" field.
func ControlTypeHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldControlType, v))
}

// ControlTypeIsNil applies the IsNil predicate on the "control_type" field.
func ControlTypeIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldControlType))
}

// ControlTypeNotNil applies the NotNil predicate on the "control_type" field.
func ControlTypeNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldControlType))
}

// ControlTypeEqualFold applies the EqualFold predicate on the "control_type" field.
func ControlTypeEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldControlType, v))
}

// ControlTypeContainsFold applies the ContainsFold predicate on the "control_type" field.
func ControlTypeContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldControlType, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldVersion, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerIsNil applies the IsNil predicate on the "owner" field.
func OwnerIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldOwner))
}

// OwnerNotNil applies the NotNil predicate on the "owner" field.
func OwnerNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldOwner))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldOwner, v))
}

// ControlNumberEQ applies the EQ predicate on the "control_number" field.
func ControlNumberEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldControlNumber, v))
}

// ControlNumberNEQ applies the NEQ predicate on the "control_number" field.
func ControlNumberNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldControlNumber, v))
}

// ControlNumberIn applies the In predicate on the "control_number" field.
func ControlNumberIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldControlNumber, vs...))
}

// ControlNumberNotIn applies the NotIn predicate on the "control_number" field.
func ControlNumberNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldControlNumber, vs...))
}

// ControlNumberGT applies the GT predicate on the "control_number" field.
func ControlNumberGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldControlNumber, v))
}

// ControlNumberGTE applies the GTE predicate on the "control_number" field.
func ControlNumberGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldControlNumber, v))
}

// ControlNumberLT applies the LT predicate on the "control_number" field.
func ControlNumberLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldControlNumber, v))
}

// ControlNumberLTE applies the LTE predicate on the "control_number" field.
func ControlNumberLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldControlNumber, v))
}

// ControlNumberContains applies the Contains predicate on the "control_number" field.
func ControlNumberContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldControlNumber, v))
}

// ControlNumberHasPrefix applies the HasPrefix predicate on the "control_number" field.
func ControlNumberHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldControlNumber, v))
}

// ControlNumberHasSuffix applies the HasSuffix predicate on the "control_number" field.
func ControlNumberHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldControlNumber, v))
}

// ControlNumberIsNil applies the IsNil predicate on the "control_number" field.
func ControlNumberIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldControlNumber))
}

// ControlNumberNotNil applies the NotNil predicate on the "control_number" field.
func ControlNumberNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldControlNumber))
}

// ControlNumberEqualFold applies the EqualFold predicate on the "control_number" field.
func ControlNumberEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldControlNumber, v))
}

// ControlNumberContainsFold applies the ContainsFold predicate on the "control_number" field.
func ControlNumberContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldControlNumber, v))
}

// ControlFamilyEQ applies the EQ predicate on the "control_family" field.
func ControlFamilyEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldControlFamily, v))
}

// ControlFamilyNEQ applies the NEQ predicate on the "control_family" field.
func ControlFamilyNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldControlFamily, v))
}

// ControlFamilyIn applies the In predicate on the "control_family" field.
func ControlFamilyIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldControlFamily, vs...))
}

// ControlFamilyNotIn applies the NotIn predicate on the "control_family" field.
func ControlFamilyNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldControlFamily, vs...))
}

// ControlFamilyGT applies the GT predicate on the "control_family" field.
func ControlFamilyGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldControlFamily, v))
}

// ControlFamilyGTE applies the GTE predicate on the "control_family" field.
func ControlFamilyGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldControlFamily, v))
}

// ControlFamilyLT applies the LT predicate on the "control_family" field.
func ControlFamilyLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldControlFamily, v))
}

// ControlFamilyLTE applies the LTE predicate on the "control_family" field.
func ControlFamilyLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldControlFamily, v))
}

// ControlFamilyContains applies the Contains predicate on the "control_family" field.
func ControlFamilyContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldControlFamily, v))
}

// ControlFamilyHasPrefix applies the HasPrefix predicate on the "control_family" field.
func ControlFamilyHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldControlFamily, v))
}

// ControlFamilyHasSuffix applies the HasSuffix predicate on the "control_family" field.
func ControlFamilyHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldControlFamily, v))
}

// ControlFamilyIsNil applies the IsNil predicate on the "control_family" field.
func ControlFamilyIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldControlFamily))
}

// ControlFamilyNotNil applies the NotNil predicate on the "control_family" field.
func ControlFamilyNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldControlFamily))
}

// ControlFamilyEqualFold applies the EqualFold predicate on the "control_family" field.
func ControlFamilyEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldControlFamily, v))
}

// ControlFamilyContainsFold applies the ContainsFold predicate on the "control_family" field.
func ControlFamilyContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldControlFamily, v))
}

// ControlClassEQ applies the EQ predicate on the "control_class" field.
func ControlClassEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldControlClass, v))
}

// ControlClassNEQ applies the NEQ predicate on the "control_class" field.
func ControlClassNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldControlClass, v))
}

// ControlClassIn applies the In predicate on the "control_class" field.
func ControlClassIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldControlClass, vs...))
}

// ControlClassNotIn applies the NotIn predicate on the "control_class" field.
func ControlClassNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldControlClass, vs...))
}

// ControlClassGT applies the GT predicate on the "control_class" field.
func ControlClassGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldControlClass, v))
}

// ControlClassGTE applies the GTE predicate on the "control_class" field.
func ControlClassGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldControlClass, v))
}

// ControlClassLT applies the LT predicate on the "control_class" field.
func ControlClassLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldControlClass, v))
}

// ControlClassLTE applies the LTE predicate on the "control_class" field.
func ControlClassLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldControlClass, v))
}

// ControlClassContains applies the Contains predicate on the "control_class" field.
func ControlClassContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldControlClass, v))
}

// ControlClassHasPrefix applies the HasPrefix predicate on the "control_class" field.
func ControlClassHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldControlClass, v))
}

// ControlClassHasSuffix applies the HasSuffix predicate on the "control_class" field.
func ControlClassHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldControlClass, v))
}

// ControlClassIsNil applies the IsNil predicate on the "control_class" field.
func ControlClassIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldControlClass))
}

// ControlClassNotNil applies the NotNil predicate on the "control_class" field.
func ControlClassNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldControlClass))
}

// ControlClassEqualFold applies the EqualFold predicate on the "control_class" field.
func ControlClassEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldControlClass, v))
}

// ControlClassContainsFold applies the ContainsFold predicate on the "control_class" field.
func ControlClassContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldControlClass, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldSource))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldSource, v))
}

// SatisfiesEQ applies the EQ predicate on the "satisfies" field.
func SatisfiesEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldSatisfies, v))
}

// SatisfiesNEQ applies the NEQ predicate on the "satisfies" field.
func SatisfiesNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldSatisfies, v))
}

// SatisfiesIn applies the In predicate on the "satisfies" field.
func SatisfiesIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldSatisfies, vs...))
}

// SatisfiesNotIn applies the NotIn predicate on the "satisfies" field.
func SatisfiesNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldSatisfies, vs...))
}

// SatisfiesGT applies the GT predicate on the "satisfies" field.
func SatisfiesGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldSatisfies, v))
}

// SatisfiesGTE applies the GTE predicate on the "satisfies" field.
func SatisfiesGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldSatisfies, v))
}

// SatisfiesLT applies the LT predicate on the "satisfies" field.
func SatisfiesLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldSatisfies, v))
}

// SatisfiesLTE applies the LTE predicate on the "satisfies" field.
func SatisfiesLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldSatisfies, v))
}

// SatisfiesContains applies the Contains predicate on the "satisfies" field.
func SatisfiesContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldSatisfies, v))
}

// SatisfiesHasPrefix applies the HasPrefix predicate on the "satisfies" field.
func SatisfiesHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldSatisfies, v))
}

// SatisfiesHasSuffix applies the HasSuffix predicate on the "satisfies" field.
func SatisfiesHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldSatisfies, v))
}

// SatisfiesIsNil applies the IsNil predicate on the "satisfies" field.
func SatisfiesIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldSatisfies))
}

// SatisfiesNotNil applies the NotNil predicate on the "satisfies" field.
func SatisfiesNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldSatisfies))
}

// SatisfiesEqualFold applies the EqualFold predicate on the "satisfies" field.
func SatisfiesEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldSatisfies, v))
}

// SatisfiesContainsFold applies the ContainsFold predicate on the "satisfies" field.
func SatisfiesContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldSatisfies, v))
}

// MappedFrameworksEQ applies the EQ predicate on the "mapped_frameworks" field.
func MappedFrameworksEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEQ(FieldMappedFrameworks, v))
}

// MappedFrameworksNEQ applies the NEQ predicate on the "mapped_frameworks" field.
func MappedFrameworksNEQ(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNEQ(FieldMappedFrameworks, v))
}

// MappedFrameworksIn applies the In predicate on the "mapped_frameworks" field.
func MappedFrameworksIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIn(FieldMappedFrameworks, vs...))
}

// MappedFrameworksNotIn applies the NotIn predicate on the "mapped_frameworks" field.
func MappedFrameworksNotIn(vs ...string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotIn(FieldMappedFrameworks, vs...))
}

// MappedFrameworksGT applies the GT predicate on the "mapped_frameworks" field.
func MappedFrameworksGT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGT(FieldMappedFrameworks, v))
}

// MappedFrameworksGTE applies the GTE predicate on the "mapped_frameworks" field.
func MappedFrameworksGTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldGTE(FieldMappedFrameworks, v))
}

// MappedFrameworksLT applies the LT predicate on the "mapped_frameworks" field.
func MappedFrameworksLT(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLT(FieldMappedFrameworks, v))
}

// MappedFrameworksLTE applies the LTE predicate on the "mapped_frameworks" field.
func MappedFrameworksLTE(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldLTE(FieldMappedFrameworks, v))
}

// MappedFrameworksContains applies the Contains predicate on the "mapped_frameworks" field.
func MappedFrameworksContains(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContains(FieldMappedFrameworks, v))
}

// MappedFrameworksHasPrefix applies the HasPrefix predicate on the "mapped_frameworks" field.
func MappedFrameworksHasPrefix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasPrefix(FieldMappedFrameworks, v))
}

// MappedFrameworksHasSuffix applies the HasSuffix predicate on the "mapped_frameworks" field.
func MappedFrameworksHasSuffix(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldHasSuffix(FieldMappedFrameworks, v))
}

// MappedFrameworksIsNil applies the IsNil predicate on the "mapped_frameworks" field.
func MappedFrameworksIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldMappedFrameworks))
}

// MappedFrameworksNotNil applies the NotNil predicate on the "mapped_frameworks" field.
func MappedFrameworksNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldMappedFrameworks))
}

// MappedFrameworksEqualFold applies the EqualFold predicate on the "mapped_frameworks" field.
func MappedFrameworksEqualFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldEqualFold(FieldMappedFrameworks, v))
}

// MappedFrameworksContainsFold applies the ContainsFold predicate on the "mapped_frameworks" field.
func MappedFrameworksContainsFold(v string) predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldContainsFold(FieldMappedFrameworks, v))
}

// JsonschemaIsNil applies the IsNil predicate on the "jsonschema" field.
func JsonschemaIsNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldIsNull(FieldJsonschema))
}

// JsonschemaNotNil applies the NotNil predicate on the "jsonschema" field.
func JsonschemaNotNil() predicate.ControlHistory {
	return predicate.ControlHistory(sql.FieldNotNull(FieldJsonschema))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ControlHistory) predicate.ControlHistory {
	return predicate.ControlHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ControlHistory) predicate.ControlHistory {
	return predicate.ControlHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ControlHistory) predicate.ControlHistory {
	return predicate.ControlHistory(sql.NotPredicates(p))
}
