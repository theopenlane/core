// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *TaskCreate) SetCreatedAt(v time.Time) *TaskCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCreatedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TaskCreate) SetUpdatedAt(v time.Time) *TaskCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableUpdatedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *TaskCreate) SetCreatedBy(v string) *TaskCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCreatedBy(v *string) *TaskCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *TaskCreate) SetUpdatedBy(v string) *TaskCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *TaskCreate) SetNillableUpdatedBy(v *string) *TaskCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *TaskCreate) SetDeletedAt(v time.Time) *TaskCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDeletedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *TaskCreate) SetDeletedBy(v string) *TaskCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDeletedBy(v *string) *TaskCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *TaskCreate) SetDisplayID(v string) *TaskCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *TaskCreate) SetTags(v []string) *TaskCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *TaskCreate) SetOwnerID(v string) *TaskCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableOwnerID(v *string) *TaskCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *TaskCreate) SetTitle(v string) *TaskCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDetails sets the "details" field.
func (_c *TaskCreate) SetDetails(v string) *TaskCreate {
	_c.mutation.SetDetails(v)
	return _c
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDetails(v *string) *TaskCreate {
	if v != nil {
		_c.SetDetails(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *TaskCreate) SetStatus(v enums.TaskStatus) *TaskCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *TaskCreate) SetNillableStatus(v *enums.TaskStatus) *TaskCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetCategory sets the "category" field.
func (_c *TaskCreate) SetCategory(v string) *TaskCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCategory(v *string) *TaskCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetDue sets the "due" field.
func (_c *TaskCreate) SetDue(v models.DateTime) *TaskCreate {
	_c.mutation.SetDue(v)
	return _c
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDue(v *models.DateTime) *TaskCreate {
	if v != nil {
		_c.SetDue(*v)
	}
	return _c
}

// SetCompleted sets the "completed" field.
func (_c *TaskCreate) SetCompleted(v models.DateTime) *TaskCreate {
	_c.mutation.SetCompleted(v)
	return _c
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCompleted(v *models.DateTime) *TaskCreate {
	if v != nil {
		_c.SetCompleted(*v)
	}
	return _c
}

// SetAssigneeID sets the "assignee_id" field.
func (_c *TaskCreate) SetAssigneeID(v string) *TaskCreate {
	_c.mutation.SetAssigneeID(v)
	return _c
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableAssigneeID(v *string) *TaskCreate {
	if v != nil {
		_c.SetAssigneeID(*v)
	}
	return _c
}

// SetAssignerID sets the "assigner_id" field.
func (_c *TaskCreate) SetAssignerID(v string) *TaskCreate {
	_c.mutation.SetAssignerID(v)
	return _c
}

// SetNillableAssignerID sets the "assigner_id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableAssignerID(v *string) *TaskCreate {
	if v != nil {
		_c.SetAssignerID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TaskCreate) SetID(v string) *TaskCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableID(v *string) *TaskCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *TaskCreate) SetOwner(v *Organization) *TaskCreate {
	return _c.SetOwnerID(v.ID)
}

// SetAssigner sets the "assigner" edge to the User entity.
func (_c *TaskCreate) SetAssigner(v *User) *TaskCreate {
	return _c.SetAssignerID(v.ID)
}

// SetAssignee sets the "assignee" edge to the User entity.
func (_c *TaskCreate) SetAssignee(v *User) *TaskCreate {
	return _c.SetAssigneeID(v.ID)
}

// AddCommentIDs adds the "comments" edge to the Note entity by IDs.
func (_c *TaskCreate) AddCommentIDs(ids ...string) *TaskCreate {
	_c.mutation.AddCommentIDs(ids...)
	return _c
}

// AddComments adds the "comments" edges to the Note entity.
func (_c *TaskCreate) AddComments(v ...*Note) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCommentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_c *TaskCreate) AddGroupIDs(ids ...string) *TaskCreate {
	_c.mutation.AddGroupIDs(ids...)
	return _c
}

// AddGroups adds the "groups" edges to the Group entity.
func (_c *TaskCreate) AddGroups(v ...*Group) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGroupIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_c *TaskCreate) AddInternalPolicyIDs(ids ...string) *TaskCreate {
	_c.mutation.AddInternalPolicyIDs(ids...)
	return _c
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_c *TaskCreate) AddInternalPolicies(v ...*InternalPolicy) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInternalPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_c *TaskCreate) AddProcedureIDs(ids ...string) *TaskCreate {
	_c.mutation.AddProcedureIDs(ids...)
	return _c
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_c *TaskCreate) AddProcedures(v ...*Procedure) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProcedureIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_c *TaskCreate) AddControlIDs(ids ...string) *TaskCreate {
	_c.mutation.AddControlIDs(ids...)
	return _c
}

// AddControls adds the "controls" edges to the Control entity.
func (_c *TaskCreate) AddControls(v ...*Control) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_c *TaskCreate) AddSubcontrolIDs(ids ...string) *TaskCreate {
	_c.mutation.AddSubcontrolIDs(ids...)
	return _c
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_c *TaskCreate) AddSubcontrols(v ...*Subcontrol) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubcontrolIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_c *TaskCreate) AddControlObjectiveIDs(ids ...string) *TaskCreate {
	_c.mutation.AddControlObjectiveIDs(ids...)
	return _c
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_c *TaskCreate) AddControlObjectives(v ...*ControlObjective) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_c *TaskCreate) AddProgramIDs(ids ...string) *TaskCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_c *TaskCreate) AddPrograms(v ...*Program) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_c *TaskCreate) AddRiskIDs(ids ...string) *TaskCreate {
	_c.mutation.AddRiskIDs(ids...)
	return _c
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_c *TaskCreate) AddRisks(v ...*Risk) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_c *TaskCreate) AddEvidenceIDs(ids ...string) *TaskCreate {
	_c.mutation.AddEvidenceIDs(ids...)
	return _c
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_c *TaskCreate) AddEvidence(v ...*Evidence) *TaskCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEvidenceIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (_c *TaskCreate) Mutation() *TaskMutation {
	return _c.mutation
}

// Save creates the Task in the database.
func (_c *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TaskCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if task.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized task.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := task.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if task.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized task.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := task.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := task.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := task.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if task.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized task.DefaultID (forgotten import generated/runtime?)")
		}
		v := task.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *TaskCreate) check() error {
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "Task.display_id"`)}
	}
	if v, ok := _c.mutation.DisplayID(); ok {
		if err := task.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "Task.display_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := task.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Task.owner_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "Task.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Task.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Task.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Task.status": %w`, err)}
		}
	}
	return nil
}

func (_c *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Task.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Task
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(task.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(task.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Details(); ok {
		_spec.SetField(task.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(task.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.Due(); ok {
		_spec.SetField(task.FieldDue, field.TypeTime, value)
		_node.Due = &value
	}
	if value, ok := _c.mutation.Completed(); ok {
		_spec.SetField(task.FieldCompleted, field.TypeTime, value)
		_node.Completed = &value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OwnerTable,
			Columns: []string{task.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssignerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssignerTable,
			Columns: []string{task.AssignerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssignerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssigneeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupsTable,
			Columns: task.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.InternalPoliciesTable,
			Columns: task.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProceduresTable,
			Columns: task.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlsTable,
			Columns: task.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolsTable,
			Columns: task.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectivesTable,
			Columns: task.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramsTable,
			Columns: task.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.RisksTable,
			Columns: task.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.RiskTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.EvidenceTable,
			Columns: task.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TaskEvidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (_c *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Task, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
