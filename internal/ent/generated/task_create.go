// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TaskCreate) SetCreatedBy(s string) *TaskCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedBy(s *string) *TaskCreate {
	if s != nil {
		tc.SetCreatedBy(*s)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TaskCreate) SetUpdatedBy(s string) *TaskCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedBy(s *string) *TaskCreate {
	if s != nil {
		tc.SetUpdatedBy(*s)
	}
	return tc
}

// SetMappingID sets the "mapping_id" field.
func (tc *TaskCreate) SetMappingID(s string) *TaskCreate {
	tc.mutation.SetMappingID(s)
	return tc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMappingID(s *string) *TaskCreate {
	if s != nil {
		tc.SetMappingID(*s)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TaskCreate) SetDeletedAt(t time.Time) *TaskCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDeletedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetDeletedBy sets the "deleted_by" field.
func (tc *TaskCreate) SetDeletedBy(s string) *TaskCreate {
	tc.mutation.SetDeletedBy(s)
	return tc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDeletedBy(s *string) *TaskCreate {
	if s != nil {
		tc.SetDeletedBy(*s)
	}
	return tc
}

// SetTags sets the "tags" field.
func (tc *TaskCreate) SetTags(s []string) *TaskCreate {
	tc.mutation.SetTags(s)
	return tc
}

// SetTitle sets the "title" field.
func (tc *TaskCreate) SetTitle(s string) *TaskCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TaskCreate) SetDescription(s string) *TaskCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDescription(s *string) *TaskCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetDetails sets the "details" field.
func (tc *TaskCreate) SetDetails(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetDetails(m)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(es enums.TaskStatus) *TaskCreate {
	tc.mutation.SetStatus(es)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(es *enums.TaskStatus) *TaskCreate {
	if es != nil {
		tc.SetStatus(*es)
	}
	return tc
}

// SetDue sets the "due" field.
func (tc *TaskCreate) SetDue(t time.Time) *TaskCreate {
	tc.mutation.SetDue(t)
	return tc
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDue(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetDue(*t)
	}
	return tc
}

// SetCompleted sets the "completed" field.
func (tc *TaskCreate) SetCompleted(t time.Time) *TaskCreate {
	tc.mutation.SetCompleted(t)
	return tc
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCompleted(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCompleted(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(s string) *TaskCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableID(s *string) *TaskCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// SetAssignerID sets the "assigner" edge to the User entity by ID.
func (tc *TaskCreate) SetAssignerID(id string) *TaskCreate {
	tc.mutation.SetAssignerID(id)
	return tc
}

// SetAssigner sets the "assigner" edge to the User entity.
func (tc *TaskCreate) SetAssigner(u *User) *TaskCreate {
	return tc.SetAssignerID(u.ID)
}

// SetAssigneeID sets the "assignee" edge to the User entity by ID.
func (tc *TaskCreate) SetAssigneeID(id string) *TaskCreate {
	tc.mutation.SetAssigneeID(id)
	return tc
}

// SetNillableAssigneeID sets the "assignee" edge to the User entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableAssigneeID(id *string) *TaskCreate {
	if id != nil {
		tc = tc.SetAssigneeID(*id)
	}
	return tc
}

// SetAssignee sets the "assignee" edge to the User entity.
func (tc *TaskCreate) SetAssignee(u *User) *TaskCreate {
	return tc.SetAssigneeID(u.ID)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (tc *TaskCreate) AddOrganizationIDs(ids ...string) *TaskCreate {
	tc.mutation.AddOrganizationIDs(ids...)
	return tc
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (tc *TaskCreate) AddOrganization(o ...*Organization) *TaskCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tc.AddOrganizationIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (tc *TaskCreate) AddGroupIDs(ids ...string) *TaskCreate {
	tc.mutation.AddGroupIDs(ids...)
	return tc
}

// AddGroup adds the "group" edges to the Group entity.
func (tc *TaskCreate) AddGroup(g ...*Group) *TaskCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return tc.AddGroupIDs(ids...)
}

// AddPolicyIDs adds the "policy" edge to the InternalPolicy entity by IDs.
func (tc *TaskCreate) AddPolicyIDs(ids ...string) *TaskCreate {
	tc.mutation.AddPolicyIDs(ids...)
	return tc
}

// AddPolicy adds the "policy" edges to the InternalPolicy entity.
func (tc *TaskCreate) AddPolicy(i ...*InternalPolicy) *TaskCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tc.AddPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedure" edge to the Procedure entity by IDs.
func (tc *TaskCreate) AddProcedureIDs(ids ...string) *TaskCreate {
	tc.mutation.AddProcedureIDs(ids...)
	return tc
}

// AddProcedure adds the "procedure" edges to the Procedure entity.
func (tc *TaskCreate) AddProcedure(p ...*Procedure) *TaskCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddProcedureIDs(ids...)
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (tc *TaskCreate) AddControlIDs(ids ...string) *TaskCreate {
	tc.mutation.AddControlIDs(ids...)
	return tc
}

// AddControl adds the "control" edges to the Control entity.
func (tc *TaskCreate) AddControl(c ...*Control) *TaskCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddControlIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objective" edge to the ControlObjective entity by IDs.
func (tc *TaskCreate) AddControlObjectiveIDs(ids ...string) *TaskCreate {
	tc.mutation.AddControlObjectiveIDs(ids...)
	return tc
}

// AddControlObjective adds the "control_objective" edges to the ControlObjective entity.
func (tc *TaskCreate) AddControlObjective(c ...*ControlObjective) *TaskCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddControlObjectiveIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrol" edge to the Subcontrol entity by IDs.
func (tc *TaskCreate) AddSubcontrolIDs(ids ...string) *TaskCreate {
	tc.mutation.AddSubcontrolIDs(ids...)
	return tc
}

// AddSubcontrol adds the "subcontrol" edges to the Subcontrol entity.
func (tc *TaskCreate) AddSubcontrol(s ...*Subcontrol) *TaskCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddSubcontrolIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (tc *TaskCreate) AddProgramIDs(ids ...string) *TaskCreate {
	tc.mutation.AddProgramIDs(ids...)
	return tc
}

// AddProgram adds the "program" edges to the Program entity.
func (tc *TaskCreate) AddProgram(p ...*Program) *TaskCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddProgramIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if task.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized task.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if task.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized task.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.MappingID(); !ok {
		if task.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized task.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := task.DefaultMappingID()
		tc.mutation.SetMappingID(v)
	}
	if _, ok := tc.mutation.Tags(); !ok {
		v := task.DefaultTags
		tc.mutation.SetTags(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := task.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		if task.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized task.DefaultID (forgotten import generated/runtime?)")
		}
		v := task.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "Task.mapping_id"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "Task.title"`)}
	}
	if v, ok := tc.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Task.title": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Task.status": %w`, err)}
		}
	}
	if len(tc.mutation.AssignerIDs()) == 0 {
		return &ValidationError{Name: "assigner", err: errors.New(`generated: missing required edge "Task.assigner"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Task.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	)
	_spec.Schema = tc.schemaConfig.Task
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.MappingID(); ok {
		_spec.SetField(task.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.DeletedBy(); ok {
		_spec.SetField(task.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := tc.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Details(); ok {
		_spec.SetField(task.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Due(); ok {
		_spec.SetField(task.FieldDue, field.TypeTime, value)
		_node.Due = value
	}
	if value, ok := tc.mutation.Completed(); ok {
		_spec.SetField(task.FieldCompleted, field.TypeTime, value)
		_node.Completed = value
	}
	if nodes := tc.mutation.AssignerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssignerTable,
			Columns: []string{task.AssignerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_assigner_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_assignee_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.OrganizationTable,
			Columns: task.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupTable,
			Columns: task.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.PolicyTable,
			Columns: task.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProcedureTable,
			Columns: task.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlTable,
			Columns: task.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ControlObjectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectiveTable,
			Columns: task.ControlObjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.SubcontrolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolTable,
			Columns: task.SubcontrolPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramTable,
			Columns: task.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
