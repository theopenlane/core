// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/passwordresettoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// PasswordResetTokenQuery is the builder for querying PasswordResetToken entities.
type PasswordResetTokenQuery struct {
	config
	ctx        *QueryContext
	order      []passwordresettoken.OrderOption
	inters     []Interceptor
	predicates []predicate.PasswordResetToken
	withOwner  *UserQuery
	loadTotal  []func(context.Context, []*PasswordResetToken) error
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PasswordResetTokenQuery builder.
func (prtq *PasswordResetTokenQuery) Where(ps ...predicate.PasswordResetToken) *PasswordResetTokenQuery {
	prtq.predicates = append(prtq.predicates, ps...)
	return prtq
}

// Limit the number of records to be returned by this query.
func (prtq *PasswordResetTokenQuery) Limit(limit int) *PasswordResetTokenQuery {
	prtq.ctx.Limit = &limit
	return prtq
}

// Offset to start from.
func (prtq *PasswordResetTokenQuery) Offset(offset int) *PasswordResetTokenQuery {
	prtq.ctx.Offset = &offset
	return prtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (prtq *PasswordResetTokenQuery) Unique(unique bool) *PasswordResetTokenQuery {
	prtq.ctx.Unique = &unique
	return prtq
}

// Order specifies how the records should be ordered.
func (prtq *PasswordResetTokenQuery) Order(o ...passwordresettoken.OrderOption) *PasswordResetTokenQuery {
	prtq.order = append(prtq.order, o...)
	return prtq
}

// QueryOwner chains the current query on the "owner" edge.
func (prtq *PasswordResetTokenQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: prtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(passwordresettoken.Table, passwordresettoken.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, passwordresettoken.OwnerTable, passwordresettoken.OwnerColumn),
		)
		schemaConfig := prtq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.PasswordResetToken
		fromU = sqlgraph.SetNeighbors(prtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PasswordResetToken entity from the query.
// Returns a *NotFoundError when no PasswordResetToken was found.
func (prtq *PasswordResetTokenQuery) First(ctx context.Context) (*PasswordResetToken, error) {
	nodes, err := prtq.Limit(1).All(setContextOp(ctx, prtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{passwordresettoken.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (prtq *PasswordResetTokenQuery) FirstX(ctx context.Context) *PasswordResetToken {
	node, err := prtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PasswordResetToken ID from the query.
// Returns a *NotFoundError when no PasswordResetToken ID was found.
func (prtq *PasswordResetTokenQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = prtq.Limit(1).IDs(setContextOp(ctx, prtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{passwordresettoken.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (prtq *PasswordResetTokenQuery) FirstIDX(ctx context.Context) string {
	id, err := prtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PasswordResetToken entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PasswordResetToken entity is found.
// Returns a *NotFoundError when no PasswordResetToken entities are found.
func (prtq *PasswordResetTokenQuery) Only(ctx context.Context) (*PasswordResetToken, error) {
	nodes, err := prtq.Limit(2).All(setContextOp(ctx, prtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{passwordresettoken.Label}
	default:
		return nil, &NotSingularError{passwordresettoken.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (prtq *PasswordResetTokenQuery) OnlyX(ctx context.Context) *PasswordResetToken {
	node, err := prtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PasswordResetToken ID in the query.
// Returns a *NotSingularError when more than one PasswordResetToken ID is found.
// Returns a *NotFoundError when no entities are found.
func (prtq *PasswordResetTokenQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = prtq.Limit(2).IDs(setContextOp(ctx, prtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{passwordresettoken.Label}
	default:
		err = &NotSingularError{passwordresettoken.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (prtq *PasswordResetTokenQuery) OnlyIDX(ctx context.Context) string {
	id, err := prtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PasswordResetTokens.
func (prtq *PasswordResetTokenQuery) All(ctx context.Context) ([]*PasswordResetToken, error) {
	ctx = setContextOp(ctx, prtq.ctx, ent.OpQueryAll)
	if err := prtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PasswordResetToken, *PasswordResetTokenQuery]()
	return withInterceptors[[]*PasswordResetToken](ctx, prtq, qr, prtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (prtq *PasswordResetTokenQuery) AllX(ctx context.Context) []*PasswordResetToken {
	nodes, err := prtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PasswordResetToken IDs.
func (prtq *PasswordResetTokenQuery) IDs(ctx context.Context) (ids []string, err error) {
	if prtq.ctx.Unique == nil && prtq.path != nil {
		prtq.Unique(true)
	}
	ctx = setContextOp(ctx, prtq.ctx, ent.OpQueryIDs)
	if err = prtq.Select(passwordresettoken.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (prtq *PasswordResetTokenQuery) IDsX(ctx context.Context) []string {
	ids, err := prtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (prtq *PasswordResetTokenQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, prtq.ctx, ent.OpQueryCount)
	if err := prtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, prtq, querierCount[*PasswordResetTokenQuery](), prtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (prtq *PasswordResetTokenQuery) CountX(ctx context.Context) int {
	count, err := prtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (prtq *PasswordResetTokenQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, prtq.ctx, ent.OpQueryExist)
	switch _, err := prtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (prtq *PasswordResetTokenQuery) ExistX(ctx context.Context) bool {
	exist, err := prtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PasswordResetTokenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (prtq *PasswordResetTokenQuery) Clone() *PasswordResetTokenQuery {
	if prtq == nil {
		return nil
	}
	return &PasswordResetTokenQuery{
		config:     prtq.config,
		ctx:        prtq.ctx.Clone(),
		order:      append([]passwordresettoken.OrderOption{}, prtq.order...),
		inters:     append([]Interceptor{}, prtq.inters...),
		predicates: append([]predicate.PasswordResetToken{}, prtq.predicates...),
		withOwner:  prtq.withOwner.Clone(),
		// clone intermediate query.
		sql:       prtq.sql.Clone(),
		path:      prtq.path,
		modifiers: append([]func(*sql.Selector){}, prtq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (prtq *PasswordResetTokenQuery) WithOwner(opts ...func(*UserQuery)) *PasswordResetTokenQuery {
	query := (&UserClient{config: prtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	prtq.withOwner = query
	return prtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PasswordResetToken.Query().
//		GroupBy(passwordresettoken.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (prtq *PasswordResetTokenQuery) GroupBy(field string, fields ...string) *PasswordResetTokenGroupBy {
	prtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PasswordResetTokenGroupBy{build: prtq}
	grbuild.flds = &prtq.ctx.Fields
	grbuild.label = passwordresettoken.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PasswordResetToken.Query().
//		Select(passwordresettoken.FieldCreatedAt).
//		Scan(ctx, &v)
func (prtq *PasswordResetTokenQuery) Select(fields ...string) *PasswordResetTokenSelect {
	prtq.ctx.Fields = append(prtq.ctx.Fields, fields...)
	sbuild := &PasswordResetTokenSelect{PasswordResetTokenQuery: prtq}
	sbuild.label = passwordresettoken.Label
	sbuild.flds, sbuild.scan = &prtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PasswordResetTokenSelect configured with the given aggregations.
func (prtq *PasswordResetTokenQuery) Aggregate(fns ...AggregateFunc) *PasswordResetTokenSelect {
	return prtq.Select().Aggregate(fns...)
}

func (prtq *PasswordResetTokenQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range prtq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, prtq); err != nil {
				return err
			}
		}
	}
	for _, f := range prtq.ctx.Fields {
		if !passwordresettoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if prtq.path != nil {
		prev, err := prtq.path(ctx)
		if err != nil {
			return err
		}
		prtq.sql = prev
	}
	if passwordresettoken.Policy == nil {
		return errors.New("generated: uninitialized passwordresettoken.Policy (forgotten import generated/runtime?)")
	}
	if err := passwordresettoken.Policy.EvalQuery(ctx, prtq); err != nil {
		return err
	}
	return nil
}

func (prtq *PasswordResetTokenQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PasswordResetToken, error) {
	var (
		nodes       = []*PasswordResetToken{}
		_spec       = prtq.querySpec()
		loadedTypes = [1]bool{
			prtq.withOwner != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PasswordResetToken).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PasswordResetToken{config: prtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = prtq.schemaConfig.PasswordResetToken
	ctx = internal.NewSchemaConfigContext(ctx, prtq.schemaConfig)
	if len(prtq.modifiers) > 0 {
		_spec.Modifiers = prtq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, prtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := prtq.withOwner; query != nil {
		if err := prtq.loadOwner(ctx, query, nodes, nil,
			func(n *PasswordResetToken, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	for i := range prtq.loadTotal {
		if err := prtq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (prtq *PasswordResetTokenQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*PasswordResetToken, init func(*PasswordResetToken), assign func(*PasswordResetToken, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PasswordResetToken)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (prtq *PasswordResetTokenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := prtq.querySpec()
	_spec.Node.Schema = prtq.schemaConfig.PasswordResetToken
	ctx = internal.NewSchemaConfigContext(ctx, prtq.schemaConfig)
	if len(prtq.modifiers) > 0 {
		_spec.Modifiers = prtq.modifiers
	}
	_spec.Node.Columns = prtq.ctx.Fields
	if len(prtq.ctx.Fields) > 0 {
		_spec.Unique = prtq.ctx.Unique != nil && *prtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, prtq.driver, _spec)
}

func (prtq *PasswordResetTokenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(passwordresettoken.Table, passwordresettoken.Columns, sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString))
	_spec.From = prtq.sql
	if unique := prtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if prtq.path != nil {
		_spec.Unique = true
	}
	if fields := prtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, passwordresettoken.FieldID)
		for i := range fields {
			if fields[i] != passwordresettoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if prtq.withOwner != nil {
			_spec.Node.AddColumnOnce(passwordresettoken.FieldOwnerID)
		}
	}
	if ps := prtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := prtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := prtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := prtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (prtq *PasswordResetTokenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(prtq.driver.Dialect())
	t1 := builder.Table(passwordresettoken.Table)
	columns := prtq.ctx.Fields
	if len(columns) == 0 {
		columns = passwordresettoken.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if prtq.sql != nil {
		selector = prtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if prtq.ctx.Unique != nil && *prtq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(prtq.schemaConfig.PasswordResetToken)
	ctx = internal.NewSchemaConfigContext(ctx, prtq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range prtq.modifiers {
		m(selector)
	}
	for _, p := range prtq.predicates {
		p(selector)
	}
	for _, p := range prtq.order {
		p(selector)
	}
	if offset := prtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := prtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (prtq *PasswordResetTokenQuery) Modify(modifiers ...func(s *sql.Selector)) *PasswordResetTokenSelect {
	prtq.modifiers = append(prtq.modifiers, modifiers...)
	return prtq.Select()
}

// PasswordResetTokenGroupBy is the group-by builder for PasswordResetToken entities.
type PasswordResetTokenGroupBy struct {
	selector
	build *PasswordResetTokenQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (prtgb *PasswordResetTokenGroupBy) Aggregate(fns ...AggregateFunc) *PasswordResetTokenGroupBy {
	prtgb.fns = append(prtgb.fns, fns...)
	return prtgb
}

// Scan applies the selector query and scans the result into the given value.
func (prtgb *PasswordResetTokenGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prtgb.build.ctx, ent.OpQueryGroupBy)
	if err := prtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PasswordResetTokenQuery, *PasswordResetTokenGroupBy](ctx, prtgb.build, prtgb, prtgb.build.inters, v)
}

func (prtgb *PasswordResetTokenGroupBy) sqlScan(ctx context.Context, root *PasswordResetTokenQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(prtgb.fns))
	for _, fn := range prtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*prtgb.flds)+len(prtgb.fns))
		for _, f := range *prtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*prtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PasswordResetTokenSelect is the builder for selecting fields of PasswordResetToken entities.
type PasswordResetTokenSelect struct {
	*PasswordResetTokenQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (prts *PasswordResetTokenSelect) Aggregate(fns ...AggregateFunc) *PasswordResetTokenSelect {
	prts.fns = append(prts.fns, fns...)
	return prts
}

// Scan applies the selector query and scans the result into the given value.
func (prts *PasswordResetTokenSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prts.ctx, ent.OpQuerySelect)
	if err := prts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PasswordResetTokenQuery, *PasswordResetTokenSelect](ctx, prts.PasswordResetTokenQuery, prts, prts.inters, v)
}

func (prts *PasswordResetTokenSelect) sqlScan(ctx context.Context, root *PasswordResetTokenQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(prts.fns))
	for _, fn := range prts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*prts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (prts *PasswordResetTokenSelect) Modify(modifiers ...func(s *sql.Selector)) *PasswordResetTokenSelect {
	prts.modifiers = append(prts.modifiers, modifiers...)
	return prts
}
