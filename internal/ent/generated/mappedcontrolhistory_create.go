// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrolhistory"
	"github.com/theopenlane/entx/history"
)

// MappedControlHistoryCreate is the builder for creating a MappedControlHistory entity.
type MappedControlHistoryCreate struct {
	config
	mutation *MappedControlHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (mchc *MappedControlHistoryCreate) SetHistoryTime(t time.Time) *MappedControlHistoryCreate {
	mchc.mutation.SetHistoryTime(t)
	return mchc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableHistoryTime(t *time.Time) *MappedControlHistoryCreate {
	if t != nil {
		mchc.SetHistoryTime(*t)
	}
	return mchc
}

// SetRef sets the "ref" field.
func (mchc *MappedControlHistoryCreate) SetRef(s string) *MappedControlHistoryCreate {
	mchc.mutation.SetRef(s)
	return mchc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableRef(s *string) *MappedControlHistoryCreate {
	if s != nil {
		mchc.SetRef(*s)
	}
	return mchc
}

// SetOperation sets the "operation" field.
func (mchc *MappedControlHistoryCreate) SetOperation(ht history.OpType) *MappedControlHistoryCreate {
	mchc.mutation.SetOperation(ht)
	return mchc
}

// SetCreatedAt sets the "created_at" field.
func (mchc *MappedControlHistoryCreate) SetCreatedAt(t time.Time) *MappedControlHistoryCreate {
	mchc.mutation.SetCreatedAt(t)
	return mchc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableCreatedAt(t *time.Time) *MappedControlHistoryCreate {
	if t != nil {
		mchc.SetCreatedAt(*t)
	}
	return mchc
}

// SetUpdatedAt sets the "updated_at" field.
func (mchc *MappedControlHistoryCreate) SetUpdatedAt(t time.Time) *MappedControlHistoryCreate {
	mchc.mutation.SetUpdatedAt(t)
	return mchc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableUpdatedAt(t *time.Time) *MappedControlHistoryCreate {
	if t != nil {
		mchc.SetUpdatedAt(*t)
	}
	return mchc
}

// SetCreatedBy sets the "created_by" field.
func (mchc *MappedControlHistoryCreate) SetCreatedBy(s string) *MappedControlHistoryCreate {
	mchc.mutation.SetCreatedBy(s)
	return mchc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableCreatedBy(s *string) *MappedControlHistoryCreate {
	if s != nil {
		mchc.SetCreatedBy(*s)
	}
	return mchc
}

// SetUpdatedBy sets the "updated_by" field.
func (mchc *MappedControlHistoryCreate) SetUpdatedBy(s string) *MappedControlHistoryCreate {
	mchc.mutation.SetUpdatedBy(s)
	return mchc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableUpdatedBy(s *string) *MappedControlHistoryCreate {
	if s != nil {
		mchc.SetUpdatedBy(*s)
	}
	return mchc
}

// SetDeletedAt sets the "deleted_at" field.
func (mchc *MappedControlHistoryCreate) SetDeletedAt(t time.Time) *MappedControlHistoryCreate {
	mchc.mutation.SetDeletedAt(t)
	return mchc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableDeletedAt(t *time.Time) *MappedControlHistoryCreate {
	if t != nil {
		mchc.SetDeletedAt(*t)
	}
	return mchc
}

// SetDeletedBy sets the "deleted_by" field.
func (mchc *MappedControlHistoryCreate) SetDeletedBy(s string) *MappedControlHistoryCreate {
	mchc.mutation.SetDeletedBy(s)
	return mchc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableDeletedBy(s *string) *MappedControlHistoryCreate {
	if s != nil {
		mchc.SetDeletedBy(*s)
	}
	return mchc
}

// SetTags sets the "tags" field.
func (mchc *MappedControlHistoryCreate) SetTags(s []string) *MappedControlHistoryCreate {
	mchc.mutation.SetTags(s)
	return mchc
}

// SetMappingType sets the "mapping_type" field.
func (mchc *MappedControlHistoryCreate) SetMappingType(s string) *MappedControlHistoryCreate {
	mchc.mutation.SetMappingType(s)
	return mchc
}

// SetNillableMappingType sets the "mapping_type" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableMappingType(s *string) *MappedControlHistoryCreate {
	if s != nil {
		mchc.SetMappingType(*s)
	}
	return mchc
}

// SetRelation sets the "relation" field.
func (mchc *MappedControlHistoryCreate) SetRelation(s string) *MappedControlHistoryCreate {
	mchc.mutation.SetRelation(s)
	return mchc
}

// SetNillableRelation sets the "relation" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableRelation(s *string) *MappedControlHistoryCreate {
	if s != nil {
		mchc.SetRelation(*s)
	}
	return mchc
}

// SetID sets the "id" field.
func (mchc *MappedControlHistoryCreate) SetID(s string) *MappedControlHistoryCreate {
	mchc.mutation.SetID(s)
	return mchc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mchc *MappedControlHistoryCreate) SetNillableID(s *string) *MappedControlHistoryCreate {
	if s != nil {
		mchc.SetID(*s)
	}
	return mchc
}

// Mutation returns the MappedControlHistoryMutation object of the builder.
func (mchc *MappedControlHistoryCreate) Mutation() *MappedControlHistoryMutation {
	return mchc.mutation
}

// Save creates the MappedControlHistory in the database.
func (mchc *MappedControlHistoryCreate) Save(ctx context.Context) (*MappedControlHistory, error) {
	mchc.defaults()
	return withHooks(ctx, mchc.sqlSave, mchc.mutation, mchc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mchc *MappedControlHistoryCreate) SaveX(ctx context.Context) *MappedControlHistory {
	v, err := mchc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mchc *MappedControlHistoryCreate) Exec(ctx context.Context) error {
	_, err := mchc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mchc *MappedControlHistoryCreate) ExecX(ctx context.Context) {
	if err := mchc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mchc *MappedControlHistoryCreate) defaults() {
	if _, ok := mchc.mutation.HistoryTime(); !ok {
		v := mappedcontrolhistory.DefaultHistoryTime()
		mchc.mutation.SetHistoryTime(v)
	}
	if _, ok := mchc.mutation.CreatedAt(); !ok {
		v := mappedcontrolhistory.DefaultCreatedAt()
		mchc.mutation.SetCreatedAt(v)
	}
	if _, ok := mchc.mutation.UpdatedAt(); !ok {
		v := mappedcontrolhistory.DefaultUpdatedAt()
		mchc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mchc.mutation.Tags(); !ok {
		v := mappedcontrolhistory.DefaultTags
		mchc.mutation.SetTags(v)
	}
	if _, ok := mchc.mutation.ID(); !ok {
		v := mappedcontrolhistory.DefaultID()
		mchc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mchc *MappedControlHistoryCreate) check() error {
	if _, ok := mchc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "MappedControlHistory.history_time"`)}
	}
	if _, ok := mchc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "MappedControlHistory.operation"`)}
	}
	if v, ok := mchc.mutation.Operation(); ok {
		if err := mappedcontrolhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "MappedControlHistory.operation": %w`, err)}
		}
	}
	return nil
}

func (mchc *MappedControlHistoryCreate) sqlSave(ctx context.Context) (*MappedControlHistory, error) {
	if err := mchc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mchc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mchc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MappedControlHistory.ID type: %T", _spec.ID.Value)
		}
	}
	mchc.mutation.id = &_node.ID
	mchc.mutation.done = true
	return _node, nil
}

func (mchc *MappedControlHistoryCreate) createSpec() (*MappedControlHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &MappedControlHistory{config: mchc.config}
		_spec = sqlgraph.NewCreateSpec(mappedcontrolhistory.Table, sqlgraph.NewFieldSpec(mappedcontrolhistory.FieldID, field.TypeString))
	)
	_spec.Schema = mchc.schemaConfig.MappedControlHistory
	if id, ok := mchc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mchc.mutation.HistoryTime(); ok {
		_spec.SetField(mappedcontrolhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := mchc.mutation.Ref(); ok {
		_spec.SetField(mappedcontrolhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := mchc.mutation.Operation(); ok {
		_spec.SetField(mappedcontrolhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := mchc.mutation.CreatedAt(); ok {
		_spec.SetField(mappedcontrolhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mchc.mutation.UpdatedAt(); ok {
		_spec.SetField(mappedcontrolhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mchc.mutation.CreatedBy(); ok {
		_spec.SetField(mappedcontrolhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := mchc.mutation.UpdatedBy(); ok {
		_spec.SetField(mappedcontrolhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := mchc.mutation.DeletedAt(); ok {
		_spec.SetField(mappedcontrolhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mchc.mutation.DeletedBy(); ok {
		_spec.SetField(mappedcontrolhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := mchc.mutation.Tags(); ok {
		_spec.SetField(mappedcontrolhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := mchc.mutation.MappingType(); ok {
		_spec.SetField(mappedcontrolhistory.FieldMappingType, field.TypeString, value)
		_node.MappingType = value
	}
	if value, ok := mchc.mutation.Relation(); ok {
		_spec.SetField(mappedcontrolhistory.FieldRelation, field.TypeString, value)
		_node.Relation = value
	}
	return _node, _spec
}

// MappedControlHistoryCreateBulk is the builder for creating many MappedControlHistory entities in bulk.
type MappedControlHistoryCreateBulk struct {
	config
	err      error
	builders []*MappedControlHistoryCreate
}

// Save creates the MappedControlHistory entities in the database.
func (mchcb *MappedControlHistoryCreateBulk) Save(ctx context.Context) ([]*MappedControlHistory, error) {
	if mchcb.err != nil {
		return nil, mchcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mchcb.builders))
	nodes := make([]*MappedControlHistory, len(mchcb.builders))
	mutators := make([]Mutator, len(mchcb.builders))
	for i := range mchcb.builders {
		func(i int, root context.Context) {
			builder := mchcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MappedControlHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mchcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mchcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mchcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mchcb *MappedControlHistoryCreateBulk) SaveX(ctx context.Context) []*MappedControlHistory {
	v, err := mchcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mchcb *MappedControlHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := mchcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mchcb *MappedControlHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := mchcb.Exec(ctx); err != nil {
		panic(err)
	}
}
