// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/pkg/enums"
)

// TrustCenterSetting is the model entity for the TrustCenterSetting schema.
type TrustCenterSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the ID of the trust center the settings belong to
	TrustCenterID string `json:"trust_center_id,omitempty"`
	// title of the trust center
	Title string `json:"title,omitempty"`
	// overview of the trust center
	Overview string `json:"overview,omitempty"`
	// URL of the logo
	LogoRemoteURL *string `json:"logo_remote_url,omitempty"`
	// The local logo file id, takes precedence over the logo remote URL
	LogoLocalFileID *string `json:"logo_local_file_id,omitempty"`
	// URL of the favicon
	FaviconRemoteURL *string `json:"favicon_remote_url,omitempty"`
	// The local favicon file id, takes precedence over the favicon remote URL
	FaviconLocalFileID *string `json:"favicon_local_file_id,omitempty"`
	// Theme mode for the trust center
	ThemeMode enums.TrustCenterThemeMode `json:"theme_mode,omitempty"`
	// primary color for the trust center
	PrimaryColor string `json:"primary_color,omitempty"`
	// font for the trust center
	Font string `json:"font,omitempty"`
	// foreground color for the trust center
	ForegroundColor string `json:"foreground_color,omitempty"`
	// background color for the trust center
	BackgroundColor string `json:"background_color,omitempty"`
	// accent/brand color for the trust center
	AccentColor string `json:"accent_color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrustCenterSettingQuery when eager-loading is set.
	Edges        TrustCenterSettingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrustCenterSettingEdges holds the relations/edges for other nodes in the graph.
type TrustCenterSettingEdges struct {
	// TrustCenter holds the value of the trust_center edge.
	TrustCenter *TrustCenter `json:"trust_center,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// LogoFile holds the value of the logo_file edge.
	LogoFile *File `json:"logo_file,omitempty"`
	// FaviconFile holds the value of the favicon_file edge.
	FaviconFile *File `json:"favicon_file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedFiles map[string][]*File
}

// TrustCenterOrErr returns the TrustCenter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterSettingEdges) TrustCenterOrErr() (*TrustCenter, error) {
	if e.TrustCenter != nil {
		return e.TrustCenter, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: trustcenter.Label}
	}
	return nil, &NotLoadedError{edge: "trust_center"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e TrustCenterSettingEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// LogoFileOrErr returns the LogoFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterSettingEdges) LogoFileOrErr() (*File, error) {
	if e.LogoFile != nil {
		return e.LogoFile, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "logo_file"}
}

// FaviconFileOrErr returns the FaviconFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterSettingEdges) FaviconFileOrErr() (*File, error) {
	if e.FaviconFile != nil {
		return e.FaviconFile, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "favicon_file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcentersetting.FieldID, trustcentersetting.FieldCreatedBy, trustcentersetting.FieldUpdatedBy, trustcentersetting.FieldDeletedBy, trustcentersetting.FieldTrustCenterID, trustcentersetting.FieldTitle, trustcentersetting.FieldOverview, trustcentersetting.FieldLogoRemoteURL, trustcentersetting.FieldLogoLocalFileID, trustcentersetting.FieldFaviconRemoteURL, trustcentersetting.FieldFaviconLocalFileID, trustcentersetting.FieldThemeMode, trustcentersetting.FieldPrimaryColor, trustcentersetting.FieldFont, trustcentersetting.FieldForegroundColor, trustcentersetting.FieldBackgroundColor, trustcentersetting.FieldAccentColor:
			values[i] = new(sql.NullString)
		case trustcentersetting.FieldCreatedAt, trustcentersetting.FieldUpdatedAt, trustcentersetting.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterSetting fields.
func (_m *TrustCenterSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcentersetting.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case trustcentersetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case trustcentersetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case trustcentersetting.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case trustcentersetting.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case trustcentersetting.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case trustcentersetting.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case trustcentersetting.FieldTrustCenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_center_id", values[i])
			} else if value.Valid {
				_m.TrustCenterID = value.String
			}
		case trustcentersetting.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case trustcentersetting.FieldOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overview", values[i])
			} else if value.Valid {
				_m.Overview = value.String
			}
		case trustcentersetting.FieldLogoRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_remote_url", values[i])
			} else if value.Valid {
				_m.LogoRemoteURL = new(string)
				*_m.LogoRemoteURL = value.String
			}
		case trustcentersetting.FieldLogoLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_local_file_id", values[i])
			} else if value.Valid {
				_m.LogoLocalFileID = new(string)
				*_m.LogoLocalFileID = value.String
			}
		case trustcentersetting.FieldFaviconRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favicon_remote_url", values[i])
			} else if value.Valid {
				_m.FaviconRemoteURL = new(string)
				*_m.FaviconRemoteURL = value.String
			}
		case trustcentersetting.FieldFaviconLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favicon_local_file_id", values[i])
			} else if value.Valid {
				_m.FaviconLocalFileID = new(string)
				*_m.FaviconLocalFileID = value.String
			}
		case trustcentersetting.FieldThemeMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field theme_mode", values[i])
			} else if value.Valid {
				_m.ThemeMode = enums.TrustCenterThemeMode(value.String)
			}
		case trustcentersetting.FieldPrimaryColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_color", values[i])
			} else if value.Valid {
				_m.PrimaryColor = value.String
			}
		case trustcentersetting.FieldFont:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field font", values[i])
			} else if value.Valid {
				_m.Font = value.String
			}
		case trustcentersetting.FieldForegroundColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field foreground_color", values[i])
			} else if value.Valid {
				_m.ForegroundColor = value.String
			}
		case trustcentersetting.FieldBackgroundColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background_color", values[i])
			} else if value.Valid {
				_m.BackgroundColor = value.String
			}
		case trustcentersetting.FieldAccentColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accent_color", values[i])
			} else if value.Valid {
				_m.AccentColor = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterSetting.
// This includes values selected through modifiers, order, etc.
func (_m *TrustCenterSetting) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTrustCenter queries the "trust_center" edge of the TrustCenterSetting entity.
func (_m *TrustCenterSetting) QueryTrustCenter() *TrustCenterQuery {
	return NewTrustCenterSettingClient(_m.config).QueryTrustCenter(_m)
}

// QueryFiles queries the "files" edge of the TrustCenterSetting entity.
func (_m *TrustCenterSetting) QueryFiles() *FileQuery {
	return NewTrustCenterSettingClient(_m.config).QueryFiles(_m)
}

// QueryLogoFile queries the "logo_file" edge of the TrustCenterSetting entity.
func (_m *TrustCenterSetting) QueryLogoFile() *FileQuery {
	return NewTrustCenterSettingClient(_m.config).QueryLogoFile(_m)
}

// QueryFaviconFile queries the "favicon_file" edge of the TrustCenterSetting entity.
func (_m *TrustCenterSetting) QueryFaviconFile() *FileQuery {
	return NewTrustCenterSettingClient(_m.config).QueryFaviconFile(_m)
}

// Update returns a builder for updating this TrustCenterSetting.
// Note that you need to call TrustCenterSetting.Unwrap() before calling this method if this TrustCenterSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TrustCenterSetting) Update() *TrustCenterSettingUpdateOne {
	return NewTrustCenterSettingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TrustCenterSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TrustCenterSetting) Unwrap() *TrustCenterSetting {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterSetting is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TrustCenterSetting) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("trust_center_id=")
	builder.WriteString(_m.TrustCenterID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("overview=")
	builder.WriteString(_m.Overview)
	builder.WriteString(", ")
	if v := _m.LogoRemoteURL; v != nil {
		builder.WriteString("logo_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LogoLocalFileID; v != nil {
		builder.WriteString("logo_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.FaviconRemoteURL; v != nil {
		builder.WriteString("favicon_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.FaviconLocalFileID; v != nil {
		builder.WriteString("favicon_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("theme_mode=")
	builder.WriteString(fmt.Sprintf("%v", _m.ThemeMode))
	builder.WriteString(", ")
	builder.WriteString("primary_color=")
	builder.WriteString(_m.PrimaryColor)
	builder.WriteString(", ")
	builder.WriteString("font=")
	builder.WriteString(_m.Font)
	builder.WriteString(", ")
	builder.WriteString("foreground_color=")
	builder.WriteString(_m.ForegroundColor)
	builder.WriteString(", ")
	builder.WriteString("background_color=")
	builder.WriteString(_m.BackgroundColor)
	builder.WriteString(", ")
	builder.WriteString("accent_color=")
	builder.WriteString(_m.AccentColor)
	builder.WriteByte(')')
	return builder.String()
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *TrustCenterSetting) NamedFiles(name string) ([]*File, error) {
	if _m.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *TrustCenterSetting) appendNamedFiles(name string, edges ...*File) {
	if _m.Edges.namedFiles == nil {
		_m.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		_m.Edges.namedFiles[name] = []*File{}
	} else {
		_m.Edges.namedFiles[name] = append(_m.Edges.namedFiles[name], edges...)
	}
}

// TrustCenterSettings is a parsable slice of TrustCenterSetting.
type TrustCenterSettings []*TrustCenterSetting
