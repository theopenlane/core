// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
)

// TrustCenterSetting is the model entity for the TrustCenterSetting schema.
type TrustCenterSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the ID of the trust center the settings belong to
	TrustCenterID string `json:"trust_center_id,omitempty"`
	// title of the trust center
	Title string `json:"title,omitempty"`
	// overview of the trust center
	Overview string `json:"overview,omitempty"`
	// logo url for the trust center
	LogoURL string `json:"logo_url,omitempty"`
	// favicon url for the trust center
	FaviconURL string `json:"favicon_url,omitempty"`
	// primary color for the trust center
	PrimaryColor string `json:"primary_color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrustCenterSettingQuery when eager-loading is set.
	Edges        TrustCenterSettingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrustCenterSettingEdges holds the relations/edges for other nodes in the graph.
type TrustCenterSettingEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// TrustCenter holds the value of the trust_center edge.
	TrustCenter *TrustCenter `json:"trust_center,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterSettingEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// TrustCenterOrErr returns the TrustCenter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterSettingEdges) TrustCenterOrErr() (*TrustCenter, error) {
	if e.TrustCenter != nil {
		return e.TrustCenter, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: trustcenter.Label}
	}
	return nil, &NotLoadedError{edge: "trust_center"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcentersetting.FieldTags:
			values[i] = new([]byte)
		case trustcentersetting.FieldID, trustcentersetting.FieldCreatedBy, trustcentersetting.FieldUpdatedBy, trustcentersetting.FieldDeletedBy, trustcentersetting.FieldOwnerID, trustcentersetting.FieldTrustCenterID, trustcentersetting.FieldTitle, trustcentersetting.FieldOverview, trustcentersetting.FieldLogoURL, trustcentersetting.FieldFaviconURL, trustcentersetting.FieldPrimaryColor:
			values[i] = new(sql.NullString)
		case trustcentersetting.FieldCreatedAt, trustcentersetting.FieldUpdatedAt, trustcentersetting.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterSetting fields.
func (tcs *TrustCenterSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcentersetting.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tcs.ID = value.String
			}
		case trustcentersetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tcs.CreatedAt = value.Time
			}
		case trustcentersetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tcs.UpdatedAt = value.Time
			}
		case trustcentersetting.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tcs.CreatedBy = value.String
			}
		case trustcentersetting.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tcs.UpdatedBy = value.String
			}
		case trustcentersetting.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tcs.DeletedAt = value.Time
			}
		case trustcentersetting.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				tcs.DeletedBy = value.String
			}
		case trustcentersetting.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tcs.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case trustcentersetting.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				tcs.OwnerID = value.String
			}
		case trustcentersetting.FieldTrustCenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_center_id", values[i])
			} else if value.Valid {
				tcs.TrustCenterID = value.String
			}
		case trustcentersetting.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tcs.Title = value.String
			}
		case trustcentersetting.FieldOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overview", values[i])
			} else if value.Valid {
				tcs.Overview = value.String
			}
		case trustcentersetting.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				tcs.LogoURL = value.String
			}
		case trustcentersetting.FieldFaviconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favicon_url", values[i])
			} else if value.Valid {
				tcs.FaviconURL = value.String
			}
		case trustcentersetting.FieldPrimaryColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_color", values[i])
			} else if value.Valid {
				tcs.PrimaryColor = value.String
			}
		default:
			tcs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterSetting.
// This includes values selected through modifiers, order, etc.
func (tcs *TrustCenterSetting) Value(name string) (ent.Value, error) {
	return tcs.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the TrustCenterSetting entity.
func (tcs *TrustCenterSetting) QueryOwner() *OrganizationQuery {
	return NewTrustCenterSettingClient(tcs.config).QueryOwner(tcs)
}

// QueryTrustCenter queries the "trust_center" edge of the TrustCenterSetting entity.
func (tcs *TrustCenterSetting) QueryTrustCenter() *TrustCenterQuery {
	return NewTrustCenterSettingClient(tcs.config).QueryTrustCenter(tcs)
}

// Update returns a builder for updating this TrustCenterSetting.
// Note that you need to call TrustCenterSetting.Unwrap() before calling this method if this TrustCenterSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (tcs *TrustCenterSetting) Update() *TrustCenterSettingUpdateOne {
	return NewTrustCenterSettingClient(tcs.config).UpdateOne(tcs)
}

// Unwrap unwraps the TrustCenterSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tcs *TrustCenterSetting) Unwrap() *TrustCenterSetting {
	_tx, ok := tcs.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterSetting is not a transactional entity")
	}
	tcs.config.driver = _tx.drv
	return tcs
}

// String implements the fmt.Stringer.
func (tcs *TrustCenterSetting) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tcs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tcs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tcs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tcs.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tcs.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tcs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(tcs.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", tcs.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(tcs.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("trust_center_id=")
	builder.WriteString(tcs.TrustCenterID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(tcs.Title)
	builder.WriteString(", ")
	builder.WriteString("overview=")
	builder.WriteString(tcs.Overview)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(tcs.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("favicon_url=")
	builder.WriteString(tcs.FaviconURL)
	builder.WriteString(", ")
	builder.WriteString("primary_color=")
	builder.WriteString(tcs.PrimaryColor)
	builder.WriteByte(')')
	return builder.String()
}

// TrustCenterSettings is a parsable slice of TrustCenterSetting.
type TrustCenterSettings []*TrustCenterSetting
