// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterwatermarkconfig"
	"github.com/theopenlane/core/pkg/enums"
)

// TrustCenterWatermarkConfig is the model entity for the TrustCenterWatermarkConfig schema.
type TrustCenterWatermarkConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// ID of the trust center
	TrustCenterID string `json:"trust_center_id,omitempty"`
	// ID of the file containing the document
	LogoID *string `json:"logo_id,omitempty"`
	// text to watermark the document with
	Text string `json:"text,omitempty"`
	// font size of the watermark text
	FontSize float64 `json:"font_size,omitempty"`
	// opacity of the watermark text
	Opacity float64 `json:"opacity,omitempty"`
	// rotation of the watermark text
	Rotation float64 `json:"rotation,omitempty"`
	// color of the watermark text
	Color string `json:"color,omitempty"`
	// font of the watermark text
	Font enums.Font `json:"font,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrustCenterWatermarkConfigQuery when eager-loading is set.
	Edges        TrustCenterWatermarkConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrustCenterWatermarkConfigEdges holds the relations/edges for other nodes in the graph.
type TrustCenterWatermarkConfigEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// TrustCenter holds the value of the trust_center edge.
	TrustCenter []*TrustCenter `json:"trust_center,omitempty"`
	// the file containing the image for watermarking, if applicable
	File *File `json:"file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTrustCenter map[string][]*TrustCenter
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterWatermarkConfigEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// TrustCenterOrErr returns the TrustCenter value or an error if the edge
// was not loaded in eager-loading.
func (e TrustCenterWatermarkConfigEdges) TrustCenterOrErr() ([]*TrustCenter, error) {
	if e.loadedTypes[1] {
		return e.TrustCenter, nil
	}
	return nil, &NotLoadedError{edge: "trust_center"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterWatermarkConfigEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterWatermarkConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcenterwatermarkconfig.FieldFontSize, trustcenterwatermarkconfig.FieldOpacity, trustcenterwatermarkconfig.FieldRotation:
			values[i] = new(sql.NullFloat64)
		case trustcenterwatermarkconfig.FieldID, trustcenterwatermarkconfig.FieldCreatedBy, trustcenterwatermarkconfig.FieldUpdatedBy, trustcenterwatermarkconfig.FieldDeletedBy, trustcenterwatermarkconfig.FieldOwnerID, trustcenterwatermarkconfig.FieldTrustCenterID, trustcenterwatermarkconfig.FieldLogoID, trustcenterwatermarkconfig.FieldText, trustcenterwatermarkconfig.FieldColor, trustcenterwatermarkconfig.FieldFont:
			values[i] = new(sql.NullString)
		case trustcenterwatermarkconfig.FieldCreatedAt, trustcenterwatermarkconfig.FieldUpdatedAt, trustcenterwatermarkconfig.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterWatermarkConfig fields.
func (_m *TrustCenterWatermarkConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcenterwatermarkconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case trustcenterwatermarkconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case trustcenterwatermarkconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case trustcenterwatermarkconfig.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case trustcenterwatermarkconfig.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case trustcenterwatermarkconfig.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case trustcenterwatermarkconfig.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case trustcenterwatermarkconfig.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case trustcenterwatermarkconfig.FieldTrustCenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_center_id", values[i])
			} else if value.Valid {
				_m.TrustCenterID = value.String
			}
		case trustcenterwatermarkconfig.FieldLogoID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_id", values[i])
			} else if value.Valid {
				_m.LogoID = new(string)
				*_m.LogoID = value.String
			}
		case trustcenterwatermarkconfig.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				_m.Text = value.String
			}
		case trustcenterwatermarkconfig.FieldFontSize:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field font_size", values[i])
			} else if value.Valid {
				_m.FontSize = value.Float64
			}
		case trustcenterwatermarkconfig.FieldOpacity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field opacity", values[i])
			} else if value.Valid {
				_m.Opacity = value.Float64
			}
		case trustcenterwatermarkconfig.FieldRotation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rotation", values[i])
			} else if value.Valid {
				_m.Rotation = value.Float64
			}
		case trustcenterwatermarkconfig.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		case trustcenterwatermarkconfig.FieldFont:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field font", values[i])
			} else if value.Valid {
				_m.Font = enums.Font(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterWatermarkConfig.
// This includes values selected through modifiers, order, etc.
func (_m *TrustCenterWatermarkConfig) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the TrustCenterWatermarkConfig entity.
func (_m *TrustCenterWatermarkConfig) QueryOwner() *OrganizationQuery {
	return NewTrustCenterWatermarkConfigClient(_m.config).QueryOwner(_m)
}

// QueryTrustCenter queries the "trust_center" edge of the TrustCenterWatermarkConfig entity.
func (_m *TrustCenterWatermarkConfig) QueryTrustCenter() *TrustCenterQuery {
	return NewTrustCenterWatermarkConfigClient(_m.config).QueryTrustCenter(_m)
}

// QueryFile queries the "file" edge of the TrustCenterWatermarkConfig entity.
func (_m *TrustCenterWatermarkConfig) QueryFile() *FileQuery {
	return NewTrustCenterWatermarkConfigClient(_m.config).QueryFile(_m)
}

// Update returns a builder for updating this TrustCenterWatermarkConfig.
// Note that you need to call TrustCenterWatermarkConfig.Unwrap() before calling this method if this TrustCenterWatermarkConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TrustCenterWatermarkConfig) Update() *TrustCenterWatermarkConfigUpdateOne {
	return NewTrustCenterWatermarkConfigClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TrustCenterWatermarkConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TrustCenterWatermarkConfig) Unwrap() *TrustCenterWatermarkConfig {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterWatermarkConfig is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TrustCenterWatermarkConfig) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterWatermarkConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("trust_center_id=")
	builder.WriteString(_m.TrustCenterID)
	builder.WriteString(", ")
	if v := _m.LogoID; v != nil {
		builder.WriteString("logo_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(_m.Text)
	builder.WriteString(", ")
	builder.WriteString("font_size=")
	builder.WriteString(fmt.Sprintf("%v", _m.FontSize))
	builder.WriteString(", ")
	builder.WriteString("opacity=")
	builder.WriteString(fmt.Sprintf("%v", _m.Opacity))
	builder.WriteString(", ")
	builder.WriteString("rotation=")
	builder.WriteString(fmt.Sprintf("%v", _m.Rotation))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteString(", ")
	builder.WriteString("font=")
	builder.WriteString(fmt.Sprintf("%v", _m.Font))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTrustCenter returns the TrustCenter named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *TrustCenterWatermarkConfig) NamedTrustCenter(name string) ([]*TrustCenter, error) {
	if _m.Edges.namedTrustCenter == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTrustCenter[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *TrustCenterWatermarkConfig) appendNamedTrustCenter(name string, edges ...*TrustCenter) {
	if _m.Edges.namedTrustCenter == nil {
		_m.Edges.namedTrustCenter = make(map[string][]*TrustCenter)
	}
	if len(edges) == 0 {
		_m.Edges.namedTrustCenter[name] = []*TrustCenter{}
	} else {
		_m.Edges.namedTrustCenter[name] = append(_m.Edges.namedTrustCenter[name], edges...)
	}
}

// TrustCenterWatermarkConfigs is a parsable slice of TrustCenterWatermarkConfig.
type TrustCenterWatermarkConfigs []*TrustCenterWatermarkConfig
