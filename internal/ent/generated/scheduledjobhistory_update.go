// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ScheduledJobHistoryUpdate is the builder for updating ScheduledJobHistory entities.
type ScheduledJobHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ScheduledJobHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScheduledJobHistoryUpdate builder.
func (sjhu *ScheduledJobHistoryUpdate) Where(ps ...predicate.ScheduledJobHistory) *ScheduledJobHistoryUpdate {
	sjhu.mutation.Where(ps...)
	return sjhu
}

// SetUpdatedAt sets the "updated_at" field.
func (sjhu *ScheduledJobHistoryUpdate) SetUpdatedAt(t time.Time) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetUpdatedAt(t)
	return sjhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearUpdatedAt() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearUpdatedAt()
	return sjhu
}

// SetUpdatedBy sets the "updated_by" field.
func (sjhu *ScheduledJobHistoryUpdate) SetUpdatedBy(s string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetUpdatedBy(s)
	return sjhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableUpdatedBy(s *string) *ScheduledJobHistoryUpdate {
	if s != nil {
		sjhu.SetUpdatedBy(*s)
	}
	return sjhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearUpdatedBy() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearUpdatedBy()
	return sjhu
}

// SetDeletedAt sets the "deleted_at" field.
func (sjhu *ScheduledJobHistoryUpdate) SetDeletedAt(t time.Time) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetDeletedAt(t)
	return sjhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ScheduledJobHistoryUpdate {
	if t != nil {
		sjhu.SetDeletedAt(*t)
	}
	return sjhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearDeletedAt() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearDeletedAt()
	return sjhu
}

// SetDeletedBy sets the "deleted_by" field.
func (sjhu *ScheduledJobHistoryUpdate) SetDeletedBy(s string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetDeletedBy(s)
	return sjhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableDeletedBy(s *string) *ScheduledJobHistoryUpdate {
	if s != nil {
		sjhu.SetDeletedBy(*s)
	}
	return sjhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearDeletedBy() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearDeletedBy()
	return sjhu
}

// SetTags sets the "tags" field.
func (sjhu *ScheduledJobHistoryUpdate) SetTags(s []string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetTags(s)
	return sjhu
}

// AppendTags appends s to the "tags" field.
func (sjhu *ScheduledJobHistoryUpdate) AppendTags(s []string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.AppendTags(s)
	return sjhu
}

// ClearTags clears the value of the "tags" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearTags() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearTags()
	return sjhu
}

// SetOwnerID sets the "owner_id" field.
func (sjhu *ScheduledJobHistoryUpdate) SetOwnerID(s string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetOwnerID(s)
	return sjhu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableOwnerID(s *string) *ScheduledJobHistoryUpdate {
	if s != nil {
		sjhu.SetOwnerID(*s)
	}
	return sjhu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearOwnerID() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearOwnerID()
	return sjhu
}

// SetTitle sets the "title" field.
func (sjhu *ScheduledJobHistoryUpdate) SetTitle(s string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetTitle(s)
	return sjhu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableTitle(s *string) *ScheduledJobHistoryUpdate {
	if s != nil {
		sjhu.SetTitle(*s)
	}
	return sjhu
}

// SetDescription sets the "description" field.
func (sjhu *ScheduledJobHistoryUpdate) SetDescription(s string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetDescription(s)
	return sjhu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableDescription(s *string) *ScheduledJobHistoryUpdate {
	if s != nil {
		sjhu.SetDescription(*s)
	}
	return sjhu
}

// ClearDescription clears the value of the "description" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearDescription() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearDescription()
	return sjhu
}

// SetJobType sets the "job_type" field.
func (sjhu *ScheduledJobHistoryUpdate) SetJobType(et enums.JobType) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetJobType(et)
	return sjhu
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableJobType(et *enums.JobType) *ScheduledJobHistoryUpdate {
	if et != nil {
		sjhu.SetJobType(*et)
	}
	return sjhu
}

// SetScript sets the "script" field.
func (sjhu *ScheduledJobHistoryUpdate) SetScript(s string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetScript(s)
	return sjhu
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableScript(s *string) *ScheduledJobHistoryUpdate {
	if s != nil {
		sjhu.SetScript(*s)
	}
	return sjhu
}

// ClearScript clears the value of the "script" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearScript() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearScript()
	return sjhu
}

// SetConfiguration sets the "configuration" field.
func (sjhu *ScheduledJobHistoryUpdate) SetConfiguration(mc models.JobConfiguration) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetConfiguration(mc)
	return sjhu
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableConfiguration(mc *models.JobConfiguration) *ScheduledJobHistoryUpdate {
	if mc != nil {
		sjhu.SetConfiguration(*mc)
	}
	return sjhu
}

// SetCadence sets the "cadence" field.
func (sjhu *ScheduledJobHistoryUpdate) SetCadence(mc models.JobCadence) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetCadence(mc)
	return sjhu
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableCadence(mc *models.JobCadence) *ScheduledJobHistoryUpdate {
	if mc != nil {
		sjhu.SetCadence(*mc)
	}
	return sjhu
}

// ClearCadence clears the value of the "cadence" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearCadence() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearCadence()
	return sjhu
}

// SetCron sets the "cron" field.
func (sjhu *ScheduledJobHistoryUpdate) SetCron(s string) *ScheduledJobHistoryUpdate {
	sjhu.mutation.SetCron(s)
	return sjhu
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (sjhu *ScheduledJobHistoryUpdate) SetNillableCron(s *string) *ScheduledJobHistoryUpdate {
	if s != nil {
		sjhu.SetCron(*s)
	}
	return sjhu
}

// ClearCron clears the value of the "cron" field.
func (sjhu *ScheduledJobHistoryUpdate) ClearCron() *ScheduledJobHistoryUpdate {
	sjhu.mutation.ClearCron()
	return sjhu
}

// Mutation returns the ScheduledJobHistoryMutation object of the builder.
func (sjhu *ScheduledJobHistoryUpdate) Mutation() *ScheduledJobHistoryMutation {
	return sjhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sjhu *ScheduledJobHistoryUpdate) Save(ctx context.Context) (int, error) {
	sjhu.defaults()
	return withHooks(ctx, sjhu.sqlSave, sjhu.mutation, sjhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjhu *ScheduledJobHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := sjhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sjhu *ScheduledJobHistoryUpdate) Exec(ctx context.Context) error {
	_, err := sjhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjhu *ScheduledJobHistoryUpdate) ExecX(ctx context.Context) {
	if err := sjhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjhu *ScheduledJobHistoryUpdate) defaults() {
	if _, ok := sjhu.mutation.UpdatedAt(); !ok && !sjhu.mutation.UpdatedAtCleared() {
		v := scheduledjobhistory.UpdateDefaultUpdatedAt()
		sjhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjhu *ScheduledJobHistoryUpdate) check() error {
	if v, ok := sjhu.mutation.JobType(); ok {
		if err := scheduledjobhistory.JobTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_type", err: fmt.Errorf(`generated: validator failed for field "ScheduledJobHistory.job_type": %w`, err)}
		}
	}
	if v, ok := sjhu.mutation.Cadence(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`generated: validator failed for field "ScheduledJobHistory.cadence": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sjhu *ScheduledJobHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScheduledJobHistoryUpdate {
	sjhu.modifiers = append(sjhu.modifiers, modifiers...)
	return sjhu
}

func (sjhu *ScheduledJobHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sjhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledjobhistory.Table, scheduledjobhistory.Columns, sqlgraph.NewFieldSpec(scheduledjobhistory.FieldID, field.TypeString))
	if ps := sjhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sjhu.mutation.RefCleared() {
		_spec.ClearField(scheduledjobhistory.FieldRef, field.TypeString)
	}
	if sjhu.mutation.CreatedAtCleared() {
		_spec.ClearField(scheduledjobhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sjhu.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjobhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if sjhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(scheduledjobhistory.FieldUpdatedAt, field.TypeTime)
	}
	if sjhu.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledjobhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sjhu.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjobhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if sjhu.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledjobhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := sjhu.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjobhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if sjhu.mutation.DeletedAtCleared() {
		_spec.ClearField(scheduledjobhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sjhu.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjobhistory.FieldDeletedBy, field.TypeString, value)
	}
	if sjhu.mutation.DeletedByCleared() {
		_spec.ClearField(scheduledjobhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := sjhu.mutation.Tags(); ok {
		_spec.SetField(scheduledjobhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := sjhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scheduledjobhistory.FieldTags, value)
		})
	}
	if sjhu.mutation.TagsCleared() {
		_spec.ClearField(scheduledjobhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := sjhu.mutation.OwnerID(); ok {
		_spec.SetField(scheduledjobhistory.FieldOwnerID, field.TypeString, value)
	}
	if sjhu.mutation.OwnerIDCleared() {
		_spec.ClearField(scheduledjobhistory.FieldOwnerID, field.TypeString)
	}
	if sjhu.mutation.SystemOwnedCleared() {
		_spec.ClearField(scheduledjobhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := sjhu.mutation.Title(); ok {
		_spec.SetField(scheduledjobhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := sjhu.mutation.Description(); ok {
		_spec.SetField(scheduledjobhistory.FieldDescription, field.TypeString, value)
	}
	if sjhu.mutation.DescriptionCleared() {
		_spec.ClearField(scheduledjobhistory.FieldDescription, field.TypeString)
	}
	if value, ok := sjhu.mutation.JobType(); ok {
		_spec.SetField(scheduledjobhistory.FieldJobType, field.TypeEnum, value)
	}
	if value, ok := sjhu.mutation.Script(); ok {
		_spec.SetField(scheduledjobhistory.FieldScript, field.TypeString, value)
	}
	if sjhu.mutation.ScriptCleared() {
		_spec.ClearField(scheduledjobhistory.FieldScript, field.TypeString)
	}
	if value, ok := sjhu.mutation.Configuration(); ok {
		_spec.SetField(scheduledjobhistory.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := sjhu.mutation.Cadence(); ok {
		_spec.SetField(scheduledjobhistory.FieldCadence, field.TypeJSON, value)
	}
	if sjhu.mutation.CadenceCleared() {
		_spec.ClearField(scheduledjobhistory.FieldCadence, field.TypeJSON)
	}
	if value, ok := sjhu.mutation.Cron(); ok {
		_spec.SetField(scheduledjobhistory.FieldCron, field.TypeString, value)
	}
	if sjhu.mutation.CronCleared() {
		_spec.ClearField(scheduledjobhistory.FieldCron, field.TypeString)
	}
	_spec.Node.Schema = sjhu.schemaConfig.ScheduledJobHistory
	ctx = internal.NewSchemaConfigContext(ctx, sjhu.schemaConfig)
	_spec.AddModifiers(sjhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sjhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledjobhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sjhu.mutation.done = true
	return n, nil
}

// ScheduledJobHistoryUpdateOne is the builder for updating a single ScheduledJobHistory entity.
type ScheduledJobHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScheduledJobHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetUpdatedAt(t time.Time) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetUpdatedAt(t)
	return sjhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearUpdatedAt() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearUpdatedAt()
	return sjhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetUpdatedBy(s string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetUpdatedBy(s)
	return sjhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ScheduledJobHistoryUpdateOne {
	if s != nil {
		sjhuo.SetUpdatedBy(*s)
	}
	return sjhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearUpdatedBy() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearUpdatedBy()
	return sjhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetDeletedAt(t time.Time) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetDeletedAt(t)
	return sjhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ScheduledJobHistoryUpdateOne {
	if t != nil {
		sjhuo.SetDeletedAt(*t)
	}
	return sjhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearDeletedAt() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearDeletedAt()
	return sjhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetDeletedBy(s string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetDeletedBy(s)
	return sjhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableDeletedBy(s *string) *ScheduledJobHistoryUpdateOne {
	if s != nil {
		sjhuo.SetDeletedBy(*s)
	}
	return sjhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearDeletedBy() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearDeletedBy()
	return sjhuo
}

// SetTags sets the "tags" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetTags(s []string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetTags(s)
	return sjhuo
}

// AppendTags appends s to the "tags" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) AppendTags(s []string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.AppendTags(s)
	return sjhuo
}

// ClearTags clears the value of the "tags" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearTags() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearTags()
	return sjhuo
}

// SetOwnerID sets the "owner_id" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetOwnerID(s string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetOwnerID(s)
	return sjhuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableOwnerID(s *string) *ScheduledJobHistoryUpdateOne {
	if s != nil {
		sjhuo.SetOwnerID(*s)
	}
	return sjhuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearOwnerID() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearOwnerID()
	return sjhuo
}

// SetTitle sets the "title" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetTitle(s string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetTitle(s)
	return sjhuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableTitle(s *string) *ScheduledJobHistoryUpdateOne {
	if s != nil {
		sjhuo.SetTitle(*s)
	}
	return sjhuo
}

// SetDescription sets the "description" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetDescription(s string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetDescription(s)
	return sjhuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableDescription(s *string) *ScheduledJobHistoryUpdateOne {
	if s != nil {
		sjhuo.SetDescription(*s)
	}
	return sjhuo
}

// ClearDescription clears the value of the "description" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearDescription() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearDescription()
	return sjhuo
}

// SetJobType sets the "job_type" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetJobType(et enums.JobType) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetJobType(et)
	return sjhuo
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableJobType(et *enums.JobType) *ScheduledJobHistoryUpdateOne {
	if et != nil {
		sjhuo.SetJobType(*et)
	}
	return sjhuo
}

// SetScript sets the "script" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetScript(s string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetScript(s)
	return sjhuo
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableScript(s *string) *ScheduledJobHistoryUpdateOne {
	if s != nil {
		sjhuo.SetScript(*s)
	}
	return sjhuo
}

// ClearScript clears the value of the "script" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearScript() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearScript()
	return sjhuo
}

// SetConfiguration sets the "configuration" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetConfiguration(mc models.JobConfiguration) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetConfiguration(mc)
	return sjhuo
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableConfiguration(mc *models.JobConfiguration) *ScheduledJobHistoryUpdateOne {
	if mc != nil {
		sjhuo.SetConfiguration(*mc)
	}
	return sjhuo
}

// SetCadence sets the "cadence" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetCadence(mc models.JobCadence) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetCadence(mc)
	return sjhuo
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableCadence(mc *models.JobCadence) *ScheduledJobHistoryUpdateOne {
	if mc != nil {
		sjhuo.SetCadence(*mc)
	}
	return sjhuo
}

// ClearCadence clears the value of the "cadence" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearCadence() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearCadence()
	return sjhuo
}

// SetCron sets the "cron" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetCron(s string) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.SetCron(s)
	return sjhuo
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (sjhuo *ScheduledJobHistoryUpdateOne) SetNillableCron(s *string) *ScheduledJobHistoryUpdateOne {
	if s != nil {
		sjhuo.SetCron(*s)
	}
	return sjhuo
}

// ClearCron clears the value of the "cron" field.
func (sjhuo *ScheduledJobHistoryUpdateOne) ClearCron() *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.ClearCron()
	return sjhuo
}

// Mutation returns the ScheduledJobHistoryMutation object of the builder.
func (sjhuo *ScheduledJobHistoryUpdateOne) Mutation() *ScheduledJobHistoryMutation {
	return sjhuo.mutation
}

// Where appends a list predicates to the ScheduledJobHistoryUpdate builder.
func (sjhuo *ScheduledJobHistoryUpdateOne) Where(ps ...predicate.ScheduledJobHistory) *ScheduledJobHistoryUpdateOne {
	sjhuo.mutation.Where(ps...)
	return sjhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjhuo *ScheduledJobHistoryUpdateOne) Select(field string, fields ...string) *ScheduledJobHistoryUpdateOne {
	sjhuo.fields = append([]string{field}, fields...)
	return sjhuo
}

// Save executes the query and returns the updated ScheduledJobHistory entity.
func (sjhuo *ScheduledJobHistoryUpdateOne) Save(ctx context.Context) (*ScheduledJobHistory, error) {
	sjhuo.defaults()
	return withHooks(ctx, sjhuo.sqlSave, sjhuo.mutation, sjhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjhuo *ScheduledJobHistoryUpdateOne) SaveX(ctx context.Context) *ScheduledJobHistory {
	node, err := sjhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjhuo *ScheduledJobHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := sjhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjhuo *ScheduledJobHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := sjhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjhuo *ScheduledJobHistoryUpdateOne) defaults() {
	if _, ok := sjhuo.mutation.UpdatedAt(); !ok && !sjhuo.mutation.UpdatedAtCleared() {
		v := scheduledjobhistory.UpdateDefaultUpdatedAt()
		sjhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjhuo *ScheduledJobHistoryUpdateOne) check() error {
	if v, ok := sjhuo.mutation.JobType(); ok {
		if err := scheduledjobhistory.JobTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_type", err: fmt.Errorf(`generated: validator failed for field "ScheduledJobHistory.job_type": %w`, err)}
		}
	}
	if v, ok := sjhuo.mutation.Cadence(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`generated: validator failed for field "ScheduledJobHistory.cadence": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sjhuo *ScheduledJobHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScheduledJobHistoryUpdateOne {
	sjhuo.modifiers = append(sjhuo.modifiers, modifiers...)
	return sjhuo
}

func (sjhuo *ScheduledJobHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ScheduledJobHistory, err error) {
	if err := sjhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledjobhistory.Table, scheduledjobhistory.Columns, sqlgraph.NewFieldSpec(scheduledjobhistory.FieldID, field.TypeString))
	id, ok := sjhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ScheduledJobHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sjhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduledjobhistory.FieldID)
		for _, f := range fields {
			if !scheduledjobhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != scheduledjobhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sjhuo.mutation.RefCleared() {
		_spec.ClearField(scheduledjobhistory.FieldRef, field.TypeString)
	}
	if sjhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(scheduledjobhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sjhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjobhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if sjhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(scheduledjobhistory.FieldUpdatedAt, field.TypeTime)
	}
	if sjhuo.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledjobhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sjhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjobhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if sjhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledjobhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := sjhuo.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjobhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if sjhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(scheduledjobhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sjhuo.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjobhistory.FieldDeletedBy, field.TypeString, value)
	}
	if sjhuo.mutation.DeletedByCleared() {
		_spec.ClearField(scheduledjobhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := sjhuo.mutation.Tags(); ok {
		_spec.SetField(scheduledjobhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := sjhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scheduledjobhistory.FieldTags, value)
		})
	}
	if sjhuo.mutation.TagsCleared() {
		_spec.ClearField(scheduledjobhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := sjhuo.mutation.OwnerID(); ok {
		_spec.SetField(scheduledjobhistory.FieldOwnerID, field.TypeString, value)
	}
	if sjhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(scheduledjobhistory.FieldOwnerID, field.TypeString)
	}
	if sjhuo.mutation.SystemOwnedCleared() {
		_spec.ClearField(scheduledjobhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := sjhuo.mutation.Title(); ok {
		_spec.SetField(scheduledjobhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := sjhuo.mutation.Description(); ok {
		_spec.SetField(scheduledjobhistory.FieldDescription, field.TypeString, value)
	}
	if sjhuo.mutation.DescriptionCleared() {
		_spec.ClearField(scheduledjobhistory.FieldDescription, field.TypeString)
	}
	if value, ok := sjhuo.mutation.JobType(); ok {
		_spec.SetField(scheduledjobhistory.FieldJobType, field.TypeEnum, value)
	}
	if value, ok := sjhuo.mutation.Script(); ok {
		_spec.SetField(scheduledjobhistory.FieldScript, field.TypeString, value)
	}
	if sjhuo.mutation.ScriptCleared() {
		_spec.ClearField(scheduledjobhistory.FieldScript, field.TypeString)
	}
	if value, ok := sjhuo.mutation.Configuration(); ok {
		_spec.SetField(scheduledjobhistory.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := sjhuo.mutation.Cadence(); ok {
		_spec.SetField(scheduledjobhistory.FieldCadence, field.TypeJSON, value)
	}
	if sjhuo.mutation.CadenceCleared() {
		_spec.ClearField(scheduledjobhistory.FieldCadence, field.TypeJSON)
	}
	if value, ok := sjhuo.mutation.Cron(); ok {
		_spec.SetField(scheduledjobhistory.FieldCron, field.TypeString, value)
	}
	if sjhuo.mutation.CronCleared() {
		_spec.ClearField(scheduledjobhistory.FieldCron, field.TypeString)
	}
	_spec.Node.Schema = sjhuo.schemaConfig.ScheduledJobHistory
	ctx = internal.NewSchemaConfigContext(ctx, sjhuo.schemaConfig)
	_spec.AddModifiers(sjhuo.modifiers...)
	_node = &ScheduledJobHistory{config: sjhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledjobhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sjhuo.mutation.done = true
	return _node, nil
}
