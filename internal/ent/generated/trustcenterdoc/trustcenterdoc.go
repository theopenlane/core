// Code generated by ent, DO NOT EDIT.

package trustcenterdoc

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the trustcenterdoc type in the database.
	Label = "trust_center_doc"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldTrustCenterID holds the string denoting the trust_center_id field in the database.
	FieldTrustCenterID = "trust_center_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldFileID holds the string denoting the file_id field in the database.
	FieldFileID = "file_id"
	// FieldOriginalFileID holds the string denoting the original_file_id field in the database.
	FieldOriginalFileID = "original_file_id"
	// FieldWatermarkingEnabled holds the string denoting the watermarking_enabled field in the database.
	FieldWatermarkingEnabled = "watermarking_enabled"
	// FieldWatermarkStatus holds the string denoting the watermark_status field in the database.
	FieldWatermarkStatus = "watermark_status"
	// FieldVisibility holds the string denoting the visibility field in the database.
	FieldVisibility = "visibility"
	// EdgeTrustCenter holds the string denoting the trust_center edge name in mutations.
	EdgeTrustCenter = "trust_center"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeOriginalFile holds the string denoting the original_file edge name in mutations.
	EdgeOriginalFile = "original_file"
	// Table holds the table name of the trustcenterdoc in the database.
	Table = "trust_center_docs"
	// TrustCenterTable is the table that holds the trust_center relation/edge.
	TrustCenterTable = "trust_center_docs"
	// TrustCenterInverseTable is the table name for the TrustCenter entity.
	// It exists in this package in order to avoid circular dependency with the "trustcenter" package.
	TrustCenterInverseTable = "trust_centers"
	// TrustCenterColumn is the table column denoting the trust_center relation/edge.
	TrustCenterColumn = "trust_center_id"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "trust_center_docs"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "file_id"
	// OriginalFileTable is the table that holds the original_file relation/edge.
	OriginalFileTable = "trust_center_docs"
	// OriginalFileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	OriginalFileInverseTable = "files"
	// OriginalFileColumn is the table column denoting the original_file relation/edge.
	OriginalFileColumn = "original_file_id"
)

// Columns holds all SQL columns for trustcenterdoc fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldTrustCenterID,
	FieldTitle,
	FieldCategory,
	FieldFileID,
	FieldOriginalFileID,
	FieldWatermarkingEnabled,
	FieldWatermarkStatus,
	FieldVisibility,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [6]ent.Hook
	Interceptors [4]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// TrustCenterIDValidator is a validator for the "trust_center_id" field. It is called by the builders before save.
	TrustCenterIDValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// DefaultWatermarkingEnabled holds the default value on creation for the "watermarking_enabled" field.
	DefaultWatermarkingEnabled bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultWatermarkStatus enums.WatermarkStatus = "DISABLED"

// WatermarkStatusValidator is a validator for the "watermark_status" field enum values. It is called by the builders before save.
func WatermarkStatusValidator(ws enums.WatermarkStatus) error {
	switch ws.String() {
	case "PENDING", "IN_PROGRESS", "SUCCESS", "FAILED", "DISABLED":
		return nil
	default:
		return fmt.Errorf("trustcenterdoc: invalid enum value for watermark_status field: %q", ws)
	}
}

const DefaultVisibility enums.TrustCenterDocumentVisibility = "NOT_VISIBLE"

// VisibilityValidator is a validator for the "visibility" field enum values. It is called by the builders before save.
func VisibilityValidator(v enums.TrustCenterDocumentVisibility) error {
	switch v.String() {
	case "PUBLICLY_VISIBLE", "PROTECTED", "NOT_VISIBLE":
		return nil
	default:
		return fmt.Errorf("trustcenterdoc: invalid enum value for visibility field: %q", v)
	}
}

// OrderOption defines the ordering options for the TrustCenterDoc queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByTrustCenterID orders the results by the trust_center_id field.
func ByTrustCenterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrustCenterID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByFileID orders the results by the file_id field.
func ByFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileID, opts...).ToFunc()
}

// ByOriginalFileID orders the results by the original_file_id field.
func ByOriginalFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalFileID, opts...).ToFunc()
}

// ByWatermarkingEnabled orders the results by the watermarking_enabled field.
func ByWatermarkingEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWatermarkingEnabled, opts...).ToFunc()
}

// ByWatermarkStatus orders the results by the watermark_status field.
func ByWatermarkStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWatermarkStatus, opts...).ToFunc()
}

// ByVisibility orders the results by the visibility field.
func ByVisibility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibility, opts...).ToFunc()
}

// ByTrustCenterField orders the results by trust_center field.
func ByTrustCenterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrustCenterStep(), sql.OrderByField(field, opts...))
	}
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByOriginalFileField orders the results by original_file field.
func ByOriginalFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginalFileStep(), sql.OrderByField(field, opts...))
	}
}
func newTrustCenterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrustCenterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TrustCenterTable, TrustCenterColumn),
	)
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FileTable, FileColumn),
	)
}
func newOriginalFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OriginalFileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OriginalFileTable, OriginalFileColumn),
	)
}

var (
	// enums.WatermarkStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.WatermarkStatus)(nil)
	// enums.WatermarkStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.WatermarkStatus)(nil)
)

var (
	// enums.TrustCenterDocumentVisibility must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.TrustCenterDocumentVisibility)(nil)
	// enums.TrustCenterDocumentVisibility must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.TrustCenterDocumentVisibility)(nil)
)
