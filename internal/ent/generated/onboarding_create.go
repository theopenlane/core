// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/onboarding"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// OnboardingCreate is the builder for creating a Onboarding entity.
type OnboardingCreate struct {
	config
	mutation *OnboardingMutation
	hooks    []Hook
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *OnboardingCreate) SetDeletedAt(v time.Time) *OnboardingCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *OnboardingCreate) SetNillableDeletedAt(v *time.Time) *OnboardingCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *OnboardingCreate) SetDeletedBy(v string) *OnboardingCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *OnboardingCreate) SetNillableDeletedBy(v *string) *OnboardingCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetOrganizationID sets the "organization_id" field.
func (_c *OnboardingCreate) SetOrganizationID(v string) *OnboardingCreate {
	_c.mutation.SetOrganizationID(v)
	return _c
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_c *OnboardingCreate) SetNillableOrganizationID(v *string) *OnboardingCreate {
	if v != nil {
		_c.SetOrganizationID(*v)
	}
	return _c
}

// SetCompanyName sets the "company_name" field.
func (_c *OnboardingCreate) SetCompanyName(v string) *OnboardingCreate {
	_c.mutation.SetCompanyName(v)
	return _c
}

// SetDomains sets the "domains" field.
func (_c *OnboardingCreate) SetDomains(v []string) *OnboardingCreate {
	_c.mutation.SetDomains(v)
	return _c
}

// SetCompanyDetails sets the "company_details" field.
func (_c *OnboardingCreate) SetCompanyDetails(v map[string]interface{}) *OnboardingCreate {
	_c.mutation.SetCompanyDetails(v)
	return _c
}

// SetUserDetails sets the "user_details" field.
func (_c *OnboardingCreate) SetUserDetails(v map[string]interface{}) *OnboardingCreate {
	_c.mutation.SetUserDetails(v)
	return _c
}

// SetCompliance sets the "compliance" field.
func (_c *OnboardingCreate) SetCompliance(v map[string]interface{}) *OnboardingCreate {
	_c.mutation.SetCompliance(v)
	return _c
}

// SetID sets the "id" field.
func (_c *OnboardingCreate) SetID(v string) *OnboardingCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *OnboardingCreate) SetNillableID(v *string) *OnboardingCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_c *OnboardingCreate) SetOrganization(v *Organization) *OnboardingCreate {
	return _c.SetOrganizationID(v.ID)
}

// Mutation returns the OnboardingMutation object of the builder.
func (_c *OnboardingCreate) Mutation() *OnboardingMutation {
	return _c.mutation
}

// Save creates the Onboarding in the database.
func (_c *OnboardingCreate) Save(ctx context.Context) (*Onboarding, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OnboardingCreate) SaveX(ctx context.Context) *Onboarding {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OnboardingCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OnboardingCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OnboardingCreate) defaults() error {
	if _, ok := _c.mutation.ID(); !ok {
		if onboarding.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized onboarding.DefaultID (forgotten import generated/runtime?)")
		}
		v := onboarding.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *OnboardingCreate) check() error {
	if v, ok := _c.mutation.OrganizationID(); ok {
		if err := onboarding.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`generated: validator failed for field "Onboarding.organization_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CompanyName(); !ok {
		return &ValidationError{Name: "company_name", err: errors.New(`generated: missing required field "Onboarding.company_name"`)}
	}
	return nil
}

func (_c *OnboardingCreate) sqlSave(ctx context.Context) (*Onboarding, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Onboarding.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OnboardingCreate) createSpec() (*Onboarding, *sqlgraph.CreateSpec) {
	var (
		_node = &Onboarding{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(onboarding.Table, sqlgraph.NewFieldSpec(onboarding.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Onboarding
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(onboarding.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(onboarding.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.CompanyName(); ok {
		_spec.SetField(onboarding.FieldCompanyName, field.TypeString, value)
		_node.CompanyName = value
	}
	if value, ok := _c.mutation.Domains(); ok {
		_spec.SetField(onboarding.FieldDomains, field.TypeJSON, value)
		_node.Domains = value
	}
	if value, ok := _c.mutation.CompanyDetails(); ok {
		_spec.SetField(onboarding.FieldCompanyDetails, field.TypeJSON, value)
		_node.CompanyDetails = value
	}
	if value, ok := _c.mutation.UserDetails(); ok {
		_spec.SetField(onboarding.FieldUserDetails, field.TypeJSON, value)
		_node.UserDetails = value
	}
	if value, ok := _c.mutation.Compliance(); ok {
		_spec.SetField(onboarding.FieldCompliance, field.TypeJSON, value)
		_node.Compliance = value
	}
	if nodes := _c.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   onboarding.OrganizationTable,
			Columns: []string{onboarding.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Onboarding
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnboardingCreateBulk is the builder for creating many Onboarding entities in bulk.
type OnboardingCreateBulk struct {
	config
	err      error
	builders []*OnboardingCreate
}

// Save creates the Onboarding entities in the database.
func (_c *OnboardingCreateBulk) Save(ctx context.Context) ([]*Onboarding, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Onboarding, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OnboardingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OnboardingCreateBulk) SaveX(ctx context.Context) []*Onboarding {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OnboardingCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OnboardingCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
