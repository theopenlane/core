// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/documentrevisionhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// DocumentRevisionHistory is the model entity for the DocumentRevisionHistory schema.
type DocumentRevisionHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
	Revision string `json:"revision,omitempty"`
	// details of the document
	Details string `json:"details,omitempty"`
	// status of the approval, e.g. pending, approved, rejected
	Status enums.ApprovalStatus `json:"status,omitempty"`
	// ApprovalDate holds the value of the "approval_date" field.
	ApprovalDate *time.Time `json:"approval_date,omitempty"`
	// the user that submitted the document for approval
	SubmittedByID string `json:"submitted_by_id,omitempty"`
	// the user that approved the document
	ApprovedByID string `json:"approved_by_id,omitempty"`
	// the internal policy the document is related to
	InternalPolicyID string `json:"internal_policy_id,omitempty"`
	// the procedure the document is related to
	ProcedureID string `json:"procedure_id,omitempty"`
	// the action plan the document is related to
	ActionPlanID string `json:"action_plan_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DocumentRevisionHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case documentrevisionhistory.FieldTags:
			values[i] = new([]byte)
		case documentrevisionhistory.FieldOperation:
			values[i] = new(history.OpType)
		case documentrevisionhistory.FieldID, documentrevisionhistory.FieldRef, documentrevisionhistory.FieldCreatedBy, documentrevisionhistory.FieldUpdatedBy, documentrevisionhistory.FieldDeletedBy, documentrevisionhistory.FieldRevision, documentrevisionhistory.FieldDetails, documentrevisionhistory.FieldStatus, documentrevisionhistory.FieldSubmittedByID, documentrevisionhistory.FieldApprovedByID, documentrevisionhistory.FieldInternalPolicyID, documentrevisionhistory.FieldProcedureID, documentrevisionhistory.FieldActionPlanID:
			values[i] = new(sql.NullString)
		case documentrevisionhistory.FieldHistoryTime, documentrevisionhistory.FieldCreatedAt, documentrevisionhistory.FieldUpdatedAt, documentrevisionhistory.FieldDeletedAt, documentrevisionhistory.FieldApprovalDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DocumentRevisionHistory fields.
func (drh *DocumentRevisionHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case documentrevisionhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				drh.ID = value.String
			}
		case documentrevisionhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				drh.HistoryTime = value.Time
			}
		case documentrevisionhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				drh.Ref = value.String
			}
		case documentrevisionhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				drh.Operation = *value
			}
		case documentrevisionhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				drh.CreatedAt = value.Time
			}
		case documentrevisionhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				drh.UpdatedAt = value.Time
			}
		case documentrevisionhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				drh.CreatedBy = value.String
			}
		case documentrevisionhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				drh.UpdatedBy = value.String
			}
		case documentrevisionhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				drh.DeletedAt = value.Time
			}
		case documentrevisionhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				drh.DeletedBy = value.String
			}
		case documentrevisionhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &drh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case documentrevisionhistory.FieldRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				drh.Revision = value.String
			}
		case documentrevisionhistory.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				drh.Details = value.String
			}
		case documentrevisionhistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				drh.Status = enums.ApprovalStatus(value.String)
			}
		case documentrevisionhistory.FieldApprovalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approval_date", values[i])
			} else if value.Valid {
				drh.ApprovalDate = new(time.Time)
				*drh.ApprovalDate = value.Time
			}
		case documentrevisionhistory.FieldSubmittedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submitted_by_id", values[i])
			} else if value.Valid {
				drh.SubmittedByID = value.String
			}
		case documentrevisionhistory.FieldApprovedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approved_by_id", values[i])
			} else if value.Valid {
				drh.ApprovedByID = value.String
			}
		case documentrevisionhistory.FieldInternalPolicyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_policy_id", values[i])
			} else if value.Valid {
				drh.InternalPolicyID = value.String
			}
		case documentrevisionhistory.FieldProcedureID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field procedure_id", values[i])
			} else if value.Valid {
				drh.ProcedureID = value.String
			}
		case documentrevisionhistory.FieldActionPlanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_plan_id", values[i])
			} else if value.Valid {
				drh.ActionPlanID = value.String
			}
		default:
			drh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DocumentRevisionHistory.
// This includes values selected through modifiers, order, etc.
func (drh *DocumentRevisionHistory) Value(name string) (ent.Value, error) {
	return drh.selectValues.Get(name)
}

// Update returns a builder for updating this DocumentRevisionHistory.
// Note that you need to call DocumentRevisionHistory.Unwrap() before calling this method if this DocumentRevisionHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (drh *DocumentRevisionHistory) Update() *DocumentRevisionHistoryUpdateOne {
	return NewDocumentRevisionHistoryClient(drh.config).UpdateOne(drh)
}

// Unwrap unwraps the DocumentRevisionHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (drh *DocumentRevisionHistory) Unwrap() *DocumentRevisionHistory {
	_tx, ok := drh.config.driver.(*txDriver)
	if !ok {
		panic("generated: DocumentRevisionHistory is not a transactional entity")
	}
	drh.config.driver = _tx.drv
	return drh
}

// String implements the fmt.Stringer.
func (drh *DocumentRevisionHistory) String() string {
	var builder strings.Builder
	builder.WriteString("DocumentRevisionHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", drh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(drh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(drh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", drh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(drh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(drh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(drh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(drh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(drh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(drh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", drh.Tags))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(drh.Revision)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(drh.Details)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", drh.Status))
	builder.WriteString(", ")
	if v := drh.ApprovalDate; v != nil {
		builder.WriteString("approval_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("submitted_by_id=")
	builder.WriteString(drh.SubmittedByID)
	builder.WriteString(", ")
	builder.WriteString("approved_by_id=")
	builder.WriteString(drh.ApprovedByID)
	builder.WriteString(", ")
	builder.WriteString("internal_policy_id=")
	builder.WriteString(drh.InternalPolicyID)
	builder.WriteString(", ")
	builder.WriteString("procedure_id=")
	builder.WriteString(drh.ProcedureID)
	builder.WriteString(", ")
	builder.WriteString("action_plan_id=")
	builder.WriteString(drh.ActionPlanID)
	builder.WriteByte(')')
	return builder.String()
}

// DocumentRevisionHistories is a parsable slice of DocumentRevisionHistory.
type DocumentRevisionHistories []*DocumentRevisionHistory
