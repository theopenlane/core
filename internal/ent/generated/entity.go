// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// Entity is the model entity for the Entity schema.
type Entity struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the entity
	Name string `json:"name,omitempty"`
	// The entity's displayed 'friendly' name
	DisplayName string `json:"display_name,omitempty"`
	// An optional description of the entity
	Description string `json:"description,omitempty"`
	// domains associated with the entity
	Domains []string `json:"domains,omitempty"`
	// The type of the entity
	EntityTypeID string `json:"entity_type_id,omitempty"`
	// status of the entity
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntityQuery when eager-loading is set.
	Edges                EntityEdges `json:"edges"`
	entity_type_entities *string
	selectValues         sql.SelectValues
}

// EntityEdges holds the relations/edges for other nodes in the graph.
type EntityEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact `json:"contacts,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*DocumentData `json:"documents,omitempty"`
	// Notes holds the value of the notes edge.
	Notes []*Note `json:"notes,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// EntityType holds the value of the entity_type edge.
	EntityType *EntityType `json:"entity_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedContacts  map[string][]*Contact
	namedDocuments map[string][]*DocumentData
	namedNotes     map[string][]*Note
	namedFiles     map[string][]*File
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[1] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) DocumentsOrErr() ([]*DocumentData, error) {
	if e.loadedTypes[2] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) NotesOrErr() ([]*Note, error) {
	if e.loadedTypes[3] {
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[4] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// EntityTypeOrErr returns the EntityType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityEdges) EntityTypeOrErr() (*EntityType, error) {
	if e.EntityType != nil {
		return e.EntityType, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: entitytype.Label}
	}
	return nil, &NotLoadedError{edge: "entity_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entity.FieldTags, entity.FieldDomains:
			values[i] = new([]byte)
		case entity.FieldID, entity.FieldCreatedBy, entity.FieldUpdatedBy, entity.FieldDeletedBy, entity.FieldOwnerID, entity.FieldName, entity.FieldDisplayName, entity.FieldDescription, entity.FieldEntityTypeID, entity.FieldStatus:
			values[i] = new(sql.NullString)
		case entity.FieldCreatedAt, entity.FieldUpdatedAt, entity.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case entity.ForeignKeys[0]: // entity_type_entities
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entity fields.
func (e *Entity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case entity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case entity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case entity.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = value.String
			}
		case entity.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = value.String
			}
		case entity.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = value.Time
			}
		case entity.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				e.DeletedBy = value.String
			}
		case entity.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case entity.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				e.OwnerID = value.String
			}
		case entity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case entity.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				e.DisplayName = value.String
			}
		case entity.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case entity.FieldDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Domains); err != nil {
					return fmt.Errorf("unmarshal field domains: %w", err)
				}
			}
		case entity.FieldEntityTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type_id", values[i])
			} else if value.Valid {
				e.EntityTypeID = value.String
			}
		case entity.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = value.String
			}
		case entity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type_entities", values[i])
			} else if value.Valid {
				e.entity_type_entities = new(string)
				*e.entity_type_entities = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Entity.
// This includes values selected through modifiers, order, etc.
func (e *Entity) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Entity entity.
func (e *Entity) QueryOwner() *OrganizationQuery {
	return NewEntityClient(e.config).QueryOwner(e)
}

// QueryContacts queries the "contacts" edge of the Entity entity.
func (e *Entity) QueryContacts() *ContactQuery {
	return NewEntityClient(e.config).QueryContacts(e)
}

// QueryDocuments queries the "documents" edge of the Entity entity.
func (e *Entity) QueryDocuments() *DocumentDataQuery {
	return NewEntityClient(e.config).QueryDocuments(e)
}

// QueryNotes queries the "notes" edge of the Entity entity.
func (e *Entity) QueryNotes() *NoteQuery {
	return NewEntityClient(e.config).QueryNotes(e)
}

// QueryFiles queries the "files" edge of the Entity entity.
func (e *Entity) QueryFiles() *FileQuery {
	return NewEntityClient(e.config).QueryFiles(e)
}

// QueryEntityType queries the "entity_type" edge of the Entity entity.
func (e *Entity) QueryEntityType() *EntityTypeQuery {
	return NewEntityClient(e.config).QueryEntityType(e)
}

// Update returns a builder for updating this Entity.
// Note that you need to call Entity.Unwrap() before calling this method if this Entity
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entity) Update() *EntityUpdateOne {
	return NewEntityClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Entity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entity) Unwrap() *Entity {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("generated: Entity is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entity) String() string {
	var builder strings.Builder
	builder.WriteString("Entity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(e.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(e.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(e.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(e.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", e.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(e.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(e.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("domains=")
	builder.WriteString(fmt.Sprintf("%v", e.Domains))
	builder.WriteString(", ")
	builder.WriteString("entity_type_id=")
	builder.WriteString(e.EntityTypeID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(e.Status)
	builder.WriteByte(')')
	return builder.String()
}

// NamedContacts returns the Contacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Entity) NamedContacts(name string) ([]*Contact, error) {
	if e.Edges.namedContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Entity) appendNamedContacts(name string, edges ...*Contact) {
	if e.Edges.namedContacts == nil {
		e.Edges.namedContacts = make(map[string][]*Contact)
	}
	if len(edges) == 0 {
		e.Edges.namedContacts[name] = []*Contact{}
	} else {
		e.Edges.namedContacts[name] = append(e.Edges.namedContacts[name], edges...)
	}
}

// NamedDocuments returns the Documents named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Entity) NamedDocuments(name string) ([]*DocumentData, error) {
	if e.Edges.namedDocuments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedDocuments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Entity) appendNamedDocuments(name string, edges ...*DocumentData) {
	if e.Edges.namedDocuments == nil {
		e.Edges.namedDocuments = make(map[string][]*DocumentData)
	}
	if len(edges) == 0 {
		e.Edges.namedDocuments[name] = []*DocumentData{}
	} else {
		e.Edges.namedDocuments[name] = append(e.Edges.namedDocuments[name], edges...)
	}
}

// NamedNotes returns the Notes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Entity) NamedNotes(name string) ([]*Note, error) {
	if e.Edges.namedNotes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedNotes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Entity) appendNamedNotes(name string, edges ...*Note) {
	if e.Edges.namedNotes == nil {
		e.Edges.namedNotes = make(map[string][]*Note)
	}
	if len(edges) == 0 {
		e.Edges.namedNotes[name] = []*Note{}
	} else {
		e.Edges.namedNotes[name] = append(e.Edges.namedNotes[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Entity) NamedFiles(name string) ([]*File, error) {
	if e.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Entity) appendNamedFiles(name string, edges ...*File) {
	if e.Edges.namedFiles == nil {
		e.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		e.Edges.namedFiles[name] = []*File{}
	} else {
		e.Edges.namedFiles[name] = append(e.Edges.namedFiles[name], edges...)
	}
}

// Entities is a parsable slice of Entity.
type Entities []*Entity
