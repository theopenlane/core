// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// ProgramCreate is the builder for creating a Program entity.
type ProgramCreate struct {
	config
	mutation *ProgramMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProgramCreate) SetCreatedAt(t time.Time) *ProgramCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableCreatedAt(t *time.Time) *ProgramCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProgramCreate) SetUpdatedAt(t time.Time) *ProgramCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableUpdatedAt(t *time.Time) *ProgramCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *ProgramCreate) SetCreatedBy(s string) *ProgramCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableCreatedBy(s *string) *ProgramCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *ProgramCreate) SetUpdatedBy(s string) *ProgramCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableUpdatedBy(s *string) *ProgramCreate {
	if s != nil {
		pc.SetUpdatedBy(*s)
	}
	return pc
}

// SetMappingID sets the "mapping_id" field.
func (pc *ProgramCreate) SetMappingID(s string) *ProgramCreate {
	pc.mutation.SetMappingID(s)
	return pc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableMappingID(s *string) *ProgramCreate {
	if s != nil {
		pc.SetMappingID(*s)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProgramCreate) SetDeletedAt(t time.Time) *ProgramCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableDeletedAt(t *time.Time) *ProgramCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetDeletedBy sets the "deleted_by" field.
func (pc *ProgramCreate) SetDeletedBy(s string) *ProgramCreate {
	pc.mutation.SetDeletedBy(s)
	return pc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableDeletedBy(s *string) *ProgramCreate {
	if s != nil {
		pc.SetDeletedBy(*s)
	}
	return pc
}

// SetTags sets the "tags" field.
func (pc *ProgramCreate) SetTags(s []string) *ProgramCreate {
	pc.mutation.SetTags(s)
	return pc
}

// SetOwnerID sets the "owner_id" field.
func (pc *ProgramCreate) SetOwnerID(s string) *ProgramCreate {
	pc.mutation.SetOwnerID(s)
	return pc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableOwnerID(s *string) *ProgramCreate {
	if s != nil {
		pc.SetOwnerID(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProgramCreate) SetName(s string) *ProgramCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProgramCreate) SetDescription(s string) *ProgramCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableDescription(s *string) *ProgramCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProgramCreate) SetStatus(es enums.ProgramStatus) *ProgramCreate {
	pc.mutation.SetStatus(es)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableStatus(es *enums.ProgramStatus) *ProgramCreate {
	if es != nil {
		pc.SetStatus(*es)
	}
	return pc
}

// SetStartDate sets the "start_date" field.
func (pc *ProgramCreate) SetStartDate(t time.Time) *ProgramCreate {
	pc.mutation.SetStartDate(t)
	return pc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableStartDate(t *time.Time) *ProgramCreate {
	if t != nil {
		pc.SetStartDate(*t)
	}
	return pc
}

// SetEndDate sets the "end_date" field.
func (pc *ProgramCreate) SetEndDate(t time.Time) *ProgramCreate {
	pc.mutation.SetEndDate(t)
	return pc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableEndDate(t *time.Time) *ProgramCreate {
	if t != nil {
		pc.SetEndDate(*t)
	}
	return pc
}

// SetAuditorReady sets the "auditor_ready" field.
func (pc *ProgramCreate) SetAuditorReady(b bool) *ProgramCreate {
	pc.mutation.SetAuditorReady(b)
	return pc
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableAuditorReady(b *bool) *ProgramCreate {
	if b != nil {
		pc.SetAuditorReady(*b)
	}
	return pc
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (pc *ProgramCreate) SetAuditorWriteComments(b bool) *ProgramCreate {
	pc.mutation.SetAuditorWriteComments(b)
	return pc
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableAuditorWriteComments(b *bool) *ProgramCreate {
	if b != nil {
		pc.SetAuditorWriteComments(*b)
	}
	return pc
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (pc *ProgramCreate) SetAuditorReadComments(b bool) *ProgramCreate {
	pc.mutation.SetAuditorReadComments(b)
	return pc
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableAuditorReadComments(b *bool) *ProgramCreate {
	if b != nil {
		pc.SetAuditorReadComments(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProgramCreate) SetID(s string) *ProgramCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProgramCreate) SetNillableID(s *string) *ProgramCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pc *ProgramCreate) SetOwner(o *Organization) *ProgramCreate {
	return pc.SetOwnerID(o.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (pc *ProgramCreate) AddControlIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddControlIDs(ids...)
	return pc
}

// AddControls adds the "controls" edges to the Control entity.
func (pc *ProgramCreate) AddControls(c ...*Control) *ProgramCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (pc *ProgramCreate) AddSubcontrolIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddSubcontrolIDs(ids...)
	return pc
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (pc *ProgramCreate) AddSubcontrols(s ...*Subcontrol) *ProgramCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSubcontrolIDs(ids...)
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (pc *ProgramCreate) AddControlobjectiveIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddControlobjectiveIDs(ids...)
	return pc
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (pc *ProgramCreate) AddControlobjectives(c ...*ControlObjective) *ProgramCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddControlobjectiveIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the InternalPolicy entity by IDs.
func (pc *ProgramCreate) AddPolicyIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddPolicyIDs(ids...)
	return pc
}

// AddPolicies adds the "policies" edges to the InternalPolicy entity.
func (pc *ProgramCreate) AddPolicies(i ...*InternalPolicy) *ProgramCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (pc *ProgramCreate) AddProcedureIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddProcedureIDs(ids...)
	return pc
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (pc *ProgramCreate) AddProcedures(p ...*Procedure) *ProgramCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProcedureIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (pc *ProgramCreate) AddRiskIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddRiskIDs(ids...)
	return pc
}

// AddRisks adds the "risks" edges to the Risk entity.
func (pc *ProgramCreate) AddRisks(r ...*Risk) *ProgramCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pc *ProgramCreate) AddTaskIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddTaskIDs(ids...)
	return pc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pc *ProgramCreate) AddTasks(t ...*Task) *ProgramCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (pc *ProgramCreate) AddNoteIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddNoteIDs(ids...)
	return pc
}

// AddNotes adds the "notes" edges to the Note entity.
func (pc *ProgramCreate) AddNotes(n ...*Note) *ProgramCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pc.AddNoteIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (pc *ProgramCreate) AddFileIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddFileIDs(ids...)
	return pc
}

// AddFiles adds the "files" edges to the File entity.
func (pc *ProgramCreate) AddFiles(f ...*File) *ProgramCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pc.AddFileIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (pc *ProgramCreate) AddNarrativeIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddNarrativeIDs(ids...)
	return pc
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (pc *ProgramCreate) AddNarratives(n ...*Narrative) *ProgramCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pc.AddNarrativeIDs(ids...)
}

// AddActionplanIDs adds the "actionplans" edge to the ActionPlan entity by IDs.
func (pc *ProgramCreate) AddActionplanIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddActionplanIDs(ids...)
	return pc
}

// AddActionplans adds the "actionplans" edges to the ActionPlan entity.
func (pc *ProgramCreate) AddActionplans(a ...*ActionPlan) *ProgramCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddActionplanIDs(ids...)
}

// AddStandardIDs adds the "standards" edge to the Standard entity by IDs.
func (pc *ProgramCreate) AddStandardIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddStandardIDs(ids...)
	return pc
}

// AddStandards adds the "standards" edges to the Standard entity.
func (pc *ProgramCreate) AddStandards(s ...*Standard) *ProgramCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddStandardIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (pc *ProgramCreate) AddUserIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddUserIDs(ids...)
	return pc
}

// AddUsers adds the "users" edges to the User entity.
func (pc *ProgramCreate) AddUsers(u ...*User) *ProgramCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddUserIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the ProgramMembership entity by IDs.
func (pc *ProgramCreate) AddMemberIDs(ids ...string) *ProgramCreate {
	pc.mutation.AddMemberIDs(ids...)
	return pc
}

// AddMembers adds the "members" edges to the ProgramMembership entity.
func (pc *ProgramCreate) AddMembers(p ...*ProgramMembership) *ProgramCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddMemberIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (pc *ProgramCreate) Mutation() *ProgramMutation {
	return pc.mutation
}

// Save creates the Program in the database.
func (pc *ProgramCreate) Save(ctx context.Context) (*Program, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProgramCreate) SaveX(ctx context.Context) *Program {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProgramCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProgramCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProgramCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if program.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized program.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := program.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if program.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized program.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := program.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.MappingID(); !ok {
		if program.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized program.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := program.DefaultMappingID()
		pc.mutation.SetMappingID(v)
	}
	if _, ok := pc.mutation.Tags(); !ok {
		v := program.DefaultTags
		pc.mutation.SetTags(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := program.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.AuditorReady(); !ok {
		v := program.DefaultAuditorReady
		pc.mutation.SetAuditorReady(v)
	}
	if _, ok := pc.mutation.AuditorWriteComments(); !ok {
		v := program.DefaultAuditorWriteComments
		pc.mutation.SetAuditorWriteComments(v)
	}
	if _, ok := pc.mutation.AuditorReadComments(); !ok {
		v := program.DefaultAuditorReadComments
		pc.mutation.SetAuditorReadComments(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		if program.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized program.DefaultID (forgotten import generated/runtime?)")
		}
		v := program.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProgramCreate) check() error {
	if _, ok := pc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "Program.mapping_id"`)}
	}
	if v, ok := pc.mutation.OwnerID(); ok {
		if err := program.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Program.owner_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Program.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := program.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Program.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Program.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := program.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Program.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.AuditorReady(); !ok {
		return &ValidationError{Name: "auditor_ready", err: errors.New(`generated: missing required field "Program.auditor_ready"`)}
	}
	if _, ok := pc.mutation.AuditorWriteComments(); !ok {
		return &ValidationError{Name: "auditor_write_comments", err: errors.New(`generated: missing required field "Program.auditor_write_comments"`)}
	}
	if _, ok := pc.mutation.AuditorReadComments(); !ok {
		return &ValidationError{Name: "auditor_read_comments", err: errors.New(`generated: missing required field "Program.auditor_read_comments"`)}
	}
	return nil
}

func (pc *ProgramCreate) sqlSave(ctx context.Context) (*Program, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Program.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProgramCreate) createSpec() (*Program, *sqlgraph.CreateSpec) {
	var (
		_node = &Program{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(program.Table, sqlgraph.NewFieldSpec(program.FieldID, field.TypeString))
	)
	_spec.Schema = pc.schemaConfig.Program
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(program.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(program.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(program.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.MappingID(); ok {
		_spec.SetField(program.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(program.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.DeletedBy(); ok {
		_spec.SetField(program.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := pc.mutation.Tags(); ok {
		_spec.SetField(program.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(program.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(program.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(program.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.StartDate(); ok {
		_spec.SetField(program.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := pc.mutation.EndDate(); ok {
		_spec.SetField(program.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := pc.mutation.AuditorReady(); ok {
		_spec.SetField(program.FieldAuditorReady, field.TypeBool, value)
		_node.AuditorReady = value
	}
	if value, ok := pc.mutation.AuditorWriteComments(); ok {
		_spec.SetField(program.FieldAuditorWriteComments, field.TypeBool, value)
		_node.AuditorWriteComments = value
	}
	if value, ok := pc.mutation.AuditorReadComments(); ok {
		_spec.SetField(program.FieldAuditorReadComments, field.TypeBool, value)
		_node.AuditorReadComments = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.OwnerTable,
			Columns: []string{program.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlsTable,
			Columns: program.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.SubcontrolsTable,
			Columns: program.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlobjectivesTable,
			Columns: program.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.PoliciesTable,
			Columns: program.PoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ProceduresTable,
			Columns: program.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.RisksTable,
			Columns: program.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.TasksTable,
			Columns: program.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NotesTable,
			Columns: program.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramNotes
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.FilesTable,
			Columns: program.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NarrativesTable,
			Columns: program.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ActionplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ActionplansTable,
			Columns: program.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.StandardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.StandardsTable,
			Columns: program.StandardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.UsersTable,
			Columns: program.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProgramMembershipCreate{config: pc.config, mutation: newProgramMembershipMutation(pc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   program.MembersTable,
			Columns: []string{program.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProgramCreateBulk is the builder for creating many Program entities in bulk.
type ProgramCreateBulk struct {
	config
	err      error
	builders []*ProgramCreate
}

// Save creates the Program entities in the database.
func (pcb *ProgramCreateBulk) Save(ctx context.Context) ([]*Program, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Program, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProgramCreateBulk) SaveX(ctx context.Context) []*Program {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProgramCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProgramCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
