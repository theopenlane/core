// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlHistoryUpdate is the builder for updating ControlHistory entities.
type ControlHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlHistoryUpdate builder.
func (chu *ControlHistoryUpdate) Where(ps ...predicate.ControlHistory) *ControlHistoryUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetUpdatedAt sets the "updated_at" field.
func (chu *ControlHistoryUpdate) SetUpdatedAt(t time.Time) *ControlHistoryUpdate {
	chu.mutation.SetUpdatedAt(t)
	return chu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (chu *ControlHistoryUpdate) ClearUpdatedAt() *ControlHistoryUpdate {
	chu.mutation.ClearUpdatedAt()
	return chu
}

// SetUpdatedBy sets the "updated_by" field.
func (chu *ControlHistoryUpdate) SetUpdatedBy(s string) *ControlHistoryUpdate {
	chu.mutation.SetUpdatedBy(s)
	return chu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableUpdatedBy(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetUpdatedBy(*s)
	}
	return chu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (chu *ControlHistoryUpdate) ClearUpdatedBy() *ControlHistoryUpdate {
	chu.mutation.ClearUpdatedBy()
	return chu
}

// SetDeletedAt sets the "deleted_at" field.
func (chu *ControlHistoryUpdate) SetDeletedAt(t time.Time) *ControlHistoryUpdate {
	chu.mutation.SetDeletedAt(t)
	return chu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ControlHistoryUpdate {
	if t != nil {
		chu.SetDeletedAt(*t)
	}
	return chu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (chu *ControlHistoryUpdate) ClearDeletedAt() *ControlHistoryUpdate {
	chu.mutation.ClearDeletedAt()
	return chu
}

// SetDeletedBy sets the "deleted_by" field.
func (chu *ControlHistoryUpdate) SetDeletedBy(s string) *ControlHistoryUpdate {
	chu.mutation.SetDeletedBy(s)
	return chu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableDeletedBy(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetDeletedBy(*s)
	}
	return chu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (chu *ControlHistoryUpdate) ClearDeletedBy() *ControlHistoryUpdate {
	chu.mutation.ClearDeletedBy()
	return chu
}

// SetTags sets the "tags" field.
func (chu *ControlHistoryUpdate) SetTags(s []string) *ControlHistoryUpdate {
	chu.mutation.SetTags(s)
	return chu
}

// AppendTags appends s to the "tags" field.
func (chu *ControlHistoryUpdate) AppendTags(s []string) *ControlHistoryUpdate {
	chu.mutation.AppendTags(s)
	return chu
}

// ClearTags clears the value of the "tags" field.
func (chu *ControlHistoryUpdate) ClearTags() *ControlHistoryUpdate {
	chu.mutation.ClearTags()
	return chu
}

// SetName sets the "name" field.
func (chu *ControlHistoryUpdate) SetName(s string) *ControlHistoryUpdate {
	chu.mutation.SetName(s)
	return chu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableName(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetName(*s)
	}
	return chu
}

// SetDescription sets the "description" field.
func (chu *ControlHistoryUpdate) SetDescription(s string) *ControlHistoryUpdate {
	chu.mutation.SetDescription(s)
	return chu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableDescription(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetDescription(*s)
	}
	return chu
}

// ClearDescription clears the value of the "description" field.
func (chu *ControlHistoryUpdate) ClearDescription() *ControlHistoryUpdate {
	chu.mutation.ClearDescription()
	return chu
}

// SetStatus sets the "status" field.
func (chu *ControlHistoryUpdate) SetStatus(s string) *ControlHistoryUpdate {
	chu.mutation.SetStatus(s)
	return chu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableStatus(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetStatus(*s)
	}
	return chu
}

// ClearStatus clears the value of the "status" field.
func (chu *ControlHistoryUpdate) ClearStatus() *ControlHistoryUpdate {
	chu.mutation.ClearStatus()
	return chu
}

// SetControlType sets the "control_type" field.
func (chu *ControlHistoryUpdate) SetControlType(s string) *ControlHistoryUpdate {
	chu.mutation.SetControlType(s)
	return chu
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableControlType(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetControlType(*s)
	}
	return chu
}

// ClearControlType clears the value of the "control_type" field.
func (chu *ControlHistoryUpdate) ClearControlType() *ControlHistoryUpdate {
	chu.mutation.ClearControlType()
	return chu
}

// SetVersion sets the "version" field.
func (chu *ControlHistoryUpdate) SetVersion(s string) *ControlHistoryUpdate {
	chu.mutation.SetVersion(s)
	return chu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableVersion(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetVersion(*s)
	}
	return chu
}

// ClearVersion clears the value of the "version" field.
func (chu *ControlHistoryUpdate) ClearVersion() *ControlHistoryUpdate {
	chu.mutation.ClearVersion()
	return chu
}

// SetControlNumber sets the "control_number" field.
func (chu *ControlHistoryUpdate) SetControlNumber(s string) *ControlHistoryUpdate {
	chu.mutation.SetControlNumber(s)
	return chu
}

// SetNillableControlNumber sets the "control_number" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableControlNumber(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetControlNumber(*s)
	}
	return chu
}

// ClearControlNumber clears the value of the "control_number" field.
func (chu *ControlHistoryUpdate) ClearControlNumber() *ControlHistoryUpdate {
	chu.mutation.ClearControlNumber()
	return chu
}

// SetFamily sets the "family" field.
func (chu *ControlHistoryUpdate) SetFamily(s string) *ControlHistoryUpdate {
	chu.mutation.SetFamily(s)
	return chu
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableFamily(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetFamily(*s)
	}
	return chu
}

// ClearFamily clears the value of the "family" field.
func (chu *ControlHistoryUpdate) ClearFamily() *ControlHistoryUpdate {
	chu.mutation.ClearFamily()
	return chu
}

// SetClass sets the "class" field.
func (chu *ControlHistoryUpdate) SetClass(s string) *ControlHistoryUpdate {
	chu.mutation.SetClass(s)
	return chu
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableClass(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetClass(*s)
	}
	return chu
}

// ClearClass clears the value of the "class" field.
func (chu *ControlHistoryUpdate) ClearClass() *ControlHistoryUpdate {
	chu.mutation.ClearClass()
	return chu
}

// SetSource sets the "source" field.
func (chu *ControlHistoryUpdate) SetSource(s string) *ControlHistoryUpdate {
	chu.mutation.SetSource(s)
	return chu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableSource(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetSource(*s)
	}
	return chu
}

// ClearSource clears the value of the "source" field.
func (chu *ControlHistoryUpdate) ClearSource() *ControlHistoryUpdate {
	chu.mutation.ClearSource()
	return chu
}

// SetSatisfies sets the "satisfies" field.
func (chu *ControlHistoryUpdate) SetSatisfies(s string) *ControlHistoryUpdate {
	chu.mutation.SetSatisfies(s)
	return chu
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableSatisfies(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetSatisfies(*s)
	}
	return chu
}

// ClearSatisfies clears the value of the "satisfies" field.
func (chu *ControlHistoryUpdate) ClearSatisfies() *ControlHistoryUpdate {
	chu.mutation.ClearSatisfies()
	return chu
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (chu *ControlHistoryUpdate) SetMappedFrameworks(s string) *ControlHistoryUpdate {
	chu.mutation.SetMappedFrameworks(s)
	return chu
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableMappedFrameworks(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetMappedFrameworks(*s)
	}
	return chu
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (chu *ControlHistoryUpdate) ClearMappedFrameworks() *ControlHistoryUpdate {
	chu.mutation.ClearMappedFrameworks()
	return chu
}

// SetDetails sets the "details" field.
func (chu *ControlHistoryUpdate) SetDetails(m map[string]interface{}) *ControlHistoryUpdate {
	chu.mutation.SetDetails(m)
	return chu
}

// ClearDetails clears the value of the "details" field.
func (chu *ControlHistoryUpdate) ClearDetails() *ControlHistoryUpdate {
	chu.mutation.ClearDetails()
	return chu
}

// SetExampleEvidence sets the "example_evidence" field.
func (chu *ControlHistoryUpdate) SetExampleEvidence(s string) *ControlHistoryUpdate {
	chu.mutation.SetExampleEvidence(s)
	return chu
}

// SetNillableExampleEvidence sets the "example_evidence" field if the given value is not nil.
func (chu *ControlHistoryUpdate) SetNillableExampleEvidence(s *string) *ControlHistoryUpdate {
	if s != nil {
		chu.SetExampleEvidence(*s)
	}
	return chu
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (chu *ControlHistoryUpdate) ClearExampleEvidence() *ControlHistoryUpdate {
	chu.mutation.ClearExampleEvidence()
	return chu
}

// Mutation returns the ControlHistoryMutation object of the builder.
func (chu *ControlHistoryUpdate) Mutation() *ControlHistoryMutation {
	return chu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *ControlHistoryUpdate) Save(ctx context.Context) (int, error) {
	chu.defaults()
	return withHooks(ctx, chu.sqlSave, chu.mutation, chu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chu *ControlHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *ControlHistoryUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *ControlHistoryUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chu *ControlHistoryUpdate) defaults() {
	if _, ok := chu.mutation.UpdatedAt(); !ok && !chu.mutation.UpdatedAtCleared() {
		v := controlhistory.UpdateDefaultUpdatedAt()
		chu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (chu *ControlHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlHistoryUpdate {
	chu.modifiers = append(chu.modifiers, modifiers...)
	return chu
}

func (chu *ControlHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(controlhistory.Table, controlhistory.Columns, sqlgraph.NewFieldSpec(controlhistory.FieldID, field.TypeString))
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if chu.mutation.RefCleared() {
		_spec.ClearField(controlhistory.FieldRef, field.TypeString)
	}
	if chu.mutation.CreatedAtCleared() {
		_spec.ClearField(controlhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := chu.mutation.UpdatedAt(); ok {
		_spec.SetField(controlhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if chu.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlhistory.FieldUpdatedAt, field.TypeTime)
	}
	if chu.mutation.CreatedByCleared() {
		_spec.ClearField(controlhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := chu.mutation.UpdatedBy(); ok {
		_spec.SetField(controlhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if chu.mutation.UpdatedByCleared() {
		_spec.ClearField(controlhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := chu.mutation.DeletedAt(); ok {
		_spec.SetField(controlhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if chu.mutation.DeletedAtCleared() {
		_spec.ClearField(controlhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := chu.mutation.DeletedBy(); ok {
		_spec.SetField(controlhistory.FieldDeletedBy, field.TypeString, value)
	}
	if chu.mutation.DeletedByCleared() {
		_spec.ClearField(controlhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := chu.mutation.Tags(); ok {
		_spec.SetField(controlhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := chu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldTags, value)
		})
	}
	if chu.mutation.TagsCleared() {
		_spec.ClearField(controlhistory.FieldTags, field.TypeJSON)
	}
	if chu.mutation.OwnerIDCleared() {
		_spec.ClearField(controlhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := chu.mutation.Name(); ok {
		_spec.SetField(controlhistory.FieldName, field.TypeString, value)
	}
	if value, ok := chu.mutation.Description(); ok {
		_spec.SetField(controlhistory.FieldDescription, field.TypeString, value)
	}
	if chu.mutation.DescriptionCleared() {
		_spec.ClearField(controlhistory.FieldDescription, field.TypeString)
	}
	if value, ok := chu.mutation.Status(); ok {
		_spec.SetField(controlhistory.FieldStatus, field.TypeString, value)
	}
	if chu.mutation.StatusCleared() {
		_spec.ClearField(controlhistory.FieldStatus, field.TypeString)
	}
	if value, ok := chu.mutation.ControlType(); ok {
		_spec.SetField(controlhistory.FieldControlType, field.TypeString, value)
	}
	if chu.mutation.ControlTypeCleared() {
		_spec.ClearField(controlhistory.FieldControlType, field.TypeString)
	}
	if value, ok := chu.mutation.Version(); ok {
		_spec.SetField(controlhistory.FieldVersion, field.TypeString, value)
	}
	if chu.mutation.VersionCleared() {
		_spec.ClearField(controlhistory.FieldVersion, field.TypeString)
	}
	if value, ok := chu.mutation.ControlNumber(); ok {
		_spec.SetField(controlhistory.FieldControlNumber, field.TypeString, value)
	}
	if chu.mutation.ControlNumberCleared() {
		_spec.ClearField(controlhistory.FieldControlNumber, field.TypeString)
	}
	if value, ok := chu.mutation.Family(); ok {
		_spec.SetField(controlhistory.FieldFamily, field.TypeString, value)
	}
	if chu.mutation.FamilyCleared() {
		_spec.ClearField(controlhistory.FieldFamily, field.TypeString)
	}
	if value, ok := chu.mutation.Class(); ok {
		_spec.SetField(controlhistory.FieldClass, field.TypeString, value)
	}
	if chu.mutation.ClassCleared() {
		_spec.ClearField(controlhistory.FieldClass, field.TypeString)
	}
	if value, ok := chu.mutation.Source(); ok {
		_spec.SetField(controlhistory.FieldSource, field.TypeString, value)
	}
	if chu.mutation.SourceCleared() {
		_spec.ClearField(controlhistory.FieldSource, field.TypeString)
	}
	if value, ok := chu.mutation.Satisfies(); ok {
		_spec.SetField(controlhistory.FieldSatisfies, field.TypeString, value)
	}
	if chu.mutation.SatisfiesCleared() {
		_spec.ClearField(controlhistory.FieldSatisfies, field.TypeString)
	}
	if value, ok := chu.mutation.MappedFrameworks(); ok {
		_spec.SetField(controlhistory.FieldMappedFrameworks, field.TypeString, value)
	}
	if chu.mutation.MappedFrameworksCleared() {
		_spec.ClearField(controlhistory.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := chu.mutation.Details(); ok {
		_spec.SetField(controlhistory.FieldDetails, field.TypeJSON, value)
	}
	if chu.mutation.DetailsCleared() {
		_spec.ClearField(controlhistory.FieldDetails, field.TypeJSON)
	}
	if value, ok := chu.mutation.ExampleEvidence(); ok {
		_spec.SetField(controlhistory.FieldExampleEvidence, field.TypeString, value)
	}
	if chu.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(controlhistory.FieldExampleEvidence, field.TypeString)
	}
	_spec.Node.Schema = chu.schemaConfig.ControlHistory
	ctx = internal.NewSchemaConfigContext(ctx, chu.schemaConfig)
	_spec.AddModifiers(chu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chu.mutation.done = true
	return n, nil
}

// ControlHistoryUpdateOne is the builder for updating a single ControlHistory entity.
type ControlHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (chuo *ControlHistoryUpdateOne) SetUpdatedAt(t time.Time) *ControlHistoryUpdateOne {
	chuo.mutation.SetUpdatedAt(t)
	return chuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (chuo *ControlHistoryUpdateOne) ClearUpdatedAt() *ControlHistoryUpdateOne {
	chuo.mutation.ClearUpdatedAt()
	return chuo
}

// SetUpdatedBy sets the "updated_by" field.
func (chuo *ControlHistoryUpdateOne) SetUpdatedBy(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetUpdatedBy(s)
	return chuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetUpdatedBy(*s)
	}
	return chuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (chuo *ControlHistoryUpdateOne) ClearUpdatedBy() *ControlHistoryUpdateOne {
	chuo.mutation.ClearUpdatedBy()
	return chuo
}

// SetDeletedAt sets the "deleted_at" field.
func (chuo *ControlHistoryUpdateOne) SetDeletedAt(t time.Time) *ControlHistoryUpdateOne {
	chuo.mutation.SetDeletedAt(t)
	return chuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ControlHistoryUpdateOne {
	if t != nil {
		chuo.SetDeletedAt(*t)
	}
	return chuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (chuo *ControlHistoryUpdateOne) ClearDeletedAt() *ControlHistoryUpdateOne {
	chuo.mutation.ClearDeletedAt()
	return chuo
}

// SetDeletedBy sets the "deleted_by" field.
func (chuo *ControlHistoryUpdateOne) SetDeletedBy(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetDeletedBy(s)
	return chuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableDeletedBy(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetDeletedBy(*s)
	}
	return chuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (chuo *ControlHistoryUpdateOne) ClearDeletedBy() *ControlHistoryUpdateOne {
	chuo.mutation.ClearDeletedBy()
	return chuo
}

// SetTags sets the "tags" field.
func (chuo *ControlHistoryUpdateOne) SetTags(s []string) *ControlHistoryUpdateOne {
	chuo.mutation.SetTags(s)
	return chuo
}

// AppendTags appends s to the "tags" field.
func (chuo *ControlHistoryUpdateOne) AppendTags(s []string) *ControlHistoryUpdateOne {
	chuo.mutation.AppendTags(s)
	return chuo
}

// ClearTags clears the value of the "tags" field.
func (chuo *ControlHistoryUpdateOne) ClearTags() *ControlHistoryUpdateOne {
	chuo.mutation.ClearTags()
	return chuo
}

// SetName sets the "name" field.
func (chuo *ControlHistoryUpdateOne) SetName(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetName(s)
	return chuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableName(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetName(*s)
	}
	return chuo
}

// SetDescription sets the "description" field.
func (chuo *ControlHistoryUpdateOne) SetDescription(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetDescription(s)
	return chuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableDescription(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetDescription(*s)
	}
	return chuo
}

// ClearDescription clears the value of the "description" field.
func (chuo *ControlHistoryUpdateOne) ClearDescription() *ControlHistoryUpdateOne {
	chuo.mutation.ClearDescription()
	return chuo
}

// SetStatus sets the "status" field.
func (chuo *ControlHistoryUpdateOne) SetStatus(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetStatus(s)
	return chuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableStatus(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetStatus(*s)
	}
	return chuo
}

// ClearStatus clears the value of the "status" field.
func (chuo *ControlHistoryUpdateOne) ClearStatus() *ControlHistoryUpdateOne {
	chuo.mutation.ClearStatus()
	return chuo
}

// SetControlType sets the "control_type" field.
func (chuo *ControlHistoryUpdateOne) SetControlType(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetControlType(s)
	return chuo
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableControlType(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetControlType(*s)
	}
	return chuo
}

// ClearControlType clears the value of the "control_type" field.
func (chuo *ControlHistoryUpdateOne) ClearControlType() *ControlHistoryUpdateOne {
	chuo.mutation.ClearControlType()
	return chuo
}

// SetVersion sets the "version" field.
func (chuo *ControlHistoryUpdateOne) SetVersion(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetVersion(s)
	return chuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableVersion(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetVersion(*s)
	}
	return chuo
}

// ClearVersion clears the value of the "version" field.
func (chuo *ControlHistoryUpdateOne) ClearVersion() *ControlHistoryUpdateOne {
	chuo.mutation.ClearVersion()
	return chuo
}

// SetControlNumber sets the "control_number" field.
func (chuo *ControlHistoryUpdateOne) SetControlNumber(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetControlNumber(s)
	return chuo
}

// SetNillableControlNumber sets the "control_number" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableControlNumber(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetControlNumber(*s)
	}
	return chuo
}

// ClearControlNumber clears the value of the "control_number" field.
func (chuo *ControlHistoryUpdateOne) ClearControlNumber() *ControlHistoryUpdateOne {
	chuo.mutation.ClearControlNumber()
	return chuo
}

// SetFamily sets the "family" field.
func (chuo *ControlHistoryUpdateOne) SetFamily(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetFamily(s)
	return chuo
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableFamily(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetFamily(*s)
	}
	return chuo
}

// ClearFamily clears the value of the "family" field.
func (chuo *ControlHistoryUpdateOne) ClearFamily() *ControlHistoryUpdateOne {
	chuo.mutation.ClearFamily()
	return chuo
}

// SetClass sets the "class" field.
func (chuo *ControlHistoryUpdateOne) SetClass(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetClass(s)
	return chuo
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableClass(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetClass(*s)
	}
	return chuo
}

// ClearClass clears the value of the "class" field.
func (chuo *ControlHistoryUpdateOne) ClearClass() *ControlHistoryUpdateOne {
	chuo.mutation.ClearClass()
	return chuo
}

// SetSource sets the "source" field.
func (chuo *ControlHistoryUpdateOne) SetSource(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetSource(s)
	return chuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableSource(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetSource(*s)
	}
	return chuo
}

// ClearSource clears the value of the "source" field.
func (chuo *ControlHistoryUpdateOne) ClearSource() *ControlHistoryUpdateOne {
	chuo.mutation.ClearSource()
	return chuo
}

// SetSatisfies sets the "satisfies" field.
func (chuo *ControlHistoryUpdateOne) SetSatisfies(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetSatisfies(s)
	return chuo
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableSatisfies(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetSatisfies(*s)
	}
	return chuo
}

// ClearSatisfies clears the value of the "satisfies" field.
func (chuo *ControlHistoryUpdateOne) ClearSatisfies() *ControlHistoryUpdateOne {
	chuo.mutation.ClearSatisfies()
	return chuo
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (chuo *ControlHistoryUpdateOne) SetMappedFrameworks(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetMappedFrameworks(s)
	return chuo
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableMappedFrameworks(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetMappedFrameworks(*s)
	}
	return chuo
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (chuo *ControlHistoryUpdateOne) ClearMappedFrameworks() *ControlHistoryUpdateOne {
	chuo.mutation.ClearMappedFrameworks()
	return chuo
}

// SetDetails sets the "details" field.
func (chuo *ControlHistoryUpdateOne) SetDetails(m map[string]interface{}) *ControlHistoryUpdateOne {
	chuo.mutation.SetDetails(m)
	return chuo
}

// ClearDetails clears the value of the "details" field.
func (chuo *ControlHistoryUpdateOne) ClearDetails() *ControlHistoryUpdateOne {
	chuo.mutation.ClearDetails()
	return chuo
}

// SetExampleEvidence sets the "example_evidence" field.
func (chuo *ControlHistoryUpdateOne) SetExampleEvidence(s string) *ControlHistoryUpdateOne {
	chuo.mutation.SetExampleEvidence(s)
	return chuo
}

// SetNillableExampleEvidence sets the "example_evidence" field if the given value is not nil.
func (chuo *ControlHistoryUpdateOne) SetNillableExampleEvidence(s *string) *ControlHistoryUpdateOne {
	if s != nil {
		chuo.SetExampleEvidence(*s)
	}
	return chuo
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (chuo *ControlHistoryUpdateOne) ClearExampleEvidence() *ControlHistoryUpdateOne {
	chuo.mutation.ClearExampleEvidence()
	return chuo
}

// Mutation returns the ControlHistoryMutation object of the builder.
func (chuo *ControlHistoryUpdateOne) Mutation() *ControlHistoryMutation {
	return chuo.mutation
}

// Where appends a list predicates to the ControlHistoryUpdate builder.
func (chuo *ControlHistoryUpdateOne) Where(ps ...predicate.ControlHistory) *ControlHistoryUpdateOne {
	chuo.mutation.Where(ps...)
	return chuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *ControlHistoryUpdateOne) Select(field string, fields ...string) *ControlHistoryUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated ControlHistory entity.
func (chuo *ControlHistoryUpdateOne) Save(ctx context.Context) (*ControlHistory, error) {
	chuo.defaults()
	return withHooks(ctx, chuo.sqlSave, chuo.mutation, chuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *ControlHistoryUpdateOne) SaveX(ctx context.Context) *ControlHistory {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *ControlHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *ControlHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chuo *ControlHistoryUpdateOne) defaults() {
	if _, ok := chuo.mutation.UpdatedAt(); !ok && !chuo.mutation.UpdatedAtCleared() {
		v := controlhistory.UpdateDefaultUpdatedAt()
		chuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (chuo *ControlHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlHistoryUpdateOne {
	chuo.modifiers = append(chuo.modifiers, modifiers...)
	return chuo
}

func (chuo *ControlHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ControlHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(controlhistory.Table, controlhistory.Columns, sqlgraph.NewFieldSpec(controlhistory.FieldID, field.TypeString))
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ControlHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlhistory.FieldID)
		for _, f := range fields {
			if !controlhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != controlhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if chuo.mutation.RefCleared() {
		_spec.ClearField(controlhistory.FieldRef, field.TypeString)
	}
	if chuo.mutation.CreatedAtCleared() {
		_spec.ClearField(controlhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := chuo.mutation.UpdatedAt(); ok {
		_spec.SetField(controlhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if chuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlhistory.FieldUpdatedAt, field.TypeTime)
	}
	if chuo.mutation.CreatedByCleared() {
		_spec.ClearField(controlhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := chuo.mutation.UpdatedBy(); ok {
		_spec.SetField(controlhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if chuo.mutation.UpdatedByCleared() {
		_spec.ClearField(controlhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := chuo.mutation.DeletedAt(); ok {
		_spec.SetField(controlhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if chuo.mutation.DeletedAtCleared() {
		_spec.ClearField(controlhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := chuo.mutation.DeletedBy(); ok {
		_spec.SetField(controlhistory.FieldDeletedBy, field.TypeString, value)
	}
	if chuo.mutation.DeletedByCleared() {
		_spec.ClearField(controlhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := chuo.mutation.Tags(); ok {
		_spec.SetField(controlhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := chuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldTags, value)
		})
	}
	if chuo.mutation.TagsCleared() {
		_spec.ClearField(controlhistory.FieldTags, field.TypeJSON)
	}
	if chuo.mutation.OwnerIDCleared() {
		_spec.ClearField(controlhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := chuo.mutation.Name(); ok {
		_spec.SetField(controlhistory.FieldName, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Description(); ok {
		_spec.SetField(controlhistory.FieldDescription, field.TypeString, value)
	}
	if chuo.mutation.DescriptionCleared() {
		_spec.ClearField(controlhistory.FieldDescription, field.TypeString)
	}
	if value, ok := chuo.mutation.Status(); ok {
		_spec.SetField(controlhistory.FieldStatus, field.TypeString, value)
	}
	if chuo.mutation.StatusCleared() {
		_spec.ClearField(controlhistory.FieldStatus, field.TypeString)
	}
	if value, ok := chuo.mutation.ControlType(); ok {
		_spec.SetField(controlhistory.FieldControlType, field.TypeString, value)
	}
	if chuo.mutation.ControlTypeCleared() {
		_spec.ClearField(controlhistory.FieldControlType, field.TypeString)
	}
	if value, ok := chuo.mutation.Version(); ok {
		_spec.SetField(controlhistory.FieldVersion, field.TypeString, value)
	}
	if chuo.mutation.VersionCleared() {
		_spec.ClearField(controlhistory.FieldVersion, field.TypeString)
	}
	if value, ok := chuo.mutation.ControlNumber(); ok {
		_spec.SetField(controlhistory.FieldControlNumber, field.TypeString, value)
	}
	if chuo.mutation.ControlNumberCleared() {
		_spec.ClearField(controlhistory.FieldControlNumber, field.TypeString)
	}
	if value, ok := chuo.mutation.Family(); ok {
		_spec.SetField(controlhistory.FieldFamily, field.TypeString, value)
	}
	if chuo.mutation.FamilyCleared() {
		_spec.ClearField(controlhistory.FieldFamily, field.TypeString)
	}
	if value, ok := chuo.mutation.Class(); ok {
		_spec.SetField(controlhistory.FieldClass, field.TypeString, value)
	}
	if chuo.mutation.ClassCleared() {
		_spec.ClearField(controlhistory.FieldClass, field.TypeString)
	}
	if value, ok := chuo.mutation.Source(); ok {
		_spec.SetField(controlhistory.FieldSource, field.TypeString, value)
	}
	if chuo.mutation.SourceCleared() {
		_spec.ClearField(controlhistory.FieldSource, field.TypeString)
	}
	if value, ok := chuo.mutation.Satisfies(); ok {
		_spec.SetField(controlhistory.FieldSatisfies, field.TypeString, value)
	}
	if chuo.mutation.SatisfiesCleared() {
		_spec.ClearField(controlhistory.FieldSatisfies, field.TypeString)
	}
	if value, ok := chuo.mutation.MappedFrameworks(); ok {
		_spec.SetField(controlhistory.FieldMappedFrameworks, field.TypeString, value)
	}
	if chuo.mutation.MappedFrameworksCleared() {
		_spec.ClearField(controlhistory.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := chuo.mutation.Details(); ok {
		_spec.SetField(controlhistory.FieldDetails, field.TypeJSON, value)
	}
	if chuo.mutation.DetailsCleared() {
		_spec.ClearField(controlhistory.FieldDetails, field.TypeJSON)
	}
	if value, ok := chuo.mutation.ExampleEvidence(); ok {
		_spec.SetField(controlhistory.FieldExampleEvidence, field.TypeString, value)
	}
	if chuo.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(controlhistory.FieldExampleEvidence, field.TypeString)
	}
	_spec.Node.Schema = chuo.schemaConfig.ControlHistory
	ctx = internal.NewSchemaConfigContext(ctx, chuo.schemaConfig)
	_spec.AddModifiers(chuo.modifiers...)
	_node = &ControlHistory{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chuo.mutation.done = true
	return _node, nil
}
