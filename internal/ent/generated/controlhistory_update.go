// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlHistoryUpdate is the builder for updating ControlHistory entities.
type ControlHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlHistoryUpdate builder.
func (_u *ControlHistoryUpdate) Where(ps ...predicate.ControlHistory) *ControlHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ControlHistoryUpdate) SetUpdatedAt(v time.Time) *ControlHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ControlHistoryUpdate) ClearUpdatedAt() *ControlHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ControlHistoryUpdate) SetUpdatedBy(v string) *ControlHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableUpdatedBy(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ControlHistoryUpdate) ClearUpdatedBy() *ControlHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ControlHistoryUpdate) SetDeletedAt(v time.Time) *ControlHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableDeletedAt(v *time.Time) *ControlHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ControlHistoryUpdate) ClearDeletedAt() *ControlHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ControlHistoryUpdate) SetDeletedBy(v string) *ControlHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableDeletedBy(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ControlHistoryUpdate) ClearDeletedBy() *ControlHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ControlHistoryUpdate) SetTags(v []string) *ControlHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ControlHistoryUpdate) AppendTags(v []string) *ControlHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ControlHistoryUpdate) ClearTags() *ControlHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ControlHistoryUpdate) SetDescription(v string) *ControlHistoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableDescription(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ControlHistoryUpdate) ClearDescription() *ControlHistoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetReferenceID sets the "reference_id" field.
func (_u *ControlHistoryUpdate) SetReferenceID(v string) *ControlHistoryUpdate {
	_u.mutation.SetReferenceID(v)
	return _u
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableReferenceID(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetReferenceID(*v)
	}
	return _u
}

// ClearReferenceID clears the value of the "reference_id" field.
func (_u *ControlHistoryUpdate) ClearReferenceID() *ControlHistoryUpdate {
	_u.mutation.ClearReferenceID()
	return _u
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_u *ControlHistoryUpdate) SetAuditorReferenceID(v string) *ControlHistoryUpdate {
	_u.mutation.SetAuditorReferenceID(v)
	return _u
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableAuditorReferenceID(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetAuditorReferenceID(*v)
	}
	return _u
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (_u *ControlHistoryUpdate) ClearAuditorReferenceID() *ControlHistoryUpdate {
	_u.mutation.ClearAuditorReferenceID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ControlHistoryUpdate) SetStatus(v enums.ControlStatus) *ControlHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableStatus(v *enums.ControlStatus) *ControlHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ControlHistoryUpdate) ClearStatus() *ControlHistoryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSource sets the "source" field.
func (_u *ControlHistoryUpdate) SetSource(v enums.ControlSource) *ControlHistoryUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableSource(v *enums.ControlSource) *ControlHistoryUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ControlHistoryUpdate) ClearSource() *ControlHistoryUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetReferenceFramework sets the "reference_framework" field.
func (_u *ControlHistoryUpdate) SetReferenceFramework(v string) *ControlHistoryUpdate {
	_u.mutation.SetReferenceFramework(v)
	return _u
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableReferenceFramework(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetReferenceFramework(*v)
	}
	return _u
}

// ClearReferenceFramework clears the value of the "reference_framework" field.
func (_u *ControlHistoryUpdate) ClearReferenceFramework() *ControlHistoryUpdate {
	_u.mutation.ClearReferenceFramework()
	return _u
}

// SetControlType sets the "control_type" field.
func (_u *ControlHistoryUpdate) SetControlType(v enums.ControlType) *ControlHistoryUpdate {
	_u.mutation.SetControlType(v)
	return _u
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableControlType(v *enums.ControlType) *ControlHistoryUpdate {
	if v != nil {
		_u.SetControlType(*v)
	}
	return _u
}

// ClearControlType clears the value of the "control_type" field.
func (_u *ControlHistoryUpdate) ClearControlType() *ControlHistoryUpdate {
	_u.mutation.ClearControlType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *ControlHistoryUpdate) SetCategory(v string) *ControlHistoryUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableCategory(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ControlHistoryUpdate) ClearCategory() *ControlHistoryUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *ControlHistoryUpdate) SetCategoryID(v string) *ControlHistoryUpdate {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableCategoryID(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *ControlHistoryUpdate) ClearCategoryID() *ControlHistoryUpdate {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetSubcategory sets the "subcategory" field.
func (_u *ControlHistoryUpdate) SetSubcategory(v string) *ControlHistoryUpdate {
	_u.mutation.SetSubcategory(v)
	return _u
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableSubcategory(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetSubcategory(*v)
	}
	return _u
}

// ClearSubcategory clears the value of the "subcategory" field.
func (_u *ControlHistoryUpdate) ClearSubcategory() *ControlHistoryUpdate {
	_u.mutation.ClearSubcategory()
	return _u
}

// SetMappedCategories sets the "mapped_categories" field.
func (_u *ControlHistoryUpdate) SetMappedCategories(v []string) *ControlHistoryUpdate {
	_u.mutation.SetMappedCategories(v)
	return _u
}

// AppendMappedCategories appends value to the "mapped_categories" field.
func (_u *ControlHistoryUpdate) AppendMappedCategories(v []string) *ControlHistoryUpdate {
	_u.mutation.AppendMappedCategories(v)
	return _u
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (_u *ControlHistoryUpdate) ClearMappedCategories() *ControlHistoryUpdate {
	_u.mutation.ClearMappedCategories()
	return _u
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_u *ControlHistoryUpdate) SetAssessmentObjectives(v []models.AssessmentObjective) *ControlHistoryUpdate {
	_u.mutation.SetAssessmentObjectives(v)
	return _u
}

// AppendAssessmentObjectives appends value to the "assessment_objectives" field.
func (_u *ControlHistoryUpdate) AppendAssessmentObjectives(v []models.AssessmentObjective) *ControlHistoryUpdate {
	_u.mutation.AppendAssessmentObjectives(v)
	return _u
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (_u *ControlHistoryUpdate) ClearAssessmentObjectives() *ControlHistoryUpdate {
	_u.mutation.ClearAssessmentObjectives()
	return _u
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_u *ControlHistoryUpdate) SetAssessmentMethods(v []models.AssessmentMethod) *ControlHistoryUpdate {
	_u.mutation.SetAssessmentMethods(v)
	return _u
}

// AppendAssessmentMethods appends value to the "assessment_methods" field.
func (_u *ControlHistoryUpdate) AppendAssessmentMethods(v []models.AssessmentMethod) *ControlHistoryUpdate {
	_u.mutation.AppendAssessmentMethods(v)
	return _u
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (_u *ControlHistoryUpdate) ClearAssessmentMethods() *ControlHistoryUpdate {
	_u.mutation.ClearAssessmentMethods()
	return _u
}

// SetControlQuestions sets the "control_questions" field.
func (_u *ControlHistoryUpdate) SetControlQuestions(v []string) *ControlHistoryUpdate {
	_u.mutation.SetControlQuestions(v)
	return _u
}

// AppendControlQuestions appends value to the "control_questions" field.
func (_u *ControlHistoryUpdate) AppendControlQuestions(v []string) *ControlHistoryUpdate {
	_u.mutation.AppendControlQuestions(v)
	return _u
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (_u *ControlHistoryUpdate) ClearControlQuestions() *ControlHistoryUpdate {
	_u.mutation.ClearControlQuestions()
	return _u
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_u *ControlHistoryUpdate) SetImplementationGuidance(v []models.ImplementationGuidance) *ControlHistoryUpdate {
	_u.mutation.SetImplementationGuidance(v)
	return _u
}

// AppendImplementationGuidance appends value to the "implementation_guidance" field.
func (_u *ControlHistoryUpdate) AppendImplementationGuidance(v []models.ImplementationGuidance) *ControlHistoryUpdate {
	_u.mutation.AppendImplementationGuidance(v)
	return _u
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (_u *ControlHistoryUpdate) ClearImplementationGuidance() *ControlHistoryUpdate {
	_u.mutation.ClearImplementationGuidance()
	return _u
}

// SetExampleEvidence sets the "example_evidence" field.
func (_u *ControlHistoryUpdate) SetExampleEvidence(v []models.ExampleEvidence) *ControlHistoryUpdate {
	_u.mutation.SetExampleEvidence(v)
	return _u
}

// AppendExampleEvidence appends value to the "example_evidence" field.
func (_u *ControlHistoryUpdate) AppendExampleEvidence(v []models.ExampleEvidence) *ControlHistoryUpdate {
	_u.mutation.AppendExampleEvidence(v)
	return _u
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (_u *ControlHistoryUpdate) ClearExampleEvidence() *ControlHistoryUpdate {
	_u.mutation.ClearExampleEvidence()
	return _u
}

// SetReferences sets the "references" field.
func (_u *ControlHistoryUpdate) SetReferences(v []models.Reference) *ControlHistoryUpdate {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *ControlHistoryUpdate) AppendReferences(v []models.Reference) *ControlHistoryUpdate {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *ControlHistoryUpdate) ClearReferences() *ControlHistoryUpdate {
	_u.mutation.ClearReferences()
	return _u
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_u *ControlHistoryUpdate) SetControlOwnerID(v string) *ControlHistoryUpdate {
	_u.mutation.SetControlOwnerID(v)
	return _u
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableControlOwnerID(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetControlOwnerID(*v)
	}
	return _u
}

// ClearControlOwnerID clears the value of the "control_owner_id" field.
func (_u *ControlHistoryUpdate) ClearControlOwnerID() *ControlHistoryUpdate {
	_u.mutation.ClearControlOwnerID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ControlHistoryUpdate) SetDelegateID(v string) *ControlHistoryUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableDelegateID(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ControlHistoryUpdate) ClearDelegateID() *ControlHistoryUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetRefCode sets the "ref_code" field.
func (_u *ControlHistoryUpdate) SetRefCode(v string) *ControlHistoryUpdate {
	_u.mutation.SetRefCode(v)
	return _u
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableRefCode(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetRefCode(*v)
	}
	return _u
}

// SetStandardID sets the "standard_id" field.
func (_u *ControlHistoryUpdate) SetStandardID(v string) *ControlHistoryUpdate {
	_u.mutation.SetStandardID(v)
	return _u
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (_u *ControlHistoryUpdate) SetNillableStandardID(v *string) *ControlHistoryUpdate {
	if v != nil {
		_u.SetStandardID(*v)
	}
	return _u
}

// ClearStandardID clears the value of the "standard_id" field.
func (_u *ControlHistoryUpdate) ClearStandardID() *ControlHistoryUpdate {
	_u.mutation.ClearStandardID()
	return _u
}

// Mutation returns the ControlHistoryMutation object of the builder.
func (_u *ControlHistoryUpdate) Mutation() *ControlHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ControlHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ControlHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ControlHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ControlHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ControlHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if controlhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ControlHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := controlhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := controlhistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.source": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlType(); ok {
		if err := controlhistory.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.control_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ControlHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ControlHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(controlhistory.Table, controlhistory.Columns, sqlgraph.NewFieldSpec(controlhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(controlhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(controlhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(controlhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(controlhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(controlhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(controlhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(controlhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(controlhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(controlhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(controlhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(controlhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(controlhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(controlhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(controlhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ReferenceID(); ok {
		_spec.SetField(controlhistory.FieldReferenceID, field.TypeString, value)
	}
	if _u.mutation.ReferenceIDCleared() {
		_spec.ClearField(controlhistory.FieldReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorReferenceID(); ok {
		_spec.SetField(controlhistory.FieldAuditorReferenceID, field.TypeString, value)
	}
	if _u.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(controlhistory.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(controlhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(controlhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(controlhistory.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(controlhistory.FieldSource, field.TypeEnum)
	}
	if value, ok := _u.mutation.ReferenceFramework(); ok {
		_spec.SetField(controlhistory.FieldReferenceFramework, field.TypeString, value)
	}
	if _u.mutation.ReferenceFrameworkCleared() {
		_spec.ClearField(controlhistory.FieldReferenceFramework, field.TypeString)
	}
	if value, ok := _u.mutation.ControlType(); ok {
		_spec.SetField(controlhistory.FieldControlType, field.TypeEnum, value)
	}
	if _u.mutation.ControlTypeCleared() {
		_spec.ClearField(controlhistory.FieldControlType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(controlhistory.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(controlhistory.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(controlhistory.FieldCategoryID, field.TypeString, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(controlhistory.FieldCategoryID, field.TypeString)
	}
	if value, ok := _u.mutation.Subcategory(); ok {
		_spec.SetField(controlhistory.FieldSubcategory, field.TypeString, value)
	}
	if _u.mutation.SubcategoryCleared() {
		_spec.ClearField(controlhistory.FieldSubcategory, field.TypeString)
	}
	if value, ok := _u.mutation.MappedCategories(); ok {
		_spec.SetField(controlhistory.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldMappedCategories, value)
		})
	}
	if _u.mutation.MappedCategoriesCleared() {
		_spec.ClearField(controlhistory.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentObjectives(); ok {
		_spec.SetField(controlhistory.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldAssessmentObjectives, value)
		})
	}
	if _u.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(controlhistory.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentMethods(); ok {
		_spec.SetField(controlhistory.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldAssessmentMethods, value)
		})
	}
	if _u.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(controlhistory.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlQuestions(); ok {
		_spec.SetField(controlhistory.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldControlQuestions, value)
		})
	}
	if _u.mutation.ControlQuestionsCleared() {
		_spec.ClearField(controlhistory.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImplementationGuidance(); ok {
		_spec.SetField(controlhistory.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldImplementationGuidance, value)
		})
	}
	if _u.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(controlhistory.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExampleEvidence(); ok {
		_spec.SetField(controlhistory.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldExampleEvidence, value)
		})
	}
	if _u.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(controlhistory.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(controlhistory.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(controlhistory.FieldReferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlOwnerID(); ok {
		_spec.SetField(controlhistory.FieldControlOwnerID, field.TypeString, value)
	}
	if _u.mutation.ControlOwnerIDCleared() {
		_spec.ClearField(controlhistory.FieldControlOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(controlhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(controlhistory.FieldDelegateID, field.TypeString)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(controlhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.RefCode(); ok {
		_spec.SetField(controlhistory.FieldRefCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.StandardID(); ok {
		_spec.SetField(controlhistory.FieldStandardID, field.TypeString, value)
	}
	if _u.mutation.StandardIDCleared() {
		_spec.ClearField(controlhistory.FieldStandardID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.ControlHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ControlHistoryUpdateOne is the builder for updating a single ControlHistory entity.
type ControlHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ControlHistoryUpdateOne) SetUpdatedAt(v time.Time) *ControlHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ControlHistoryUpdateOne) ClearUpdatedAt() *ControlHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ControlHistoryUpdateOne) SetUpdatedBy(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableUpdatedBy(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ControlHistoryUpdateOne) ClearUpdatedBy() *ControlHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ControlHistoryUpdateOne) SetDeletedAt(v time.Time) *ControlHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ControlHistoryUpdateOne) ClearDeletedAt() *ControlHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ControlHistoryUpdateOne) SetDeletedBy(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableDeletedBy(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ControlHistoryUpdateOne) ClearDeletedBy() *ControlHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ControlHistoryUpdateOne) SetTags(v []string) *ControlHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ControlHistoryUpdateOne) AppendTags(v []string) *ControlHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ControlHistoryUpdateOne) ClearTags() *ControlHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetDescription sets the "description" field.
func (_u *ControlHistoryUpdateOne) SetDescription(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableDescription(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ControlHistoryUpdateOne) ClearDescription() *ControlHistoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetReferenceID sets the "reference_id" field.
func (_u *ControlHistoryUpdateOne) SetReferenceID(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetReferenceID(v)
	return _u
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableReferenceID(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetReferenceID(*v)
	}
	return _u
}

// ClearReferenceID clears the value of the "reference_id" field.
func (_u *ControlHistoryUpdateOne) ClearReferenceID() *ControlHistoryUpdateOne {
	_u.mutation.ClearReferenceID()
	return _u
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_u *ControlHistoryUpdateOne) SetAuditorReferenceID(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetAuditorReferenceID(v)
	return _u
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableAuditorReferenceID(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetAuditorReferenceID(*v)
	}
	return _u
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (_u *ControlHistoryUpdateOne) ClearAuditorReferenceID() *ControlHistoryUpdateOne {
	_u.mutation.ClearAuditorReferenceID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ControlHistoryUpdateOne) SetStatus(v enums.ControlStatus) *ControlHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableStatus(v *enums.ControlStatus) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ControlHistoryUpdateOne) ClearStatus() *ControlHistoryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSource sets the "source" field.
func (_u *ControlHistoryUpdateOne) SetSource(v enums.ControlSource) *ControlHistoryUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableSource(v *enums.ControlSource) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ControlHistoryUpdateOne) ClearSource() *ControlHistoryUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetReferenceFramework sets the "reference_framework" field.
func (_u *ControlHistoryUpdateOne) SetReferenceFramework(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetReferenceFramework(v)
	return _u
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableReferenceFramework(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetReferenceFramework(*v)
	}
	return _u
}

// ClearReferenceFramework clears the value of the "reference_framework" field.
func (_u *ControlHistoryUpdateOne) ClearReferenceFramework() *ControlHistoryUpdateOne {
	_u.mutation.ClearReferenceFramework()
	return _u
}

// SetControlType sets the "control_type" field.
func (_u *ControlHistoryUpdateOne) SetControlType(v enums.ControlType) *ControlHistoryUpdateOne {
	_u.mutation.SetControlType(v)
	return _u
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableControlType(v *enums.ControlType) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetControlType(*v)
	}
	return _u
}

// ClearControlType clears the value of the "control_type" field.
func (_u *ControlHistoryUpdateOne) ClearControlType() *ControlHistoryUpdateOne {
	_u.mutation.ClearControlType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *ControlHistoryUpdateOne) SetCategory(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableCategory(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ControlHistoryUpdateOne) ClearCategory() *ControlHistoryUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *ControlHistoryUpdateOne) SetCategoryID(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableCategoryID(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *ControlHistoryUpdateOne) ClearCategoryID() *ControlHistoryUpdateOne {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetSubcategory sets the "subcategory" field.
func (_u *ControlHistoryUpdateOne) SetSubcategory(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetSubcategory(v)
	return _u
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableSubcategory(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetSubcategory(*v)
	}
	return _u
}

// ClearSubcategory clears the value of the "subcategory" field.
func (_u *ControlHistoryUpdateOne) ClearSubcategory() *ControlHistoryUpdateOne {
	_u.mutation.ClearSubcategory()
	return _u
}

// SetMappedCategories sets the "mapped_categories" field.
func (_u *ControlHistoryUpdateOne) SetMappedCategories(v []string) *ControlHistoryUpdateOne {
	_u.mutation.SetMappedCategories(v)
	return _u
}

// AppendMappedCategories appends value to the "mapped_categories" field.
func (_u *ControlHistoryUpdateOne) AppendMappedCategories(v []string) *ControlHistoryUpdateOne {
	_u.mutation.AppendMappedCategories(v)
	return _u
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (_u *ControlHistoryUpdateOne) ClearMappedCategories() *ControlHistoryUpdateOne {
	_u.mutation.ClearMappedCategories()
	return _u
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_u *ControlHistoryUpdateOne) SetAssessmentObjectives(v []models.AssessmentObjective) *ControlHistoryUpdateOne {
	_u.mutation.SetAssessmentObjectives(v)
	return _u
}

// AppendAssessmentObjectives appends value to the "assessment_objectives" field.
func (_u *ControlHistoryUpdateOne) AppendAssessmentObjectives(v []models.AssessmentObjective) *ControlHistoryUpdateOne {
	_u.mutation.AppendAssessmentObjectives(v)
	return _u
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (_u *ControlHistoryUpdateOne) ClearAssessmentObjectives() *ControlHistoryUpdateOne {
	_u.mutation.ClearAssessmentObjectives()
	return _u
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_u *ControlHistoryUpdateOne) SetAssessmentMethods(v []models.AssessmentMethod) *ControlHistoryUpdateOne {
	_u.mutation.SetAssessmentMethods(v)
	return _u
}

// AppendAssessmentMethods appends value to the "assessment_methods" field.
func (_u *ControlHistoryUpdateOne) AppendAssessmentMethods(v []models.AssessmentMethod) *ControlHistoryUpdateOne {
	_u.mutation.AppendAssessmentMethods(v)
	return _u
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (_u *ControlHistoryUpdateOne) ClearAssessmentMethods() *ControlHistoryUpdateOne {
	_u.mutation.ClearAssessmentMethods()
	return _u
}

// SetControlQuestions sets the "control_questions" field.
func (_u *ControlHistoryUpdateOne) SetControlQuestions(v []string) *ControlHistoryUpdateOne {
	_u.mutation.SetControlQuestions(v)
	return _u
}

// AppendControlQuestions appends value to the "control_questions" field.
func (_u *ControlHistoryUpdateOne) AppendControlQuestions(v []string) *ControlHistoryUpdateOne {
	_u.mutation.AppendControlQuestions(v)
	return _u
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (_u *ControlHistoryUpdateOne) ClearControlQuestions() *ControlHistoryUpdateOne {
	_u.mutation.ClearControlQuestions()
	return _u
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_u *ControlHistoryUpdateOne) SetImplementationGuidance(v []models.ImplementationGuidance) *ControlHistoryUpdateOne {
	_u.mutation.SetImplementationGuidance(v)
	return _u
}

// AppendImplementationGuidance appends value to the "implementation_guidance" field.
func (_u *ControlHistoryUpdateOne) AppendImplementationGuidance(v []models.ImplementationGuidance) *ControlHistoryUpdateOne {
	_u.mutation.AppendImplementationGuidance(v)
	return _u
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (_u *ControlHistoryUpdateOne) ClearImplementationGuidance() *ControlHistoryUpdateOne {
	_u.mutation.ClearImplementationGuidance()
	return _u
}

// SetExampleEvidence sets the "example_evidence" field.
func (_u *ControlHistoryUpdateOne) SetExampleEvidence(v []models.ExampleEvidence) *ControlHistoryUpdateOne {
	_u.mutation.SetExampleEvidence(v)
	return _u
}

// AppendExampleEvidence appends value to the "example_evidence" field.
func (_u *ControlHistoryUpdateOne) AppendExampleEvidence(v []models.ExampleEvidence) *ControlHistoryUpdateOne {
	_u.mutation.AppendExampleEvidence(v)
	return _u
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (_u *ControlHistoryUpdateOne) ClearExampleEvidence() *ControlHistoryUpdateOne {
	_u.mutation.ClearExampleEvidence()
	return _u
}

// SetReferences sets the "references" field.
func (_u *ControlHistoryUpdateOne) SetReferences(v []models.Reference) *ControlHistoryUpdateOne {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *ControlHistoryUpdateOne) AppendReferences(v []models.Reference) *ControlHistoryUpdateOne {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *ControlHistoryUpdateOne) ClearReferences() *ControlHistoryUpdateOne {
	_u.mutation.ClearReferences()
	return _u
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_u *ControlHistoryUpdateOne) SetControlOwnerID(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetControlOwnerID(v)
	return _u
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableControlOwnerID(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetControlOwnerID(*v)
	}
	return _u
}

// ClearControlOwnerID clears the value of the "control_owner_id" field.
func (_u *ControlHistoryUpdateOne) ClearControlOwnerID() *ControlHistoryUpdateOne {
	_u.mutation.ClearControlOwnerID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ControlHistoryUpdateOne) SetDelegateID(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableDelegateID(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ControlHistoryUpdateOne) ClearDelegateID() *ControlHistoryUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetRefCode sets the "ref_code" field.
func (_u *ControlHistoryUpdateOne) SetRefCode(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetRefCode(v)
	return _u
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableRefCode(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetRefCode(*v)
	}
	return _u
}

// SetStandardID sets the "standard_id" field.
func (_u *ControlHistoryUpdateOne) SetStandardID(v string) *ControlHistoryUpdateOne {
	_u.mutation.SetStandardID(v)
	return _u
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (_u *ControlHistoryUpdateOne) SetNillableStandardID(v *string) *ControlHistoryUpdateOne {
	if v != nil {
		_u.SetStandardID(*v)
	}
	return _u
}

// ClearStandardID clears the value of the "standard_id" field.
func (_u *ControlHistoryUpdateOne) ClearStandardID() *ControlHistoryUpdateOne {
	_u.mutation.ClearStandardID()
	return _u
}

// Mutation returns the ControlHistoryMutation object of the builder.
func (_u *ControlHistoryUpdateOne) Mutation() *ControlHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the ControlHistoryUpdate builder.
func (_u *ControlHistoryUpdateOne) Where(ps ...predicate.ControlHistory) *ControlHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ControlHistoryUpdateOne) Select(field string, fields ...string) *ControlHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ControlHistory entity.
func (_u *ControlHistoryUpdateOne) Save(ctx context.Context) (*ControlHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ControlHistoryUpdateOne) SaveX(ctx context.Context) *ControlHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ControlHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ControlHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ControlHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if controlhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ControlHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := controlhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := controlhistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.source": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlType(); ok {
		if err := controlhistory.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.control_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ControlHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ControlHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ControlHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(controlhistory.Table, controlhistory.Columns, sqlgraph.NewFieldSpec(controlhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ControlHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlhistory.FieldID)
		for _, f := range fields {
			if !controlhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != controlhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(controlhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(controlhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(controlhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(controlhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(controlhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(controlhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(controlhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(controlhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(controlhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(controlhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(controlhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(controlhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(controlhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(controlhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ReferenceID(); ok {
		_spec.SetField(controlhistory.FieldReferenceID, field.TypeString, value)
	}
	if _u.mutation.ReferenceIDCleared() {
		_spec.ClearField(controlhistory.FieldReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorReferenceID(); ok {
		_spec.SetField(controlhistory.FieldAuditorReferenceID, field.TypeString, value)
	}
	if _u.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(controlhistory.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(controlhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(controlhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(controlhistory.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(controlhistory.FieldSource, field.TypeEnum)
	}
	if value, ok := _u.mutation.ReferenceFramework(); ok {
		_spec.SetField(controlhistory.FieldReferenceFramework, field.TypeString, value)
	}
	if _u.mutation.ReferenceFrameworkCleared() {
		_spec.ClearField(controlhistory.FieldReferenceFramework, field.TypeString)
	}
	if value, ok := _u.mutation.ControlType(); ok {
		_spec.SetField(controlhistory.FieldControlType, field.TypeEnum, value)
	}
	if _u.mutation.ControlTypeCleared() {
		_spec.ClearField(controlhistory.FieldControlType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(controlhistory.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(controlhistory.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(controlhistory.FieldCategoryID, field.TypeString, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(controlhistory.FieldCategoryID, field.TypeString)
	}
	if value, ok := _u.mutation.Subcategory(); ok {
		_spec.SetField(controlhistory.FieldSubcategory, field.TypeString, value)
	}
	if _u.mutation.SubcategoryCleared() {
		_spec.ClearField(controlhistory.FieldSubcategory, field.TypeString)
	}
	if value, ok := _u.mutation.MappedCategories(); ok {
		_spec.SetField(controlhistory.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldMappedCategories, value)
		})
	}
	if _u.mutation.MappedCategoriesCleared() {
		_spec.ClearField(controlhistory.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentObjectives(); ok {
		_spec.SetField(controlhistory.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldAssessmentObjectives, value)
		})
	}
	if _u.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(controlhistory.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentMethods(); ok {
		_spec.SetField(controlhistory.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldAssessmentMethods, value)
		})
	}
	if _u.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(controlhistory.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlQuestions(); ok {
		_spec.SetField(controlhistory.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldControlQuestions, value)
		})
	}
	if _u.mutation.ControlQuestionsCleared() {
		_spec.ClearField(controlhistory.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImplementationGuidance(); ok {
		_spec.SetField(controlhistory.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldImplementationGuidance, value)
		})
	}
	if _u.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(controlhistory.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExampleEvidence(); ok {
		_spec.SetField(controlhistory.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldExampleEvidence, value)
		})
	}
	if _u.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(controlhistory.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(controlhistory.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlhistory.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(controlhistory.FieldReferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlOwnerID(); ok {
		_spec.SetField(controlhistory.FieldControlOwnerID, field.TypeString, value)
	}
	if _u.mutation.ControlOwnerIDCleared() {
		_spec.ClearField(controlhistory.FieldControlOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(controlhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(controlhistory.FieldDelegateID, field.TypeString)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(controlhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.RefCode(); ok {
		_spec.SetField(controlhistory.FieldRefCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.StandardID(); ok {
		_spec.SetField(controlhistory.FieldStandardID, field.TypeString, value)
	}
	if _u.mutation.StandardIDCleared() {
		_spec.ClearField(controlhistory.FieldStandardID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.ControlHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ControlHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
