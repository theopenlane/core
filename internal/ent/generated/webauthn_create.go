// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/webauthn"
	"github.com/theopenlane/core/pkg/models"
)

// WebauthnCreate is the builder for creating a Webauthn entity.
type WebauthnCreate struct {
	config
	mutation *WebauthnMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *WebauthnCreate) SetCreatedAt(v time.Time) *WebauthnCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableCreatedAt(v *time.Time) *WebauthnCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *WebauthnCreate) SetUpdatedAt(v time.Time) *WebauthnCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableUpdatedAt(v *time.Time) *WebauthnCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *WebauthnCreate) SetCreatedBy(v string) *WebauthnCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableCreatedBy(v *string) *WebauthnCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *WebauthnCreate) SetUpdatedBy(v string) *WebauthnCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableUpdatedBy(v *string) *WebauthnCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *WebauthnCreate) SetTags(v []string) *WebauthnCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *WebauthnCreate) SetOwnerID(v string) *WebauthnCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetCredentialID sets the "credential_id" field.
func (_c *WebauthnCreate) SetCredentialID(v []byte) *WebauthnCreate {
	_c.mutation.SetCredentialID(v)
	return _c
}

// SetPublicKey sets the "public_key" field.
func (_c *WebauthnCreate) SetPublicKey(v []byte) *WebauthnCreate {
	_c.mutation.SetPublicKey(v)
	return _c
}

// SetAttestationType sets the "attestation_type" field.
func (_c *WebauthnCreate) SetAttestationType(v string) *WebauthnCreate {
	_c.mutation.SetAttestationType(v)
	return _c
}

// SetNillableAttestationType sets the "attestation_type" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableAttestationType(v *string) *WebauthnCreate {
	if v != nil {
		_c.SetAttestationType(*v)
	}
	return _c
}

// SetAaguid sets the "aaguid" field.
func (_c *WebauthnCreate) SetAaguid(v *models.AAGUID) *WebauthnCreate {
	_c.mutation.SetAaguid(v)
	return _c
}

// SetSignCount sets the "sign_count" field.
func (_c *WebauthnCreate) SetSignCount(v int32) *WebauthnCreate {
	_c.mutation.SetSignCount(v)
	return _c
}

// SetTransports sets the "transports" field.
func (_c *WebauthnCreate) SetTransports(v []string) *WebauthnCreate {
	_c.mutation.SetTransports(v)
	return _c
}

// SetBackupEligible sets the "backup_eligible" field.
func (_c *WebauthnCreate) SetBackupEligible(v bool) *WebauthnCreate {
	_c.mutation.SetBackupEligible(v)
	return _c
}

// SetNillableBackupEligible sets the "backup_eligible" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableBackupEligible(v *bool) *WebauthnCreate {
	if v != nil {
		_c.SetBackupEligible(*v)
	}
	return _c
}

// SetBackupState sets the "backup_state" field.
func (_c *WebauthnCreate) SetBackupState(v bool) *WebauthnCreate {
	_c.mutation.SetBackupState(v)
	return _c
}

// SetNillableBackupState sets the "backup_state" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableBackupState(v *bool) *WebauthnCreate {
	if v != nil {
		_c.SetBackupState(*v)
	}
	return _c
}

// SetUserPresent sets the "user_present" field.
func (_c *WebauthnCreate) SetUserPresent(v bool) *WebauthnCreate {
	_c.mutation.SetUserPresent(v)
	return _c
}

// SetNillableUserPresent sets the "user_present" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableUserPresent(v *bool) *WebauthnCreate {
	if v != nil {
		_c.SetUserPresent(*v)
	}
	return _c
}

// SetUserVerified sets the "user_verified" field.
func (_c *WebauthnCreate) SetUserVerified(v bool) *WebauthnCreate {
	_c.mutation.SetUserVerified(v)
	return _c
}

// SetNillableUserVerified sets the "user_verified" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableUserVerified(v *bool) *WebauthnCreate {
	if v != nil {
		_c.SetUserVerified(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *WebauthnCreate) SetID(v string) *WebauthnCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *WebauthnCreate) SetNillableID(v *string) *WebauthnCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the User entity.
func (_c *WebauthnCreate) SetOwner(v *User) *WebauthnCreate {
	return _c.SetOwnerID(v.ID)
}

// Mutation returns the WebauthnMutation object of the builder.
func (_c *WebauthnCreate) Mutation() *WebauthnMutation {
	return _c.mutation
}

// Save creates the Webauthn in the database.
func (_c *WebauthnCreate) Save(ctx context.Context) (*Webauthn, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WebauthnCreate) SaveX(ctx context.Context) *Webauthn {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WebauthnCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WebauthnCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *WebauthnCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if webauthn.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized webauthn.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := webauthn.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if webauthn.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized webauthn.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := webauthn.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := webauthn.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.BackupEligible(); !ok {
		v := webauthn.DefaultBackupEligible
		_c.mutation.SetBackupEligible(v)
	}
	if _, ok := _c.mutation.BackupState(); !ok {
		v := webauthn.DefaultBackupState
		_c.mutation.SetBackupState(v)
	}
	if _, ok := _c.mutation.UserPresent(); !ok {
		v := webauthn.DefaultUserPresent
		_c.mutation.SetUserPresent(v)
	}
	if _, ok := _c.mutation.UserVerified(); !ok {
		v := webauthn.DefaultUserVerified
		_c.mutation.SetUserVerified(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if webauthn.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized webauthn.DefaultID (forgotten import generated/runtime?)")
		}
		v := webauthn.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *WebauthnCreate) check() error {
	if _, ok := _c.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`generated: missing required field "Webauthn.owner_id"`)}
	}
	if _, ok := _c.mutation.Aaguid(); !ok {
		return &ValidationError{Name: "aaguid", err: errors.New(`generated: missing required field "Webauthn.aaguid"`)}
	}
	if _, ok := _c.mutation.SignCount(); !ok {
		return &ValidationError{Name: "sign_count", err: errors.New(`generated: missing required field "Webauthn.sign_count"`)}
	}
	if _, ok := _c.mutation.Transports(); !ok {
		return &ValidationError{Name: "transports", err: errors.New(`generated: missing required field "Webauthn.transports"`)}
	}
	if _, ok := _c.mutation.BackupEligible(); !ok {
		return &ValidationError{Name: "backup_eligible", err: errors.New(`generated: missing required field "Webauthn.backup_eligible"`)}
	}
	if _, ok := _c.mutation.BackupState(); !ok {
		return &ValidationError{Name: "backup_state", err: errors.New(`generated: missing required field "Webauthn.backup_state"`)}
	}
	if _, ok := _c.mutation.UserPresent(); !ok {
		return &ValidationError{Name: "user_present", err: errors.New(`generated: missing required field "Webauthn.user_present"`)}
	}
	if _, ok := _c.mutation.UserVerified(); !ok {
		return &ValidationError{Name: "user_verified", err: errors.New(`generated: missing required field "Webauthn.user_verified"`)}
	}
	if len(_c.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`generated: missing required edge "Webauthn.owner"`)}
	}
	return nil
}

func (_c *WebauthnCreate) sqlSave(ctx context.Context) (*Webauthn, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Webauthn.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WebauthnCreate) createSpec() (*Webauthn, *sqlgraph.CreateSpec) {
	var (
		_node = &Webauthn{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(webauthn.Table, sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Webauthn
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(webauthn.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(webauthn.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(webauthn.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(webauthn.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(webauthn.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.CredentialID(); ok {
		_spec.SetField(webauthn.FieldCredentialID, field.TypeBytes, value)
		_node.CredentialID = value
	}
	if value, ok := _c.mutation.PublicKey(); ok {
		_spec.SetField(webauthn.FieldPublicKey, field.TypeBytes, value)
		_node.PublicKey = value
	}
	if value, ok := _c.mutation.AttestationType(); ok {
		_spec.SetField(webauthn.FieldAttestationType, field.TypeString, value)
		_node.AttestationType = value
	}
	if value, ok := _c.mutation.Aaguid(); ok {
		_spec.SetField(webauthn.FieldAaguid, field.TypeOther, value)
		_node.Aaguid = value
	}
	if value, ok := _c.mutation.SignCount(); ok {
		_spec.SetField(webauthn.FieldSignCount, field.TypeInt32, value)
		_node.SignCount = value
	}
	if value, ok := _c.mutation.Transports(); ok {
		_spec.SetField(webauthn.FieldTransports, field.TypeJSON, value)
		_node.Transports = value
	}
	if value, ok := _c.mutation.BackupEligible(); ok {
		_spec.SetField(webauthn.FieldBackupEligible, field.TypeBool, value)
		_node.BackupEligible = value
	}
	if value, ok := _c.mutation.BackupState(); ok {
		_spec.SetField(webauthn.FieldBackupState, field.TypeBool, value)
		_node.BackupState = value
	}
	if value, ok := _c.mutation.UserPresent(); ok {
		_spec.SetField(webauthn.FieldUserPresent, field.TypeBool, value)
		_node.UserPresent = value
	}
	if value, ok := _c.mutation.UserVerified(); ok {
		_spec.SetField(webauthn.FieldUserVerified, field.TypeBool, value)
		_node.UserVerified = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthn.OwnerTable,
			Columns: []string{webauthn.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Webauthn
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WebauthnCreateBulk is the builder for creating many Webauthn entities in bulk.
type WebauthnCreateBulk struct {
	config
	err      error
	builders []*WebauthnCreate
}

// Save creates the Webauthn entities in the database.
func (_c *WebauthnCreateBulk) Save(ctx context.Context) ([]*Webauthn, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Webauthn, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebauthnMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WebauthnCreateBulk) SaveX(ctx context.Context) []*Webauthn {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WebauthnCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WebauthnCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
