// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TFASettingUpdate is the builder for updating TFASetting entities.
type TFASettingUpdate struct {
	config
	hooks     []Hook
	mutation  *TFASettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TFASettingUpdate builder.
func (_u *TFASettingUpdate) Where(ps ...predicate.TFASetting) *TFASettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TFASettingUpdate) SetUpdatedAt(v time.Time) *TFASettingUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TFASettingUpdate) ClearUpdatedAt() *TFASettingUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TFASettingUpdate) SetUpdatedBy(v string) *TFASettingUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillableUpdatedBy(v *string) *TFASettingUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TFASettingUpdate) ClearUpdatedBy() *TFASettingUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TFASettingUpdate) SetDeletedAt(v time.Time) *TFASettingUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillableDeletedAt(v *time.Time) *TFASettingUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TFASettingUpdate) ClearDeletedAt() *TFASettingUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TFASettingUpdate) SetDeletedBy(v string) *TFASettingUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillableDeletedBy(v *string) *TFASettingUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TFASettingUpdate) ClearDeletedBy() *TFASettingUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TFASettingUpdate) SetOwnerID(v string) *TFASettingUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillableOwnerID(v *string) *TFASettingUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TFASettingUpdate) ClearOwnerID() *TFASettingUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetTfaSecret sets the "tfa_secret" field.
func (_u *TFASettingUpdate) SetTfaSecret(v string) *TFASettingUpdate {
	_u.mutation.SetTfaSecret(v)
	return _u
}

// SetNillableTfaSecret sets the "tfa_secret" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillableTfaSecret(v *string) *TFASettingUpdate {
	if v != nil {
		_u.SetTfaSecret(*v)
	}
	return _u
}

// ClearTfaSecret clears the value of the "tfa_secret" field.
func (_u *TFASettingUpdate) ClearTfaSecret() *TFASettingUpdate {
	_u.mutation.ClearTfaSecret()
	return _u
}

// SetVerified sets the "verified" field.
func (_u *TFASettingUpdate) SetVerified(v bool) *TFASettingUpdate {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillableVerified(v *bool) *TFASettingUpdate {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// SetRecoveryCodes sets the "recovery_codes" field.
func (_u *TFASettingUpdate) SetRecoveryCodes(v []string) *TFASettingUpdate {
	_u.mutation.SetRecoveryCodes(v)
	return _u
}

// AppendRecoveryCodes appends value to the "recovery_codes" field.
func (_u *TFASettingUpdate) AppendRecoveryCodes(v []string) *TFASettingUpdate {
	_u.mutation.AppendRecoveryCodes(v)
	return _u
}

// ClearRecoveryCodes clears the value of the "recovery_codes" field.
func (_u *TFASettingUpdate) ClearRecoveryCodes() *TFASettingUpdate {
	_u.mutation.ClearRecoveryCodes()
	return _u
}

// SetPhoneOtpAllowed sets the "phone_otp_allowed" field.
func (_u *TFASettingUpdate) SetPhoneOtpAllowed(v bool) *TFASettingUpdate {
	_u.mutation.SetPhoneOtpAllowed(v)
	return _u
}

// SetNillablePhoneOtpAllowed sets the "phone_otp_allowed" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillablePhoneOtpAllowed(v *bool) *TFASettingUpdate {
	if v != nil {
		_u.SetPhoneOtpAllowed(*v)
	}
	return _u
}

// ClearPhoneOtpAllowed clears the value of the "phone_otp_allowed" field.
func (_u *TFASettingUpdate) ClearPhoneOtpAllowed() *TFASettingUpdate {
	_u.mutation.ClearPhoneOtpAllowed()
	return _u
}

// SetEmailOtpAllowed sets the "email_otp_allowed" field.
func (_u *TFASettingUpdate) SetEmailOtpAllowed(v bool) *TFASettingUpdate {
	_u.mutation.SetEmailOtpAllowed(v)
	return _u
}

// SetNillableEmailOtpAllowed sets the "email_otp_allowed" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillableEmailOtpAllowed(v *bool) *TFASettingUpdate {
	if v != nil {
		_u.SetEmailOtpAllowed(*v)
	}
	return _u
}

// ClearEmailOtpAllowed clears the value of the "email_otp_allowed" field.
func (_u *TFASettingUpdate) ClearEmailOtpAllowed() *TFASettingUpdate {
	_u.mutation.ClearEmailOtpAllowed()
	return _u
}

// SetTotpAllowed sets the "totp_allowed" field.
func (_u *TFASettingUpdate) SetTotpAllowed(v bool) *TFASettingUpdate {
	_u.mutation.SetTotpAllowed(v)
	return _u
}

// SetNillableTotpAllowed sets the "totp_allowed" field if the given value is not nil.
func (_u *TFASettingUpdate) SetNillableTotpAllowed(v *bool) *TFASettingUpdate {
	if v != nil {
		_u.SetTotpAllowed(*v)
	}
	return _u
}

// ClearTotpAllowed clears the value of the "totp_allowed" field.
func (_u *TFASettingUpdate) ClearTotpAllowed() *TFASettingUpdate {
	_u.mutation.ClearTotpAllowed()
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *TFASettingUpdate) SetOwner(v *User) *TFASettingUpdate {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the TFASettingMutation object of the builder.
func (_u *TFASettingUpdate) Mutation() *TFASettingMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *TFASettingUpdate) ClearOwner() *TFASettingUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TFASettingUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TFASettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TFASettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TFASettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TFASettingUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if tfasetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tfasetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tfasetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TFASettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TFASettingUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TFASettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tfasetting.Table, tfasetting.Columns, sqlgraph.NewFieldSpec(tfasetting.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(tfasetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tfasetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(tfasetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(tfasetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(tfasetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(tfasetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(tfasetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(tfasetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(tfasetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(tfasetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.TfaSecret(); ok {
		_spec.SetField(tfasetting.FieldTfaSecret, field.TypeString, value)
	}
	if _u.mutation.TfaSecretCleared() {
		_spec.ClearField(tfasetting.FieldTfaSecret, field.TypeString)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(tfasetting.FieldVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RecoveryCodes(); ok {
		_spec.SetField(tfasetting.FieldRecoveryCodes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRecoveryCodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tfasetting.FieldRecoveryCodes, value)
		})
	}
	if _u.mutation.RecoveryCodesCleared() {
		_spec.ClearField(tfasetting.FieldRecoveryCodes, field.TypeJSON)
	}
	if value, ok := _u.mutation.PhoneOtpAllowed(); ok {
		_spec.SetField(tfasetting.FieldPhoneOtpAllowed, field.TypeBool, value)
	}
	if _u.mutation.PhoneOtpAllowedCleared() {
		_spec.ClearField(tfasetting.FieldPhoneOtpAllowed, field.TypeBool)
	}
	if value, ok := _u.mutation.EmailOtpAllowed(); ok {
		_spec.SetField(tfasetting.FieldEmailOtpAllowed, field.TypeBool, value)
	}
	if _u.mutation.EmailOtpAllowedCleared() {
		_spec.ClearField(tfasetting.FieldEmailOtpAllowed, field.TypeBool)
	}
	if value, ok := _u.mutation.TotpAllowed(); ok {
		_spec.SetField(tfasetting.FieldTotpAllowed, field.TypeBool, value)
	}
	if _u.mutation.TotpAllowedCleared() {
		_spec.ClearField(tfasetting.FieldTotpAllowed, field.TypeBool)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tfasetting.OwnerTable,
			Columns: []string{tfasetting.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TFASetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tfasetting.OwnerTable,
			Columns: []string{tfasetting.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TFASetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TFASetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tfasetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TFASettingUpdateOne is the builder for updating a single TFASetting entity.
type TFASettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TFASettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TFASettingUpdateOne) SetUpdatedAt(v time.Time) *TFASettingUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TFASettingUpdateOne) ClearUpdatedAt() *TFASettingUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TFASettingUpdateOne) SetUpdatedBy(v string) *TFASettingUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillableUpdatedBy(v *string) *TFASettingUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TFASettingUpdateOne) ClearUpdatedBy() *TFASettingUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TFASettingUpdateOne) SetDeletedAt(v time.Time) *TFASettingUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillableDeletedAt(v *time.Time) *TFASettingUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TFASettingUpdateOne) ClearDeletedAt() *TFASettingUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TFASettingUpdateOne) SetDeletedBy(v string) *TFASettingUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillableDeletedBy(v *string) *TFASettingUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TFASettingUpdateOne) ClearDeletedBy() *TFASettingUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TFASettingUpdateOne) SetOwnerID(v string) *TFASettingUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillableOwnerID(v *string) *TFASettingUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TFASettingUpdateOne) ClearOwnerID() *TFASettingUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetTfaSecret sets the "tfa_secret" field.
func (_u *TFASettingUpdateOne) SetTfaSecret(v string) *TFASettingUpdateOne {
	_u.mutation.SetTfaSecret(v)
	return _u
}

// SetNillableTfaSecret sets the "tfa_secret" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillableTfaSecret(v *string) *TFASettingUpdateOne {
	if v != nil {
		_u.SetTfaSecret(*v)
	}
	return _u
}

// ClearTfaSecret clears the value of the "tfa_secret" field.
func (_u *TFASettingUpdateOne) ClearTfaSecret() *TFASettingUpdateOne {
	_u.mutation.ClearTfaSecret()
	return _u
}

// SetVerified sets the "verified" field.
func (_u *TFASettingUpdateOne) SetVerified(v bool) *TFASettingUpdateOne {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillableVerified(v *bool) *TFASettingUpdateOne {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// SetRecoveryCodes sets the "recovery_codes" field.
func (_u *TFASettingUpdateOne) SetRecoveryCodes(v []string) *TFASettingUpdateOne {
	_u.mutation.SetRecoveryCodes(v)
	return _u
}

// AppendRecoveryCodes appends value to the "recovery_codes" field.
func (_u *TFASettingUpdateOne) AppendRecoveryCodes(v []string) *TFASettingUpdateOne {
	_u.mutation.AppendRecoveryCodes(v)
	return _u
}

// ClearRecoveryCodes clears the value of the "recovery_codes" field.
func (_u *TFASettingUpdateOne) ClearRecoveryCodes() *TFASettingUpdateOne {
	_u.mutation.ClearRecoveryCodes()
	return _u
}

// SetPhoneOtpAllowed sets the "phone_otp_allowed" field.
func (_u *TFASettingUpdateOne) SetPhoneOtpAllowed(v bool) *TFASettingUpdateOne {
	_u.mutation.SetPhoneOtpAllowed(v)
	return _u
}

// SetNillablePhoneOtpAllowed sets the "phone_otp_allowed" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillablePhoneOtpAllowed(v *bool) *TFASettingUpdateOne {
	if v != nil {
		_u.SetPhoneOtpAllowed(*v)
	}
	return _u
}

// ClearPhoneOtpAllowed clears the value of the "phone_otp_allowed" field.
func (_u *TFASettingUpdateOne) ClearPhoneOtpAllowed() *TFASettingUpdateOne {
	_u.mutation.ClearPhoneOtpAllowed()
	return _u
}

// SetEmailOtpAllowed sets the "email_otp_allowed" field.
func (_u *TFASettingUpdateOne) SetEmailOtpAllowed(v bool) *TFASettingUpdateOne {
	_u.mutation.SetEmailOtpAllowed(v)
	return _u
}

// SetNillableEmailOtpAllowed sets the "email_otp_allowed" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillableEmailOtpAllowed(v *bool) *TFASettingUpdateOne {
	if v != nil {
		_u.SetEmailOtpAllowed(*v)
	}
	return _u
}

// ClearEmailOtpAllowed clears the value of the "email_otp_allowed" field.
func (_u *TFASettingUpdateOne) ClearEmailOtpAllowed() *TFASettingUpdateOne {
	_u.mutation.ClearEmailOtpAllowed()
	return _u
}

// SetTotpAllowed sets the "totp_allowed" field.
func (_u *TFASettingUpdateOne) SetTotpAllowed(v bool) *TFASettingUpdateOne {
	_u.mutation.SetTotpAllowed(v)
	return _u
}

// SetNillableTotpAllowed sets the "totp_allowed" field if the given value is not nil.
func (_u *TFASettingUpdateOne) SetNillableTotpAllowed(v *bool) *TFASettingUpdateOne {
	if v != nil {
		_u.SetTotpAllowed(*v)
	}
	return _u
}

// ClearTotpAllowed clears the value of the "totp_allowed" field.
func (_u *TFASettingUpdateOne) ClearTotpAllowed() *TFASettingUpdateOne {
	_u.mutation.ClearTotpAllowed()
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *TFASettingUpdateOne) SetOwner(v *User) *TFASettingUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the TFASettingMutation object of the builder.
func (_u *TFASettingUpdateOne) Mutation() *TFASettingMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *TFASettingUpdateOne) ClearOwner() *TFASettingUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// Where appends a list predicates to the TFASettingUpdate builder.
func (_u *TFASettingUpdateOne) Where(ps ...predicate.TFASetting) *TFASettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TFASettingUpdateOne) Select(field string, fields ...string) *TFASettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TFASetting entity.
func (_u *TFASettingUpdateOne) Save(ctx context.Context) (*TFASetting, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TFASettingUpdateOne) SaveX(ctx context.Context) *TFASetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TFASettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TFASettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TFASettingUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if tfasetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tfasetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tfasetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TFASettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TFASettingUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TFASettingUpdateOne) sqlSave(ctx context.Context) (_node *TFASetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(tfasetting.Table, tfasetting.Columns, sqlgraph.NewFieldSpec(tfasetting.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TFASetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tfasetting.FieldID)
		for _, f := range fields {
			if !tfasetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != tfasetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(tfasetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tfasetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(tfasetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(tfasetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(tfasetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(tfasetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(tfasetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(tfasetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(tfasetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(tfasetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.TfaSecret(); ok {
		_spec.SetField(tfasetting.FieldTfaSecret, field.TypeString, value)
	}
	if _u.mutation.TfaSecretCleared() {
		_spec.ClearField(tfasetting.FieldTfaSecret, field.TypeString)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(tfasetting.FieldVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RecoveryCodes(); ok {
		_spec.SetField(tfasetting.FieldRecoveryCodes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRecoveryCodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tfasetting.FieldRecoveryCodes, value)
		})
	}
	if _u.mutation.RecoveryCodesCleared() {
		_spec.ClearField(tfasetting.FieldRecoveryCodes, field.TypeJSON)
	}
	if value, ok := _u.mutation.PhoneOtpAllowed(); ok {
		_spec.SetField(tfasetting.FieldPhoneOtpAllowed, field.TypeBool, value)
	}
	if _u.mutation.PhoneOtpAllowedCleared() {
		_spec.ClearField(tfasetting.FieldPhoneOtpAllowed, field.TypeBool)
	}
	if value, ok := _u.mutation.EmailOtpAllowed(); ok {
		_spec.SetField(tfasetting.FieldEmailOtpAllowed, field.TypeBool, value)
	}
	if _u.mutation.EmailOtpAllowedCleared() {
		_spec.ClearField(tfasetting.FieldEmailOtpAllowed, field.TypeBool)
	}
	if value, ok := _u.mutation.TotpAllowed(); ok {
		_spec.SetField(tfasetting.FieldTotpAllowed, field.TypeBool, value)
	}
	if _u.mutation.TotpAllowedCleared() {
		_spec.ClearField(tfasetting.FieldTotpAllowed, field.TypeBool)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tfasetting.OwnerTable,
			Columns: []string{tfasetting.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TFASetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tfasetting.OwnerTable,
			Columns: []string{tfasetting.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TFASetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TFASetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TFASetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tfasetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
