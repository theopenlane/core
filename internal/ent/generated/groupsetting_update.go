// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// GroupSettingUpdate is the builder for updating GroupSetting entities.
type GroupSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *GroupSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GroupSettingUpdate builder.
func (_u *GroupSettingUpdate) Where(ps ...predicate.GroupSetting) *GroupSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GroupSettingUpdate) SetUpdatedAt(v time.Time) *GroupSettingUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *GroupSettingUpdate) ClearUpdatedAt() *GroupSettingUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *GroupSettingUpdate) SetUpdatedBy(v string) *GroupSettingUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *GroupSettingUpdate) SetNillableUpdatedBy(v *string) *GroupSettingUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *GroupSettingUpdate) ClearUpdatedBy() *GroupSettingUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *GroupSettingUpdate) SetDeletedAt(v time.Time) *GroupSettingUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *GroupSettingUpdate) SetNillableDeletedAt(v *time.Time) *GroupSettingUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *GroupSettingUpdate) ClearDeletedAt() *GroupSettingUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *GroupSettingUpdate) SetDeletedBy(v string) *GroupSettingUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *GroupSettingUpdate) SetNillableDeletedBy(v *string) *GroupSettingUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *GroupSettingUpdate) ClearDeletedBy() *GroupSettingUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetVisibility sets the "visibility" field.
func (_u *GroupSettingUpdate) SetVisibility(v enums.Visibility) *GroupSettingUpdate {
	_u.mutation.SetVisibility(v)
	return _u
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (_u *GroupSettingUpdate) SetNillableVisibility(v *enums.Visibility) *GroupSettingUpdate {
	if v != nil {
		_u.SetVisibility(*v)
	}
	return _u
}

// SetJoinPolicy sets the "join_policy" field.
func (_u *GroupSettingUpdate) SetJoinPolicy(v enums.JoinPolicy) *GroupSettingUpdate {
	_u.mutation.SetJoinPolicy(v)
	return _u
}

// SetNillableJoinPolicy sets the "join_policy" field if the given value is not nil.
func (_u *GroupSettingUpdate) SetNillableJoinPolicy(v *enums.JoinPolicy) *GroupSettingUpdate {
	if v != nil {
		_u.SetJoinPolicy(*v)
	}
	return _u
}

// SetSyncToSlack sets the "sync_to_slack" field.
func (_u *GroupSettingUpdate) SetSyncToSlack(v bool) *GroupSettingUpdate {
	_u.mutation.SetSyncToSlack(v)
	return _u
}

// SetNillableSyncToSlack sets the "sync_to_slack" field if the given value is not nil.
func (_u *GroupSettingUpdate) SetNillableSyncToSlack(v *bool) *GroupSettingUpdate {
	if v != nil {
		_u.SetSyncToSlack(*v)
	}
	return _u
}

// ClearSyncToSlack clears the value of the "sync_to_slack" field.
func (_u *GroupSettingUpdate) ClearSyncToSlack() *GroupSettingUpdate {
	_u.mutation.ClearSyncToSlack()
	return _u
}

// SetSyncToGithub sets the "sync_to_github" field.
func (_u *GroupSettingUpdate) SetSyncToGithub(v bool) *GroupSettingUpdate {
	_u.mutation.SetSyncToGithub(v)
	return _u
}

// SetNillableSyncToGithub sets the "sync_to_github" field if the given value is not nil.
func (_u *GroupSettingUpdate) SetNillableSyncToGithub(v *bool) *GroupSettingUpdate {
	if v != nil {
		_u.SetSyncToGithub(*v)
	}
	return _u
}

// ClearSyncToGithub clears the value of the "sync_to_github" field.
func (_u *GroupSettingUpdate) ClearSyncToGithub() *GroupSettingUpdate {
	_u.mutation.ClearSyncToGithub()
	return _u
}

// SetGroupID sets the "group_id" field.
func (_u *GroupSettingUpdate) SetGroupID(v string) *GroupSettingUpdate {
	_u.mutation.SetGroupID(v)
	return _u
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (_u *GroupSettingUpdate) SetNillableGroupID(v *string) *GroupSettingUpdate {
	if v != nil {
		_u.SetGroupID(*v)
	}
	return _u
}

// ClearGroupID clears the value of the "group_id" field.
func (_u *GroupSettingUpdate) ClearGroupID() *GroupSettingUpdate {
	_u.mutation.ClearGroupID()
	return _u
}

// SetGroup sets the "group" edge to the Group entity.
func (_u *GroupSettingUpdate) SetGroup(v *Group) *GroupSettingUpdate {
	return _u.SetGroupID(v.ID)
}

// Mutation returns the GroupSettingMutation object of the builder.
func (_u *GroupSettingUpdate) Mutation() *GroupSettingMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (_u *GroupSettingUpdate) ClearGroup() *GroupSettingUpdate {
	_u.mutation.ClearGroup()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GroupSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GroupSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GroupSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GroupSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GroupSettingUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if groupsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized groupsetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := groupsetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *GroupSettingUpdate) check() error {
	if v, ok := _u.mutation.Visibility(); ok {
		if err := groupsetting.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`generated: validator failed for field "GroupSetting.visibility": %w`, err)}
		}
	}
	if v, ok := _u.mutation.JoinPolicy(); ok {
		if err := groupsetting.JoinPolicyValidator(v); err != nil {
			return &ValidationError{Name: "join_policy", err: fmt.Errorf(`generated: validator failed for field "GroupSetting.join_policy": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *GroupSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GroupSettingUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *GroupSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupsetting.Table, groupsetting.Columns, sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(groupsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(groupsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(groupsetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(groupsetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(groupsetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(groupsetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(groupsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(groupsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(groupsetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(groupsetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Visibility(); ok {
		_spec.SetField(groupsetting.FieldVisibility, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.JoinPolicy(); ok {
		_spec.SetField(groupsetting.FieldJoinPolicy, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SyncToSlack(); ok {
		_spec.SetField(groupsetting.FieldSyncToSlack, field.TypeBool, value)
	}
	if _u.mutation.SyncToSlackCleared() {
		_spec.ClearField(groupsetting.FieldSyncToSlack, field.TypeBool)
	}
	if value, ok := _u.mutation.SyncToGithub(); ok {
		_spec.SetField(groupsetting.FieldSyncToGithub, field.TypeBool, value)
	}
	if _u.mutation.SyncToGithubCleared() {
		_spec.ClearField(groupsetting.FieldSyncToGithub, field.TypeBool)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsetting.GroupTable,
			Columns: []string{groupsetting.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsetting.GroupTable,
			Columns: []string{groupsetting.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.GroupSetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GroupSettingUpdateOne is the builder for updating a single GroupSetting entity.
type GroupSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GroupSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GroupSettingUpdateOne) SetUpdatedAt(v time.Time) *GroupSettingUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *GroupSettingUpdateOne) ClearUpdatedAt() *GroupSettingUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *GroupSettingUpdateOne) SetUpdatedBy(v string) *GroupSettingUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *GroupSettingUpdateOne) SetNillableUpdatedBy(v *string) *GroupSettingUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *GroupSettingUpdateOne) ClearUpdatedBy() *GroupSettingUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *GroupSettingUpdateOne) SetDeletedAt(v time.Time) *GroupSettingUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *GroupSettingUpdateOne) SetNillableDeletedAt(v *time.Time) *GroupSettingUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *GroupSettingUpdateOne) ClearDeletedAt() *GroupSettingUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *GroupSettingUpdateOne) SetDeletedBy(v string) *GroupSettingUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *GroupSettingUpdateOne) SetNillableDeletedBy(v *string) *GroupSettingUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *GroupSettingUpdateOne) ClearDeletedBy() *GroupSettingUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetVisibility sets the "visibility" field.
func (_u *GroupSettingUpdateOne) SetVisibility(v enums.Visibility) *GroupSettingUpdateOne {
	_u.mutation.SetVisibility(v)
	return _u
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (_u *GroupSettingUpdateOne) SetNillableVisibility(v *enums.Visibility) *GroupSettingUpdateOne {
	if v != nil {
		_u.SetVisibility(*v)
	}
	return _u
}

// SetJoinPolicy sets the "join_policy" field.
func (_u *GroupSettingUpdateOne) SetJoinPolicy(v enums.JoinPolicy) *GroupSettingUpdateOne {
	_u.mutation.SetJoinPolicy(v)
	return _u
}

// SetNillableJoinPolicy sets the "join_policy" field if the given value is not nil.
func (_u *GroupSettingUpdateOne) SetNillableJoinPolicy(v *enums.JoinPolicy) *GroupSettingUpdateOne {
	if v != nil {
		_u.SetJoinPolicy(*v)
	}
	return _u
}

// SetSyncToSlack sets the "sync_to_slack" field.
func (_u *GroupSettingUpdateOne) SetSyncToSlack(v bool) *GroupSettingUpdateOne {
	_u.mutation.SetSyncToSlack(v)
	return _u
}

// SetNillableSyncToSlack sets the "sync_to_slack" field if the given value is not nil.
func (_u *GroupSettingUpdateOne) SetNillableSyncToSlack(v *bool) *GroupSettingUpdateOne {
	if v != nil {
		_u.SetSyncToSlack(*v)
	}
	return _u
}

// ClearSyncToSlack clears the value of the "sync_to_slack" field.
func (_u *GroupSettingUpdateOne) ClearSyncToSlack() *GroupSettingUpdateOne {
	_u.mutation.ClearSyncToSlack()
	return _u
}

// SetSyncToGithub sets the "sync_to_github" field.
func (_u *GroupSettingUpdateOne) SetSyncToGithub(v bool) *GroupSettingUpdateOne {
	_u.mutation.SetSyncToGithub(v)
	return _u
}

// SetNillableSyncToGithub sets the "sync_to_github" field if the given value is not nil.
func (_u *GroupSettingUpdateOne) SetNillableSyncToGithub(v *bool) *GroupSettingUpdateOne {
	if v != nil {
		_u.SetSyncToGithub(*v)
	}
	return _u
}

// ClearSyncToGithub clears the value of the "sync_to_github" field.
func (_u *GroupSettingUpdateOne) ClearSyncToGithub() *GroupSettingUpdateOne {
	_u.mutation.ClearSyncToGithub()
	return _u
}

// SetGroupID sets the "group_id" field.
func (_u *GroupSettingUpdateOne) SetGroupID(v string) *GroupSettingUpdateOne {
	_u.mutation.SetGroupID(v)
	return _u
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (_u *GroupSettingUpdateOne) SetNillableGroupID(v *string) *GroupSettingUpdateOne {
	if v != nil {
		_u.SetGroupID(*v)
	}
	return _u
}

// ClearGroupID clears the value of the "group_id" field.
func (_u *GroupSettingUpdateOne) ClearGroupID() *GroupSettingUpdateOne {
	_u.mutation.ClearGroupID()
	return _u
}

// SetGroup sets the "group" edge to the Group entity.
func (_u *GroupSettingUpdateOne) SetGroup(v *Group) *GroupSettingUpdateOne {
	return _u.SetGroupID(v.ID)
}

// Mutation returns the GroupSettingMutation object of the builder.
func (_u *GroupSettingUpdateOne) Mutation() *GroupSettingMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (_u *GroupSettingUpdateOne) ClearGroup() *GroupSettingUpdateOne {
	_u.mutation.ClearGroup()
	return _u
}

// Where appends a list predicates to the GroupSettingUpdate builder.
func (_u *GroupSettingUpdateOne) Where(ps ...predicate.GroupSetting) *GroupSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GroupSettingUpdateOne) Select(field string, fields ...string) *GroupSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GroupSetting entity.
func (_u *GroupSettingUpdateOne) Save(ctx context.Context) (*GroupSetting, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GroupSettingUpdateOne) SaveX(ctx context.Context) *GroupSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GroupSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GroupSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GroupSettingUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if groupsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized groupsetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := groupsetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *GroupSettingUpdateOne) check() error {
	if v, ok := _u.mutation.Visibility(); ok {
		if err := groupsetting.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`generated: validator failed for field "GroupSetting.visibility": %w`, err)}
		}
	}
	if v, ok := _u.mutation.JoinPolicy(); ok {
		if err := groupsetting.JoinPolicyValidator(v); err != nil {
			return &ValidationError{Name: "join_policy", err: fmt.Errorf(`generated: validator failed for field "GroupSetting.join_policy": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *GroupSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GroupSettingUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *GroupSettingUpdateOne) sqlSave(ctx context.Context) (_node *GroupSetting, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupsetting.Table, groupsetting.Columns, sqlgraph.NewFieldSpec(groupsetting.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "GroupSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupsetting.FieldID)
		for _, f := range fields {
			if !groupsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != groupsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(groupsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(groupsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(groupsetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(groupsetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(groupsetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(groupsetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(groupsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(groupsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(groupsetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(groupsetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Visibility(); ok {
		_spec.SetField(groupsetting.FieldVisibility, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.JoinPolicy(); ok {
		_spec.SetField(groupsetting.FieldJoinPolicy, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SyncToSlack(); ok {
		_spec.SetField(groupsetting.FieldSyncToSlack, field.TypeBool, value)
	}
	if _u.mutation.SyncToSlackCleared() {
		_spec.ClearField(groupsetting.FieldSyncToSlack, field.TypeBool)
	}
	if value, ok := _u.mutation.SyncToGithub(); ok {
		_spec.SetField(groupsetting.FieldSyncToGithub, field.TypeBool, value)
	}
	if _u.mutation.SyncToGithubCleared() {
		_spec.ClearField(groupsetting.FieldSyncToGithub, field.TypeBool)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsetting.GroupTable,
			Columns: []string{groupsetting.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsetting.GroupTable,
			Columns: []string{groupsetting.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.GroupSetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &GroupSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
