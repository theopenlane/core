// Code generated by ent, DO NOT EDIT.

package subcontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedByID applies equality check predicate on the "created_by_id" field. It's identical to CreatedByIDEQ.
func CreatedByID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldCreatedByID, v))
}

// UpdatedByID applies equality check predicate on the "updated_by_id" field. It's identical to UpdatedByIDEQ.
func UpdatedByID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldUpdatedByID, v))
}

// CreatedByUserID applies equality check predicate on the "created_by_user_id" field. It's identical to CreatedByUserIDEQ.
func CreatedByUserID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldCreatedByUserID, v))
}

// UpdatedByUserID applies equality check predicate on the "updated_by_user_id" field. It's identical to UpdatedByUserIDEQ.
func UpdatedByUserID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldUpdatedByUserID, v))
}

// CreatedByServiceID applies equality check predicate on the "created_by_service_id" field. It's identical to CreatedByServiceIDEQ.
func CreatedByServiceID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldCreatedByServiceID, v))
}

// UpdatedByServiceID applies equality check predicate on the "updated_by_service_id" field. It's identical to UpdatedByServiceIDEQ.
func UpdatedByServiceID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldUpdatedByServiceID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedByID applies equality check predicate on the "deleted_by_id" field. It's identical to DeletedByIDEQ.
func DeletedByID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldDeletedByID, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldMappingID, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldOwnerID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldStatus, v))
}

// SubcontrolType applies equality check predicate on the "subcontrol_type" field. It's identical to SubcontrolTypeEQ.
func SubcontrolType(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldSubcontrolType, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldVersion, v))
}

// SubcontrolNumber applies equality check predicate on the "subcontrol_number" field. It's identical to SubcontrolNumberEQ.
func SubcontrolNumber(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldSubcontrolNumber, v))
}

// Family applies equality check predicate on the "family" field. It's identical to FamilyEQ.
func Family(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldFamily, v))
}

// Class applies equality check predicate on the "class" field. It's identical to ClassEQ.
func Class(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldClass, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldSource, v))
}

// MappedFrameworks applies equality check predicate on the "mapped_frameworks" field. It's identical to MappedFrameworksEQ.
func MappedFrameworks(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldMappedFrameworks, v))
}

// ImplementationEvidence applies equality check predicate on the "implementation_evidence" field. It's identical to ImplementationEvidenceEQ.
func ImplementationEvidence(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationEvidence, v))
}

// ImplementationStatus applies equality check predicate on the "implementation_status" field. It's identical to ImplementationStatusEQ.
func ImplementationStatus(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationStatus, v))
}

// ImplementationDate applies equality check predicate on the "implementation_date" field. It's identical to ImplementationDateEQ.
func ImplementationDate(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationDate, v))
}

// ImplementationVerification applies equality check predicate on the "implementation_verification" field. It's identical to ImplementationVerificationEQ.
func ImplementationVerification(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationVerification, v))
}

// ImplementationVerificationDate applies equality check predicate on the "implementation_verification_date" field. It's identical to ImplementationVerificationDateEQ.
func ImplementationVerificationDate(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationVerificationDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByIDEQ applies the EQ predicate on the "created_by_id" field.
func CreatedByIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldCreatedByID, v))
}

// CreatedByIDNEQ applies the NEQ predicate on the "created_by_id" field.
func CreatedByIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldCreatedByID, v))
}

// CreatedByIDIn applies the In predicate on the "created_by_id" field.
func CreatedByIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldCreatedByID, vs...))
}

// CreatedByIDNotIn applies the NotIn predicate on the "created_by_id" field.
func CreatedByIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldCreatedByID, vs...))
}

// CreatedByIDGT applies the GT predicate on the "created_by_id" field.
func CreatedByIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldCreatedByID, v))
}

// CreatedByIDGTE applies the GTE predicate on the "created_by_id" field.
func CreatedByIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldCreatedByID, v))
}

// CreatedByIDLT applies the LT predicate on the "created_by_id" field.
func CreatedByIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldCreatedByID, v))
}

// CreatedByIDLTE applies the LTE predicate on the "created_by_id" field.
func CreatedByIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldCreatedByID, v))
}

// CreatedByIDContains applies the Contains predicate on the "created_by_id" field.
func CreatedByIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldCreatedByID, v))
}

// CreatedByIDHasPrefix applies the HasPrefix predicate on the "created_by_id" field.
func CreatedByIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldCreatedByID, v))
}

// CreatedByIDHasSuffix applies the HasSuffix predicate on the "created_by_id" field.
func CreatedByIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldCreatedByID, v))
}

// CreatedByIDIsNil applies the IsNil predicate on the "created_by_id" field.
func CreatedByIDIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldCreatedByID))
}

// CreatedByIDNotNil applies the NotNil predicate on the "created_by_id" field.
func CreatedByIDNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldCreatedByID))
}

// CreatedByIDEqualFold applies the EqualFold predicate on the "created_by_id" field.
func CreatedByIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldCreatedByID, v))
}

// CreatedByIDContainsFold applies the ContainsFold predicate on the "created_by_id" field.
func CreatedByIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldCreatedByID, v))
}

// UpdatedByIDEQ applies the EQ predicate on the "updated_by_id" field.
func UpdatedByIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldUpdatedByID, v))
}

// UpdatedByIDNEQ applies the NEQ predicate on the "updated_by_id" field.
func UpdatedByIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldUpdatedByID, v))
}

// UpdatedByIDIn applies the In predicate on the "updated_by_id" field.
func UpdatedByIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDNotIn applies the NotIn predicate on the "updated_by_id" field.
func UpdatedByIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDGT applies the GT predicate on the "updated_by_id" field.
func UpdatedByIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldUpdatedByID, v))
}

// UpdatedByIDGTE applies the GTE predicate on the "updated_by_id" field.
func UpdatedByIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldUpdatedByID, v))
}

// UpdatedByIDLT applies the LT predicate on the "updated_by_id" field.
func UpdatedByIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldUpdatedByID, v))
}

// UpdatedByIDLTE applies the LTE predicate on the "updated_by_id" field.
func UpdatedByIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldUpdatedByID, v))
}

// UpdatedByIDContains applies the Contains predicate on the "updated_by_id" field.
func UpdatedByIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldUpdatedByID, v))
}

// UpdatedByIDHasPrefix applies the HasPrefix predicate on the "updated_by_id" field.
func UpdatedByIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldUpdatedByID, v))
}

// UpdatedByIDHasSuffix applies the HasSuffix predicate on the "updated_by_id" field.
func UpdatedByIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldUpdatedByID, v))
}

// UpdatedByIDIsNil applies the IsNil predicate on the "updated_by_id" field.
func UpdatedByIDIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldUpdatedByID))
}

// UpdatedByIDNotNil applies the NotNil predicate on the "updated_by_id" field.
func UpdatedByIDNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldUpdatedByID))
}

// UpdatedByIDEqualFold applies the EqualFold predicate on the "updated_by_id" field.
func UpdatedByIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldUpdatedByID, v))
}

// UpdatedByIDContainsFold applies the ContainsFold predicate on the "updated_by_id" field.
func UpdatedByIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldUpdatedByID, v))
}

// CreatedByUserIDEQ applies the EQ predicate on the "created_by_user_id" field.
func CreatedByUserIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldCreatedByUserID, v))
}

// CreatedByUserIDNEQ applies the NEQ predicate on the "created_by_user_id" field.
func CreatedByUserIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldCreatedByUserID, v))
}

// CreatedByUserIDIn applies the In predicate on the "created_by_user_id" field.
func CreatedByUserIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldCreatedByUserID, vs...))
}

// CreatedByUserIDNotIn applies the NotIn predicate on the "created_by_user_id" field.
func CreatedByUserIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldCreatedByUserID, vs...))
}

// CreatedByUserIDGT applies the GT predicate on the "created_by_user_id" field.
func CreatedByUserIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldCreatedByUserID, v))
}

// CreatedByUserIDGTE applies the GTE predicate on the "created_by_user_id" field.
func CreatedByUserIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldCreatedByUserID, v))
}

// CreatedByUserIDLT applies the LT predicate on the "created_by_user_id" field.
func CreatedByUserIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldCreatedByUserID, v))
}

// CreatedByUserIDLTE applies the LTE predicate on the "created_by_user_id" field.
func CreatedByUserIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldCreatedByUserID, v))
}

// CreatedByUserIDContains applies the Contains predicate on the "created_by_user_id" field.
func CreatedByUserIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldCreatedByUserID, v))
}

// CreatedByUserIDHasPrefix applies the HasPrefix predicate on the "created_by_user_id" field.
func CreatedByUserIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldCreatedByUserID, v))
}

// CreatedByUserIDHasSuffix applies the HasSuffix predicate on the "created_by_user_id" field.
func CreatedByUserIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldCreatedByUserID, v))
}

// CreatedByUserIDIsNil applies the IsNil predicate on the "created_by_user_id" field.
func CreatedByUserIDIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldCreatedByUserID))
}

// CreatedByUserIDNotNil applies the NotNil predicate on the "created_by_user_id" field.
func CreatedByUserIDNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldCreatedByUserID))
}

// CreatedByUserIDEqualFold applies the EqualFold predicate on the "created_by_user_id" field.
func CreatedByUserIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldCreatedByUserID, v))
}

// CreatedByUserIDContainsFold applies the ContainsFold predicate on the "created_by_user_id" field.
func CreatedByUserIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldCreatedByUserID, v))
}

// UpdatedByUserIDEQ applies the EQ predicate on the "updated_by_user_id" field.
func UpdatedByUserIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDNEQ applies the NEQ predicate on the "updated_by_user_id" field.
func UpdatedByUserIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDIn applies the In predicate on the "updated_by_user_id" field.
func UpdatedByUserIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldUpdatedByUserID, vs...))
}

// UpdatedByUserIDNotIn applies the NotIn predicate on the "updated_by_user_id" field.
func UpdatedByUserIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldUpdatedByUserID, vs...))
}

// UpdatedByUserIDGT applies the GT predicate on the "updated_by_user_id" field.
func UpdatedByUserIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDGTE applies the GTE predicate on the "updated_by_user_id" field.
func UpdatedByUserIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDLT applies the LT predicate on the "updated_by_user_id" field.
func UpdatedByUserIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDLTE applies the LTE predicate on the "updated_by_user_id" field.
func UpdatedByUserIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDContains applies the Contains predicate on the "updated_by_user_id" field.
func UpdatedByUserIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDHasPrefix applies the HasPrefix predicate on the "updated_by_user_id" field.
func UpdatedByUserIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDHasSuffix applies the HasSuffix predicate on the "updated_by_user_id" field.
func UpdatedByUserIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDIsNil applies the IsNil predicate on the "updated_by_user_id" field.
func UpdatedByUserIDIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldUpdatedByUserID))
}

// UpdatedByUserIDNotNil applies the NotNil predicate on the "updated_by_user_id" field.
func UpdatedByUserIDNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldUpdatedByUserID))
}

// UpdatedByUserIDEqualFold applies the EqualFold predicate on the "updated_by_user_id" field.
func UpdatedByUserIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldUpdatedByUserID, v))
}

// UpdatedByUserIDContainsFold applies the ContainsFold predicate on the "updated_by_user_id" field.
func UpdatedByUserIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldUpdatedByUserID, v))
}

// CreatedByServiceIDEQ applies the EQ predicate on the "created_by_service_id" field.
func CreatedByServiceIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDNEQ applies the NEQ predicate on the "created_by_service_id" field.
func CreatedByServiceIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDIn applies the In predicate on the "created_by_service_id" field.
func CreatedByServiceIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldCreatedByServiceID, vs...))
}

// CreatedByServiceIDNotIn applies the NotIn predicate on the "created_by_service_id" field.
func CreatedByServiceIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldCreatedByServiceID, vs...))
}

// CreatedByServiceIDGT applies the GT predicate on the "created_by_service_id" field.
func CreatedByServiceIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDGTE applies the GTE predicate on the "created_by_service_id" field.
func CreatedByServiceIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDLT applies the LT predicate on the "created_by_service_id" field.
func CreatedByServiceIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDLTE applies the LTE predicate on the "created_by_service_id" field.
func CreatedByServiceIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDContains applies the Contains predicate on the "created_by_service_id" field.
func CreatedByServiceIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDHasPrefix applies the HasPrefix predicate on the "created_by_service_id" field.
func CreatedByServiceIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDHasSuffix applies the HasSuffix predicate on the "created_by_service_id" field.
func CreatedByServiceIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDIsNil applies the IsNil predicate on the "created_by_service_id" field.
func CreatedByServiceIDIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldCreatedByServiceID))
}

// CreatedByServiceIDNotNil applies the NotNil predicate on the "created_by_service_id" field.
func CreatedByServiceIDNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldCreatedByServiceID))
}

// CreatedByServiceIDEqualFold applies the EqualFold predicate on the "created_by_service_id" field.
func CreatedByServiceIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldCreatedByServiceID, v))
}

// CreatedByServiceIDContainsFold applies the ContainsFold predicate on the "created_by_service_id" field.
func CreatedByServiceIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldCreatedByServiceID, v))
}

// UpdatedByServiceIDEQ applies the EQ predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDNEQ applies the NEQ predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDIn applies the In predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldUpdatedByServiceID, vs...))
}

// UpdatedByServiceIDNotIn applies the NotIn predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldUpdatedByServiceID, vs...))
}

// UpdatedByServiceIDGT applies the GT predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDGTE applies the GTE predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDLT applies the LT predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDLTE applies the LTE predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDContains applies the Contains predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDHasPrefix applies the HasPrefix predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDHasSuffix applies the HasSuffix predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDIsNil applies the IsNil predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldUpdatedByServiceID))
}

// UpdatedByServiceIDNotNil applies the NotNil predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldUpdatedByServiceID))
}

// UpdatedByServiceIDEqualFold applies the EqualFold predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldUpdatedByServiceID, v))
}

// UpdatedByServiceIDContainsFold applies the ContainsFold predicate on the "updated_by_service_id" field.
func UpdatedByServiceIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldUpdatedByServiceID, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByIDEQ applies the EQ predicate on the "deleted_by_id" field.
func DeletedByIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldDeletedByID, v))
}

// DeletedByIDNEQ applies the NEQ predicate on the "deleted_by_id" field.
func DeletedByIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldDeletedByID, v))
}

// DeletedByIDIn applies the In predicate on the "deleted_by_id" field.
func DeletedByIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldDeletedByID, vs...))
}

// DeletedByIDNotIn applies the NotIn predicate on the "deleted_by_id" field.
func DeletedByIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldDeletedByID, vs...))
}

// DeletedByIDGT applies the GT predicate on the "deleted_by_id" field.
func DeletedByIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldDeletedByID, v))
}

// DeletedByIDGTE applies the GTE predicate on the "deleted_by_id" field.
func DeletedByIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldDeletedByID, v))
}

// DeletedByIDLT applies the LT predicate on the "deleted_by_id" field.
func DeletedByIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldDeletedByID, v))
}

// DeletedByIDLTE applies the LTE predicate on the "deleted_by_id" field.
func DeletedByIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldDeletedByID, v))
}

// DeletedByIDContains applies the Contains predicate on the "deleted_by_id" field.
func DeletedByIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldDeletedByID, v))
}

// DeletedByIDHasPrefix applies the HasPrefix predicate on the "deleted_by_id" field.
func DeletedByIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldDeletedByID, v))
}

// DeletedByIDHasSuffix applies the HasSuffix predicate on the "deleted_by_id" field.
func DeletedByIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldDeletedByID, v))
}

// DeletedByIDIsNil applies the IsNil predicate on the "deleted_by_id" field.
func DeletedByIDIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldDeletedByID))
}

// DeletedByIDNotNil applies the NotNil predicate on the "deleted_by_id" field.
func DeletedByIDNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldDeletedByID))
}

// DeletedByIDEqualFold applies the EqualFold predicate on the "deleted_by_id" field.
func DeletedByIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldDeletedByID, v))
}

// DeletedByIDContainsFold applies the ContainsFold predicate on the "deleted_by_id" field.
func DeletedByIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldDeletedByID, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldOwnerID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldStatus, v))
}

// SubcontrolTypeEQ applies the EQ predicate on the "subcontrol_type" field.
func SubcontrolTypeEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldSubcontrolType, v))
}

// SubcontrolTypeNEQ applies the NEQ predicate on the "subcontrol_type" field.
func SubcontrolTypeNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldSubcontrolType, v))
}

// SubcontrolTypeIn applies the In predicate on the "subcontrol_type" field.
func SubcontrolTypeIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldSubcontrolType, vs...))
}

// SubcontrolTypeNotIn applies the NotIn predicate on the "subcontrol_type" field.
func SubcontrolTypeNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldSubcontrolType, vs...))
}

// SubcontrolTypeGT applies the GT predicate on the "subcontrol_type" field.
func SubcontrolTypeGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldSubcontrolType, v))
}

// SubcontrolTypeGTE applies the GTE predicate on the "subcontrol_type" field.
func SubcontrolTypeGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldSubcontrolType, v))
}

// SubcontrolTypeLT applies the LT predicate on the "subcontrol_type" field.
func SubcontrolTypeLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldSubcontrolType, v))
}

// SubcontrolTypeLTE applies the LTE predicate on the "subcontrol_type" field.
func SubcontrolTypeLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldSubcontrolType, v))
}

// SubcontrolTypeContains applies the Contains predicate on the "subcontrol_type" field.
func SubcontrolTypeContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldSubcontrolType, v))
}

// SubcontrolTypeHasPrefix applies the HasPrefix predicate on the "subcontrol_type" field.
func SubcontrolTypeHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldSubcontrolType, v))
}

// SubcontrolTypeHasSuffix applies the HasSuffix predicate on the "subcontrol_type" field.
func SubcontrolTypeHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldSubcontrolType, v))
}

// SubcontrolTypeIsNil applies the IsNil predicate on the "subcontrol_type" field.
func SubcontrolTypeIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldSubcontrolType))
}

// SubcontrolTypeNotNil applies the NotNil predicate on the "subcontrol_type" field.
func SubcontrolTypeNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldSubcontrolType))
}

// SubcontrolTypeEqualFold applies the EqualFold predicate on the "subcontrol_type" field.
func SubcontrolTypeEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldSubcontrolType, v))
}

// SubcontrolTypeContainsFold applies the ContainsFold predicate on the "subcontrol_type" field.
func SubcontrolTypeContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldSubcontrolType, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldVersion, v))
}

// SubcontrolNumberEQ applies the EQ predicate on the "subcontrol_number" field.
func SubcontrolNumberEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldSubcontrolNumber, v))
}

// SubcontrolNumberNEQ applies the NEQ predicate on the "subcontrol_number" field.
func SubcontrolNumberNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldSubcontrolNumber, v))
}

// SubcontrolNumberIn applies the In predicate on the "subcontrol_number" field.
func SubcontrolNumberIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldSubcontrolNumber, vs...))
}

// SubcontrolNumberNotIn applies the NotIn predicate on the "subcontrol_number" field.
func SubcontrolNumberNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldSubcontrolNumber, vs...))
}

// SubcontrolNumberGT applies the GT predicate on the "subcontrol_number" field.
func SubcontrolNumberGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldSubcontrolNumber, v))
}

// SubcontrolNumberGTE applies the GTE predicate on the "subcontrol_number" field.
func SubcontrolNumberGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldSubcontrolNumber, v))
}

// SubcontrolNumberLT applies the LT predicate on the "subcontrol_number" field.
func SubcontrolNumberLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldSubcontrolNumber, v))
}

// SubcontrolNumberLTE applies the LTE predicate on the "subcontrol_number" field.
func SubcontrolNumberLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldSubcontrolNumber, v))
}

// SubcontrolNumberContains applies the Contains predicate on the "subcontrol_number" field.
func SubcontrolNumberContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldSubcontrolNumber, v))
}

// SubcontrolNumberHasPrefix applies the HasPrefix predicate on the "subcontrol_number" field.
func SubcontrolNumberHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldSubcontrolNumber, v))
}

// SubcontrolNumberHasSuffix applies the HasSuffix predicate on the "subcontrol_number" field.
func SubcontrolNumberHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldSubcontrolNumber, v))
}

// SubcontrolNumberIsNil applies the IsNil predicate on the "subcontrol_number" field.
func SubcontrolNumberIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldSubcontrolNumber))
}

// SubcontrolNumberNotNil applies the NotNil predicate on the "subcontrol_number" field.
func SubcontrolNumberNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldSubcontrolNumber))
}

// SubcontrolNumberEqualFold applies the EqualFold predicate on the "subcontrol_number" field.
func SubcontrolNumberEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldSubcontrolNumber, v))
}

// SubcontrolNumberContainsFold applies the ContainsFold predicate on the "subcontrol_number" field.
func SubcontrolNumberContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldSubcontrolNumber, v))
}

// FamilyEQ applies the EQ predicate on the "family" field.
func FamilyEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldFamily, v))
}

// FamilyNEQ applies the NEQ predicate on the "family" field.
func FamilyNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldFamily, v))
}

// FamilyIn applies the In predicate on the "family" field.
func FamilyIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldFamily, vs...))
}

// FamilyNotIn applies the NotIn predicate on the "family" field.
func FamilyNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldFamily, vs...))
}

// FamilyGT applies the GT predicate on the "family" field.
func FamilyGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldFamily, v))
}

// FamilyGTE applies the GTE predicate on the "family" field.
func FamilyGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldFamily, v))
}

// FamilyLT applies the LT predicate on the "family" field.
func FamilyLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldFamily, v))
}

// FamilyLTE applies the LTE predicate on the "family" field.
func FamilyLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldFamily, v))
}

// FamilyContains applies the Contains predicate on the "family" field.
func FamilyContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldFamily, v))
}

// FamilyHasPrefix applies the HasPrefix predicate on the "family" field.
func FamilyHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldFamily, v))
}

// FamilyHasSuffix applies the HasSuffix predicate on the "family" field.
func FamilyHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldFamily, v))
}

// FamilyIsNil applies the IsNil predicate on the "family" field.
func FamilyIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldFamily))
}

// FamilyNotNil applies the NotNil predicate on the "family" field.
func FamilyNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldFamily))
}

// FamilyEqualFold applies the EqualFold predicate on the "family" field.
func FamilyEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldFamily, v))
}

// FamilyContainsFold applies the ContainsFold predicate on the "family" field.
func FamilyContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldFamily, v))
}

// ClassEQ applies the EQ predicate on the "class" field.
func ClassEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldClass, v))
}

// ClassNEQ applies the NEQ predicate on the "class" field.
func ClassNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldClass, v))
}

// ClassIn applies the In predicate on the "class" field.
func ClassIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldClass, vs...))
}

// ClassNotIn applies the NotIn predicate on the "class" field.
func ClassNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldClass, vs...))
}

// ClassGT applies the GT predicate on the "class" field.
func ClassGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldClass, v))
}

// ClassGTE applies the GTE predicate on the "class" field.
func ClassGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldClass, v))
}

// ClassLT applies the LT predicate on the "class" field.
func ClassLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldClass, v))
}

// ClassLTE applies the LTE predicate on the "class" field.
func ClassLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldClass, v))
}

// ClassContains applies the Contains predicate on the "class" field.
func ClassContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldClass, v))
}

// ClassHasPrefix applies the HasPrefix predicate on the "class" field.
func ClassHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldClass, v))
}

// ClassHasSuffix applies the HasSuffix predicate on the "class" field.
func ClassHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldClass, v))
}

// ClassIsNil applies the IsNil predicate on the "class" field.
func ClassIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldClass))
}

// ClassNotNil applies the NotNil predicate on the "class" field.
func ClassNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldClass))
}

// ClassEqualFold applies the EqualFold predicate on the "class" field.
func ClassEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldClass, v))
}

// ClassContainsFold applies the ContainsFold predicate on the "class" field.
func ClassContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldClass, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldSource))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldSource, v))
}

// MappedFrameworksEQ applies the EQ predicate on the "mapped_frameworks" field.
func MappedFrameworksEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldMappedFrameworks, v))
}

// MappedFrameworksNEQ applies the NEQ predicate on the "mapped_frameworks" field.
func MappedFrameworksNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldMappedFrameworks, v))
}

// MappedFrameworksIn applies the In predicate on the "mapped_frameworks" field.
func MappedFrameworksIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldMappedFrameworks, vs...))
}

// MappedFrameworksNotIn applies the NotIn predicate on the "mapped_frameworks" field.
func MappedFrameworksNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldMappedFrameworks, vs...))
}

// MappedFrameworksGT applies the GT predicate on the "mapped_frameworks" field.
func MappedFrameworksGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldMappedFrameworks, v))
}

// MappedFrameworksGTE applies the GTE predicate on the "mapped_frameworks" field.
func MappedFrameworksGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldMappedFrameworks, v))
}

// MappedFrameworksLT applies the LT predicate on the "mapped_frameworks" field.
func MappedFrameworksLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldMappedFrameworks, v))
}

// MappedFrameworksLTE applies the LTE predicate on the "mapped_frameworks" field.
func MappedFrameworksLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldMappedFrameworks, v))
}

// MappedFrameworksContains applies the Contains predicate on the "mapped_frameworks" field.
func MappedFrameworksContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldMappedFrameworks, v))
}

// MappedFrameworksHasPrefix applies the HasPrefix predicate on the "mapped_frameworks" field.
func MappedFrameworksHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldMappedFrameworks, v))
}

// MappedFrameworksHasSuffix applies the HasSuffix predicate on the "mapped_frameworks" field.
func MappedFrameworksHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldMappedFrameworks, v))
}

// MappedFrameworksIsNil applies the IsNil predicate on the "mapped_frameworks" field.
func MappedFrameworksIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldMappedFrameworks))
}

// MappedFrameworksNotNil applies the NotNil predicate on the "mapped_frameworks" field.
func MappedFrameworksNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldMappedFrameworks))
}

// MappedFrameworksEqualFold applies the EqualFold predicate on the "mapped_frameworks" field.
func MappedFrameworksEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldMappedFrameworks, v))
}

// MappedFrameworksContainsFold applies the ContainsFold predicate on the "mapped_frameworks" field.
func MappedFrameworksContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldMappedFrameworks, v))
}

// ImplementationEvidenceEQ applies the EQ predicate on the "implementation_evidence" field.
func ImplementationEvidenceEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationEvidence, v))
}

// ImplementationEvidenceNEQ applies the NEQ predicate on the "implementation_evidence" field.
func ImplementationEvidenceNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldImplementationEvidence, v))
}

// ImplementationEvidenceIn applies the In predicate on the "implementation_evidence" field.
func ImplementationEvidenceIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldImplementationEvidence, vs...))
}

// ImplementationEvidenceNotIn applies the NotIn predicate on the "implementation_evidence" field.
func ImplementationEvidenceNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldImplementationEvidence, vs...))
}

// ImplementationEvidenceGT applies the GT predicate on the "implementation_evidence" field.
func ImplementationEvidenceGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldImplementationEvidence, v))
}

// ImplementationEvidenceGTE applies the GTE predicate on the "implementation_evidence" field.
func ImplementationEvidenceGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldImplementationEvidence, v))
}

// ImplementationEvidenceLT applies the LT predicate on the "implementation_evidence" field.
func ImplementationEvidenceLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldImplementationEvidence, v))
}

// ImplementationEvidenceLTE applies the LTE predicate on the "implementation_evidence" field.
func ImplementationEvidenceLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldImplementationEvidence, v))
}

// ImplementationEvidenceContains applies the Contains predicate on the "implementation_evidence" field.
func ImplementationEvidenceContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldImplementationEvidence, v))
}

// ImplementationEvidenceHasPrefix applies the HasPrefix predicate on the "implementation_evidence" field.
func ImplementationEvidenceHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldImplementationEvidence, v))
}

// ImplementationEvidenceHasSuffix applies the HasSuffix predicate on the "implementation_evidence" field.
func ImplementationEvidenceHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldImplementationEvidence, v))
}

// ImplementationEvidenceIsNil applies the IsNil predicate on the "implementation_evidence" field.
func ImplementationEvidenceIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldImplementationEvidence))
}

// ImplementationEvidenceNotNil applies the NotNil predicate on the "implementation_evidence" field.
func ImplementationEvidenceNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldImplementationEvidence))
}

// ImplementationEvidenceEqualFold applies the EqualFold predicate on the "implementation_evidence" field.
func ImplementationEvidenceEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldImplementationEvidence, v))
}

// ImplementationEvidenceContainsFold applies the ContainsFold predicate on the "implementation_evidence" field.
func ImplementationEvidenceContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldImplementationEvidence, v))
}

// ImplementationStatusEQ applies the EQ predicate on the "implementation_status" field.
func ImplementationStatusEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationStatus, v))
}

// ImplementationStatusNEQ applies the NEQ predicate on the "implementation_status" field.
func ImplementationStatusNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldImplementationStatus, v))
}

// ImplementationStatusIn applies the In predicate on the "implementation_status" field.
func ImplementationStatusIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldImplementationStatus, vs...))
}

// ImplementationStatusNotIn applies the NotIn predicate on the "implementation_status" field.
func ImplementationStatusNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldImplementationStatus, vs...))
}

// ImplementationStatusGT applies the GT predicate on the "implementation_status" field.
func ImplementationStatusGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldImplementationStatus, v))
}

// ImplementationStatusGTE applies the GTE predicate on the "implementation_status" field.
func ImplementationStatusGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldImplementationStatus, v))
}

// ImplementationStatusLT applies the LT predicate on the "implementation_status" field.
func ImplementationStatusLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldImplementationStatus, v))
}

// ImplementationStatusLTE applies the LTE predicate on the "implementation_status" field.
func ImplementationStatusLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldImplementationStatus, v))
}

// ImplementationStatusContains applies the Contains predicate on the "implementation_status" field.
func ImplementationStatusContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldImplementationStatus, v))
}

// ImplementationStatusHasPrefix applies the HasPrefix predicate on the "implementation_status" field.
func ImplementationStatusHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldImplementationStatus, v))
}

// ImplementationStatusHasSuffix applies the HasSuffix predicate on the "implementation_status" field.
func ImplementationStatusHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldImplementationStatus, v))
}

// ImplementationStatusIsNil applies the IsNil predicate on the "implementation_status" field.
func ImplementationStatusIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldImplementationStatus))
}

// ImplementationStatusNotNil applies the NotNil predicate on the "implementation_status" field.
func ImplementationStatusNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldImplementationStatus))
}

// ImplementationStatusEqualFold applies the EqualFold predicate on the "implementation_status" field.
func ImplementationStatusEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldImplementationStatus, v))
}

// ImplementationStatusContainsFold applies the ContainsFold predicate on the "implementation_status" field.
func ImplementationStatusContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldImplementationStatus, v))
}

// ImplementationDateEQ applies the EQ predicate on the "implementation_date" field.
func ImplementationDateEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationDate, v))
}

// ImplementationDateNEQ applies the NEQ predicate on the "implementation_date" field.
func ImplementationDateNEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldImplementationDate, v))
}

// ImplementationDateIn applies the In predicate on the "implementation_date" field.
func ImplementationDateIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldImplementationDate, vs...))
}

// ImplementationDateNotIn applies the NotIn predicate on the "implementation_date" field.
func ImplementationDateNotIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldImplementationDate, vs...))
}

// ImplementationDateGT applies the GT predicate on the "implementation_date" field.
func ImplementationDateGT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldImplementationDate, v))
}

// ImplementationDateGTE applies the GTE predicate on the "implementation_date" field.
func ImplementationDateGTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldImplementationDate, v))
}

// ImplementationDateLT applies the LT predicate on the "implementation_date" field.
func ImplementationDateLT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldImplementationDate, v))
}

// ImplementationDateLTE applies the LTE predicate on the "implementation_date" field.
func ImplementationDateLTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldImplementationDate, v))
}

// ImplementationDateIsNil applies the IsNil predicate on the "implementation_date" field.
func ImplementationDateIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldImplementationDate))
}

// ImplementationDateNotNil applies the NotNil predicate on the "implementation_date" field.
func ImplementationDateNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldImplementationDate))
}

// ImplementationVerificationEQ applies the EQ predicate on the "implementation_verification" field.
func ImplementationVerificationEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationVerification, v))
}

// ImplementationVerificationNEQ applies the NEQ predicate on the "implementation_verification" field.
func ImplementationVerificationNEQ(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldImplementationVerification, v))
}

// ImplementationVerificationIn applies the In predicate on the "implementation_verification" field.
func ImplementationVerificationIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldImplementationVerification, vs...))
}

// ImplementationVerificationNotIn applies the NotIn predicate on the "implementation_verification" field.
func ImplementationVerificationNotIn(vs ...string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldImplementationVerification, vs...))
}

// ImplementationVerificationGT applies the GT predicate on the "implementation_verification" field.
func ImplementationVerificationGT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldImplementationVerification, v))
}

// ImplementationVerificationGTE applies the GTE predicate on the "implementation_verification" field.
func ImplementationVerificationGTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldImplementationVerification, v))
}

// ImplementationVerificationLT applies the LT predicate on the "implementation_verification" field.
func ImplementationVerificationLT(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldImplementationVerification, v))
}

// ImplementationVerificationLTE applies the LTE predicate on the "implementation_verification" field.
func ImplementationVerificationLTE(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldImplementationVerification, v))
}

// ImplementationVerificationContains applies the Contains predicate on the "implementation_verification" field.
func ImplementationVerificationContains(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContains(FieldImplementationVerification, v))
}

// ImplementationVerificationHasPrefix applies the HasPrefix predicate on the "implementation_verification" field.
func ImplementationVerificationHasPrefix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasPrefix(FieldImplementationVerification, v))
}

// ImplementationVerificationHasSuffix applies the HasSuffix predicate on the "implementation_verification" field.
func ImplementationVerificationHasSuffix(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldHasSuffix(FieldImplementationVerification, v))
}

// ImplementationVerificationIsNil applies the IsNil predicate on the "implementation_verification" field.
func ImplementationVerificationIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldImplementationVerification))
}

// ImplementationVerificationNotNil applies the NotNil predicate on the "implementation_verification" field.
func ImplementationVerificationNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldImplementationVerification))
}

// ImplementationVerificationEqualFold applies the EqualFold predicate on the "implementation_verification" field.
func ImplementationVerificationEqualFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEqualFold(FieldImplementationVerification, v))
}

// ImplementationVerificationContainsFold applies the ContainsFold predicate on the "implementation_verification" field.
func ImplementationVerificationContainsFold(v string) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldContainsFold(FieldImplementationVerification, v))
}

// ImplementationVerificationDateEQ applies the EQ predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldEQ(FieldImplementationVerificationDate, v))
}

// ImplementationVerificationDateNEQ applies the NEQ predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateNEQ(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNEQ(FieldImplementationVerificationDate, v))
}

// ImplementationVerificationDateIn applies the In predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIn(FieldImplementationVerificationDate, vs...))
}

// ImplementationVerificationDateNotIn applies the NotIn predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateNotIn(vs ...time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotIn(FieldImplementationVerificationDate, vs...))
}

// ImplementationVerificationDateGT applies the GT predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateGT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGT(FieldImplementationVerificationDate, v))
}

// ImplementationVerificationDateGTE applies the GTE predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateGTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldGTE(FieldImplementationVerificationDate, v))
}

// ImplementationVerificationDateLT applies the LT predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateLT(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLT(FieldImplementationVerificationDate, v))
}

// ImplementationVerificationDateLTE applies the LTE predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateLTE(v time.Time) predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldLTE(FieldImplementationVerificationDate, v))
}

// ImplementationVerificationDateIsNil applies the IsNil predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldImplementationVerificationDate))
}

// ImplementationVerificationDateNotNil applies the NotNil predicate on the "implementation_verification_date" field.
func ImplementationVerificationDateNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldImplementationVerificationDate))
}

// DetailsIsNil applies the IsNil predicate on the "details" field.
func DetailsIsNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldIsNull(FieldDetails))
}

// DetailsNotNil applies the NotNil predicate on the "details" field.
func DetailsNotNil() predicate.Subcontrol {
	return predicate.Subcontrol(sql.FieldNotNull(FieldDetails))
}

// HasCreatedByUser applies the HasEdge predicate on the "created_by_user" edge.
func HasCreatedByUser() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatedByUserTable, CreatedByUserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByUserWith applies the HasEdge predicate on the "created_by_user" edge with a given conditions (other predicates).
func HasCreatedByUserWith(preds ...predicate.User) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newCreatedByUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedByUser applies the HasEdge predicate on the "updated_by_user" edge.
func HasUpdatedByUser() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByUserTable, UpdatedByUserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedByUserWith applies the HasEdge predicate on the "updated_by_user" edge with a given conditions (other predicates).
func HasUpdatedByUserWith(preds ...predicate.User) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newUpdatedByUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedByService applies the HasEdge predicate on the "created_by_service" edge.
func HasCreatedByService() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatedByServiceTable, CreatedByServiceColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.APIToken
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByServiceWith applies the HasEdge predicate on the "created_by_service" edge with a given conditions (other predicates).
func HasCreatedByServiceWith(preds ...predicate.APIToken) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newCreatedByServiceStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.APIToken
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedByService applies the HasEdge predicate on the "updated_by_service" edge.
func HasUpdatedByService() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByServiceTable, UpdatedByServiceColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.APIToken
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedByServiceWith applies the HasEdge predicate on the "updated_by_service" edge with a given conditions (other predicates).
func HasUpdatedByServiceWith(preds ...predicate.APIToken) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newUpdatedByServiceStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.APIToken
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControls applies the HasEdge predicate on the "controls" edge.
func HasControls() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ControlsTable, ControlsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlSubcontrols
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlsWith applies the HasEdge predicate on the "controls" edge with a given conditions (other predicates).
func HasControlsWith(preds ...predicate.Control) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newControlsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlSubcontrols
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserSubcontrols
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserSubcontrols
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.SubcontrolTasks
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newTasksStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.SubcontrolTasks
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotes applies the HasEdge predicate on the "notes" edge.
func HasNotes() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NotesTable, NotesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Note
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotesWith applies the HasEdge predicate on the "notes" edge with a given conditions (other predicates).
func HasNotesWith(preds ...predicate.Note) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newNotesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Note
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrograms applies the HasEdge predicate on the "programs" edge.
func HasPrograms() predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProgramsTable, ProgramsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramSubcontrols
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramsWith applies the HasEdge predicate on the "programs" edge with a given conditions (other predicates).
func HasProgramsWith(preds ...predicate.Program) predicate.Subcontrol {
	return predicate.Subcontrol(func(s *sql.Selector) {
		step := newProgramsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramSubcontrols
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subcontrol) predicate.Subcontrol {
	return predicate.Subcontrol(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subcontrol) predicate.Subcontrol {
	return predicate.Subcontrol(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subcontrol) predicate.Subcontrol {
	return predicate.Subcontrol(sql.NotPredicates(p))
}
