// Code generated by ent, DO NOT EDIT.

package subcontrol

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subcontrol type in the database.
	Label = "subcontrol"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDisplayID holds the string denoting the display_id field in the database.
	FieldDisplayID = "display_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSubcontrolType holds the string denoting the subcontrol_type field in the database.
	FieldSubcontrolType = "subcontrol_type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldSubcontrolNumber holds the string denoting the subcontrol_number field in the database.
	FieldSubcontrolNumber = "subcontrol_number"
	// FieldFamily holds the string denoting the family field in the database.
	FieldFamily = "family"
	// FieldClass holds the string denoting the class field in the database.
	FieldClass = "class"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldMappedFrameworks holds the string denoting the mapped_frameworks field in the database.
	FieldMappedFrameworks = "mapped_frameworks"
	// FieldImplementationEvidence holds the string denoting the implementation_evidence field in the database.
	FieldImplementationEvidence = "implementation_evidence"
	// FieldImplementationStatus holds the string denoting the implementation_status field in the database.
	FieldImplementationStatus = "implementation_status"
	// FieldImplementationDate holds the string denoting the implementation_date field in the database.
	FieldImplementationDate = "implementation_date"
	// FieldImplementationVerification holds the string denoting the implementation_verification field in the database.
	FieldImplementationVerification = "implementation_verification"
	// FieldImplementationVerificationDate holds the string denoting the implementation_verification_date field in the database.
	FieldImplementationVerificationDate = "implementation_verification_date"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// FieldExampleEvidence holds the string denoting the example_evidence field in the database.
	FieldExampleEvidence = "example_evidence"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeControls holds the string denoting the controls edge name in mutations.
	EdgeControls = "controls"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeNotes holds the string denoting the notes edge name in mutations.
	EdgeNotes = "notes"
	// EdgePrograms holds the string denoting the programs edge name in mutations.
	EdgePrograms = "programs"
	// EdgeEvidence holds the string denoting the evidence edge name in mutations.
	EdgeEvidence = "evidence"
	// Table holds the table name of the subcontrol in the database.
	Table = "subcontrols"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "subcontrols"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// ControlsTable is the table that holds the controls relation/edge. The primary key declared below.
	ControlsTable = "control_subcontrols"
	// ControlsInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlsInverseTable = "controls"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_subcontrols"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// TasksTable is the table that holds the tasks relation/edge. The primary key declared below.
	TasksTable = "subcontrol_tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// NotesTable is the table that holds the notes relation/edge.
	NotesTable = "subcontrols"
	// NotesInverseTable is the table name for the Note entity.
	// It exists in this package in order to avoid circular dependency with the "note" package.
	NotesInverseTable = "notes"
	// NotesColumn is the table column denoting the notes relation/edge.
	NotesColumn = "note_subcontrols"
	// ProgramsTable is the table that holds the programs relation/edge. The primary key declared below.
	ProgramsTable = "program_subcontrols"
	// ProgramsInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramsInverseTable = "programs"
	// EvidenceTable is the table that holds the evidence relation/edge. The primary key declared below.
	EvidenceTable = "evidence_subcontrols"
	// EvidenceInverseTable is the table name for the Evidence entity.
	// It exists in this package in order to avoid circular dependency with the "evidence" package.
	EvidenceInverseTable = "evidences"
)

// Columns holds all SQL columns for subcontrol fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldDisplayID,
	FieldTags,
	FieldOwnerID,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldSubcontrolType,
	FieldVersion,
	FieldSubcontrolNumber,
	FieldFamily,
	FieldClass,
	FieldSource,
	FieldMappedFrameworks,
	FieldImplementationEvidence,
	FieldImplementationStatus,
	FieldImplementationDate,
	FieldImplementationVerification,
	FieldImplementationVerificationDate,
	FieldDetails,
	FieldExampleEvidence,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subcontrols"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"control_objective_subcontrols",
	"note_subcontrols",
}

var (
	// ControlsPrimaryKey and ControlsColumn2 are the table columns denoting the
	// primary key for the controls relation (M2M).
	ControlsPrimaryKey = []string{"control_id", "subcontrol_id"}
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user_id", "subcontrol_id"}
	// TasksPrimaryKey and TasksColumn2 are the table columns denoting the
	// primary key for the tasks relation (M2M).
	TasksPrimaryKey = []string{"subcontrol_id", "task_id"}
	// ProgramsPrimaryKey and ProgramsColumn2 are the table columns denoting the
	// primary key for the programs relation (M2M).
	ProgramsPrimaryKey = []string{"program_id", "subcontrol_id"}
	// EvidencePrimaryKey and EvidenceColumn2 are the table columns denoting the
	// primary key for the evidence relation (M2M).
	EvidencePrimaryKey = []string{"evidence_id", "subcontrol_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [8]ent.Hook
	Interceptors [2]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DisplayIDValidator is a validator for the "display_id" field. It is called by the builders before save.
	DisplayIDValidator func(string) error
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Subcontrol queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDisplayID orders the results by the display_id field.
func ByDisplayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySubcontrolType orders the results by the subcontrol_type field.
func BySubcontrolType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontrolType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// BySubcontrolNumber orders the results by the subcontrol_number field.
func BySubcontrolNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontrolNumber, opts...).ToFunc()
}

// ByFamily orders the results by the family field.
func ByFamily(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFamily, opts...).ToFunc()
}

// ByClass orders the results by the class field.
func ByClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClass, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByMappedFrameworks orders the results by the mapped_frameworks field.
func ByMappedFrameworks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappedFrameworks, opts...).ToFunc()
}

// ByImplementationEvidence orders the results by the implementation_evidence field.
func ByImplementationEvidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationEvidence, opts...).ToFunc()
}

// ByImplementationStatus orders the results by the implementation_status field.
func ByImplementationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationStatus, opts...).ToFunc()
}

// ByImplementationDate orders the results by the implementation_date field.
func ByImplementationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationDate, opts...).ToFunc()
}

// ByImplementationVerification orders the results by the implementation_verification field.
func ByImplementationVerification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationVerification, opts...).ToFunc()
}

// ByImplementationVerificationDate orders the results by the implementation_verification_date field.
func ByImplementationVerificationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationVerificationDate, opts...).ToFunc()
}

// ByExampleEvidence orders the results by the example_evidence field.
func ByExampleEvidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExampleEvidence, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByControlsCount orders the results by controls count.
func ByControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlsStep(), opts...)
	}
}

// ByControls orders the results by controls terms.
func ByControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotesField orders the results by notes field.
func ByNotesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotesStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgramsCount orders the results by programs count.
func ByProgramsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramsStep(), opts...)
	}
}

// ByPrograms orders the results by programs terms.
func ByPrograms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEvidenceCount orders the results by evidence count.
func ByEvidenceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEvidenceStep(), opts...)
	}
}

// ByEvidence orders the results by evidence terms.
func ByEvidence(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEvidenceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlsTable, ControlsPrimaryKey...),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
	)
}
func newNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NotesTable, NotesColumn),
	)
}
func newProgramsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramsTable, ProgramsPrimaryKey...),
	)
}
func newEvidenceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EvidenceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EvidenceTable, EvidencePrimaryKey...),
	)
}
