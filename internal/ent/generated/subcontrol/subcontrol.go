// Code generated by ent, DO NOT EDIT.

package subcontrol

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subcontrol type in the database.
	Label = "subcontrol"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSubcontrolType holds the string denoting the subcontrol_type field in the database.
	FieldSubcontrolType = "subcontrol_type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldSubcontrolNumber holds the string denoting the subcontrol_number field in the database.
	FieldSubcontrolNumber = "subcontrol_number"
	// FieldSubcontrolFamily holds the string denoting the subcontrol_family field in the database.
	FieldSubcontrolFamily = "subcontrol_family"
	// FieldSubcontrolClass holds the string denoting the subcontrol_class field in the database.
	FieldSubcontrolClass = "subcontrol_class"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldMappedFrameworks holds the string denoting the mapped_frameworks field in the database.
	FieldMappedFrameworks = "mapped_frameworks"
	// FieldAssignedTo holds the string denoting the assigned_to field in the database.
	FieldAssignedTo = "assigned_to"
	// FieldImplementationStatus holds the string denoting the implementation_status field in the database.
	FieldImplementationStatus = "implementation_status"
	// FieldImplementationNotes holds the string denoting the implementation_notes field in the database.
	FieldImplementationNotes = "implementation_notes"
	// FieldImplementationDate holds the string denoting the implementation_date field in the database.
	FieldImplementationDate = "implementation_date"
	// FieldImplementationEvidence holds the string denoting the implementation_evidence field in the database.
	FieldImplementationEvidence = "implementation_evidence"
	// FieldImplementationVerification holds the string denoting the implementation_verification field in the database.
	FieldImplementationVerification = "implementation_verification"
	// FieldImplementationVerificationDate holds the string denoting the implementation_verification_date field in the database.
	FieldImplementationVerificationDate = "implementation_verification_date"
	// FieldJsonschema holds the string denoting the jsonschema field in the database.
	FieldJsonschema = "jsonschema"
	// EdgeControl holds the string denoting the control edge name in mutations.
	EdgeControl = "control"
	// Table holds the table name of the subcontrol in the database.
	Table = "subcontrols"
	// ControlTable is the table that holds the control relation/edge. The primary key declared below.
	ControlTable = "control_subcontrols"
	// ControlInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlInverseTable = "controls"
)

// Columns holds all SQL columns for subcontrol fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldMappingID,
	FieldTags,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldSubcontrolType,
	FieldVersion,
	FieldOwner,
	FieldSubcontrolNumber,
	FieldSubcontrolFamily,
	FieldSubcontrolClass,
	FieldSource,
	FieldMappedFrameworks,
	FieldAssignedTo,
	FieldImplementationStatus,
	FieldImplementationNotes,
	FieldImplementationDate,
	FieldImplementationEvidence,
	FieldImplementationVerification,
	FieldImplementationVerificationDate,
	FieldJsonschema,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subcontrols"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"control_objective_subcontrols",
}

var (
	// ControlPrimaryKey and ControlColumn2 are the table columns denoting the
	// primary key for the control relation (M2M).
	ControlPrimaryKey = []string{"control_id", "subcontrol_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Subcontrol queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySubcontrolType orders the results by the subcontrol_type field.
func BySubcontrolType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontrolType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// BySubcontrolNumber orders the results by the subcontrol_number field.
func BySubcontrolNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontrolNumber, opts...).ToFunc()
}

// BySubcontrolFamily orders the results by the subcontrol_family field.
func BySubcontrolFamily(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontrolFamily, opts...).ToFunc()
}

// BySubcontrolClass orders the results by the subcontrol_class field.
func BySubcontrolClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontrolClass, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByMappedFrameworks orders the results by the mapped_frameworks field.
func ByMappedFrameworks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappedFrameworks, opts...).ToFunc()
}

// ByAssignedTo orders the results by the assigned_to field.
func ByAssignedTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedTo, opts...).ToFunc()
}

// ByImplementationStatus orders the results by the implementation_status field.
func ByImplementationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationStatus, opts...).ToFunc()
}

// ByImplementationNotes orders the results by the implementation_notes field.
func ByImplementationNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationNotes, opts...).ToFunc()
}

// ByImplementationDate orders the results by the implementation_date field.
func ByImplementationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationDate, opts...).ToFunc()
}

// ByImplementationEvidence orders the results by the implementation_evidence field.
func ByImplementationEvidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationEvidence, opts...).ToFunc()
}

// ByImplementationVerification orders the results by the implementation_verification field.
func ByImplementationVerification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationVerification, opts...).ToFunc()
}

// ByImplementationVerificationDate orders the results by the implementation_verification_date field.
func ByImplementationVerificationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationVerificationDate, opts...).ToFunc()
}

// ByControlCount orders the results by control count.
func ByControlCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlStep(), opts...)
	}
}

// ByControl orders the results by control terms.
func ByControl(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlTable, ControlPrimaryKey...),
	)
}
