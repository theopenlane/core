// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/changeactor"
	"github.com/theopenlane/core/pkg/models"
)

// ChangeActor is the model entity for the ChangeActor schema.
type ChangeActor struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ActorType holds the value of the "actor_type" field.
	ActorType    changeactor.ActorType `json:"actor_type,omitempty"`
	selectValues sql.SelectValues

	// CreatedBy includes the details about the user or service that created the object
	CreatedBy models.Actor `json:"created_by,omitempty"`
	// UpdatedBy includes the details about the user or service that last updated the object
	UpdatedBy models.Actor `json:"updated_by,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChangeActor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case changeactor.FieldID, changeactor.FieldName, changeactor.FieldActorType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChangeActor fields.
func (ca *ChangeActor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case changeactor.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ca.ID = value.String
			}
		case changeactor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ca.Name = value.String
			}
		case changeactor.FieldActorType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field actor_type", values[i])
			} else if value.Valid {
				ca.ActorType = changeactor.ActorType(value.String)
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChangeActor.
// This includes values selected through modifiers, order, etc.
func (ca *ChangeActor) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// Update returns a builder for updating this ChangeActor.
// Note that you need to call ChangeActor.Unwrap() before calling this method if this ChangeActor
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *ChangeActor) Update() *ChangeActorUpdateOne {
	return NewChangeActorClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the ChangeActor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *ChangeActor) Unwrap() *ChangeActor {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("generated: ChangeActor is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *ChangeActor) String() string {
	var builder strings.Builder
	builder.WriteString("ChangeActor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("name=")
	builder.WriteString(ca.Name)
	builder.WriteString(", ")
	builder.WriteString("actor_type=")
	builder.WriteString(fmt.Sprintf("%v", ca.ActorType))
	builder.WriteByte(')')
	return builder.String()
}

// ChangeActors is a parsable slice of ChangeActor.
type ChangeActors []*ChangeActor
