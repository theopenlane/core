// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliance"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterUpdate is the builder for updating TrustCenter entities.
type TrustCenterUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterUpdate builder.
func (_u *TrustCenterUpdate) Where(ps ...predicate.TrustCenter) *TrustCenterUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterUpdate) SetUpdatedAt(v time.Time) *TrustCenterUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterUpdate) ClearUpdatedAt() *TrustCenterUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterUpdate) SetUpdatedBy(v string) *TrustCenterUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterUpdate) SetNillableUpdatedBy(v *string) *TrustCenterUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterUpdate) ClearUpdatedBy() *TrustCenterUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterUpdate) SetDeletedAt(v time.Time) *TrustCenterUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterUpdate) SetNillableDeletedAt(v *time.Time) *TrustCenterUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterUpdate) ClearDeletedAt() *TrustCenterUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterUpdate) SetDeletedBy(v string) *TrustCenterUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterUpdate) SetNillableDeletedBy(v *string) *TrustCenterUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterUpdate) ClearDeletedBy() *TrustCenterUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TrustCenterUpdate) SetTags(v []string) *TrustCenterUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TrustCenterUpdate) AppendTags(v []string) *TrustCenterUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TrustCenterUpdate) ClearTags() *TrustCenterUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TrustCenterUpdate) SetOwnerID(v string) *TrustCenterUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TrustCenterUpdate) SetNillableOwnerID(v *string) *TrustCenterUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TrustCenterUpdate) ClearOwnerID() *TrustCenterUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *TrustCenterUpdate) SetSlug(v string) *TrustCenterUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *TrustCenterUpdate) SetNillableSlug(v *string) *TrustCenterUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// ClearSlug clears the value of the "slug" field.
func (_u *TrustCenterUpdate) ClearSlug() *TrustCenterUpdate {
	_u.mutation.ClearSlug()
	return _u
}

// SetCustomDomainID sets the "custom_domain_id" field.
func (_u *TrustCenterUpdate) SetCustomDomainID(v string) *TrustCenterUpdate {
	_u.mutation.SetCustomDomainID(v)
	return _u
}

// SetNillableCustomDomainID sets the "custom_domain_id" field if the given value is not nil.
func (_u *TrustCenterUpdate) SetNillableCustomDomainID(v *string) *TrustCenterUpdate {
	if v != nil {
		_u.SetCustomDomainID(*v)
	}
	return _u
}

// ClearCustomDomainID clears the value of the "custom_domain_id" field.
func (_u *TrustCenterUpdate) ClearCustomDomainID() *TrustCenterUpdate {
	_u.mutation.ClearCustomDomainID()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *TrustCenterUpdate) SetOwner(v *Organization) *TrustCenterUpdate {
	return _u.SetOwnerID(v.ID)
}

// SetCustomDomain sets the "custom_domain" edge to the CustomDomain entity.
func (_u *TrustCenterUpdate) SetCustomDomain(v *CustomDomain) *TrustCenterUpdate {
	return _u.SetCustomDomainID(v.ID)
}

// SetSettingID sets the "setting" edge to the TrustCenterSetting entity by ID.
func (_u *TrustCenterUpdate) SetSettingID(id string) *TrustCenterUpdate {
	_u.mutation.SetSettingID(id)
	return _u
}

// SetNillableSettingID sets the "setting" edge to the TrustCenterSetting entity by ID if the given value is not nil.
func (_u *TrustCenterUpdate) SetNillableSettingID(id *string) *TrustCenterUpdate {
	if id != nil {
		_u = _u.SetSettingID(*id)
	}
	return _u
}

// SetSetting sets the "setting" edge to the TrustCenterSetting entity.
func (_u *TrustCenterUpdate) SetSetting(v *TrustCenterSetting) *TrustCenterUpdate {
	return _u.SetSettingID(v.ID)
}

// AddTrustCenterSubprocessorIDs adds the "trust_center_subprocessors" edge to the TrustCenterSubprocessor entity by IDs.
func (_u *TrustCenterUpdate) AddTrustCenterSubprocessorIDs(ids ...string) *TrustCenterUpdate {
	_u.mutation.AddTrustCenterSubprocessorIDs(ids...)
	return _u
}

// AddTrustCenterSubprocessors adds the "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (_u *TrustCenterUpdate) AddTrustCenterSubprocessors(v ...*TrustCenterSubprocessor) *TrustCenterUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterSubprocessorIDs(ids...)
}

// AddTrustCenterComplianceIDs adds the "trust_center_compliances" edge to the TrustCenterCompliance entity by IDs.
func (_u *TrustCenterUpdate) AddTrustCenterComplianceIDs(ids ...string) *TrustCenterUpdate {
	_u.mutation.AddTrustCenterComplianceIDs(ids...)
	return _u
}

// AddTrustCenterCompliances adds the "trust_center_compliances" edges to the TrustCenterCompliance entity.
func (_u *TrustCenterUpdate) AddTrustCenterCompliances(v ...*TrustCenterCompliance) *TrustCenterUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterComplianceIDs(ids...)
}

// Mutation returns the TrustCenterMutation object of the builder.
func (_u *TrustCenterUpdate) Mutation() *TrustCenterMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *TrustCenterUpdate) ClearOwner() *TrustCenterUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearCustomDomain clears the "custom_domain" edge to the CustomDomain entity.
func (_u *TrustCenterUpdate) ClearCustomDomain() *TrustCenterUpdate {
	_u.mutation.ClearCustomDomain()
	return _u
}

// ClearSetting clears the "setting" edge to the TrustCenterSetting entity.
func (_u *TrustCenterUpdate) ClearSetting() *TrustCenterUpdate {
	_u.mutation.ClearSetting()
	return _u
}

// ClearTrustCenterSubprocessors clears all "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (_u *TrustCenterUpdate) ClearTrustCenterSubprocessors() *TrustCenterUpdate {
	_u.mutation.ClearTrustCenterSubprocessors()
	return _u
}

// RemoveTrustCenterSubprocessorIDs removes the "trust_center_subprocessors" edge to TrustCenterSubprocessor entities by IDs.
func (_u *TrustCenterUpdate) RemoveTrustCenterSubprocessorIDs(ids ...string) *TrustCenterUpdate {
	_u.mutation.RemoveTrustCenterSubprocessorIDs(ids...)
	return _u
}

// RemoveTrustCenterSubprocessors removes "trust_center_subprocessors" edges to TrustCenterSubprocessor entities.
func (_u *TrustCenterUpdate) RemoveTrustCenterSubprocessors(v ...*TrustCenterSubprocessor) *TrustCenterUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterSubprocessorIDs(ids...)
}

// ClearTrustCenterCompliances clears all "trust_center_compliances" edges to the TrustCenterCompliance entity.
func (_u *TrustCenterUpdate) ClearTrustCenterCompliances() *TrustCenterUpdate {
	_u.mutation.ClearTrustCenterCompliances()
	return _u
}

// RemoveTrustCenterComplianceIDs removes the "trust_center_compliances" edge to TrustCenterCompliance entities by IDs.
func (_u *TrustCenterUpdate) RemoveTrustCenterComplianceIDs(ids ...string) *TrustCenterUpdate {
	_u.mutation.RemoveTrustCenterComplianceIDs(ids...)
	return _u
}

// RemoveTrustCenterCompliances removes "trust_center_compliances" edges to TrustCenterCompliance entities.
func (_u *TrustCenterUpdate) RemoveTrustCenterCompliances(v ...*TrustCenterCompliance) *TrustCenterUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterComplianceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustCenterUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustCenterUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcenter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenter.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenter.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterUpdate) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := trustcenter.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Slug(); ok {
		if err := trustcenter.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.slug": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcenter.Table, trustcenter.Columns, sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcenter.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcenter.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcenter.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcenter.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcenter.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcenter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcenter.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcenter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcenter.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcenter.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(trustcenter.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcenter.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(trustcenter.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(trustcenter.FieldSlug, field.TypeString, value)
	}
	if _u.mutation.SlugCleared() {
		_spec.ClearField(trustcenter.FieldSlug, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CustomDomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CustomDomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCenterSubprocessorsIDs(); len(nodes) > 0 && !_u.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterSubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCenterCompliancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterCompliancesTable,
			Columns: []string{trustcenter.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCenterCompliancesIDs(); len(nodes) > 0 && !_u.mutation.TrustCenterCompliancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterCompliancesTable,
			Columns: []string{trustcenter.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterCompliancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterCompliancesTable,
			Columns: []string{trustcenter.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenter
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcenter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustCenterUpdateOne is the builder for updating a single TrustCenter entity.
type TrustCenterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterUpdateOne) SetUpdatedAt(v time.Time) *TrustCenterUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterUpdateOne) ClearUpdatedAt() *TrustCenterUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterUpdateOne) SetUpdatedBy(v string) *TrustCenterUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterUpdateOne) SetNillableUpdatedBy(v *string) *TrustCenterUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterUpdateOne) ClearUpdatedBy() *TrustCenterUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterUpdateOne) SetDeletedAt(v time.Time) *TrustCenterUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterUpdateOne) SetNillableDeletedAt(v *time.Time) *TrustCenterUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterUpdateOne) ClearDeletedAt() *TrustCenterUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterUpdateOne) SetDeletedBy(v string) *TrustCenterUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterUpdateOne) SetNillableDeletedBy(v *string) *TrustCenterUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterUpdateOne) ClearDeletedBy() *TrustCenterUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TrustCenterUpdateOne) SetTags(v []string) *TrustCenterUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TrustCenterUpdateOne) AppendTags(v []string) *TrustCenterUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TrustCenterUpdateOne) ClearTags() *TrustCenterUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TrustCenterUpdateOne) SetOwnerID(v string) *TrustCenterUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TrustCenterUpdateOne) SetNillableOwnerID(v *string) *TrustCenterUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TrustCenterUpdateOne) ClearOwnerID() *TrustCenterUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *TrustCenterUpdateOne) SetSlug(v string) *TrustCenterUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *TrustCenterUpdateOne) SetNillableSlug(v *string) *TrustCenterUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// ClearSlug clears the value of the "slug" field.
func (_u *TrustCenterUpdateOne) ClearSlug() *TrustCenterUpdateOne {
	_u.mutation.ClearSlug()
	return _u
}

// SetCustomDomainID sets the "custom_domain_id" field.
func (_u *TrustCenterUpdateOne) SetCustomDomainID(v string) *TrustCenterUpdateOne {
	_u.mutation.SetCustomDomainID(v)
	return _u
}

// SetNillableCustomDomainID sets the "custom_domain_id" field if the given value is not nil.
func (_u *TrustCenterUpdateOne) SetNillableCustomDomainID(v *string) *TrustCenterUpdateOne {
	if v != nil {
		_u.SetCustomDomainID(*v)
	}
	return _u
}

// ClearCustomDomainID clears the value of the "custom_domain_id" field.
func (_u *TrustCenterUpdateOne) ClearCustomDomainID() *TrustCenterUpdateOne {
	_u.mutation.ClearCustomDomainID()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *TrustCenterUpdateOne) SetOwner(v *Organization) *TrustCenterUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// SetCustomDomain sets the "custom_domain" edge to the CustomDomain entity.
func (_u *TrustCenterUpdateOne) SetCustomDomain(v *CustomDomain) *TrustCenterUpdateOne {
	return _u.SetCustomDomainID(v.ID)
}

// SetSettingID sets the "setting" edge to the TrustCenterSetting entity by ID.
func (_u *TrustCenterUpdateOne) SetSettingID(id string) *TrustCenterUpdateOne {
	_u.mutation.SetSettingID(id)
	return _u
}

// SetNillableSettingID sets the "setting" edge to the TrustCenterSetting entity by ID if the given value is not nil.
func (_u *TrustCenterUpdateOne) SetNillableSettingID(id *string) *TrustCenterUpdateOne {
	if id != nil {
		_u = _u.SetSettingID(*id)
	}
	return _u
}

// SetSetting sets the "setting" edge to the TrustCenterSetting entity.
func (_u *TrustCenterUpdateOne) SetSetting(v *TrustCenterSetting) *TrustCenterUpdateOne {
	return _u.SetSettingID(v.ID)
}

// AddTrustCenterSubprocessorIDs adds the "trust_center_subprocessors" edge to the TrustCenterSubprocessor entity by IDs.
func (_u *TrustCenterUpdateOne) AddTrustCenterSubprocessorIDs(ids ...string) *TrustCenterUpdateOne {
	_u.mutation.AddTrustCenterSubprocessorIDs(ids...)
	return _u
}

// AddTrustCenterSubprocessors adds the "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (_u *TrustCenterUpdateOne) AddTrustCenterSubprocessors(v ...*TrustCenterSubprocessor) *TrustCenterUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterSubprocessorIDs(ids...)
}

// AddTrustCenterComplianceIDs adds the "trust_center_compliances" edge to the TrustCenterCompliance entity by IDs.
func (_u *TrustCenterUpdateOne) AddTrustCenterComplianceIDs(ids ...string) *TrustCenterUpdateOne {
	_u.mutation.AddTrustCenterComplianceIDs(ids...)
	return _u
}

// AddTrustCenterCompliances adds the "trust_center_compliances" edges to the TrustCenterCompliance entity.
func (_u *TrustCenterUpdateOne) AddTrustCenterCompliances(v ...*TrustCenterCompliance) *TrustCenterUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterComplianceIDs(ids...)
}

// Mutation returns the TrustCenterMutation object of the builder.
func (_u *TrustCenterUpdateOne) Mutation() *TrustCenterMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *TrustCenterUpdateOne) ClearOwner() *TrustCenterUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearCustomDomain clears the "custom_domain" edge to the CustomDomain entity.
func (_u *TrustCenterUpdateOne) ClearCustomDomain() *TrustCenterUpdateOne {
	_u.mutation.ClearCustomDomain()
	return _u
}

// ClearSetting clears the "setting" edge to the TrustCenterSetting entity.
func (_u *TrustCenterUpdateOne) ClearSetting() *TrustCenterUpdateOne {
	_u.mutation.ClearSetting()
	return _u
}

// ClearTrustCenterSubprocessors clears all "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (_u *TrustCenterUpdateOne) ClearTrustCenterSubprocessors() *TrustCenterUpdateOne {
	_u.mutation.ClearTrustCenterSubprocessors()
	return _u
}

// RemoveTrustCenterSubprocessorIDs removes the "trust_center_subprocessors" edge to TrustCenterSubprocessor entities by IDs.
func (_u *TrustCenterUpdateOne) RemoveTrustCenterSubprocessorIDs(ids ...string) *TrustCenterUpdateOne {
	_u.mutation.RemoveTrustCenterSubprocessorIDs(ids...)
	return _u
}

// RemoveTrustCenterSubprocessors removes "trust_center_subprocessors" edges to TrustCenterSubprocessor entities.
func (_u *TrustCenterUpdateOne) RemoveTrustCenterSubprocessors(v ...*TrustCenterSubprocessor) *TrustCenterUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterSubprocessorIDs(ids...)
}

// ClearTrustCenterCompliances clears all "trust_center_compliances" edges to the TrustCenterCompliance entity.
func (_u *TrustCenterUpdateOne) ClearTrustCenterCompliances() *TrustCenterUpdateOne {
	_u.mutation.ClearTrustCenterCompliances()
	return _u
}

// RemoveTrustCenterComplianceIDs removes the "trust_center_compliances" edge to TrustCenterCompliance entities by IDs.
func (_u *TrustCenterUpdateOne) RemoveTrustCenterComplianceIDs(ids ...string) *TrustCenterUpdateOne {
	_u.mutation.RemoveTrustCenterComplianceIDs(ids...)
	return _u
}

// RemoveTrustCenterCompliances removes "trust_center_compliances" edges to TrustCenterCompliance entities.
func (_u *TrustCenterUpdateOne) RemoveTrustCenterCompliances(v ...*TrustCenterCompliance) *TrustCenterUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterComplianceIDs(ids...)
}

// Where appends a list predicates to the TrustCenterUpdate builder.
func (_u *TrustCenterUpdateOne) Where(ps ...predicate.TrustCenter) *TrustCenterUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustCenterUpdateOne) Select(field string, fields ...string) *TrustCenterUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustCenter entity.
func (_u *TrustCenterUpdateOne) Save(ctx context.Context) (*TrustCenter, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterUpdateOne) SaveX(ctx context.Context) *TrustCenter {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustCenterUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcenter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenter.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenter.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterUpdateOne) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := trustcenter.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Slug(); ok {
		if err := trustcenter.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.slug": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenter, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcenter.Table, trustcenter.Columns, sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcenter.FieldID)
		for _, f := range fields {
			if !trustcenter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcenter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcenter.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcenter.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcenter.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcenter.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcenter.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcenter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcenter.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcenter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcenter.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcenter.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(trustcenter.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcenter.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(trustcenter.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(trustcenter.FieldSlug, field.TypeString, value)
	}
	if _u.mutation.SlugCleared() {
		_spec.ClearField(trustcenter.FieldSlug, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CustomDomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CustomDomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCenterSubprocessorsIDs(); len(nodes) > 0 && !_u.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterSubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCenterCompliancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterCompliancesTable,
			Columns: []string{trustcenter.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCenterCompliancesIDs(); len(nodes) > 0 && !_u.mutation.TrustCenterCompliancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterCompliancesTable,
			Columns: []string{trustcenter.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterCompliancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterCompliancesTable,
			Columns: []string{trustcenter.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenter
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TrustCenter{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcenter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
