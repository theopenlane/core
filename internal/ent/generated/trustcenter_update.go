// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterUpdate is the builder for updating TrustCenter entities.
type TrustCenterUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterUpdate builder.
func (tcu *TrustCenterUpdate) Where(ps ...predicate.TrustCenter) *TrustCenterUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcu *TrustCenterUpdate) SetUpdatedAt(t time.Time) *TrustCenterUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcu *TrustCenterUpdate) ClearUpdatedAt() *TrustCenterUpdate {
	tcu.mutation.ClearUpdatedAt()
	return tcu
}

// SetUpdatedBy sets the "updated_by" field.
func (tcu *TrustCenterUpdate) SetUpdatedBy(s string) *TrustCenterUpdate {
	tcu.mutation.SetUpdatedBy(s)
	return tcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcu *TrustCenterUpdate) SetNillableUpdatedBy(s *string) *TrustCenterUpdate {
	if s != nil {
		tcu.SetUpdatedBy(*s)
	}
	return tcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcu *TrustCenterUpdate) ClearUpdatedBy() *TrustCenterUpdate {
	tcu.mutation.ClearUpdatedBy()
	return tcu
}

// SetDeletedAt sets the "deleted_at" field.
func (tcu *TrustCenterUpdate) SetDeletedAt(t time.Time) *TrustCenterUpdate {
	tcu.mutation.SetDeletedAt(t)
	return tcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcu *TrustCenterUpdate) SetNillableDeletedAt(t *time.Time) *TrustCenterUpdate {
	if t != nil {
		tcu.SetDeletedAt(*t)
	}
	return tcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcu *TrustCenterUpdate) ClearDeletedAt() *TrustCenterUpdate {
	tcu.mutation.ClearDeletedAt()
	return tcu
}

// SetDeletedBy sets the "deleted_by" field.
func (tcu *TrustCenterUpdate) SetDeletedBy(s string) *TrustCenterUpdate {
	tcu.mutation.SetDeletedBy(s)
	return tcu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcu *TrustCenterUpdate) SetNillableDeletedBy(s *string) *TrustCenterUpdate {
	if s != nil {
		tcu.SetDeletedBy(*s)
	}
	return tcu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcu *TrustCenterUpdate) ClearDeletedBy() *TrustCenterUpdate {
	tcu.mutation.ClearDeletedBy()
	return tcu
}

// SetTags sets the "tags" field.
func (tcu *TrustCenterUpdate) SetTags(s []string) *TrustCenterUpdate {
	tcu.mutation.SetTags(s)
	return tcu
}

// AppendTags appends s to the "tags" field.
func (tcu *TrustCenterUpdate) AppendTags(s []string) *TrustCenterUpdate {
	tcu.mutation.AppendTags(s)
	return tcu
}

// ClearTags clears the value of the "tags" field.
func (tcu *TrustCenterUpdate) ClearTags() *TrustCenterUpdate {
	tcu.mutation.ClearTags()
	return tcu
}

// SetOwnerID sets the "owner_id" field.
func (tcu *TrustCenterUpdate) SetOwnerID(s string) *TrustCenterUpdate {
	tcu.mutation.SetOwnerID(s)
	return tcu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tcu *TrustCenterUpdate) SetNillableOwnerID(s *string) *TrustCenterUpdate {
	if s != nil {
		tcu.SetOwnerID(*s)
	}
	return tcu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (tcu *TrustCenterUpdate) ClearOwnerID() *TrustCenterUpdate {
	tcu.mutation.ClearOwnerID()
	return tcu
}

// SetSlug sets the "slug" field.
func (tcu *TrustCenterUpdate) SetSlug(s string) *TrustCenterUpdate {
	tcu.mutation.SetSlug(s)
	return tcu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tcu *TrustCenterUpdate) SetNillableSlug(s *string) *TrustCenterUpdate {
	if s != nil {
		tcu.SetSlug(*s)
	}
	return tcu
}

// ClearSlug clears the value of the "slug" field.
func (tcu *TrustCenterUpdate) ClearSlug() *TrustCenterUpdate {
	tcu.mutation.ClearSlug()
	return tcu
}

// SetCustomDomainID sets the "custom_domain_id" field.
func (tcu *TrustCenterUpdate) SetCustomDomainID(s string) *TrustCenterUpdate {
	tcu.mutation.SetCustomDomainID(s)
	return tcu
}

// SetNillableCustomDomainID sets the "custom_domain_id" field if the given value is not nil.
func (tcu *TrustCenterUpdate) SetNillableCustomDomainID(s *string) *TrustCenterUpdate {
	if s != nil {
		tcu.SetCustomDomainID(*s)
	}
	return tcu
}

// ClearCustomDomainID clears the value of the "custom_domain_id" field.
func (tcu *TrustCenterUpdate) ClearCustomDomainID() *TrustCenterUpdate {
	tcu.mutation.ClearCustomDomainID()
	return tcu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (tcu *TrustCenterUpdate) SetOwner(o *Organization) *TrustCenterUpdate {
	return tcu.SetOwnerID(o.ID)
}

// SetCustomDomain sets the "custom_domain" edge to the CustomDomain entity.
func (tcu *TrustCenterUpdate) SetCustomDomain(c *CustomDomain) *TrustCenterUpdate {
	return tcu.SetCustomDomainID(c.ID)
}

// SetSettingID sets the "setting" edge to the TrustCenterSetting entity by ID.
func (tcu *TrustCenterUpdate) SetSettingID(id string) *TrustCenterUpdate {
	tcu.mutation.SetSettingID(id)
	return tcu
}

// SetNillableSettingID sets the "setting" edge to the TrustCenterSetting entity by ID if the given value is not nil.
func (tcu *TrustCenterUpdate) SetNillableSettingID(id *string) *TrustCenterUpdate {
	if id != nil {
		tcu = tcu.SetSettingID(*id)
	}
	return tcu
}

// SetSetting sets the "setting" edge to the TrustCenterSetting entity.
func (tcu *TrustCenterUpdate) SetSetting(t *TrustCenterSetting) *TrustCenterUpdate {
	return tcu.SetSettingID(t.ID)
}

// AddTrustCenterSubprocessorIDs adds the "trust_center_subprocessors" edge to the TrustCenterSubprocessor entity by IDs.
func (tcu *TrustCenterUpdate) AddTrustCenterSubprocessorIDs(ids ...string) *TrustCenterUpdate {
	tcu.mutation.AddTrustCenterSubprocessorIDs(ids...)
	return tcu
}

// AddTrustCenterSubprocessors adds the "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (tcu *TrustCenterUpdate) AddTrustCenterSubprocessors(t ...*TrustCenterSubprocessor) *TrustCenterUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddTrustCenterSubprocessorIDs(ids...)
}

// Mutation returns the TrustCenterMutation object of the builder.
func (tcu *TrustCenterUpdate) Mutation() *TrustCenterMutation {
	return tcu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (tcu *TrustCenterUpdate) ClearOwner() *TrustCenterUpdate {
	tcu.mutation.ClearOwner()
	return tcu
}

// ClearCustomDomain clears the "custom_domain" edge to the CustomDomain entity.
func (tcu *TrustCenterUpdate) ClearCustomDomain() *TrustCenterUpdate {
	tcu.mutation.ClearCustomDomain()
	return tcu
}

// ClearSetting clears the "setting" edge to the TrustCenterSetting entity.
func (tcu *TrustCenterUpdate) ClearSetting() *TrustCenterUpdate {
	tcu.mutation.ClearSetting()
	return tcu
}

// ClearTrustCenterSubprocessors clears all "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (tcu *TrustCenterUpdate) ClearTrustCenterSubprocessors() *TrustCenterUpdate {
	tcu.mutation.ClearTrustCenterSubprocessors()
	return tcu
}

// RemoveTrustCenterSubprocessorIDs removes the "trust_center_subprocessors" edge to TrustCenterSubprocessor entities by IDs.
func (tcu *TrustCenterUpdate) RemoveTrustCenterSubprocessorIDs(ids ...string) *TrustCenterUpdate {
	tcu.mutation.RemoveTrustCenterSubprocessorIDs(ids...)
	return tcu
}

// RemoveTrustCenterSubprocessors removes "trust_center_subprocessors" edges to TrustCenterSubprocessor entities.
func (tcu *TrustCenterUpdate) RemoveTrustCenterSubprocessors(t ...*TrustCenterSubprocessor) *TrustCenterUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveTrustCenterSubprocessorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TrustCenterUpdate) Save(ctx context.Context) (int, error) {
	if err := tcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TrustCenterUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TrustCenterUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TrustCenterUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TrustCenterUpdate) defaults() error {
	if _, ok := tcu.mutation.UpdatedAt(); !ok && !tcu.mutation.UpdatedAtCleared() {
		if trustcenter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenter.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenter.UpdateDefaultUpdatedAt()
		tcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TrustCenterUpdate) check() error {
	if v, ok := tcu.mutation.OwnerID(); ok {
		if err := trustcenter.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.owner_id": %w`, err)}
		}
	}
	if v, ok := tcu.mutation.Slug(); ok {
		if err := trustcenter.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.slug": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcu *TrustCenterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterUpdate {
	tcu.modifiers = append(tcu.modifiers, modifiers...)
	return tcu
}

func (tcu *TrustCenterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcenter.Table, trustcenter.Columns, sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tcu.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcenter.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcenter.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcu.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcenter.FieldUpdatedAt, field.TypeTime)
	}
	if tcu.mutation.CreatedByCleared() {
		_spec.ClearField(trustcenter.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcu.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcenter.FieldUpdatedBy, field.TypeString, value)
	}
	if tcu.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcenter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tcu.mutation.DeletedAt(); ok {
		_spec.SetField(trustcenter.FieldDeletedAt, field.TypeTime, value)
	}
	if tcu.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcenter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcu.mutation.DeletedBy(); ok {
		_spec.SetField(trustcenter.FieldDeletedBy, field.TypeString, value)
	}
	if tcu.mutation.DeletedByCleared() {
		_spec.ClearField(trustcenter.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tcu.mutation.Tags(); ok {
		_spec.SetField(trustcenter.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tcu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcenter.FieldTags, value)
		})
	}
	if tcu.mutation.TagsCleared() {
		_spec.ClearField(trustcenter.FieldTags, field.TypeJSON)
	}
	if value, ok := tcu.mutation.Slug(); ok {
		_spec.SetField(trustcenter.FieldSlug, field.TypeString, value)
	}
	if tcu.mutation.SlugCleared() {
		_spec.ClearField(trustcenter.FieldSlug, field.TypeString)
	}
	if tcu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.CustomDomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.CustomDomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedTrustCenterSubprocessorsIDs(); len(nodes) > 0 && !tcu.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.TrustCenterSubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcu.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tcu.schemaConfig.TrustCenter
	ctx = internal.NewSchemaConfigContext(ctx, tcu.schemaConfig)
	_spec.AddModifiers(tcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcenter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TrustCenterUpdateOne is the builder for updating a single TrustCenter entity.
type TrustCenterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tcuo *TrustCenterUpdateOne) SetUpdatedAt(t time.Time) *TrustCenterUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcuo *TrustCenterUpdateOne) ClearUpdatedAt() *TrustCenterUpdateOne {
	tcuo.mutation.ClearUpdatedAt()
	return tcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tcuo *TrustCenterUpdateOne) SetUpdatedBy(s string) *TrustCenterUpdateOne {
	tcuo.mutation.SetUpdatedBy(s)
	return tcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcuo *TrustCenterUpdateOne) SetNillableUpdatedBy(s *string) *TrustCenterUpdateOne {
	if s != nil {
		tcuo.SetUpdatedBy(*s)
	}
	return tcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcuo *TrustCenterUpdateOne) ClearUpdatedBy() *TrustCenterUpdateOne {
	tcuo.mutation.ClearUpdatedBy()
	return tcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tcuo *TrustCenterUpdateOne) SetDeletedAt(t time.Time) *TrustCenterUpdateOne {
	tcuo.mutation.SetDeletedAt(t)
	return tcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcuo *TrustCenterUpdateOne) SetNillableDeletedAt(t *time.Time) *TrustCenterUpdateOne {
	if t != nil {
		tcuo.SetDeletedAt(*t)
	}
	return tcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcuo *TrustCenterUpdateOne) ClearDeletedAt() *TrustCenterUpdateOne {
	tcuo.mutation.ClearDeletedAt()
	return tcuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tcuo *TrustCenterUpdateOne) SetDeletedBy(s string) *TrustCenterUpdateOne {
	tcuo.mutation.SetDeletedBy(s)
	return tcuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcuo *TrustCenterUpdateOne) SetNillableDeletedBy(s *string) *TrustCenterUpdateOne {
	if s != nil {
		tcuo.SetDeletedBy(*s)
	}
	return tcuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcuo *TrustCenterUpdateOne) ClearDeletedBy() *TrustCenterUpdateOne {
	tcuo.mutation.ClearDeletedBy()
	return tcuo
}

// SetTags sets the "tags" field.
func (tcuo *TrustCenterUpdateOne) SetTags(s []string) *TrustCenterUpdateOne {
	tcuo.mutation.SetTags(s)
	return tcuo
}

// AppendTags appends s to the "tags" field.
func (tcuo *TrustCenterUpdateOne) AppendTags(s []string) *TrustCenterUpdateOne {
	tcuo.mutation.AppendTags(s)
	return tcuo
}

// ClearTags clears the value of the "tags" field.
func (tcuo *TrustCenterUpdateOne) ClearTags() *TrustCenterUpdateOne {
	tcuo.mutation.ClearTags()
	return tcuo
}

// SetOwnerID sets the "owner_id" field.
func (tcuo *TrustCenterUpdateOne) SetOwnerID(s string) *TrustCenterUpdateOne {
	tcuo.mutation.SetOwnerID(s)
	return tcuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tcuo *TrustCenterUpdateOne) SetNillableOwnerID(s *string) *TrustCenterUpdateOne {
	if s != nil {
		tcuo.SetOwnerID(*s)
	}
	return tcuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (tcuo *TrustCenterUpdateOne) ClearOwnerID() *TrustCenterUpdateOne {
	tcuo.mutation.ClearOwnerID()
	return tcuo
}

// SetSlug sets the "slug" field.
func (tcuo *TrustCenterUpdateOne) SetSlug(s string) *TrustCenterUpdateOne {
	tcuo.mutation.SetSlug(s)
	return tcuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tcuo *TrustCenterUpdateOne) SetNillableSlug(s *string) *TrustCenterUpdateOne {
	if s != nil {
		tcuo.SetSlug(*s)
	}
	return tcuo
}

// ClearSlug clears the value of the "slug" field.
func (tcuo *TrustCenterUpdateOne) ClearSlug() *TrustCenterUpdateOne {
	tcuo.mutation.ClearSlug()
	return tcuo
}

// SetCustomDomainID sets the "custom_domain_id" field.
func (tcuo *TrustCenterUpdateOne) SetCustomDomainID(s string) *TrustCenterUpdateOne {
	tcuo.mutation.SetCustomDomainID(s)
	return tcuo
}

// SetNillableCustomDomainID sets the "custom_domain_id" field if the given value is not nil.
func (tcuo *TrustCenterUpdateOne) SetNillableCustomDomainID(s *string) *TrustCenterUpdateOne {
	if s != nil {
		tcuo.SetCustomDomainID(*s)
	}
	return tcuo
}

// ClearCustomDomainID clears the value of the "custom_domain_id" field.
func (tcuo *TrustCenterUpdateOne) ClearCustomDomainID() *TrustCenterUpdateOne {
	tcuo.mutation.ClearCustomDomainID()
	return tcuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (tcuo *TrustCenterUpdateOne) SetOwner(o *Organization) *TrustCenterUpdateOne {
	return tcuo.SetOwnerID(o.ID)
}

// SetCustomDomain sets the "custom_domain" edge to the CustomDomain entity.
func (tcuo *TrustCenterUpdateOne) SetCustomDomain(c *CustomDomain) *TrustCenterUpdateOne {
	return tcuo.SetCustomDomainID(c.ID)
}

// SetSettingID sets the "setting" edge to the TrustCenterSetting entity by ID.
func (tcuo *TrustCenterUpdateOne) SetSettingID(id string) *TrustCenterUpdateOne {
	tcuo.mutation.SetSettingID(id)
	return tcuo
}

// SetNillableSettingID sets the "setting" edge to the TrustCenterSetting entity by ID if the given value is not nil.
func (tcuo *TrustCenterUpdateOne) SetNillableSettingID(id *string) *TrustCenterUpdateOne {
	if id != nil {
		tcuo = tcuo.SetSettingID(*id)
	}
	return tcuo
}

// SetSetting sets the "setting" edge to the TrustCenterSetting entity.
func (tcuo *TrustCenterUpdateOne) SetSetting(t *TrustCenterSetting) *TrustCenterUpdateOne {
	return tcuo.SetSettingID(t.ID)
}

// AddTrustCenterSubprocessorIDs adds the "trust_center_subprocessors" edge to the TrustCenterSubprocessor entity by IDs.
func (tcuo *TrustCenterUpdateOne) AddTrustCenterSubprocessorIDs(ids ...string) *TrustCenterUpdateOne {
	tcuo.mutation.AddTrustCenterSubprocessorIDs(ids...)
	return tcuo
}

// AddTrustCenterSubprocessors adds the "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (tcuo *TrustCenterUpdateOne) AddTrustCenterSubprocessors(t ...*TrustCenterSubprocessor) *TrustCenterUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddTrustCenterSubprocessorIDs(ids...)
}

// Mutation returns the TrustCenterMutation object of the builder.
func (tcuo *TrustCenterUpdateOne) Mutation() *TrustCenterMutation {
	return tcuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (tcuo *TrustCenterUpdateOne) ClearOwner() *TrustCenterUpdateOne {
	tcuo.mutation.ClearOwner()
	return tcuo
}

// ClearCustomDomain clears the "custom_domain" edge to the CustomDomain entity.
func (tcuo *TrustCenterUpdateOne) ClearCustomDomain() *TrustCenterUpdateOne {
	tcuo.mutation.ClearCustomDomain()
	return tcuo
}

// ClearSetting clears the "setting" edge to the TrustCenterSetting entity.
func (tcuo *TrustCenterUpdateOne) ClearSetting() *TrustCenterUpdateOne {
	tcuo.mutation.ClearSetting()
	return tcuo
}

// ClearTrustCenterSubprocessors clears all "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (tcuo *TrustCenterUpdateOne) ClearTrustCenterSubprocessors() *TrustCenterUpdateOne {
	tcuo.mutation.ClearTrustCenterSubprocessors()
	return tcuo
}

// RemoveTrustCenterSubprocessorIDs removes the "trust_center_subprocessors" edge to TrustCenterSubprocessor entities by IDs.
func (tcuo *TrustCenterUpdateOne) RemoveTrustCenterSubprocessorIDs(ids ...string) *TrustCenterUpdateOne {
	tcuo.mutation.RemoveTrustCenterSubprocessorIDs(ids...)
	return tcuo
}

// RemoveTrustCenterSubprocessors removes "trust_center_subprocessors" edges to TrustCenterSubprocessor entities.
func (tcuo *TrustCenterUpdateOne) RemoveTrustCenterSubprocessors(t ...*TrustCenterSubprocessor) *TrustCenterUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveTrustCenterSubprocessorIDs(ids...)
}

// Where appends a list predicates to the TrustCenterUpdate builder.
func (tcuo *TrustCenterUpdateOne) Where(ps ...predicate.TrustCenter) *TrustCenterUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TrustCenterUpdateOne) Select(field string, fields ...string) *TrustCenterUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TrustCenter entity.
func (tcuo *TrustCenterUpdateOne) Save(ctx context.Context) (*TrustCenter, error) {
	if err := tcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TrustCenterUpdateOne) SaveX(ctx context.Context) *TrustCenter {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TrustCenterUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TrustCenterUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TrustCenterUpdateOne) defaults() error {
	if _, ok := tcuo.mutation.UpdatedAt(); !ok && !tcuo.mutation.UpdatedAtCleared() {
		if trustcenter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenter.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenter.UpdateDefaultUpdatedAt()
		tcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TrustCenterUpdateOne) check() error {
	if v, ok := tcuo.mutation.OwnerID(); ok {
		if err := trustcenter.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.owner_id": %w`, err)}
		}
	}
	if v, ok := tcuo.mutation.Slug(); ok {
		if err := trustcenter.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.slug": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcuo *TrustCenterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterUpdateOne {
	tcuo.modifiers = append(tcuo.modifiers, modifiers...)
	return tcuo
}

func (tcuo *TrustCenterUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenter, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcenter.Table, trustcenter.Columns, sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcenter.FieldID)
		for _, f := range fields {
			if !trustcenter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcenter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tcuo.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcenter.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcenter.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcenter.FieldUpdatedAt, field.TypeTime)
	}
	if tcuo.mutation.CreatedByCleared() {
		_spec.ClearField(trustcenter.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcenter.FieldUpdatedBy, field.TypeString, value)
	}
	if tcuo.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcenter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tcuo.mutation.DeletedAt(); ok {
		_spec.SetField(trustcenter.FieldDeletedAt, field.TypeTime, value)
	}
	if tcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcenter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcuo.mutation.DeletedBy(); ok {
		_spec.SetField(trustcenter.FieldDeletedBy, field.TypeString, value)
	}
	if tcuo.mutation.DeletedByCleared() {
		_spec.ClearField(trustcenter.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tcuo.mutation.Tags(); ok {
		_spec.SetField(trustcenter.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tcuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcenter.FieldTags, value)
		})
	}
	if tcuo.mutation.TagsCleared() {
		_spec.ClearField(trustcenter.FieldTags, field.TypeJSON)
	}
	if value, ok := tcuo.mutation.Slug(); ok {
		_spec.SetField(trustcenter.FieldSlug, field.TypeString, value)
	}
	if tcuo.mutation.SlugCleared() {
		_spec.ClearField(trustcenter.FieldSlug, field.TypeString)
	}
	if tcuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.CustomDomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.CustomDomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedTrustCenterSubprocessorsIDs(); len(nodes) > 0 && !tcuo.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.TrustCenterSubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trustcenter.TrustCenterSubprocessorsTable,
			Columns: []string{trustcenter.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcuo.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tcuo.schemaConfig.TrustCenter
	ctx = internal.NewSchemaConfigContext(ctx, tcuo.schemaConfig)
	_spec.AddModifiers(tcuo.modifiers...)
	_node = &TrustCenter{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcenter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
