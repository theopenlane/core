// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/customdomainhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// CustomDomainHistory is the model entity for the CustomDomainHistory schema.
type CustomDomainHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the custom domain
	CnameRecord string `json:"cname_record,omitempty"`
	// The mappable domain id that this custom domain maps to
	MappableDomainID string `json:"mappable_domain_id,omitempty"`
	// String to be prepended to the cname_record, used to evaluate domain ownership.
	TxtRecordSubdomain string `json:"txt_record_subdomain,omitempty"`
	// Hashed expected value of the TXT record. This is a random string that is generated on creation and is used to verify ownership of the domain.
	TxtRecordValue string `json:"txt_record_value,omitempty"`
	// Status of the custom domain verification
	Status       enums.CustomDomainStatus `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomDomainHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customdomainhistory.FieldTags:
			values[i] = new([]byte)
		case customdomainhistory.FieldOperation:
			values[i] = new(history.OpType)
		case customdomainhistory.FieldID, customdomainhistory.FieldRef, customdomainhistory.FieldCreatedBy, customdomainhistory.FieldUpdatedBy, customdomainhistory.FieldDeletedBy, customdomainhistory.FieldOwnerID, customdomainhistory.FieldCnameRecord, customdomainhistory.FieldMappableDomainID, customdomainhistory.FieldTxtRecordSubdomain, customdomainhistory.FieldTxtRecordValue, customdomainhistory.FieldStatus:
			values[i] = new(sql.NullString)
		case customdomainhistory.FieldHistoryTime, customdomainhistory.FieldCreatedAt, customdomainhistory.FieldUpdatedAt, customdomainhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomDomainHistory fields.
func (cdh *CustomDomainHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customdomainhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cdh.ID = value.String
			}
		case customdomainhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				cdh.HistoryTime = value.Time
			}
		case customdomainhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				cdh.Ref = value.String
			}
		case customdomainhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				cdh.Operation = *value
			}
		case customdomainhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cdh.CreatedAt = value.Time
			}
		case customdomainhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cdh.UpdatedAt = value.Time
			}
		case customdomainhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cdh.CreatedBy = value.String
			}
		case customdomainhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cdh.UpdatedBy = value.String
			}
		case customdomainhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cdh.DeletedAt = value.Time
			}
		case customdomainhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				cdh.DeletedBy = value.String
			}
		case customdomainhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cdh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case customdomainhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				cdh.OwnerID = value.String
			}
		case customdomainhistory.FieldCnameRecord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cname_record", values[i])
			} else if value.Valid {
				cdh.CnameRecord = value.String
			}
		case customdomainhistory.FieldMappableDomainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mappable_domain_id", values[i])
			} else if value.Valid {
				cdh.MappableDomainID = value.String
			}
		case customdomainhistory.FieldTxtRecordSubdomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txt_record_subdomain", values[i])
			} else if value.Valid {
				cdh.TxtRecordSubdomain = value.String
			}
		case customdomainhistory.FieldTxtRecordValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txt_record_value", values[i])
			} else if value.Valid {
				cdh.TxtRecordValue = value.String
			}
		case customdomainhistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cdh.Status = enums.CustomDomainStatus(value.String)
			}
		default:
			cdh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomDomainHistory.
// This includes values selected through modifiers, order, etc.
func (cdh *CustomDomainHistory) Value(name string) (ent.Value, error) {
	return cdh.selectValues.Get(name)
}

// Update returns a builder for updating this CustomDomainHistory.
// Note that you need to call CustomDomainHistory.Unwrap() before calling this method if this CustomDomainHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (cdh *CustomDomainHistory) Update() *CustomDomainHistoryUpdateOne {
	return NewCustomDomainHistoryClient(cdh.config).UpdateOne(cdh)
}

// Unwrap unwraps the CustomDomainHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cdh *CustomDomainHistory) Unwrap() *CustomDomainHistory {
	_tx, ok := cdh.config.driver.(*txDriver)
	if !ok {
		panic("generated: CustomDomainHistory is not a transactional entity")
	}
	cdh.config.driver = _tx.drv
	return cdh
}

// String implements the fmt.Stringer.
func (cdh *CustomDomainHistory) String() string {
	var builder strings.Builder
	builder.WriteString("CustomDomainHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cdh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(cdh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(cdh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", cdh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cdh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cdh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cdh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cdh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cdh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(cdh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", cdh.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(cdh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("cname_record=")
	builder.WriteString(cdh.CnameRecord)
	builder.WriteString(", ")
	builder.WriteString("mappable_domain_id=")
	builder.WriteString(cdh.MappableDomainID)
	builder.WriteString(", ")
	builder.WriteString("txt_record_subdomain=")
	builder.WriteString(cdh.TxtRecordSubdomain)
	builder.WriteString(", ")
	builder.WriteString("txt_record_value=")
	builder.WriteString(cdh.TxtRecordValue)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cdh.Status))
	builder.WriteByte(')')
	return builder.String()
}

// CustomDomainHistories is a parsable slice of CustomDomainHistory.
type CustomDomainHistories []*CustomDomainHistory
