// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
	"github.com/theopenlane/core/pkg/enums"
)

// ScheduledJobRunCreate is the builder for creating a ScheduledJobRun entity.
type ScheduledJobRunCreate struct {
	config
	mutation *ScheduledJobRunMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sjrc *ScheduledJobRunCreate) SetCreatedAt(t time.Time) *ScheduledJobRunCreate {
	sjrc.mutation.SetCreatedAt(t)
	return sjrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableCreatedAt(t *time.Time) *ScheduledJobRunCreate {
	if t != nil {
		sjrc.SetCreatedAt(*t)
	}
	return sjrc
}

// SetUpdatedAt sets the "updated_at" field.
func (sjrc *ScheduledJobRunCreate) SetUpdatedAt(t time.Time) *ScheduledJobRunCreate {
	sjrc.mutation.SetUpdatedAt(t)
	return sjrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableUpdatedAt(t *time.Time) *ScheduledJobRunCreate {
	if t != nil {
		sjrc.SetUpdatedAt(*t)
	}
	return sjrc
}

// SetCreatedBy sets the "created_by" field.
func (sjrc *ScheduledJobRunCreate) SetCreatedBy(s string) *ScheduledJobRunCreate {
	sjrc.mutation.SetCreatedBy(s)
	return sjrc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableCreatedBy(s *string) *ScheduledJobRunCreate {
	if s != nil {
		sjrc.SetCreatedBy(*s)
	}
	return sjrc
}

// SetUpdatedBy sets the "updated_by" field.
func (sjrc *ScheduledJobRunCreate) SetUpdatedBy(s string) *ScheduledJobRunCreate {
	sjrc.mutation.SetUpdatedBy(s)
	return sjrc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableUpdatedBy(s *string) *ScheduledJobRunCreate {
	if s != nil {
		sjrc.SetUpdatedBy(*s)
	}
	return sjrc
}

// SetDeletedAt sets the "deleted_at" field.
func (sjrc *ScheduledJobRunCreate) SetDeletedAt(t time.Time) *ScheduledJobRunCreate {
	sjrc.mutation.SetDeletedAt(t)
	return sjrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableDeletedAt(t *time.Time) *ScheduledJobRunCreate {
	if t != nil {
		sjrc.SetDeletedAt(*t)
	}
	return sjrc
}

// SetDeletedBy sets the "deleted_by" field.
func (sjrc *ScheduledJobRunCreate) SetDeletedBy(s string) *ScheduledJobRunCreate {
	sjrc.mutation.SetDeletedBy(s)
	return sjrc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableDeletedBy(s *string) *ScheduledJobRunCreate {
	if s != nil {
		sjrc.SetDeletedBy(*s)
	}
	return sjrc
}

// SetOwnerID sets the "owner_id" field.
func (sjrc *ScheduledJobRunCreate) SetOwnerID(s string) *ScheduledJobRunCreate {
	sjrc.mutation.SetOwnerID(s)
	return sjrc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableOwnerID(s *string) *ScheduledJobRunCreate {
	if s != nil {
		sjrc.SetOwnerID(*s)
	}
	return sjrc
}

// SetJobRunnerID sets the "job_runner_id" field.
func (sjrc *ScheduledJobRunCreate) SetJobRunnerID(s string) *ScheduledJobRunCreate {
	sjrc.mutation.SetJobRunnerID(s)
	return sjrc
}

// SetStatus sets the "status" field.
func (sjrc *ScheduledJobRunCreate) SetStatus(ejrs enums.ScheduledJobRunStatus) *ScheduledJobRunCreate {
	sjrc.mutation.SetStatus(ejrs)
	return sjrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableStatus(ejrs *enums.ScheduledJobRunStatus) *ScheduledJobRunCreate {
	if ejrs != nil {
		sjrc.SetStatus(*ejrs)
	}
	return sjrc
}

// SetScheduledJobID sets the "scheduled_job_id" field.
func (sjrc *ScheduledJobRunCreate) SetScheduledJobID(s string) *ScheduledJobRunCreate {
	sjrc.mutation.SetScheduledJobID(s)
	return sjrc
}

// SetExpectedExecutionTime sets the "expected_execution_time" field.
func (sjrc *ScheduledJobRunCreate) SetExpectedExecutionTime(t time.Time) *ScheduledJobRunCreate {
	sjrc.mutation.SetExpectedExecutionTime(t)
	return sjrc
}

// SetScript sets the "script" field.
func (sjrc *ScheduledJobRunCreate) SetScript(s string) *ScheduledJobRunCreate {
	sjrc.mutation.SetScript(s)
	return sjrc
}

// SetID sets the "id" field.
func (sjrc *ScheduledJobRunCreate) SetID(s string) *ScheduledJobRunCreate {
	sjrc.mutation.SetID(s)
	return sjrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sjrc *ScheduledJobRunCreate) SetNillableID(s *string) *ScheduledJobRunCreate {
	if s != nil {
		sjrc.SetID(*s)
	}
	return sjrc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (sjrc *ScheduledJobRunCreate) SetOwner(o *Organization) *ScheduledJobRunCreate {
	return sjrc.SetOwnerID(o.ID)
}

// SetScheduledJob sets the "scheduled_job" edge to the ScheduledJob entity.
func (sjrc *ScheduledJobRunCreate) SetScheduledJob(s *ScheduledJob) *ScheduledJobRunCreate {
	return sjrc.SetScheduledJobID(s.ID)
}

// SetJobRunner sets the "job_runner" edge to the JobRunner entity.
func (sjrc *ScheduledJobRunCreate) SetJobRunner(j *JobRunner) *ScheduledJobRunCreate {
	return sjrc.SetJobRunnerID(j.ID)
}

// Mutation returns the ScheduledJobRunMutation object of the builder.
func (sjrc *ScheduledJobRunCreate) Mutation() *ScheduledJobRunMutation {
	return sjrc.mutation
}

// Save creates the ScheduledJobRun in the database.
func (sjrc *ScheduledJobRunCreate) Save(ctx context.Context) (*ScheduledJobRun, error) {
	if err := sjrc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sjrc.sqlSave, sjrc.mutation, sjrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sjrc *ScheduledJobRunCreate) SaveX(ctx context.Context) *ScheduledJobRun {
	v, err := sjrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjrc *ScheduledJobRunCreate) Exec(ctx context.Context) error {
	_, err := sjrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjrc *ScheduledJobRunCreate) ExecX(ctx context.Context) {
	if err := sjrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjrc *ScheduledJobRunCreate) defaults() error {
	if _, ok := sjrc.mutation.CreatedAt(); !ok {
		if scheduledjobrun.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobrun.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjobrun.DefaultCreatedAt()
		sjrc.mutation.SetCreatedAt(v)
	}
	if _, ok := sjrc.mutation.UpdatedAt(); !ok {
		if scheduledjobrun.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobrun.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjobrun.DefaultUpdatedAt()
		sjrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sjrc.mutation.Status(); !ok {
		v := scheduledjobrun.DefaultStatus
		sjrc.mutation.SetStatus(v)
	}
	if _, ok := sjrc.mutation.ID(); !ok {
		if scheduledjobrun.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobrun.DefaultID (forgotten import generated/runtime?)")
		}
		v := scheduledjobrun.DefaultID()
		sjrc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sjrc *ScheduledJobRunCreate) check() error {
	if v, ok := sjrc.mutation.OwnerID(); ok {
		if err := scheduledjobrun.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ScheduledJobRun.owner_id": %w`, err)}
		}
	}
	if _, ok := sjrc.mutation.JobRunnerID(); !ok {
		return &ValidationError{Name: "job_runner_id", err: errors.New(`generated: missing required field "ScheduledJobRun.job_runner_id"`)}
	}
	if _, ok := sjrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "ScheduledJobRun.status"`)}
	}
	if v, ok := sjrc.mutation.Status(); ok {
		if err := scheduledjobrun.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ScheduledJobRun.status": %w`, err)}
		}
	}
	if _, ok := sjrc.mutation.ScheduledJobID(); !ok {
		return &ValidationError{Name: "scheduled_job_id", err: errors.New(`generated: missing required field "ScheduledJobRun.scheduled_job_id"`)}
	}
	if _, ok := sjrc.mutation.ExpectedExecutionTime(); !ok {
		return &ValidationError{Name: "expected_execution_time", err: errors.New(`generated: missing required field "ScheduledJobRun.expected_execution_time"`)}
	}
	if _, ok := sjrc.mutation.Script(); !ok {
		return &ValidationError{Name: "script", err: errors.New(`generated: missing required field "ScheduledJobRun.script"`)}
	}
	if len(sjrc.mutation.ScheduledJobIDs()) == 0 {
		return &ValidationError{Name: "scheduled_job", err: errors.New(`generated: missing required edge "ScheduledJobRun.scheduled_job"`)}
	}
	if len(sjrc.mutation.JobRunnerIDs()) == 0 {
		return &ValidationError{Name: "job_runner", err: errors.New(`generated: missing required edge "ScheduledJobRun.job_runner"`)}
	}
	return nil
}

func (sjrc *ScheduledJobRunCreate) sqlSave(ctx context.Context) (*ScheduledJobRun, error) {
	if err := sjrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sjrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ScheduledJobRun.ID type: %T", _spec.ID.Value)
		}
	}
	sjrc.mutation.id = &_node.ID
	sjrc.mutation.done = true
	return _node, nil
}

func (sjrc *ScheduledJobRunCreate) createSpec() (*ScheduledJobRun, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheduledJobRun{config: sjrc.config}
		_spec = sqlgraph.NewCreateSpec(scheduledjobrun.Table, sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString))
	)
	_spec.Schema = sjrc.schemaConfig.ScheduledJobRun
	if id, ok := sjrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sjrc.mutation.CreatedAt(); ok {
		_spec.SetField(scheduledjobrun.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sjrc.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjobrun.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sjrc.mutation.CreatedBy(); ok {
		_spec.SetField(scheduledjobrun.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sjrc.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjobrun.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sjrc.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjobrun.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sjrc.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjobrun.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sjrc.mutation.Status(); ok {
		_spec.SetField(scheduledjobrun.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sjrc.mutation.ExpectedExecutionTime(); ok {
		_spec.SetField(scheduledjobrun.FieldExpectedExecutionTime, field.TypeTime, value)
		_node.ExpectedExecutionTime = value
	}
	if value, ok := sjrc.mutation.Script(); ok {
		_spec.SetField(scheduledjobrun.FieldScript, field.TypeString, value)
		_node.Script = value
	}
	if nodes := sjrc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjobrun.OwnerTable,
			Columns: []string{scheduledjobrun.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjrc.schemaConfig.ScheduledJobRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjrc.mutation.ScheduledJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjobrun.ScheduledJobTable,
			Columns: []string{scheduledjobrun.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjrc.schemaConfig.ScheduledJobRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScheduledJobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjrc.mutation.JobRunnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjobrun.JobRunnerTable,
			Columns: []string{scheduledjobrun.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjrc.schemaConfig.ScheduledJobRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobRunnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScheduledJobRunCreateBulk is the builder for creating many ScheduledJobRun entities in bulk.
type ScheduledJobRunCreateBulk struct {
	config
	err      error
	builders []*ScheduledJobRunCreate
}

// Save creates the ScheduledJobRun entities in the database.
func (sjrcb *ScheduledJobRunCreateBulk) Save(ctx context.Context) ([]*ScheduledJobRun, error) {
	if sjrcb.err != nil {
		return nil, sjrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sjrcb.builders))
	nodes := make([]*ScheduledJobRun, len(sjrcb.builders))
	mutators := make([]Mutator, len(sjrcb.builders))
	for i := range sjrcb.builders {
		func(i int, root context.Context) {
			builder := sjrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduledJobRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjrcb *ScheduledJobRunCreateBulk) SaveX(ctx context.Context) []*ScheduledJobRun {
	v, err := sjrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjrcb *ScheduledJobRunCreateBulk) Exec(ctx context.Context) error {
	_, err := sjrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjrcb *ScheduledJobRunCreateBulk) ExecX(ctx context.Context) {
	if err := sjrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
