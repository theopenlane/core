// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// Evidence is the model entity for the Evidence schema.
type Evidence struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the evidence
	Name string `json:"name,omitempty"`
	// the description of the evidence, what is contained in the uploaded file(s) or url(s)
	Description string `json:"description,omitempty"`
	// description of how the evidence was collected
	CollectionProcedure string `json:"collection_procedure,omitempty"`
	// the date the evidence was retrieved
	CreationDate time.Time `json:"creation_date,omitempty"`
	// the date the evidence should be renewed, defaults to a year from entry date
	RenewalDate time.Time `json:"renewal_date,omitempty"`
	// the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
	Source string `json:"source,omitempty"`
	// whether the evidence was automatically generated
	IsAutomated bool `json:"is_automated,omitempty"`
	// the url of the evidence if not uploaded directly to the system
	URL string `json:"url,omitempty"`
	// the status of the evidence, ready, approved, needs renewal, missing artifact, rejected
	Status enums.EvidenceStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EvidenceQuery when eager-loading is set.
	Edges        EvidenceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EvidenceEdges holds the relations/edges for other nodes in the graph.
type EvidenceEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// ControlObjectives holds the value of the control_objectives edge.
	ControlObjectives []*ControlObjective `json:"control_objectives,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedControlObjectives map[string][]*ControlObjective
	namedControls          map[string][]*Control
	namedSubcontrols       map[string][]*Subcontrol
	namedFiles             map[string][]*File
	namedPrograms          map[string][]*Program
	namedTasks             map[string][]*Task
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EvidenceEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ControlObjectivesOrErr returns the ControlObjectives value or an error if the edge
// was not loaded in eager-loading.
func (e EvidenceEdges) ControlObjectivesOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[1] {
		return e.ControlObjectives, nil
	}
	return nil, &NotLoadedError{edge: "control_objectives"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e EvidenceEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[2] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e EvidenceEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[3] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e EvidenceEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[4] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e EvidenceEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[5] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e EvidenceEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[6] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Evidence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case evidence.FieldTags:
			values[i] = new([]byte)
		case evidence.FieldIsAutomated:
			values[i] = new(sql.NullBool)
		case evidence.FieldID, evidence.FieldCreatedBy, evidence.FieldUpdatedBy, evidence.FieldDisplayID, evidence.FieldDeletedBy, evidence.FieldOwnerID, evidence.FieldName, evidence.FieldDescription, evidence.FieldCollectionProcedure, evidence.FieldSource, evidence.FieldURL, evidence.FieldStatus:
			values[i] = new(sql.NullString)
		case evidence.FieldCreatedAt, evidence.FieldUpdatedAt, evidence.FieldDeletedAt, evidence.FieldCreationDate, evidence.FieldRenewalDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Evidence fields.
func (e *Evidence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case evidence.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case evidence.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case evidence.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case evidence.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = value.String
			}
		case evidence.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = value.String
			}
		case evidence.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				e.DisplayID = value.String
			}
		case evidence.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = value.Time
			}
		case evidence.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				e.DeletedBy = value.String
			}
		case evidence.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case evidence.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				e.OwnerID = value.String
			}
		case evidence.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case evidence.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case evidence.FieldCollectionProcedure:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collection_procedure", values[i])
			} else if value.Valid {
				e.CollectionProcedure = value.String
			}
		case evidence.FieldCreationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creation_date", values[i])
			} else if value.Valid {
				e.CreationDate = value.Time
			}
		case evidence.FieldRenewalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_date", values[i])
			} else if value.Valid {
				e.RenewalDate = value.Time
			}
		case evidence.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				e.Source = value.String
			}
		case evidence.FieldIsAutomated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_automated", values[i])
			} else if value.Valid {
				e.IsAutomated = value.Bool
			}
		case evidence.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				e.URL = value.String
			}
		case evidence.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = enums.EvidenceStatus(value.String)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Evidence.
// This includes values selected through modifiers, order, etc.
func (e *Evidence) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Evidence entity.
func (e *Evidence) QueryOwner() *OrganizationQuery {
	return NewEvidenceClient(e.config).QueryOwner(e)
}

// QueryControlObjectives queries the "control_objectives" edge of the Evidence entity.
func (e *Evidence) QueryControlObjectives() *ControlObjectiveQuery {
	return NewEvidenceClient(e.config).QueryControlObjectives(e)
}

// QueryControls queries the "controls" edge of the Evidence entity.
func (e *Evidence) QueryControls() *ControlQuery {
	return NewEvidenceClient(e.config).QueryControls(e)
}

// QuerySubcontrols queries the "subcontrols" edge of the Evidence entity.
func (e *Evidence) QuerySubcontrols() *SubcontrolQuery {
	return NewEvidenceClient(e.config).QuerySubcontrols(e)
}

// QueryFiles queries the "files" edge of the Evidence entity.
func (e *Evidence) QueryFiles() *FileQuery {
	return NewEvidenceClient(e.config).QueryFiles(e)
}

// QueryPrograms queries the "programs" edge of the Evidence entity.
func (e *Evidence) QueryPrograms() *ProgramQuery {
	return NewEvidenceClient(e.config).QueryPrograms(e)
}

// QueryTasks queries the "tasks" edge of the Evidence entity.
func (e *Evidence) QueryTasks() *TaskQuery {
	return NewEvidenceClient(e.config).QueryTasks(e)
}

// Update returns a builder for updating this Evidence.
// Note that you need to call Evidence.Unwrap() before calling this method if this Evidence
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Evidence) Update() *EvidenceUpdateOne {
	return NewEvidenceClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Evidence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Evidence) Unwrap() *Evidence {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("generated: Evidence is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Evidence) String() string {
	var builder strings.Builder
	builder.WriteString("Evidence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(e.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(e.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(e.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(e.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(e.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", e.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(e.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("collection_procedure=")
	builder.WriteString(e.CollectionProcedure)
	builder.WriteString(", ")
	builder.WriteString("creation_date=")
	builder.WriteString(e.CreationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("renewal_date=")
	builder.WriteString(e.RenewalDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(e.Source)
	builder.WriteString(", ")
	builder.WriteString("is_automated=")
	builder.WriteString(fmt.Sprintf("%v", e.IsAutomated))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(e.URL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedControlObjectives returns the ControlObjectives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Evidence) NamedControlObjectives(name string) ([]*ControlObjective, error) {
	if e.Edges.namedControlObjectives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedControlObjectives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Evidence) appendNamedControlObjectives(name string, edges ...*ControlObjective) {
	if e.Edges.namedControlObjectives == nil {
		e.Edges.namedControlObjectives = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		e.Edges.namedControlObjectives[name] = []*ControlObjective{}
	} else {
		e.Edges.namedControlObjectives[name] = append(e.Edges.namedControlObjectives[name], edges...)
	}
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Evidence) NamedControls(name string) ([]*Control, error) {
	if e.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Evidence) appendNamedControls(name string, edges ...*Control) {
	if e.Edges.namedControls == nil {
		e.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		e.Edges.namedControls[name] = []*Control{}
	} else {
		e.Edges.namedControls[name] = append(e.Edges.namedControls[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Evidence) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if e.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Evidence) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if e.Edges.namedSubcontrols == nil {
		e.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		e.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		e.Edges.namedSubcontrols[name] = append(e.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Evidence) NamedFiles(name string) ([]*File, error) {
	if e.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Evidence) appendNamedFiles(name string, edges ...*File) {
	if e.Edges.namedFiles == nil {
		e.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		e.Edges.namedFiles[name] = []*File{}
	} else {
		e.Edges.namedFiles[name] = append(e.Edges.namedFiles[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Evidence) NamedPrograms(name string) ([]*Program, error) {
	if e.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Evidence) appendNamedPrograms(name string, edges ...*Program) {
	if e.Edges.namedPrograms == nil {
		e.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		e.Edges.namedPrograms[name] = []*Program{}
	} else {
		e.Edges.namedPrograms[name] = append(e.Edges.namedPrograms[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Evidence) NamedTasks(name string) ([]*Task, error) {
	if e.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Evidence) appendNamedTasks(name string, edges ...*Task) {
	if e.Edges.namedTasks == nil {
		e.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		e.Edges.namedTasks[name] = []*Task{}
	} else {
		e.Edges.namedTasks[name] = append(e.Edges.namedTasks[name], edges...)
	}
}

// Evidences is a parsable slice of Evidence.
type Evidences []*Evidence
