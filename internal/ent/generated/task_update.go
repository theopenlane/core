// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TaskUpdate) ClearUpdatedAt() *TaskUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TaskUpdate) SetUpdatedBy(s string) *TaskUpdate {
	tu.mutation.SetUpdatedBy(s)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdatedBy(s *string) *TaskUpdate {
	if s != nil {
		tu.SetUpdatedBy(*s)
	}
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TaskUpdate) ClearUpdatedBy() *TaskUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TaskUpdate) SetDeletedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeletedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TaskUpdate) ClearDeletedAt() *TaskUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetDeletedBy sets the "deleted_by" field.
func (tu *TaskUpdate) SetDeletedBy(s string) *TaskUpdate {
	tu.mutation.SetDeletedBy(s)
	return tu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeletedBy(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDeletedBy(*s)
	}
	return tu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tu *TaskUpdate) ClearDeletedBy() *TaskUpdate {
	tu.mutation.ClearDeletedBy()
	return tu
}

// SetTags sets the "tags" field.
func (tu *TaskUpdate) SetTags(s []string) *TaskUpdate {
	tu.mutation.SetTags(s)
	return tu
}

// AppendTags appends s to the "tags" field.
func (tu *TaskUpdate) AppendTags(s []string) *TaskUpdate {
	tu.mutation.AppendTags(s)
	return tu
}

// ClearTags clears the value of the "tags" field.
func (tu *TaskUpdate) ClearTags() *TaskUpdate {
	tu.mutation.ClearTags()
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTitle(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TaskUpdate) ClearDescription() *TaskUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetDetails sets the "details" field.
func (tu *TaskUpdate) SetDetails(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetDetails(m)
	return tu
}

// ClearDetails clears the value of the "details" field.
func (tu *TaskUpdate) ClearDetails() *TaskUpdate {
	tu.mutation.ClearDetails()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(es enums.TaskStatus) *TaskUpdate {
	tu.mutation.SetStatus(es)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(es *enums.TaskStatus) *TaskUpdate {
	if es != nil {
		tu.SetStatus(*es)
	}
	return tu
}

// SetDue sets the "due" field.
func (tu *TaskUpdate) SetDue(t time.Time) *TaskUpdate {
	tu.mutation.SetDue(t)
	return tu
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDue(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDue(*t)
	}
	return tu
}

// ClearDue clears the value of the "due" field.
func (tu *TaskUpdate) ClearDue() *TaskUpdate {
	tu.mutation.ClearDue()
	return tu
}

// SetCompleted sets the "completed" field.
func (tu *TaskUpdate) SetCompleted(t time.Time) *TaskUpdate {
	tu.mutation.SetCompleted(t)
	return tu
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCompleted(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCompleted(*t)
	}
	return tu
}

// ClearCompleted clears the value of the "completed" field.
func (tu *TaskUpdate) ClearCompleted() *TaskUpdate {
	tu.mutation.ClearCompleted()
	return tu
}

// SetAssignerID sets the "assigner" edge to the User entity by ID.
func (tu *TaskUpdate) SetAssignerID(id string) *TaskUpdate {
	tu.mutation.SetAssignerID(id)
	return tu
}

// SetAssigner sets the "assigner" edge to the User entity.
func (tu *TaskUpdate) SetAssigner(u *User) *TaskUpdate {
	return tu.SetAssignerID(u.ID)
}

// SetAssigneeID sets the "assignee" edge to the User entity by ID.
func (tu *TaskUpdate) SetAssigneeID(id string) *TaskUpdate {
	tu.mutation.SetAssigneeID(id)
	return tu
}

// SetNillableAssigneeID sets the "assignee" edge to the User entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableAssigneeID(id *string) *TaskUpdate {
	if id != nil {
		tu = tu.SetAssigneeID(*id)
	}
	return tu
}

// SetAssignee sets the "assignee" edge to the User entity.
func (tu *TaskUpdate) SetAssignee(u *User) *TaskUpdate {
	return tu.SetAssigneeID(u.ID)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (tu *TaskUpdate) AddOrganizationIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddOrganizationIDs(ids...)
	return tu
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (tu *TaskUpdate) AddOrganization(o ...*Organization) *TaskUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.AddOrganizationIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (tu *TaskUpdate) AddGroupIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddGroupIDs(ids...)
	return tu
}

// AddGroup adds the "group" edges to the Group entity.
func (tu *TaskUpdate) AddGroup(g ...*Group) *TaskUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return tu.AddGroupIDs(ids...)
}

// AddPolicyIDs adds the "policy" edge to the InternalPolicy entity by IDs.
func (tu *TaskUpdate) AddPolicyIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddPolicyIDs(ids...)
	return tu
}

// AddPolicy adds the "policy" edges to the InternalPolicy entity.
func (tu *TaskUpdate) AddPolicy(i ...*InternalPolicy) *TaskUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tu.AddPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedure" edge to the Procedure entity by IDs.
func (tu *TaskUpdate) AddProcedureIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddProcedureIDs(ids...)
	return tu
}

// AddProcedure adds the "procedure" edges to the Procedure entity.
func (tu *TaskUpdate) AddProcedure(p ...*Procedure) *TaskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddProcedureIDs(ids...)
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (tu *TaskUpdate) AddControlIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddControlIDs(ids...)
	return tu
}

// AddControl adds the "control" edges to the Control entity.
func (tu *TaskUpdate) AddControl(c ...*Control) *TaskUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddControlIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objective" edge to the ControlObjective entity by IDs.
func (tu *TaskUpdate) AddControlObjectiveIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddControlObjectiveIDs(ids...)
	return tu
}

// AddControlObjective adds the "control_objective" edges to the ControlObjective entity.
func (tu *TaskUpdate) AddControlObjective(c ...*ControlObjective) *TaskUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddControlObjectiveIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrol" edge to the Subcontrol entity by IDs.
func (tu *TaskUpdate) AddSubcontrolIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddSubcontrolIDs(ids...)
	return tu
}

// AddSubcontrol adds the "subcontrol" edges to the Subcontrol entity.
func (tu *TaskUpdate) AddSubcontrol(s ...*Subcontrol) *TaskUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSubcontrolIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (tu *TaskUpdate) AddProgramIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddProgramIDs(ids...)
	return tu
}

// AddProgram adds the "program" edges to the Program entity.
func (tu *TaskUpdate) AddProgram(p ...*Program) *TaskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddProgramIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearAssigner clears the "assigner" edge to the User entity.
func (tu *TaskUpdate) ClearAssigner() *TaskUpdate {
	tu.mutation.ClearAssigner()
	return tu
}

// ClearAssignee clears the "assignee" edge to the User entity.
func (tu *TaskUpdate) ClearAssignee() *TaskUpdate {
	tu.mutation.ClearAssignee()
	return tu
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (tu *TaskUpdate) ClearOrganization() *TaskUpdate {
	tu.mutation.ClearOrganization()
	return tu
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (tu *TaskUpdate) RemoveOrganizationIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemoveOrganizationIDs(ids...)
	return tu
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (tu *TaskUpdate) RemoveOrganization(o ...*Organization) *TaskUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.RemoveOrganizationIDs(ids...)
}

// ClearGroup clears all "group" edges to the Group entity.
func (tu *TaskUpdate) ClearGroup() *TaskUpdate {
	tu.mutation.ClearGroup()
	return tu
}

// RemoveGroupIDs removes the "group" edge to Group entities by IDs.
func (tu *TaskUpdate) RemoveGroupIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemoveGroupIDs(ids...)
	return tu
}

// RemoveGroup removes "group" edges to Group entities.
func (tu *TaskUpdate) RemoveGroup(g ...*Group) *TaskUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return tu.RemoveGroupIDs(ids...)
}

// ClearPolicy clears all "policy" edges to the InternalPolicy entity.
func (tu *TaskUpdate) ClearPolicy() *TaskUpdate {
	tu.mutation.ClearPolicy()
	return tu
}

// RemovePolicyIDs removes the "policy" edge to InternalPolicy entities by IDs.
func (tu *TaskUpdate) RemovePolicyIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemovePolicyIDs(ids...)
	return tu
}

// RemovePolicy removes "policy" edges to InternalPolicy entities.
func (tu *TaskUpdate) RemovePolicy(i ...*InternalPolicy) *TaskUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tu.RemovePolicyIDs(ids...)
}

// ClearProcedure clears all "procedure" edges to the Procedure entity.
func (tu *TaskUpdate) ClearProcedure() *TaskUpdate {
	tu.mutation.ClearProcedure()
	return tu
}

// RemoveProcedureIDs removes the "procedure" edge to Procedure entities by IDs.
func (tu *TaskUpdate) RemoveProcedureIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemoveProcedureIDs(ids...)
	return tu
}

// RemoveProcedure removes "procedure" edges to Procedure entities.
func (tu *TaskUpdate) RemoveProcedure(p ...*Procedure) *TaskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveProcedureIDs(ids...)
}

// ClearControl clears all "control" edges to the Control entity.
func (tu *TaskUpdate) ClearControl() *TaskUpdate {
	tu.mutation.ClearControl()
	return tu
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (tu *TaskUpdate) RemoveControlIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemoveControlIDs(ids...)
	return tu
}

// RemoveControl removes "control" edges to Control entities.
func (tu *TaskUpdate) RemoveControl(c ...*Control) *TaskUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveControlIDs(ids...)
}

// ClearControlObjective clears all "control_objective" edges to the ControlObjective entity.
func (tu *TaskUpdate) ClearControlObjective() *TaskUpdate {
	tu.mutation.ClearControlObjective()
	return tu
}

// RemoveControlObjectiveIDs removes the "control_objective" edge to ControlObjective entities by IDs.
func (tu *TaskUpdate) RemoveControlObjectiveIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemoveControlObjectiveIDs(ids...)
	return tu
}

// RemoveControlObjective removes "control_objective" edges to ControlObjective entities.
func (tu *TaskUpdate) RemoveControlObjective(c ...*ControlObjective) *TaskUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveControlObjectiveIDs(ids...)
}

// ClearSubcontrol clears all "subcontrol" edges to the Subcontrol entity.
func (tu *TaskUpdate) ClearSubcontrol() *TaskUpdate {
	tu.mutation.ClearSubcontrol()
	return tu
}

// RemoveSubcontrolIDs removes the "subcontrol" edge to Subcontrol entities by IDs.
func (tu *TaskUpdate) RemoveSubcontrolIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemoveSubcontrolIDs(ids...)
	return tu
}

// RemoveSubcontrol removes "subcontrol" edges to Subcontrol entities.
func (tu *TaskUpdate) RemoveSubcontrol(s ...*Subcontrol) *TaskUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSubcontrolIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (tu *TaskUpdate) ClearProgram() *TaskUpdate {
	tu.mutation.ClearProgram()
	return tu
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (tu *TaskUpdate) RemoveProgramIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemoveProgramIDs(ids...)
	return tu
}

// RemoveProgram removes "program" edges to Program entities.
func (tu *TaskUpdate) RemoveProgram(p ...*Program) *TaskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		if task.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized task.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Task.status": %w`, err)}
		}
	}
	if tu.mutation.AssignerCleared() && len(tu.mutation.AssignerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Task.assigner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(task.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(task.FieldUpdatedAt, field.TypeTime)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(task.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeString, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(task.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(task.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.DeletedBy(); ok {
		_spec.SetField(task.FieldDeletedBy, field.TypeString, value)
	}
	if tu.mutation.DeletedByCleared() {
		_spec.ClearField(task.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tu.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldTags, value)
		})
	}
	if tu.mutation.TagsCleared() {
		_spec.ClearField(task.FieldTags, field.TypeJSON)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Details(); ok {
		_spec.SetField(task.FieldDetails, field.TypeJSON, value)
	}
	if tu.mutation.DetailsCleared() {
		_spec.ClearField(task.FieldDetails, field.TypeJSON)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Due(); ok {
		_spec.SetField(task.FieldDue, field.TypeTime, value)
	}
	if tu.mutation.DueCleared() {
		_spec.ClearField(task.FieldDue, field.TypeTime)
	}
	if value, ok := tu.mutation.Completed(); ok {
		_spec.SetField(task.FieldCompleted, field.TypeTime, value)
	}
	if tu.mutation.CompletedCleared() {
		_spec.ClearField(task.FieldCompleted, field.TypeTime)
	}
	if tu.mutation.AssignerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssignerTable,
			Columns: []string{task.AssignerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AssignerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssignerTable,
			Columns: []string{task.AssignerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.OrganizationTable,
			Columns: task.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.OrganizationTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !tu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.OrganizationTable,
			Columns: task.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.OrganizationTable,
			Columns: task.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupTable,
			Columns: task.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.GroupTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedGroupIDs(); len(nodes) > 0 && !tu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupTable,
			Columns: task.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupTable,
			Columns: task.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.PolicyTable,
			Columns: task.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.InternalPolicyTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPolicyIDs(); len(nodes) > 0 && !tu.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.PolicyTable,
			Columns: task.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.PolicyTable,
			Columns: task.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProcedureTable,
			Columns: task.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ProcedureTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProcedureIDs(); len(nodes) > 0 && !tu.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProcedureTable,
			Columns: task.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProcedureTable,
			Columns: task.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlTable,
			Columns: task.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ControlTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedControlIDs(); len(nodes) > 0 && !tu.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlTable,
			Columns: task.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlTable,
			Columns: task.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ControlObjectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectiveTable,
			Columns: task.ControlObjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ControlObjectiveTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedControlObjectiveIDs(); len(nodes) > 0 && !tu.mutation.ControlObjectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectiveTable,
			Columns: task.ControlObjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ControlObjectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectiveTable,
			Columns: task.ControlObjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SubcontrolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolTable,
			Columns: task.SubcontrolPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.SubcontrolTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubcontrolIDs(); len(nodes) > 0 && !tu.mutation.SubcontrolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolTable,
			Columns: task.SubcontrolPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubcontrolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolTable,
			Columns: task.SubcontrolPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramTable,
			Columns: task.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ProgramTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProgramIDs(); len(nodes) > 0 && !tu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramTable,
			Columns: task.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramTable,
			Columns: task.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = tu.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tu.schemaConfig.Task
	ctx = internal.NewSchemaConfigContext(ctx, tu.schemaConfig)
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TaskUpdateOne) ClearUpdatedAt() *TaskUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TaskUpdateOne) SetUpdatedBy(s string) *TaskUpdateOne {
	tuo.mutation.SetUpdatedBy(s)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdatedBy(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetUpdatedBy(*s)
	}
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TaskUpdateOne) ClearUpdatedBy() *TaskUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TaskUpdateOne) SetDeletedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeletedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TaskUpdateOne) ClearDeletedAt() *TaskUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tuo *TaskUpdateOne) SetDeletedBy(s string) *TaskUpdateOne {
	tuo.mutation.SetDeletedBy(s)
	return tuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeletedBy(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDeletedBy(*s)
	}
	return tuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tuo *TaskUpdateOne) ClearDeletedBy() *TaskUpdateOne {
	tuo.mutation.ClearDeletedBy()
	return tuo
}

// SetTags sets the "tags" field.
func (tuo *TaskUpdateOne) SetTags(s []string) *TaskUpdateOne {
	tuo.mutation.SetTags(s)
	return tuo
}

// AppendTags appends s to the "tags" field.
func (tuo *TaskUpdateOne) AppendTags(s []string) *TaskUpdateOne {
	tuo.mutation.AppendTags(s)
	return tuo
}

// ClearTags clears the value of the "tags" field.
func (tuo *TaskUpdateOne) ClearTags() *TaskUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTitle(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetDetails sets the "details" field.
func (tuo *TaskUpdateOne) SetDetails(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetDetails(m)
	return tuo
}

// ClearDetails clears the value of the "details" field.
func (tuo *TaskUpdateOne) ClearDetails() *TaskUpdateOne {
	tuo.mutation.ClearDetails()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(es enums.TaskStatus) *TaskUpdateOne {
	tuo.mutation.SetStatus(es)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(es *enums.TaskStatus) *TaskUpdateOne {
	if es != nil {
		tuo.SetStatus(*es)
	}
	return tuo
}

// SetDue sets the "due" field.
func (tuo *TaskUpdateOne) SetDue(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDue(t)
	return tuo
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDue(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDue(*t)
	}
	return tuo
}

// ClearDue clears the value of the "due" field.
func (tuo *TaskUpdateOne) ClearDue() *TaskUpdateOne {
	tuo.mutation.ClearDue()
	return tuo
}

// SetCompleted sets the "completed" field.
func (tuo *TaskUpdateOne) SetCompleted(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCompleted(t)
	return tuo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCompleted(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCompleted(*t)
	}
	return tuo
}

// ClearCompleted clears the value of the "completed" field.
func (tuo *TaskUpdateOne) ClearCompleted() *TaskUpdateOne {
	tuo.mutation.ClearCompleted()
	return tuo
}

// SetAssignerID sets the "assigner" edge to the User entity by ID.
func (tuo *TaskUpdateOne) SetAssignerID(id string) *TaskUpdateOne {
	tuo.mutation.SetAssignerID(id)
	return tuo
}

// SetAssigner sets the "assigner" edge to the User entity.
func (tuo *TaskUpdateOne) SetAssigner(u *User) *TaskUpdateOne {
	return tuo.SetAssignerID(u.ID)
}

// SetAssigneeID sets the "assignee" edge to the User entity by ID.
func (tuo *TaskUpdateOne) SetAssigneeID(id string) *TaskUpdateOne {
	tuo.mutation.SetAssigneeID(id)
	return tuo
}

// SetNillableAssigneeID sets the "assignee" edge to the User entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAssigneeID(id *string) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetAssigneeID(*id)
	}
	return tuo
}

// SetAssignee sets the "assignee" edge to the User entity.
func (tuo *TaskUpdateOne) SetAssignee(u *User) *TaskUpdateOne {
	return tuo.SetAssigneeID(u.ID)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (tuo *TaskUpdateOne) AddOrganizationIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddOrganizationIDs(ids...)
	return tuo
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (tuo *TaskUpdateOne) AddOrganization(o ...*Organization) *TaskUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.AddOrganizationIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (tuo *TaskUpdateOne) AddGroupIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddGroupIDs(ids...)
	return tuo
}

// AddGroup adds the "group" edges to the Group entity.
func (tuo *TaskUpdateOne) AddGroup(g ...*Group) *TaskUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return tuo.AddGroupIDs(ids...)
}

// AddPolicyIDs adds the "policy" edge to the InternalPolicy entity by IDs.
func (tuo *TaskUpdateOne) AddPolicyIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddPolicyIDs(ids...)
	return tuo
}

// AddPolicy adds the "policy" edges to the InternalPolicy entity.
func (tuo *TaskUpdateOne) AddPolicy(i ...*InternalPolicy) *TaskUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tuo.AddPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedure" edge to the Procedure entity by IDs.
func (tuo *TaskUpdateOne) AddProcedureIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddProcedureIDs(ids...)
	return tuo
}

// AddProcedure adds the "procedure" edges to the Procedure entity.
func (tuo *TaskUpdateOne) AddProcedure(p ...*Procedure) *TaskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddProcedureIDs(ids...)
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (tuo *TaskUpdateOne) AddControlIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddControlIDs(ids...)
	return tuo
}

// AddControl adds the "control" edges to the Control entity.
func (tuo *TaskUpdateOne) AddControl(c ...*Control) *TaskUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddControlIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objective" edge to the ControlObjective entity by IDs.
func (tuo *TaskUpdateOne) AddControlObjectiveIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddControlObjectiveIDs(ids...)
	return tuo
}

// AddControlObjective adds the "control_objective" edges to the ControlObjective entity.
func (tuo *TaskUpdateOne) AddControlObjective(c ...*ControlObjective) *TaskUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddControlObjectiveIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrol" edge to the Subcontrol entity by IDs.
func (tuo *TaskUpdateOne) AddSubcontrolIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddSubcontrolIDs(ids...)
	return tuo
}

// AddSubcontrol adds the "subcontrol" edges to the Subcontrol entity.
func (tuo *TaskUpdateOne) AddSubcontrol(s ...*Subcontrol) *TaskUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSubcontrolIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (tuo *TaskUpdateOne) AddProgramIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddProgramIDs(ids...)
	return tuo
}

// AddProgram adds the "program" edges to the Program entity.
func (tuo *TaskUpdateOne) AddProgram(p ...*Program) *TaskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddProgramIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearAssigner clears the "assigner" edge to the User entity.
func (tuo *TaskUpdateOne) ClearAssigner() *TaskUpdateOne {
	tuo.mutation.ClearAssigner()
	return tuo
}

// ClearAssignee clears the "assignee" edge to the User entity.
func (tuo *TaskUpdateOne) ClearAssignee() *TaskUpdateOne {
	tuo.mutation.ClearAssignee()
	return tuo
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (tuo *TaskUpdateOne) ClearOrganization() *TaskUpdateOne {
	tuo.mutation.ClearOrganization()
	return tuo
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (tuo *TaskUpdateOne) RemoveOrganizationIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemoveOrganizationIDs(ids...)
	return tuo
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (tuo *TaskUpdateOne) RemoveOrganization(o ...*Organization) *TaskUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.RemoveOrganizationIDs(ids...)
}

// ClearGroup clears all "group" edges to the Group entity.
func (tuo *TaskUpdateOne) ClearGroup() *TaskUpdateOne {
	tuo.mutation.ClearGroup()
	return tuo
}

// RemoveGroupIDs removes the "group" edge to Group entities by IDs.
func (tuo *TaskUpdateOne) RemoveGroupIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemoveGroupIDs(ids...)
	return tuo
}

// RemoveGroup removes "group" edges to Group entities.
func (tuo *TaskUpdateOne) RemoveGroup(g ...*Group) *TaskUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return tuo.RemoveGroupIDs(ids...)
}

// ClearPolicy clears all "policy" edges to the InternalPolicy entity.
func (tuo *TaskUpdateOne) ClearPolicy() *TaskUpdateOne {
	tuo.mutation.ClearPolicy()
	return tuo
}

// RemovePolicyIDs removes the "policy" edge to InternalPolicy entities by IDs.
func (tuo *TaskUpdateOne) RemovePolicyIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemovePolicyIDs(ids...)
	return tuo
}

// RemovePolicy removes "policy" edges to InternalPolicy entities.
func (tuo *TaskUpdateOne) RemovePolicy(i ...*InternalPolicy) *TaskUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tuo.RemovePolicyIDs(ids...)
}

// ClearProcedure clears all "procedure" edges to the Procedure entity.
func (tuo *TaskUpdateOne) ClearProcedure() *TaskUpdateOne {
	tuo.mutation.ClearProcedure()
	return tuo
}

// RemoveProcedureIDs removes the "procedure" edge to Procedure entities by IDs.
func (tuo *TaskUpdateOne) RemoveProcedureIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemoveProcedureIDs(ids...)
	return tuo
}

// RemoveProcedure removes "procedure" edges to Procedure entities.
func (tuo *TaskUpdateOne) RemoveProcedure(p ...*Procedure) *TaskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveProcedureIDs(ids...)
}

// ClearControl clears all "control" edges to the Control entity.
func (tuo *TaskUpdateOne) ClearControl() *TaskUpdateOne {
	tuo.mutation.ClearControl()
	return tuo
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (tuo *TaskUpdateOne) RemoveControlIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemoveControlIDs(ids...)
	return tuo
}

// RemoveControl removes "control" edges to Control entities.
func (tuo *TaskUpdateOne) RemoveControl(c ...*Control) *TaskUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveControlIDs(ids...)
}

// ClearControlObjective clears all "control_objective" edges to the ControlObjective entity.
func (tuo *TaskUpdateOne) ClearControlObjective() *TaskUpdateOne {
	tuo.mutation.ClearControlObjective()
	return tuo
}

// RemoveControlObjectiveIDs removes the "control_objective" edge to ControlObjective entities by IDs.
func (tuo *TaskUpdateOne) RemoveControlObjectiveIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemoveControlObjectiveIDs(ids...)
	return tuo
}

// RemoveControlObjective removes "control_objective" edges to ControlObjective entities.
func (tuo *TaskUpdateOne) RemoveControlObjective(c ...*ControlObjective) *TaskUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveControlObjectiveIDs(ids...)
}

// ClearSubcontrol clears all "subcontrol" edges to the Subcontrol entity.
func (tuo *TaskUpdateOne) ClearSubcontrol() *TaskUpdateOne {
	tuo.mutation.ClearSubcontrol()
	return tuo
}

// RemoveSubcontrolIDs removes the "subcontrol" edge to Subcontrol entities by IDs.
func (tuo *TaskUpdateOne) RemoveSubcontrolIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemoveSubcontrolIDs(ids...)
	return tuo
}

// RemoveSubcontrol removes "subcontrol" edges to Subcontrol entities.
func (tuo *TaskUpdateOne) RemoveSubcontrol(s ...*Subcontrol) *TaskUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSubcontrolIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (tuo *TaskUpdateOne) ClearProgram() *TaskUpdateOne {
	tuo.mutation.ClearProgram()
	return tuo
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (tuo *TaskUpdateOne) RemoveProgramIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemoveProgramIDs(ids...)
	return tuo
}

// RemoveProgram removes "program" edges to Program entities.
func (tuo *TaskUpdateOne) RemoveProgram(p ...*Program) *TaskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		if task.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized task.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Task.status": %w`, err)}
		}
	}
	if tuo.mutation.AssignerCleared() && len(tuo.mutation.AssignerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Task.assigner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(task.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(task.FieldUpdatedAt, field.TypeTime)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(task.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeString, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(task.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(task.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.DeletedBy(); ok {
		_spec.SetField(task.FieldDeletedBy, field.TypeString, value)
	}
	if tuo.mutation.DeletedByCleared() {
		_spec.ClearField(task.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldTags, value)
		})
	}
	if tuo.mutation.TagsCleared() {
		_spec.ClearField(task.FieldTags, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Details(); ok {
		_spec.SetField(task.FieldDetails, field.TypeJSON, value)
	}
	if tuo.mutation.DetailsCleared() {
		_spec.ClearField(task.FieldDetails, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Due(); ok {
		_spec.SetField(task.FieldDue, field.TypeTime, value)
	}
	if tuo.mutation.DueCleared() {
		_spec.ClearField(task.FieldDue, field.TypeTime)
	}
	if value, ok := tuo.mutation.Completed(); ok {
		_spec.SetField(task.FieldCompleted, field.TypeTime, value)
	}
	if tuo.mutation.CompletedCleared() {
		_spec.ClearField(task.FieldCompleted, field.TypeTime)
	}
	if tuo.mutation.AssignerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssignerTable,
			Columns: []string{task.AssignerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AssignerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssignerTable,
			Columns: []string{task.AssignerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.OrganizationTable,
			Columns: task.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.OrganizationTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !tuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.OrganizationTable,
			Columns: task.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.OrganizationTable,
			Columns: task.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupTable,
			Columns: task.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.GroupTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedGroupIDs(); len(nodes) > 0 && !tuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupTable,
			Columns: task.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.GroupTable,
			Columns: task.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.GroupTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.PolicyTable,
			Columns: task.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.InternalPolicyTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPolicyIDs(); len(nodes) > 0 && !tuo.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.PolicyTable,
			Columns: task.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.PolicyTable,
			Columns: task.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProcedureTable,
			Columns: task.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ProcedureTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProcedureIDs(); len(nodes) > 0 && !tuo.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProcedureTable,
			Columns: task.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProcedureTable,
			Columns: task.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlTable,
			Columns: task.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ControlTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedControlIDs(); len(nodes) > 0 && !tuo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlTable,
			Columns: task.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlTable,
			Columns: task.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ControlTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ControlObjectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectiveTable,
			Columns: task.ControlObjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ControlObjectiveTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedControlObjectiveIDs(); len(nodes) > 0 && !tuo.mutation.ControlObjectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectiveTable,
			Columns: task.ControlObjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ControlObjectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ControlObjectiveTable,
			Columns: task.ControlObjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SubcontrolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolTable,
			Columns: task.SubcontrolPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.SubcontrolTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubcontrolIDs(); len(nodes) > 0 && !tuo.mutation.SubcontrolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolTable,
			Columns: task.SubcontrolPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubcontrolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.SubcontrolTable,
			Columns: task.SubcontrolPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramTable,
			Columns: task.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ProgramTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProgramIDs(); len(nodes) > 0 && !tuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramTable,
			Columns: task.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.ProgramTable,
			Columns: task.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = tuo.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tuo.schemaConfig.Task
	ctx = internal.NewSchemaConfigContext(ctx, tuo.schemaConfig)
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
