// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/jobresult"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/enums"
)

// JobResult is the model entity for the JobResult schema.
type JobResult struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the job this result belongs to
	ScheduledJobID string `json:"scheduled_job_id,omitempty"`
	// the status of this job. did it fail? did it succeed?
	Status enums.JobExecutionStatus `json:"status,omitempty"`
	// the exit code from the script that was executed
	ExitCode *int `json:"exit_code,omitempty"`
	// The time the job finished it's execution. This is different from the db insertion time
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// The time the job started it's execution. This is different from the db insertion time
	StartedAt time.Time `json:"started_at,omitempty"`
	// FileID holds the value of the "file_id" field.
	FileID string `json:"file_id,omitempty"`
	// the log output from the job
	Log *string `json:"log,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobResultQuery when eager-loading is set.
	Edges        JobResultEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobResultEdges holds the relations/edges for other nodes in the graph.
type JobResultEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// ScheduledJob holds the value of the scheduled_job edge.
	ScheduledJob *ScheduledJob `json:"scheduled_job,omitempty"`
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobResultEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ScheduledJobOrErr returns the ScheduledJob value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobResultEdges) ScheduledJobOrErr() (*ScheduledJob, error) {
	if e.ScheduledJob != nil {
		return e.ScheduledJob, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: scheduledjob.Label}
	}
	return nil, &NotLoadedError{edge: "scheduled_job"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobResultEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobresult.FieldExitCode:
			values[i] = new(sql.NullInt64)
		case jobresult.FieldID, jobresult.FieldCreatedBy, jobresult.FieldUpdatedBy, jobresult.FieldDeletedBy, jobresult.FieldOwnerID, jobresult.FieldScheduledJobID, jobresult.FieldStatus, jobresult.FieldFileID, jobresult.FieldLog:
			values[i] = new(sql.NullString)
		case jobresult.FieldCreatedAt, jobresult.FieldUpdatedAt, jobresult.FieldDeletedAt, jobresult.FieldFinishedAt, jobresult.FieldStartedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobResult fields.
func (jr *JobResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobresult.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				jr.ID = value.String
			}
		case jobresult.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jr.CreatedAt = value.Time
			}
		case jobresult.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jr.UpdatedAt = value.Time
			}
		case jobresult.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				jr.CreatedBy = value.String
			}
		case jobresult.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				jr.UpdatedBy = value.String
			}
		case jobresult.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jr.DeletedAt = value.Time
			}
		case jobresult.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				jr.DeletedBy = value.String
			}
		case jobresult.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				jr.OwnerID = value.String
			}
		case jobresult.FieldScheduledJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_job_id", values[i])
			} else if value.Valid {
				jr.ScheduledJobID = value.String
			}
		case jobresult.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				jr.Status = enums.JobExecutionStatus(value.String)
			}
		case jobresult.FieldExitCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exit_code", values[i])
			} else if value.Valid {
				jr.ExitCode = new(int)
				*jr.ExitCode = int(value.Int64)
			}
		case jobresult.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				jr.FinishedAt = value.Time
			}
		case jobresult.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				jr.StartedAt = value.Time
			}
		case jobresult.FieldFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				jr.FileID = value.String
			}
		case jobresult.FieldLog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log", values[i])
			} else if value.Valid {
				jr.Log = new(string)
				*jr.Log = value.String
			}
		default:
			jr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobResult.
// This includes values selected through modifiers, order, etc.
func (jr *JobResult) Value(name string) (ent.Value, error) {
	return jr.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the JobResult entity.
func (jr *JobResult) QueryOwner() *OrganizationQuery {
	return NewJobResultClient(jr.config).QueryOwner(jr)
}

// QueryScheduledJob queries the "scheduled_job" edge of the JobResult entity.
func (jr *JobResult) QueryScheduledJob() *ScheduledJobQuery {
	return NewJobResultClient(jr.config).QueryScheduledJob(jr)
}

// QueryFile queries the "file" edge of the JobResult entity.
func (jr *JobResult) QueryFile() *FileQuery {
	return NewJobResultClient(jr.config).QueryFile(jr)
}

// Update returns a builder for updating this JobResult.
// Note that you need to call JobResult.Unwrap() before calling this method if this JobResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (jr *JobResult) Update() *JobResultUpdateOne {
	return NewJobResultClient(jr.config).UpdateOne(jr)
}

// Unwrap unwraps the JobResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jr *JobResult) Unwrap() *JobResult {
	_tx, ok := jr.config.driver.(*txDriver)
	if !ok {
		panic("generated: JobResult is not a transactional entity")
	}
	jr.config.driver = _tx.drv
	return jr
}

// String implements the fmt.Stringer.
func (jr *JobResult) String() string {
	var builder strings.Builder
	builder.WriteString("JobResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(jr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(jr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(jr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(jr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(jr.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(jr.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("scheduled_job_id=")
	builder.WriteString(jr.ScheduledJobID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", jr.Status))
	builder.WriteString(", ")
	if v := jr.ExitCode; v != nil {
		builder.WriteString("exit_code=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(jr.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(jr.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(jr.FileID)
	builder.WriteString(", ")
	if v := jr.Log; v != nil {
		builder.WriteString("log=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// JobResults is a parsable slice of JobResult.
type JobResults []*JobResult
