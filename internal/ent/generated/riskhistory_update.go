// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// RiskHistoryUpdate is the builder for updating RiskHistory entities.
type RiskHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *RiskHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RiskHistoryUpdate builder.
func (rhu *RiskHistoryUpdate) Where(ps ...predicate.RiskHistory) *RiskHistoryUpdate {
	rhu.mutation.Where(ps...)
	return rhu
}

// SetUpdatedAt sets the "updated_at" field.
func (rhu *RiskHistoryUpdate) SetUpdatedAt(t time.Time) *RiskHistoryUpdate {
	rhu.mutation.SetUpdatedAt(t)
	return rhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rhu *RiskHistoryUpdate) ClearUpdatedAt() *RiskHistoryUpdate {
	rhu.mutation.ClearUpdatedAt()
	return rhu
}

// SetUpdatedBy sets the "updated_by" field.
func (rhu *RiskHistoryUpdate) SetUpdatedBy(s string) *RiskHistoryUpdate {
	rhu.mutation.SetUpdatedBy(s)
	return rhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableUpdatedBy(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetUpdatedBy(*s)
	}
	return rhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (rhu *RiskHistoryUpdate) ClearUpdatedBy() *RiskHistoryUpdate {
	rhu.mutation.ClearUpdatedBy()
	return rhu
}

// SetDeletedAt sets the "deleted_at" field.
func (rhu *RiskHistoryUpdate) SetDeletedAt(t time.Time) *RiskHistoryUpdate {
	rhu.mutation.SetDeletedAt(t)
	return rhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableDeletedAt(t *time.Time) *RiskHistoryUpdate {
	if t != nil {
		rhu.SetDeletedAt(*t)
	}
	return rhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rhu *RiskHistoryUpdate) ClearDeletedAt() *RiskHistoryUpdate {
	rhu.mutation.ClearDeletedAt()
	return rhu
}

// SetDeletedBy sets the "deleted_by" field.
func (rhu *RiskHistoryUpdate) SetDeletedBy(s string) *RiskHistoryUpdate {
	rhu.mutation.SetDeletedBy(s)
	return rhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableDeletedBy(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetDeletedBy(*s)
	}
	return rhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (rhu *RiskHistoryUpdate) ClearDeletedBy() *RiskHistoryUpdate {
	rhu.mutation.ClearDeletedBy()
	return rhu
}

// SetTags sets the "tags" field.
func (rhu *RiskHistoryUpdate) SetTags(s []string) *RiskHistoryUpdate {
	rhu.mutation.SetTags(s)
	return rhu
}

// AppendTags appends s to the "tags" field.
func (rhu *RiskHistoryUpdate) AppendTags(s []string) *RiskHistoryUpdate {
	rhu.mutation.AppendTags(s)
	return rhu
}

// ClearTags clears the value of the "tags" field.
func (rhu *RiskHistoryUpdate) ClearTags() *RiskHistoryUpdate {
	rhu.mutation.ClearTags()
	return rhu
}

// SetName sets the "name" field.
func (rhu *RiskHistoryUpdate) SetName(s string) *RiskHistoryUpdate {
	rhu.mutation.SetName(s)
	return rhu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableName(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetName(*s)
	}
	return rhu
}

// SetDescription sets the "description" field.
func (rhu *RiskHistoryUpdate) SetDescription(s string) *RiskHistoryUpdate {
	rhu.mutation.SetDescription(s)
	return rhu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableDescription(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetDescription(*s)
	}
	return rhu
}

// ClearDescription clears the value of the "description" field.
func (rhu *RiskHistoryUpdate) ClearDescription() *RiskHistoryUpdate {
	rhu.mutation.ClearDescription()
	return rhu
}

// SetStatus sets the "status" field.
func (rhu *RiskHistoryUpdate) SetStatus(s string) *RiskHistoryUpdate {
	rhu.mutation.SetStatus(s)
	return rhu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableStatus(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetStatus(*s)
	}
	return rhu
}

// ClearStatus clears the value of the "status" field.
func (rhu *RiskHistoryUpdate) ClearStatus() *RiskHistoryUpdate {
	rhu.mutation.ClearStatus()
	return rhu
}

// SetRiskType sets the "risk_type" field.
func (rhu *RiskHistoryUpdate) SetRiskType(s string) *RiskHistoryUpdate {
	rhu.mutation.SetRiskType(s)
	return rhu
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableRiskType(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetRiskType(*s)
	}
	return rhu
}

// ClearRiskType clears the value of the "risk_type" field.
func (rhu *RiskHistoryUpdate) ClearRiskType() *RiskHistoryUpdate {
	rhu.mutation.ClearRiskType()
	return rhu
}

// SetBusinessCosts sets the "business_costs" field.
func (rhu *RiskHistoryUpdate) SetBusinessCosts(s string) *RiskHistoryUpdate {
	rhu.mutation.SetBusinessCosts(s)
	return rhu
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableBusinessCosts(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetBusinessCosts(*s)
	}
	return rhu
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (rhu *RiskHistoryUpdate) ClearBusinessCosts() *RiskHistoryUpdate {
	rhu.mutation.ClearBusinessCosts()
	return rhu
}

// SetImpact sets the "impact" field.
func (rhu *RiskHistoryUpdate) SetImpact(ei enums.RiskImpact) *RiskHistoryUpdate {
	rhu.mutation.SetImpact(ei)
	return rhu
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableImpact(ei *enums.RiskImpact) *RiskHistoryUpdate {
	if ei != nil {
		rhu.SetImpact(*ei)
	}
	return rhu
}

// ClearImpact clears the value of the "impact" field.
func (rhu *RiskHistoryUpdate) ClearImpact() *RiskHistoryUpdate {
	rhu.mutation.ClearImpact()
	return rhu
}

// SetLikelihood sets the "likelihood" field.
func (rhu *RiskHistoryUpdate) SetLikelihood(el enums.RiskLikelihood) *RiskHistoryUpdate {
	rhu.mutation.SetLikelihood(el)
	return rhu
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableLikelihood(el *enums.RiskLikelihood) *RiskHistoryUpdate {
	if el != nil {
		rhu.SetLikelihood(*el)
	}
	return rhu
}

// ClearLikelihood clears the value of the "likelihood" field.
func (rhu *RiskHistoryUpdate) ClearLikelihood() *RiskHistoryUpdate {
	rhu.mutation.ClearLikelihood()
	return rhu
}

// SetMitigation sets the "mitigation" field.
func (rhu *RiskHistoryUpdate) SetMitigation(s string) *RiskHistoryUpdate {
	rhu.mutation.SetMitigation(s)
	return rhu
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableMitigation(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetMitigation(*s)
	}
	return rhu
}

// ClearMitigation clears the value of the "mitigation" field.
func (rhu *RiskHistoryUpdate) ClearMitigation() *RiskHistoryUpdate {
	rhu.mutation.ClearMitigation()
	return rhu
}

// SetSatisfies sets the "satisfies" field.
func (rhu *RiskHistoryUpdate) SetSatisfies(s string) *RiskHistoryUpdate {
	rhu.mutation.SetSatisfies(s)
	return rhu
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (rhu *RiskHistoryUpdate) SetNillableSatisfies(s *string) *RiskHistoryUpdate {
	if s != nil {
		rhu.SetSatisfies(*s)
	}
	return rhu
}

// ClearSatisfies clears the value of the "satisfies" field.
func (rhu *RiskHistoryUpdate) ClearSatisfies() *RiskHistoryUpdate {
	rhu.mutation.ClearSatisfies()
	return rhu
}

// SetDetails sets the "details" field.
func (rhu *RiskHistoryUpdate) SetDetails(m map[string]interface{}) *RiskHistoryUpdate {
	rhu.mutation.SetDetails(m)
	return rhu
}

// ClearDetails clears the value of the "details" field.
func (rhu *RiskHistoryUpdate) ClearDetails() *RiskHistoryUpdate {
	rhu.mutation.ClearDetails()
	return rhu
}

// Mutation returns the RiskHistoryMutation object of the builder.
func (rhu *RiskHistoryUpdate) Mutation() *RiskHistoryMutation {
	return rhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rhu *RiskHistoryUpdate) Save(ctx context.Context) (int, error) {
	rhu.defaults()
	return withHooks(ctx, rhu.sqlSave, rhu.mutation, rhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rhu *RiskHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := rhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rhu *RiskHistoryUpdate) Exec(ctx context.Context) error {
	_, err := rhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhu *RiskHistoryUpdate) ExecX(ctx context.Context) {
	if err := rhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rhu *RiskHistoryUpdate) defaults() {
	if _, ok := rhu.mutation.UpdatedAt(); !ok && !rhu.mutation.UpdatedAtCleared() {
		v := riskhistory.UpdateDefaultUpdatedAt()
		rhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rhu *RiskHistoryUpdate) check() error {
	if v, ok := rhu.mutation.Impact(); ok {
		if err := riskhistory.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.impact": %w`, err)}
		}
	}
	if v, ok := rhu.mutation.Likelihood(); ok {
		if err := riskhistory.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rhu *RiskHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskHistoryUpdate {
	rhu.modifiers = append(rhu.modifiers, modifiers...)
	return rhu
}

func (rhu *RiskHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(riskhistory.Table, riskhistory.Columns, sqlgraph.NewFieldSpec(riskhistory.FieldID, field.TypeString))
	if ps := rhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rhu.mutation.RefCleared() {
		_spec.ClearField(riskhistory.FieldRef, field.TypeString)
	}
	if rhu.mutation.CreatedAtCleared() {
		_spec.ClearField(riskhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rhu.mutation.UpdatedAt(); ok {
		_spec.SetField(riskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if rhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(riskhistory.FieldUpdatedAt, field.TypeTime)
	}
	if rhu.mutation.CreatedByCleared() {
		_spec.ClearField(riskhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := rhu.mutation.UpdatedBy(); ok {
		_spec.SetField(riskhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if rhu.mutation.UpdatedByCleared() {
		_spec.ClearField(riskhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rhu.mutation.DeletedAt(); ok {
		_spec.SetField(riskhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if rhu.mutation.DeletedAtCleared() {
		_spec.ClearField(riskhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rhu.mutation.DeletedBy(); ok {
		_spec.SetField(riskhistory.FieldDeletedBy, field.TypeString, value)
	}
	if rhu.mutation.DeletedByCleared() {
		_spec.ClearField(riskhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := rhu.mutation.Tags(); ok {
		_spec.SetField(riskhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := rhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, riskhistory.FieldTags, value)
		})
	}
	if rhu.mutation.TagsCleared() {
		_spec.ClearField(riskhistory.FieldTags, field.TypeJSON)
	}
	if rhu.mutation.OwnerIDCleared() {
		_spec.ClearField(riskhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := rhu.mutation.Name(); ok {
		_spec.SetField(riskhistory.FieldName, field.TypeString, value)
	}
	if value, ok := rhu.mutation.Description(); ok {
		_spec.SetField(riskhistory.FieldDescription, field.TypeString, value)
	}
	if rhu.mutation.DescriptionCleared() {
		_spec.ClearField(riskhistory.FieldDescription, field.TypeString)
	}
	if value, ok := rhu.mutation.Status(); ok {
		_spec.SetField(riskhistory.FieldStatus, field.TypeString, value)
	}
	if rhu.mutation.StatusCleared() {
		_spec.ClearField(riskhistory.FieldStatus, field.TypeString)
	}
	if value, ok := rhu.mutation.RiskType(); ok {
		_spec.SetField(riskhistory.FieldRiskType, field.TypeString, value)
	}
	if rhu.mutation.RiskTypeCleared() {
		_spec.ClearField(riskhistory.FieldRiskType, field.TypeString)
	}
	if value, ok := rhu.mutation.BusinessCosts(); ok {
		_spec.SetField(riskhistory.FieldBusinessCosts, field.TypeString, value)
	}
	if rhu.mutation.BusinessCostsCleared() {
		_spec.ClearField(riskhistory.FieldBusinessCosts, field.TypeString)
	}
	if value, ok := rhu.mutation.Impact(); ok {
		_spec.SetField(riskhistory.FieldImpact, field.TypeEnum, value)
	}
	if rhu.mutation.ImpactCleared() {
		_spec.ClearField(riskhistory.FieldImpact, field.TypeEnum)
	}
	if value, ok := rhu.mutation.Likelihood(); ok {
		_spec.SetField(riskhistory.FieldLikelihood, field.TypeEnum, value)
	}
	if rhu.mutation.LikelihoodCleared() {
		_spec.ClearField(riskhistory.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := rhu.mutation.Mitigation(); ok {
		_spec.SetField(riskhistory.FieldMitigation, field.TypeString, value)
	}
	if rhu.mutation.MitigationCleared() {
		_spec.ClearField(riskhistory.FieldMitigation, field.TypeString)
	}
	if value, ok := rhu.mutation.Satisfies(); ok {
		_spec.SetField(riskhistory.FieldSatisfies, field.TypeString, value)
	}
	if rhu.mutation.SatisfiesCleared() {
		_spec.ClearField(riskhistory.FieldSatisfies, field.TypeString)
	}
	if value, ok := rhu.mutation.Details(); ok {
		_spec.SetField(riskhistory.FieldDetails, field.TypeJSON, value)
	}
	if rhu.mutation.DetailsCleared() {
		_spec.ClearField(riskhistory.FieldDetails, field.TypeJSON)
	}
	_spec.Node.Schema = rhu.schemaConfig.RiskHistory
	ctx = internal.NewSchemaConfigContext(ctx, rhu.schemaConfig)
	_spec.AddModifiers(rhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rhu.mutation.done = true
	return n, nil
}

// RiskHistoryUpdateOne is the builder for updating a single RiskHistory entity.
type RiskHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RiskHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (rhuo *RiskHistoryUpdateOne) SetUpdatedAt(t time.Time) *RiskHistoryUpdateOne {
	rhuo.mutation.SetUpdatedAt(t)
	return rhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rhuo *RiskHistoryUpdateOne) ClearUpdatedAt() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearUpdatedAt()
	return rhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (rhuo *RiskHistoryUpdateOne) SetUpdatedBy(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetUpdatedBy(s)
	return rhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableUpdatedBy(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetUpdatedBy(*s)
	}
	return rhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (rhuo *RiskHistoryUpdateOne) ClearUpdatedBy() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearUpdatedBy()
	return rhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rhuo *RiskHistoryUpdateOne) SetDeletedAt(t time.Time) *RiskHistoryUpdateOne {
	rhuo.mutation.SetDeletedAt(t)
	return rhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *RiskHistoryUpdateOne {
	if t != nil {
		rhuo.SetDeletedAt(*t)
	}
	return rhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rhuo *RiskHistoryUpdateOne) ClearDeletedAt() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearDeletedAt()
	return rhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (rhuo *RiskHistoryUpdateOne) SetDeletedBy(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetDeletedBy(s)
	return rhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableDeletedBy(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetDeletedBy(*s)
	}
	return rhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (rhuo *RiskHistoryUpdateOne) ClearDeletedBy() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearDeletedBy()
	return rhuo
}

// SetTags sets the "tags" field.
func (rhuo *RiskHistoryUpdateOne) SetTags(s []string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetTags(s)
	return rhuo
}

// AppendTags appends s to the "tags" field.
func (rhuo *RiskHistoryUpdateOne) AppendTags(s []string) *RiskHistoryUpdateOne {
	rhuo.mutation.AppendTags(s)
	return rhuo
}

// ClearTags clears the value of the "tags" field.
func (rhuo *RiskHistoryUpdateOne) ClearTags() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearTags()
	return rhuo
}

// SetName sets the "name" field.
func (rhuo *RiskHistoryUpdateOne) SetName(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetName(s)
	return rhuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableName(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetName(*s)
	}
	return rhuo
}

// SetDescription sets the "description" field.
func (rhuo *RiskHistoryUpdateOne) SetDescription(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetDescription(s)
	return rhuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableDescription(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetDescription(*s)
	}
	return rhuo
}

// ClearDescription clears the value of the "description" field.
func (rhuo *RiskHistoryUpdateOne) ClearDescription() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearDescription()
	return rhuo
}

// SetStatus sets the "status" field.
func (rhuo *RiskHistoryUpdateOne) SetStatus(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetStatus(s)
	return rhuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableStatus(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetStatus(*s)
	}
	return rhuo
}

// ClearStatus clears the value of the "status" field.
func (rhuo *RiskHistoryUpdateOne) ClearStatus() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearStatus()
	return rhuo
}

// SetRiskType sets the "risk_type" field.
func (rhuo *RiskHistoryUpdateOne) SetRiskType(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetRiskType(s)
	return rhuo
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableRiskType(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetRiskType(*s)
	}
	return rhuo
}

// ClearRiskType clears the value of the "risk_type" field.
func (rhuo *RiskHistoryUpdateOne) ClearRiskType() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearRiskType()
	return rhuo
}

// SetBusinessCosts sets the "business_costs" field.
func (rhuo *RiskHistoryUpdateOne) SetBusinessCosts(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetBusinessCosts(s)
	return rhuo
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableBusinessCosts(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetBusinessCosts(*s)
	}
	return rhuo
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (rhuo *RiskHistoryUpdateOne) ClearBusinessCosts() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearBusinessCosts()
	return rhuo
}

// SetImpact sets the "impact" field.
func (rhuo *RiskHistoryUpdateOne) SetImpact(ei enums.RiskImpact) *RiskHistoryUpdateOne {
	rhuo.mutation.SetImpact(ei)
	return rhuo
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableImpact(ei *enums.RiskImpact) *RiskHistoryUpdateOne {
	if ei != nil {
		rhuo.SetImpact(*ei)
	}
	return rhuo
}

// ClearImpact clears the value of the "impact" field.
func (rhuo *RiskHistoryUpdateOne) ClearImpact() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearImpact()
	return rhuo
}

// SetLikelihood sets the "likelihood" field.
func (rhuo *RiskHistoryUpdateOne) SetLikelihood(el enums.RiskLikelihood) *RiskHistoryUpdateOne {
	rhuo.mutation.SetLikelihood(el)
	return rhuo
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableLikelihood(el *enums.RiskLikelihood) *RiskHistoryUpdateOne {
	if el != nil {
		rhuo.SetLikelihood(*el)
	}
	return rhuo
}

// ClearLikelihood clears the value of the "likelihood" field.
func (rhuo *RiskHistoryUpdateOne) ClearLikelihood() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearLikelihood()
	return rhuo
}

// SetMitigation sets the "mitigation" field.
func (rhuo *RiskHistoryUpdateOne) SetMitigation(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetMitigation(s)
	return rhuo
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableMitigation(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetMitigation(*s)
	}
	return rhuo
}

// ClearMitigation clears the value of the "mitigation" field.
func (rhuo *RiskHistoryUpdateOne) ClearMitigation() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearMitigation()
	return rhuo
}

// SetSatisfies sets the "satisfies" field.
func (rhuo *RiskHistoryUpdateOne) SetSatisfies(s string) *RiskHistoryUpdateOne {
	rhuo.mutation.SetSatisfies(s)
	return rhuo
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (rhuo *RiskHistoryUpdateOne) SetNillableSatisfies(s *string) *RiskHistoryUpdateOne {
	if s != nil {
		rhuo.SetSatisfies(*s)
	}
	return rhuo
}

// ClearSatisfies clears the value of the "satisfies" field.
func (rhuo *RiskHistoryUpdateOne) ClearSatisfies() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearSatisfies()
	return rhuo
}

// SetDetails sets the "details" field.
func (rhuo *RiskHistoryUpdateOne) SetDetails(m map[string]interface{}) *RiskHistoryUpdateOne {
	rhuo.mutation.SetDetails(m)
	return rhuo
}

// ClearDetails clears the value of the "details" field.
func (rhuo *RiskHistoryUpdateOne) ClearDetails() *RiskHistoryUpdateOne {
	rhuo.mutation.ClearDetails()
	return rhuo
}

// Mutation returns the RiskHistoryMutation object of the builder.
func (rhuo *RiskHistoryUpdateOne) Mutation() *RiskHistoryMutation {
	return rhuo.mutation
}

// Where appends a list predicates to the RiskHistoryUpdate builder.
func (rhuo *RiskHistoryUpdateOne) Where(ps ...predicate.RiskHistory) *RiskHistoryUpdateOne {
	rhuo.mutation.Where(ps...)
	return rhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rhuo *RiskHistoryUpdateOne) Select(field string, fields ...string) *RiskHistoryUpdateOne {
	rhuo.fields = append([]string{field}, fields...)
	return rhuo
}

// Save executes the query and returns the updated RiskHistory entity.
func (rhuo *RiskHistoryUpdateOne) Save(ctx context.Context) (*RiskHistory, error) {
	rhuo.defaults()
	return withHooks(ctx, rhuo.sqlSave, rhuo.mutation, rhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rhuo *RiskHistoryUpdateOne) SaveX(ctx context.Context) *RiskHistory {
	node, err := rhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rhuo *RiskHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := rhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhuo *RiskHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := rhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rhuo *RiskHistoryUpdateOne) defaults() {
	if _, ok := rhuo.mutation.UpdatedAt(); !ok && !rhuo.mutation.UpdatedAtCleared() {
		v := riskhistory.UpdateDefaultUpdatedAt()
		rhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rhuo *RiskHistoryUpdateOne) check() error {
	if v, ok := rhuo.mutation.Impact(); ok {
		if err := riskhistory.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.impact": %w`, err)}
		}
	}
	if v, ok := rhuo.mutation.Likelihood(); ok {
		if err := riskhistory.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rhuo *RiskHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskHistoryUpdateOne {
	rhuo.modifiers = append(rhuo.modifiers, modifiers...)
	return rhuo
}

func (rhuo *RiskHistoryUpdateOne) sqlSave(ctx context.Context) (_node *RiskHistory, err error) {
	if err := rhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(riskhistory.Table, riskhistory.Columns, sqlgraph.NewFieldSpec(riskhistory.FieldID, field.TypeString))
	id, ok := rhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "RiskHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, riskhistory.FieldID)
		for _, f := range fields {
			if !riskhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != riskhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rhuo.mutation.RefCleared() {
		_spec.ClearField(riskhistory.FieldRef, field.TypeString)
	}
	if rhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(riskhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := rhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(riskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if rhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(riskhistory.FieldUpdatedAt, field.TypeTime)
	}
	if rhuo.mutation.CreatedByCleared() {
		_spec.ClearField(riskhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := rhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(riskhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if rhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(riskhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rhuo.mutation.DeletedAt(); ok {
		_spec.SetField(riskhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if rhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(riskhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rhuo.mutation.DeletedBy(); ok {
		_spec.SetField(riskhistory.FieldDeletedBy, field.TypeString, value)
	}
	if rhuo.mutation.DeletedByCleared() {
		_spec.ClearField(riskhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := rhuo.mutation.Tags(); ok {
		_spec.SetField(riskhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := rhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, riskhistory.FieldTags, value)
		})
	}
	if rhuo.mutation.TagsCleared() {
		_spec.ClearField(riskhistory.FieldTags, field.TypeJSON)
	}
	if rhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(riskhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := rhuo.mutation.Name(); ok {
		_spec.SetField(riskhistory.FieldName, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.Description(); ok {
		_spec.SetField(riskhistory.FieldDescription, field.TypeString, value)
	}
	if rhuo.mutation.DescriptionCleared() {
		_spec.ClearField(riskhistory.FieldDescription, field.TypeString)
	}
	if value, ok := rhuo.mutation.Status(); ok {
		_spec.SetField(riskhistory.FieldStatus, field.TypeString, value)
	}
	if rhuo.mutation.StatusCleared() {
		_spec.ClearField(riskhistory.FieldStatus, field.TypeString)
	}
	if value, ok := rhuo.mutation.RiskType(); ok {
		_spec.SetField(riskhistory.FieldRiskType, field.TypeString, value)
	}
	if rhuo.mutation.RiskTypeCleared() {
		_spec.ClearField(riskhistory.FieldRiskType, field.TypeString)
	}
	if value, ok := rhuo.mutation.BusinessCosts(); ok {
		_spec.SetField(riskhistory.FieldBusinessCosts, field.TypeString, value)
	}
	if rhuo.mutation.BusinessCostsCleared() {
		_spec.ClearField(riskhistory.FieldBusinessCosts, field.TypeString)
	}
	if value, ok := rhuo.mutation.Impact(); ok {
		_spec.SetField(riskhistory.FieldImpact, field.TypeEnum, value)
	}
	if rhuo.mutation.ImpactCleared() {
		_spec.ClearField(riskhistory.FieldImpact, field.TypeEnum)
	}
	if value, ok := rhuo.mutation.Likelihood(); ok {
		_spec.SetField(riskhistory.FieldLikelihood, field.TypeEnum, value)
	}
	if rhuo.mutation.LikelihoodCleared() {
		_spec.ClearField(riskhistory.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := rhuo.mutation.Mitigation(); ok {
		_spec.SetField(riskhistory.FieldMitigation, field.TypeString, value)
	}
	if rhuo.mutation.MitigationCleared() {
		_spec.ClearField(riskhistory.FieldMitigation, field.TypeString)
	}
	if value, ok := rhuo.mutation.Satisfies(); ok {
		_spec.SetField(riskhistory.FieldSatisfies, field.TypeString, value)
	}
	if rhuo.mutation.SatisfiesCleared() {
		_spec.ClearField(riskhistory.FieldSatisfies, field.TypeString)
	}
	if value, ok := rhuo.mutation.Details(); ok {
		_spec.SetField(riskhistory.FieldDetails, field.TypeJSON, value)
	}
	if rhuo.mutation.DetailsCleared() {
		_spec.ClearField(riskhistory.FieldDetails, field.TypeJSON)
	}
	_spec.Node.Schema = rhuo.schemaConfig.RiskHistory
	ctx = internal.NewSchemaConfigContext(ctx, rhuo.schemaConfig)
	_spec.AddModifiers(rhuo.modifiers...)
	_node = &RiskHistory{config: rhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rhuo.mutation.done = true
	return _node, nil
}
