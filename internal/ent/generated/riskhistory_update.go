// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// RiskHistoryUpdate is the builder for updating RiskHistory entities.
type RiskHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *RiskHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RiskHistoryUpdate builder.
func (_u *RiskHistoryUpdate) Where(ps ...predicate.RiskHistory) *RiskHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RiskHistoryUpdate) SetUpdatedAt(v time.Time) *RiskHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RiskHistoryUpdate) ClearUpdatedAt() *RiskHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RiskHistoryUpdate) SetUpdatedBy(v string) *RiskHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableUpdatedBy(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RiskHistoryUpdate) ClearUpdatedBy() *RiskHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RiskHistoryUpdate) SetDeletedAt(v time.Time) *RiskHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableDeletedAt(v *time.Time) *RiskHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RiskHistoryUpdate) ClearDeletedAt() *RiskHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RiskHistoryUpdate) SetDeletedBy(v string) *RiskHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableDeletedBy(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RiskHistoryUpdate) ClearDeletedBy() *RiskHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *RiskHistoryUpdate) SetTags(v []string) *RiskHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *RiskHistoryUpdate) AppendTags(v []string) *RiskHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *RiskHistoryUpdate) ClearTags() *RiskHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *RiskHistoryUpdate) SetName(v string) *RiskHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableName(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *RiskHistoryUpdate) SetStatus(v enums.RiskStatus) *RiskHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableStatus(v *enums.RiskStatus) *RiskHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *RiskHistoryUpdate) ClearStatus() *RiskHistoryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetRiskType sets the "risk_type" field.
func (_u *RiskHistoryUpdate) SetRiskType(v string) *RiskHistoryUpdate {
	_u.mutation.SetRiskType(v)
	return _u
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableRiskType(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetRiskType(*v)
	}
	return _u
}

// ClearRiskType clears the value of the "risk_type" field.
func (_u *RiskHistoryUpdate) ClearRiskType() *RiskHistoryUpdate {
	_u.mutation.ClearRiskType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *RiskHistoryUpdate) SetCategory(v string) *RiskHistoryUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableCategory(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *RiskHistoryUpdate) ClearCategory() *RiskHistoryUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetImpact sets the "impact" field.
func (_u *RiskHistoryUpdate) SetImpact(v enums.RiskImpact) *RiskHistoryUpdate {
	_u.mutation.SetImpact(v)
	return _u
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableImpact(v *enums.RiskImpact) *RiskHistoryUpdate {
	if v != nil {
		_u.SetImpact(*v)
	}
	return _u
}

// ClearImpact clears the value of the "impact" field.
func (_u *RiskHistoryUpdate) ClearImpact() *RiskHistoryUpdate {
	_u.mutation.ClearImpact()
	return _u
}

// SetLikelihood sets the "likelihood" field.
func (_u *RiskHistoryUpdate) SetLikelihood(v enums.RiskLikelihood) *RiskHistoryUpdate {
	_u.mutation.SetLikelihood(v)
	return _u
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableLikelihood(v *enums.RiskLikelihood) *RiskHistoryUpdate {
	if v != nil {
		_u.SetLikelihood(*v)
	}
	return _u
}

// ClearLikelihood clears the value of the "likelihood" field.
func (_u *RiskHistoryUpdate) ClearLikelihood() *RiskHistoryUpdate {
	_u.mutation.ClearLikelihood()
	return _u
}

// SetScore sets the "score" field.
func (_u *RiskHistoryUpdate) SetScore(v int) *RiskHistoryUpdate {
	_u.mutation.ResetScore()
	_u.mutation.SetScore(v)
	return _u
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableScore(v *int) *RiskHistoryUpdate {
	if v != nil {
		_u.SetScore(*v)
	}
	return _u
}

// AddScore adds value to the "score" field.
func (_u *RiskHistoryUpdate) AddScore(v int) *RiskHistoryUpdate {
	_u.mutation.AddScore(v)
	return _u
}

// ClearScore clears the value of the "score" field.
func (_u *RiskHistoryUpdate) ClearScore() *RiskHistoryUpdate {
	_u.mutation.ClearScore()
	return _u
}

// SetMitigation sets the "mitigation" field.
func (_u *RiskHistoryUpdate) SetMitigation(v string) *RiskHistoryUpdate {
	_u.mutation.SetMitigation(v)
	return _u
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableMitigation(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetMitigation(*v)
	}
	return _u
}

// ClearMitigation clears the value of the "mitigation" field.
func (_u *RiskHistoryUpdate) ClearMitigation() *RiskHistoryUpdate {
	_u.mutation.ClearMitigation()
	return _u
}

// SetDetails sets the "details" field.
func (_u *RiskHistoryUpdate) SetDetails(v string) *RiskHistoryUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableDetails(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *RiskHistoryUpdate) ClearDetails() *RiskHistoryUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetBusinessCosts sets the "business_costs" field.
func (_u *RiskHistoryUpdate) SetBusinessCosts(v string) *RiskHistoryUpdate {
	_u.mutation.SetBusinessCosts(v)
	return _u
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableBusinessCosts(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetBusinessCosts(*v)
	}
	return _u
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (_u *RiskHistoryUpdate) ClearBusinessCosts() *RiskHistoryUpdate {
	_u.mutation.ClearBusinessCosts()
	return _u
}

// SetStakeholderID sets the "stakeholder_id" field.
func (_u *RiskHistoryUpdate) SetStakeholderID(v string) *RiskHistoryUpdate {
	_u.mutation.SetStakeholderID(v)
	return _u
}

// SetNillableStakeholderID sets the "stakeholder_id" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableStakeholderID(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetStakeholderID(*v)
	}
	return _u
}

// ClearStakeholderID clears the value of the "stakeholder_id" field.
func (_u *RiskHistoryUpdate) ClearStakeholderID() *RiskHistoryUpdate {
	_u.mutation.ClearStakeholderID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *RiskHistoryUpdate) SetDelegateID(v string) *RiskHistoryUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *RiskHistoryUpdate) SetNillableDelegateID(v *string) *RiskHistoryUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *RiskHistoryUpdate) ClearDelegateID() *RiskHistoryUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// Mutation returns the RiskHistoryMutation object of the builder.
func (_u *RiskHistoryUpdate) Mutation() *RiskHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RiskHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RiskHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RiskHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RiskHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RiskHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if riskhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized riskhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := riskhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *RiskHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := riskhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Impact(); ok {
		if err := riskhistory.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.impact": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Likelihood(); ok {
		if err := riskhistory.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RiskHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RiskHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(riskhistory.Table, riskhistory.Columns, sqlgraph.NewFieldSpec(riskhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(riskhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(riskhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(riskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(riskhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(riskhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(riskhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(riskhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(riskhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(riskhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(riskhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(riskhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(riskhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, riskhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(riskhistory.FieldTags, field.TypeJSON)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(riskhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(riskhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(riskhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(riskhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.RiskType(); ok {
		_spec.SetField(riskhistory.FieldRiskType, field.TypeString, value)
	}
	if _u.mutation.RiskTypeCleared() {
		_spec.ClearField(riskhistory.FieldRiskType, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(riskhistory.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(riskhistory.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Impact(); ok {
		_spec.SetField(riskhistory.FieldImpact, field.TypeEnum, value)
	}
	if _u.mutation.ImpactCleared() {
		_spec.ClearField(riskhistory.FieldImpact, field.TypeEnum)
	}
	if value, ok := _u.mutation.Likelihood(); ok {
		_spec.SetField(riskhistory.FieldLikelihood, field.TypeEnum, value)
	}
	if _u.mutation.LikelihoodCleared() {
		_spec.ClearField(riskhistory.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := _u.mutation.Score(); ok {
		_spec.SetField(riskhistory.FieldScore, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedScore(); ok {
		_spec.AddField(riskhistory.FieldScore, field.TypeInt, value)
	}
	if _u.mutation.ScoreCleared() {
		_spec.ClearField(riskhistory.FieldScore, field.TypeInt)
	}
	if value, ok := _u.mutation.Mitigation(); ok {
		_spec.SetField(riskhistory.FieldMitigation, field.TypeString, value)
	}
	if _u.mutation.MitigationCleared() {
		_spec.ClearField(riskhistory.FieldMitigation, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(riskhistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(riskhistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.BusinessCosts(); ok {
		_spec.SetField(riskhistory.FieldBusinessCosts, field.TypeString, value)
	}
	if _u.mutation.BusinessCostsCleared() {
		_spec.ClearField(riskhistory.FieldBusinessCosts, field.TypeString)
	}
	if value, ok := _u.mutation.StakeholderID(); ok {
		_spec.SetField(riskhistory.FieldStakeholderID, field.TypeString, value)
	}
	if _u.mutation.StakeholderIDCleared() {
		_spec.ClearField(riskhistory.FieldStakeholderID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(riskhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(riskhistory.FieldDelegateID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.RiskHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RiskHistoryUpdateOne is the builder for updating a single RiskHistory entity.
type RiskHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RiskHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RiskHistoryUpdateOne) SetUpdatedAt(v time.Time) *RiskHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RiskHistoryUpdateOne) ClearUpdatedAt() *RiskHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RiskHistoryUpdateOne) SetUpdatedBy(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableUpdatedBy(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RiskHistoryUpdateOne) ClearUpdatedBy() *RiskHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RiskHistoryUpdateOne) SetDeletedAt(v time.Time) *RiskHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RiskHistoryUpdateOne) ClearDeletedAt() *RiskHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RiskHistoryUpdateOne) SetDeletedBy(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableDeletedBy(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RiskHistoryUpdateOne) ClearDeletedBy() *RiskHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *RiskHistoryUpdateOne) SetTags(v []string) *RiskHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *RiskHistoryUpdateOne) AppendTags(v []string) *RiskHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *RiskHistoryUpdateOne) ClearTags() *RiskHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *RiskHistoryUpdateOne) SetName(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableName(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *RiskHistoryUpdateOne) SetStatus(v enums.RiskStatus) *RiskHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableStatus(v *enums.RiskStatus) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *RiskHistoryUpdateOne) ClearStatus() *RiskHistoryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetRiskType sets the "risk_type" field.
func (_u *RiskHistoryUpdateOne) SetRiskType(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetRiskType(v)
	return _u
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableRiskType(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetRiskType(*v)
	}
	return _u
}

// ClearRiskType clears the value of the "risk_type" field.
func (_u *RiskHistoryUpdateOne) ClearRiskType() *RiskHistoryUpdateOne {
	_u.mutation.ClearRiskType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *RiskHistoryUpdateOne) SetCategory(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableCategory(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *RiskHistoryUpdateOne) ClearCategory() *RiskHistoryUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetImpact sets the "impact" field.
func (_u *RiskHistoryUpdateOne) SetImpact(v enums.RiskImpact) *RiskHistoryUpdateOne {
	_u.mutation.SetImpact(v)
	return _u
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableImpact(v *enums.RiskImpact) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetImpact(*v)
	}
	return _u
}

// ClearImpact clears the value of the "impact" field.
func (_u *RiskHistoryUpdateOne) ClearImpact() *RiskHistoryUpdateOne {
	_u.mutation.ClearImpact()
	return _u
}

// SetLikelihood sets the "likelihood" field.
func (_u *RiskHistoryUpdateOne) SetLikelihood(v enums.RiskLikelihood) *RiskHistoryUpdateOne {
	_u.mutation.SetLikelihood(v)
	return _u
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableLikelihood(v *enums.RiskLikelihood) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetLikelihood(*v)
	}
	return _u
}

// ClearLikelihood clears the value of the "likelihood" field.
func (_u *RiskHistoryUpdateOne) ClearLikelihood() *RiskHistoryUpdateOne {
	_u.mutation.ClearLikelihood()
	return _u
}

// SetScore sets the "score" field.
func (_u *RiskHistoryUpdateOne) SetScore(v int) *RiskHistoryUpdateOne {
	_u.mutation.ResetScore()
	_u.mutation.SetScore(v)
	return _u
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableScore(v *int) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetScore(*v)
	}
	return _u
}

// AddScore adds value to the "score" field.
func (_u *RiskHistoryUpdateOne) AddScore(v int) *RiskHistoryUpdateOne {
	_u.mutation.AddScore(v)
	return _u
}

// ClearScore clears the value of the "score" field.
func (_u *RiskHistoryUpdateOne) ClearScore() *RiskHistoryUpdateOne {
	_u.mutation.ClearScore()
	return _u
}

// SetMitigation sets the "mitigation" field.
func (_u *RiskHistoryUpdateOne) SetMitigation(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetMitigation(v)
	return _u
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableMitigation(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetMitigation(*v)
	}
	return _u
}

// ClearMitigation clears the value of the "mitigation" field.
func (_u *RiskHistoryUpdateOne) ClearMitigation() *RiskHistoryUpdateOne {
	_u.mutation.ClearMitigation()
	return _u
}

// SetDetails sets the "details" field.
func (_u *RiskHistoryUpdateOne) SetDetails(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableDetails(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *RiskHistoryUpdateOne) ClearDetails() *RiskHistoryUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetBusinessCosts sets the "business_costs" field.
func (_u *RiskHistoryUpdateOne) SetBusinessCosts(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetBusinessCosts(v)
	return _u
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableBusinessCosts(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetBusinessCosts(*v)
	}
	return _u
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (_u *RiskHistoryUpdateOne) ClearBusinessCosts() *RiskHistoryUpdateOne {
	_u.mutation.ClearBusinessCosts()
	return _u
}

// SetStakeholderID sets the "stakeholder_id" field.
func (_u *RiskHistoryUpdateOne) SetStakeholderID(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetStakeholderID(v)
	return _u
}

// SetNillableStakeholderID sets the "stakeholder_id" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableStakeholderID(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetStakeholderID(*v)
	}
	return _u
}

// ClearStakeholderID clears the value of the "stakeholder_id" field.
func (_u *RiskHistoryUpdateOne) ClearStakeholderID() *RiskHistoryUpdateOne {
	_u.mutation.ClearStakeholderID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *RiskHistoryUpdateOne) SetDelegateID(v string) *RiskHistoryUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *RiskHistoryUpdateOne) SetNillableDelegateID(v *string) *RiskHistoryUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *RiskHistoryUpdateOne) ClearDelegateID() *RiskHistoryUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// Mutation returns the RiskHistoryMutation object of the builder.
func (_u *RiskHistoryUpdateOne) Mutation() *RiskHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the RiskHistoryUpdate builder.
func (_u *RiskHistoryUpdateOne) Where(ps ...predicate.RiskHistory) *RiskHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RiskHistoryUpdateOne) Select(field string, fields ...string) *RiskHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RiskHistory entity.
func (_u *RiskHistoryUpdateOne) Save(ctx context.Context) (*RiskHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RiskHistoryUpdateOne) SaveX(ctx context.Context) *RiskHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RiskHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RiskHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RiskHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if riskhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized riskhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := riskhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *RiskHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := riskhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Impact(); ok {
		if err := riskhistory.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.impact": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Likelihood(); ok {
		if err := riskhistory.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "RiskHistory.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RiskHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RiskHistoryUpdateOne) sqlSave(ctx context.Context) (_node *RiskHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(riskhistory.Table, riskhistory.Columns, sqlgraph.NewFieldSpec(riskhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "RiskHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, riskhistory.FieldID)
		for _, f := range fields {
			if !riskhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != riskhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(riskhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(riskhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(riskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(riskhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(riskhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(riskhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(riskhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(riskhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(riskhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(riskhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(riskhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(riskhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, riskhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(riskhistory.FieldTags, field.TypeJSON)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(riskhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(riskhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(riskhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(riskhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.RiskType(); ok {
		_spec.SetField(riskhistory.FieldRiskType, field.TypeString, value)
	}
	if _u.mutation.RiskTypeCleared() {
		_spec.ClearField(riskhistory.FieldRiskType, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(riskhistory.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(riskhistory.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Impact(); ok {
		_spec.SetField(riskhistory.FieldImpact, field.TypeEnum, value)
	}
	if _u.mutation.ImpactCleared() {
		_spec.ClearField(riskhistory.FieldImpact, field.TypeEnum)
	}
	if value, ok := _u.mutation.Likelihood(); ok {
		_spec.SetField(riskhistory.FieldLikelihood, field.TypeEnum, value)
	}
	if _u.mutation.LikelihoodCleared() {
		_spec.ClearField(riskhistory.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := _u.mutation.Score(); ok {
		_spec.SetField(riskhistory.FieldScore, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedScore(); ok {
		_spec.AddField(riskhistory.FieldScore, field.TypeInt, value)
	}
	if _u.mutation.ScoreCleared() {
		_spec.ClearField(riskhistory.FieldScore, field.TypeInt)
	}
	if value, ok := _u.mutation.Mitigation(); ok {
		_spec.SetField(riskhistory.FieldMitigation, field.TypeString, value)
	}
	if _u.mutation.MitigationCleared() {
		_spec.ClearField(riskhistory.FieldMitigation, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(riskhistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(riskhistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.BusinessCosts(); ok {
		_spec.SetField(riskhistory.FieldBusinessCosts, field.TypeString, value)
	}
	if _u.mutation.BusinessCostsCleared() {
		_spec.ClearField(riskhistory.FieldBusinessCosts, field.TypeString)
	}
	if value, ok := _u.mutation.StakeholderID(); ok {
		_spec.SetField(riskhistory.FieldStakeholderID, field.TypeString, value)
	}
	if _u.mutation.StakeholderIDCleared() {
		_spec.ClearField(riskhistory.FieldStakeholderID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(riskhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(riskhistory.FieldDelegateID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.RiskHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &RiskHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
