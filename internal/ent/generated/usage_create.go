// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/usage"
	"github.com/theopenlane/core/pkg/enums"
)

// UsageCreate is the builder for creating a Usage entity.
type UsageCreate struct {
	config
	mutation *UsageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uc *UsageCreate) SetCreatedAt(t time.Time) *UsageCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UsageCreate) SetNillableCreatedAt(t *time.Time) *UsageCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UsageCreate) SetUpdatedAt(t time.Time) *UsageCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UsageCreate) SetNillableUpdatedAt(t *time.Time) *UsageCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetCreatedBy sets the "created_by" field.
func (uc *UsageCreate) SetCreatedBy(s string) *UsageCreate {
	uc.mutation.SetCreatedBy(s)
	return uc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uc *UsageCreate) SetNillableCreatedBy(s *string) *UsageCreate {
	if s != nil {
		uc.SetCreatedBy(*s)
	}
	return uc
}

// SetUpdatedBy sets the "updated_by" field.
func (uc *UsageCreate) SetUpdatedBy(s string) *UsageCreate {
	uc.mutation.SetUpdatedBy(s)
	return uc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uc *UsageCreate) SetNillableUpdatedBy(s *string) *UsageCreate {
	if s != nil {
		uc.SetUpdatedBy(*s)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UsageCreate) SetDeletedAt(t time.Time) *UsageCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UsageCreate) SetNillableDeletedAt(t *time.Time) *UsageCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetDeletedBy sets the "deleted_by" field.
func (uc *UsageCreate) SetDeletedBy(s string) *UsageCreate {
	uc.mutation.SetDeletedBy(s)
	return uc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uc *UsageCreate) SetNillableDeletedBy(s *string) *UsageCreate {
	if s != nil {
		uc.SetDeletedBy(*s)
	}
	return uc
}

// SetTags sets the "tags" field.
func (uc *UsageCreate) SetTags(s []string) *UsageCreate {
	uc.mutation.SetTags(s)
	return uc
}

// SetOrganizationID sets the "organization_id" field.
func (uc *UsageCreate) SetOrganizationID(s string) *UsageCreate {
	uc.mutation.SetOrganizationID(s)
	return uc
}

// SetResourceType sets the "resource_type" field.
func (uc *UsageCreate) SetResourceType(et enums.UsageType) *UsageCreate {
	uc.mutation.SetResourceType(et)
	return uc
}

// SetUsed sets the "used" field.
func (uc *UsageCreate) SetUsed(i int64) *UsageCreate {
	uc.mutation.SetUsed(i)
	return uc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (uc *UsageCreate) SetNillableUsed(i *int64) *UsageCreate {
	if i != nil {
		uc.SetUsed(*i)
	}
	return uc
}

// SetLimit sets the "limit" field.
func (uc *UsageCreate) SetLimit(i int64) *UsageCreate {
	uc.mutation.SetLimit(i)
	return uc
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uc *UsageCreate) SetNillableLimit(i *int64) *UsageCreate {
	if i != nil {
		uc.SetLimit(*i)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UsageCreate) SetID(s string) *UsageCreate {
	uc.mutation.SetID(s)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UsageCreate) SetNillableID(s *string) *UsageCreate {
	if s != nil {
		uc.SetID(*s)
	}
	return uc
}

// Mutation returns the UsageMutation object of the builder.
func (uc *UsageCreate) Mutation() *UsageMutation {
	return uc.mutation
}

// Save creates the Usage in the database.
func (uc *UsageCreate) Save(ctx context.Context) (*Usage, error) {
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UsageCreate) SaveX(ctx context.Context) *Usage {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UsageCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UsageCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UsageCreate) defaults() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		if usage.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized usage.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := usage.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		if usage.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized usage.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := usage.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Tags(); !ok {
		v := usage.DefaultTags
		uc.mutation.SetTags(v)
	}
	if _, ok := uc.mutation.Used(); !ok {
		v := usage.DefaultUsed
		uc.mutation.SetUsed(v)
	}
	if _, ok := uc.mutation.Limit(); !ok {
		v := usage.DefaultLimit
		uc.mutation.SetLimit(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		if usage.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized usage.DefaultID (forgotten import generated/runtime?)")
		}
		v := usage.DefaultID()
		uc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UsageCreate) check() error {
	if _, ok := uc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`generated: missing required field "Usage.organization_id"`)}
	}
	if _, ok := uc.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`generated: missing required field "Usage.resource_type"`)}
	}
	if v, ok := uc.mutation.ResourceType(); ok {
		if err := usage.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`generated: validator failed for field "Usage.resource_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`generated: missing required field "Usage.used"`)}
	}
	if v, ok := uc.mutation.Used(); ok {
		if err := usage.UsedValidator(v); err != nil {
			return &ValidationError{Name: "used", err: fmt.Errorf(`generated: validator failed for field "Usage.used": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Limit(); !ok {
		return &ValidationError{Name: "limit", err: errors.New(`generated: missing required field "Usage.limit"`)}
	}
	if v, ok := uc.mutation.Limit(); ok {
		if err := usage.LimitValidator(v); err != nil {
			return &ValidationError{Name: "limit", err: fmt.Errorf(`generated: validator failed for field "Usage.limit": %w`, err)}
		}
	}
	return nil
}

func (uc *UsageCreate) sqlSave(ctx context.Context) (*Usage, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Usage.ID type: %T", _spec.ID.Value)
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UsageCreate) createSpec() (*Usage, *sqlgraph.CreateSpec) {
	var (
		_node = &Usage{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(usage.Table, sqlgraph.NewFieldSpec(usage.FieldID, field.TypeString))
	)
	_spec.Schema = uc.schemaConfig.Usage
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(usage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(usage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.CreatedBy(); ok {
		_spec.SetField(usage.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := uc.mutation.UpdatedBy(); ok {
		_spec.SetField(usage.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(usage.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := uc.mutation.DeletedBy(); ok {
		_spec.SetField(usage.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := uc.mutation.Tags(); ok {
		_spec.SetField(usage.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := uc.mutation.OrganizationID(); ok {
		_spec.SetField(usage.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := uc.mutation.ResourceType(); ok {
		_spec.SetField(usage.FieldResourceType, field.TypeEnum, value)
		_node.ResourceType = value
	}
	if value, ok := uc.mutation.Used(); ok {
		_spec.SetField(usage.FieldUsed, field.TypeInt64, value)
		_node.Used = value
	}
	if value, ok := uc.mutation.Limit(); ok {
		_spec.SetField(usage.FieldLimit, field.TypeInt64, value)
		_node.Limit = value
	}
	return _node, _spec
}

// UsageCreateBulk is the builder for creating many Usage entities in bulk.
type UsageCreateBulk struct {
	config
	err      error
	builders []*UsageCreate
}

// Save creates the Usage entities in the database.
func (ucb *UsageCreateBulk) Save(ctx context.Context) ([]*Usage, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Usage, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UsageCreateBulk) SaveX(ctx context.Context) []*Usage {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UsageCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UsageCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
