// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/onboarding"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OnboardingUpdate is the builder for updating Onboarding entities.
type OnboardingUpdate struct {
	config
	hooks     []Hook
	mutation  *OnboardingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OnboardingUpdate builder.
func (_u *OnboardingUpdate) Where(ps ...predicate.Onboarding) *OnboardingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OnboardingUpdate) SetDeletedAt(v time.Time) *OnboardingUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OnboardingUpdate) SetNillableDeletedAt(v *time.Time) *OnboardingUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OnboardingUpdate) ClearDeletedAt() *OnboardingUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OnboardingUpdate) SetDeletedBy(v string) *OnboardingUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OnboardingUpdate) SetNillableDeletedBy(v *string) *OnboardingUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OnboardingUpdate) ClearDeletedBy() *OnboardingUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetCompanyName sets the "company_name" field.
func (_u *OnboardingUpdate) SetCompanyName(v string) *OnboardingUpdate {
	_u.mutation.SetCompanyName(v)
	return _u
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (_u *OnboardingUpdate) SetNillableCompanyName(v *string) *OnboardingUpdate {
	if v != nil {
		_u.SetCompanyName(*v)
	}
	return _u
}

// SetDomains sets the "domains" field.
func (_u *OnboardingUpdate) SetDomains(v []string) *OnboardingUpdate {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *OnboardingUpdate) AppendDomains(v []string) *OnboardingUpdate {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *OnboardingUpdate) ClearDomains() *OnboardingUpdate {
	_u.mutation.ClearDomains()
	return _u
}

// SetCompanyDetails sets the "company_details" field.
func (_u *OnboardingUpdate) SetCompanyDetails(v map[string]interface{}) *OnboardingUpdate {
	_u.mutation.SetCompanyDetails(v)
	return _u
}

// ClearCompanyDetails clears the value of the "company_details" field.
func (_u *OnboardingUpdate) ClearCompanyDetails() *OnboardingUpdate {
	_u.mutation.ClearCompanyDetails()
	return _u
}

// SetUserDetails sets the "user_details" field.
func (_u *OnboardingUpdate) SetUserDetails(v map[string]interface{}) *OnboardingUpdate {
	_u.mutation.SetUserDetails(v)
	return _u
}

// ClearUserDetails clears the value of the "user_details" field.
func (_u *OnboardingUpdate) ClearUserDetails() *OnboardingUpdate {
	_u.mutation.ClearUserDetails()
	return _u
}

// SetCompliance sets the "compliance" field.
func (_u *OnboardingUpdate) SetCompliance(v map[string]interface{}) *OnboardingUpdate {
	_u.mutation.SetCompliance(v)
	return _u
}

// ClearCompliance clears the value of the "compliance" field.
func (_u *OnboardingUpdate) ClearCompliance() *OnboardingUpdate {
	_u.mutation.ClearCompliance()
	return _u
}

// Mutation returns the OnboardingMutation object of the builder.
func (_u *OnboardingUpdate) Mutation() *OnboardingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OnboardingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OnboardingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OnboardingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OnboardingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OnboardingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OnboardingUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OnboardingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(onboarding.Table, onboarding.Columns, sqlgraph.NewFieldSpec(onboarding.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(onboarding.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(onboarding.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(onboarding.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(onboarding.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.CompanyName(); ok {
		_spec.SetField(onboarding.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(onboarding.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, onboarding.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(onboarding.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.CompanyDetails(); ok {
		_spec.SetField(onboarding.FieldCompanyDetails, field.TypeJSON, value)
	}
	if _u.mutation.CompanyDetailsCleared() {
		_spec.ClearField(onboarding.FieldCompanyDetails, field.TypeJSON)
	}
	if value, ok := _u.mutation.UserDetails(); ok {
		_spec.SetField(onboarding.FieldUserDetails, field.TypeJSON, value)
	}
	if _u.mutation.UserDetailsCleared() {
		_spec.ClearField(onboarding.FieldUserDetails, field.TypeJSON)
	}
	if value, ok := _u.mutation.Compliance(); ok {
		_spec.SetField(onboarding.FieldCompliance, field.TypeJSON, value)
	}
	if _u.mutation.ComplianceCleared() {
		_spec.ClearField(onboarding.FieldCompliance, field.TypeJSON)
	}
	_spec.Node.Schema = _u.schemaConfig.Onboarding
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{onboarding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OnboardingUpdateOne is the builder for updating a single Onboarding entity.
type OnboardingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OnboardingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OnboardingUpdateOne) SetDeletedAt(v time.Time) *OnboardingUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OnboardingUpdateOne) SetNillableDeletedAt(v *time.Time) *OnboardingUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OnboardingUpdateOne) ClearDeletedAt() *OnboardingUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OnboardingUpdateOne) SetDeletedBy(v string) *OnboardingUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OnboardingUpdateOne) SetNillableDeletedBy(v *string) *OnboardingUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OnboardingUpdateOne) ClearDeletedBy() *OnboardingUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetCompanyName sets the "company_name" field.
func (_u *OnboardingUpdateOne) SetCompanyName(v string) *OnboardingUpdateOne {
	_u.mutation.SetCompanyName(v)
	return _u
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (_u *OnboardingUpdateOne) SetNillableCompanyName(v *string) *OnboardingUpdateOne {
	if v != nil {
		_u.SetCompanyName(*v)
	}
	return _u
}

// SetDomains sets the "domains" field.
func (_u *OnboardingUpdateOne) SetDomains(v []string) *OnboardingUpdateOne {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *OnboardingUpdateOne) AppendDomains(v []string) *OnboardingUpdateOne {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *OnboardingUpdateOne) ClearDomains() *OnboardingUpdateOne {
	_u.mutation.ClearDomains()
	return _u
}

// SetCompanyDetails sets the "company_details" field.
func (_u *OnboardingUpdateOne) SetCompanyDetails(v map[string]interface{}) *OnboardingUpdateOne {
	_u.mutation.SetCompanyDetails(v)
	return _u
}

// ClearCompanyDetails clears the value of the "company_details" field.
func (_u *OnboardingUpdateOne) ClearCompanyDetails() *OnboardingUpdateOne {
	_u.mutation.ClearCompanyDetails()
	return _u
}

// SetUserDetails sets the "user_details" field.
func (_u *OnboardingUpdateOne) SetUserDetails(v map[string]interface{}) *OnboardingUpdateOne {
	_u.mutation.SetUserDetails(v)
	return _u
}

// ClearUserDetails clears the value of the "user_details" field.
func (_u *OnboardingUpdateOne) ClearUserDetails() *OnboardingUpdateOne {
	_u.mutation.ClearUserDetails()
	return _u
}

// SetCompliance sets the "compliance" field.
func (_u *OnboardingUpdateOne) SetCompliance(v map[string]interface{}) *OnboardingUpdateOne {
	_u.mutation.SetCompliance(v)
	return _u
}

// ClearCompliance clears the value of the "compliance" field.
func (_u *OnboardingUpdateOne) ClearCompliance() *OnboardingUpdateOne {
	_u.mutation.ClearCompliance()
	return _u
}

// Mutation returns the OnboardingMutation object of the builder.
func (_u *OnboardingUpdateOne) Mutation() *OnboardingMutation {
	return _u.mutation
}

// Where appends a list predicates to the OnboardingUpdate builder.
func (_u *OnboardingUpdateOne) Where(ps ...predicate.Onboarding) *OnboardingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OnboardingUpdateOne) Select(field string, fields ...string) *OnboardingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Onboarding entity.
func (_u *OnboardingUpdateOne) Save(ctx context.Context) (*Onboarding, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OnboardingUpdateOne) SaveX(ctx context.Context) *Onboarding {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OnboardingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OnboardingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OnboardingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OnboardingUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OnboardingUpdateOne) sqlSave(ctx context.Context) (_node *Onboarding, err error) {
	_spec := sqlgraph.NewUpdateSpec(onboarding.Table, onboarding.Columns, sqlgraph.NewFieldSpec(onboarding.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Onboarding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, onboarding.FieldID)
		for _, f := range fields {
			if !onboarding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != onboarding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(onboarding.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(onboarding.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(onboarding.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(onboarding.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.CompanyName(); ok {
		_spec.SetField(onboarding.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(onboarding.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, onboarding.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(onboarding.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.CompanyDetails(); ok {
		_spec.SetField(onboarding.FieldCompanyDetails, field.TypeJSON, value)
	}
	if _u.mutation.CompanyDetailsCleared() {
		_spec.ClearField(onboarding.FieldCompanyDetails, field.TypeJSON)
	}
	if value, ok := _u.mutation.UserDetails(); ok {
		_spec.SetField(onboarding.FieldUserDetails, field.TypeJSON, value)
	}
	if _u.mutation.UserDetailsCleared() {
		_spec.ClearField(onboarding.FieldUserDetails, field.TypeJSON)
	}
	if value, ok := _u.mutation.Compliance(); ok {
		_spec.SetField(onboarding.FieldCompliance, field.TypeJSON, value)
	}
	if _u.mutation.ComplianceCleared() {
		_spec.ClearField(onboarding.FieldCompliance, field.TypeJSON)
	}
	_spec.Node.Schema = _u.schemaConfig.Onboarding
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Onboarding{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{onboarding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
