// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/entx/history"
)

// ProcedureHistoryCreate is the builder for creating a ProcedureHistory entity.
type ProcedureHistoryCreate struct {
	config
	mutation *ProcedureHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (phc *ProcedureHistoryCreate) SetHistoryTime(t time.Time) *ProcedureHistoryCreate {
	phc.mutation.SetHistoryTime(t)
	return phc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableHistoryTime(t *time.Time) *ProcedureHistoryCreate {
	if t != nil {
		phc.SetHistoryTime(*t)
	}
	return phc
}

// SetRef sets the "ref" field.
func (phc *ProcedureHistoryCreate) SetRef(s string) *ProcedureHistoryCreate {
	phc.mutation.SetRef(s)
	return phc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableRef(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetRef(*s)
	}
	return phc
}

// SetOperation sets the "operation" field.
func (phc *ProcedureHistoryCreate) SetOperation(ht history.OpType) *ProcedureHistoryCreate {
	phc.mutation.SetOperation(ht)
	return phc
}

// SetCreatedAt sets the "created_at" field.
func (phc *ProcedureHistoryCreate) SetCreatedAt(t time.Time) *ProcedureHistoryCreate {
	phc.mutation.SetCreatedAt(t)
	return phc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableCreatedAt(t *time.Time) *ProcedureHistoryCreate {
	if t != nil {
		phc.SetCreatedAt(*t)
	}
	return phc
}

// SetUpdatedAt sets the "updated_at" field.
func (phc *ProcedureHistoryCreate) SetUpdatedAt(t time.Time) *ProcedureHistoryCreate {
	phc.mutation.SetUpdatedAt(t)
	return phc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableUpdatedAt(t *time.Time) *ProcedureHistoryCreate {
	if t != nil {
		phc.SetUpdatedAt(*t)
	}
	return phc
}

// SetCreatedBy sets the "created_by" field.
func (phc *ProcedureHistoryCreate) SetCreatedBy(s string) *ProcedureHistoryCreate {
	phc.mutation.SetCreatedBy(s)
	return phc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableCreatedBy(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetCreatedBy(*s)
	}
	return phc
}

// SetUpdatedBy sets the "updated_by" field.
func (phc *ProcedureHistoryCreate) SetUpdatedBy(s string) *ProcedureHistoryCreate {
	phc.mutation.SetUpdatedBy(s)
	return phc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableUpdatedBy(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetUpdatedBy(*s)
	}
	return phc
}

// SetDeletedAt sets the "deleted_at" field.
func (phc *ProcedureHistoryCreate) SetDeletedAt(t time.Time) *ProcedureHistoryCreate {
	phc.mutation.SetDeletedAt(t)
	return phc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableDeletedAt(t *time.Time) *ProcedureHistoryCreate {
	if t != nil {
		phc.SetDeletedAt(*t)
	}
	return phc
}

// SetDeletedBy sets the "deleted_by" field.
func (phc *ProcedureHistoryCreate) SetDeletedBy(s string) *ProcedureHistoryCreate {
	phc.mutation.SetDeletedBy(s)
	return phc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableDeletedBy(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetDeletedBy(*s)
	}
	return phc
}

// SetDisplayID sets the "display_id" field.
func (phc *ProcedureHistoryCreate) SetDisplayID(s string) *ProcedureHistoryCreate {
	phc.mutation.SetDisplayID(s)
	return phc
}

// SetTags sets the "tags" field.
func (phc *ProcedureHistoryCreate) SetTags(s []string) *ProcedureHistoryCreate {
	phc.mutation.SetTags(s)
	return phc
}

// SetOwnerID sets the "owner_id" field.
func (phc *ProcedureHistoryCreate) SetOwnerID(s string) *ProcedureHistoryCreate {
	phc.mutation.SetOwnerID(s)
	return phc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableOwnerID(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetOwnerID(*s)
	}
	return phc
}

// SetName sets the "name" field.
func (phc *ProcedureHistoryCreate) SetName(s string) *ProcedureHistoryCreate {
	phc.mutation.SetName(s)
	return phc
}

// SetDescription sets the "description" field.
func (phc *ProcedureHistoryCreate) SetDescription(s string) *ProcedureHistoryCreate {
	phc.mutation.SetDescription(s)
	return phc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableDescription(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetDescription(*s)
	}
	return phc
}

// SetStatus sets the "status" field.
func (phc *ProcedureHistoryCreate) SetStatus(s string) *ProcedureHistoryCreate {
	phc.mutation.SetStatus(s)
	return phc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableStatus(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetStatus(*s)
	}
	return phc
}

// SetProcedureType sets the "procedure_type" field.
func (phc *ProcedureHistoryCreate) SetProcedureType(s string) *ProcedureHistoryCreate {
	phc.mutation.SetProcedureType(s)
	return phc
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableProcedureType(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetProcedureType(*s)
	}
	return phc
}

// SetReviewDue sets the "review_due" field.
func (phc *ProcedureHistoryCreate) SetReviewDue(t time.Time) *ProcedureHistoryCreate {
	phc.mutation.SetReviewDue(t)
	return phc
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableReviewDue(t *time.Time) *ProcedureHistoryCreate {
	if t != nil {
		phc.SetReviewDue(*t)
	}
	return phc
}

// SetVersion sets the "version" field.
func (phc *ProcedureHistoryCreate) SetVersion(s string) *ProcedureHistoryCreate {
	phc.mutation.SetVersion(s)
	return phc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableVersion(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetVersion(*s)
	}
	return phc
}

// SetPurposeAndScope sets the "purpose_and_scope" field.
func (phc *ProcedureHistoryCreate) SetPurposeAndScope(s string) *ProcedureHistoryCreate {
	phc.mutation.SetPurposeAndScope(s)
	return phc
}

// SetNillablePurposeAndScope sets the "purpose_and_scope" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillablePurposeAndScope(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetPurposeAndScope(*s)
	}
	return phc
}

// SetBackground sets the "background" field.
func (phc *ProcedureHistoryCreate) SetBackground(s string) *ProcedureHistoryCreate {
	phc.mutation.SetBackground(s)
	return phc
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableBackground(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetBackground(*s)
	}
	return phc
}

// SetSatisfies sets the "satisfies" field.
func (phc *ProcedureHistoryCreate) SetSatisfies(s string) *ProcedureHistoryCreate {
	phc.mutation.SetSatisfies(s)
	return phc
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableSatisfies(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetSatisfies(*s)
	}
	return phc
}

// SetDetails sets the "details" field.
func (phc *ProcedureHistoryCreate) SetDetails(m map[string]interface{}) *ProcedureHistoryCreate {
	phc.mutation.SetDetails(m)
	return phc
}

// SetID sets the "id" field.
func (phc *ProcedureHistoryCreate) SetID(s string) *ProcedureHistoryCreate {
	phc.mutation.SetID(s)
	return phc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (phc *ProcedureHistoryCreate) SetNillableID(s *string) *ProcedureHistoryCreate {
	if s != nil {
		phc.SetID(*s)
	}
	return phc
}

// Mutation returns the ProcedureHistoryMutation object of the builder.
func (phc *ProcedureHistoryCreate) Mutation() *ProcedureHistoryMutation {
	return phc.mutation
}

// Save creates the ProcedureHistory in the database.
func (phc *ProcedureHistoryCreate) Save(ctx context.Context) (*ProcedureHistory, error) {
	phc.defaults()
	return withHooks(ctx, phc.sqlSave, phc.mutation, phc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (phc *ProcedureHistoryCreate) SaveX(ctx context.Context) *ProcedureHistory {
	v, err := phc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phc *ProcedureHistoryCreate) Exec(ctx context.Context) error {
	_, err := phc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phc *ProcedureHistoryCreate) ExecX(ctx context.Context) {
	if err := phc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phc *ProcedureHistoryCreate) defaults() {
	if _, ok := phc.mutation.HistoryTime(); !ok {
		v := procedurehistory.DefaultHistoryTime()
		phc.mutation.SetHistoryTime(v)
	}
	if _, ok := phc.mutation.CreatedAt(); !ok {
		v := procedurehistory.DefaultCreatedAt()
		phc.mutation.SetCreatedAt(v)
	}
	if _, ok := phc.mutation.UpdatedAt(); !ok {
		v := procedurehistory.DefaultUpdatedAt()
		phc.mutation.SetUpdatedAt(v)
	}
	if _, ok := phc.mutation.Tags(); !ok {
		v := procedurehistory.DefaultTags
		phc.mutation.SetTags(v)
	}
	if _, ok := phc.mutation.ReviewDue(); !ok {
		v := procedurehistory.DefaultReviewDue
		phc.mutation.SetReviewDue(v)
	}
	if _, ok := phc.mutation.ID(); !ok {
		v := procedurehistory.DefaultID()
		phc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phc *ProcedureHistoryCreate) check() error {
	if _, ok := phc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ProcedureHistory.history_time"`)}
	}
	if _, ok := phc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ProcedureHistory.operation"`)}
	}
	if v, ok := phc.mutation.Operation(); ok {
		if err := procedurehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.operation": %w`, err)}
		}
	}
	if _, ok := phc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "ProcedureHistory.display_id"`)}
	}
	if _, ok := phc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ProcedureHistory.name"`)}
	}
	return nil
}

func (phc *ProcedureHistoryCreate) sqlSave(ctx context.Context) (*ProcedureHistory, error) {
	if err := phc.check(); err != nil {
		return nil, err
	}
	_node, _spec := phc.createSpec()
	if err := sqlgraph.CreateNode(ctx, phc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProcedureHistory.ID type: %T", _spec.ID.Value)
		}
	}
	phc.mutation.id = &_node.ID
	phc.mutation.done = true
	return _node, nil
}

func (phc *ProcedureHistoryCreate) createSpec() (*ProcedureHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcedureHistory{config: phc.config}
		_spec = sqlgraph.NewCreateSpec(procedurehistory.Table, sqlgraph.NewFieldSpec(procedurehistory.FieldID, field.TypeString))
	)
	_spec.Schema = phc.schemaConfig.ProcedureHistory
	if id, ok := phc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := phc.mutation.HistoryTime(); ok {
		_spec.SetField(procedurehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := phc.mutation.Ref(); ok {
		_spec.SetField(procedurehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := phc.mutation.Operation(); ok {
		_spec.SetField(procedurehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := phc.mutation.CreatedAt(); ok {
		_spec.SetField(procedurehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := phc.mutation.UpdatedAt(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := phc.mutation.CreatedBy(); ok {
		_spec.SetField(procedurehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := phc.mutation.UpdatedBy(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := phc.mutation.DeletedAt(); ok {
		_spec.SetField(procedurehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := phc.mutation.DeletedBy(); ok {
		_spec.SetField(procedurehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := phc.mutation.DisplayID(); ok {
		_spec.SetField(procedurehistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := phc.mutation.Tags(); ok {
		_spec.SetField(procedurehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := phc.mutation.OwnerID(); ok {
		_spec.SetField(procedurehistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := phc.mutation.Name(); ok {
		_spec.SetField(procedurehistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := phc.mutation.Description(); ok {
		_spec.SetField(procedurehistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := phc.mutation.Status(); ok {
		_spec.SetField(procedurehistory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := phc.mutation.ProcedureType(); ok {
		_spec.SetField(procedurehistory.FieldProcedureType, field.TypeString, value)
		_node.ProcedureType = value
	}
	if value, ok := phc.mutation.ReviewDue(); ok {
		_spec.SetField(procedurehistory.FieldReviewDue, field.TypeTime, value)
		_node.ReviewDue = value
	}
	if value, ok := phc.mutation.Version(); ok {
		_spec.SetField(procedurehistory.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := phc.mutation.PurposeAndScope(); ok {
		_spec.SetField(procedurehistory.FieldPurposeAndScope, field.TypeString, value)
		_node.PurposeAndScope = value
	}
	if value, ok := phc.mutation.Background(); ok {
		_spec.SetField(procedurehistory.FieldBackground, field.TypeString, value)
		_node.Background = value
	}
	if value, ok := phc.mutation.Satisfies(); ok {
		_spec.SetField(procedurehistory.FieldSatisfies, field.TypeString, value)
		_node.Satisfies = value
	}
	if value, ok := phc.mutation.Details(); ok {
		_spec.SetField(procedurehistory.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	return _node, _spec
}

// ProcedureHistoryCreateBulk is the builder for creating many ProcedureHistory entities in bulk.
type ProcedureHistoryCreateBulk struct {
	config
	err      error
	builders []*ProcedureHistoryCreate
}

// Save creates the ProcedureHistory entities in the database.
func (phcb *ProcedureHistoryCreateBulk) Save(ctx context.Context) ([]*ProcedureHistory, error) {
	if phcb.err != nil {
		return nil, phcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(phcb.builders))
	nodes := make([]*ProcedureHistory, len(phcb.builders))
	mutators := make([]Mutator, len(phcb.builders))
	for i := range phcb.builders {
		func(i int, root context.Context) {
			builder := phcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcedureHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, phcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, phcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, phcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (phcb *ProcedureHistoryCreateBulk) SaveX(ctx context.Context) []*ProcedureHistory {
	v, err := phcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phcb *ProcedureHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := phcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phcb *ProcedureHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := phcb.Exec(ctx); err != nil {
		panic(err)
	}
}
