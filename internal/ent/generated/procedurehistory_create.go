// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ProcedureHistoryCreate is the builder for creating a ProcedureHistory entity.
type ProcedureHistoryCreate struct {
	config
	mutation *ProcedureHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (_c *ProcedureHistoryCreate) SetHistoryTime(v time.Time) *ProcedureHistoryCreate {
	_c.mutation.SetHistoryTime(v)
	return _c
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableHistoryTime(v *time.Time) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetHistoryTime(*v)
	}
	return _c
}

// SetRef sets the "ref" field.
func (_c *ProcedureHistoryCreate) SetRef(v string) *ProcedureHistoryCreate {
	_c.mutation.SetRef(v)
	return _c
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableRef(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetRef(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *ProcedureHistoryCreate) SetOperation(v history.OpType) *ProcedureHistoryCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ProcedureHistoryCreate) SetCreatedAt(v time.Time) *ProcedureHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableCreatedAt(v *time.Time) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ProcedureHistoryCreate) SetUpdatedAt(v time.Time) *ProcedureHistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableUpdatedAt(v *time.Time) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ProcedureHistoryCreate) SetCreatedBy(v string) *ProcedureHistoryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableCreatedBy(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ProcedureHistoryCreate) SetUpdatedBy(v string) *ProcedureHistoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableUpdatedBy(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ProcedureHistoryCreate) SetDeletedAt(v time.Time) *ProcedureHistoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableDeletedAt(v *time.Time) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ProcedureHistoryCreate) SetDeletedBy(v string) *ProcedureHistoryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableDeletedBy(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *ProcedureHistoryCreate) SetDisplayID(v string) *ProcedureHistoryCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *ProcedureHistoryCreate) SetTags(v []string) *ProcedureHistoryCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetRevision sets the "revision" field.
func (_c *ProcedureHistoryCreate) SetRevision(v string) *ProcedureHistoryCreate {
	_c.mutation.SetRevision(v)
	return _c
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableRevision(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetRevision(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *ProcedureHistoryCreate) SetOwnerID(v string) *ProcedureHistoryCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableOwnerID(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *ProcedureHistoryCreate) SetName(v string) *ProcedureHistoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *ProcedureHistoryCreate) SetStatus(v enums.DocumentStatus) *ProcedureHistoryCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableStatus(v *enums.DocumentStatus) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetProcedureType sets the "procedure_type" field.
func (_c *ProcedureHistoryCreate) SetProcedureType(v string) *ProcedureHistoryCreate {
	_c.mutation.SetProcedureType(v)
	return _c
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableProcedureType(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetProcedureType(*v)
	}
	return _c
}

// SetDetails sets the "details" field.
func (_c *ProcedureHistoryCreate) SetDetails(v string) *ProcedureHistoryCreate {
	_c.mutation.SetDetails(v)
	return _c
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableDetails(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetDetails(*v)
	}
	return _c
}

// SetApprovalRequired sets the "approval_required" field.
func (_c *ProcedureHistoryCreate) SetApprovalRequired(v bool) *ProcedureHistoryCreate {
	_c.mutation.SetApprovalRequired(v)
	return _c
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableApprovalRequired(v *bool) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetApprovalRequired(*v)
	}
	return _c
}

// SetReviewDue sets the "review_due" field.
func (_c *ProcedureHistoryCreate) SetReviewDue(v time.Time) *ProcedureHistoryCreate {
	_c.mutation.SetReviewDue(v)
	return _c
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableReviewDue(v *time.Time) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetReviewDue(*v)
	}
	return _c
}

// SetReviewFrequency sets the "review_frequency" field.
func (_c *ProcedureHistoryCreate) SetReviewFrequency(v enums.Frequency) *ProcedureHistoryCreate {
	_c.mutation.SetReviewFrequency(v)
	return _c
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableReviewFrequency(v *enums.Frequency) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetReviewFrequency(*v)
	}
	return _c
}

// SetApproverID sets the "approver_id" field.
func (_c *ProcedureHistoryCreate) SetApproverID(v string) *ProcedureHistoryCreate {
	_c.mutation.SetApproverID(v)
	return _c
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableApproverID(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetApproverID(*v)
	}
	return _c
}

// SetDelegateID sets the "delegate_id" field.
func (_c *ProcedureHistoryCreate) SetDelegateID(v string) *ProcedureHistoryCreate {
	_c.mutation.SetDelegateID(v)
	return _c
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableDelegateID(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetDelegateID(*v)
	}
	return _c
}

// SetSummary sets the "summary" field.
func (_c *ProcedureHistoryCreate) SetSummary(v string) *ProcedureHistoryCreate {
	_c.mutation.SetSummary(v)
	return _c
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableSummary(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetSummary(*v)
	}
	return _c
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_c *ProcedureHistoryCreate) SetTagSuggestions(v []string) *ProcedureHistoryCreate {
	_c.mutation.SetTagSuggestions(v)
	return _c
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_c *ProcedureHistoryCreate) SetDismissedTagSuggestions(v []string) *ProcedureHistoryCreate {
	_c.mutation.SetDismissedTagSuggestions(v)
	return _c
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_c *ProcedureHistoryCreate) SetControlSuggestions(v []string) *ProcedureHistoryCreate {
	_c.mutation.SetControlSuggestions(v)
	return _c
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_c *ProcedureHistoryCreate) SetDismissedControlSuggestions(v []string) *ProcedureHistoryCreate {
	_c.mutation.SetDismissedControlSuggestions(v)
	return _c
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_c *ProcedureHistoryCreate) SetImprovementSuggestions(v []string) *ProcedureHistoryCreate {
	_c.mutation.SetImprovementSuggestions(v)
	return _c
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_c *ProcedureHistoryCreate) SetDismissedImprovementSuggestions(v []string) *ProcedureHistoryCreate {
	_c.mutation.SetDismissedImprovementSuggestions(v)
	return _c
}

// SetURL sets the "url" field.
func (_c *ProcedureHistoryCreate) SetURL(v string) *ProcedureHistoryCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableURL(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetURL(*v)
	}
	return _c
}

// SetFileID sets the "file_id" field.
func (_c *ProcedureHistoryCreate) SetFileID(v string) *ProcedureHistoryCreate {
	_c.mutation.SetFileID(v)
	return _c
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableFileID(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetFileID(*v)
	}
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *ProcedureHistoryCreate) SetSystemOwned(v bool) *ProcedureHistoryCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableSystemOwned(v *bool) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *ProcedureHistoryCreate) SetInternalNotes(v string) *ProcedureHistoryCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableInternalNotes(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *ProcedureHistoryCreate) SetSystemInternalID(v string) *ProcedureHistoryCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableSystemInternalID(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ProcedureHistoryCreate) SetID(v string) *ProcedureHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ProcedureHistoryCreate) SetNillableID(v *string) *ProcedureHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the ProcedureHistoryMutation object of the builder.
func (_c *ProcedureHistoryCreate) Mutation() *ProcedureHistoryMutation {
	return _c.mutation
}

// Save creates the ProcedureHistory in the database.
func (_c *ProcedureHistoryCreate) Save(ctx context.Context) (*ProcedureHistory, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProcedureHistoryCreate) SaveX(ctx context.Context) *ProcedureHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProcedureHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProcedureHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProcedureHistoryCreate) defaults() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		if procedurehistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized procedurehistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := procedurehistory.DefaultHistoryTime()
		_c.mutation.SetHistoryTime(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if procedurehistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedurehistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := procedurehistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if procedurehistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedurehistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedurehistory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := procedurehistory.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Revision(); !ok {
		v := procedurehistory.DefaultRevision
		_c.mutation.SetRevision(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := procedurehistory.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ApprovalRequired(); !ok {
		v := procedurehistory.DefaultApprovalRequired
		_c.mutation.SetApprovalRequired(v)
	}
	if _, ok := _c.mutation.ReviewDue(); !ok {
		v := procedurehistory.DefaultReviewDue
		_c.mutation.SetReviewDue(v)
	}
	if _, ok := _c.mutation.ReviewFrequency(); !ok {
		v := procedurehistory.DefaultReviewFrequency
		_c.mutation.SetReviewFrequency(v)
	}
	if _, ok := _c.mutation.TagSuggestions(); !ok {
		v := procedurehistory.DefaultTagSuggestions
		_c.mutation.SetTagSuggestions(v)
	}
	if _, ok := _c.mutation.DismissedTagSuggestions(); !ok {
		v := procedurehistory.DefaultDismissedTagSuggestions
		_c.mutation.SetDismissedTagSuggestions(v)
	}
	if _, ok := _c.mutation.ControlSuggestions(); !ok {
		v := procedurehistory.DefaultControlSuggestions
		_c.mutation.SetControlSuggestions(v)
	}
	if _, ok := _c.mutation.DismissedControlSuggestions(); !ok {
		v := procedurehistory.DefaultDismissedControlSuggestions
		_c.mutation.SetDismissedControlSuggestions(v)
	}
	if _, ok := _c.mutation.ImprovementSuggestions(); !ok {
		v := procedurehistory.DefaultImprovementSuggestions
		_c.mutation.SetImprovementSuggestions(v)
	}
	if _, ok := _c.mutation.DismissedImprovementSuggestions(); !ok {
		v := procedurehistory.DefaultDismissedImprovementSuggestions
		_c.mutation.SetDismissedImprovementSuggestions(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := procedurehistory.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if procedurehistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized procedurehistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := procedurehistory.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProcedureHistoryCreate) check() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ProcedureHistory.history_time"`)}
	}
	if _, ok := _c.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ProcedureHistory.operation"`)}
	}
	if v, ok := _c.mutation.Operation(); ok {
		if err := procedurehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.operation": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "ProcedureHistory.display_id"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ProcedureHistory.name"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := procedurehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ReviewFrequency(); ok {
		if err := procedurehistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

func (_c *ProcedureHistoryCreate) sqlSave(ctx context.Context) (*ProcedureHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProcedureHistory.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProcedureHistoryCreate) createSpec() (*ProcedureHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcedureHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(procedurehistory.Table, sqlgraph.NewFieldSpec(procedurehistory.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.ProcedureHistory
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.HistoryTime(); ok {
		_spec.SetField(procedurehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := _c.mutation.Ref(); ok {
		_spec.SetField(procedurehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(procedurehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(procedurehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(procedurehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(procedurehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(procedurehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(procedurehistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(procedurehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Revision(); ok {
		_spec.SetField(procedurehistory.FieldRevision, field.TypeString, value)
		_node.Revision = value
	}
	if value, ok := _c.mutation.OwnerID(); ok {
		_spec.SetField(procedurehistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(procedurehistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(procedurehistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ProcedureType(); ok {
		_spec.SetField(procedurehistory.FieldProcedureType, field.TypeString, value)
		_node.ProcedureType = value
	}
	if value, ok := _c.mutation.Details(); ok {
		_spec.SetField(procedurehistory.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := _c.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedurehistory.FieldApprovalRequired, field.TypeBool, value)
		_node.ApprovalRequired = value
	}
	if value, ok := _c.mutation.ReviewDue(); ok {
		_spec.SetField(procedurehistory.FieldReviewDue, field.TypeTime, value)
		_node.ReviewDue = value
	}
	if value, ok := _c.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedurehistory.FieldReviewFrequency, field.TypeEnum, value)
		_node.ReviewFrequency = value
	}
	if value, ok := _c.mutation.ApproverID(); ok {
		_spec.SetField(procedurehistory.FieldApproverID, field.TypeString, value)
		_node.ApproverID = value
	}
	if value, ok := _c.mutation.DelegateID(); ok {
		_spec.SetField(procedurehistory.FieldDelegateID, field.TypeString, value)
		_node.DelegateID = value
	}
	if value, ok := _c.mutation.Summary(); ok {
		_spec.SetField(procedurehistory.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := _c.mutation.TagSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldTagSuggestions, field.TypeJSON, value)
		_node.TagSuggestions = value
	}
	if value, ok := _c.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedTagSuggestions, field.TypeJSON, value)
		_node.DismissedTagSuggestions = value
	}
	if value, ok := _c.mutation.ControlSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldControlSuggestions, field.TypeJSON, value)
		_node.ControlSuggestions = value
	}
	if value, ok := _c.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedControlSuggestions, field.TypeJSON, value)
		_node.DismissedControlSuggestions = value
	}
	if value, ok := _c.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldImprovementSuggestions, field.TypeJSON, value)
		_node.ImprovementSuggestions = value
	}
	if value, ok := _c.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
		_node.DismissedImprovementSuggestions = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(procedurehistory.FieldURL, field.TypeString, value)
		_node.URL = &value
	}
	if value, ok := _c.mutation.FileID(); ok {
		_spec.SetField(procedurehistory.FieldFileID, field.TypeString, value)
		_node.FileID = &value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(procedurehistory.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(procedurehistory.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(procedurehistory.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	return _node, _spec
}

// ProcedureHistoryCreateBulk is the builder for creating many ProcedureHistory entities in bulk.
type ProcedureHistoryCreateBulk struct {
	config
	err      error
	builders []*ProcedureHistoryCreate
}

// Save creates the ProcedureHistory entities in the database.
func (_c *ProcedureHistoryCreateBulk) Save(ctx context.Context) ([]*ProcedureHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ProcedureHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcedureHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProcedureHistoryCreateBulk) SaveX(ctx context.Context) []*ProcedureHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProcedureHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProcedureHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
