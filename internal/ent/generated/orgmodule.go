// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/pkg/models"
)

// OrgModule is the model entity for the OrgModule schema.
type OrgModule struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// module key this record represents
	Module string `json:"module,omitempty"`
	// Price holds the value of the "price" field.
	Price models.Price `json:"price,omitempty"`
	// StripePriceID holds the value of the "stripe_price_id" field.
	StripePriceID string `json:"stripe_price_id,omitempty"`
	// the status of the module, e.g. active, inactive, trialing
	Status string `json:"status,omitempty"`
	// Visibility holds the value of the "visibility" field.
	Visibility string `json:"visibility,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// the lookup key for the module, used for Stripe integration
	ModuleLookupKey string `json:"module_lookup_key,omitempty"`
	// the ID of the subscription this module is linked to
	SubscriptionID string `json:"subscription_id,omitempty"`
	// the ID of the price associated with this module
	PriceID string `json:"price_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgModuleQuery when eager-loading is set.
	Edges                   OrgModuleEdges `json:"edges"`
	org_product_org_modules *string
	selectValues            sql.SelectValues
}

// OrgModuleEdges holds the relations/edges for other nodes in the graph.
type OrgModuleEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// OrgSubscription holds the value of the org_subscription edge.
	OrgSubscription *OrgSubscription `json:"org_subscription,omitempty"`
	// OrgProducts holds the value of the org_products edge.
	OrgProducts []*OrgProduct `json:"org_products,omitempty"`
	// OrgPrices holds the value of the org_prices edge.
	OrgPrices []*OrgPrice `json:"org_prices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedOrgProducts map[string][]*OrgProduct
	namedOrgPrices   map[string][]*OrgPrice
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgModuleEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// OrgSubscriptionOrErr returns the OrgSubscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgModuleEdges) OrgSubscriptionOrErr() (*OrgSubscription, error) {
	if e.OrgSubscription != nil {
		return e.OrgSubscription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: orgsubscription.Label}
	}
	return nil, &NotLoadedError{edge: "org_subscription"}
}

// OrgProductsOrErr returns the OrgProducts value or an error if the edge
// was not loaded in eager-loading.
func (e OrgModuleEdges) OrgProductsOrErr() ([]*OrgProduct, error) {
	if e.loadedTypes[2] {
		return e.OrgProducts, nil
	}
	return nil, &NotLoadedError{edge: "org_products"}
}

// OrgPricesOrErr returns the OrgPrices value or an error if the edge
// was not loaded in eager-loading.
func (e OrgModuleEdges) OrgPricesOrErr() ([]*OrgPrice, error) {
	if e.loadedTypes[3] {
		return e.OrgPrices, nil
	}
	return nil, &NotLoadedError{edge: "org_prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgModule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgmodule.FieldTags, orgmodule.FieldPrice:
			values[i] = new([]byte)
		case orgmodule.FieldActive:
			values[i] = new(sql.NullBool)
		case orgmodule.FieldID, orgmodule.FieldCreatedBy, orgmodule.FieldUpdatedBy, orgmodule.FieldDeletedBy, orgmodule.FieldOwnerID, orgmodule.FieldModule, orgmodule.FieldStripePriceID, orgmodule.FieldStatus, orgmodule.FieldVisibility, orgmodule.FieldModuleLookupKey, orgmodule.FieldSubscriptionID, orgmodule.FieldPriceID:
			values[i] = new(sql.NullString)
		case orgmodule.FieldCreatedAt, orgmodule.FieldUpdatedAt, orgmodule.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case orgmodule.ForeignKeys[0]: // org_product_org_modules
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgModule fields.
func (_m *OrgModule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgmodule.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case orgmodule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case orgmodule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case orgmodule.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case orgmodule.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case orgmodule.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case orgmodule.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case orgmodule.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case orgmodule.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case orgmodule.FieldModule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module", values[i])
			} else if value.Valid {
				_m.Module = value.String
			}
		case orgmodule.FieldPrice:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Price); err != nil {
					return fmt.Errorf("unmarshal field price: %w", err)
				}
			}
		case orgmodule.FieldStripePriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_price_id", values[i])
			} else if value.Valid {
				_m.StripePriceID = value.String
			}
		case orgmodule.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case orgmodule.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				_m.Visibility = value.String
			}
		case orgmodule.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				_m.Active = value.Bool
			}
		case orgmodule.FieldModuleLookupKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_lookup_key", values[i])
			} else if value.Valid {
				_m.ModuleLookupKey = value.String
			}
		case orgmodule.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				_m.SubscriptionID = value.String
			}
		case orgmodule.FieldPriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_id", values[i])
			} else if value.Valid {
				_m.PriceID = value.String
			}
		case orgmodule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_product_org_modules", values[i])
			} else if value.Valid {
				_m.org_product_org_modules = new(string)
				*_m.org_product_org_modules = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrgModule.
// This includes values selected through modifiers, order, etc.
func (_m *OrgModule) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the OrgModule entity.
func (_m *OrgModule) QueryOwner() *OrganizationQuery {
	return NewOrgModuleClient(_m.config).QueryOwner(_m)
}

// QueryOrgSubscription queries the "org_subscription" edge of the OrgModule entity.
func (_m *OrgModule) QueryOrgSubscription() *OrgSubscriptionQuery {
	return NewOrgModuleClient(_m.config).QueryOrgSubscription(_m)
}

// QueryOrgProducts queries the "org_products" edge of the OrgModule entity.
func (_m *OrgModule) QueryOrgProducts() *OrgProductQuery {
	return NewOrgModuleClient(_m.config).QueryOrgProducts(_m)
}

// QueryOrgPrices queries the "org_prices" edge of the OrgModule entity.
func (_m *OrgModule) QueryOrgPrices() *OrgPriceQuery {
	return NewOrgModuleClient(_m.config).QueryOrgPrices(_m)
}

// Update returns a builder for updating this OrgModule.
// Note that you need to call OrgModule.Unwrap() before calling this method if this OrgModule
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OrgModule) Update() *OrgModuleUpdateOne {
	return NewOrgModuleClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OrgModule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OrgModule) Unwrap() *OrgModule {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrgModule is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OrgModule) String() string {
	var builder strings.Builder
	builder.WriteString("OrgModule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("module=")
	builder.WriteString(_m.Module)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", _m.Price))
	builder.WriteString(", ")
	builder.WriteString("stripe_price_id=")
	builder.WriteString(_m.StripePriceID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(_m.Visibility)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", _m.Active))
	builder.WriteString(", ")
	builder.WriteString("module_lookup_key=")
	builder.WriteString(_m.ModuleLookupKey)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(_m.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("price_id=")
	builder.WriteString(_m.PriceID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrgProducts returns the OrgProducts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OrgModule) NamedOrgProducts(name string) ([]*OrgProduct, error) {
	if _m.Edges.namedOrgProducts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOrgProducts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OrgModule) appendNamedOrgProducts(name string, edges ...*OrgProduct) {
	if _m.Edges.namedOrgProducts == nil {
		_m.Edges.namedOrgProducts = make(map[string][]*OrgProduct)
	}
	if len(edges) == 0 {
		_m.Edges.namedOrgProducts[name] = []*OrgProduct{}
	} else {
		_m.Edges.namedOrgProducts[name] = append(_m.Edges.namedOrgProducts[name], edges...)
	}
}

// NamedOrgPrices returns the OrgPrices named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *OrgModule) NamedOrgPrices(name string) ([]*OrgPrice, error) {
	if _m.Edges.namedOrgPrices == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedOrgPrices[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *OrgModule) appendNamedOrgPrices(name string, edges ...*OrgPrice) {
	if _m.Edges.namedOrgPrices == nil {
		_m.Edges.namedOrgPrices = make(map[string][]*OrgPrice)
	}
	if len(edges) == 0 {
		_m.Edges.namedOrgPrices[name] = []*OrgPrice{}
	} else {
		_m.Edges.namedOrgPrices[name] = append(_m.Edges.namedOrgPrices[name], edges...)
	}
}

// OrgModules is a parsable slice of OrgModule.
type OrgModules []*OrgModule
