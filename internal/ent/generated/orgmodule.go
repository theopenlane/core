// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/pkg/models"
)

// OrgModule is the model entity for the OrgModule schema.
type OrgModule struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// module key this record represents
	Module string `json:"module,omitempty"`
	// Price holds the value of the "price" field.
	Price models.Price `json:"price,omitempty"`
	// StripePriceID holds the value of the "stripe_price_id" field.
	StripePriceID string `json:"stripe_price_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// TrialExpiresAt holds the value of the "trial_expires_at" field.
	TrialExpiresAt *time.Time `json:"trial_expires_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgModuleQuery when eager-loading is set.
	Edges        OrgModuleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrgModuleEdges holds the relations/edges for other nodes in the graph.
type OrgModuleEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// OrgSubscription holds the value of the org_subscription edge.
	OrgSubscription *OrgSubscription `json:"org_subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgModuleEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// OrgSubscriptionOrErr returns the OrgSubscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgModuleEdges) OrgSubscriptionOrErr() (*OrgSubscription, error) {
	if e.OrgSubscription != nil {
		return e.OrgSubscription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: orgsubscription.Label}
	}
	return nil, &NotLoadedError{edge: "org_subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgModule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgmodule.FieldTags, orgmodule.FieldPrice:
			values[i] = new([]byte)
		case orgmodule.FieldActive:
			values[i] = new(sql.NullBool)
		case orgmodule.FieldID, orgmodule.FieldCreatedBy, orgmodule.FieldUpdatedBy, orgmodule.FieldDeletedBy, orgmodule.FieldOwnerID, orgmodule.FieldModule, orgmodule.FieldStripePriceID, orgmodule.FieldStatus, orgmodule.FieldSubscriptionID:
			values[i] = new(sql.NullString)
		case orgmodule.FieldCreatedAt, orgmodule.FieldUpdatedAt, orgmodule.FieldDeletedAt, orgmodule.FieldTrialExpiresAt, orgmodule.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgModule fields.
func (om *OrgModule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgmodule.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				om.ID = value.String
			}
		case orgmodule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				om.CreatedAt = value.Time
			}
		case orgmodule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				om.UpdatedAt = value.Time
			}
		case orgmodule.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				om.CreatedBy = value.String
			}
		case orgmodule.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				om.UpdatedBy = value.String
			}
		case orgmodule.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				om.DeletedAt = value.Time
			}
		case orgmodule.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				om.DeletedBy = value.String
			}
		case orgmodule.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &om.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case orgmodule.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				om.OwnerID = value.String
			}
		case orgmodule.FieldModule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module", values[i])
			} else if value.Valid {
				om.Module = value.String
			}
		case orgmodule.FieldPrice:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &om.Price); err != nil {
					return fmt.Errorf("unmarshal field price: %w", err)
				}
			}
		case orgmodule.FieldStripePriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_price_id", values[i])
			} else if value.Valid {
				om.StripePriceID = value.String
			}
		case orgmodule.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				om.Status = value.String
			}
		case orgmodule.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				om.Active = value.Bool
			}
		case orgmodule.FieldTrialExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trial_expires_at", values[i])
			} else if value.Valid {
				om.TrialExpiresAt = new(time.Time)
				*om.TrialExpiresAt = value.Time
			}
		case orgmodule.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				om.ExpiresAt = new(time.Time)
				*om.ExpiresAt = value.Time
			}
		case orgmodule.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				om.SubscriptionID = value.String
			}
		default:
			om.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrgModule.
// This includes values selected through modifiers, order, etc.
func (om *OrgModule) Value(name string) (ent.Value, error) {
	return om.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the OrgModule entity.
func (om *OrgModule) QueryOwner() *OrganizationQuery {
	return NewOrgModuleClient(om.config).QueryOwner(om)
}

// QueryOrgSubscription queries the "org_subscription" edge of the OrgModule entity.
func (om *OrgModule) QueryOrgSubscription() *OrgSubscriptionQuery {
	return NewOrgModuleClient(om.config).QueryOrgSubscription(om)
}

// Update returns a builder for updating this OrgModule.
// Note that you need to call OrgModule.Unwrap() before calling this method if this OrgModule
// was returned from a transaction, and the transaction was committed or rolled back.
func (om *OrgModule) Update() *OrgModuleUpdateOne {
	return NewOrgModuleClient(om.config).UpdateOne(om)
}

// Unwrap unwraps the OrgModule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (om *OrgModule) Unwrap() *OrgModule {
	_tx, ok := om.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrgModule is not a transactional entity")
	}
	om.config.driver = _tx.drv
	return om
}

// String implements the fmt.Stringer.
func (om *OrgModule) String() string {
	var builder strings.Builder
	builder.WriteString("OrgModule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", om.ID))
	builder.WriteString("created_at=")
	builder.WriteString(om.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(om.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(om.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(om.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(om.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(om.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", om.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(om.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("module=")
	builder.WriteString(om.Module)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", om.Price))
	builder.WriteString(", ")
	builder.WriteString("stripe_price_id=")
	builder.WriteString(om.StripePriceID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(om.Status)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", om.Active))
	builder.WriteString(", ")
	if v := om.TrialExpiresAt; v != nil {
		builder.WriteString("trial_expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := om.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(om.SubscriptionID)
	builder.WriteByte(')')
	return builder.String()
}

// OrgModules is a parsable slice of OrgModule.
type OrgModules []*OrgModule
