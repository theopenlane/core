// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlImplementationUpdate is the builder for updating ControlImplementation entities.
type ControlImplementationUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlImplementationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlImplementationUpdate builder.
func (_u *ControlImplementationUpdate) Where(ps ...predicate.ControlImplementation) *ControlImplementationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ControlImplementationUpdate) SetUpdatedAt(v time.Time) *ControlImplementationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ControlImplementationUpdate) ClearUpdatedAt() *ControlImplementationUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ControlImplementationUpdate) SetUpdatedBy(v string) *ControlImplementationUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ControlImplementationUpdate) SetNillableUpdatedBy(v *string) *ControlImplementationUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ControlImplementationUpdate) ClearUpdatedBy() *ControlImplementationUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ControlImplementationUpdate) SetDeletedAt(v time.Time) *ControlImplementationUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ControlImplementationUpdate) SetNillableDeletedAt(v *time.Time) *ControlImplementationUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ControlImplementationUpdate) ClearDeletedAt() *ControlImplementationUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ControlImplementationUpdate) SetDeletedBy(v string) *ControlImplementationUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ControlImplementationUpdate) SetNillableDeletedBy(v *string) *ControlImplementationUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ControlImplementationUpdate) ClearDeletedBy() *ControlImplementationUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ControlImplementationUpdate) SetTags(v []string) *ControlImplementationUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ControlImplementationUpdate) AppendTags(v []string) *ControlImplementationUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ControlImplementationUpdate) ClearTags() *ControlImplementationUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ControlImplementationUpdate) SetStatus(v enums.DocumentStatus) *ControlImplementationUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ControlImplementationUpdate) SetNillableStatus(v *enums.DocumentStatus) *ControlImplementationUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ControlImplementationUpdate) ClearStatus() *ControlImplementationUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetImplementationDate sets the "implementation_date" field.
func (_u *ControlImplementationUpdate) SetImplementationDate(v time.Time) *ControlImplementationUpdate {
	_u.mutation.SetImplementationDate(v)
	return _u
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (_u *ControlImplementationUpdate) SetNillableImplementationDate(v *time.Time) *ControlImplementationUpdate {
	if v != nil {
		_u.SetImplementationDate(*v)
	}
	return _u
}

// ClearImplementationDate clears the value of the "implementation_date" field.
func (_u *ControlImplementationUpdate) ClearImplementationDate() *ControlImplementationUpdate {
	_u.mutation.ClearImplementationDate()
	return _u
}

// SetVerified sets the "verified" field.
func (_u *ControlImplementationUpdate) SetVerified(v bool) *ControlImplementationUpdate {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *ControlImplementationUpdate) SetNillableVerified(v *bool) *ControlImplementationUpdate {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// ClearVerified clears the value of the "verified" field.
func (_u *ControlImplementationUpdate) ClearVerified() *ControlImplementationUpdate {
	_u.mutation.ClearVerified()
	return _u
}

// SetVerificationDate sets the "verification_date" field.
func (_u *ControlImplementationUpdate) SetVerificationDate(v time.Time) *ControlImplementationUpdate {
	_u.mutation.SetVerificationDate(v)
	return _u
}

// SetNillableVerificationDate sets the "verification_date" field if the given value is not nil.
func (_u *ControlImplementationUpdate) SetNillableVerificationDate(v *time.Time) *ControlImplementationUpdate {
	if v != nil {
		_u.SetVerificationDate(*v)
	}
	return _u
}

// ClearVerificationDate clears the value of the "verification_date" field.
func (_u *ControlImplementationUpdate) ClearVerificationDate() *ControlImplementationUpdate {
	_u.mutation.ClearVerificationDate()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ControlImplementationUpdate) SetDetails(v string) *ControlImplementationUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ControlImplementationUpdate) SetNillableDetails(v *string) *ControlImplementationUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ControlImplementationUpdate) ClearDetails() *ControlImplementationUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *ControlImplementationUpdate) AddBlockedGroupIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *ControlImplementationUpdate) AddBlockedGroups(v ...*Group) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *ControlImplementationUpdate) AddEditorIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *ControlImplementationUpdate) AddEditors(v ...*Group) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_u *ControlImplementationUpdate) AddViewerIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.AddViewerIDs(ids...)
	return _u
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_u *ControlImplementationUpdate) AddViewers(v ...*Group) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddViewerIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *ControlImplementationUpdate) AddControlIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *ControlImplementationUpdate) AddControls(v ...*Control) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *ControlImplementationUpdate) AddSubcontrolIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *ControlImplementationUpdate) AddSubcontrols(v ...*Subcontrol) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *ControlImplementationUpdate) AddTaskIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *ControlImplementationUpdate) AddTasks(v ...*Task) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// Mutation returns the ControlImplementationMutation object of the builder.
func (_u *ControlImplementationUpdate) Mutation() *ControlImplementationMutation {
	return _u.mutation
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *ControlImplementationUpdate) ClearBlockedGroups() *ControlImplementationUpdate {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *ControlImplementationUpdate) RemoveBlockedGroupIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *ControlImplementationUpdate) RemoveBlockedGroups(v ...*Group) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *ControlImplementationUpdate) ClearEditors() *ControlImplementationUpdate {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *ControlImplementationUpdate) RemoveEditorIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *ControlImplementationUpdate) RemoveEditors(v ...*Group) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (_u *ControlImplementationUpdate) ClearViewers() *ControlImplementationUpdate {
	_u.mutation.ClearViewers()
	return _u
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (_u *ControlImplementationUpdate) RemoveViewerIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.RemoveViewerIDs(ids...)
	return _u
}

// RemoveViewers removes "viewers" edges to Group entities.
func (_u *ControlImplementationUpdate) RemoveViewers(v ...*Group) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveViewerIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *ControlImplementationUpdate) ClearControls() *ControlImplementationUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *ControlImplementationUpdate) RemoveControlIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *ControlImplementationUpdate) RemoveControls(v ...*Control) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *ControlImplementationUpdate) ClearSubcontrols() *ControlImplementationUpdate {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *ControlImplementationUpdate) RemoveSubcontrolIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *ControlImplementationUpdate) RemoveSubcontrols(v ...*Subcontrol) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *ControlImplementationUpdate) ClearTasks() *ControlImplementationUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *ControlImplementationUpdate) RemoveTaskIDs(ids ...string) *ControlImplementationUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *ControlImplementationUpdate) RemoveTasks(v ...*Task) *ControlImplementationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ControlImplementationUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ControlImplementationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ControlImplementationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ControlImplementationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ControlImplementationUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if controlimplementation.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlimplementation.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlimplementation.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ControlImplementationUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := controlimplementation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ControlImplementation.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ControlImplementationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlImplementationUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ControlImplementationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(controlimplementation.Table, controlimplementation.Columns, sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(controlimplementation.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(controlimplementation.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlimplementation.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(controlimplementation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(controlimplementation.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(controlimplementation.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(controlimplementation.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(controlimplementation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(controlimplementation.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(controlimplementation.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(controlimplementation.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlimplementation.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(controlimplementation.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(controlimplementation.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(controlimplementation.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ImplementationDate(); ok {
		_spec.SetField(controlimplementation.FieldImplementationDate, field.TypeTime, value)
	}
	if _u.mutation.ImplementationDateCleared() {
		_spec.ClearField(controlimplementation.FieldImplementationDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(controlimplementation.FieldVerified, field.TypeBool, value)
	}
	if _u.mutation.VerifiedCleared() {
		_spec.ClearField(controlimplementation.FieldVerified, field.TypeBool)
	}
	if value, ok := _u.mutation.VerificationDate(); ok {
		_spec.SetField(controlimplementation.FieldVerificationDate, field.TypeTime, value)
	}
	if _u.mutation.VerificationDateCleared() {
		_spec.ClearField(controlimplementation.FieldVerificationDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(controlimplementation.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(controlimplementation.FieldDetails, field.TypeString)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.BlockedGroupsTable,
			Columns: controlimplementation.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.BlockedGroupsTable,
			Columns: controlimplementation.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.BlockedGroupsTable,
			Columns: controlimplementation.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.EditorsTable,
			Columns: controlimplementation.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.EditorsTable,
			Columns: controlimplementation.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.EditorsTable,
			Columns: controlimplementation.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.ViewersTable,
			Columns: controlimplementation.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedViewersIDs(); len(nodes) > 0 && !_u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.ViewersTable,
			Columns: controlimplementation.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.ViewersTable,
			Columns: controlimplementation.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.SubcontrolsTable,
			Columns: controlimplementation.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.SubcontrolsTable,
			Columns: controlimplementation.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.SubcontrolsTable,
			Columns: controlimplementation.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.TasksTable,
			Columns: controlimplementation.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.TasksTable,
			Columns: controlimplementation.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.TasksTable,
			Columns: controlimplementation.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.ControlImplementation
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlimplementation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ControlImplementationUpdateOne is the builder for updating a single ControlImplementation entity.
type ControlImplementationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlImplementationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ControlImplementationUpdateOne) SetUpdatedAt(v time.Time) *ControlImplementationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ControlImplementationUpdateOne) ClearUpdatedAt() *ControlImplementationUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ControlImplementationUpdateOne) SetUpdatedBy(v string) *ControlImplementationUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ControlImplementationUpdateOne) SetNillableUpdatedBy(v *string) *ControlImplementationUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ControlImplementationUpdateOne) ClearUpdatedBy() *ControlImplementationUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ControlImplementationUpdateOne) SetDeletedAt(v time.Time) *ControlImplementationUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ControlImplementationUpdateOne) SetNillableDeletedAt(v *time.Time) *ControlImplementationUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ControlImplementationUpdateOne) ClearDeletedAt() *ControlImplementationUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ControlImplementationUpdateOne) SetDeletedBy(v string) *ControlImplementationUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ControlImplementationUpdateOne) SetNillableDeletedBy(v *string) *ControlImplementationUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ControlImplementationUpdateOne) ClearDeletedBy() *ControlImplementationUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ControlImplementationUpdateOne) SetTags(v []string) *ControlImplementationUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ControlImplementationUpdateOne) AppendTags(v []string) *ControlImplementationUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ControlImplementationUpdateOne) ClearTags() *ControlImplementationUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ControlImplementationUpdateOne) SetStatus(v enums.DocumentStatus) *ControlImplementationUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ControlImplementationUpdateOne) SetNillableStatus(v *enums.DocumentStatus) *ControlImplementationUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ControlImplementationUpdateOne) ClearStatus() *ControlImplementationUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetImplementationDate sets the "implementation_date" field.
func (_u *ControlImplementationUpdateOne) SetImplementationDate(v time.Time) *ControlImplementationUpdateOne {
	_u.mutation.SetImplementationDate(v)
	return _u
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (_u *ControlImplementationUpdateOne) SetNillableImplementationDate(v *time.Time) *ControlImplementationUpdateOne {
	if v != nil {
		_u.SetImplementationDate(*v)
	}
	return _u
}

// ClearImplementationDate clears the value of the "implementation_date" field.
func (_u *ControlImplementationUpdateOne) ClearImplementationDate() *ControlImplementationUpdateOne {
	_u.mutation.ClearImplementationDate()
	return _u
}

// SetVerified sets the "verified" field.
func (_u *ControlImplementationUpdateOne) SetVerified(v bool) *ControlImplementationUpdateOne {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *ControlImplementationUpdateOne) SetNillableVerified(v *bool) *ControlImplementationUpdateOne {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// ClearVerified clears the value of the "verified" field.
func (_u *ControlImplementationUpdateOne) ClearVerified() *ControlImplementationUpdateOne {
	_u.mutation.ClearVerified()
	return _u
}

// SetVerificationDate sets the "verification_date" field.
func (_u *ControlImplementationUpdateOne) SetVerificationDate(v time.Time) *ControlImplementationUpdateOne {
	_u.mutation.SetVerificationDate(v)
	return _u
}

// SetNillableVerificationDate sets the "verification_date" field if the given value is not nil.
func (_u *ControlImplementationUpdateOne) SetNillableVerificationDate(v *time.Time) *ControlImplementationUpdateOne {
	if v != nil {
		_u.SetVerificationDate(*v)
	}
	return _u
}

// ClearVerificationDate clears the value of the "verification_date" field.
func (_u *ControlImplementationUpdateOne) ClearVerificationDate() *ControlImplementationUpdateOne {
	_u.mutation.ClearVerificationDate()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ControlImplementationUpdateOne) SetDetails(v string) *ControlImplementationUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ControlImplementationUpdateOne) SetNillableDetails(v *string) *ControlImplementationUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ControlImplementationUpdateOne) ClearDetails() *ControlImplementationUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *ControlImplementationUpdateOne) AddBlockedGroupIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *ControlImplementationUpdateOne) AddBlockedGroups(v ...*Group) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *ControlImplementationUpdateOne) AddEditorIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *ControlImplementationUpdateOne) AddEditors(v ...*Group) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_u *ControlImplementationUpdateOne) AddViewerIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.AddViewerIDs(ids...)
	return _u
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_u *ControlImplementationUpdateOne) AddViewers(v ...*Group) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddViewerIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *ControlImplementationUpdateOne) AddControlIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *ControlImplementationUpdateOne) AddControls(v ...*Control) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *ControlImplementationUpdateOne) AddSubcontrolIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *ControlImplementationUpdateOne) AddSubcontrols(v ...*Subcontrol) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *ControlImplementationUpdateOne) AddTaskIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *ControlImplementationUpdateOne) AddTasks(v ...*Task) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// Mutation returns the ControlImplementationMutation object of the builder.
func (_u *ControlImplementationUpdateOne) Mutation() *ControlImplementationMutation {
	return _u.mutation
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *ControlImplementationUpdateOne) ClearBlockedGroups() *ControlImplementationUpdateOne {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *ControlImplementationUpdateOne) RemoveBlockedGroupIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *ControlImplementationUpdateOne) RemoveBlockedGroups(v ...*Group) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *ControlImplementationUpdateOne) ClearEditors() *ControlImplementationUpdateOne {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *ControlImplementationUpdateOne) RemoveEditorIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *ControlImplementationUpdateOne) RemoveEditors(v ...*Group) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (_u *ControlImplementationUpdateOne) ClearViewers() *ControlImplementationUpdateOne {
	_u.mutation.ClearViewers()
	return _u
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (_u *ControlImplementationUpdateOne) RemoveViewerIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.RemoveViewerIDs(ids...)
	return _u
}

// RemoveViewers removes "viewers" edges to Group entities.
func (_u *ControlImplementationUpdateOne) RemoveViewers(v ...*Group) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveViewerIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *ControlImplementationUpdateOne) ClearControls() *ControlImplementationUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *ControlImplementationUpdateOne) RemoveControlIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *ControlImplementationUpdateOne) RemoveControls(v ...*Control) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *ControlImplementationUpdateOne) ClearSubcontrols() *ControlImplementationUpdateOne {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *ControlImplementationUpdateOne) RemoveSubcontrolIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *ControlImplementationUpdateOne) RemoveSubcontrols(v ...*Subcontrol) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *ControlImplementationUpdateOne) ClearTasks() *ControlImplementationUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *ControlImplementationUpdateOne) RemoveTaskIDs(ids ...string) *ControlImplementationUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *ControlImplementationUpdateOne) RemoveTasks(v ...*Task) *ControlImplementationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the ControlImplementationUpdate builder.
func (_u *ControlImplementationUpdateOne) Where(ps ...predicate.ControlImplementation) *ControlImplementationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ControlImplementationUpdateOne) Select(field string, fields ...string) *ControlImplementationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ControlImplementation entity.
func (_u *ControlImplementationUpdateOne) Save(ctx context.Context) (*ControlImplementation, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ControlImplementationUpdateOne) SaveX(ctx context.Context) *ControlImplementation {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ControlImplementationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ControlImplementationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ControlImplementationUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if controlimplementation.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlimplementation.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlimplementation.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ControlImplementationUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := controlimplementation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ControlImplementation.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ControlImplementationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlImplementationUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ControlImplementationUpdateOne) sqlSave(ctx context.Context) (_node *ControlImplementation, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(controlimplementation.Table, controlimplementation.Columns, sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ControlImplementation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlimplementation.FieldID)
		for _, f := range fields {
			if !controlimplementation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != controlimplementation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(controlimplementation.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(controlimplementation.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlimplementation.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(controlimplementation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(controlimplementation.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(controlimplementation.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(controlimplementation.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(controlimplementation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(controlimplementation.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(controlimplementation.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(controlimplementation.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlimplementation.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(controlimplementation.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(controlimplementation.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(controlimplementation.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ImplementationDate(); ok {
		_spec.SetField(controlimplementation.FieldImplementationDate, field.TypeTime, value)
	}
	if _u.mutation.ImplementationDateCleared() {
		_spec.ClearField(controlimplementation.FieldImplementationDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(controlimplementation.FieldVerified, field.TypeBool, value)
	}
	if _u.mutation.VerifiedCleared() {
		_spec.ClearField(controlimplementation.FieldVerified, field.TypeBool)
	}
	if value, ok := _u.mutation.VerificationDate(); ok {
		_spec.SetField(controlimplementation.FieldVerificationDate, field.TypeTime, value)
	}
	if _u.mutation.VerificationDateCleared() {
		_spec.ClearField(controlimplementation.FieldVerificationDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(controlimplementation.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(controlimplementation.FieldDetails, field.TypeString)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.BlockedGroupsTable,
			Columns: controlimplementation.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.BlockedGroupsTable,
			Columns: controlimplementation.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.BlockedGroupsTable,
			Columns: controlimplementation.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.EditorsTable,
			Columns: controlimplementation.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.EditorsTable,
			Columns: controlimplementation.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.EditorsTable,
			Columns: controlimplementation.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.ViewersTable,
			Columns: controlimplementation.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedViewersIDs(); len(nodes) > 0 && !_u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.ViewersTable,
			Columns: controlimplementation.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.ViewersTable,
			Columns: controlimplementation.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.ControlsTable,
			Columns: controlimplementation.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.SubcontrolsTable,
			Columns: controlimplementation.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.SubcontrolsTable,
			Columns: controlimplementation.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlimplementation.SubcontrolsTable,
			Columns: controlimplementation.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.TasksTable,
			Columns: controlimplementation.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.TasksTable,
			Columns: controlimplementation.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlimplementation.TasksTable,
			Columns: controlimplementation.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.ControlImplementation
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ControlImplementation{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlimplementation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
