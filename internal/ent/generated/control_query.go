// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlQuery is the builder for querying Control entities.
type ControlQuery struct {
	config
	ctx                        *QueryContext
	order                      []control.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Control
	withProcedures             *ProcedureQuery
	withSubcontrols            *SubcontrolQuery
	withControlobjectives      *ControlObjectiveQuery
	withStandard               *StandardQuery
	withNarratives             *NarrativeQuery
	withRisks                  *RiskQuery
	withActionplans            *ActionPlanQuery
	withTasks                  *TaskQuery
	withPrograms               *ProgramQuery
	withFKs                    bool
	loadTotal                  []func(context.Context, []*Control) error
	modifiers                  []func(*sql.Selector)
	withNamedProcedures        map[string]*ProcedureQuery
	withNamedSubcontrols       map[string]*SubcontrolQuery
	withNamedControlobjectives map[string]*ControlObjectiveQuery
	withNamedStandard          map[string]*StandardQuery
	withNamedNarratives        map[string]*NarrativeQuery
	withNamedRisks             map[string]*RiskQuery
	withNamedActionplans       map[string]*ActionPlanQuery
	withNamedTasks             map[string]*TaskQuery
	withNamedPrograms          map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ControlQuery builder.
func (cq *ControlQuery) Where(ps ...predicate.Control) *ControlQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ControlQuery) Limit(limit int) *ControlQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ControlQuery) Offset(offset int) *ControlQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ControlQuery) Unique(unique bool) *ControlQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ControlQuery) Order(o ...control.OrderOption) *ControlQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryProcedures chains the current query on the "procedures" edge.
func (cq *ControlQuery) QueryProcedures() *ProcedureQuery {
	query := (&ProcedureClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, control.ProceduresTable, control.ProceduresPrimaryKey...),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.ControlProcedures
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubcontrols chains the current query on the "subcontrols" edge.
func (cq *ControlQuery) QuerySubcontrols() *SubcontrolQuery {
	query := (&SubcontrolClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(subcontrol.Table, subcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, control.SubcontrolsTable, control.SubcontrolsPrimaryKey...),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.ControlSubcontrols
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlobjectives chains the current query on the "controlobjectives" edge.
func (cq *ControlQuery) QueryControlobjectives() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, control.ControlobjectivesTable, control.ControlobjectivesColumn),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjective
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStandard chains the current query on the "standard" edge.
func (cq *ControlQuery) QueryStandard() *StandardQuery {
	query := (&StandardClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(standard.Table, standard.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, control.StandardTable, control.StandardPrimaryKey...),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.Standard
		step.Edge.Schema = schemaConfig.StandardControls
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarratives chains the current query on the "narratives" edge.
func (cq *ControlQuery) QueryNarratives() *NarrativeQuery {
	query := (&NarrativeClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, control.NarrativesTable, control.NarrativesPrimaryKey...),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.ControlNarratives
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisks chains the current query on the "risks" edge.
func (cq *ControlQuery) QueryRisks() *RiskQuery {
	query := (&RiskClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, control.RisksTable, control.RisksPrimaryKey...),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.ControlRisks
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActionplans chains the current query on the "actionplans" edge.
func (cq *ControlQuery) QueryActionplans() *ActionPlanQuery {
	query := (&ActionPlanClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(actionplan.Table, actionplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, control.ActionplansTable, control.ActionplansPrimaryKey...),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.ControlActionplans
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (cq *ControlQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, control.TasksTable, control.TasksPrimaryKey...),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.ControlTasks
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (cq *ControlQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(control.Table, control.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, control.ProgramsTable, control.ProgramsPrimaryKey...),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramControls
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Control entity from the query.
// Returns a *NotFoundError when no Control was found.
func (cq *ControlQuery) First(ctx context.Context) (*Control, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{control.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ControlQuery) FirstX(ctx context.Context) *Control {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Control ID from the query.
// Returns a *NotFoundError when no Control ID was found.
func (cq *ControlQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{control.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ControlQuery) FirstIDX(ctx context.Context) string {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Control entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Control entity is found.
// Returns a *NotFoundError when no Control entities are found.
func (cq *ControlQuery) Only(ctx context.Context) (*Control, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{control.Label}
	default:
		return nil, &NotSingularError{control.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ControlQuery) OnlyX(ctx context.Context) *Control {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Control ID in the query.
// Returns a *NotSingularError when more than one Control ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ControlQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{control.Label}
	default:
		err = &NotSingularError{control.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ControlQuery) OnlyIDX(ctx context.Context) string {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Controls.
func (cq *ControlQuery) All(ctx context.Context) ([]*Control, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Control, *ControlQuery]()
	return withInterceptors[[]*Control](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ControlQuery) AllX(ctx context.Context) []*Control {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Control IDs.
func (cq *ControlQuery) IDs(ctx context.Context) (ids []string, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(control.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ControlQuery) IDsX(ctx context.Context) []string {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ControlQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ControlQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ControlQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ControlQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ControlQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ControlQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ControlQuery) Clone() *ControlQuery {
	if cq == nil {
		return nil
	}
	return &ControlQuery{
		config:                cq.config,
		ctx:                   cq.ctx.Clone(),
		order:                 append([]control.OrderOption{}, cq.order...),
		inters:                append([]Interceptor{}, cq.inters...),
		predicates:            append([]predicate.Control{}, cq.predicates...),
		withProcedures:        cq.withProcedures.Clone(),
		withSubcontrols:       cq.withSubcontrols.Clone(),
		withControlobjectives: cq.withControlobjectives.Clone(),
		withStandard:          cq.withStandard.Clone(),
		withNarratives:        cq.withNarratives.Clone(),
		withRisks:             cq.withRisks.Clone(),
		withActionplans:       cq.withActionplans.Clone(),
		withTasks:             cq.withTasks.Clone(),
		withPrograms:          cq.withPrograms.Clone(),
		// clone intermediate query.
		sql:       cq.sql.Clone(),
		path:      cq.path,
		modifiers: append([]func(*sql.Selector){}, cq.modifiers...),
	}
}

// WithProcedures tells the query-builder to eager-load the nodes that are connected to
// the "procedures" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithProcedures(opts ...func(*ProcedureQuery)) *ControlQuery {
	query := (&ProcedureClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withProcedures = query
	return cq
}

// WithSubcontrols tells the query-builder to eager-load the nodes that are connected to
// the "subcontrols" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithSubcontrols(opts ...func(*SubcontrolQuery)) *ControlQuery {
	query := (&SubcontrolClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withSubcontrols = query
	return cq
}

// WithControlobjectives tells the query-builder to eager-load the nodes that are connected to
// the "controlobjectives" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithControlobjectives(opts ...func(*ControlObjectiveQuery)) *ControlQuery {
	query := (&ControlObjectiveClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withControlobjectives = query
	return cq
}

// WithStandard tells the query-builder to eager-load the nodes that are connected to
// the "standard" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithStandard(opts ...func(*StandardQuery)) *ControlQuery {
	query := (&StandardClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withStandard = query
	return cq
}

// WithNarratives tells the query-builder to eager-load the nodes that are connected to
// the "narratives" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNarratives(opts ...func(*NarrativeQuery)) *ControlQuery {
	query := (&NarrativeClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withNarratives = query
	return cq
}

// WithRisks tells the query-builder to eager-load the nodes that are connected to
// the "risks" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithRisks(opts ...func(*RiskQuery)) *ControlQuery {
	query := (&RiskClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withRisks = query
	return cq
}

// WithActionplans tells the query-builder to eager-load the nodes that are connected to
// the "actionplans" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithActionplans(opts ...func(*ActionPlanQuery)) *ControlQuery {
	query := (&ActionPlanClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withActionplans = query
	return cq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithTasks(opts ...func(*TaskQuery)) *ControlQuery {
	query := (&TaskClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTasks = query
	return cq
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithPrograms(opts ...func(*ProgramQuery)) *ControlQuery {
	query := (&ProgramClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPrograms = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Control.Query().
//		GroupBy(control.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (cq *ControlQuery) GroupBy(field string, fields ...string) *ControlGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ControlGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = control.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Control.Query().
//		Select(control.FieldCreatedAt).
//		Scan(ctx, &v)
func (cq *ControlQuery) Select(fields ...string) *ControlSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ControlSelect{ControlQuery: cq}
	sbuild.label = control.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ControlSelect configured with the given aggregations.
func (cq *ControlQuery) Aggregate(fns ...AggregateFunc) *ControlSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ControlQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !control.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *ControlQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Control, error) {
	var (
		nodes       = []*Control{}
		withFKs     = cq.withFKs
		_spec       = cq.querySpec()
		loadedTypes = [9]bool{
			cq.withProcedures != nil,
			cq.withSubcontrols != nil,
			cq.withControlobjectives != nil,
			cq.withStandard != nil,
			cq.withNarratives != nil,
			cq.withRisks != nil,
			cq.withActionplans != nil,
			cq.withTasks != nil,
			cq.withPrograms != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, control.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Control).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Control{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = cq.schemaConfig.Control
	ctx = internal.NewSchemaConfigContext(ctx, cq.schemaConfig)
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withProcedures; query != nil {
		if err := cq.loadProcedures(ctx, query, nodes,
			func(n *Control) { n.Edges.Procedures = []*Procedure{} },
			func(n *Control, e *Procedure) { n.Edges.Procedures = append(n.Edges.Procedures, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withSubcontrols; query != nil {
		if err := cq.loadSubcontrols(ctx, query, nodes,
			func(n *Control) { n.Edges.Subcontrols = []*Subcontrol{} },
			func(n *Control, e *Subcontrol) { n.Edges.Subcontrols = append(n.Edges.Subcontrols, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withControlobjectives; query != nil {
		if err := cq.loadControlobjectives(ctx, query, nodes,
			func(n *Control) { n.Edges.Controlobjectives = []*ControlObjective{} },
			func(n *Control, e *ControlObjective) {
				n.Edges.Controlobjectives = append(n.Edges.Controlobjectives, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withStandard; query != nil {
		if err := cq.loadStandard(ctx, query, nodes,
			func(n *Control) { n.Edges.Standard = []*Standard{} },
			func(n *Control, e *Standard) { n.Edges.Standard = append(n.Edges.Standard, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withNarratives; query != nil {
		if err := cq.loadNarratives(ctx, query, nodes,
			func(n *Control) { n.Edges.Narratives = []*Narrative{} },
			func(n *Control, e *Narrative) { n.Edges.Narratives = append(n.Edges.Narratives, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withRisks; query != nil {
		if err := cq.loadRisks(ctx, query, nodes,
			func(n *Control) { n.Edges.Risks = []*Risk{} },
			func(n *Control, e *Risk) { n.Edges.Risks = append(n.Edges.Risks, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withActionplans; query != nil {
		if err := cq.loadActionplans(ctx, query, nodes,
			func(n *Control) { n.Edges.Actionplans = []*ActionPlan{} },
			func(n *Control, e *ActionPlan) { n.Edges.Actionplans = append(n.Edges.Actionplans, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withTasks; query != nil {
		if err := cq.loadTasks(ctx, query, nodes,
			func(n *Control) { n.Edges.Tasks = []*Task{} },
			func(n *Control, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPrograms; query != nil {
		if err := cq.loadPrograms(ctx, query, nodes,
			func(n *Control) { n.Edges.Programs = []*Program{} },
			func(n *Control, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedProcedures {
		if err := cq.loadProcedures(ctx, query, nodes,
			func(n *Control) { n.appendNamedProcedures(name) },
			func(n *Control, e *Procedure) { n.appendNamedProcedures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedSubcontrols {
		if err := cq.loadSubcontrols(ctx, query, nodes,
			func(n *Control) { n.appendNamedSubcontrols(name) },
			func(n *Control, e *Subcontrol) { n.appendNamedSubcontrols(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedControlobjectives {
		if err := cq.loadControlobjectives(ctx, query, nodes,
			func(n *Control) { n.appendNamedControlobjectives(name) },
			func(n *Control, e *ControlObjective) { n.appendNamedControlobjectives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedStandard {
		if err := cq.loadStandard(ctx, query, nodes,
			func(n *Control) { n.appendNamedStandard(name) },
			func(n *Control, e *Standard) { n.appendNamedStandard(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedNarratives {
		if err := cq.loadNarratives(ctx, query, nodes,
			func(n *Control) { n.appendNamedNarratives(name) },
			func(n *Control, e *Narrative) { n.appendNamedNarratives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedRisks {
		if err := cq.loadRisks(ctx, query, nodes,
			func(n *Control) { n.appendNamedRisks(name) },
			func(n *Control, e *Risk) { n.appendNamedRisks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedActionplans {
		if err := cq.loadActionplans(ctx, query, nodes,
			func(n *Control) { n.appendNamedActionplans(name) },
			func(n *Control, e *ActionPlan) { n.appendNamedActionplans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedTasks {
		if err := cq.loadTasks(ctx, query, nodes,
			func(n *Control) { n.appendNamedTasks(name) },
			func(n *Control, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedPrograms {
		if err := cq.loadPrograms(ctx, query, nodes,
			func(n *Control) { n.appendNamedPrograms(name) },
			func(n *Control, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ControlQuery) loadProcedures(ctx context.Context, query *ProcedureQuery, nodes []*Control, init func(*Control), assign func(*Control, *Procedure)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Control)
	nids := make(map[string]map[*Control]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(control.ProceduresTable)
		joinT.Schema(cq.schemaConfig.ControlProcedures)
		s.Join(joinT).On(s.C(procedure.FieldID), joinT.C(control.ProceduresPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(control.ProceduresPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(control.ProceduresPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Control]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Procedure](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "procedures" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ControlQuery) loadSubcontrols(ctx context.Context, query *SubcontrolQuery, nodes []*Control, init func(*Control), assign func(*Control, *Subcontrol)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Control)
	nids := make(map[string]map[*Control]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(control.SubcontrolsTable)
		joinT.Schema(cq.schemaConfig.ControlSubcontrols)
		s.Join(joinT).On(s.C(subcontrol.FieldID), joinT.C(control.SubcontrolsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(control.SubcontrolsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(control.SubcontrolsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Control]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subcontrol](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subcontrols" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ControlQuery) loadControlobjectives(ctx context.Context, query *ControlObjectiveQuery, nodes []*Control, init func(*Control), assign func(*Control, *ControlObjective)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Control)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ControlObjective(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(control.ControlobjectivesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.control_controlobjectives
		if fk == nil {
			return fmt.Errorf(`foreign-key "control_controlobjectives" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "control_controlobjectives" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ControlQuery) loadStandard(ctx context.Context, query *StandardQuery, nodes []*Control, init func(*Control), assign func(*Control, *Standard)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Control)
	nids := make(map[string]map[*Control]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(control.StandardTable)
		joinT.Schema(cq.schemaConfig.StandardControls)
		s.Join(joinT).On(s.C(standard.FieldID), joinT.C(control.StandardPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(control.StandardPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(control.StandardPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Control]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Standard](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "standard" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ControlQuery) loadNarratives(ctx context.Context, query *NarrativeQuery, nodes []*Control, init func(*Control), assign func(*Control, *Narrative)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Control)
	nids := make(map[string]map[*Control]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(control.NarrativesTable)
		joinT.Schema(cq.schemaConfig.ControlNarratives)
		s.Join(joinT).On(s.C(narrative.FieldID), joinT.C(control.NarrativesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(control.NarrativesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(control.NarrativesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Control]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Narrative](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "narratives" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ControlQuery) loadRisks(ctx context.Context, query *RiskQuery, nodes []*Control, init func(*Control), assign func(*Control, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Control)
	nids := make(map[string]map[*Control]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(control.RisksTable)
		joinT.Schema(cq.schemaConfig.ControlRisks)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(control.RisksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(control.RisksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(control.RisksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Control]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ControlQuery) loadActionplans(ctx context.Context, query *ActionPlanQuery, nodes []*Control, init func(*Control), assign func(*Control, *ActionPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Control)
	nids := make(map[string]map[*Control]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(control.ActionplansTable)
		joinT.Schema(cq.schemaConfig.ControlActionplans)
		s.Join(joinT).On(s.C(actionplan.FieldID), joinT.C(control.ActionplansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(control.ActionplansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(control.ActionplansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Control]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ActionPlan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "actionplans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ControlQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Control, init func(*Control), assign func(*Control, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Control)
	nids := make(map[string]map[*Control]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(control.TasksTable)
		joinT.Schema(cq.schemaConfig.ControlTasks)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(control.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(control.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(control.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Control]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ControlQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Control, init func(*Control), assign func(*Control, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Control)
	nids := make(map[string]map[*Control]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(control.ProgramsTable)
		joinT.Schema(cq.schemaConfig.ProgramControls)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(control.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(control.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(control.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Control]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cq *ControlQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	_spec.Node.Schema = cq.schemaConfig.Control
	ctx = internal.NewSchemaConfigContext(ctx, cq.schemaConfig)
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ControlQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(control.Table, control.Columns, sqlgraph.NewFieldSpec(control.FieldID, field.TypeString))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, control.FieldID)
		for i := range fields {
			if fields[i] != control.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ControlQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(control.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = control.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(cq.schemaConfig.Control)
	ctx = internal.NewSchemaConfigContext(ctx, cq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range cq.modifiers {
		m(selector)
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cq *ControlQuery) Modify(modifiers ...func(s *sql.Selector)) *ControlSelect {
	cq.modifiers = append(cq.modifiers, modifiers...)
	return cq.Select()
}

// WithNamedProcedures tells the query-builder to eager-load the nodes that are connected to the "procedures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedProcedures(name string, opts ...func(*ProcedureQuery)) *ControlQuery {
	query := (&ProcedureClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedProcedures == nil {
		cq.withNamedProcedures = make(map[string]*ProcedureQuery)
	}
	cq.withNamedProcedures[name] = query
	return cq
}

// WithNamedSubcontrols tells the query-builder to eager-load the nodes that are connected to the "subcontrols"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedSubcontrols(name string, opts ...func(*SubcontrolQuery)) *ControlQuery {
	query := (&SubcontrolClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedSubcontrols == nil {
		cq.withNamedSubcontrols = make(map[string]*SubcontrolQuery)
	}
	cq.withNamedSubcontrols[name] = query
	return cq
}

// WithNamedControlobjectives tells the query-builder to eager-load the nodes that are connected to the "controlobjectives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedControlobjectives(name string, opts ...func(*ControlObjectiveQuery)) *ControlQuery {
	query := (&ControlObjectiveClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedControlobjectives == nil {
		cq.withNamedControlobjectives = make(map[string]*ControlObjectiveQuery)
	}
	cq.withNamedControlobjectives[name] = query
	return cq
}

// WithNamedStandard tells the query-builder to eager-load the nodes that are connected to the "standard"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedStandard(name string, opts ...func(*StandardQuery)) *ControlQuery {
	query := (&StandardClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedStandard == nil {
		cq.withNamedStandard = make(map[string]*StandardQuery)
	}
	cq.withNamedStandard[name] = query
	return cq
}

// WithNamedNarratives tells the query-builder to eager-load the nodes that are connected to the "narratives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedNarratives(name string, opts ...func(*NarrativeQuery)) *ControlQuery {
	query := (&NarrativeClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedNarratives == nil {
		cq.withNamedNarratives = make(map[string]*NarrativeQuery)
	}
	cq.withNamedNarratives[name] = query
	return cq
}

// WithNamedRisks tells the query-builder to eager-load the nodes that are connected to the "risks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedRisks(name string, opts ...func(*RiskQuery)) *ControlQuery {
	query := (&RiskClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedRisks == nil {
		cq.withNamedRisks = make(map[string]*RiskQuery)
	}
	cq.withNamedRisks[name] = query
	return cq
}

// WithNamedActionplans tells the query-builder to eager-load the nodes that are connected to the "actionplans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedActionplans(name string, opts ...func(*ActionPlanQuery)) *ControlQuery {
	query := (&ActionPlanClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedActionplans == nil {
		cq.withNamedActionplans = make(map[string]*ActionPlanQuery)
	}
	cq.withNamedActionplans[name] = query
	return cq
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *ControlQuery {
	query := (&TaskClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedTasks == nil {
		cq.withNamedTasks = make(map[string]*TaskQuery)
	}
	cq.withNamedTasks[name] = query
	return cq
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ControlQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *ControlQuery {
	query := (&ProgramClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedPrograms == nil {
		cq.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	cq.withNamedPrograms[name] = query
	return cq
}

// ControlGroupBy is the group-by builder for Control entities.
type ControlGroupBy struct {
	selector
	build *ControlQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ControlGroupBy) Aggregate(fns ...AggregateFunc) *ControlGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ControlGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ControlQuery, *ControlGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ControlGroupBy) sqlScan(ctx context.Context, root *ControlQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ControlSelect is the builder for selecting fields of Control entities.
type ControlSelect struct {
	*ControlQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ControlSelect) Aggregate(fns ...AggregateFunc) *ControlSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ControlSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ControlQuery, *ControlSelect](ctx, cs.ControlQuery, cs, cs.inters, v)
}

func (cs *ControlSelect) sqlScan(ctx context.Context, root *ControlQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cs *ControlSelect) Modify(modifiers ...func(s *sql.Selector)) *ControlSelect {
	cs.modifiers = append(cs.modifiers, modifiers...)
	return cs
}
