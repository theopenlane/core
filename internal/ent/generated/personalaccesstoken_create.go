// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// PersonalAccessTokenCreate is the builder for creating a PersonalAccessToken entity.
type PersonalAccessTokenCreate struct {
	config
	mutation *PersonalAccessTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (patc *PersonalAccessTokenCreate) SetCreatedAt(t time.Time) *PersonalAccessTokenCreate {
	patc.mutation.SetCreatedAt(t)
	return patc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableCreatedAt(t *time.Time) *PersonalAccessTokenCreate {
	if t != nil {
		patc.SetCreatedAt(*t)
	}
	return patc
}

// SetUpdatedAt sets the "updated_at" field.
func (patc *PersonalAccessTokenCreate) SetUpdatedAt(t time.Time) *PersonalAccessTokenCreate {
	patc.mutation.SetUpdatedAt(t)
	return patc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableUpdatedAt(t *time.Time) *PersonalAccessTokenCreate {
	if t != nil {
		patc.SetUpdatedAt(*t)
	}
	return patc
}

// SetCreatedBy sets the "created_by" field.
func (patc *PersonalAccessTokenCreate) SetCreatedBy(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetCreatedBy(s)
	return patc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableCreatedBy(s *string) *PersonalAccessTokenCreate {
	if s != nil {
		patc.SetCreatedBy(*s)
	}
	return patc
}

// SetUpdatedBy sets the "updated_by" field.
func (patc *PersonalAccessTokenCreate) SetUpdatedBy(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetUpdatedBy(s)
	return patc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableUpdatedBy(s *string) *PersonalAccessTokenCreate {
	if s != nil {
		patc.SetUpdatedBy(*s)
	}
	return patc
}

// SetDeletedAt sets the "deleted_at" field.
func (patc *PersonalAccessTokenCreate) SetDeletedAt(t time.Time) *PersonalAccessTokenCreate {
	patc.mutation.SetDeletedAt(t)
	return patc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableDeletedAt(t *time.Time) *PersonalAccessTokenCreate {
	if t != nil {
		patc.SetDeletedAt(*t)
	}
	return patc
}

// SetDeletedBy sets the "deleted_by" field.
func (patc *PersonalAccessTokenCreate) SetDeletedBy(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetDeletedBy(s)
	return patc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableDeletedBy(s *string) *PersonalAccessTokenCreate {
	if s != nil {
		patc.SetDeletedBy(*s)
	}
	return patc
}

// SetTags sets the "tags" field.
func (patc *PersonalAccessTokenCreate) SetTags(s []string) *PersonalAccessTokenCreate {
	patc.mutation.SetTags(s)
	return patc
}

// SetOwnerID sets the "owner_id" field.
func (patc *PersonalAccessTokenCreate) SetOwnerID(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetOwnerID(s)
	return patc
}

// SetName sets the "name" field.
func (patc *PersonalAccessTokenCreate) SetName(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetName(s)
	return patc
}

// SetToken sets the "token" field.
func (patc *PersonalAccessTokenCreate) SetToken(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetToken(s)
	return patc
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableToken(s *string) *PersonalAccessTokenCreate {
	if s != nil {
		patc.SetToken(*s)
	}
	return patc
}

// SetExpiresAt sets the "expires_at" field.
func (patc *PersonalAccessTokenCreate) SetExpiresAt(t time.Time) *PersonalAccessTokenCreate {
	patc.mutation.SetExpiresAt(t)
	return patc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableExpiresAt(t *time.Time) *PersonalAccessTokenCreate {
	if t != nil {
		patc.SetExpiresAt(*t)
	}
	return patc
}

// SetDescription sets the "description" field.
func (patc *PersonalAccessTokenCreate) SetDescription(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetDescription(s)
	return patc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableDescription(s *string) *PersonalAccessTokenCreate {
	if s != nil {
		patc.SetDescription(*s)
	}
	return patc
}

// SetScopes sets the "scopes" field.
func (patc *PersonalAccessTokenCreate) SetScopes(s []string) *PersonalAccessTokenCreate {
	patc.mutation.SetScopes(s)
	return patc
}

// SetLastUsedAt sets the "last_used_at" field.
func (patc *PersonalAccessTokenCreate) SetLastUsedAt(t time.Time) *PersonalAccessTokenCreate {
	patc.mutation.SetLastUsedAt(t)
	return patc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableLastUsedAt(t *time.Time) *PersonalAccessTokenCreate {
	if t != nil {
		patc.SetLastUsedAt(*t)
	}
	return patc
}

// SetIsActive sets the "is_active" field.
func (patc *PersonalAccessTokenCreate) SetIsActive(b bool) *PersonalAccessTokenCreate {
	patc.mutation.SetIsActive(b)
	return patc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableIsActive(b *bool) *PersonalAccessTokenCreate {
	if b != nil {
		patc.SetIsActive(*b)
	}
	return patc
}

// SetRevokedReason sets the "revoked_reason" field.
func (patc *PersonalAccessTokenCreate) SetRevokedReason(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetRevokedReason(s)
	return patc
}

// SetNillableRevokedReason sets the "revoked_reason" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableRevokedReason(s *string) *PersonalAccessTokenCreate {
	if s != nil {
		patc.SetRevokedReason(*s)
	}
	return patc
}

// SetRevokedBy sets the "revoked_by" field.
func (patc *PersonalAccessTokenCreate) SetRevokedBy(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetRevokedBy(s)
	return patc
}

// SetNillableRevokedBy sets the "revoked_by" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableRevokedBy(s *string) *PersonalAccessTokenCreate {
	if s != nil {
		patc.SetRevokedBy(*s)
	}
	return patc
}

// SetRevokedAt sets the "revoked_at" field.
func (patc *PersonalAccessTokenCreate) SetRevokedAt(t time.Time) *PersonalAccessTokenCreate {
	patc.mutation.SetRevokedAt(t)
	return patc
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableRevokedAt(t *time.Time) *PersonalAccessTokenCreate {
	if t != nil {
		patc.SetRevokedAt(*t)
	}
	return patc
}

// SetID sets the "id" field.
func (patc *PersonalAccessTokenCreate) SetID(s string) *PersonalAccessTokenCreate {
	patc.mutation.SetID(s)
	return patc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (patc *PersonalAccessTokenCreate) SetNillableID(s *string) *PersonalAccessTokenCreate {
	if s != nil {
		patc.SetID(*s)
	}
	return patc
}

// SetOwner sets the "owner" edge to the User entity.
func (patc *PersonalAccessTokenCreate) SetOwner(u *User) *PersonalAccessTokenCreate {
	return patc.SetOwnerID(u.ID)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (patc *PersonalAccessTokenCreate) AddOrganizationIDs(ids ...string) *PersonalAccessTokenCreate {
	patc.mutation.AddOrganizationIDs(ids...)
	return patc
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (patc *PersonalAccessTokenCreate) AddOrganizations(o ...*Organization) *PersonalAccessTokenCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return patc.AddOrganizationIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (patc *PersonalAccessTokenCreate) AddEventIDs(ids ...string) *PersonalAccessTokenCreate {
	patc.mutation.AddEventIDs(ids...)
	return patc
}

// AddEvents adds the "events" edges to the Event entity.
func (patc *PersonalAccessTokenCreate) AddEvents(e ...*Event) *PersonalAccessTokenCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return patc.AddEventIDs(ids...)
}

// Mutation returns the PersonalAccessTokenMutation object of the builder.
func (patc *PersonalAccessTokenCreate) Mutation() *PersonalAccessTokenMutation {
	return patc.mutation
}

// Save creates the PersonalAccessToken in the database.
func (patc *PersonalAccessTokenCreate) Save(ctx context.Context) (*PersonalAccessToken, error) {
	if err := patc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, patc.sqlSave, patc.mutation, patc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (patc *PersonalAccessTokenCreate) SaveX(ctx context.Context) *PersonalAccessToken {
	v, err := patc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (patc *PersonalAccessTokenCreate) Exec(ctx context.Context) error {
	_, err := patc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (patc *PersonalAccessTokenCreate) ExecX(ctx context.Context) {
	if err := patc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (patc *PersonalAccessTokenCreate) defaults() error {
	if _, ok := patc.mutation.CreatedAt(); !ok {
		if personalaccesstoken.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized personalaccesstoken.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := personalaccesstoken.DefaultCreatedAt()
		patc.mutation.SetCreatedAt(v)
	}
	if _, ok := patc.mutation.UpdatedAt(); !ok {
		if personalaccesstoken.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized personalaccesstoken.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := personalaccesstoken.DefaultUpdatedAt()
		patc.mutation.SetUpdatedAt(v)
	}
	if _, ok := patc.mutation.Tags(); !ok {
		v := personalaccesstoken.DefaultTags
		patc.mutation.SetTags(v)
	}
	if _, ok := patc.mutation.Token(); !ok {
		if personalaccesstoken.DefaultToken == nil {
			return fmt.Errorf("generated: uninitialized personalaccesstoken.DefaultToken (forgotten import generated/runtime?)")
		}
		v := personalaccesstoken.DefaultToken()
		patc.mutation.SetToken(v)
	}
	if _, ok := patc.mutation.IsActive(); !ok {
		v := personalaccesstoken.DefaultIsActive
		patc.mutation.SetIsActive(v)
	}
	if _, ok := patc.mutation.ID(); !ok {
		if personalaccesstoken.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized personalaccesstoken.DefaultID (forgotten import generated/runtime?)")
		}
		v := personalaccesstoken.DefaultID()
		patc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (patc *PersonalAccessTokenCreate) check() error {
	if _, ok := patc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`generated: missing required field "PersonalAccessToken.owner_id"`)}
	}
	if _, ok := patc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "PersonalAccessToken.name"`)}
	}
	if v, ok := patc.mutation.Name(); ok {
		if err := personalaccesstoken.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "PersonalAccessToken.name": %w`, err)}
		}
	}
	if _, ok := patc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`generated: missing required field "PersonalAccessToken.token"`)}
	}
	if len(patc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`generated: missing required edge "PersonalAccessToken.owner"`)}
	}
	return nil
}

func (patc *PersonalAccessTokenCreate) sqlSave(ctx context.Context) (*PersonalAccessToken, error) {
	if err := patc.check(); err != nil {
		return nil, err
	}
	_node, _spec := patc.createSpec()
	if err := sqlgraph.CreateNode(ctx, patc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PersonalAccessToken.ID type: %T", _spec.ID.Value)
		}
	}
	patc.mutation.id = &_node.ID
	patc.mutation.done = true
	return _node, nil
}

func (patc *PersonalAccessTokenCreate) createSpec() (*PersonalAccessToken, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonalAccessToken{config: patc.config}
		_spec = sqlgraph.NewCreateSpec(personalaccesstoken.Table, sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString))
	)
	_spec.Schema = patc.schemaConfig.PersonalAccessToken
	if id, ok := patc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := patc.mutation.CreatedAt(); ok {
		_spec.SetField(personalaccesstoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := patc.mutation.UpdatedAt(); ok {
		_spec.SetField(personalaccesstoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := patc.mutation.CreatedBy(); ok {
		_spec.SetField(personalaccesstoken.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := patc.mutation.UpdatedBy(); ok {
		_spec.SetField(personalaccesstoken.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := patc.mutation.DeletedAt(); ok {
		_spec.SetField(personalaccesstoken.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := patc.mutation.DeletedBy(); ok {
		_spec.SetField(personalaccesstoken.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := patc.mutation.Tags(); ok {
		_spec.SetField(personalaccesstoken.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := patc.mutation.Name(); ok {
		_spec.SetField(personalaccesstoken.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := patc.mutation.Token(); ok {
		_spec.SetField(personalaccesstoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := patc.mutation.ExpiresAt(); ok {
		_spec.SetField(personalaccesstoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := patc.mutation.Description(); ok {
		_spec.SetField(personalaccesstoken.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := patc.mutation.Scopes(); ok {
		_spec.SetField(personalaccesstoken.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := patc.mutation.LastUsedAt(); ok {
		_spec.SetField(personalaccesstoken.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = &value
	}
	if value, ok := patc.mutation.IsActive(); ok {
		_spec.SetField(personalaccesstoken.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := patc.mutation.RevokedReason(); ok {
		_spec.SetField(personalaccesstoken.FieldRevokedReason, field.TypeString, value)
		_node.RevokedReason = &value
	}
	if value, ok := patc.mutation.RevokedBy(); ok {
		_spec.SetField(personalaccesstoken.FieldRevokedBy, field.TypeString, value)
		_node.RevokedBy = &value
	}
	if value, ok := patc.mutation.RevokedAt(); ok {
		_spec.SetField(personalaccesstoken.FieldRevokedAt, field.TypeTime, value)
		_node.RevokedAt = &value
	}
	if nodes := patc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalaccesstoken.OwnerTable,
			Columns: []string{personalaccesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = patc.schemaConfig.PersonalAccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := patc.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personalaccesstoken.OrganizationsTable,
			Columns: personalaccesstoken.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = patc.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := patc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalaccesstoken.EventsTable,
			Columns: personalaccesstoken.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = patc.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonalAccessTokenCreateBulk is the builder for creating many PersonalAccessToken entities in bulk.
type PersonalAccessTokenCreateBulk struct {
	config
	err      error
	builders []*PersonalAccessTokenCreate
}

// Save creates the PersonalAccessToken entities in the database.
func (patcb *PersonalAccessTokenCreateBulk) Save(ctx context.Context) ([]*PersonalAccessToken, error) {
	if patcb.err != nil {
		return nil, patcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(patcb.builders))
	nodes := make([]*PersonalAccessToken, len(patcb.builders))
	mutators := make([]Mutator, len(patcb.builders))
	for i := range patcb.builders {
		func(i int, root context.Context) {
			builder := patcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonalAccessTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, patcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, patcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, patcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (patcb *PersonalAccessTokenCreateBulk) SaveX(ctx context.Context) []*PersonalAccessToken {
	v, err := patcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (patcb *PersonalAccessTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := patcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (patcb *PersonalAccessTokenCreateBulk) ExecX(ctx context.Context) {
	if err := patcb.Exec(ctx); err != nil {
		panic(err)
	}
}
