// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
)

// ProcedureCreate is the builder for creating a Procedure entity.
type ProcedureCreate struct {
	config
	mutation *ProcedureMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProcedureCreate) SetCreatedAt(t time.Time) *ProcedureCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableCreatedAt(t *time.Time) *ProcedureCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProcedureCreate) SetUpdatedAt(t time.Time) *ProcedureCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableUpdatedAt(t *time.Time) *ProcedureCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *ProcedureCreate) SetCreatedBy(s string) *ProcedureCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableCreatedBy(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *ProcedureCreate) SetUpdatedBy(s string) *ProcedureCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableUpdatedBy(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetUpdatedBy(*s)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProcedureCreate) SetDeletedAt(t time.Time) *ProcedureCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableDeletedAt(t *time.Time) *ProcedureCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetDeletedBy sets the "deleted_by" field.
func (pc *ProcedureCreate) SetDeletedBy(s string) *ProcedureCreate {
	pc.mutation.SetDeletedBy(s)
	return pc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableDeletedBy(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetDeletedBy(*s)
	}
	return pc
}

// SetDisplayID sets the "display_id" field.
func (pc *ProcedureCreate) SetDisplayID(s string) *ProcedureCreate {
	pc.mutation.SetDisplayID(s)
	return pc
}

// SetTags sets the "tags" field.
func (pc *ProcedureCreate) SetTags(s []string) *ProcedureCreate {
	pc.mutation.SetTags(s)
	return pc
}

// SetRevision sets the "revision" field.
func (pc *ProcedureCreate) SetRevision(s string) *ProcedureCreate {
	pc.mutation.SetRevision(s)
	return pc
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableRevision(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetRevision(*s)
	}
	return pc
}

// SetOwnerID sets the "owner_id" field.
func (pc *ProcedureCreate) SetOwnerID(s string) *ProcedureCreate {
	pc.mutation.SetOwnerID(s)
	return pc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableOwnerID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetOwnerID(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProcedureCreate) SetName(s string) *ProcedureCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProcedureCreate) SetStatus(es enums.DocumentStatus) *ProcedureCreate {
	pc.mutation.SetStatus(es)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableStatus(es *enums.DocumentStatus) *ProcedureCreate {
	if es != nil {
		pc.SetStatus(*es)
	}
	return pc
}

// SetProcedureType sets the "procedure_type" field.
func (pc *ProcedureCreate) SetProcedureType(s string) *ProcedureCreate {
	pc.mutation.SetProcedureType(s)
	return pc
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableProcedureType(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetProcedureType(*s)
	}
	return pc
}

// SetDetails sets the "details" field.
func (pc *ProcedureCreate) SetDetails(s string) *ProcedureCreate {
	pc.mutation.SetDetails(s)
	return pc
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableDetails(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetDetails(*s)
	}
	return pc
}

// SetApprovalRequired sets the "approval_required" field.
func (pc *ProcedureCreate) SetApprovalRequired(b bool) *ProcedureCreate {
	pc.mutation.SetApprovalRequired(b)
	return pc
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableApprovalRequired(b *bool) *ProcedureCreate {
	if b != nil {
		pc.SetApprovalRequired(*b)
	}
	return pc
}

// SetReviewDue sets the "review_due" field.
func (pc *ProcedureCreate) SetReviewDue(t time.Time) *ProcedureCreate {
	pc.mutation.SetReviewDue(t)
	return pc
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableReviewDue(t *time.Time) *ProcedureCreate {
	if t != nil {
		pc.SetReviewDue(*t)
	}
	return pc
}

// SetReviewFrequency sets the "review_frequency" field.
func (pc *ProcedureCreate) SetReviewFrequency(e enums.Frequency) *ProcedureCreate {
	pc.mutation.SetReviewFrequency(e)
	return pc
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableReviewFrequency(e *enums.Frequency) *ProcedureCreate {
	if e != nil {
		pc.SetReviewFrequency(*e)
	}
	return pc
}

// SetApproverID sets the "approver_id" field.
func (pc *ProcedureCreate) SetApproverID(s string) *ProcedureCreate {
	pc.mutation.SetApproverID(s)
	return pc
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableApproverID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetApproverID(*s)
	}
	return pc
}

// SetDelegateID sets the "delegate_id" field.
func (pc *ProcedureCreate) SetDelegateID(s string) *ProcedureCreate {
	pc.mutation.SetDelegateID(s)
	return pc
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableDelegateID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetDelegateID(*s)
	}
	return pc
}

// SetSummary sets the "summary" field.
func (pc *ProcedureCreate) SetSummary(s string) *ProcedureCreate {
	pc.mutation.SetSummary(s)
	return pc
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableSummary(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetSummary(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProcedureCreate) SetID(s string) *ProcedureCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pc *ProcedureCreate) SetOwner(o *Organization) *ProcedureCreate {
	return pc.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (pc *ProcedureCreate) AddBlockedGroupIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddBlockedGroupIDs(ids...)
	return pc
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (pc *ProcedureCreate) AddBlockedGroups(g ...*Group) *ProcedureCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (pc *ProcedureCreate) AddEditorIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddEditorIDs(ids...)
	return pc
}

// AddEditors adds the "editors" edges to the Group entity.
func (pc *ProcedureCreate) AddEditors(g ...*Group) *ProcedureCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddEditorIDs(ids...)
}

// SetApprover sets the "approver" edge to the Group entity.
func (pc *ProcedureCreate) SetApprover(g *Group) *ProcedureCreate {
	return pc.SetApproverID(g.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (pc *ProcedureCreate) SetDelegate(g *Group) *ProcedureCreate {
	return pc.SetDelegateID(g.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (pc *ProcedureCreate) AddControlIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddControlIDs(ids...)
	return pc
}

// AddControls adds the "controls" edges to the Control entity.
func (pc *ProcedureCreate) AddControls(c ...*Control) *ProcedureCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (pc *ProcedureCreate) AddSubcontrolIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddSubcontrolIDs(ids...)
	return pc
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (pc *ProcedureCreate) AddSubcontrols(s ...*Subcontrol) *ProcedureCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSubcontrolIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (pc *ProcedureCreate) AddInternalPolicyIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddInternalPolicyIDs(ids...)
	return pc
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (pc *ProcedureCreate) AddInternalPolicies(i ...*InternalPolicy) *ProcedureCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (pc *ProcedureCreate) AddProgramIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddProgramIDs(ids...)
	return pc
}

// AddPrograms adds the "programs" edges to the Program entity.
func (pc *ProcedureCreate) AddPrograms(p ...*Program) *ProcedureCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProgramIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (pc *ProcedureCreate) AddNarrativeIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddNarrativeIDs(ids...)
	return pc
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (pc *ProcedureCreate) AddNarratives(n ...*Narrative) *ProcedureCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pc.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (pc *ProcedureCreate) AddRiskIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddRiskIDs(ids...)
	return pc
}

// AddRisks adds the "risks" edges to the Risk entity.
func (pc *ProcedureCreate) AddRisks(r ...*Risk) *ProcedureCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pc *ProcedureCreate) AddTaskIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddTaskIDs(ids...)
	return pc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pc *ProcedureCreate) AddTasks(t ...*Task) *ProcedureCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskIDs(ids...)
}

// Mutation returns the ProcedureMutation object of the builder.
func (pc *ProcedureCreate) Mutation() *ProcedureMutation {
	return pc.mutation
}

// Save creates the Procedure in the database.
func (pc *ProcedureCreate) Save(ctx context.Context) (*Procedure, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcedureCreate) SaveX(ctx context.Context) *Procedure {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcedureCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcedureCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcedureCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if procedure.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedure.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := procedure.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if procedure.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedure.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedure.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Tags(); !ok {
		v := procedure.DefaultTags
		pc.mutation.SetTags(v)
	}
	if _, ok := pc.mutation.Revision(); !ok {
		v := procedure.DefaultRevision
		pc.mutation.SetRevision(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := procedure.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.ApprovalRequired(); !ok {
		v := procedure.DefaultApprovalRequired
		pc.mutation.SetApprovalRequired(v)
	}
	if _, ok := pc.mutation.ReviewDue(); !ok {
		v := procedure.DefaultReviewDue
		pc.mutation.SetReviewDue(v)
	}
	if _, ok := pc.mutation.ReviewFrequency(); !ok {
		v := procedure.DefaultReviewFrequency
		pc.mutation.SetReviewFrequency(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		if procedure.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized procedure.DefaultID (forgotten import generated/runtime?)")
		}
		v := procedure.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcedureCreate) check() error {
	if _, ok := pc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "Procedure.display_id"`)}
	}
	if v, ok := pc.mutation.DisplayID(); ok {
		if err := procedure.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "Procedure.display_id": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Revision(); ok {
		if err := procedure.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "Procedure.revision": %w`, err)}
		}
	}
	if v, ok := pc.mutation.OwnerID(); ok {
		if err := procedure.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Procedure.owner_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Procedure.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := procedure.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Procedure.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := procedure.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Procedure.status": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ReviewFrequency(); ok {
		if err := procedure.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "Procedure.review_frequency": %w`, err)}
		}
	}
	return nil
}

func (pc *ProcedureCreate) sqlSave(ctx context.Context) (*Procedure, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Procedure.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProcedureCreate) createSpec() (*Procedure, *sqlgraph.CreateSpec) {
	var (
		_node = &Procedure{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(procedure.Table, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString))
	)
	_spec.Schema = pc.schemaConfig.Procedure
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(procedure.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(procedure.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(procedure.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(procedure.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(procedure.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.DeletedBy(); ok {
		_spec.SetField(procedure.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := pc.mutation.DisplayID(); ok {
		_spec.SetField(procedure.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := pc.mutation.Tags(); ok {
		_spec.SetField(procedure.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := pc.mutation.Revision(); ok {
		_spec.SetField(procedure.FieldRevision, field.TypeString, value)
		_node.Revision = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(procedure.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(procedure.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.ProcedureType(); ok {
		_spec.SetField(procedure.FieldProcedureType, field.TypeString, value)
		_node.ProcedureType = value
	}
	if value, ok := pc.mutation.Details(); ok {
		_spec.SetField(procedure.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := pc.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedure.FieldApprovalRequired, field.TypeBool, value)
		_node.ApprovalRequired = value
	}
	if value, ok := pc.mutation.ReviewDue(); ok {
		_spec.SetField(procedure.FieldReviewDue, field.TypeTime, value)
		_node.ReviewDue = value
	}
	if value, ok := pc.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedure.FieldReviewFrequency, field.TypeEnum, value)
		_node.ReviewFrequency = value
	}
	if value, ok := pc.mutation.Summary(); ok {
		_spec.SetField(procedure.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApproverID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DelegateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.SubcontrolsTable,
			Columns: procedure.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProcedureCreateBulk is the builder for creating many Procedure entities in bulk.
type ProcedureCreateBulk struct {
	config
	err      error
	builders []*ProcedureCreate
}

// Save creates the Procedure entities in the database.
func (pcb *ProcedureCreateBulk) Save(ctx context.Context) ([]*Procedure, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Procedure, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcedureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcedureCreateBulk) SaveX(ctx context.Context) []*Procedure {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcedureCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcedureCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
