// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// ProcedureCreate is the builder for creating a Procedure entity.
type ProcedureCreate struct {
	config
	mutation *ProcedureMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProcedureCreate) SetCreatedAt(t time.Time) *ProcedureCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableCreatedAt(t *time.Time) *ProcedureCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProcedureCreate) SetUpdatedAt(t time.Time) *ProcedureCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableUpdatedAt(t *time.Time) *ProcedureCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetCreatedByID sets the "created_by_id" field.
func (pc *ProcedureCreate) SetCreatedByID(s string) *ProcedureCreate {
	pc.mutation.SetCreatedByID(s)
	return pc
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableCreatedByID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetCreatedByID(*s)
	}
	return pc
}

// SetUpdatedByID sets the "updated_by_id" field.
func (pc *ProcedureCreate) SetUpdatedByID(s string) *ProcedureCreate {
	pc.mutation.SetUpdatedByID(s)
	return pc
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableUpdatedByID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetUpdatedByID(*s)
	}
	return pc
}

// SetCreatedByUserID sets the "created_by_user_id" field.
func (pc *ProcedureCreate) SetCreatedByUserID(s string) *ProcedureCreate {
	pc.mutation.SetCreatedByUserID(s)
	return pc
}

// SetNillableCreatedByUserID sets the "created_by_user_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableCreatedByUserID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetCreatedByUserID(*s)
	}
	return pc
}

// SetUpdatedByUserID sets the "updated_by_user_id" field.
func (pc *ProcedureCreate) SetUpdatedByUserID(s string) *ProcedureCreate {
	pc.mutation.SetUpdatedByUserID(s)
	return pc
}

// SetNillableUpdatedByUserID sets the "updated_by_user_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableUpdatedByUserID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetUpdatedByUserID(*s)
	}
	return pc
}

// SetCreatedByServiceID sets the "created_by_service_id" field.
func (pc *ProcedureCreate) SetCreatedByServiceID(s string) *ProcedureCreate {
	pc.mutation.SetCreatedByServiceID(s)
	return pc
}

// SetNillableCreatedByServiceID sets the "created_by_service_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableCreatedByServiceID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetCreatedByServiceID(*s)
	}
	return pc
}

// SetUpdatedByServiceID sets the "updated_by_service_id" field.
func (pc *ProcedureCreate) SetUpdatedByServiceID(s string) *ProcedureCreate {
	pc.mutation.SetUpdatedByServiceID(s)
	return pc
}

// SetNillableUpdatedByServiceID sets the "updated_by_service_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableUpdatedByServiceID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetUpdatedByServiceID(*s)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProcedureCreate) SetDeletedAt(t time.Time) *ProcedureCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableDeletedAt(t *time.Time) *ProcedureCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetDeletedByID sets the "deleted_by_id" field.
func (pc *ProcedureCreate) SetDeletedByID(s string) *ProcedureCreate {
	pc.mutation.SetDeletedByID(s)
	return pc
}

// SetNillableDeletedByID sets the "deleted_by_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableDeletedByID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetDeletedByID(*s)
	}
	return pc
}

// SetMappingID sets the "mapping_id" field.
func (pc *ProcedureCreate) SetMappingID(s string) *ProcedureCreate {
	pc.mutation.SetMappingID(s)
	return pc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableMappingID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetMappingID(*s)
	}
	return pc
}

// SetTags sets the "tags" field.
func (pc *ProcedureCreate) SetTags(s []string) *ProcedureCreate {
	pc.mutation.SetTags(s)
	return pc
}

// SetOwnerID sets the "owner_id" field.
func (pc *ProcedureCreate) SetOwnerID(s string) *ProcedureCreate {
	pc.mutation.SetOwnerID(s)
	return pc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableOwnerID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetOwnerID(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProcedureCreate) SetName(s string) *ProcedureCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProcedureCreate) SetDescription(s string) *ProcedureCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableDescription(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProcedureCreate) SetStatus(s string) *ProcedureCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableStatus(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetStatus(*s)
	}
	return pc
}

// SetProcedureType sets the "procedure_type" field.
func (pc *ProcedureCreate) SetProcedureType(s string) *ProcedureCreate {
	pc.mutation.SetProcedureType(s)
	return pc
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableProcedureType(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetProcedureType(*s)
	}
	return pc
}

// SetVersion sets the "version" field.
func (pc *ProcedureCreate) SetVersion(s string) *ProcedureCreate {
	pc.mutation.SetVersion(s)
	return pc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableVersion(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetVersion(*s)
	}
	return pc
}

// SetPurposeAndScope sets the "purpose_and_scope" field.
func (pc *ProcedureCreate) SetPurposeAndScope(s string) *ProcedureCreate {
	pc.mutation.SetPurposeAndScope(s)
	return pc
}

// SetNillablePurposeAndScope sets the "purpose_and_scope" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillablePurposeAndScope(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetPurposeAndScope(*s)
	}
	return pc
}

// SetBackground sets the "background" field.
func (pc *ProcedureCreate) SetBackground(s string) *ProcedureCreate {
	pc.mutation.SetBackground(s)
	return pc
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableBackground(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetBackground(*s)
	}
	return pc
}

// SetSatisfies sets the "satisfies" field.
func (pc *ProcedureCreate) SetSatisfies(s string) *ProcedureCreate {
	pc.mutation.SetSatisfies(s)
	return pc
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableSatisfies(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetSatisfies(*s)
	}
	return pc
}

// SetDetails sets the "details" field.
func (pc *ProcedureCreate) SetDetails(m map[string]interface{}) *ProcedureCreate {
	pc.mutation.SetDetails(m)
	return pc
}

// SetID sets the "id" field.
func (pc *ProcedureCreate) SetID(s string) *ProcedureCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProcedureCreate) SetNillableID(s *string) *ProcedureCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (pc *ProcedureCreate) SetCreatedByUser(u *User) *ProcedureCreate {
	return pc.SetCreatedByUserID(u.ID)
}

// SetUpdatedByUser sets the "updated_by_user" edge to the User entity.
func (pc *ProcedureCreate) SetUpdatedByUser(u *User) *ProcedureCreate {
	return pc.SetUpdatedByUserID(u.ID)
}

// SetCreatedByService sets the "created_by_service" edge to the APIToken entity.
func (pc *ProcedureCreate) SetCreatedByService(a *APIToken) *ProcedureCreate {
	return pc.SetCreatedByServiceID(a.ID)
}

// SetUpdatedByService sets the "updated_by_service" edge to the APIToken entity.
func (pc *ProcedureCreate) SetUpdatedByService(a *APIToken) *ProcedureCreate {
	return pc.SetUpdatedByServiceID(a.ID)
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pc *ProcedureCreate) SetOwner(o *Organization) *ProcedureCreate {
	return pc.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (pc *ProcedureCreate) AddBlockedGroupIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddBlockedGroupIDs(ids...)
	return pc
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (pc *ProcedureCreate) AddBlockedGroups(g ...*Group) *ProcedureCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (pc *ProcedureCreate) AddEditorIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddEditorIDs(ids...)
	return pc
}

// AddEditors adds the "editors" edges to the Group entity.
func (pc *ProcedureCreate) AddEditors(g ...*Group) *ProcedureCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddEditorIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (pc *ProcedureCreate) AddControlIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddControlIDs(ids...)
	return pc
}

// AddControls adds the "controls" edges to the Control entity.
func (pc *ProcedureCreate) AddControls(c ...*Control) *ProcedureCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddControlIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (pc *ProcedureCreate) AddInternalPolicyIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddInternalPolicyIDs(ids...)
	return pc
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (pc *ProcedureCreate) AddInternalPolicies(i ...*InternalPolicy) *ProcedureCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddInternalPolicyIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (pc *ProcedureCreate) AddNarrativeIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddNarrativeIDs(ids...)
	return pc
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (pc *ProcedureCreate) AddNarratives(n ...*Narrative) *ProcedureCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pc.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (pc *ProcedureCreate) AddRiskIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddRiskIDs(ids...)
	return pc
}

// AddRisks adds the "risks" edges to the Risk entity.
func (pc *ProcedureCreate) AddRisks(r ...*Risk) *ProcedureCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pc *ProcedureCreate) AddTaskIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddTaskIDs(ids...)
	return pc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pc *ProcedureCreate) AddTasks(t ...*Task) *ProcedureCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (pc *ProcedureCreate) AddProgramIDs(ids ...string) *ProcedureCreate {
	pc.mutation.AddProgramIDs(ids...)
	return pc
}

// AddPrograms adds the "programs" edges to the Program entity.
func (pc *ProcedureCreate) AddPrograms(p ...*Program) *ProcedureCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProgramIDs(ids...)
}

// Mutation returns the ProcedureMutation object of the builder.
func (pc *ProcedureCreate) Mutation() *ProcedureMutation {
	return pc.mutation
}

// Save creates the Procedure in the database.
func (pc *ProcedureCreate) Save(ctx context.Context) (*Procedure, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcedureCreate) SaveX(ctx context.Context) *Procedure {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcedureCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcedureCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcedureCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if procedure.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedure.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := procedure.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if procedure.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedure.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedure.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.MappingID(); !ok {
		if procedure.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized procedure.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := procedure.DefaultMappingID()
		pc.mutation.SetMappingID(v)
	}
	if _, ok := pc.mutation.Tags(); !ok {
		v := procedure.DefaultTags
		pc.mutation.SetTags(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		if procedure.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized procedure.DefaultID (forgotten import generated/runtime?)")
		}
		v := procedure.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcedureCreate) check() error {
	if _, ok := pc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "Procedure.mapping_id"`)}
	}
	if v, ok := pc.mutation.OwnerID(); ok {
		if err := procedure.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Procedure.owner_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Procedure.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := procedure.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Procedure.name": %w`, err)}
		}
	}
	return nil
}

func (pc *ProcedureCreate) sqlSave(ctx context.Context) (*Procedure, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Procedure.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProcedureCreate) createSpec() (*Procedure, *sqlgraph.CreateSpec) {
	var (
		_node = &Procedure{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(procedure.Table, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString))
	)
	_spec.Schema = pc.schemaConfig.Procedure
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(procedure.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(procedure.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.CreatedByID(); ok {
		_spec.SetField(procedure.FieldCreatedByID, field.TypeString, value)
		_node.CreatedByID = value
	}
	if value, ok := pc.mutation.UpdatedByID(); ok {
		_spec.SetField(procedure.FieldUpdatedByID, field.TypeString, value)
		_node.UpdatedByID = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(procedure.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.DeletedByID(); ok {
		_spec.SetField(procedure.FieldDeletedByID, field.TypeString, value)
		_node.DeletedByID = value
	}
	if value, ok := pc.mutation.MappingID(); ok {
		_spec.SetField(procedure.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := pc.mutation.Tags(); ok {
		_spec.SetField(procedure.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(procedure.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(procedure.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(procedure.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.ProcedureType(); ok {
		_spec.SetField(procedure.FieldProcedureType, field.TypeString, value)
		_node.ProcedureType = value
	}
	if value, ok := pc.mutation.Version(); ok {
		_spec.SetField(procedure.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := pc.mutation.PurposeAndScope(); ok {
		_spec.SetField(procedure.FieldPurposeAndScope, field.TypeString, value)
		_node.PurposeAndScope = value
	}
	if value, ok := pc.mutation.Background(); ok {
		_spec.SetField(procedure.FieldBackground, field.TypeString, value)
		_node.Background = value
	}
	if value, ok := pc.mutation.Satisfies(); ok {
		_spec.SetField(procedure.FieldSatisfies, field.TypeString, value)
		_node.Satisfies = value
	}
	if value, ok := pc.mutation.Details(); ok {
		_spec.SetField(procedure.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	if nodes := pc.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.CreatedByUserTable,
			Columns: []string{procedure.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedByUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UpdatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.UpdatedByUserTable,
			Columns: []string{procedure.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedByUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CreatedByServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.CreatedByServiceTable,
			Columns: []string{procedure.CreatedByServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedByServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UpdatedByServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.UpdatedByServiceTable,
			Columns: []string{procedure.UpdatedByServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedByServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = pc.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProcedureCreateBulk is the builder for creating many Procedure entities in bulk.
type ProcedureCreateBulk struct {
	config
	err      error
	builders []*ProcedureCreate
}

// Save creates the Procedure entities in the database.
func (pcb *ProcedureCreateBulk) Save(ctx context.Context) ([]*Procedure, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Procedure, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcedureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcedureCreateBulk) SaveX(ctx context.Context) []*Procedure {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcedureCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcedureCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
