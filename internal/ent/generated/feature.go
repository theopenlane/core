// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// Feature is the model entity for the Feature schema.
type Feature struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the unique name of the feature
	Name string `json:"name,omitempty"`
	// the displayed 'friendly' name of the feature
	DisplayName string `json:"display_name,omitempty"`
	// enabled features are available for use
	Enabled bool `json:"enabled,omitempty"`
	// a description of the feature
	Description *string `json:"description,omitempty"`
	// metadata for the feature
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeatureQuery when eager-loading is set.
	Edges        FeatureEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeatureEdges holds the relations/edges for other nodes in the graph.
type FeatureEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Plans holds the value of the plans edge.
	Plans []*EntitlementPlan `json:"plans,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Features holds the value of the features edge.
	Features []*EntitlementPlanFeature `json:"features,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedPlans    map[string][]*EntitlementPlan
	namedEvents   map[string][]*Event
	namedFeatures map[string][]*EntitlementPlanFeature
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeatureEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// PlansOrErr returns the Plans value or an error if the edge
// was not loaded in eager-loading.
func (e FeatureEdges) PlansOrErr() ([]*EntitlementPlan, error) {
	if e.loadedTypes[1] {
		return e.Plans, nil
	}
	return nil, &NotLoadedError{edge: "plans"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e FeatureEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading.
func (e FeatureEdges) FeaturesOrErr() ([]*EntitlementPlanFeature, error) {
	if e.loadedTypes[3] {
		return e.Features, nil
	}
	return nil, &NotLoadedError{edge: "features"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feature.FieldTags, feature.FieldMetadata:
			values[i] = new([]byte)
		case feature.FieldEnabled:
			values[i] = new(sql.NullBool)
		case feature.FieldID, feature.FieldCreatedBy, feature.FieldUpdatedBy, feature.FieldDeletedBy, feature.FieldMappingID, feature.FieldOwnerID, feature.FieldName, feature.FieldDisplayName, feature.FieldDescription:
			values[i] = new(sql.NullString)
		case feature.FieldCreatedAt, feature.FieldUpdatedAt, feature.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feature fields.
func (f *Feature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feature.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				f.ID = value.String
			}
		case feature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case feature.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case feature.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				f.CreatedBy = value.String
			}
		case feature.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				f.UpdatedBy = value.String
			}
		case feature.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = value.Time
			}
		case feature.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				f.DeletedBy = value.String
			}
		case feature.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				f.MappingID = value.String
			}
		case feature.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case feature.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				f.OwnerID = value.String
			}
		case feature.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case feature.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				f.DisplayName = value.String
			}
		case feature.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				f.Enabled = value.Bool
			}
		case feature.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = new(string)
				*f.Description = value.String
			}
		case feature.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Feature.
// This includes values selected through modifiers, order, etc.
func (f *Feature) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Feature entity.
func (f *Feature) QueryOwner() *OrganizationQuery {
	return NewFeatureClient(f.config).QueryOwner(f)
}

// QueryPlans queries the "plans" edge of the Feature entity.
func (f *Feature) QueryPlans() *EntitlementPlanQuery {
	return NewFeatureClient(f.config).QueryPlans(f)
}

// QueryEvents queries the "events" edge of the Feature entity.
func (f *Feature) QueryEvents() *EventQuery {
	return NewFeatureClient(f.config).QueryEvents(f)
}

// QueryFeatures queries the "features" edge of the Feature entity.
func (f *Feature) QueryFeatures() *EntitlementPlanFeatureQuery {
	return NewFeatureClient(f.config).QueryFeatures(f)
}

// Update returns a builder for updating this Feature.
// Note that you need to call Feature.Unwrap() before calling this method if this Feature
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feature) Update() *FeatureUpdateOne {
	return NewFeatureClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Feature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feature) Unwrap() *Feature {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("generated: Feature is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feature) String() string {
	var builder strings.Builder
	builder.WriteString("Feature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(f.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(f.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(f.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(f.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(f.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", f.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(f.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(f.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", f.Enabled))
	builder.WriteString(", ")
	if v := f.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", f.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPlans returns the Plans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (f *Feature) NamedPlans(name string) ([]*EntitlementPlan, error) {
	if f.Edges.namedPlans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := f.Edges.namedPlans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (f *Feature) appendNamedPlans(name string, edges ...*EntitlementPlan) {
	if f.Edges.namedPlans == nil {
		f.Edges.namedPlans = make(map[string][]*EntitlementPlan)
	}
	if len(edges) == 0 {
		f.Edges.namedPlans[name] = []*EntitlementPlan{}
	} else {
		f.Edges.namedPlans[name] = append(f.Edges.namedPlans[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (f *Feature) NamedEvents(name string) ([]*Event, error) {
	if f.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := f.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (f *Feature) appendNamedEvents(name string, edges ...*Event) {
	if f.Edges.namedEvents == nil {
		f.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		f.Edges.namedEvents[name] = []*Event{}
	} else {
		f.Edges.namedEvents[name] = append(f.Edges.namedEvents[name], edges...)
	}
}

// NamedFeatures returns the Features named value or an error if the edge was not
// loaded in eager-loading with this name.
func (f *Feature) NamedFeatures(name string) ([]*EntitlementPlanFeature, error) {
	if f.Edges.namedFeatures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := f.Edges.namedFeatures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (f *Feature) appendNamedFeatures(name string, edges ...*EntitlementPlanFeature) {
	if f.Edges.namedFeatures == nil {
		f.Edges.namedFeatures = make(map[string][]*EntitlementPlanFeature)
	}
	if len(edges) == 0 {
		f.Edges.namedFeatures[name] = []*EntitlementPlanFeature{}
	} else {
		f.Edges.namedFeatures[name] = append(f.Edges.namedFeatures[name], edges...)
	}
}

// Features is a parsable slice of Feature.
type Features []*Feature
