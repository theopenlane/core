// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobRunnerUpdate is the builder for updating JobRunner entities.
type JobRunnerUpdate struct {
	config
	hooks     []Hook
	mutation  *JobRunnerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobRunnerUpdate builder.
func (jru *JobRunnerUpdate) Where(ps ...predicate.JobRunner) *JobRunnerUpdate {
	jru.mutation.Where(ps...)
	return jru
}

// SetUpdatedAt sets the "updated_at" field.
func (jru *JobRunnerUpdate) SetUpdatedAt(t time.Time) *JobRunnerUpdate {
	jru.mutation.SetUpdatedAt(t)
	return jru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jru *JobRunnerUpdate) ClearUpdatedAt() *JobRunnerUpdate {
	jru.mutation.ClearUpdatedAt()
	return jru
}

// SetUpdatedBy sets the "updated_by" field.
func (jru *JobRunnerUpdate) SetUpdatedBy(s string) *JobRunnerUpdate {
	jru.mutation.SetUpdatedBy(s)
	return jru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableUpdatedBy(s *string) *JobRunnerUpdate {
	if s != nil {
		jru.SetUpdatedBy(*s)
	}
	return jru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jru *JobRunnerUpdate) ClearUpdatedBy() *JobRunnerUpdate {
	jru.mutation.ClearUpdatedBy()
	return jru
}

// SetDeletedAt sets the "deleted_at" field.
func (jru *JobRunnerUpdate) SetDeletedAt(t time.Time) *JobRunnerUpdate {
	jru.mutation.SetDeletedAt(t)
	return jru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableDeletedAt(t *time.Time) *JobRunnerUpdate {
	if t != nil {
		jru.SetDeletedAt(*t)
	}
	return jru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jru *JobRunnerUpdate) ClearDeletedAt() *JobRunnerUpdate {
	jru.mutation.ClearDeletedAt()
	return jru
}

// SetDeletedBy sets the "deleted_by" field.
func (jru *JobRunnerUpdate) SetDeletedBy(s string) *JobRunnerUpdate {
	jru.mutation.SetDeletedBy(s)
	return jru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableDeletedBy(s *string) *JobRunnerUpdate {
	if s != nil {
		jru.SetDeletedBy(*s)
	}
	return jru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jru *JobRunnerUpdate) ClearDeletedBy() *JobRunnerUpdate {
	jru.mutation.ClearDeletedBy()
	return jru
}

// SetTags sets the "tags" field.
func (jru *JobRunnerUpdate) SetTags(s []string) *JobRunnerUpdate {
	jru.mutation.SetTags(s)
	return jru
}

// AppendTags appends s to the "tags" field.
func (jru *JobRunnerUpdate) AppendTags(s []string) *JobRunnerUpdate {
	jru.mutation.AppendTags(s)
	return jru
}

// ClearTags clears the value of the "tags" field.
func (jru *JobRunnerUpdate) ClearTags() *JobRunnerUpdate {
	jru.mutation.ClearTags()
	return jru
}

// SetOwnerID sets the "owner_id" field.
func (jru *JobRunnerUpdate) SetOwnerID(s string) *JobRunnerUpdate {
	jru.mutation.SetOwnerID(s)
	return jru
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableOwnerID(s *string) *JobRunnerUpdate {
	if s != nil {
		jru.SetOwnerID(*s)
	}
	return jru
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jru *JobRunnerUpdate) ClearOwnerID() *JobRunnerUpdate {
	jru.mutation.ClearOwnerID()
	return jru
}

// SetName sets the "name" field.
func (jru *JobRunnerUpdate) SetName(s string) *JobRunnerUpdate {
	jru.mutation.SetName(s)
	return jru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableName(s *string) *JobRunnerUpdate {
	if s != nil {
		jru.SetName(*s)
	}
	return jru
}

// SetStatus sets the "status" field.
func (jru *JobRunnerUpdate) SetStatus(ers enums.JobRunnerStatus) *JobRunnerUpdate {
	jru.mutation.SetStatus(ers)
	return jru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableStatus(ers *enums.JobRunnerStatus) *JobRunnerUpdate {
	if ers != nil {
		jru.SetStatus(*ers)
	}
	return jru
}

// SetIPAddress sets the "ip_address" field.
func (jru *JobRunnerUpdate) SetIPAddress(s string) *JobRunnerUpdate {
	jru.mutation.SetIPAddress(s)
	return jru
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableIPAddress(s *string) *JobRunnerUpdate {
	if s != nil {
		jru.SetIPAddress(*s)
	}
	return jru
}

// ClearIPAddress clears the value of the "ip_address" field.
func (jru *JobRunnerUpdate) ClearIPAddress() *JobRunnerUpdate {
	jru.mutation.ClearIPAddress()
	return jru
}

// SetLastSeen sets the "last_seen" field.
func (jru *JobRunnerUpdate) SetLastSeen(t time.Time) *JobRunnerUpdate {
	jru.mutation.SetLastSeen(t)
	return jru
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableLastSeen(t *time.Time) *JobRunnerUpdate {
	if t != nil {
		jru.SetLastSeen(*t)
	}
	return jru
}

// ClearLastSeen clears the value of the "last_seen" field.
func (jru *JobRunnerUpdate) ClearLastSeen() *JobRunnerUpdate {
	jru.mutation.ClearLastSeen()
	return jru
}

// SetVersion sets the "version" field.
func (jru *JobRunnerUpdate) SetVersion(s string) *JobRunnerUpdate {
	jru.mutation.SetVersion(s)
	return jru
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableVersion(s *string) *JobRunnerUpdate {
	if s != nil {
		jru.SetVersion(*s)
	}
	return jru
}

// ClearVersion clears the value of the "version" field.
func (jru *JobRunnerUpdate) ClearVersion() *JobRunnerUpdate {
	jru.mutation.ClearVersion()
	return jru
}

// SetOs sets the "os" field.
func (jru *JobRunnerUpdate) SetOs(s string) *JobRunnerUpdate {
	jru.mutation.SetOs(s)
	return jru
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (jru *JobRunnerUpdate) SetNillableOs(s *string) *JobRunnerUpdate {
	if s != nil {
		jru.SetOs(*s)
	}
	return jru
}

// ClearOs clears the value of the "os" field.
func (jru *JobRunnerUpdate) ClearOs() *JobRunnerUpdate {
	jru.mutation.ClearOs()
	return jru
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jru *JobRunnerUpdate) SetOwner(o *Organization) *JobRunnerUpdate {
	return jru.SetOwnerID(o.ID)
}

// AddJobRunnerTokenIDs adds the "job_runner_tokens" edge to the JobRunnerToken entity by IDs.
func (jru *JobRunnerUpdate) AddJobRunnerTokenIDs(ids ...string) *JobRunnerUpdate {
	jru.mutation.AddJobRunnerTokenIDs(ids...)
	return jru
}

// AddJobRunnerTokens adds the "job_runner_tokens" edges to the JobRunnerToken entity.
func (jru *JobRunnerUpdate) AddJobRunnerTokens(j ...*JobRunnerToken) *JobRunnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jru.AddJobRunnerTokenIDs(ids...)
}

// Mutation returns the JobRunnerMutation object of the builder.
func (jru *JobRunnerUpdate) Mutation() *JobRunnerMutation {
	return jru.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (jru *JobRunnerUpdate) ClearOwner() *JobRunnerUpdate {
	jru.mutation.ClearOwner()
	return jru
}

// ClearJobRunnerTokens clears all "job_runner_tokens" edges to the JobRunnerToken entity.
func (jru *JobRunnerUpdate) ClearJobRunnerTokens() *JobRunnerUpdate {
	jru.mutation.ClearJobRunnerTokens()
	return jru
}

// RemoveJobRunnerTokenIDs removes the "job_runner_tokens" edge to JobRunnerToken entities by IDs.
func (jru *JobRunnerUpdate) RemoveJobRunnerTokenIDs(ids ...string) *JobRunnerUpdate {
	jru.mutation.RemoveJobRunnerTokenIDs(ids...)
	return jru
}

// RemoveJobRunnerTokens removes "job_runner_tokens" edges to JobRunnerToken entities.
func (jru *JobRunnerUpdate) RemoveJobRunnerTokens(j ...*JobRunnerToken) *JobRunnerUpdate {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jru.RemoveJobRunnerTokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jru *JobRunnerUpdate) Save(ctx context.Context) (int, error) {
	if err := jru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jru.sqlSave, jru.mutation, jru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jru *JobRunnerUpdate) SaveX(ctx context.Context) int {
	affected, err := jru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jru *JobRunnerUpdate) Exec(ctx context.Context) error {
	_, err := jru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jru *JobRunnerUpdate) ExecX(ctx context.Context) {
	if err := jru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jru *JobRunnerUpdate) defaults() error {
	if _, ok := jru.mutation.UpdatedAt(); !ok && !jru.mutation.UpdatedAtCleared() {
		if jobrunner.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunner.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunner.UpdateDefaultUpdatedAt()
		jru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jru *JobRunnerUpdate) check() error {
	if v, ok := jru.mutation.Status(); ok {
		if err := jobrunner.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobRunner.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jru *JobRunnerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobRunnerUpdate {
	jru.modifiers = append(jru.modifiers, modifiers...)
	return jru
}

func (jru *JobRunnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobrunner.Table, jobrunner.Columns, sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString))
	if ps := jru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jru.mutation.CreatedAtCleared() {
		_spec.ClearField(jobrunner.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jru.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunner.FieldUpdatedAt, field.TypeTime, value)
	}
	if jru.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobrunner.FieldUpdatedAt, field.TypeTime)
	}
	if jru.mutation.CreatedByCleared() {
		_spec.ClearField(jobrunner.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jru.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunner.FieldUpdatedBy, field.TypeString, value)
	}
	if jru.mutation.UpdatedByCleared() {
		_spec.ClearField(jobrunner.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jru.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunner.FieldDeletedAt, field.TypeTime, value)
	}
	if jru.mutation.DeletedAtCleared() {
		_spec.ClearField(jobrunner.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jru.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunner.FieldDeletedBy, field.TypeString, value)
	}
	if jru.mutation.DeletedByCleared() {
		_spec.ClearField(jobrunner.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jru.mutation.Tags(); ok {
		_spec.SetField(jobrunner.FieldTags, field.TypeJSON, value)
	}
	if value, ok := jru.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobrunner.FieldTags, value)
		})
	}
	if jru.mutation.TagsCleared() {
		_spec.ClearField(jobrunner.FieldTags, field.TypeJSON)
	}
	if jru.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobrunner.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := jru.mutation.Name(); ok {
		_spec.SetField(jobrunner.FieldName, field.TypeString, value)
	}
	if value, ok := jru.mutation.Status(); ok {
		_spec.SetField(jobrunner.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := jru.mutation.IPAddress(); ok {
		_spec.SetField(jobrunner.FieldIPAddress, field.TypeString, value)
	}
	if jru.mutation.IPAddressCleared() {
		_spec.ClearField(jobrunner.FieldIPAddress, field.TypeString)
	}
	if value, ok := jru.mutation.LastSeen(); ok {
		_spec.SetField(jobrunner.FieldLastSeen, field.TypeTime, value)
	}
	if jru.mutation.LastSeenCleared() {
		_spec.ClearField(jobrunner.FieldLastSeen, field.TypeTime)
	}
	if value, ok := jru.mutation.Version(); ok {
		_spec.SetField(jobrunner.FieldVersion, field.TypeString, value)
	}
	if jru.mutation.VersionCleared() {
		_spec.ClearField(jobrunner.FieldVersion, field.TypeString)
	}
	if value, ok := jru.mutation.Os(); ok {
		_spec.SetField(jobrunner.FieldOs, field.TypeString, value)
	}
	if jru.mutation.OsCleared() {
		_spec.ClearField(jobrunner.FieldOs, field.TypeString)
	}
	if jru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunner.OwnerTable,
			Columns: []string{jobrunner.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobRunner
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunner.OwnerTable,
			Columns: []string{jobrunner.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobRunner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.JobRunnerTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobrunner.JobRunnerTokensTable,
			Columns: jobrunner.JobRunnerTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobRunnerJobRunnerTokens
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.RemovedJobRunnerTokensIDs(); len(nodes) > 0 && !jru.mutation.JobRunnerTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobrunner.JobRunnerTokensTable,
			Columns: jobrunner.JobRunnerTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.JobRunnerTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobrunner.JobRunnerTokensTable,
			Columns: jobrunner.JobRunnerTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jru.schemaConfig.JobRunner
	ctx = internal.NewSchemaConfigContext(ctx, jru.schemaConfig)
	_spec.AddModifiers(jru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrunner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jru.mutation.done = true
	return n, nil
}

// JobRunnerUpdateOne is the builder for updating a single JobRunner entity.
type JobRunnerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobRunnerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (jruo *JobRunnerUpdateOne) SetUpdatedAt(t time.Time) *JobRunnerUpdateOne {
	jruo.mutation.SetUpdatedAt(t)
	return jruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jruo *JobRunnerUpdateOne) ClearUpdatedAt() *JobRunnerUpdateOne {
	jruo.mutation.ClearUpdatedAt()
	return jruo
}

// SetUpdatedBy sets the "updated_by" field.
func (jruo *JobRunnerUpdateOne) SetUpdatedBy(s string) *JobRunnerUpdateOne {
	jruo.mutation.SetUpdatedBy(s)
	return jruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableUpdatedBy(s *string) *JobRunnerUpdateOne {
	if s != nil {
		jruo.SetUpdatedBy(*s)
	}
	return jruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jruo *JobRunnerUpdateOne) ClearUpdatedBy() *JobRunnerUpdateOne {
	jruo.mutation.ClearUpdatedBy()
	return jruo
}

// SetDeletedAt sets the "deleted_at" field.
func (jruo *JobRunnerUpdateOne) SetDeletedAt(t time.Time) *JobRunnerUpdateOne {
	jruo.mutation.SetDeletedAt(t)
	return jruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableDeletedAt(t *time.Time) *JobRunnerUpdateOne {
	if t != nil {
		jruo.SetDeletedAt(*t)
	}
	return jruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jruo *JobRunnerUpdateOne) ClearDeletedAt() *JobRunnerUpdateOne {
	jruo.mutation.ClearDeletedAt()
	return jruo
}

// SetDeletedBy sets the "deleted_by" field.
func (jruo *JobRunnerUpdateOne) SetDeletedBy(s string) *JobRunnerUpdateOne {
	jruo.mutation.SetDeletedBy(s)
	return jruo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableDeletedBy(s *string) *JobRunnerUpdateOne {
	if s != nil {
		jruo.SetDeletedBy(*s)
	}
	return jruo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jruo *JobRunnerUpdateOne) ClearDeletedBy() *JobRunnerUpdateOne {
	jruo.mutation.ClearDeletedBy()
	return jruo
}

// SetTags sets the "tags" field.
func (jruo *JobRunnerUpdateOne) SetTags(s []string) *JobRunnerUpdateOne {
	jruo.mutation.SetTags(s)
	return jruo
}

// AppendTags appends s to the "tags" field.
func (jruo *JobRunnerUpdateOne) AppendTags(s []string) *JobRunnerUpdateOne {
	jruo.mutation.AppendTags(s)
	return jruo
}

// ClearTags clears the value of the "tags" field.
func (jruo *JobRunnerUpdateOne) ClearTags() *JobRunnerUpdateOne {
	jruo.mutation.ClearTags()
	return jruo
}

// SetOwnerID sets the "owner_id" field.
func (jruo *JobRunnerUpdateOne) SetOwnerID(s string) *JobRunnerUpdateOne {
	jruo.mutation.SetOwnerID(s)
	return jruo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableOwnerID(s *string) *JobRunnerUpdateOne {
	if s != nil {
		jruo.SetOwnerID(*s)
	}
	return jruo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jruo *JobRunnerUpdateOne) ClearOwnerID() *JobRunnerUpdateOne {
	jruo.mutation.ClearOwnerID()
	return jruo
}

// SetName sets the "name" field.
func (jruo *JobRunnerUpdateOne) SetName(s string) *JobRunnerUpdateOne {
	jruo.mutation.SetName(s)
	return jruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableName(s *string) *JobRunnerUpdateOne {
	if s != nil {
		jruo.SetName(*s)
	}
	return jruo
}

// SetStatus sets the "status" field.
func (jruo *JobRunnerUpdateOne) SetStatus(ers enums.JobRunnerStatus) *JobRunnerUpdateOne {
	jruo.mutation.SetStatus(ers)
	return jruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableStatus(ers *enums.JobRunnerStatus) *JobRunnerUpdateOne {
	if ers != nil {
		jruo.SetStatus(*ers)
	}
	return jruo
}

// SetIPAddress sets the "ip_address" field.
func (jruo *JobRunnerUpdateOne) SetIPAddress(s string) *JobRunnerUpdateOne {
	jruo.mutation.SetIPAddress(s)
	return jruo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableIPAddress(s *string) *JobRunnerUpdateOne {
	if s != nil {
		jruo.SetIPAddress(*s)
	}
	return jruo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (jruo *JobRunnerUpdateOne) ClearIPAddress() *JobRunnerUpdateOne {
	jruo.mutation.ClearIPAddress()
	return jruo
}

// SetLastSeen sets the "last_seen" field.
func (jruo *JobRunnerUpdateOne) SetLastSeen(t time.Time) *JobRunnerUpdateOne {
	jruo.mutation.SetLastSeen(t)
	return jruo
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableLastSeen(t *time.Time) *JobRunnerUpdateOne {
	if t != nil {
		jruo.SetLastSeen(*t)
	}
	return jruo
}

// ClearLastSeen clears the value of the "last_seen" field.
func (jruo *JobRunnerUpdateOne) ClearLastSeen() *JobRunnerUpdateOne {
	jruo.mutation.ClearLastSeen()
	return jruo
}

// SetVersion sets the "version" field.
func (jruo *JobRunnerUpdateOne) SetVersion(s string) *JobRunnerUpdateOne {
	jruo.mutation.SetVersion(s)
	return jruo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableVersion(s *string) *JobRunnerUpdateOne {
	if s != nil {
		jruo.SetVersion(*s)
	}
	return jruo
}

// ClearVersion clears the value of the "version" field.
func (jruo *JobRunnerUpdateOne) ClearVersion() *JobRunnerUpdateOne {
	jruo.mutation.ClearVersion()
	return jruo
}

// SetOs sets the "os" field.
func (jruo *JobRunnerUpdateOne) SetOs(s string) *JobRunnerUpdateOne {
	jruo.mutation.SetOs(s)
	return jruo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (jruo *JobRunnerUpdateOne) SetNillableOs(s *string) *JobRunnerUpdateOne {
	if s != nil {
		jruo.SetOs(*s)
	}
	return jruo
}

// ClearOs clears the value of the "os" field.
func (jruo *JobRunnerUpdateOne) ClearOs() *JobRunnerUpdateOne {
	jruo.mutation.ClearOs()
	return jruo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jruo *JobRunnerUpdateOne) SetOwner(o *Organization) *JobRunnerUpdateOne {
	return jruo.SetOwnerID(o.ID)
}

// AddJobRunnerTokenIDs adds the "job_runner_tokens" edge to the JobRunnerToken entity by IDs.
func (jruo *JobRunnerUpdateOne) AddJobRunnerTokenIDs(ids ...string) *JobRunnerUpdateOne {
	jruo.mutation.AddJobRunnerTokenIDs(ids...)
	return jruo
}

// AddJobRunnerTokens adds the "job_runner_tokens" edges to the JobRunnerToken entity.
func (jruo *JobRunnerUpdateOne) AddJobRunnerTokens(j ...*JobRunnerToken) *JobRunnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jruo.AddJobRunnerTokenIDs(ids...)
}

// Mutation returns the JobRunnerMutation object of the builder.
func (jruo *JobRunnerUpdateOne) Mutation() *JobRunnerMutation {
	return jruo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (jruo *JobRunnerUpdateOne) ClearOwner() *JobRunnerUpdateOne {
	jruo.mutation.ClearOwner()
	return jruo
}

// ClearJobRunnerTokens clears all "job_runner_tokens" edges to the JobRunnerToken entity.
func (jruo *JobRunnerUpdateOne) ClearJobRunnerTokens() *JobRunnerUpdateOne {
	jruo.mutation.ClearJobRunnerTokens()
	return jruo
}

// RemoveJobRunnerTokenIDs removes the "job_runner_tokens" edge to JobRunnerToken entities by IDs.
func (jruo *JobRunnerUpdateOne) RemoveJobRunnerTokenIDs(ids ...string) *JobRunnerUpdateOne {
	jruo.mutation.RemoveJobRunnerTokenIDs(ids...)
	return jruo
}

// RemoveJobRunnerTokens removes "job_runner_tokens" edges to JobRunnerToken entities.
func (jruo *JobRunnerUpdateOne) RemoveJobRunnerTokens(j ...*JobRunnerToken) *JobRunnerUpdateOne {
	ids := make([]string, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jruo.RemoveJobRunnerTokenIDs(ids...)
}

// Where appends a list predicates to the JobRunnerUpdate builder.
func (jruo *JobRunnerUpdateOne) Where(ps ...predicate.JobRunner) *JobRunnerUpdateOne {
	jruo.mutation.Where(ps...)
	return jruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jruo *JobRunnerUpdateOne) Select(field string, fields ...string) *JobRunnerUpdateOne {
	jruo.fields = append([]string{field}, fields...)
	return jruo
}

// Save executes the query and returns the updated JobRunner entity.
func (jruo *JobRunnerUpdateOne) Save(ctx context.Context) (*JobRunner, error) {
	if err := jruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jruo.sqlSave, jruo.mutation, jruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jruo *JobRunnerUpdateOne) SaveX(ctx context.Context) *JobRunner {
	node, err := jruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jruo *JobRunnerUpdateOne) Exec(ctx context.Context) error {
	_, err := jruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jruo *JobRunnerUpdateOne) ExecX(ctx context.Context) {
	if err := jruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jruo *JobRunnerUpdateOne) defaults() error {
	if _, ok := jruo.mutation.UpdatedAt(); !ok && !jruo.mutation.UpdatedAtCleared() {
		if jobrunner.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunner.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunner.UpdateDefaultUpdatedAt()
		jruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jruo *JobRunnerUpdateOne) check() error {
	if v, ok := jruo.mutation.Status(); ok {
		if err := jobrunner.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobRunner.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jruo *JobRunnerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobRunnerUpdateOne {
	jruo.modifiers = append(jruo.modifiers, modifiers...)
	return jruo
}

func (jruo *JobRunnerUpdateOne) sqlSave(ctx context.Context) (_node *JobRunner, err error) {
	if err := jruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobrunner.Table, jobrunner.Columns, sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString))
	id, ok := jruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "JobRunner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobrunner.FieldID)
		for _, f := range fields {
			if !jobrunner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != jobrunner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jruo.mutation.CreatedAtCleared() {
		_spec.ClearField(jobrunner.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jruo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunner.FieldUpdatedAt, field.TypeTime, value)
	}
	if jruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobrunner.FieldUpdatedAt, field.TypeTime)
	}
	if jruo.mutation.CreatedByCleared() {
		_spec.ClearField(jobrunner.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jruo.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunner.FieldUpdatedBy, field.TypeString, value)
	}
	if jruo.mutation.UpdatedByCleared() {
		_spec.ClearField(jobrunner.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jruo.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunner.FieldDeletedAt, field.TypeTime, value)
	}
	if jruo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobrunner.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jruo.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunner.FieldDeletedBy, field.TypeString, value)
	}
	if jruo.mutation.DeletedByCleared() {
		_spec.ClearField(jobrunner.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jruo.mutation.Tags(); ok {
		_spec.SetField(jobrunner.FieldTags, field.TypeJSON, value)
	}
	if value, ok := jruo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobrunner.FieldTags, value)
		})
	}
	if jruo.mutation.TagsCleared() {
		_spec.ClearField(jobrunner.FieldTags, field.TypeJSON)
	}
	if jruo.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobrunner.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := jruo.mutation.Name(); ok {
		_spec.SetField(jobrunner.FieldName, field.TypeString, value)
	}
	if value, ok := jruo.mutation.Status(); ok {
		_spec.SetField(jobrunner.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := jruo.mutation.IPAddress(); ok {
		_spec.SetField(jobrunner.FieldIPAddress, field.TypeString, value)
	}
	if jruo.mutation.IPAddressCleared() {
		_spec.ClearField(jobrunner.FieldIPAddress, field.TypeString)
	}
	if value, ok := jruo.mutation.LastSeen(); ok {
		_spec.SetField(jobrunner.FieldLastSeen, field.TypeTime, value)
	}
	if jruo.mutation.LastSeenCleared() {
		_spec.ClearField(jobrunner.FieldLastSeen, field.TypeTime)
	}
	if value, ok := jruo.mutation.Version(); ok {
		_spec.SetField(jobrunner.FieldVersion, field.TypeString, value)
	}
	if jruo.mutation.VersionCleared() {
		_spec.ClearField(jobrunner.FieldVersion, field.TypeString)
	}
	if value, ok := jruo.mutation.Os(); ok {
		_spec.SetField(jobrunner.FieldOs, field.TypeString, value)
	}
	if jruo.mutation.OsCleared() {
		_spec.ClearField(jobrunner.FieldOs, field.TypeString)
	}
	if jruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunner.OwnerTable,
			Columns: []string{jobrunner.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobRunner
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunner.OwnerTable,
			Columns: []string{jobrunner.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobRunner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.JobRunnerTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobrunner.JobRunnerTokensTable,
			Columns: jobrunner.JobRunnerTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobRunnerJobRunnerTokens
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.RemovedJobRunnerTokensIDs(); len(nodes) > 0 && !jruo.mutation.JobRunnerTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobrunner.JobRunnerTokensTable,
			Columns: jobrunner.JobRunnerTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.JobRunnerTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobrunner.JobRunnerTokensTable,
			Columns: jobrunner.JobRunnerTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobRunnerJobRunnerTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jruo.schemaConfig.JobRunner
	ctx = internal.NewSchemaConfigContext(ctx, jruo.schemaConfig)
	_spec.AddModifiers(jruo.modifiers...)
	_node = &JobRunner{config: jruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrunner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jruo.mutation.done = true
	return _node, nil
}
