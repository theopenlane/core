// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/usagehistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// UsageHistoryUpdate is the builder for updating UsageHistory entities.
type UsageHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *UsageHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UsageHistoryUpdate builder.
func (uhu *UsageHistoryUpdate) Where(ps ...predicate.UsageHistory) *UsageHistoryUpdate {
	uhu.mutation.Where(ps...)
	return uhu
}

// SetUpdatedAt sets the "updated_at" field.
func (uhu *UsageHistoryUpdate) SetUpdatedAt(t time.Time) *UsageHistoryUpdate {
	uhu.mutation.SetUpdatedAt(t)
	return uhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uhu *UsageHistoryUpdate) ClearUpdatedAt() *UsageHistoryUpdate {
	uhu.mutation.ClearUpdatedAt()
	return uhu
}

// SetUpdatedBy sets the "updated_by" field.
func (uhu *UsageHistoryUpdate) SetUpdatedBy(s string) *UsageHistoryUpdate {
	uhu.mutation.SetUpdatedBy(s)
	return uhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uhu *UsageHistoryUpdate) SetNillableUpdatedBy(s *string) *UsageHistoryUpdate {
	if s != nil {
		uhu.SetUpdatedBy(*s)
	}
	return uhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uhu *UsageHistoryUpdate) ClearUpdatedBy() *UsageHistoryUpdate {
	uhu.mutation.ClearUpdatedBy()
	return uhu
}

// SetDeletedAt sets the "deleted_at" field.
func (uhu *UsageHistoryUpdate) SetDeletedAt(t time.Time) *UsageHistoryUpdate {
	uhu.mutation.SetDeletedAt(t)
	return uhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uhu *UsageHistoryUpdate) SetNillableDeletedAt(t *time.Time) *UsageHistoryUpdate {
	if t != nil {
		uhu.SetDeletedAt(*t)
	}
	return uhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uhu *UsageHistoryUpdate) ClearDeletedAt() *UsageHistoryUpdate {
	uhu.mutation.ClearDeletedAt()
	return uhu
}

// SetDeletedBy sets the "deleted_by" field.
func (uhu *UsageHistoryUpdate) SetDeletedBy(s string) *UsageHistoryUpdate {
	uhu.mutation.SetDeletedBy(s)
	return uhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uhu *UsageHistoryUpdate) SetNillableDeletedBy(s *string) *UsageHistoryUpdate {
	if s != nil {
		uhu.SetDeletedBy(*s)
	}
	return uhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uhu *UsageHistoryUpdate) ClearDeletedBy() *UsageHistoryUpdate {
	uhu.mutation.ClearDeletedBy()
	return uhu
}

// SetTags sets the "tags" field.
func (uhu *UsageHistoryUpdate) SetTags(s []string) *UsageHistoryUpdate {
	uhu.mutation.SetTags(s)
	return uhu
}

// AppendTags appends s to the "tags" field.
func (uhu *UsageHistoryUpdate) AppendTags(s []string) *UsageHistoryUpdate {
	uhu.mutation.AppendTags(s)
	return uhu
}

// ClearTags clears the value of the "tags" field.
func (uhu *UsageHistoryUpdate) ClearTags() *UsageHistoryUpdate {
	uhu.mutation.ClearTags()
	return uhu
}

// SetOrganizationID sets the "organization_id" field.
func (uhu *UsageHistoryUpdate) SetOrganizationID(s string) *UsageHistoryUpdate {
	uhu.mutation.SetOrganizationID(s)
	return uhu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uhu *UsageHistoryUpdate) SetNillableOrganizationID(s *string) *UsageHistoryUpdate {
	if s != nil {
		uhu.SetOrganizationID(*s)
	}
	return uhu
}

// SetResourceType sets the "resource_type" field.
func (uhu *UsageHistoryUpdate) SetResourceType(et enums.UsageType) *UsageHistoryUpdate {
	uhu.mutation.SetResourceType(et)
	return uhu
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (uhu *UsageHistoryUpdate) SetNillableResourceType(et *enums.UsageType) *UsageHistoryUpdate {
	if et != nil {
		uhu.SetResourceType(*et)
	}
	return uhu
}

// SetUsed sets the "used" field.
func (uhu *UsageHistoryUpdate) SetUsed(i int64) *UsageHistoryUpdate {
	uhu.mutation.ResetUsed()
	uhu.mutation.SetUsed(i)
	return uhu
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (uhu *UsageHistoryUpdate) SetNillableUsed(i *int64) *UsageHistoryUpdate {
	if i != nil {
		uhu.SetUsed(*i)
	}
	return uhu
}

// AddUsed adds i to the "used" field.
func (uhu *UsageHistoryUpdate) AddUsed(i int64) *UsageHistoryUpdate {
	uhu.mutation.AddUsed(i)
	return uhu
}

// SetLimit sets the "limit" field.
func (uhu *UsageHistoryUpdate) SetLimit(i int64) *UsageHistoryUpdate {
	uhu.mutation.ResetLimit()
	uhu.mutation.SetLimit(i)
	return uhu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uhu *UsageHistoryUpdate) SetNillableLimit(i *int64) *UsageHistoryUpdate {
	if i != nil {
		uhu.SetLimit(*i)
	}
	return uhu
}

// AddLimit adds i to the "limit" field.
func (uhu *UsageHistoryUpdate) AddLimit(i int64) *UsageHistoryUpdate {
	uhu.mutation.AddLimit(i)
	return uhu
}

// Mutation returns the UsageHistoryMutation object of the builder.
func (uhu *UsageHistoryUpdate) Mutation() *UsageHistoryMutation {
	return uhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uhu *UsageHistoryUpdate) Save(ctx context.Context) (int, error) {
	uhu.defaults()
	return withHooks(ctx, uhu.sqlSave, uhu.mutation, uhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uhu *UsageHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := uhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uhu *UsageHistoryUpdate) Exec(ctx context.Context) error {
	_, err := uhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhu *UsageHistoryUpdate) ExecX(ctx context.Context) {
	if err := uhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhu *UsageHistoryUpdate) defaults() {
	if _, ok := uhu.mutation.UpdatedAt(); !ok && !uhu.mutation.UpdatedAtCleared() {
		v := usagehistory.UpdateDefaultUpdatedAt()
		uhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhu *UsageHistoryUpdate) check() error {
	if v, ok := uhu.mutation.ResourceType(); ok {
		if err := usagehistory.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`generated: validator failed for field "UsageHistory.resource_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uhu *UsageHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UsageHistoryUpdate {
	uhu.modifiers = append(uhu.modifiers, modifiers...)
	return uhu
}

func (uhu *UsageHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usagehistory.Table, usagehistory.Columns, sqlgraph.NewFieldSpec(usagehistory.FieldID, field.TypeString))
	if ps := uhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uhu.mutation.RefCleared() {
		_spec.ClearField(usagehistory.FieldRef, field.TypeString)
	}
	if uhu.mutation.CreatedAtCleared() {
		_spec.ClearField(usagehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uhu.mutation.UpdatedAt(); ok {
		_spec.SetField(usagehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if uhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(usagehistory.FieldUpdatedAt, field.TypeTime)
	}
	if uhu.mutation.CreatedByCleared() {
		_spec.ClearField(usagehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uhu.mutation.UpdatedBy(); ok {
		_spec.SetField(usagehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if uhu.mutation.UpdatedByCleared() {
		_spec.ClearField(usagehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uhu.mutation.DeletedAt(); ok {
		_spec.SetField(usagehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if uhu.mutation.DeletedAtCleared() {
		_spec.ClearField(usagehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uhu.mutation.DeletedBy(); ok {
		_spec.SetField(usagehistory.FieldDeletedBy, field.TypeString, value)
	}
	if uhu.mutation.DeletedByCleared() {
		_spec.ClearField(usagehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uhu.mutation.Tags(); ok {
		_spec.SetField(usagehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := uhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usagehistory.FieldTags, value)
		})
	}
	if uhu.mutation.TagsCleared() {
		_spec.ClearField(usagehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := uhu.mutation.OrganizationID(); ok {
		_spec.SetField(usagehistory.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := uhu.mutation.ResourceType(); ok {
		_spec.SetField(usagehistory.FieldResourceType, field.TypeEnum, value)
	}
	if value, ok := uhu.mutation.Used(); ok {
		_spec.SetField(usagehistory.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := uhu.mutation.AddedUsed(); ok {
		_spec.AddField(usagehistory.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := uhu.mutation.Limit(); ok {
		_spec.SetField(usagehistory.FieldLimit, field.TypeInt64, value)
	}
	if value, ok := uhu.mutation.AddedLimit(); ok {
		_spec.AddField(usagehistory.FieldLimit, field.TypeInt64, value)
	}
	_spec.Node.Schema = uhu.schemaConfig.UsageHistory
	ctx = internal.NewSchemaConfigContext(ctx, uhu.schemaConfig)
	_spec.AddModifiers(uhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usagehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uhu.mutation.done = true
	return n, nil
}

// UsageHistoryUpdateOne is the builder for updating a single UsageHistory entity.
type UsageHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UsageHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uhuo *UsageHistoryUpdateOne) SetUpdatedAt(t time.Time) *UsageHistoryUpdateOne {
	uhuo.mutation.SetUpdatedAt(t)
	return uhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uhuo *UsageHistoryUpdateOne) ClearUpdatedAt() *UsageHistoryUpdateOne {
	uhuo.mutation.ClearUpdatedAt()
	return uhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (uhuo *UsageHistoryUpdateOne) SetUpdatedBy(s string) *UsageHistoryUpdateOne {
	uhuo.mutation.SetUpdatedBy(s)
	return uhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uhuo *UsageHistoryUpdateOne) SetNillableUpdatedBy(s *string) *UsageHistoryUpdateOne {
	if s != nil {
		uhuo.SetUpdatedBy(*s)
	}
	return uhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uhuo *UsageHistoryUpdateOne) ClearUpdatedBy() *UsageHistoryUpdateOne {
	uhuo.mutation.ClearUpdatedBy()
	return uhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uhuo *UsageHistoryUpdateOne) SetDeletedAt(t time.Time) *UsageHistoryUpdateOne {
	uhuo.mutation.SetDeletedAt(t)
	return uhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uhuo *UsageHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *UsageHistoryUpdateOne {
	if t != nil {
		uhuo.SetDeletedAt(*t)
	}
	return uhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uhuo *UsageHistoryUpdateOne) ClearDeletedAt() *UsageHistoryUpdateOne {
	uhuo.mutation.ClearDeletedAt()
	return uhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (uhuo *UsageHistoryUpdateOne) SetDeletedBy(s string) *UsageHistoryUpdateOne {
	uhuo.mutation.SetDeletedBy(s)
	return uhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uhuo *UsageHistoryUpdateOne) SetNillableDeletedBy(s *string) *UsageHistoryUpdateOne {
	if s != nil {
		uhuo.SetDeletedBy(*s)
	}
	return uhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uhuo *UsageHistoryUpdateOne) ClearDeletedBy() *UsageHistoryUpdateOne {
	uhuo.mutation.ClearDeletedBy()
	return uhuo
}

// SetTags sets the "tags" field.
func (uhuo *UsageHistoryUpdateOne) SetTags(s []string) *UsageHistoryUpdateOne {
	uhuo.mutation.SetTags(s)
	return uhuo
}

// AppendTags appends s to the "tags" field.
func (uhuo *UsageHistoryUpdateOne) AppendTags(s []string) *UsageHistoryUpdateOne {
	uhuo.mutation.AppendTags(s)
	return uhuo
}

// ClearTags clears the value of the "tags" field.
func (uhuo *UsageHistoryUpdateOne) ClearTags() *UsageHistoryUpdateOne {
	uhuo.mutation.ClearTags()
	return uhuo
}

// SetOrganizationID sets the "organization_id" field.
func (uhuo *UsageHistoryUpdateOne) SetOrganizationID(s string) *UsageHistoryUpdateOne {
	uhuo.mutation.SetOrganizationID(s)
	return uhuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uhuo *UsageHistoryUpdateOne) SetNillableOrganizationID(s *string) *UsageHistoryUpdateOne {
	if s != nil {
		uhuo.SetOrganizationID(*s)
	}
	return uhuo
}

// SetResourceType sets the "resource_type" field.
func (uhuo *UsageHistoryUpdateOne) SetResourceType(et enums.UsageType) *UsageHistoryUpdateOne {
	uhuo.mutation.SetResourceType(et)
	return uhuo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (uhuo *UsageHistoryUpdateOne) SetNillableResourceType(et *enums.UsageType) *UsageHistoryUpdateOne {
	if et != nil {
		uhuo.SetResourceType(*et)
	}
	return uhuo
}

// SetUsed sets the "used" field.
func (uhuo *UsageHistoryUpdateOne) SetUsed(i int64) *UsageHistoryUpdateOne {
	uhuo.mutation.ResetUsed()
	uhuo.mutation.SetUsed(i)
	return uhuo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (uhuo *UsageHistoryUpdateOne) SetNillableUsed(i *int64) *UsageHistoryUpdateOne {
	if i != nil {
		uhuo.SetUsed(*i)
	}
	return uhuo
}

// AddUsed adds i to the "used" field.
func (uhuo *UsageHistoryUpdateOne) AddUsed(i int64) *UsageHistoryUpdateOne {
	uhuo.mutation.AddUsed(i)
	return uhuo
}

// SetLimit sets the "limit" field.
func (uhuo *UsageHistoryUpdateOne) SetLimit(i int64) *UsageHistoryUpdateOne {
	uhuo.mutation.ResetLimit()
	uhuo.mutation.SetLimit(i)
	return uhuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uhuo *UsageHistoryUpdateOne) SetNillableLimit(i *int64) *UsageHistoryUpdateOne {
	if i != nil {
		uhuo.SetLimit(*i)
	}
	return uhuo
}

// AddLimit adds i to the "limit" field.
func (uhuo *UsageHistoryUpdateOne) AddLimit(i int64) *UsageHistoryUpdateOne {
	uhuo.mutation.AddLimit(i)
	return uhuo
}

// Mutation returns the UsageHistoryMutation object of the builder.
func (uhuo *UsageHistoryUpdateOne) Mutation() *UsageHistoryMutation {
	return uhuo.mutation
}

// Where appends a list predicates to the UsageHistoryUpdate builder.
func (uhuo *UsageHistoryUpdateOne) Where(ps ...predicate.UsageHistory) *UsageHistoryUpdateOne {
	uhuo.mutation.Where(ps...)
	return uhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uhuo *UsageHistoryUpdateOne) Select(field string, fields ...string) *UsageHistoryUpdateOne {
	uhuo.fields = append([]string{field}, fields...)
	return uhuo
}

// Save executes the query and returns the updated UsageHistory entity.
func (uhuo *UsageHistoryUpdateOne) Save(ctx context.Context) (*UsageHistory, error) {
	uhuo.defaults()
	return withHooks(ctx, uhuo.sqlSave, uhuo.mutation, uhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uhuo *UsageHistoryUpdateOne) SaveX(ctx context.Context) *UsageHistory {
	node, err := uhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uhuo *UsageHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := uhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhuo *UsageHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := uhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhuo *UsageHistoryUpdateOne) defaults() {
	if _, ok := uhuo.mutation.UpdatedAt(); !ok && !uhuo.mutation.UpdatedAtCleared() {
		v := usagehistory.UpdateDefaultUpdatedAt()
		uhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhuo *UsageHistoryUpdateOne) check() error {
	if v, ok := uhuo.mutation.ResourceType(); ok {
		if err := usagehistory.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`generated: validator failed for field "UsageHistory.resource_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uhuo *UsageHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UsageHistoryUpdateOne {
	uhuo.modifiers = append(uhuo.modifiers, modifiers...)
	return uhuo
}

func (uhuo *UsageHistoryUpdateOne) sqlSave(ctx context.Context) (_node *UsageHistory, err error) {
	if err := uhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usagehistory.Table, usagehistory.Columns, sqlgraph.NewFieldSpec(usagehistory.FieldID, field.TypeString))
	id, ok := uhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UsageHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usagehistory.FieldID)
		for _, f := range fields {
			if !usagehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != usagehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uhuo.mutation.RefCleared() {
		_spec.ClearField(usagehistory.FieldRef, field.TypeString)
	}
	if uhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(usagehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usagehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if uhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(usagehistory.FieldUpdatedAt, field.TypeTime)
	}
	if uhuo.mutation.CreatedByCleared() {
		_spec.ClearField(usagehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(usagehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if uhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(usagehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uhuo.mutation.DeletedAt(); ok {
		_spec.SetField(usagehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if uhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(usagehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uhuo.mutation.DeletedBy(); ok {
		_spec.SetField(usagehistory.FieldDeletedBy, field.TypeString, value)
	}
	if uhuo.mutation.DeletedByCleared() {
		_spec.ClearField(usagehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uhuo.mutation.Tags(); ok {
		_spec.SetField(usagehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := uhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usagehistory.FieldTags, value)
		})
	}
	if uhuo.mutation.TagsCleared() {
		_spec.ClearField(usagehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := uhuo.mutation.OrganizationID(); ok {
		_spec.SetField(usagehistory.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := uhuo.mutation.ResourceType(); ok {
		_spec.SetField(usagehistory.FieldResourceType, field.TypeEnum, value)
	}
	if value, ok := uhuo.mutation.Used(); ok {
		_spec.SetField(usagehistory.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := uhuo.mutation.AddedUsed(); ok {
		_spec.AddField(usagehistory.FieldUsed, field.TypeInt64, value)
	}
	if value, ok := uhuo.mutation.Limit(); ok {
		_spec.SetField(usagehistory.FieldLimit, field.TypeInt64, value)
	}
	if value, ok := uhuo.mutation.AddedLimit(); ok {
		_spec.AddField(usagehistory.FieldLimit, field.TypeInt64, value)
	}
	_spec.Node.Schema = uhuo.schemaConfig.UsageHistory
	ctx = internal.NewSchemaConfigContext(ctx, uhuo.schemaConfig)
	_spec.AddModifiers(uhuo.modifiers...)
	_node = &UsageHistory{config: uhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usagehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uhuo.mutation.done = true
	return _node, nil
}
