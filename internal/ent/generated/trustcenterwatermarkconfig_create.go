// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterwatermarkconfig"
	"github.com/theopenlane/core/pkg/enums"
)

// TrustCenterWatermarkConfigCreate is the builder for creating a TrustCenterWatermarkConfig entity.
type TrustCenterWatermarkConfigCreate struct {
	config
	mutation *TrustCenterWatermarkConfigMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *TrustCenterWatermarkConfigCreate) SetCreatedAt(v time.Time) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableCreatedAt(v *time.Time) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TrustCenterWatermarkConfigCreate) SetUpdatedAt(v time.Time) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableUpdatedAt(v *time.Time) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *TrustCenterWatermarkConfigCreate) SetCreatedBy(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableCreatedBy(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *TrustCenterWatermarkConfigCreate) SetUpdatedBy(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableUpdatedBy(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *TrustCenterWatermarkConfigCreate) SetDeletedAt(v time.Time) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableDeletedAt(v *time.Time) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *TrustCenterWatermarkConfigCreate) SetDeletedBy(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableDeletedBy(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *TrustCenterWatermarkConfigCreate) SetOwnerID(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableOwnerID(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_c *TrustCenterWatermarkConfigCreate) SetTrustCenterID(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetTrustCenterID(v)
	return _c
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableTrustCenterID(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetTrustCenterID(*v)
	}
	return _c
}

// SetLogoID sets the "logo_id" field.
func (_c *TrustCenterWatermarkConfigCreate) SetLogoID(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetLogoID(v)
	return _c
}

// SetNillableLogoID sets the "logo_id" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableLogoID(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetLogoID(*v)
	}
	return _c
}

// SetText sets the "text" field.
func (_c *TrustCenterWatermarkConfigCreate) SetText(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetText(v)
	return _c
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableText(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetText(*v)
	}
	return _c
}

// SetFontSize sets the "font_size" field.
func (_c *TrustCenterWatermarkConfigCreate) SetFontSize(v float64) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetFontSize(v)
	return _c
}

// SetNillableFontSize sets the "font_size" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableFontSize(v *float64) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetFontSize(*v)
	}
	return _c
}

// SetOpacity sets the "opacity" field.
func (_c *TrustCenterWatermarkConfigCreate) SetOpacity(v float64) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetOpacity(v)
	return _c
}

// SetNillableOpacity sets the "opacity" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableOpacity(v *float64) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetOpacity(*v)
	}
	return _c
}

// SetRotation sets the "rotation" field.
func (_c *TrustCenterWatermarkConfigCreate) SetRotation(v float64) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetRotation(v)
	return _c
}

// SetNillableRotation sets the "rotation" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableRotation(v *float64) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetRotation(*v)
	}
	return _c
}

// SetColor sets the "color" field.
func (_c *TrustCenterWatermarkConfigCreate) SetColor(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetColor(v)
	return _c
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableColor(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetColor(*v)
	}
	return _c
}

// SetFont sets the "font" field.
func (_c *TrustCenterWatermarkConfigCreate) SetFont(v enums.Font) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetFont(v)
	return _c
}

// SetNillableFont sets the "font" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableFont(v *enums.Font) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetFont(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TrustCenterWatermarkConfigCreate) SetID(v string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableID(v *string) *TrustCenterWatermarkConfigCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *TrustCenterWatermarkConfigCreate) SetOwner(v *Organization) *TrustCenterWatermarkConfigCreate {
	return _c.SetOwnerID(v.ID)
}

// AddTrustCenterIDs adds the "trust_center" edge to the TrustCenter entity by IDs.
func (_c *TrustCenterWatermarkConfigCreate) AddTrustCenterIDs(ids ...string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.AddTrustCenterIDs(ids...)
	return _c
}

// AddTrustCenter adds the "trust_center" edges to the TrustCenter entity.
func (_c *TrustCenterWatermarkConfigCreate) AddTrustCenter(v ...*TrustCenter) *TrustCenterWatermarkConfigCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTrustCenterIDs(ids...)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_c *TrustCenterWatermarkConfigCreate) SetFileID(id string) *TrustCenterWatermarkConfigCreate {
	_c.mutation.SetFileID(id)
	return _c
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_c *TrustCenterWatermarkConfigCreate) SetNillableFileID(id *string) *TrustCenterWatermarkConfigCreate {
	if id != nil {
		_c = _c.SetFileID(*id)
	}
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *TrustCenterWatermarkConfigCreate) SetFile(v *File) *TrustCenterWatermarkConfigCreate {
	return _c.SetFileID(v.ID)
}

// Mutation returns the TrustCenterWatermarkConfigMutation object of the builder.
func (_c *TrustCenterWatermarkConfigCreate) Mutation() *TrustCenterWatermarkConfigMutation {
	return _c.mutation
}

// Save creates the TrustCenterWatermarkConfig in the database.
func (_c *TrustCenterWatermarkConfigCreate) Save(ctx context.Context) (*TrustCenterWatermarkConfig, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TrustCenterWatermarkConfigCreate) SaveX(ctx context.Context) *TrustCenterWatermarkConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TrustCenterWatermarkConfigCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TrustCenterWatermarkConfigCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TrustCenterWatermarkConfigCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if trustcenterwatermarkconfig.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenterwatermarkconfig.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenterwatermarkconfig.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if trustcenterwatermarkconfig.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenterwatermarkconfig.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenterwatermarkconfig.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.FontSize(); !ok {
		v := trustcenterwatermarkconfig.DefaultFontSize
		_c.mutation.SetFontSize(v)
	}
	if _, ok := _c.mutation.Opacity(); !ok {
		v := trustcenterwatermarkconfig.DefaultOpacity
		_c.mutation.SetOpacity(v)
	}
	if _, ok := _c.mutation.Rotation(); !ok {
		v := trustcenterwatermarkconfig.DefaultRotation
		_c.mutation.SetRotation(v)
	}
	if _, ok := _c.mutation.Color(); !ok {
		v := trustcenterwatermarkconfig.DefaultColor
		_c.mutation.SetColor(v)
	}
	if _, ok := _c.mutation.Font(); !ok {
		v := trustcenterwatermarkconfig.DefaultFont
		_c.mutation.SetFont(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if trustcenterwatermarkconfig.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized trustcenterwatermarkconfig.DefaultID (forgotten import generated/runtime?)")
		}
		v := trustcenterwatermarkconfig.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *TrustCenterWatermarkConfigCreate) check() error {
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := trustcenterwatermarkconfig.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterWatermarkConfig.owner_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TrustCenterID(); ok {
		if err := trustcenterwatermarkconfig.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterWatermarkConfig.trust_center_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Text(); ok {
		if err := trustcenterwatermarkconfig.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`generated: validator failed for field "TrustCenterWatermarkConfig.text": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Opacity(); ok {
		if err := trustcenterwatermarkconfig.OpacityValidator(v); err != nil {
			return &ValidationError{Name: "opacity", err: fmt.Errorf(`generated: validator failed for field "TrustCenterWatermarkConfig.opacity": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Rotation(); ok {
		if err := trustcenterwatermarkconfig.RotationValidator(v); err != nil {
			return &ValidationError{Name: "rotation", err: fmt.Errorf(`generated: validator failed for field "TrustCenterWatermarkConfig.rotation": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Color(); ok {
		if err := trustcenterwatermarkconfig.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`generated: validator failed for field "TrustCenterWatermarkConfig.color": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Font(); ok {
		if err := trustcenterwatermarkconfig.FontValidator(v); err != nil {
			return &ValidationError{Name: "font", err: fmt.Errorf(`generated: validator failed for field "TrustCenterWatermarkConfig.font": %w`, err)}
		}
	}
	return nil
}

func (_c *TrustCenterWatermarkConfigCreate) sqlSave(ctx context.Context) (*TrustCenterWatermarkConfig, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TrustCenterWatermarkConfig.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TrustCenterWatermarkConfigCreate) createSpec() (*TrustCenterWatermarkConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &TrustCenterWatermarkConfig{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(trustcenterwatermarkconfig.Table, sqlgraph.NewFieldSpec(trustcenterwatermarkconfig.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.TrustCenterWatermarkConfig
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldTrustCenterID, field.TypeString, value)
		_node.TrustCenterID = value
	}
	if value, ok := _c.mutation.Text(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := _c.mutation.FontSize(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldFontSize, field.TypeFloat64, value)
		_node.FontSize = value
	}
	if value, ok := _c.mutation.Opacity(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldOpacity, field.TypeFloat64, value)
		_node.Opacity = value
	}
	if value, ok := _c.mutation.Rotation(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldRotation, field.TypeFloat64, value)
		_node.Rotation = value
	}
	if value, ok := _c.mutation.Color(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := _c.mutation.Font(); ok {
		_spec.SetField(trustcenterwatermarkconfig.FieldFont, field.TypeEnum, value)
		_node.Font = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenterwatermarkconfig.OwnerTable,
			Columns: []string{trustcenterwatermarkconfig.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TrustCenterWatermarkConfig
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   trustcenterwatermarkconfig.TrustCenterTable,
			Columns: []string{trustcenterwatermarkconfig.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenterwatermarkconfig.FileTable,
			Columns: []string{trustcenterwatermarkconfig.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TrustCenterWatermarkConfig
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LogoID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrustCenterWatermarkConfigCreateBulk is the builder for creating many TrustCenterWatermarkConfig entities in bulk.
type TrustCenterWatermarkConfigCreateBulk struct {
	config
	err      error
	builders []*TrustCenterWatermarkConfigCreate
}

// Save creates the TrustCenterWatermarkConfig entities in the database.
func (_c *TrustCenterWatermarkConfigCreateBulk) Save(ctx context.Context) ([]*TrustCenterWatermarkConfig, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TrustCenterWatermarkConfig, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrustCenterWatermarkConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TrustCenterWatermarkConfigCreateBulk) SaveX(ctx context.Context) []*TrustCenterWatermarkConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TrustCenterWatermarkConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TrustCenterWatermarkConfigCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
