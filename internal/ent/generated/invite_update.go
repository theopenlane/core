// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"
)

// InviteUpdate is the builder for updating Invite entities.
type InviteUpdate struct {
	config
	hooks     []Hook
	mutation  *InviteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InviteUpdate builder.
func (iu *InviteUpdate) Where(ps ...predicate.Invite) *InviteUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InviteUpdate) SetUpdatedAt(t time.Time) *InviteUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (iu *InviteUpdate) ClearUpdatedAt() *InviteUpdate {
	iu.mutation.ClearUpdatedAt()
	return iu
}

// SetUpdatedBy sets the "updated_by" field.
func (iu *InviteUpdate) SetUpdatedBy(s string) *InviteUpdate {
	iu.mutation.SetUpdatedBy(s)
	return iu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableUpdatedBy(s *string) *InviteUpdate {
	if s != nil {
		iu.SetUpdatedBy(*s)
	}
	return iu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iu *InviteUpdate) ClearUpdatedBy() *InviteUpdate {
	iu.mutation.ClearUpdatedBy()
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *InviteUpdate) SetDeletedAt(t time.Time) *InviteUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableDeletedAt(t *time.Time) *InviteUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *InviteUpdate) ClearDeletedAt() *InviteUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetDeletedBy sets the "deleted_by" field.
func (iu *InviteUpdate) SetDeletedBy(s string) *InviteUpdate {
	iu.mutation.SetDeletedBy(s)
	return iu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableDeletedBy(s *string) *InviteUpdate {
	if s != nil {
		iu.SetDeletedBy(*s)
	}
	return iu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (iu *InviteUpdate) ClearDeletedBy() *InviteUpdate {
	iu.mutation.ClearDeletedBy()
	return iu
}

// SetOwnerID sets the "owner_id" field.
func (iu *InviteUpdate) SetOwnerID(s string) *InviteUpdate {
	iu.mutation.SetOwnerID(s)
	return iu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableOwnerID(s *string) *InviteUpdate {
	if s != nil {
		iu.SetOwnerID(*s)
	}
	return iu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (iu *InviteUpdate) ClearOwnerID() *InviteUpdate {
	iu.mutation.ClearOwnerID()
	return iu
}

// SetToken sets the "token" field.
func (iu *InviteUpdate) SetToken(s string) *InviteUpdate {
	iu.mutation.SetToken(s)
	return iu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableToken(s *string) *InviteUpdate {
	if s != nil {
		iu.SetToken(*s)
	}
	return iu
}

// SetExpires sets the "expires" field.
func (iu *InviteUpdate) SetExpires(t time.Time) *InviteUpdate {
	iu.mutation.SetExpires(t)
	return iu
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableExpires(t *time.Time) *InviteUpdate {
	if t != nil {
		iu.SetExpires(*t)
	}
	return iu
}

// ClearExpires clears the value of the "expires" field.
func (iu *InviteUpdate) ClearExpires() *InviteUpdate {
	iu.mutation.ClearExpires()
	return iu
}

// SetStatus sets the "status" field.
func (iu *InviteUpdate) SetStatus(es enums.InviteStatus) *InviteUpdate {
	iu.mutation.SetStatus(es)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableStatus(es *enums.InviteStatus) *InviteUpdate {
	if es != nil {
		iu.SetStatus(*es)
	}
	return iu
}

// SetRole sets the "role" field.
func (iu *InviteUpdate) SetRole(e enums.Role) *InviteUpdate {
	iu.mutation.SetRole(e)
	return iu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableRole(e *enums.Role) *InviteUpdate {
	if e != nil {
		iu.SetRole(*e)
	}
	return iu
}

// SetSendAttempts sets the "send_attempts" field.
func (iu *InviteUpdate) SetSendAttempts(i int) *InviteUpdate {
	iu.mutation.ResetSendAttempts()
	iu.mutation.SetSendAttempts(i)
	return iu
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableSendAttempts(i *int) *InviteUpdate {
	if i != nil {
		iu.SetSendAttempts(*i)
	}
	return iu
}

// AddSendAttempts adds i to the "send_attempts" field.
func (iu *InviteUpdate) AddSendAttempts(i int) *InviteUpdate {
	iu.mutation.AddSendAttempts(i)
	return iu
}

// SetSecret sets the "secret" field.
func (iu *InviteUpdate) SetSecret(b []byte) *InviteUpdate {
	iu.mutation.SetSecret(b)
	return iu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (iu *InviteUpdate) SetOwner(o *Organization) *InviteUpdate {
	return iu.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (iu *InviteUpdate) AddEventIDs(ids ...string) *InviteUpdate {
	iu.mutation.AddEventIDs(ids...)
	return iu
}

// AddEvents adds the "events" edges to the Event entity.
func (iu *InviteUpdate) AddEvents(e ...*Event) *InviteUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iu.AddEventIDs(ids...)
}

// Mutation returns the InviteMutation object of the builder.
func (iu *InviteUpdate) Mutation() *InviteMutation {
	return iu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (iu *InviteUpdate) ClearOwner() *InviteUpdate {
	iu.mutation.ClearOwner()
	return iu
}

// ClearEvents clears all "events" edges to the Event entity.
func (iu *InviteUpdate) ClearEvents() *InviteUpdate {
	iu.mutation.ClearEvents()
	return iu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (iu *InviteUpdate) RemoveEventIDs(ids ...string) *InviteUpdate {
	iu.mutation.RemoveEventIDs(ids...)
	return iu
}

// RemoveEvents removes "events" edges to Event entities.
func (iu *InviteUpdate) RemoveEvents(e ...*Event) *InviteUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InviteUpdate) Save(ctx context.Context) (int, error) {
	if err := iu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InviteUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InviteUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InviteUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InviteUpdate) defaults() error {
	if _, ok := iu.mutation.UpdatedAt(); !ok && !iu.mutation.UpdatedAtCleared() {
		if invite.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized invite.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := invite.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iu *InviteUpdate) check() error {
	if v, ok := iu.mutation.OwnerID(); ok {
		if err := invite.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Invite.owner_id": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Token(); ok {
		if err := invite.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "Invite.token": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Status(); ok {
		if err := invite.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Invite.status": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Role(); ok {
		if err := invite.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "Invite.role": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Secret(); ok {
		if err := invite.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "Invite.secret": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InviteUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InviteUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InviteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invite.Table, invite.Columns, sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iu.mutation.CreatedAtCleared() {
		_spec.ClearField(invite.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(invite.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.UpdatedAtCleared() {
		_spec.ClearField(invite.FieldUpdatedAt, field.TypeTime)
	}
	if iu.mutation.CreatedByCleared() {
		_spec.ClearField(invite.FieldCreatedBy, field.TypeString)
	}
	if value, ok := iu.mutation.UpdatedBy(); ok {
		_spec.SetField(invite.FieldUpdatedBy, field.TypeString, value)
	}
	if iu.mutation.UpdatedByCleared() {
		_spec.ClearField(invite.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(invite.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(invite.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.DeletedBy(); ok {
		_spec.SetField(invite.FieldDeletedBy, field.TypeString, value)
	}
	if iu.mutation.DeletedByCleared() {
		_spec.ClearField(invite.FieldDeletedBy, field.TypeString)
	}
	if value, ok := iu.mutation.Token(); ok {
		_spec.SetField(invite.FieldToken, field.TypeString, value)
	}
	if value, ok := iu.mutation.Expires(); ok {
		_spec.SetField(invite.FieldExpires, field.TypeTime, value)
	}
	if iu.mutation.ExpiresCleared() {
		_spec.ClearField(invite.FieldExpires, field.TypeTime)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(invite.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.Role(); ok {
		_spec.SetField(invite.FieldRole, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.SendAttempts(); ok {
		_spec.SetField(invite.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedSendAttempts(); ok {
		_spec.AddField(invite.FieldSendAttempts, field.TypeInt, value)
	}
	if iu.mutation.RequestorIDCleared() {
		_spec.ClearField(invite.FieldRequestorID, field.TypeString)
	}
	if value, ok := iu.mutation.Secret(); ok {
		_spec.SetField(invite.FieldSecret, field.TypeBytes, value)
	}
	if iu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.OwnerTable,
			Columns: []string{invite.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = iu.schemaConfig.Invite
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.OwnerTable,
			Columns: []string{invite.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = iu.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.EventsTable,
			Columns: invite.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = iu.schemaConfig.InviteEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !iu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.EventsTable,
			Columns: invite.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = iu.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.EventsTable,
			Columns: invite.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = iu.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iu.schemaConfig.Invite
	ctx = internal.NewSchemaConfigContext(ctx, iu.schemaConfig)
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InviteUpdateOne is the builder for updating a single Invite entity.
type InviteUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InviteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InviteUpdateOne) SetUpdatedAt(t time.Time) *InviteUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (iuo *InviteUpdateOne) ClearUpdatedAt() *InviteUpdateOne {
	iuo.mutation.ClearUpdatedAt()
	return iuo
}

// SetUpdatedBy sets the "updated_by" field.
func (iuo *InviteUpdateOne) SetUpdatedBy(s string) *InviteUpdateOne {
	iuo.mutation.SetUpdatedBy(s)
	return iuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableUpdatedBy(s *string) *InviteUpdateOne {
	if s != nil {
		iuo.SetUpdatedBy(*s)
	}
	return iuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iuo *InviteUpdateOne) ClearUpdatedBy() *InviteUpdateOne {
	iuo.mutation.ClearUpdatedBy()
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *InviteUpdateOne) SetDeletedAt(t time.Time) *InviteUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableDeletedAt(t *time.Time) *InviteUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *InviteUpdateOne) ClearDeletedAt() *InviteUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetDeletedBy sets the "deleted_by" field.
func (iuo *InviteUpdateOne) SetDeletedBy(s string) *InviteUpdateOne {
	iuo.mutation.SetDeletedBy(s)
	return iuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableDeletedBy(s *string) *InviteUpdateOne {
	if s != nil {
		iuo.SetDeletedBy(*s)
	}
	return iuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (iuo *InviteUpdateOne) ClearDeletedBy() *InviteUpdateOne {
	iuo.mutation.ClearDeletedBy()
	return iuo
}

// SetOwnerID sets the "owner_id" field.
func (iuo *InviteUpdateOne) SetOwnerID(s string) *InviteUpdateOne {
	iuo.mutation.SetOwnerID(s)
	return iuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableOwnerID(s *string) *InviteUpdateOne {
	if s != nil {
		iuo.SetOwnerID(*s)
	}
	return iuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (iuo *InviteUpdateOne) ClearOwnerID() *InviteUpdateOne {
	iuo.mutation.ClearOwnerID()
	return iuo
}

// SetToken sets the "token" field.
func (iuo *InviteUpdateOne) SetToken(s string) *InviteUpdateOne {
	iuo.mutation.SetToken(s)
	return iuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableToken(s *string) *InviteUpdateOne {
	if s != nil {
		iuo.SetToken(*s)
	}
	return iuo
}

// SetExpires sets the "expires" field.
func (iuo *InviteUpdateOne) SetExpires(t time.Time) *InviteUpdateOne {
	iuo.mutation.SetExpires(t)
	return iuo
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableExpires(t *time.Time) *InviteUpdateOne {
	if t != nil {
		iuo.SetExpires(*t)
	}
	return iuo
}

// ClearExpires clears the value of the "expires" field.
func (iuo *InviteUpdateOne) ClearExpires() *InviteUpdateOne {
	iuo.mutation.ClearExpires()
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InviteUpdateOne) SetStatus(es enums.InviteStatus) *InviteUpdateOne {
	iuo.mutation.SetStatus(es)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableStatus(es *enums.InviteStatus) *InviteUpdateOne {
	if es != nil {
		iuo.SetStatus(*es)
	}
	return iuo
}

// SetRole sets the "role" field.
func (iuo *InviteUpdateOne) SetRole(e enums.Role) *InviteUpdateOne {
	iuo.mutation.SetRole(e)
	return iuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableRole(e *enums.Role) *InviteUpdateOne {
	if e != nil {
		iuo.SetRole(*e)
	}
	return iuo
}

// SetSendAttempts sets the "send_attempts" field.
func (iuo *InviteUpdateOne) SetSendAttempts(i int) *InviteUpdateOne {
	iuo.mutation.ResetSendAttempts()
	iuo.mutation.SetSendAttempts(i)
	return iuo
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableSendAttempts(i *int) *InviteUpdateOne {
	if i != nil {
		iuo.SetSendAttempts(*i)
	}
	return iuo
}

// AddSendAttempts adds i to the "send_attempts" field.
func (iuo *InviteUpdateOne) AddSendAttempts(i int) *InviteUpdateOne {
	iuo.mutation.AddSendAttempts(i)
	return iuo
}

// SetSecret sets the "secret" field.
func (iuo *InviteUpdateOne) SetSecret(b []byte) *InviteUpdateOne {
	iuo.mutation.SetSecret(b)
	return iuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (iuo *InviteUpdateOne) SetOwner(o *Organization) *InviteUpdateOne {
	return iuo.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (iuo *InviteUpdateOne) AddEventIDs(ids ...string) *InviteUpdateOne {
	iuo.mutation.AddEventIDs(ids...)
	return iuo
}

// AddEvents adds the "events" edges to the Event entity.
func (iuo *InviteUpdateOne) AddEvents(e ...*Event) *InviteUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iuo.AddEventIDs(ids...)
}

// Mutation returns the InviteMutation object of the builder.
func (iuo *InviteUpdateOne) Mutation() *InviteMutation {
	return iuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (iuo *InviteUpdateOne) ClearOwner() *InviteUpdateOne {
	iuo.mutation.ClearOwner()
	return iuo
}

// ClearEvents clears all "events" edges to the Event entity.
func (iuo *InviteUpdateOne) ClearEvents() *InviteUpdateOne {
	iuo.mutation.ClearEvents()
	return iuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (iuo *InviteUpdateOne) RemoveEventIDs(ids ...string) *InviteUpdateOne {
	iuo.mutation.RemoveEventIDs(ids...)
	return iuo
}

// RemoveEvents removes "events" edges to Event entities.
func (iuo *InviteUpdateOne) RemoveEvents(e ...*Event) *InviteUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return iuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the InviteUpdate builder.
func (iuo *InviteUpdateOne) Where(ps ...predicate.Invite) *InviteUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InviteUpdateOne) Select(field string, fields ...string) *InviteUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invite entity.
func (iuo *InviteUpdateOne) Save(ctx context.Context) (*Invite, error) {
	if err := iuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InviteUpdateOne) SaveX(ctx context.Context) *Invite {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InviteUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InviteUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InviteUpdateOne) defaults() error {
	if _, ok := iuo.mutation.UpdatedAt(); !ok && !iuo.mutation.UpdatedAtCleared() {
		if invite.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized invite.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := invite.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InviteUpdateOne) check() error {
	if v, ok := iuo.mutation.OwnerID(); ok {
		if err := invite.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Invite.owner_id": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Token(); ok {
		if err := invite.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "Invite.token": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Status(); ok {
		if err := invite.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Invite.status": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Role(); ok {
		if err := invite.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "Invite.role": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Secret(); ok {
		if err := invite.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "Invite.secret": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InviteUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InviteUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InviteUpdateOne) sqlSave(ctx context.Context) (_node *Invite, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invite.Table, invite.Columns, sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Invite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invite.FieldID)
		for _, f := range fields {
			if !invite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != invite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iuo.mutation.CreatedAtCleared() {
		_spec.ClearField(invite.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invite.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(invite.FieldUpdatedAt, field.TypeTime)
	}
	if iuo.mutation.CreatedByCleared() {
		_spec.ClearField(invite.FieldCreatedBy, field.TypeString)
	}
	if value, ok := iuo.mutation.UpdatedBy(); ok {
		_spec.SetField(invite.FieldUpdatedBy, field.TypeString, value)
	}
	if iuo.mutation.UpdatedByCleared() {
		_spec.ClearField(invite.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(invite.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(invite.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.DeletedBy(); ok {
		_spec.SetField(invite.FieldDeletedBy, field.TypeString, value)
	}
	if iuo.mutation.DeletedByCleared() {
		_spec.ClearField(invite.FieldDeletedBy, field.TypeString)
	}
	if value, ok := iuo.mutation.Token(); ok {
		_spec.SetField(invite.FieldToken, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Expires(); ok {
		_spec.SetField(invite.FieldExpires, field.TypeTime, value)
	}
	if iuo.mutation.ExpiresCleared() {
		_spec.ClearField(invite.FieldExpires, field.TypeTime)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(invite.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.Role(); ok {
		_spec.SetField(invite.FieldRole, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.SendAttempts(); ok {
		_spec.SetField(invite.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedSendAttempts(); ok {
		_spec.AddField(invite.FieldSendAttempts, field.TypeInt, value)
	}
	if iuo.mutation.RequestorIDCleared() {
		_spec.ClearField(invite.FieldRequestorID, field.TypeString)
	}
	if value, ok := iuo.mutation.Secret(); ok {
		_spec.SetField(invite.FieldSecret, field.TypeBytes, value)
	}
	if iuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.OwnerTable,
			Columns: []string{invite.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = iuo.schemaConfig.Invite
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.OwnerTable,
			Columns: []string{invite.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = iuo.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.EventsTable,
			Columns: invite.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = iuo.schemaConfig.InviteEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !iuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.EventsTable,
			Columns: invite.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = iuo.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invite.EventsTable,
			Columns: invite.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = iuo.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iuo.schemaConfig.Invite
	ctx = internal.NewSchemaConfigContext(ctx, iuo.schemaConfig)
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Invite{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
