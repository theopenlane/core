// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubcontrolQuery is the builder for querying Subcontrol entities.
type SubcontrolQuery struct {
	config
	ctx                             *QueryContext
	order                           []subcontrol.OrderOption
	inters                          []Interceptor
	predicates                      []predicate.Subcontrol
	withEvidence                    *EvidenceQuery
	withControlObjectives           *ControlObjectiveQuery
	withTasks                       *TaskQuery
	withNarratives                  *NarrativeQuery
	withRisks                       *RiskQuery
	withActionPlans                 *ActionPlanQuery
	withProcedures                  *ProcedureQuery
	withInternalPolicies            *InternalPolicyQuery
	withMappedControls              *MappedControlQuery
	withControlOwner                *GroupQuery
	withDelegate                    *GroupQuery
	withOwner                       *OrganizationQuery
	withControl                     *ControlQuery
	withControlImplementations      *ControlImplementationQuery
	withFKs                         bool
	loadTotal                       []func(context.Context, []*Subcontrol) error
	modifiers                       []func(*sql.Selector)
	withNamedEvidence               map[string]*EvidenceQuery
	withNamedControlObjectives      map[string]*ControlObjectiveQuery
	withNamedTasks                  map[string]*TaskQuery
	withNamedNarratives             map[string]*NarrativeQuery
	withNamedRisks                  map[string]*RiskQuery
	withNamedActionPlans            map[string]*ActionPlanQuery
	withNamedProcedures             map[string]*ProcedureQuery
	withNamedInternalPolicies       map[string]*InternalPolicyQuery
	withNamedMappedControls         map[string]*MappedControlQuery
	withNamedControlImplementations map[string]*ControlImplementationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubcontrolQuery builder.
func (sq *SubcontrolQuery) Where(ps ...predicate.Subcontrol) *SubcontrolQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *SubcontrolQuery) Limit(limit int) *SubcontrolQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *SubcontrolQuery) Offset(offset int) *SubcontrolQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *SubcontrolQuery) Unique(unique bool) *SubcontrolQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *SubcontrolQuery) Order(o ...subcontrol.OrderOption) *SubcontrolQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryEvidence chains the current query on the "evidence" edge.
func (sq *SubcontrolQuery) QueryEvidence() *EvidenceQuery {
	query := (&EvidenceClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(evidence.Table, evidence.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, subcontrol.EvidenceTable, subcontrol.EvidencePrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Evidence
		step.Edge.Schema = schemaConfig.EvidenceSubcontrols
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjectives chains the current query on the "control_objectives" edge.
func (sq *SubcontrolQuery) QueryControlObjectives() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subcontrol.ControlObjectivesTable, subcontrol.ControlObjectivesPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.SubcontrolControlObjectives
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (sq *SubcontrolQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subcontrol.TasksTable, subcontrol.TasksPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.SubcontrolTasks
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarratives chains the current query on the "narratives" edge.
func (sq *SubcontrolQuery) QueryNarratives() *NarrativeQuery {
	query := (&NarrativeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subcontrol.NarrativesTable, subcontrol.NarrativesColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.Narrative
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisks chains the current query on the "risks" edge.
func (sq *SubcontrolQuery) QueryRisks() *RiskQuery {
	query := (&RiskClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subcontrol.RisksTable, subcontrol.RisksPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.SubcontrolRisks
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActionPlans chains the current query on the "action_plans" edge.
func (sq *SubcontrolQuery) QueryActionPlans() *ActionPlanQuery {
	query := (&ActionPlanClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(actionplan.Table, actionplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subcontrol.ActionPlansTable, subcontrol.ActionPlansColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.ActionPlan
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedures chains the current query on the "procedures" edge.
func (sq *SubcontrolQuery) QueryProcedures() *ProcedureQuery {
	query := (&ProcedureClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subcontrol.ProceduresTable, subcontrol.ProceduresColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.Procedure
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicies chains the current query on the "internal_policies" edge.
func (sq *SubcontrolQuery) QueryInternalPolicies() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subcontrol.InternalPoliciesTable, subcontrol.InternalPoliciesColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicy
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMappedControls chains the current query on the "mapped_controls" edge.
func (sq *SubcontrolQuery) QueryMappedControls() *MappedControlQuery {
	query := (&MappedControlClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(mappedcontrol.Table, mappedcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, subcontrol.MappedControlsTable, subcontrol.MappedControlsPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.MappedControl
		step.Edge.Schema = schemaConfig.MappedControlSubcontrols
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlOwner chains the current query on the "control_owner" edge.
func (sq *SubcontrolQuery) QueryControlOwner() *GroupQuery {
	query := (&GroupClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subcontrol.ControlOwnerTable, subcontrol.ControlOwnerColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Subcontrol
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDelegate chains the current query on the "delegate" edge.
func (sq *SubcontrolQuery) QueryDelegate() *GroupQuery {
	query := (&GroupClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subcontrol.DelegateTable, subcontrol.DelegateColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Subcontrol
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwner chains the current query on the "owner" edge.
func (sq *SubcontrolQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subcontrol.OwnerTable, subcontrol.OwnerColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Subcontrol
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControl chains the current query on the "control" edge.
func (sq *SubcontrolQuery) QueryControl() *ControlQuery {
	query := (&ControlClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subcontrol.ControlTable, subcontrol.ControlColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.Subcontrol
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlImplementations chains the current query on the "control_implementations" edge.
func (sq *SubcontrolQuery) QueryControlImplementations() *ControlImplementationQuery {
	query := (&ControlImplementationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(controlimplementation.Table, controlimplementation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subcontrol.ControlImplementationsTable, subcontrol.ControlImplementationsPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.ControlImplementation
		step.Edge.Schema = schemaConfig.SubcontrolControlImplementations
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Subcontrol entity from the query.
// Returns a *NotFoundError when no Subcontrol was found.
func (sq *SubcontrolQuery) First(ctx context.Context) (*Subcontrol, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subcontrol.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *SubcontrolQuery) FirstX(ctx context.Context) *Subcontrol {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Subcontrol ID from the query.
// Returns a *NotFoundError when no Subcontrol ID was found.
func (sq *SubcontrolQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subcontrol.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *SubcontrolQuery) FirstIDX(ctx context.Context) string {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Subcontrol entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Subcontrol entity is found.
// Returns a *NotFoundError when no Subcontrol entities are found.
func (sq *SubcontrolQuery) Only(ctx context.Context) (*Subcontrol, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subcontrol.Label}
	default:
		return nil, &NotSingularError{subcontrol.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *SubcontrolQuery) OnlyX(ctx context.Context) *Subcontrol {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Subcontrol ID in the query.
// Returns a *NotSingularError when more than one Subcontrol ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *SubcontrolQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subcontrol.Label}
	default:
		err = &NotSingularError{subcontrol.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *SubcontrolQuery) OnlyIDX(ctx context.Context) string {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Subcontrols.
func (sq *SubcontrolQuery) All(ctx context.Context) ([]*Subcontrol, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryAll)
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Subcontrol, *SubcontrolQuery]()
	return withInterceptors[[]*Subcontrol](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *SubcontrolQuery) AllX(ctx context.Context) []*Subcontrol {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Subcontrol IDs.
func (sq *SubcontrolQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryIDs)
	if err = sq.Select(subcontrol.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *SubcontrolQuery) IDsX(ctx context.Context) []string {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *SubcontrolQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryCount)
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*SubcontrolQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *SubcontrolQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *SubcontrolQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryExist)
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *SubcontrolQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubcontrolQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *SubcontrolQuery) Clone() *SubcontrolQuery {
	if sq == nil {
		return nil
	}
	return &SubcontrolQuery{
		config:                     sq.config,
		ctx:                        sq.ctx.Clone(),
		order:                      append([]subcontrol.OrderOption{}, sq.order...),
		inters:                     append([]Interceptor{}, sq.inters...),
		predicates:                 append([]predicate.Subcontrol{}, sq.predicates...),
		withEvidence:               sq.withEvidence.Clone(),
		withControlObjectives:      sq.withControlObjectives.Clone(),
		withTasks:                  sq.withTasks.Clone(),
		withNarratives:             sq.withNarratives.Clone(),
		withRisks:                  sq.withRisks.Clone(),
		withActionPlans:            sq.withActionPlans.Clone(),
		withProcedures:             sq.withProcedures.Clone(),
		withInternalPolicies:       sq.withInternalPolicies.Clone(),
		withMappedControls:         sq.withMappedControls.Clone(),
		withControlOwner:           sq.withControlOwner.Clone(),
		withDelegate:               sq.withDelegate.Clone(),
		withOwner:                  sq.withOwner.Clone(),
		withControl:                sq.withControl.Clone(),
		withControlImplementations: sq.withControlImplementations.Clone(),
		// clone intermediate query.
		sql:       sq.sql.Clone(),
		path:      sq.path,
		modifiers: append([]func(*sql.Selector){}, sq.modifiers...),
	}
}

// WithEvidence tells the query-builder to eager-load the nodes that are connected to
// the "evidence" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithEvidence(opts ...func(*EvidenceQuery)) *SubcontrolQuery {
	query := (&EvidenceClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEvidence = query
	return sq
}

// WithControlObjectives tells the query-builder to eager-load the nodes that are connected to
// the "control_objectives" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithControlObjectives(opts ...func(*ControlObjectiveQuery)) *SubcontrolQuery {
	query := (&ControlObjectiveClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withControlObjectives = query
	return sq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithTasks(opts ...func(*TaskQuery)) *SubcontrolQuery {
	query := (&TaskClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withTasks = query
	return sq
}

// WithNarratives tells the query-builder to eager-load the nodes that are connected to
// the "narratives" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNarratives(opts ...func(*NarrativeQuery)) *SubcontrolQuery {
	query := (&NarrativeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withNarratives = query
	return sq
}

// WithRisks tells the query-builder to eager-load the nodes that are connected to
// the "risks" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithRisks(opts ...func(*RiskQuery)) *SubcontrolQuery {
	query := (&RiskClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withRisks = query
	return sq
}

// WithActionPlans tells the query-builder to eager-load the nodes that are connected to
// the "action_plans" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithActionPlans(opts ...func(*ActionPlanQuery)) *SubcontrolQuery {
	query := (&ActionPlanClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withActionPlans = query
	return sq
}

// WithProcedures tells the query-builder to eager-load the nodes that are connected to
// the "procedures" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithProcedures(opts ...func(*ProcedureQuery)) *SubcontrolQuery {
	query := (&ProcedureClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withProcedures = query
	return sq
}

// WithInternalPolicies tells the query-builder to eager-load the nodes that are connected to
// the "internal_policies" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithInternalPolicies(opts ...func(*InternalPolicyQuery)) *SubcontrolQuery {
	query := (&InternalPolicyClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withInternalPolicies = query
	return sq
}

// WithMappedControls tells the query-builder to eager-load the nodes that are connected to
// the "mapped_controls" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithMappedControls(opts ...func(*MappedControlQuery)) *SubcontrolQuery {
	query := (&MappedControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withMappedControls = query
	return sq
}

// WithControlOwner tells the query-builder to eager-load the nodes that are connected to
// the "control_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithControlOwner(opts ...func(*GroupQuery)) *SubcontrolQuery {
	query := (&GroupClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withControlOwner = query
	return sq
}

// WithDelegate tells the query-builder to eager-load the nodes that are connected to
// the "delegate" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithDelegate(opts ...func(*GroupQuery)) *SubcontrolQuery {
	query := (&GroupClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withDelegate = query
	return sq
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithOwner(opts ...func(*OrganizationQuery)) *SubcontrolQuery {
	query := (&OrganizationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withOwner = query
	return sq
}

// WithControl tells the query-builder to eager-load the nodes that are connected to
// the "control" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithControl(opts ...func(*ControlQuery)) *SubcontrolQuery {
	query := (&ControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withControl = query
	return sq
}

// WithControlImplementations tells the query-builder to eager-load the nodes that are connected to
// the "control_implementations" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithControlImplementations(opts ...func(*ControlImplementationQuery)) *SubcontrolQuery {
	query := (&ControlImplementationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withControlImplementations = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Subcontrol.Query().
//		GroupBy(subcontrol.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (sq *SubcontrolQuery) GroupBy(field string, fields ...string) *SubcontrolGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubcontrolGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = subcontrol.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Subcontrol.Query().
//		Select(subcontrol.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *SubcontrolQuery) Select(fields ...string) *SubcontrolSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &SubcontrolSelect{SubcontrolQuery: sq}
	sbuild.label = subcontrol.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubcontrolSelect configured with the given aggregations.
func (sq *SubcontrolQuery) Aggregate(fns ...AggregateFunc) *SubcontrolSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *SubcontrolQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !subcontrol.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	if subcontrol.Policy == nil {
		return errors.New("generated: uninitialized subcontrol.Policy (forgotten import generated/runtime?)")
	}
	if err := subcontrol.Policy.EvalQuery(ctx, sq); err != nil {
		return err
	}
	return nil
}

func (sq *SubcontrolQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Subcontrol, error) {
	var (
		nodes       = []*Subcontrol{}
		withFKs     = sq.withFKs
		_spec       = sq.querySpec()
		loadedTypes = [14]bool{
			sq.withEvidence != nil,
			sq.withControlObjectives != nil,
			sq.withTasks != nil,
			sq.withNarratives != nil,
			sq.withRisks != nil,
			sq.withActionPlans != nil,
			sq.withProcedures != nil,
			sq.withInternalPolicies != nil,
			sq.withMappedControls != nil,
			sq.withControlOwner != nil,
			sq.withDelegate != nil,
			sq.withOwner != nil,
			sq.withControl != nil,
			sq.withControlImplementations != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrol.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Subcontrol).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Subcontrol{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = sq.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withEvidence; query != nil {
		if err := sq.loadEvidence(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.Evidence = []*Evidence{} },
			func(n *Subcontrol, e *Evidence) { n.Edges.Evidence = append(n.Edges.Evidence, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withControlObjectives; query != nil {
		if err := sq.loadControlObjectives(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.ControlObjectives = []*ControlObjective{} },
			func(n *Subcontrol, e *ControlObjective) {
				n.Edges.ControlObjectives = append(n.Edges.ControlObjectives, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sq.withTasks; query != nil {
		if err := sq.loadTasks(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.Tasks = []*Task{} },
			func(n *Subcontrol, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withNarratives; query != nil {
		if err := sq.loadNarratives(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.Narratives = []*Narrative{} },
			func(n *Subcontrol, e *Narrative) { n.Edges.Narratives = append(n.Edges.Narratives, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withRisks; query != nil {
		if err := sq.loadRisks(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.Risks = []*Risk{} },
			func(n *Subcontrol, e *Risk) { n.Edges.Risks = append(n.Edges.Risks, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withActionPlans; query != nil {
		if err := sq.loadActionPlans(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.ActionPlans = []*ActionPlan{} },
			func(n *Subcontrol, e *ActionPlan) { n.Edges.ActionPlans = append(n.Edges.ActionPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withProcedures; query != nil {
		if err := sq.loadProcedures(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.Procedures = []*Procedure{} },
			func(n *Subcontrol, e *Procedure) { n.Edges.Procedures = append(n.Edges.Procedures, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withInternalPolicies; query != nil {
		if err := sq.loadInternalPolicies(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.InternalPolicies = []*InternalPolicy{} },
			func(n *Subcontrol, e *InternalPolicy) { n.Edges.InternalPolicies = append(n.Edges.InternalPolicies, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withMappedControls; query != nil {
		if err := sq.loadMappedControls(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.MappedControls = []*MappedControl{} },
			func(n *Subcontrol, e *MappedControl) { n.Edges.MappedControls = append(n.Edges.MappedControls, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withControlOwner; query != nil {
		if err := sq.loadControlOwner(ctx, query, nodes, nil,
			func(n *Subcontrol, e *Group) { n.Edges.ControlOwner = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withDelegate; query != nil {
		if err := sq.loadDelegate(ctx, query, nodes, nil,
			func(n *Subcontrol, e *Group) { n.Edges.Delegate = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withOwner; query != nil {
		if err := sq.loadOwner(ctx, query, nodes, nil,
			func(n *Subcontrol, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withControl; query != nil {
		if err := sq.loadControl(ctx, query, nodes, nil,
			func(n *Subcontrol, e *Control) { n.Edges.Control = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withControlImplementations; query != nil {
		if err := sq.loadControlImplementations(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.ControlImplementations = []*ControlImplementation{} },
			func(n *Subcontrol, e *ControlImplementation) {
				n.Edges.ControlImplementations = append(n.Edges.ControlImplementations, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedEvidence {
		if err := sq.loadEvidence(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedEvidence(name) },
			func(n *Subcontrol, e *Evidence) { n.appendNamedEvidence(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedControlObjectives {
		if err := sq.loadControlObjectives(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedControlObjectives(name) },
			func(n *Subcontrol, e *ControlObjective) { n.appendNamedControlObjectives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedTasks {
		if err := sq.loadTasks(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedTasks(name) },
			func(n *Subcontrol, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedNarratives {
		if err := sq.loadNarratives(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedNarratives(name) },
			func(n *Subcontrol, e *Narrative) { n.appendNamedNarratives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedRisks {
		if err := sq.loadRisks(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedRisks(name) },
			func(n *Subcontrol, e *Risk) { n.appendNamedRisks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedActionPlans {
		if err := sq.loadActionPlans(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedActionPlans(name) },
			func(n *Subcontrol, e *ActionPlan) { n.appendNamedActionPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedProcedures {
		if err := sq.loadProcedures(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedProcedures(name) },
			func(n *Subcontrol, e *Procedure) { n.appendNamedProcedures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedInternalPolicies {
		if err := sq.loadInternalPolicies(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedInternalPolicies(name) },
			func(n *Subcontrol, e *InternalPolicy) { n.appendNamedInternalPolicies(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedMappedControls {
		if err := sq.loadMappedControls(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedMappedControls(name) },
			func(n *Subcontrol, e *MappedControl) { n.appendNamedMappedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedControlImplementations {
		if err := sq.loadControlImplementations(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedControlImplementations(name) },
			func(n *Subcontrol, e *ControlImplementation) { n.appendNamedControlImplementations(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sq.loadTotal {
		if err := sq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *SubcontrolQuery) loadEvidence(ctx context.Context, query *EvidenceQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Evidence)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.EvidenceTable)
		joinT.Schema(sq.schemaConfig.EvidenceSubcontrols)
		s.Join(joinT).On(s.C(evidence.FieldID), joinT.C(subcontrol.EvidencePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(subcontrol.EvidencePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.EvidencePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Evidence](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "evidence" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadControlObjectives(ctx context.Context, query *ControlObjectiveQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.ControlObjectivesTable)
		joinT.Schema(sq.schemaConfig.SubcontrolControlObjectives)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(subcontrol.ControlObjectivesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(subcontrol.ControlObjectivesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.ControlObjectivesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_objectives" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.TasksTable)
		joinT.Schema(sq.schemaConfig.SubcontrolTasks)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(subcontrol.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(subcontrol.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadNarratives(ctx context.Context, query *NarrativeQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Narrative)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Subcontrol)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Narrative(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(subcontrol.NarrativesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.subcontrol_narratives
		if fk == nil {
			return fmt.Errorf(`foreign-key "subcontrol_narratives" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "subcontrol_narratives" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SubcontrolQuery) loadRisks(ctx context.Context, query *RiskQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.RisksTable)
		joinT.Schema(sq.schemaConfig.SubcontrolRisks)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(subcontrol.RisksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(subcontrol.RisksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.RisksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadActionPlans(ctx context.Context, query *ActionPlanQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *ActionPlan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Subcontrol)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ActionPlan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(subcontrol.ActionPlansColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.subcontrol_action_plans
		if fk == nil {
			return fmt.Errorf(`foreign-key "subcontrol_action_plans" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "subcontrol_action_plans" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SubcontrolQuery) loadProcedures(ctx context.Context, query *ProcedureQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Procedure)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Subcontrol)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Procedure(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(subcontrol.ProceduresColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.subcontrol_procedures
		if fk == nil {
			return fmt.Errorf(`foreign-key "subcontrol_procedures" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "subcontrol_procedures" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SubcontrolQuery) loadInternalPolicies(ctx context.Context, query *InternalPolicyQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *InternalPolicy)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Subcontrol)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InternalPolicy(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(subcontrol.InternalPoliciesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.subcontrol_internal_policies
		if fk == nil {
			return fmt.Errorf(`foreign-key "subcontrol_internal_policies" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "subcontrol_internal_policies" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SubcontrolQuery) loadMappedControls(ctx context.Context, query *MappedControlQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *MappedControl)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.MappedControlsTable)
		joinT.Schema(sq.schemaConfig.MappedControlSubcontrols)
		s.Join(joinT).On(s.C(mappedcontrol.FieldID), joinT.C(subcontrol.MappedControlsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(subcontrol.MappedControlsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.MappedControlsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*MappedControl](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "mapped_controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadControlOwner(ctx context.Context, query *GroupQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Group)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Subcontrol)
	for i := range nodes {
		fk := nodes[i].ControlOwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "control_owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadDelegate(ctx context.Context, query *GroupQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Group)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Subcontrol)
	for i := range nodes {
		fk := nodes[i].DelegateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delegate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Subcontrol)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadControl(ctx context.Context, query *ControlQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Control)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Subcontrol)
	for i := range nodes {
		fk := nodes[i].ControlID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(control.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "control_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadControlImplementations(ctx context.Context, query *ControlImplementationQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *ControlImplementation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.ControlImplementationsTable)
		joinT.Schema(sq.schemaConfig.SubcontrolControlImplementations)
		s.Join(joinT).On(s.C(controlimplementation.FieldID), joinT.C(subcontrol.ControlImplementationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(subcontrol.ControlImplementationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.ControlImplementationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlImplementation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_implementations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (sq *SubcontrolQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Schema = sq.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *SubcontrolQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subcontrol.Table, subcontrol.Columns, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrol.FieldID)
		for i := range fields {
			if fields[i] != subcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sq.withControlOwner != nil {
			_spec.Node.AddColumnOnce(subcontrol.FieldControlOwnerID)
		}
		if sq.withDelegate != nil {
			_spec.Node.AddColumnOnce(subcontrol.FieldDelegateID)
		}
		if sq.withOwner != nil {
			_spec.Node.AddColumnOnce(subcontrol.FieldOwnerID)
		}
		if sq.withControl != nil {
			_spec.Node.AddColumnOnce(subcontrol.FieldControlID)
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *SubcontrolQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(subcontrol.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = subcontrol.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(sq.schemaConfig.Subcontrol)
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *SubcontrolQuery) Modify(modifiers ...func(s *sql.Selector)) *SubcontrolSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

// WithNamedEvidence tells the query-builder to eager-load the nodes that are connected to the "evidence"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedEvidence(name string, opts ...func(*EvidenceQuery)) *SubcontrolQuery {
	query := (&EvidenceClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedEvidence == nil {
		sq.withNamedEvidence = make(map[string]*EvidenceQuery)
	}
	sq.withNamedEvidence[name] = query
	return sq
}

// WithNamedControlObjectives tells the query-builder to eager-load the nodes that are connected to the "control_objectives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedControlObjectives(name string, opts ...func(*ControlObjectiveQuery)) *SubcontrolQuery {
	query := (&ControlObjectiveClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedControlObjectives == nil {
		sq.withNamedControlObjectives = make(map[string]*ControlObjectiveQuery)
	}
	sq.withNamedControlObjectives[name] = query
	return sq
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *SubcontrolQuery {
	query := (&TaskClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedTasks == nil {
		sq.withNamedTasks = make(map[string]*TaskQuery)
	}
	sq.withNamedTasks[name] = query
	return sq
}

// WithNamedNarratives tells the query-builder to eager-load the nodes that are connected to the "narratives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedNarratives(name string, opts ...func(*NarrativeQuery)) *SubcontrolQuery {
	query := (&NarrativeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedNarratives == nil {
		sq.withNamedNarratives = make(map[string]*NarrativeQuery)
	}
	sq.withNamedNarratives[name] = query
	return sq
}

// WithNamedRisks tells the query-builder to eager-load the nodes that are connected to the "risks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedRisks(name string, opts ...func(*RiskQuery)) *SubcontrolQuery {
	query := (&RiskClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedRisks == nil {
		sq.withNamedRisks = make(map[string]*RiskQuery)
	}
	sq.withNamedRisks[name] = query
	return sq
}

// WithNamedActionPlans tells the query-builder to eager-load the nodes that are connected to the "action_plans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedActionPlans(name string, opts ...func(*ActionPlanQuery)) *SubcontrolQuery {
	query := (&ActionPlanClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedActionPlans == nil {
		sq.withNamedActionPlans = make(map[string]*ActionPlanQuery)
	}
	sq.withNamedActionPlans[name] = query
	return sq
}

// WithNamedProcedures tells the query-builder to eager-load the nodes that are connected to the "procedures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedProcedures(name string, opts ...func(*ProcedureQuery)) *SubcontrolQuery {
	query := (&ProcedureClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedProcedures == nil {
		sq.withNamedProcedures = make(map[string]*ProcedureQuery)
	}
	sq.withNamedProcedures[name] = query
	return sq
}

// WithNamedInternalPolicies tells the query-builder to eager-load the nodes that are connected to the "internal_policies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedInternalPolicies(name string, opts ...func(*InternalPolicyQuery)) *SubcontrolQuery {
	query := (&InternalPolicyClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedInternalPolicies == nil {
		sq.withNamedInternalPolicies = make(map[string]*InternalPolicyQuery)
	}
	sq.withNamedInternalPolicies[name] = query
	return sq
}

// WithNamedMappedControls tells the query-builder to eager-load the nodes that are connected to the "mapped_controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedMappedControls(name string, opts ...func(*MappedControlQuery)) *SubcontrolQuery {
	query := (&MappedControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedMappedControls == nil {
		sq.withNamedMappedControls = make(map[string]*MappedControlQuery)
	}
	sq.withNamedMappedControls[name] = query
	return sq
}

// WithNamedControlImplementations tells the query-builder to eager-load the nodes that are connected to the "control_implementations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedControlImplementations(name string, opts ...func(*ControlImplementationQuery)) *SubcontrolQuery {
	query := (&ControlImplementationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedControlImplementations == nil {
		sq.withNamedControlImplementations = make(map[string]*ControlImplementationQuery)
	}
	sq.withNamedControlImplementations[name] = query
	return sq
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (sq *SubcontrolQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryIDs)
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return sq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, sq, qr, sq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// SubcontrolGroupBy is the group-by builder for Subcontrol entities.
type SubcontrolGroupBy struct {
	selector
	build *SubcontrolQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *SubcontrolGroupBy) Aggregate(fns ...AggregateFunc) *SubcontrolGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *SubcontrolGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, ent.OpQueryGroupBy)
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubcontrolQuery, *SubcontrolGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *SubcontrolGroupBy) sqlScan(ctx context.Context, root *SubcontrolQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubcontrolSelect is the builder for selecting fields of Subcontrol entities.
type SubcontrolSelect struct {
	*SubcontrolQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *SubcontrolSelect) Aggregate(fns ...AggregateFunc) *SubcontrolSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *SubcontrolSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, ent.OpQuerySelect)
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubcontrolQuery, *SubcontrolSelect](ctx, ss.SubcontrolQuery, ss, ss.inters, v)
}

func (ss *SubcontrolSelect) sqlScan(ctx context.Context, root *SubcontrolQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *SubcontrolSelect) Modify(modifiers ...func(s *sql.Selector)) *SubcontrolSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
