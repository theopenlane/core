// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubcontrolQuery is the builder for querying Subcontrol entities.
type SubcontrolQuery struct {
	config
	ctx               *QueryContext
	order             []subcontrol.OrderOption
	inters            []Interceptor
	predicates        []predicate.Subcontrol
	withControl       *ControlQuery
	withUser          *UserQuery
	withTasks         *TaskQuery
	withNotes         *NoteQuery
	withPrograms      *ProgramQuery
	withFKs           bool
	loadTotal         []func(context.Context, []*Subcontrol) error
	modifiers         []func(*sql.Selector)
	withNamedControl  map[string]*ControlQuery
	withNamedUser     map[string]*UserQuery
	withNamedTasks    map[string]*TaskQuery
	withNamedPrograms map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubcontrolQuery builder.
func (sq *SubcontrolQuery) Where(ps ...predicate.Subcontrol) *SubcontrolQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *SubcontrolQuery) Limit(limit int) *SubcontrolQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *SubcontrolQuery) Offset(offset int) *SubcontrolQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *SubcontrolQuery) Unique(unique bool) *SubcontrolQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *SubcontrolQuery) Order(o ...subcontrol.OrderOption) *SubcontrolQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryControl chains the current query on the "control" edge.
func (sq *SubcontrolQuery) QueryControl() *ControlQuery {
	query := (&ControlClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, subcontrol.ControlTable, subcontrol.ControlPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlSubcontrols
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (sq *SubcontrolQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, subcontrol.UserTable, subcontrol.UserPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserSubcontrols
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (sq *SubcontrolQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subcontrol.TasksTable, subcontrol.TasksPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.SubcontrolTasks
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotes chains the current query on the "notes" edge.
func (sq *SubcontrolQuery) QueryNotes() *NoteQuery {
	query := (&NoteClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(note.Table, note.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subcontrol.NotesTable, subcontrol.NotesColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Note
		step.Edge.Schema = schemaConfig.Subcontrol
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (sq *SubcontrolQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subcontrol.Table, subcontrol.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, subcontrol.ProgramsTable, subcontrol.ProgramsPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramSubcontrols
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Subcontrol entity from the query.
// Returns a *NotFoundError when no Subcontrol was found.
func (sq *SubcontrolQuery) First(ctx context.Context) (*Subcontrol, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subcontrol.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *SubcontrolQuery) FirstX(ctx context.Context) *Subcontrol {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Subcontrol ID from the query.
// Returns a *NotFoundError when no Subcontrol ID was found.
func (sq *SubcontrolQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subcontrol.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *SubcontrolQuery) FirstIDX(ctx context.Context) string {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Subcontrol entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Subcontrol entity is found.
// Returns a *NotFoundError when no Subcontrol entities are found.
func (sq *SubcontrolQuery) Only(ctx context.Context) (*Subcontrol, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subcontrol.Label}
	default:
		return nil, &NotSingularError{subcontrol.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *SubcontrolQuery) OnlyX(ctx context.Context) *Subcontrol {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Subcontrol ID in the query.
// Returns a *NotSingularError when more than one Subcontrol ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *SubcontrolQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subcontrol.Label}
	default:
		err = &NotSingularError{subcontrol.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *SubcontrolQuery) OnlyIDX(ctx context.Context) string {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Subcontrols.
func (sq *SubcontrolQuery) All(ctx context.Context) ([]*Subcontrol, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryAll)
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Subcontrol, *SubcontrolQuery]()
	return withInterceptors[[]*Subcontrol](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *SubcontrolQuery) AllX(ctx context.Context) []*Subcontrol {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Subcontrol IDs.
func (sq *SubcontrolQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryIDs)
	if err = sq.Select(subcontrol.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *SubcontrolQuery) IDsX(ctx context.Context) []string {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *SubcontrolQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryCount)
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*SubcontrolQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *SubcontrolQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *SubcontrolQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryExist)
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *SubcontrolQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubcontrolQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *SubcontrolQuery) Clone() *SubcontrolQuery {
	if sq == nil {
		return nil
	}
	return &SubcontrolQuery{
		config:       sq.config,
		ctx:          sq.ctx.Clone(),
		order:        append([]subcontrol.OrderOption{}, sq.order...),
		inters:       append([]Interceptor{}, sq.inters...),
		predicates:   append([]predicate.Subcontrol{}, sq.predicates...),
		withControl:  sq.withControl.Clone(),
		withUser:     sq.withUser.Clone(),
		withTasks:    sq.withTasks.Clone(),
		withNotes:    sq.withNotes.Clone(),
		withPrograms: sq.withPrograms.Clone(),
		// clone intermediate query.
		sql:       sq.sql.Clone(),
		path:      sq.path,
		modifiers: append([]func(*sql.Selector){}, sq.modifiers...),
	}
}

// WithControl tells the query-builder to eager-load the nodes that are connected to
// the "control" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithControl(opts ...func(*ControlQuery)) *SubcontrolQuery {
	query := (&ControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withControl = query
	return sq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithUser(opts ...func(*UserQuery)) *SubcontrolQuery {
	query := (&UserClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withUser = query
	return sq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithTasks(opts ...func(*TaskQuery)) *SubcontrolQuery {
	query := (&TaskClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withTasks = query
	return sq
}

// WithNotes tells the query-builder to eager-load the nodes that are connected to
// the "notes" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNotes(opts ...func(*NoteQuery)) *SubcontrolQuery {
	query := (&NoteClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withNotes = query
	return sq
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithPrograms(opts ...func(*ProgramQuery)) *SubcontrolQuery {
	query := (&ProgramClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withPrograms = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Subcontrol.Query().
//		GroupBy(subcontrol.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (sq *SubcontrolQuery) GroupBy(field string, fields ...string) *SubcontrolGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubcontrolGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = subcontrol.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Subcontrol.Query().
//		Select(subcontrol.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *SubcontrolQuery) Select(fields ...string) *SubcontrolSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &SubcontrolSelect{SubcontrolQuery: sq}
	sbuild.label = subcontrol.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubcontrolSelect configured with the given aggregations.
func (sq *SubcontrolQuery) Aggregate(fns ...AggregateFunc) *SubcontrolSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *SubcontrolQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !subcontrol.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *SubcontrolQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Subcontrol, error) {
	var (
		nodes       = []*Subcontrol{}
		withFKs     = sq.withFKs
		_spec       = sq.querySpec()
		loadedTypes = [5]bool{
			sq.withControl != nil,
			sq.withUser != nil,
			sq.withTasks != nil,
			sq.withNotes != nil,
			sq.withPrograms != nil,
		}
	)
	if sq.withNotes != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrol.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Subcontrol).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Subcontrol{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = sq.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withControl; query != nil {
		if err := sq.loadControl(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.Control = []*Control{} },
			func(n *Subcontrol, e *Control) { n.Edges.Control = append(n.Edges.Control, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withUser; query != nil {
		if err := sq.loadUser(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.User = []*User{} },
			func(n *Subcontrol, e *User) { n.Edges.User = append(n.Edges.User, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withTasks; query != nil {
		if err := sq.loadTasks(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.Tasks = []*Task{} },
			func(n *Subcontrol, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withNotes; query != nil {
		if err := sq.loadNotes(ctx, query, nodes, nil,
			func(n *Subcontrol, e *Note) { n.Edges.Notes = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withPrograms; query != nil {
		if err := sq.loadPrograms(ctx, query, nodes,
			func(n *Subcontrol) { n.Edges.Programs = []*Program{} },
			func(n *Subcontrol, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedControl {
		if err := sq.loadControl(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedControl(name) },
			func(n *Subcontrol, e *Control) { n.appendNamedControl(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedUser {
		if err := sq.loadUser(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedUser(name) },
			func(n *Subcontrol, e *User) { n.appendNamedUser(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedTasks {
		if err := sq.loadTasks(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedTasks(name) },
			func(n *Subcontrol, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedPrograms {
		if err := sq.loadPrograms(ctx, query, nodes,
			func(n *Subcontrol) { n.appendNamedPrograms(name) },
			func(n *Subcontrol, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sq.loadTotal {
		if err := sq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *SubcontrolQuery) loadControl(ctx context.Context, query *ControlQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.ControlTable)
		joinT.Schema(sq.schemaConfig.ControlSubcontrols)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(subcontrol.ControlPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(subcontrol.ControlPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.ControlPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.UserTable)
		joinT.Schema(sq.schemaConfig.UserSubcontrols)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(subcontrol.UserPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(subcontrol.UserPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.UserPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.TasksTable)
		joinT.Schema(sq.schemaConfig.SubcontrolTasks)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(subcontrol.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(subcontrol.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadNotes(ctx context.Context, query *NoteQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Note)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Subcontrol)
	for i := range nodes {
		if nodes[i].note_subcontrols == nil {
			continue
		}
		fk := *nodes[i].note_subcontrols
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(note.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "note_subcontrols" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubcontrolQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Subcontrol, init func(*Subcontrol), assign func(*Subcontrol, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Subcontrol)
	nids := make(map[string]map[*Subcontrol]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(subcontrol.ProgramsTable)
		joinT.Schema(sq.schemaConfig.ProgramSubcontrols)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(subcontrol.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(subcontrol.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(subcontrol.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Subcontrol]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (sq *SubcontrolQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Schema = sq.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *SubcontrolQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subcontrol.Table, subcontrol.Columns, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrol.FieldID)
		for i := range fields {
			if fields[i] != subcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *SubcontrolQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(subcontrol.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = subcontrol.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(sq.schemaConfig.Subcontrol)
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *SubcontrolQuery) Modify(modifiers ...func(s *sql.Selector)) *SubcontrolSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

// WithNamedControl tells the query-builder to eager-load the nodes that are connected to the "control"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedControl(name string, opts ...func(*ControlQuery)) *SubcontrolQuery {
	query := (&ControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedControl == nil {
		sq.withNamedControl = make(map[string]*ControlQuery)
	}
	sq.withNamedControl[name] = query
	return sq
}

// WithNamedUser tells the query-builder to eager-load the nodes that are connected to the "user"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedUser(name string, opts ...func(*UserQuery)) *SubcontrolQuery {
	query := (&UserClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedUser == nil {
		sq.withNamedUser = make(map[string]*UserQuery)
	}
	sq.withNamedUser[name] = query
	return sq
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *SubcontrolQuery {
	query := (&TaskClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedTasks == nil {
		sq.withNamedTasks = make(map[string]*TaskQuery)
	}
	sq.withNamedTasks[name] = query
	return sq
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SubcontrolQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *SubcontrolQuery {
	query := (&ProgramClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedPrograms == nil {
		sq.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	sq.withNamedPrograms[name] = query
	return sq
}

// SubcontrolGroupBy is the group-by builder for Subcontrol entities.
type SubcontrolGroupBy struct {
	selector
	build *SubcontrolQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *SubcontrolGroupBy) Aggregate(fns ...AggregateFunc) *SubcontrolGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *SubcontrolGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, ent.OpQueryGroupBy)
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubcontrolQuery, *SubcontrolGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *SubcontrolGroupBy) sqlScan(ctx context.Context, root *SubcontrolQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubcontrolSelect is the builder for selecting fields of Subcontrol entities.
type SubcontrolSelect struct {
	*SubcontrolQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *SubcontrolSelect) Aggregate(fns ...AggregateFunc) *SubcontrolSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *SubcontrolSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, ent.OpQuerySelect)
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubcontrolQuery, *SubcontrolSelect](ctx, ss.SubcontrolQuery, ss, ss.inters, v)
}

func (ss *SubcontrolSelect) sqlScan(ctx context.Context, root *SubcontrolQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *SubcontrolSelect) Modify(modifiers ...func(s *sql.Selector)) *SubcontrolSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
