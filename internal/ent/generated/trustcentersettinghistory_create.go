// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersettinghistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// TrustCenterSettingHistoryCreate is the builder for creating a TrustCenterSettingHistory entity.
type TrustCenterSettingHistoryCreate struct {
	config
	mutation *TrustCenterSettingHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (_c *TrustCenterSettingHistoryCreate) SetHistoryTime(v time.Time) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetHistoryTime(v)
	return _c
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableHistoryTime(v *time.Time) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetHistoryTime(*v)
	}
	return _c
}

// SetRef sets the "ref" field.
func (_c *TrustCenterSettingHistoryCreate) SetRef(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetRef(v)
	return _c
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableRef(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetRef(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *TrustCenterSettingHistoryCreate) SetOperation(v history.OpType) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *TrustCenterSettingHistoryCreate) SetCreatedAt(v time.Time) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableCreatedAt(v *time.Time) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TrustCenterSettingHistoryCreate) SetUpdatedAt(v time.Time) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableUpdatedAt(v *time.Time) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *TrustCenterSettingHistoryCreate) SetCreatedBy(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableCreatedBy(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *TrustCenterSettingHistoryCreate) SetUpdatedBy(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableUpdatedBy(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *TrustCenterSettingHistoryCreate) SetDeletedAt(v time.Time) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableDeletedAt(v *time.Time) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *TrustCenterSettingHistoryCreate) SetDeletedBy(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableDeletedBy(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_c *TrustCenterSettingHistoryCreate) SetTrustCenterID(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetTrustCenterID(v)
	return _c
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableTrustCenterID(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetTrustCenterID(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *TrustCenterSettingHistoryCreate) SetTitle(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableTitle(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetOverview sets the "overview" field.
func (_c *TrustCenterSettingHistoryCreate) SetOverview(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetOverview(v)
	return _c
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableOverview(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetOverview(*v)
	}
	return _c
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (_c *TrustCenterSettingHistoryCreate) SetLogoRemoteURL(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetLogoRemoteURL(v)
	return _c
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableLogoRemoteURL(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetLogoRemoteURL(*v)
	}
	return _c
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (_c *TrustCenterSettingHistoryCreate) SetLogoLocalFileID(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetLogoLocalFileID(v)
	return _c
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableLogoLocalFileID(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetLogoLocalFileID(*v)
	}
	return _c
}

// SetFaviconRemoteURL sets the "favicon_remote_url" field.
func (_c *TrustCenterSettingHistoryCreate) SetFaviconRemoteURL(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetFaviconRemoteURL(v)
	return _c
}

// SetNillableFaviconRemoteURL sets the "favicon_remote_url" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableFaviconRemoteURL(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetFaviconRemoteURL(*v)
	}
	return _c
}

// SetFaviconLocalFileID sets the "favicon_local_file_id" field.
func (_c *TrustCenterSettingHistoryCreate) SetFaviconLocalFileID(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetFaviconLocalFileID(v)
	return _c
}

// SetNillableFaviconLocalFileID sets the "favicon_local_file_id" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableFaviconLocalFileID(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetFaviconLocalFileID(*v)
	}
	return _c
}

// SetThemeMode sets the "theme_mode" field.
func (_c *TrustCenterSettingHistoryCreate) SetThemeMode(v enums.TrustCenterThemeMode) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetThemeMode(v)
	return _c
}

// SetNillableThemeMode sets the "theme_mode" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableThemeMode(v *enums.TrustCenterThemeMode) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetThemeMode(*v)
	}
	return _c
}

// SetPrimaryColor sets the "primary_color" field.
func (_c *TrustCenterSettingHistoryCreate) SetPrimaryColor(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetPrimaryColor(v)
	return _c
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillablePrimaryColor(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetPrimaryColor(*v)
	}
	return _c
}

// SetFont sets the "font" field.
func (_c *TrustCenterSettingHistoryCreate) SetFont(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetFont(v)
	return _c
}

// SetNillableFont sets the "font" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableFont(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetFont(*v)
	}
	return _c
}

// SetForegroundColor sets the "foreground_color" field.
func (_c *TrustCenterSettingHistoryCreate) SetForegroundColor(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetForegroundColor(v)
	return _c
}

// SetNillableForegroundColor sets the "foreground_color" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableForegroundColor(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetForegroundColor(*v)
	}
	return _c
}

// SetBackgroundColor sets the "background_color" field.
func (_c *TrustCenterSettingHistoryCreate) SetBackgroundColor(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetBackgroundColor(v)
	return _c
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableBackgroundColor(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetBackgroundColor(*v)
	}
	return _c
}

// SetAccentColor sets the "accent_color" field.
func (_c *TrustCenterSettingHistoryCreate) SetAccentColor(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetAccentColor(v)
	return _c
}

// SetNillableAccentColor sets the "accent_color" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableAccentColor(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetAccentColor(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TrustCenterSettingHistoryCreate) SetID(v string) *TrustCenterSettingHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TrustCenterSettingHistoryCreate) SetNillableID(v *string) *TrustCenterSettingHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the TrustCenterSettingHistoryMutation object of the builder.
func (_c *TrustCenterSettingHistoryCreate) Mutation() *TrustCenterSettingHistoryMutation {
	return _c.mutation
}

// Save creates the TrustCenterSettingHistory in the database.
func (_c *TrustCenterSettingHistoryCreate) Save(ctx context.Context) (*TrustCenterSettingHistory, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TrustCenterSettingHistoryCreate) SaveX(ctx context.Context) *TrustCenterSettingHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TrustCenterSettingHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TrustCenterSettingHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TrustCenterSettingHistoryCreate) defaults() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		if trustcentersettinghistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized trustcentersettinghistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := trustcentersettinghistory.DefaultHistoryTime()
		_c.mutation.SetHistoryTime(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if trustcentersettinghistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersettinghistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersettinghistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if trustcentersettinghistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersettinghistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersettinghistory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ThemeMode(); !ok {
		v := trustcentersettinghistory.DefaultThemeMode
		_c.mutation.SetThemeMode(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if trustcentersettinghistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized trustcentersettinghistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := trustcentersettinghistory.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *TrustCenterSettingHistoryCreate) check() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "TrustCenterSettingHistory.history_time"`)}
	}
	if _, ok := _c.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "TrustCenterSettingHistory.operation"`)}
	}
	if v, ok := _c.mutation.Operation(); ok {
		if err := trustcentersettinghistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSettingHistory.operation": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ThemeMode(); ok {
		if err := trustcentersettinghistory.ThemeModeValidator(v); err != nil {
			return &ValidationError{Name: "theme_mode", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSettingHistory.theme_mode": %w`, err)}
		}
	}
	return nil
}

func (_c *TrustCenterSettingHistoryCreate) sqlSave(ctx context.Context) (*TrustCenterSettingHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TrustCenterSettingHistory.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TrustCenterSettingHistoryCreate) createSpec() (*TrustCenterSettingHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TrustCenterSettingHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(trustcentersettinghistory.Table, sqlgraph.NewFieldSpec(trustcentersettinghistory.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.TrustCenterSettingHistory
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.HistoryTime(); ok {
		_spec.SetField(trustcentersettinghistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := _c.mutation.Ref(); ok {
		_spec.SetField(trustcentersettinghistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(trustcentersettinghistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString, value)
		_node.TrustCenterID = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Overview(); ok {
		_spec.SetField(trustcentersettinghistory.FieldOverview, field.TypeString, value)
		_node.Overview = value
	}
	if value, ok := _c.mutation.LogoRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString, value)
		_node.LogoRemoteURL = &value
	}
	if value, ok := _c.mutation.LogoLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString, value)
		_node.LogoLocalFileID = &value
	}
	if value, ok := _c.mutation.FaviconRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString, value)
		_node.FaviconRemoteURL = &value
	}
	if value, ok := _c.mutation.FaviconLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString, value)
		_node.FaviconLocalFileID = &value
	}
	if value, ok := _c.mutation.ThemeMode(); ok {
		_spec.SetField(trustcentersettinghistory.FieldThemeMode, field.TypeEnum, value)
		_node.ThemeMode = value
	}
	if value, ok := _c.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString, value)
		_node.PrimaryColor = value
	}
	if value, ok := _c.mutation.Font(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFont, field.TypeString, value)
		_node.Font = value
	}
	if value, ok := _c.mutation.ForegroundColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldForegroundColor, field.TypeString, value)
		_node.ForegroundColor = value
	}
	if value, ok := _c.mutation.BackgroundColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldBackgroundColor, field.TypeString, value)
		_node.BackgroundColor = value
	}
	if value, ok := _c.mutation.AccentColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldAccentColor, field.TypeString, value)
		_node.AccentColor = value
	}
	return _node, _spec
}

// TrustCenterSettingHistoryCreateBulk is the builder for creating many TrustCenterSettingHistory entities in bulk.
type TrustCenterSettingHistoryCreateBulk struct {
	config
	err      error
	builders []*TrustCenterSettingHistoryCreate
}

// Save creates the TrustCenterSettingHistory entities in the database.
func (_c *TrustCenterSettingHistoryCreateBulk) Save(ctx context.Context) ([]*TrustCenterSettingHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TrustCenterSettingHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrustCenterSettingHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TrustCenterSettingHistoryCreateBulk) SaveX(ctx context.Context) []*TrustCenterSettingHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TrustCenterSettingHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TrustCenterSettingHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
