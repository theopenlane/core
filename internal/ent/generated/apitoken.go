// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/models"
)

// APIToken is the model entity for the APIToken schema.
type APIToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID string `json:"created_by_id,omitempty"`
	// UpdatedByID holds the value of the "updated_by_id" field.
	UpdatedByID string `json:"updated_by_id,omitempty"`
	// CreatedByUserID holds the value of the "created_by_user_id" field.
	CreatedByUserID string `json:"created_by_user_id,omitempty"`
	// UpdatedByUserID holds the value of the "updated_by_user_id" field.
	UpdatedByUserID string `json:"updated_by_user_id,omitempty"`
	// CreatedByServiceID holds the value of the "created_by_service_id" field.
	CreatedByServiceID string `json:"created_by_service_id,omitempty"`
	// UpdatedByServiceID holds the value of the "updated_by_service_id" field.
	UpdatedByServiceID string `json:"updated_by_service_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedByID holds the value of the "deleted_by_id" field.
	DeletedByID string `json:"deleted_by_id,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name associated with the token
	Name string `json:"name,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// when the token expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// a description of the token's purpose
	Description *string `json:"description,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the APITokenQuery when eager-loading is set.
	Edges        APITokenEdges `json:"edges"`
	selectValues sql.SelectValues

	// CreatedBy includes the details about the user or service that created the object
	CreatedBy models.Actor `json:"created_by,omitempty"`
	// UpdatedBy includes the details about the user or service that last updated the object
	UpdatedBy models.Actor `json:"updated_by,omitempty"`
}

// APITokenEdges holds the relations/edges for other nodes in the graph.
type APITokenEdges struct {
	// CreatedByUser holds the value of the created_by_user edge.
	CreatedByUser *User `json:"created_by_user,omitempty"`
	// UpdatedByUser holds the value of the updated_by_user edge.
	UpdatedByUser *User `json:"updated_by_user,omitempty"`
	// CreatedByService holds the value of the created_by_service edge.
	CreatedByService *APIToken `json:"created_by_service,omitempty"`
	// UpdatedByService holds the value of the updated_by_service edge.
	UpdatedByService *APIToken `json:"updated_by_service,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int
}

// CreatedByUserOrErr returns the CreatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APITokenEdges) CreatedByUserOrErr() (*User, error) {
	if e.CreatedByUser != nil {
		return e.CreatedByUser, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_user"}
}

// UpdatedByUserOrErr returns the UpdatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APITokenEdges) UpdatedByUserOrErr() (*User, error) {
	if e.UpdatedByUser != nil {
		return e.UpdatedByUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by_user"}
}

// CreatedByServiceOrErr returns the CreatedByService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APITokenEdges) CreatedByServiceOrErr() (*APIToken, error) {
	if e.CreatedByService != nil {
		return e.CreatedByService, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: apitoken.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_service"}
}

// UpdatedByServiceOrErr returns the UpdatedByService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APITokenEdges) UpdatedByServiceOrErr() (*APIToken, error) {
	if e.UpdatedByService != nil {
		return e.UpdatedByService, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: apitoken.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by_service"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APITokenEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*APIToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apitoken.FieldTags, apitoken.FieldScopes:
			values[i] = new([]byte)
		case apitoken.FieldID, apitoken.FieldCreatedByID, apitoken.FieldUpdatedByID, apitoken.FieldCreatedByUserID, apitoken.FieldUpdatedByUserID, apitoken.FieldCreatedByServiceID, apitoken.FieldUpdatedByServiceID, apitoken.FieldDeletedByID, apitoken.FieldMappingID, apitoken.FieldOwnerID, apitoken.FieldName, apitoken.FieldToken, apitoken.FieldDescription:
			values[i] = new(sql.NullString)
		case apitoken.FieldCreatedAt, apitoken.FieldUpdatedAt, apitoken.FieldDeletedAt, apitoken.FieldExpiresAt, apitoken.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the APIToken fields.
func (at *APIToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apitoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				at.ID = value.String
			}
		case apitoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case apitoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case apitoken.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				at.CreatedByID = value.String
			}
		case apitoken.FieldUpdatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_id", values[i])
			} else if value.Valid {
				at.UpdatedByID = value.String
			}
		case apitoken.FieldCreatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_id", values[i])
			} else if value.Valid {
				at.CreatedByUserID = value.String
			}
		case apitoken.FieldUpdatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_user_id", values[i])
			} else if value.Valid {
				at.UpdatedByUserID = value.String
			}
		case apitoken.FieldCreatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_service_id", values[i])
			} else if value.Valid {
				at.CreatedByServiceID = value.String
			}
		case apitoken.FieldUpdatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_service_id", values[i])
			} else if value.Valid {
				at.UpdatedByServiceID = value.String
			}
		case apitoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				at.DeletedAt = value.Time
			}
		case apitoken.FieldDeletedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by_id", values[i])
			} else if value.Valid {
				at.DeletedByID = value.String
			}
		case apitoken.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				at.MappingID = value.String
			}
		case apitoken.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &at.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case apitoken.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				at.OwnerID = value.String
			}
		case apitoken.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				at.Name = value.String
			}
		case apitoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				at.Token = value.String
			}
		case apitoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				at.ExpiresAt = new(time.Time)
				*at.ExpiresAt = value.Time
			}
		case apitoken.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				at.Description = new(string)
				*at.Description = value.String
			}
		case apitoken.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &at.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case apitoken.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				at.LastUsedAt = new(time.Time)
				*at.LastUsedAt = value.Time
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the APIToken.
// This includes values selected through modifiers, order, etc.
func (at *APIToken) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryCreatedByUser queries the "created_by_user" edge of the APIToken entity.
func (at *APIToken) QueryCreatedByUser() *UserQuery {
	return NewAPITokenClient(at.config).QueryCreatedByUser(at)
}

// QueryUpdatedByUser queries the "updated_by_user" edge of the APIToken entity.
func (at *APIToken) QueryUpdatedByUser() *UserQuery {
	return NewAPITokenClient(at.config).QueryUpdatedByUser(at)
}

// QueryCreatedByService queries the "created_by_service" edge of the APIToken entity.
func (at *APIToken) QueryCreatedByService() *APITokenQuery {
	return NewAPITokenClient(at.config).QueryCreatedByService(at)
}

// QueryUpdatedByService queries the "updated_by_service" edge of the APIToken entity.
func (at *APIToken) QueryUpdatedByService() *APITokenQuery {
	return NewAPITokenClient(at.config).QueryUpdatedByService(at)
}

// QueryOwner queries the "owner" edge of the APIToken entity.
func (at *APIToken) QueryOwner() *OrganizationQuery {
	return NewAPITokenClient(at.config).QueryOwner(at)
}

// Update returns a builder for updating this APIToken.
// Note that you need to call APIToken.Unwrap() before calling this method if this APIToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *APIToken) Update() *APITokenUpdateOne {
	return NewAPITokenClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the APIToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *APIToken) Unwrap() *APIToken {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("generated: APIToken is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *APIToken) String() string {
	var builder strings.Builder
	builder.WriteString("APIToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by_id=")
	builder.WriteString(at.CreatedByID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_id=")
	builder.WriteString(at.UpdatedByID)
	builder.WriteString(", ")
	builder.WriteString("created_by_user_id=")
	builder.WriteString(at.CreatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_user_id=")
	builder.WriteString(at.UpdatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("created_by_service_id=")
	builder.WriteString(at.CreatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_service_id=")
	builder.WriteString(at.UpdatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(at.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by_id=")
	builder.WriteString(at.DeletedByID)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(at.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", at.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(at.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(at.Name)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(at.Token)
	builder.WriteString(", ")
	if v := at.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := at.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", at.Scopes))
	builder.WriteString(", ")
	if v := at.LastUsedAt; v != nil {
		builder.WriteString("last_used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// APITokens is a parsable slice of APIToken.
type APITokens []*APIToken
