// Code generated by ent, DO NOT EDIT.

package orgproduct

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldDeletedBy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldOwnerID, v))
}

// Module applies equality check predicate on the "module" field. It's identical to ModuleEQ.
func Module(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldModule, v))
}

// StripeProductID applies equality check predicate on the "stripe_product_id" field. It's identical to StripeProductIDEQ.
func StripeProductID(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldStripeProductID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldStatus, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldActive, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldSubscriptionID, v))
}

// PriceID applies equality check predicate on the "price_id" field. It's identical to PriceIDEQ.
func PriceID(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldPriceID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldOwnerID, v))
}

// ModuleEQ applies the EQ predicate on the "module" field.
func ModuleEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldModule, v))
}

// ModuleNEQ applies the NEQ predicate on the "module" field.
func ModuleNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldModule, v))
}

// ModuleIn applies the In predicate on the "module" field.
func ModuleIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldModule, vs...))
}

// ModuleNotIn applies the NotIn predicate on the "module" field.
func ModuleNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldModule, vs...))
}

// ModuleGT applies the GT predicate on the "module" field.
func ModuleGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldModule, v))
}

// ModuleGTE applies the GTE predicate on the "module" field.
func ModuleGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldModule, v))
}

// ModuleLT applies the LT predicate on the "module" field.
func ModuleLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldModule, v))
}

// ModuleLTE applies the LTE predicate on the "module" field.
func ModuleLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldModule, v))
}

// ModuleContains applies the Contains predicate on the "module" field.
func ModuleContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldModule, v))
}

// ModuleHasPrefix applies the HasPrefix predicate on the "module" field.
func ModuleHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldModule, v))
}

// ModuleHasSuffix applies the HasSuffix predicate on the "module" field.
func ModuleHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldModule, v))
}

// ModuleEqualFold applies the EqualFold predicate on the "module" field.
func ModuleEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldModule, v))
}

// ModuleContainsFold applies the ContainsFold predicate on the "module" field.
func ModuleContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldModule, v))
}

// StripeProductIDEQ applies the EQ predicate on the "stripe_product_id" field.
func StripeProductIDEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldStripeProductID, v))
}

// StripeProductIDNEQ applies the NEQ predicate on the "stripe_product_id" field.
func StripeProductIDNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldStripeProductID, v))
}

// StripeProductIDIn applies the In predicate on the "stripe_product_id" field.
func StripeProductIDIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldStripeProductID, vs...))
}

// StripeProductIDNotIn applies the NotIn predicate on the "stripe_product_id" field.
func StripeProductIDNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldStripeProductID, vs...))
}

// StripeProductIDGT applies the GT predicate on the "stripe_product_id" field.
func StripeProductIDGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldStripeProductID, v))
}

// StripeProductIDGTE applies the GTE predicate on the "stripe_product_id" field.
func StripeProductIDGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldStripeProductID, v))
}

// StripeProductIDLT applies the LT predicate on the "stripe_product_id" field.
func StripeProductIDLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldStripeProductID, v))
}

// StripeProductIDLTE applies the LTE predicate on the "stripe_product_id" field.
func StripeProductIDLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldStripeProductID, v))
}

// StripeProductIDContains applies the Contains predicate on the "stripe_product_id" field.
func StripeProductIDContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldStripeProductID, v))
}

// StripeProductIDHasPrefix applies the HasPrefix predicate on the "stripe_product_id" field.
func StripeProductIDHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldStripeProductID, v))
}

// StripeProductIDHasSuffix applies the HasSuffix predicate on the "stripe_product_id" field.
func StripeProductIDHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldStripeProductID, v))
}

// StripeProductIDIsNil applies the IsNil predicate on the "stripe_product_id" field.
func StripeProductIDIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldStripeProductID))
}

// StripeProductIDNotNil applies the NotNil predicate on the "stripe_product_id" field.
func StripeProductIDNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldStripeProductID))
}

// StripeProductIDEqualFold applies the EqualFold predicate on the "stripe_product_id" field.
func StripeProductIDEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldStripeProductID, v))
}

// StripeProductIDContainsFold applies the ContainsFold predicate on the "stripe_product_id" field.
func StripeProductIDContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldStripeProductID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldStatus, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldActive, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldSubscriptionID))
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldSubscriptionID))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// PriceIDEQ applies the EQ predicate on the "price_id" field.
func PriceIDEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEQ(FieldPriceID, v))
}

// PriceIDNEQ applies the NEQ predicate on the "price_id" field.
func PriceIDNEQ(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNEQ(FieldPriceID, v))
}

// PriceIDIn applies the In predicate on the "price_id" field.
func PriceIDIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIn(FieldPriceID, vs...))
}

// PriceIDNotIn applies the NotIn predicate on the "price_id" field.
func PriceIDNotIn(vs ...string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotIn(FieldPriceID, vs...))
}

// PriceIDGT applies the GT predicate on the "price_id" field.
func PriceIDGT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGT(FieldPriceID, v))
}

// PriceIDGTE applies the GTE predicate on the "price_id" field.
func PriceIDGTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldGTE(FieldPriceID, v))
}

// PriceIDLT applies the LT predicate on the "price_id" field.
func PriceIDLT(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLT(FieldPriceID, v))
}

// PriceIDLTE applies the LTE predicate on the "price_id" field.
func PriceIDLTE(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldLTE(FieldPriceID, v))
}

// PriceIDContains applies the Contains predicate on the "price_id" field.
func PriceIDContains(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContains(FieldPriceID, v))
}

// PriceIDHasPrefix applies the HasPrefix predicate on the "price_id" field.
func PriceIDHasPrefix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasPrefix(FieldPriceID, v))
}

// PriceIDHasSuffix applies the HasSuffix predicate on the "price_id" field.
func PriceIDHasSuffix(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldHasSuffix(FieldPriceID, v))
}

// PriceIDIsNil applies the IsNil predicate on the "price_id" field.
func PriceIDIsNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldIsNull(FieldPriceID))
}

// PriceIDNotNil applies the NotNil predicate on the "price_id" field.
func PriceIDNotNil() predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldNotNull(FieldPriceID))
}

// PriceIDEqualFold applies the EqualFold predicate on the "price_id" field.
func PriceIDEqualFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldEqualFold(FieldPriceID, v))
}

// PriceIDContainsFold applies the ContainsFold predicate on the "price_id" field.
func PriceIDContainsFold(v string) predicate.OrgProduct {
	return predicate.OrgProduct(sql.FieldContainsFold(FieldPriceID, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.OrgProduct {
	return predicate.OrgProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgProduct
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.OrgProduct {
	return predicate.OrgProduct(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgProduct
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgSubscription applies the HasEdge predicate on the "org_subscription" edge.
func HasOrgSubscription() predicate.OrgProduct {
	return predicate.OrgProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrgSubscriptionTable, OrgSubscriptionColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgSubscription
		step.Edge.Schema = schemaConfig.OrgProduct
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgSubscriptionWith applies the HasEdge predicate on the "org_subscription" edge with a given conditions (other predicates).
func HasOrgSubscriptionWith(preds ...predicate.OrgSubscription) predicate.OrgProduct {
	return predicate.OrgProduct(func(s *sql.Selector) {
		step := newOrgSubscriptionStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgSubscription
		step.Edge.Schema = schemaConfig.OrgProduct
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgPrices applies the HasEdge predicate on the "org_prices" edge.
func HasOrgPrices() predicate.OrgProduct {
	return predicate.OrgProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OrgPricesTable, OrgPricesPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgPrice
		step.Edge.Schema = schemaConfig.OrgProductOrgPrices
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgPricesWith applies the HasEdge predicate on the "org_prices" edge with a given conditions (other predicates).
func HasOrgPricesWith(preds ...predicate.OrgPrice) predicate.OrgProduct {
	return predicate.OrgProduct(func(s *sql.Selector) {
		step := newOrgPricesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgPrice
		step.Edge.Schema = schemaConfig.OrgProductOrgPrices
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgModules applies the HasEdge predicate on the "org_modules" edge.
func HasOrgModules() predicate.OrgProduct {
	return predicate.OrgProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrgModulesTable, OrgModulesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgModule
		step.Edge.Schema = schemaConfig.OrgModule
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgModulesWith applies the HasEdge predicate on the "org_modules" edge with a given conditions (other predicates).
func HasOrgModulesWith(preds ...predicate.OrgModule) predicate.OrgProduct {
	return predicate.OrgProduct(func(s *sql.Selector) {
		step := newOrgModulesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgModule
		step.Edge.Schema = schemaConfig.OrgModule
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrgProduct) predicate.OrgProduct {
	return predicate.OrgProduct(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrgProduct) predicate.OrgProduct {
	return predicate.OrgProduct(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrgProduct) predicate.OrgProduct {
	return predicate.OrgProduct(sql.NotPredicates(p))
}
