// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlscheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlScheduledJobUpdate is the builder for updating ControlScheduledJob entities.
type ControlScheduledJobUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlScheduledJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlScheduledJobUpdate builder.
func (csju *ControlScheduledJobUpdate) Where(ps ...predicate.ControlScheduledJob) *ControlScheduledJobUpdate {
	csju.mutation.Where(ps...)
	return csju
}

// SetUpdatedAt sets the "updated_at" field.
func (csju *ControlScheduledJobUpdate) SetUpdatedAt(t time.Time) *ControlScheduledJobUpdate {
	csju.mutation.SetUpdatedAt(t)
	return csju
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (csju *ControlScheduledJobUpdate) ClearUpdatedAt() *ControlScheduledJobUpdate {
	csju.mutation.ClearUpdatedAt()
	return csju
}

// SetUpdatedBy sets the "updated_by" field.
func (csju *ControlScheduledJobUpdate) SetUpdatedBy(s string) *ControlScheduledJobUpdate {
	csju.mutation.SetUpdatedBy(s)
	return csju
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableUpdatedBy(s *string) *ControlScheduledJobUpdate {
	if s != nil {
		csju.SetUpdatedBy(*s)
	}
	return csju
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (csju *ControlScheduledJobUpdate) ClearUpdatedBy() *ControlScheduledJobUpdate {
	csju.mutation.ClearUpdatedBy()
	return csju
}

// SetDeletedAt sets the "deleted_at" field.
func (csju *ControlScheduledJobUpdate) SetDeletedAt(t time.Time) *ControlScheduledJobUpdate {
	csju.mutation.SetDeletedAt(t)
	return csju
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableDeletedAt(t *time.Time) *ControlScheduledJobUpdate {
	if t != nil {
		csju.SetDeletedAt(*t)
	}
	return csju
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csju *ControlScheduledJobUpdate) ClearDeletedAt() *ControlScheduledJobUpdate {
	csju.mutation.ClearDeletedAt()
	return csju
}

// SetDeletedBy sets the "deleted_by" field.
func (csju *ControlScheduledJobUpdate) SetDeletedBy(s string) *ControlScheduledJobUpdate {
	csju.mutation.SetDeletedBy(s)
	return csju
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableDeletedBy(s *string) *ControlScheduledJobUpdate {
	if s != nil {
		csju.SetDeletedBy(*s)
	}
	return csju
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (csju *ControlScheduledJobUpdate) ClearDeletedBy() *ControlScheduledJobUpdate {
	csju.mutation.ClearDeletedBy()
	return csju
}

// SetOwnerID sets the "owner_id" field.
func (csju *ControlScheduledJobUpdate) SetOwnerID(s string) *ControlScheduledJobUpdate {
	csju.mutation.SetOwnerID(s)
	return csju
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableOwnerID(s *string) *ControlScheduledJobUpdate {
	if s != nil {
		csju.SetOwnerID(*s)
	}
	return csju
}

// ClearOwnerID clears the value of the "owner_id" field.
func (csju *ControlScheduledJobUpdate) ClearOwnerID() *ControlScheduledJobUpdate {
	csju.mutation.ClearOwnerID()
	return csju
}

// SetJobID sets the "job_id" field.
func (csju *ControlScheduledJobUpdate) SetJobID(s string) *ControlScheduledJobUpdate {
	csju.mutation.SetJobID(s)
	return csju
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableJobID(s *string) *ControlScheduledJobUpdate {
	if s != nil {
		csju.SetJobID(*s)
	}
	return csju
}

// SetConfiguration sets the "configuration" field.
func (csju *ControlScheduledJobUpdate) SetConfiguration(mc models.JobConfiguration) *ControlScheduledJobUpdate {
	csju.mutation.SetConfiguration(mc)
	return csju
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableConfiguration(mc *models.JobConfiguration) *ControlScheduledJobUpdate {
	if mc != nil {
		csju.SetConfiguration(*mc)
	}
	return csju
}

// SetCadence sets the "cadence" field.
func (csju *ControlScheduledJobUpdate) SetCadence(mc models.JobCadence) *ControlScheduledJobUpdate {
	csju.mutation.SetCadence(mc)
	return csju
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableCadence(mc *models.JobCadence) *ControlScheduledJobUpdate {
	if mc != nil {
		csju.SetCadence(*mc)
	}
	return csju
}

// ClearCadence clears the value of the "cadence" field.
func (csju *ControlScheduledJobUpdate) ClearCadence() *ControlScheduledJobUpdate {
	csju.mutation.ClearCadence()
	return csju
}

// SetCron sets the "cron" field.
func (csju *ControlScheduledJobUpdate) SetCron(s string) *ControlScheduledJobUpdate {
	csju.mutation.SetCron(s)
	return csju
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableCron(s *string) *ControlScheduledJobUpdate {
	if s != nil {
		csju.SetCron(*s)
	}
	return csju
}

// ClearCron clears the value of the "cron" field.
func (csju *ControlScheduledJobUpdate) ClearCron() *ControlScheduledJobUpdate {
	csju.mutation.ClearCron()
	return csju
}

// SetJobRunnerID sets the "job_runner_id" field.
func (csju *ControlScheduledJobUpdate) SetJobRunnerID(s string) *ControlScheduledJobUpdate {
	csju.mutation.SetJobRunnerID(s)
	return csju
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (csju *ControlScheduledJobUpdate) SetNillableJobRunnerID(s *string) *ControlScheduledJobUpdate {
	if s != nil {
		csju.SetJobRunnerID(*s)
	}
	return csju
}

// ClearJobRunnerID clears the value of the "job_runner_id" field.
func (csju *ControlScheduledJobUpdate) ClearJobRunnerID() *ControlScheduledJobUpdate {
	csju.mutation.ClearJobRunnerID()
	return csju
}

// SetOwner sets the "owner" edge to the Organization entity.
func (csju *ControlScheduledJobUpdate) SetOwner(o *Organization) *ControlScheduledJobUpdate {
	return csju.SetOwnerID(o.ID)
}

// SetJob sets the "job" edge to the ScheduledJob entity.
func (csju *ControlScheduledJobUpdate) SetJob(s *ScheduledJob) *ControlScheduledJobUpdate {
	return csju.SetJobID(s.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (csju *ControlScheduledJobUpdate) AddControlIDs(ids ...string) *ControlScheduledJobUpdate {
	csju.mutation.AddControlIDs(ids...)
	return csju
}

// AddControls adds the "controls" edges to the Control entity.
func (csju *ControlScheduledJobUpdate) AddControls(c ...*Control) *ControlScheduledJobUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csju.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (csju *ControlScheduledJobUpdate) AddSubcontrolIDs(ids ...string) *ControlScheduledJobUpdate {
	csju.mutation.AddSubcontrolIDs(ids...)
	return csju
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (csju *ControlScheduledJobUpdate) AddSubcontrols(s ...*Subcontrol) *ControlScheduledJobUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csju.AddSubcontrolIDs(ids...)
}

// SetJobRunner sets the "job_runner" edge to the JobRunner entity.
func (csju *ControlScheduledJobUpdate) SetJobRunner(j *JobRunner) *ControlScheduledJobUpdate {
	return csju.SetJobRunnerID(j.ID)
}

// Mutation returns the ControlScheduledJobMutation object of the builder.
func (csju *ControlScheduledJobUpdate) Mutation() *ControlScheduledJobMutation {
	return csju.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (csju *ControlScheduledJobUpdate) ClearOwner() *ControlScheduledJobUpdate {
	csju.mutation.ClearOwner()
	return csju
}

// ClearJob clears the "job" edge to the ScheduledJob entity.
func (csju *ControlScheduledJobUpdate) ClearJob() *ControlScheduledJobUpdate {
	csju.mutation.ClearJob()
	return csju
}

// ClearControls clears all "controls" edges to the Control entity.
func (csju *ControlScheduledJobUpdate) ClearControls() *ControlScheduledJobUpdate {
	csju.mutation.ClearControls()
	return csju
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (csju *ControlScheduledJobUpdate) RemoveControlIDs(ids ...string) *ControlScheduledJobUpdate {
	csju.mutation.RemoveControlIDs(ids...)
	return csju
}

// RemoveControls removes "controls" edges to Control entities.
func (csju *ControlScheduledJobUpdate) RemoveControls(c ...*Control) *ControlScheduledJobUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csju.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (csju *ControlScheduledJobUpdate) ClearSubcontrols() *ControlScheduledJobUpdate {
	csju.mutation.ClearSubcontrols()
	return csju
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (csju *ControlScheduledJobUpdate) RemoveSubcontrolIDs(ids ...string) *ControlScheduledJobUpdate {
	csju.mutation.RemoveSubcontrolIDs(ids...)
	return csju
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (csju *ControlScheduledJobUpdate) RemoveSubcontrols(s ...*Subcontrol) *ControlScheduledJobUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csju.RemoveSubcontrolIDs(ids...)
}

// ClearJobRunner clears the "job_runner" edge to the JobRunner entity.
func (csju *ControlScheduledJobUpdate) ClearJobRunner() *ControlScheduledJobUpdate {
	csju.mutation.ClearJobRunner()
	return csju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csju *ControlScheduledJobUpdate) Save(ctx context.Context) (int, error) {
	if err := csju.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, csju.sqlSave, csju.mutation, csju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csju *ControlScheduledJobUpdate) SaveX(ctx context.Context) int {
	affected, err := csju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csju *ControlScheduledJobUpdate) Exec(ctx context.Context) error {
	_, err := csju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csju *ControlScheduledJobUpdate) ExecX(ctx context.Context) {
	if err := csju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csju *ControlScheduledJobUpdate) defaults() error {
	if _, ok := csju.mutation.UpdatedAt(); !ok && !csju.mutation.UpdatedAtCleared() {
		if controlscheduledjob.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlscheduledjob.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlscheduledjob.UpdateDefaultUpdatedAt()
		csju.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csju *ControlScheduledJobUpdate) check() error {
	if v, ok := csju.mutation.OwnerID(); ok {
		if err := controlscheduledjob.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJob.owner_id": %w`, err)}
		}
	}
	if v, ok := csju.mutation.Cadence(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJob.cadence": %w`, err)}
		}
	}
	if csju.mutation.JobCleared() && len(csju.mutation.JobIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ControlScheduledJob.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csju *ControlScheduledJobUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlScheduledJobUpdate {
	csju.modifiers = append(csju.modifiers, modifiers...)
	return csju
}

func (csju *ControlScheduledJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(controlscheduledjob.Table, controlscheduledjob.Columns, sqlgraph.NewFieldSpec(controlscheduledjob.FieldID, field.TypeString))
	if ps := csju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csju.mutation.CreatedAtCleared() {
		_spec.ClearField(controlscheduledjob.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := csju.mutation.UpdatedAt(); ok {
		_spec.SetField(controlscheduledjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if csju.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlscheduledjob.FieldUpdatedAt, field.TypeTime)
	}
	if csju.mutation.CreatedByCleared() {
		_spec.ClearField(controlscheduledjob.FieldCreatedBy, field.TypeString)
	}
	if value, ok := csju.mutation.UpdatedBy(); ok {
		_spec.SetField(controlscheduledjob.FieldUpdatedBy, field.TypeString, value)
	}
	if csju.mutation.UpdatedByCleared() {
		_spec.ClearField(controlscheduledjob.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := csju.mutation.DeletedAt(); ok {
		_spec.SetField(controlscheduledjob.FieldDeletedAt, field.TypeTime, value)
	}
	if csju.mutation.DeletedAtCleared() {
		_spec.ClearField(controlscheduledjob.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := csju.mutation.DeletedBy(); ok {
		_spec.SetField(controlscheduledjob.FieldDeletedBy, field.TypeString, value)
	}
	if csju.mutation.DeletedByCleared() {
		_spec.ClearField(controlscheduledjob.FieldDeletedBy, field.TypeString)
	}
	if value, ok := csju.mutation.Configuration(); ok {
		_spec.SetField(controlscheduledjob.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := csju.mutation.Cadence(); ok {
		_spec.SetField(controlscheduledjob.FieldCadence, field.TypeJSON, value)
	}
	if csju.mutation.CadenceCleared() {
		_spec.ClearField(controlscheduledjob.FieldCadence, field.TypeJSON)
	}
	if value, ok := csju.mutation.Cron(); ok {
		_spec.SetField(controlscheduledjob.FieldCron, field.TypeString, value)
	}
	if csju.mutation.CronCleared() {
		_spec.ClearField(controlscheduledjob.FieldCron, field.TypeString)
	}
	if csju.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlscheduledjob.OwnerTable,
			Columns: []string{controlscheduledjob.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csju.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlscheduledjob.OwnerTable,
			Columns: []string{controlscheduledjob.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csju.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobTable,
			Columns: []string{controlscheduledjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csju.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobTable,
			Columns: []string{controlscheduledjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csju.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.ControlsTable,
			Columns: controlscheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJobControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csju.mutation.RemovedControlsIDs(); len(nodes) > 0 && !csju.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.ControlsTable,
			Columns: controlscheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csju.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.ControlsTable,
			Columns: controlscheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csju.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.SubcontrolsTable,
			Columns: controlscheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJobSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csju.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !csju.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.SubcontrolsTable,
			Columns: controlscheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csju.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.SubcontrolsTable,
			Columns: controlscheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csju.mutation.JobRunnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobRunnerTable,
			Columns: []string{controlscheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csju.mutation.JobRunnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobRunnerTable,
			Columns: []string{controlscheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = csju.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = csju.schemaConfig.ControlScheduledJob
	ctx = internal.NewSchemaConfigContext(ctx, csju.schemaConfig)
	_spec.AddModifiers(csju.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, csju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlscheduledjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csju.mutation.done = true
	return n, nil
}

// ControlScheduledJobUpdateOne is the builder for updating a single ControlScheduledJob entity.
type ControlScheduledJobUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlScheduledJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (csjuo *ControlScheduledJobUpdateOne) SetUpdatedAt(t time.Time) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetUpdatedAt(t)
	return csjuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (csjuo *ControlScheduledJobUpdateOne) ClearUpdatedAt() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearUpdatedAt()
	return csjuo
}

// SetUpdatedBy sets the "updated_by" field.
func (csjuo *ControlScheduledJobUpdateOne) SetUpdatedBy(s string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetUpdatedBy(s)
	return csjuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableUpdatedBy(s *string) *ControlScheduledJobUpdateOne {
	if s != nil {
		csjuo.SetUpdatedBy(*s)
	}
	return csjuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (csjuo *ControlScheduledJobUpdateOne) ClearUpdatedBy() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearUpdatedBy()
	return csjuo
}

// SetDeletedAt sets the "deleted_at" field.
func (csjuo *ControlScheduledJobUpdateOne) SetDeletedAt(t time.Time) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetDeletedAt(t)
	return csjuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableDeletedAt(t *time.Time) *ControlScheduledJobUpdateOne {
	if t != nil {
		csjuo.SetDeletedAt(*t)
	}
	return csjuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csjuo *ControlScheduledJobUpdateOne) ClearDeletedAt() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearDeletedAt()
	return csjuo
}

// SetDeletedBy sets the "deleted_by" field.
func (csjuo *ControlScheduledJobUpdateOne) SetDeletedBy(s string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetDeletedBy(s)
	return csjuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableDeletedBy(s *string) *ControlScheduledJobUpdateOne {
	if s != nil {
		csjuo.SetDeletedBy(*s)
	}
	return csjuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (csjuo *ControlScheduledJobUpdateOne) ClearDeletedBy() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearDeletedBy()
	return csjuo
}

// SetOwnerID sets the "owner_id" field.
func (csjuo *ControlScheduledJobUpdateOne) SetOwnerID(s string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetOwnerID(s)
	return csjuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableOwnerID(s *string) *ControlScheduledJobUpdateOne {
	if s != nil {
		csjuo.SetOwnerID(*s)
	}
	return csjuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (csjuo *ControlScheduledJobUpdateOne) ClearOwnerID() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearOwnerID()
	return csjuo
}

// SetJobID sets the "job_id" field.
func (csjuo *ControlScheduledJobUpdateOne) SetJobID(s string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetJobID(s)
	return csjuo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableJobID(s *string) *ControlScheduledJobUpdateOne {
	if s != nil {
		csjuo.SetJobID(*s)
	}
	return csjuo
}

// SetConfiguration sets the "configuration" field.
func (csjuo *ControlScheduledJobUpdateOne) SetConfiguration(mc models.JobConfiguration) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetConfiguration(mc)
	return csjuo
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableConfiguration(mc *models.JobConfiguration) *ControlScheduledJobUpdateOne {
	if mc != nil {
		csjuo.SetConfiguration(*mc)
	}
	return csjuo
}

// SetCadence sets the "cadence" field.
func (csjuo *ControlScheduledJobUpdateOne) SetCadence(mc models.JobCadence) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetCadence(mc)
	return csjuo
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableCadence(mc *models.JobCadence) *ControlScheduledJobUpdateOne {
	if mc != nil {
		csjuo.SetCadence(*mc)
	}
	return csjuo
}

// ClearCadence clears the value of the "cadence" field.
func (csjuo *ControlScheduledJobUpdateOne) ClearCadence() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearCadence()
	return csjuo
}

// SetCron sets the "cron" field.
func (csjuo *ControlScheduledJobUpdateOne) SetCron(s string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetCron(s)
	return csjuo
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableCron(s *string) *ControlScheduledJobUpdateOne {
	if s != nil {
		csjuo.SetCron(*s)
	}
	return csjuo
}

// ClearCron clears the value of the "cron" field.
func (csjuo *ControlScheduledJobUpdateOne) ClearCron() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearCron()
	return csjuo
}

// SetJobRunnerID sets the "job_runner_id" field.
func (csjuo *ControlScheduledJobUpdateOne) SetJobRunnerID(s string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.SetJobRunnerID(s)
	return csjuo
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (csjuo *ControlScheduledJobUpdateOne) SetNillableJobRunnerID(s *string) *ControlScheduledJobUpdateOne {
	if s != nil {
		csjuo.SetJobRunnerID(*s)
	}
	return csjuo
}

// ClearJobRunnerID clears the value of the "job_runner_id" field.
func (csjuo *ControlScheduledJobUpdateOne) ClearJobRunnerID() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearJobRunnerID()
	return csjuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (csjuo *ControlScheduledJobUpdateOne) SetOwner(o *Organization) *ControlScheduledJobUpdateOne {
	return csjuo.SetOwnerID(o.ID)
}

// SetJob sets the "job" edge to the ScheduledJob entity.
func (csjuo *ControlScheduledJobUpdateOne) SetJob(s *ScheduledJob) *ControlScheduledJobUpdateOne {
	return csjuo.SetJobID(s.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (csjuo *ControlScheduledJobUpdateOne) AddControlIDs(ids ...string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.AddControlIDs(ids...)
	return csjuo
}

// AddControls adds the "controls" edges to the Control entity.
func (csjuo *ControlScheduledJobUpdateOne) AddControls(c ...*Control) *ControlScheduledJobUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csjuo.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (csjuo *ControlScheduledJobUpdateOne) AddSubcontrolIDs(ids ...string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.AddSubcontrolIDs(ids...)
	return csjuo
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (csjuo *ControlScheduledJobUpdateOne) AddSubcontrols(s ...*Subcontrol) *ControlScheduledJobUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csjuo.AddSubcontrolIDs(ids...)
}

// SetJobRunner sets the "job_runner" edge to the JobRunner entity.
func (csjuo *ControlScheduledJobUpdateOne) SetJobRunner(j *JobRunner) *ControlScheduledJobUpdateOne {
	return csjuo.SetJobRunnerID(j.ID)
}

// Mutation returns the ControlScheduledJobMutation object of the builder.
func (csjuo *ControlScheduledJobUpdateOne) Mutation() *ControlScheduledJobMutation {
	return csjuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (csjuo *ControlScheduledJobUpdateOne) ClearOwner() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearOwner()
	return csjuo
}

// ClearJob clears the "job" edge to the ScheduledJob entity.
func (csjuo *ControlScheduledJobUpdateOne) ClearJob() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearJob()
	return csjuo
}

// ClearControls clears all "controls" edges to the Control entity.
func (csjuo *ControlScheduledJobUpdateOne) ClearControls() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearControls()
	return csjuo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (csjuo *ControlScheduledJobUpdateOne) RemoveControlIDs(ids ...string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.RemoveControlIDs(ids...)
	return csjuo
}

// RemoveControls removes "controls" edges to Control entities.
func (csjuo *ControlScheduledJobUpdateOne) RemoveControls(c ...*Control) *ControlScheduledJobUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csjuo.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (csjuo *ControlScheduledJobUpdateOne) ClearSubcontrols() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearSubcontrols()
	return csjuo
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (csjuo *ControlScheduledJobUpdateOne) RemoveSubcontrolIDs(ids ...string) *ControlScheduledJobUpdateOne {
	csjuo.mutation.RemoveSubcontrolIDs(ids...)
	return csjuo
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (csjuo *ControlScheduledJobUpdateOne) RemoveSubcontrols(s ...*Subcontrol) *ControlScheduledJobUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csjuo.RemoveSubcontrolIDs(ids...)
}

// ClearJobRunner clears the "job_runner" edge to the JobRunner entity.
func (csjuo *ControlScheduledJobUpdateOne) ClearJobRunner() *ControlScheduledJobUpdateOne {
	csjuo.mutation.ClearJobRunner()
	return csjuo
}

// Where appends a list predicates to the ControlScheduledJobUpdate builder.
func (csjuo *ControlScheduledJobUpdateOne) Where(ps ...predicate.ControlScheduledJob) *ControlScheduledJobUpdateOne {
	csjuo.mutation.Where(ps...)
	return csjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csjuo *ControlScheduledJobUpdateOne) Select(field string, fields ...string) *ControlScheduledJobUpdateOne {
	csjuo.fields = append([]string{field}, fields...)
	return csjuo
}

// Save executes the query and returns the updated ControlScheduledJob entity.
func (csjuo *ControlScheduledJobUpdateOne) Save(ctx context.Context) (*ControlScheduledJob, error) {
	if err := csjuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csjuo.sqlSave, csjuo.mutation, csjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csjuo *ControlScheduledJobUpdateOne) SaveX(ctx context.Context) *ControlScheduledJob {
	node, err := csjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csjuo *ControlScheduledJobUpdateOne) Exec(ctx context.Context) error {
	_, err := csjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csjuo *ControlScheduledJobUpdateOne) ExecX(ctx context.Context) {
	if err := csjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csjuo *ControlScheduledJobUpdateOne) defaults() error {
	if _, ok := csjuo.mutation.UpdatedAt(); !ok && !csjuo.mutation.UpdatedAtCleared() {
		if controlscheduledjob.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlscheduledjob.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlscheduledjob.UpdateDefaultUpdatedAt()
		csjuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csjuo *ControlScheduledJobUpdateOne) check() error {
	if v, ok := csjuo.mutation.OwnerID(); ok {
		if err := controlscheduledjob.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJob.owner_id": %w`, err)}
		}
	}
	if v, ok := csjuo.mutation.Cadence(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cadence", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJob.cadence": %w`, err)}
		}
	}
	if csjuo.mutation.JobCleared() && len(csjuo.mutation.JobIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ControlScheduledJob.job"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csjuo *ControlScheduledJobUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlScheduledJobUpdateOne {
	csjuo.modifiers = append(csjuo.modifiers, modifiers...)
	return csjuo
}

func (csjuo *ControlScheduledJobUpdateOne) sqlSave(ctx context.Context) (_node *ControlScheduledJob, err error) {
	if err := csjuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(controlscheduledjob.Table, controlscheduledjob.Columns, sqlgraph.NewFieldSpec(controlscheduledjob.FieldID, field.TypeString))
	id, ok := csjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ControlScheduledJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlscheduledjob.FieldID)
		for _, f := range fields {
			if !controlscheduledjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != controlscheduledjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csjuo.mutation.CreatedAtCleared() {
		_spec.ClearField(controlscheduledjob.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := csjuo.mutation.UpdatedAt(); ok {
		_spec.SetField(controlscheduledjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if csjuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlscheduledjob.FieldUpdatedAt, field.TypeTime)
	}
	if csjuo.mutation.CreatedByCleared() {
		_spec.ClearField(controlscheduledjob.FieldCreatedBy, field.TypeString)
	}
	if value, ok := csjuo.mutation.UpdatedBy(); ok {
		_spec.SetField(controlscheduledjob.FieldUpdatedBy, field.TypeString, value)
	}
	if csjuo.mutation.UpdatedByCleared() {
		_spec.ClearField(controlscheduledjob.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := csjuo.mutation.DeletedAt(); ok {
		_spec.SetField(controlscheduledjob.FieldDeletedAt, field.TypeTime, value)
	}
	if csjuo.mutation.DeletedAtCleared() {
		_spec.ClearField(controlscheduledjob.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := csjuo.mutation.DeletedBy(); ok {
		_spec.SetField(controlscheduledjob.FieldDeletedBy, field.TypeString, value)
	}
	if csjuo.mutation.DeletedByCleared() {
		_spec.ClearField(controlscheduledjob.FieldDeletedBy, field.TypeString)
	}
	if value, ok := csjuo.mutation.Configuration(); ok {
		_spec.SetField(controlscheduledjob.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := csjuo.mutation.Cadence(); ok {
		_spec.SetField(controlscheduledjob.FieldCadence, field.TypeJSON, value)
	}
	if csjuo.mutation.CadenceCleared() {
		_spec.ClearField(controlscheduledjob.FieldCadence, field.TypeJSON)
	}
	if value, ok := csjuo.mutation.Cron(); ok {
		_spec.SetField(controlscheduledjob.FieldCron, field.TypeString, value)
	}
	if csjuo.mutation.CronCleared() {
		_spec.ClearField(controlscheduledjob.FieldCron, field.TypeString)
	}
	if csjuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlscheduledjob.OwnerTable,
			Columns: []string{controlscheduledjob.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csjuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlscheduledjob.OwnerTable,
			Columns: []string{controlscheduledjob.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csjuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobTable,
			Columns: []string{controlscheduledjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csjuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobTable,
			Columns: []string{controlscheduledjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csjuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.ControlsTable,
			Columns: controlscheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJobControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csjuo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !csjuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.ControlsTable,
			Columns: controlscheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csjuo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.ControlsTable,
			Columns: controlscheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csjuo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.SubcontrolsTable,
			Columns: controlscheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJobSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csjuo.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !csjuo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.SubcontrolsTable,
			Columns: controlscheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csjuo.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.SubcontrolsTable,
			Columns: controlscheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csjuo.mutation.JobRunnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobRunnerTable,
			Columns: []string{controlscheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csjuo.mutation.JobRunnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobRunnerTable,
			Columns: []string{controlscheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjuo.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = csjuo.schemaConfig.ControlScheduledJob
	ctx = internal.NewSchemaConfigContext(ctx, csjuo.schemaConfig)
	_spec.AddModifiers(csjuo.modifiers...)
	_node = &ControlScheduledJob{config: csjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlscheduledjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csjuo.mutation.done = true
	return _node, nil
}
