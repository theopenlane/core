// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/controlobjectivehistory"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/documentdatahistory"
	"github.com/theopenlane/core/internal/ent/generated/emailverificationtoken"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/entitlementhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeaturehistory"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entityhistory"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/entitytypehistory"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/eventhistory"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/featurehistory"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/groupsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/hushhistory"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/integrationhistory"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicyhistory"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/narrativehistory"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/notehistory"
	"github.com/theopenlane/core/internal/ent/generated/oauthprovider"
	"github.com/theopenlane/core/internal/ent/generated/oauthproviderhistory"
	"github.com/theopenlane/core/internal/ent/generated/ohauthtootoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationhistory"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/organizationsettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/passwordresettoken"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/programmembershiphistory"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/riskhistory"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/standardhistory"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/userhistory"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"
	"github.com/theopenlane/core/internal/ent/generated/webauthn"
	"github.com/theopenlane/core/internal/ent/generated/webhook"
	"github.com/theopenlane/core/internal/ent/generated/webhookhistory"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next generated.Querier) generated.Querier {
	return generated.QuerierFunc(func(ctx context.Context, q generated.Query) (generated.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q generated.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The APITokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type APITokenFunc func(context.Context, *generated.APITokenQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f APITokenFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.APITokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.APITokenQuery", q)
}

// The TraverseAPIToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAPIToken func(context.Context, *generated.APITokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAPIToken) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAPIToken) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.APITokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.APITokenQuery", q)
}

// The ActionPlanFunc type is an adapter to allow the use of ordinary function as a Querier.
type ActionPlanFunc func(context.Context, *generated.ActionPlanQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ActionPlanFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ActionPlanQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ActionPlanQuery", q)
}

// The TraverseActionPlan type is an adapter to allow the use of ordinary function as Traverser.
type TraverseActionPlan func(context.Context, *generated.ActionPlanQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseActionPlan) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseActionPlan) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ActionPlanQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ActionPlanQuery", q)
}

// The ActionPlanHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ActionPlanHistoryFunc func(context.Context, *generated.ActionPlanHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ActionPlanHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ActionPlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ActionPlanHistoryQuery", q)
}

// The TraverseActionPlanHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseActionPlanHistory func(context.Context, *generated.ActionPlanHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseActionPlanHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseActionPlanHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ActionPlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ActionPlanHistoryQuery", q)
}

// The ContactFunc type is an adapter to allow the use of ordinary function as a Querier.
type ContactFunc func(context.Context, *generated.ContactQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ContactFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ContactQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ContactQuery", q)
}

// The TraverseContact type is an adapter to allow the use of ordinary function as Traverser.
type TraverseContact func(context.Context, *generated.ContactQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseContact) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseContact) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ContactQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ContactQuery", q)
}

// The ContactHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ContactHistoryFunc func(context.Context, *generated.ContactHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ContactHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ContactHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ContactHistoryQuery", q)
}

// The TraverseContactHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseContactHistory func(context.Context, *generated.ContactHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseContactHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseContactHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ContactHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ContactHistoryQuery", q)
}

// The ControlFunc type is an adapter to allow the use of ordinary function as a Querier.
type ControlFunc func(context.Context, *generated.ControlQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ControlFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ControlQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ControlQuery", q)
}

// The TraverseControl type is an adapter to allow the use of ordinary function as Traverser.
type TraverseControl func(context.Context, *generated.ControlQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseControl) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseControl) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ControlQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ControlQuery", q)
}

// The ControlHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ControlHistoryFunc func(context.Context, *generated.ControlHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ControlHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ControlHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ControlHistoryQuery", q)
}

// The TraverseControlHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseControlHistory func(context.Context, *generated.ControlHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseControlHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseControlHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ControlHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ControlHistoryQuery", q)
}

// The ControlObjectiveFunc type is an adapter to allow the use of ordinary function as a Querier.
type ControlObjectiveFunc func(context.Context, *generated.ControlObjectiveQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ControlObjectiveFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ControlObjectiveQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ControlObjectiveQuery", q)
}

// The TraverseControlObjective type is an adapter to allow the use of ordinary function as Traverser.
type TraverseControlObjective func(context.Context, *generated.ControlObjectiveQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseControlObjective) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseControlObjective) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ControlObjectiveQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ControlObjectiveQuery", q)
}

// The ControlObjectiveHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ControlObjectiveHistoryFunc func(context.Context, *generated.ControlObjectiveHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ControlObjectiveHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ControlObjectiveHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ControlObjectiveHistoryQuery", q)
}

// The TraverseControlObjectiveHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseControlObjectiveHistory func(context.Context, *generated.ControlObjectiveHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseControlObjectiveHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseControlObjectiveHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ControlObjectiveHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ControlObjectiveHistoryQuery", q)
}

// The DocumentDataFunc type is an adapter to allow the use of ordinary function as a Querier.
type DocumentDataFunc func(context.Context, *generated.DocumentDataQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f DocumentDataFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.DocumentDataQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.DocumentDataQuery", q)
}

// The TraverseDocumentData type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDocumentData func(context.Context, *generated.DocumentDataQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDocumentData) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDocumentData) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.DocumentDataQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.DocumentDataQuery", q)
}

// The DocumentDataHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type DocumentDataHistoryFunc func(context.Context, *generated.DocumentDataHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f DocumentDataHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.DocumentDataHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.DocumentDataHistoryQuery", q)
}

// The TraverseDocumentDataHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDocumentDataHistory func(context.Context, *generated.DocumentDataHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDocumentDataHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDocumentDataHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.DocumentDataHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.DocumentDataHistoryQuery", q)
}

// The EmailVerificationTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type EmailVerificationTokenFunc func(context.Context, *generated.EmailVerificationTokenQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EmailVerificationTokenFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EmailVerificationTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EmailVerificationTokenQuery", q)
}

// The TraverseEmailVerificationToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEmailVerificationToken func(context.Context, *generated.EmailVerificationTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEmailVerificationToken) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEmailVerificationToken) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EmailVerificationTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EmailVerificationTokenQuery", q)
}

// The EntitlementFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntitlementFunc func(context.Context, *generated.EntitlementQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntitlementFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntitlementQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntitlementQuery", q)
}

// The TraverseEntitlement type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntitlement func(context.Context, *generated.EntitlementQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntitlement) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntitlement) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntitlementQuery", q)
}

// The EntitlementHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntitlementHistoryFunc func(context.Context, *generated.EntitlementHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntitlementHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntitlementHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntitlementHistoryQuery", q)
}

// The TraverseEntitlementHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntitlementHistory func(context.Context, *generated.EntitlementHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntitlementHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntitlementHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntitlementHistoryQuery", q)
}

// The EntitlementPlanFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntitlementPlanFunc func(context.Context, *generated.EntitlementPlanQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntitlementPlanFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntitlementPlanQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntitlementPlanQuery", q)
}

// The TraverseEntitlementPlan type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntitlementPlan func(context.Context, *generated.EntitlementPlanQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntitlementPlan) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntitlementPlan) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementPlanQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntitlementPlanQuery", q)
}

// The EntitlementPlanFeatureFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntitlementPlanFeatureFunc func(context.Context, *generated.EntitlementPlanFeatureQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntitlementPlanFeatureFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntitlementPlanFeatureQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntitlementPlanFeatureQuery", q)
}

// The TraverseEntitlementPlanFeature type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntitlementPlanFeature func(context.Context, *generated.EntitlementPlanFeatureQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntitlementPlanFeature) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntitlementPlanFeature) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementPlanFeatureQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntitlementPlanFeatureQuery", q)
}

// The EntitlementPlanFeatureHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntitlementPlanFeatureHistoryFunc func(context.Context, *generated.EntitlementPlanFeatureHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntitlementPlanFeatureHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntitlementPlanFeatureHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntitlementPlanFeatureHistoryQuery", q)
}

// The TraverseEntitlementPlanFeatureHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntitlementPlanFeatureHistory func(context.Context, *generated.EntitlementPlanFeatureHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntitlementPlanFeatureHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntitlementPlanFeatureHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementPlanFeatureHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntitlementPlanFeatureHistoryQuery", q)
}

// The EntitlementPlanHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntitlementPlanHistoryFunc func(context.Context, *generated.EntitlementPlanHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntitlementPlanHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntitlementPlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntitlementPlanHistoryQuery", q)
}

// The TraverseEntitlementPlanHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntitlementPlanHistory func(context.Context, *generated.EntitlementPlanHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntitlementPlanHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntitlementPlanHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntitlementPlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntitlementPlanHistoryQuery", q)
}

// The EntityFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntityFunc func(context.Context, *generated.EntityQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntityFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntityQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntityQuery", q)
}

// The TraverseEntity type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntity func(context.Context, *generated.EntityQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntity) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntity) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntityQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntityQuery", q)
}

// The EntityHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntityHistoryFunc func(context.Context, *generated.EntityHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntityHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntityHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntityHistoryQuery", q)
}

// The TraverseEntityHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntityHistory func(context.Context, *generated.EntityHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntityHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntityHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntityHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntityHistoryQuery", q)
}

// The EntityTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntityTypeFunc func(context.Context, *generated.EntityTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntityTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntityTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntityTypeQuery", q)
}

// The TraverseEntityType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntityType func(context.Context, *generated.EntityTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntityType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntityType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntityTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntityTypeQuery", q)
}

// The EntityTypeHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type EntityTypeHistoryFunc func(context.Context, *generated.EntityTypeHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EntityTypeHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EntityTypeHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EntityTypeHistoryQuery", q)
}

// The TraverseEntityTypeHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEntityTypeHistory func(context.Context, *generated.EntityTypeHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEntityTypeHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEntityTypeHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EntityTypeHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EntityTypeHistoryQuery", q)
}

// The EventFunc type is an adapter to allow the use of ordinary function as a Querier.
type EventFunc func(context.Context, *generated.EventQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EventFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EventQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EventQuery", q)
}

// The TraverseEvent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEvent func(context.Context, *generated.EventQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEvent) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEvent) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EventQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EventQuery", q)
}

// The EventHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type EventHistoryFunc func(context.Context, *generated.EventHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f EventHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.EventHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.EventHistoryQuery", q)
}

// The TraverseEventHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEventHistory func(context.Context, *generated.EventHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEventHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEventHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.EventHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.EventHistoryQuery", q)
}

// The FeatureFunc type is an adapter to allow the use of ordinary function as a Querier.
type FeatureFunc func(context.Context, *generated.FeatureQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f FeatureFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.FeatureQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.FeatureQuery", q)
}

// The TraverseFeature type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFeature func(context.Context, *generated.FeatureQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFeature) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFeature) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FeatureQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.FeatureQuery", q)
}

// The FeatureHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type FeatureHistoryFunc func(context.Context, *generated.FeatureHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f FeatureHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.FeatureHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.FeatureHistoryQuery", q)
}

// The TraverseFeatureHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFeatureHistory func(context.Context, *generated.FeatureHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFeatureHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFeatureHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FeatureHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.FeatureHistoryQuery", q)
}

// The FileFunc type is an adapter to allow the use of ordinary function as a Querier.
type FileFunc func(context.Context, *generated.FileQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f FileFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.FileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.FileQuery", q)
}

// The TraverseFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFile func(context.Context, *generated.FileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFile) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFile) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.FileQuery", q)
}

// The FileHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type FileHistoryFunc func(context.Context, *generated.FileHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f FileHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.FileHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.FileHistoryQuery", q)
}

// The TraverseFileHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFileHistory func(context.Context, *generated.FileHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFileHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFileHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.FileHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.FileHistoryQuery", q)
}

// The GroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type GroupFunc func(context.Context, *generated.GroupQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f GroupFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.GroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.GroupQuery", q)
}

// The TraverseGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGroup func(context.Context, *generated.GroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGroup) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGroup) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.GroupQuery", q)
}

// The GroupHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type GroupHistoryFunc func(context.Context, *generated.GroupHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f GroupHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.GroupHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.GroupHistoryQuery", q)
}

// The TraverseGroupHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGroupHistory func(context.Context, *generated.GroupHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGroupHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGroupHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.GroupHistoryQuery", q)
}

// The GroupMembershipFunc type is an adapter to allow the use of ordinary function as a Querier.
type GroupMembershipFunc func(context.Context, *generated.GroupMembershipQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f GroupMembershipFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.GroupMembershipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.GroupMembershipQuery", q)
}

// The TraverseGroupMembership type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGroupMembership func(context.Context, *generated.GroupMembershipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGroupMembership) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGroupMembership) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupMembershipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.GroupMembershipQuery", q)
}

// The GroupMembershipHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type GroupMembershipHistoryFunc func(context.Context, *generated.GroupMembershipHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f GroupMembershipHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.GroupMembershipHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.GroupMembershipHistoryQuery", q)
}

// The TraverseGroupMembershipHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGroupMembershipHistory func(context.Context, *generated.GroupMembershipHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGroupMembershipHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGroupMembershipHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupMembershipHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.GroupMembershipHistoryQuery", q)
}

// The GroupSettingFunc type is an adapter to allow the use of ordinary function as a Querier.
type GroupSettingFunc func(context.Context, *generated.GroupSettingQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f GroupSettingFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.GroupSettingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.GroupSettingQuery", q)
}

// The TraverseGroupSetting type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGroupSetting func(context.Context, *generated.GroupSettingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGroupSetting) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGroupSetting) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupSettingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.GroupSettingQuery", q)
}

// The GroupSettingHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type GroupSettingHistoryFunc func(context.Context, *generated.GroupSettingHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f GroupSettingHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.GroupSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.GroupSettingHistoryQuery", q)
}

// The TraverseGroupSettingHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGroupSettingHistory func(context.Context, *generated.GroupSettingHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGroupSettingHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGroupSettingHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.GroupSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.GroupSettingHistoryQuery", q)
}

// The HushFunc type is an adapter to allow the use of ordinary function as a Querier.
type HushFunc func(context.Context, *generated.HushQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f HushFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.HushQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.HushQuery", q)
}

// The TraverseHush type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHush func(context.Context, *generated.HushQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHush) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHush) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.HushQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.HushQuery", q)
}

// The HushHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type HushHistoryFunc func(context.Context, *generated.HushHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f HushHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.HushHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.HushHistoryQuery", q)
}

// The TraverseHushHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHushHistory func(context.Context, *generated.HushHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHushHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHushHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.HushHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.HushHistoryQuery", q)
}

// The IntegrationFunc type is an adapter to allow the use of ordinary function as a Querier.
type IntegrationFunc func(context.Context, *generated.IntegrationQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f IntegrationFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.IntegrationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.IntegrationQuery", q)
}

// The TraverseIntegration type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIntegration func(context.Context, *generated.IntegrationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIntegration) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIntegration) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.IntegrationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.IntegrationQuery", q)
}

// The IntegrationHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type IntegrationHistoryFunc func(context.Context, *generated.IntegrationHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f IntegrationHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.IntegrationHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.IntegrationHistoryQuery", q)
}

// The TraverseIntegrationHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIntegrationHistory func(context.Context, *generated.IntegrationHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIntegrationHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIntegrationHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.IntegrationHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.IntegrationHistoryQuery", q)
}

// The InternalPolicyFunc type is an adapter to allow the use of ordinary function as a Querier.
type InternalPolicyFunc func(context.Context, *generated.InternalPolicyQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f InternalPolicyFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.InternalPolicyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.InternalPolicyQuery", q)
}

// The TraverseInternalPolicy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInternalPolicy func(context.Context, *generated.InternalPolicyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInternalPolicy) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInternalPolicy) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.InternalPolicyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.InternalPolicyQuery", q)
}

// The InternalPolicyHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type InternalPolicyHistoryFunc func(context.Context, *generated.InternalPolicyHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f InternalPolicyHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.InternalPolicyHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.InternalPolicyHistoryQuery", q)
}

// The TraverseInternalPolicyHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInternalPolicyHistory func(context.Context, *generated.InternalPolicyHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInternalPolicyHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInternalPolicyHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.InternalPolicyHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.InternalPolicyHistoryQuery", q)
}

// The InviteFunc type is an adapter to allow the use of ordinary function as a Querier.
type InviteFunc func(context.Context, *generated.InviteQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f InviteFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.InviteQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.InviteQuery", q)
}

// The TraverseInvite type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInvite func(context.Context, *generated.InviteQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInvite) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInvite) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.InviteQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.InviteQuery", q)
}

// The NarrativeFunc type is an adapter to allow the use of ordinary function as a Querier.
type NarrativeFunc func(context.Context, *generated.NarrativeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f NarrativeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.NarrativeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.NarrativeQuery", q)
}

// The TraverseNarrative type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNarrative func(context.Context, *generated.NarrativeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNarrative) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNarrative) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.NarrativeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.NarrativeQuery", q)
}

// The NarrativeHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type NarrativeHistoryFunc func(context.Context, *generated.NarrativeHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f NarrativeHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.NarrativeHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.NarrativeHistoryQuery", q)
}

// The TraverseNarrativeHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNarrativeHistory func(context.Context, *generated.NarrativeHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNarrativeHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNarrativeHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.NarrativeHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.NarrativeHistoryQuery", q)
}

// The NoteFunc type is an adapter to allow the use of ordinary function as a Querier.
type NoteFunc func(context.Context, *generated.NoteQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f NoteFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.NoteQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.NoteQuery", q)
}

// The TraverseNote type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNote func(context.Context, *generated.NoteQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNote) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNote) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.NoteQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.NoteQuery", q)
}

// The NoteHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type NoteHistoryFunc func(context.Context, *generated.NoteHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f NoteHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.NoteHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.NoteHistoryQuery", q)
}

// The TraverseNoteHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNoteHistory func(context.Context, *generated.NoteHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNoteHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNoteHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.NoteHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.NoteHistoryQuery", q)
}

// The OauthProviderFunc type is an adapter to allow the use of ordinary function as a Querier.
type OauthProviderFunc func(context.Context, *generated.OauthProviderQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OauthProviderFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OauthProviderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OauthProviderQuery", q)
}

// The TraverseOauthProvider type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOauthProvider func(context.Context, *generated.OauthProviderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOauthProvider) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOauthProvider) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OauthProviderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OauthProviderQuery", q)
}

// The OauthProviderHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type OauthProviderHistoryFunc func(context.Context, *generated.OauthProviderHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OauthProviderHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OauthProviderHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OauthProviderHistoryQuery", q)
}

// The TraverseOauthProviderHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOauthProviderHistory func(context.Context, *generated.OauthProviderHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOauthProviderHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOauthProviderHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OauthProviderHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OauthProviderHistoryQuery", q)
}

// The OhAuthTooTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type OhAuthTooTokenFunc func(context.Context, *generated.OhAuthTooTokenQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OhAuthTooTokenFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OhAuthTooTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OhAuthTooTokenQuery", q)
}

// The TraverseOhAuthTooToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOhAuthTooToken func(context.Context, *generated.OhAuthTooTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOhAuthTooToken) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOhAuthTooToken) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OhAuthTooTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OhAuthTooTokenQuery", q)
}

// The OrgMembershipFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgMembershipFunc func(context.Context, *generated.OrgMembershipQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OrgMembershipFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OrgMembershipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OrgMembershipQuery", q)
}

// The TraverseOrgMembership type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgMembership func(context.Context, *generated.OrgMembershipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgMembership) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgMembership) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrgMembershipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OrgMembershipQuery", q)
}

// The OrgMembershipHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgMembershipHistoryFunc func(context.Context, *generated.OrgMembershipHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OrgMembershipHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OrgMembershipHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OrgMembershipHistoryQuery", q)
}

// The TraverseOrgMembershipHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgMembershipHistory func(context.Context, *generated.OrgMembershipHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgMembershipHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgMembershipHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrgMembershipHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OrgMembershipHistoryQuery", q)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationFunc func(context.Context, *generated.OrganizationQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OrganizationFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OrganizationQuery", q)
}

// The TraverseOrganization type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganization func(context.Context, *generated.OrganizationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganization) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganization) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OrganizationQuery", q)
}

// The OrganizationHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationHistoryFunc func(context.Context, *generated.OrganizationHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OrganizationHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OrganizationHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OrganizationHistoryQuery", q)
}

// The TraverseOrganizationHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganizationHistory func(context.Context, *generated.OrganizationHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganizationHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganizationHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrganizationHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OrganizationHistoryQuery", q)
}

// The OrganizationSettingFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationSettingFunc func(context.Context, *generated.OrganizationSettingQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OrganizationSettingFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OrganizationSettingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OrganizationSettingQuery", q)
}

// The TraverseOrganizationSetting type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganizationSetting func(context.Context, *generated.OrganizationSettingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganizationSetting) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganizationSetting) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrganizationSettingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OrganizationSettingQuery", q)
}

// The OrganizationSettingHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationSettingHistoryFunc func(context.Context, *generated.OrganizationSettingHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f OrganizationSettingHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.OrganizationSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.OrganizationSettingHistoryQuery", q)
}

// The TraverseOrganizationSettingHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganizationSettingHistory func(context.Context, *generated.OrganizationSettingHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganizationSettingHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganizationSettingHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.OrganizationSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.OrganizationSettingHistoryQuery", q)
}

// The PasswordResetTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type PasswordResetTokenFunc func(context.Context, *generated.PasswordResetTokenQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f PasswordResetTokenFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.PasswordResetTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.PasswordResetTokenQuery", q)
}

// The TraversePasswordResetToken type is an adapter to allow the use of ordinary function as Traverser.
type TraversePasswordResetToken func(context.Context, *generated.PasswordResetTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePasswordResetToken) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePasswordResetToken) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PasswordResetTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.PasswordResetTokenQuery", q)
}

// The PersonalAccessTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type PersonalAccessTokenFunc func(context.Context, *generated.PersonalAccessTokenQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f PersonalAccessTokenFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.PersonalAccessTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.PersonalAccessTokenQuery", q)
}

// The TraversePersonalAccessToken type is an adapter to allow the use of ordinary function as Traverser.
type TraversePersonalAccessToken func(context.Context, *generated.PersonalAccessTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePersonalAccessToken) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePersonalAccessToken) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.PersonalAccessTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.PersonalAccessTokenQuery", q)
}

// The ProcedureFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProcedureFunc func(context.Context, *generated.ProcedureQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ProcedureFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ProcedureQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ProcedureQuery", q)
}

// The TraverseProcedure type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProcedure func(context.Context, *generated.ProcedureQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProcedure) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProcedure) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProcedureQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ProcedureQuery", q)
}

// The ProcedureHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProcedureHistoryFunc func(context.Context, *generated.ProcedureHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ProcedureHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ProcedureHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ProcedureHistoryQuery", q)
}

// The TraverseProcedureHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProcedureHistory func(context.Context, *generated.ProcedureHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProcedureHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProcedureHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProcedureHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ProcedureHistoryQuery", q)
}

// The ProgramFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProgramFunc func(context.Context, *generated.ProgramQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ProgramFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ProgramQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ProgramQuery", q)
}

// The TraverseProgram type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProgram func(context.Context, *generated.ProgramQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProgram) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProgram) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProgramQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ProgramQuery", q)
}

// The ProgramHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProgramHistoryFunc func(context.Context, *generated.ProgramHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ProgramHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ProgramHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ProgramHistoryQuery", q)
}

// The TraverseProgramHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProgramHistory func(context.Context, *generated.ProgramHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProgramHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProgramHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProgramHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ProgramHistoryQuery", q)
}

// The ProgramMembershipFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProgramMembershipFunc func(context.Context, *generated.ProgramMembershipQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ProgramMembershipFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ProgramMembershipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ProgramMembershipQuery", q)
}

// The TraverseProgramMembership type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProgramMembership func(context.Context, *generated.ProgramMembershipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProgramMembership) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProgramMembership) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProgramMembershipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ProgramMembershipQuery", q)
}

// The ProgramMembershipHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProgramMembershipHistoryFunc func(context.Context, *generated.ProgramMembershipHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ProgramMembershipHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ProgramMembershipHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ProgramMembershipHistoryQuery", q)
}

// The TraverseProgramMembershipHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProgramMembershipHistory func(context.Context, *generated.ProgramMembershipHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProgramMembershipHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProgramMembershipHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProgramMembershipHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ProgramMembershipHistoryQuery", q)
}

// The RiskFunc type is an adapter to allow the use of ordinary function as a Querier.
type RiskFunc func(context.Context, *generated.RiskQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f RiskFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.RiskQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.RiskQuery", q)
}

// The TraverseRisk type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRisk func(context.Context, *generated.RiskQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRisk) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRisk) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RiskQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.RiskQuery", q)
}

// The RiskHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type RiskHistoryFunc func(context.Context, *generated.RiskHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f RiskHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.RiskHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.RiskHistoryQuery", q)
}

// The TraverseRiskHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRiskHistory func(context.Context, *generated.RiskHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRiskHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRiskHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.RiskHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.RiskHistoryQuery", q)
}

// The StandardFunc type is an adapter to allow the use of ordinary function as a Querier.
type StandardFunc func(context.Context, *generated.StandardQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f StandardFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.StandardQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.StandardQuery", q)
}

// The TraverseStandard type is an adapter to allow the use of ordinary function as Traverser.
type TraverseStandard func(context.Context, *generated.StandardQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseStandard) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseStandard) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.StandardQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.StandardQuery", q)
}

// The StandardHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type StandardHistoryFunc func(context.Context, *generated.StandardHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f StandardHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.StandardHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.StandardHistoryQuery", q)
}

// The TraverseStandardHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseStandardHistory func(context.Context, *generated.StandardHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseStandardHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseStandardHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.StandardHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.StandardHistoryQuery", q)
}

// The SubcontrolFunc type is an adapter to allow the use of ordinary function as a Querier.
type SubcontrolFunc func(context.Context, *generated.SubcontrolQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f SubcontrolFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.SubcontrolQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.SubcontrolQuery", q)
}

// The TraverseSubcontrol type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSubcontrol func(context.Context, *generated.SubcontrolQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSubcontrol) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSubcontrol) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubcontrolQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.SubcontrolQuery", q)
}

// The SubcontrolHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type SubcontrolHistoryFunc func(context.Context, *generated.SubcontrolHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f SubcontrolHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.SubcontrolHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.SubcontrolHistoryQuery", q)
}

// The TraverseSubcontrolHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSubcontrolHistory func(context.Context, *generated.SubcontrolHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSubcontrolHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSubcontrolHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubcontrolHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.SubcontrolHistoryQuery", q)
}

// The SubscriberFunc type is an adapter to allow the use of ordinary function as a Querier.
type SubscriberFunc func(context.Context, *generated.SubscriberQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f SubscriberFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.SubscriberQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.SubscriberQuery", q)
}

// The TraverseSubscriber type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSubscriber func(context.Context, *generated.SubscriberQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSubscriber) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSubscriber) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.SubscriberQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.SubscriberQuery", q)
}

// The TFASettingFunc type is an adapter to allow the use of ordinary function as a Querier.
type TFASettingFunc func(context.Context, *generated.TFASettingQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f TFASettingFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.TFASettingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.TFASettingQuery", q)
}

// The TraverseTFASetting type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTFASetting func(context.Context, *generated.TFASettingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTFASetting) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTFASetting) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TFASettingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.TFASettingQuery", q)
}

// The TaskFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskFunc func(context.Context, *generated.TaskQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f TaskFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.TaskQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.TaskQuery", q)
}

// The TraverseTask type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTask func(context.Context, *generated.TaskQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTask) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTask) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TaskQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.TaskQuery", q)
}

// The TaskHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskHistoryFunc func(context.Context, *generated.TaskHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f TaskHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.TaskHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.TaskHistoryQuery", q)
}

// The TraverseTaskHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTaskHistory func(context.Context, *generated.TaskHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTaskHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTaskHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TaskHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.TaskHistoryQuery", q)
}

// The TemplateFunc type is an adapter to allow the use of ordinary function as a Querier.
type TemplateFunc func(context.Context, *generated.TemplateQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f TemplateFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.TemplateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.TemplateQuery", q)
}

// The TraverseTemplate type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTemplate func(context.Context, *generated.TemplateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTemplate) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTemplate) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TemplateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.TemplateQuery", q)
}

// The TemplateHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type TemplateHistoryFunc func(context.Context, *generated.TemplateHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f TemplateHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.TemplateHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.TemplateHistoryQuery", q)
}

// The TraverseTemplateHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTemplateHistory func(context.Context, *generated.TemplateHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTemplateHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTemplateHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.TemplateHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.TemplateHistoryQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *generated.UserQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *generated.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.UserQuery", q)
}

// The UserHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserHistoryFunc func(context.Context, *generated.UserHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f UserHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.UserHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.UserHistoryQuery", q)
}

// The TraverseUserHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserHistory func(context.Context, *generated.UserHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.UserHistoryQuery", q)
}

// The UserSettingFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserSettingFunc func(context.Context, *generated.UserSettingQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f UserSettingFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.UserSettingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.UserSettingQuery", q)
}

// The TraverseUserSetting type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserSetting func(context.Context, *generated.UserSettingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserSetting) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserSetting) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserSettingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.UserSettingQuery", q)
}

// The UserSettingHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserSettingHistoryFunc func(context.Context, *generated.UserSettingHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f UserSettingHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.UserSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.UserSettingHistoryQuery", q)
}

// The TraverseUserSettingHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserSettingHistory func(context.Context, *generated.UserSettingHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserSettingHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserSettingHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.UserSettingHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.UserSettingHistoryQuery", q)
}

// The WebauthnFunc type is an adapter to allow the use of ordinary function as a Querier.
type WebauthnFunc func(context.Context, *generated.WebauthnQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f WebauthnFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.WebauthnQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.WebauthnQuery", q)
}

// The TraverseWebauthn type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWebauthn func(context.Context, *generated.WebauthnQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWebauthn) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWebauthn) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.WebauthnQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.WebauthnQuery", q)
}

// The WebhookFunc type is an adapter to allow the use of ordinary function as a Querier.
type WebhookFunc func(context.Context, *generated.WebhookQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f WebhookFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.WebhookQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.WebhookQuery", q)
}

// The TraverseWebhook type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWebhook func(context.Context, *generated.WebhookQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWebhook) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWebhook) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.WebhookQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.WebhookQuery", q)
}

// The WebhookHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type WebhookHistoryFunc func(context.Context, *generated.WebhookHistoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f WebhookHistoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.WebhookHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.WebhookHistoryQuery", q)
}

// The TraverseWebhookHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWebhookHistory func(context.Context, *generated.WebhookHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWebhookHistory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWebhookHistory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.WebhookHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.WebhookHistoryQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q generated.Query) (Query, error) {
	switch q := q.(type) {
	case *generated.APITokenQuery:
		return &query[*generated.APITokenQuery, predicate.APIToken, apitoken.OrderOption]{typ: generated.TypeAPIToken, tq: q}, nil
	case *generated.ActionPlanQuery:
		return &query[*generated.ActionPlanQuery, predicate.ActionPlan, actionplan.OrderOption]{typ: generated.TypeActionPlan, tq: q}, nil
	case *generated.ActionPlanHistoryQuery:
		return &query[*generated.ActionPlanHistoryQuery, predicate.ActionPlanHistory, actionplanhistory.OrderOption]{typ: generated.TypeActionPlanHistory, tq: q}, nil
	case *generated.ContactQuery:
		return &query[*generated.ContactQuery, predicate.Contact, contact.OrderOption]{typ: generated.TypeContact, tq: q}, nil
	case *generated.ContactHistoryQuery:
		return &query[*generated.ContactHistoryQuery, predicate.ContactHistory, contacthistory.OrderOption]{typ: generated.TypeContactHistory, tq: q}, nil
	case *generated.ControlQuery:
		return &query[*generated.ControlQuery, predicate.Control, control.OrderOption]{typ: generated.TypeControl, tq: q}, nil
	case *generated.ControlHistoryQuery:
		return &query[*generated.ControlHistoryQuery, predicate.ControlHistory, controlhistory.OrderOption]{typ: generated.TypeControlHistory, tq: q}, nil
	case *generated.ControlObjectiveQuery:
		return &query[*generated.ControlObjectiveQuery, predicate.ControlObjective, controlobjective.OrderOption]{typ: generated.TypeControlObjective, tq: q}, nil
	case *generated.ControlObjectiveHistoryQuery:
		return &query[*generated.ControlObjectiveHistoryQuery, predicate.ControlObjectiveHistory, controlobjectivehistory.OrderOption]{typ: generated.TypeControlObjectiveHistory, tq: q}, nil
	case *generated.DocumentDataQuery:
		return &query[*generated.DocumentDataQuery, predicate.DocumentData, documentdata.OrderOption]{typ: generated.TypeDocumentData, tq: q}, nil
	case *generated.DocumentDataHistoryQuery:
		return &query[*generated.DocumentDataHistoryQuery, predicate.DocumentDataHistory, documentdatahistory.OrderOption]{typ: generated.TypeDocumentDataHistory, tq: q}, nil
	case *generated.EmailVerificationTokenQuery:
		return &query[*generated.EmailVerificationTokenQuery, predicate.EmailVerificationToken, emailverificationtoken.OrderOption]{typ: generated.TypeEmailVerificationToken, tq: q}, nil
	case *generated.EntitlementQuery:
		return &query[*generated.EntitlementQuery, predicate.Entitlement, entitlement.OrderOption]{typ: generated.TypeEntitlement, tq: q}, nil
	case *generated.EntitlementHistoryQuery:
		return &query[*generated.EntitlementHistoryQuery, predicate.EntitlementHistory, entitlementhistory.OrderOption]{typ: generated.TypeEntitlementHistory, tq: q}, nil
	case *generated.EntitlementPlanQuery:
		return &query[*generated.EntitlementPlanQuery, predicate.EntitlementPlan, entitlementplan.OrderOption]{typ: generated.TypeEntitlementPlan, tq: q}, nil
	case *generated.EntitlementPlanFeatureQuery:
		return &query[*generated.EntitlementPlanFeatureQuery, predicate.EntitlementPlanFeature, entitlementplanfeature.OrderOption]{typ: generated.TypeEntitlementPlanFeature, tq: q}, nil
	case *generated.EntitlementPlanFeatureHistoryQuery:
		return &query[*generated.EntitlementPlanFeatureHistoryQuery, predicate.EntitlementPlanFeatureHistory, entitlementplanfeaturehistory.OrderOption]{typ: generated.TypeEntitlementPlanFeatureHistory, tq: q}, nil
	case *generated.EntitlementPlanHistoryQuery:
		return &query[*generated.EntitlementPlanHistoryQuery, predicate.EntitlementPlanHistory, entitlementplanhistory.OrderOption]{typ: generated.TypeEntitlementPlanHistory, tq: q}, nil
	case *generated.EntityQuery:
		return &query[*generated.EntityQuery, predicate.Entity, entity.OrderOption]{typ: generated.TypeEntity, tq: q}, nil
	case *generated.EntityHistoryQuery:
		return &query[*generated.EntityHistoryQuery, predicate.EntityHistory, entityhistory.OrderOption]{typ: generated.TypeEntityHistory, tq: q}, nil
	case *generated.EntityTypeQuery:
		return &query[*generated.EntityTypeQuery, predicate.EntityType, entitytype.OrderOption]{typ: generated.TypeEntityType, tq: q}, nil
	case *generated.EntityTypeHistoryQuery:
		return &query[*generated.EntityTypeHistoryQuery, predicate.EntityTypeHistory, entitytypehistory.OrderOption]{typ: generated.TypeEntityTypeHistory, tq: q}, nil
	case *generated.EventQuery:
		return &query[*generated.EventQuery, predicate.Event, event.OrderOption]{typ: generated.TypeEvent, tq: q}, nil
	case *generated.EventHistoryQuery:
		return &query[*generated.EventHistoryQuery, predicate.EventHistory, eventhistory.OrderOption]{typ: generated.TypeEventHistory, tq: q}, nil
	case *generated.FeatureQuery:
		return &query[*generated.FeatureQuery, predicate.Feature, feature.OrderOption]{typ: generated.TypeFeature, tq: q}, nil
	case *generated.FeatureHistoryQuery:
		return &query[*generated.FeatureHistoryQuery, predicate.FeatureHistory, featurehistory.OrderOption]{typ: generated.TypeFeatureHistory, tq: q}, nil
	case *generated.FileQuery:
		return &query[*generated.FileQuery, predicate.File, file.OrderOption]{typ: generated.TypeFile, tq: q}, nil
	case *generated.FileHistoryQuery:
		return &query[*generated.FileHistoryQuery, predicate.FileHistory, filehistory.OrderOption]{typ: generated.TypeFileHistory, tq: q}, nil
	case *generated.GroupQuery:
		return &query[*generated.GroupQuery, predicate.Group, group.OrderOption]{typ: generated.TypeGroup, tq: q}, nil
	case *generated.GroupHistoryQuery:
		return &query[*generated.GroupHistoryQuery, predicate.GroupHistory, grouphistory.OrderOption]{typ: generated.TypeGroupHistory, tq: q}, nil
	case *generated.GroupMembershipQuery:
		return &query[*generated.GroupMembershipQuery, predicate.GroupMembership, groupmembership.OrderOption]{typ: generated.TypeGroupMembership, tq: q}, nil
	case *generated.GroupMembershipHistoryQuery:
		return &query[*generated.GroupMembershipHistoryQuery, predicate.GroupMembershipHistory, groupmembershiphistory.OrderOption]{typ: generated.TypeGroupMembershipHistory, tq: q}, nil
	case *generated.GroupSettingQuery:
		return &query[*generated.GroupSettingQuery, predicate.GroupSetting, groupsetting.OrderOption]{typ: generated.TypeGroupSetting, tq: q}, nil
	case *generated.GroupSettingHistoryQuery:
		return &query[*generated.GroupSettingHistoryQuery, predicate.GroupSettingHistory, groupsettinghistory.OrderOption]{typ: generated.TypeGroupSettingHistory, tq: q}, nil
	case *generated.HushQuery:
		return &query[*generated.HushQuery, predicate.Hush, hush.OrderOption]{typ: generated.TypeHush, tq: q}, nil
	case *generated.HushHistoryQuery:
		return &query[*generated.HushHistoryQuery, predicate.HushHistory, hushhistory.OrderOption]{typ: generated.TypeHushHistory, tq: q}, nil
	case *generated.IntegrationQuery:
		return &query[*generated.IntegrationQuery, predicate.Integration, integration.OrderOption]{typ: generated.TypeIntegration, tq: q}, nil
	case *generated.IntegrationHistoryQuery:
		return &query[*generated.IntegrationHistoryQuery, predicate.IntegrationHistory, integrationhistory.OrderOption]{typ: generated.TypeIntegrationHistory, tq: q}, nil
	case *generated.InternalPolicyQuery:
		return &query[*generated.InternalPolicyQuery, predicate.InternalPolicy, internalpolicy.OrderOption]{typ: generated.TypeInternalPolicy, tq: q}, nil
	case *generated.InternalPolicyHistoryQuery:
		return &query[*generated.InternalPolicyHistoryQuery, predicate.InternalPolicyHistory, internalpolicyhistory.OrderOption]{typ: generated.TypeInternalPolicyHistory, tq: q}, nil
	case *generated.InviteQuery:
		return &query[*generated.InviteQuery, predicate.Invite, invite.OrderOption]{typ: generated.TypeInvite, tq: q}, nil
	case *generated.NarrativeQuery:
		return &query[*generated.NarrativeQuery, predicate.Narrative, narrative.OrderOption]{typ: generated.TypeNarrative, tq: q}, nil
	case *generated.NarrativeHistoryQuery:
		return &query[*generated.NarrativeHistoryQuery, predicate.NarrativeHistory, narrativehistory.OrderOption]{typ: generated.TypeNarrativeHistory, tq: q}, nil
	case *generated.NoteQuery:
		return &query[*generated.NoteQuery, predicate.Note, note.OrderOption]{typ: generated.TypeNote, tq: q}, nil
	case *generated.NoteHistoryQuery:
		return &query[*generated.NoteHistoryQuery, predicate.NoteHistory, notehistory.OrderOption]{typ: generated.TypeNoteHistory, tq: q}, nil
	case *generated.OauthProviderQuery:
		return &query[*generated.OauthProviderQuery, predicate.OauthProvider, oauthprovider.OrderOption]{typ: generated.TypeOauthProvider, tq: q}, nil
	case *generated.OauthProviderHistoryQuery:
		return &query[*generated.OauthProviderHistoryQuery, predicate.OauthProviderHistory, oauthproviderhistory.OrderOption]{typ: generated.TypeOauthProviderHistory, tq: q}, nil
	case *generated.OhAuthTooTokenQuery:
		return &query[*generated.OhAuthTooTokenQuery, predicate.OhAuthTooToken, ohauthtootoken.OrderOption]{typ: generated.TypeOhAuthTooToken, tq: q}, nil
	case *generated.OrgMembershipQuery:
		return &query[*generated.OrgMembershipQuery, predicate.OrgMembership, orgmembership.OrderOption]{typ: generated.TypeOrgMembership, tq: q}, nil
	case *generated.OrgMembershipHistoryQuery:
		return &query[*generated.OrgMembershipHistoryQuery, predicate.OrgMembershipHistory, orgmembershiphistory.OrderOption]{typ: generated.TypeOrgMembershipHistory, tq: q}, nil
	case *generated.OrganizationQuery:
		return &query[*generated.OrganizationQuery, predicate.Organization, organization.OrderOption]{typ: generated.TypeOrganization, tq: q}, nil
	case *generated.OrganizationHistoryQuery:
		return &query[*generated.OrganizationHistoryQuery, predicate.OrganizationHistory, organizationhistory.OrderOption]{typ: generated.TypeOrganizationHistory, tq: q}, nil
	case *generated.OrganizationSettingQuery:
		return &query[*generated.OrganizationSettingQuery, predicate.OrganizationSetting, organizationsetting.OrderOption]{typ: generated.TypeOrganizationSetting, tq: q}, nil
	case *generated.OrganizationSettingHistoryQuery:
		return &query[*generated.OrganizationSettingHistoryQuery, predicate.OrganizationSettingHistory, organizationsettinghistory.OrderOption]{typ: generated.TypeOrganizationSettingHistory, tq: q}, nil
	case *generated.PasswordResetTokenQuery:
		return &query[*generated.PasswordResetTokenQuery, predicate.PasswordResetToken, passwordresettoken.OrderOption]{typ: generated.TypePasswordResetToken, tq: q}, nil
	case *generated.PersonalAccessTokenQuery:
		return &query[*generated.PersonalAccessTokenQuery, predicate.PersonalAccessToken, personalaccesstoken.OrderOption]{typ: generated.TypePersonalAccessToken, tq: q}, nil
	case *generated.ProcedureQuery:
		return &query[*generated.ProcedureQuery, predicate.Procedure, procedure.OrderOption]{typ: generated.TypeProcedure, tq: q}, nil
	case *generated.ProcedureHistoryQuery:
		return &query[*generated.ProcedureHistoryQuery, predicate.ProcedureHistory, procedurehistory.OrderOption]{typ: generated.TypeProcedureHistory, tq: q}, nil
	case *generated.ProgramQuery:
		return &query[*generated.ProgramQuery, predicate.Program, program.OrderOption]{typ: generated.TypeProgram, tq: q}, nil
	case *generated.ProgramHistoryQuery:
		return &query[*generated.ProgramHistoryQuery, predicate.ProgramHistory, programhistory.OrderOption]{typ: generated.TypeProgramHistory, tq: q}, nil
	case *generated.ProgramMembershipQuery:
		return &query[*generated.ProgramMembershipQuery, predicate.ProgramMembership, programmembership.OrderOption]{typ: generated.TypeProgramMembership, tq: q}, nil
	case *generated.ProgramMembershipHistoryQuery:
		return &query[*generated.ProgramMembershipHistoryQuery, predicate.ProgramMembershipHistory, programmembershiphistory.OrderOption]{typ: generated.TypeProgramMembershipHistory, tq: q}, nil
	case *generated.RiskQuery:
		return &query[*generated.RiskQuery, predicate.Risk, risk.OrderOption]{typ: generated.TypeRisk, tq: q}, nil
	case *generated.RiskHistoryQuery:
		return &query[*generated.RiskHistoryQuery, predicate.RiskHistory, riskhistory.OrderOption]{typ: generated.TypeRiskHistory, tq: q}, nil
	case *generated.StandardQuery:
		return &query[*generated.StandardQuery, predicate.Standard, standard.OrderOption]{typ: generated.TypeStandard, tq: q}, nil
	case *generated.StandardHistoryQuery:
		return &query[*generated.StandardHistoryQuery, predicate.StandardHistory, standardhistory.OrderOption]{typ: generated.TypeStandardHistory, tq: q}, nil
	case *generated.SubcontrolQuery:
		return &query[*generated.SubcontrolQuery, predicate.Subcontrol, subcontrol.OrderOption]{typ: generated.TypeSubcontrol, tq: q}, nil
	case *generated.SubcontrolHistoryQuery:
		return &query[*generated.SubcontrolHistoryQuery, predicate.SubcontrolHistory, subcontrolhistory.OrderOption]{typ: generated.TypeSubcontrolHistory, tq: q}, nil
	case *generated.SubscriberQuery:
		return &query[*generated.SubscriberQuery, predicate.Subscriber, subscriber.OrderOption]{typ: generated.TypeSubscriber, tq: q}, nil
	case *generated.TFASettingQuery:
		return &query[*generated.TFASettingQuery, predicate.TFASetting, tfasetting.OrderOption]{typ: generated.TypeTFASetting, tq: q}, nil
	case *generated.TaskQuery:
		return &query[*generated.TaskQuery, predicate.Task, task.OrderOption]{typ: generated.TypeTask, tq: q}, nil
	case *generated.TaskHistoryQuery:
		return &query[*generated.TaskHistoryQuery, predicate.TaskHistory, taskhistory.OrderOption]{typ: generated.TypeTaskHistory, tq: q}, nil
	case *generated.TemplateQuery:
		return &query[*generated.TemplateQuery, predicate.Template, template.OrderOption]{typ: generated.TypeTemplate, tq: q}, nil
	case *generated.TemplateHistoryQuery:
		return &query[*generated.TemplateHistoryQuery, predicate.TemplateHistory, templatehistory.OrderOption]{typ: generated.TypeTemplateHistory, tq: q}, nil
	case *generated.UserQuery:
		return &query[*generated.UserQuery, predicate.User, user.OrderOption]{typ: generated.TypeUser, tq: q}, nil
	case *generated.UserHistoryQuery:
		return &query[*generated.UserHistoryQuery, predicate.UserHistory, userhistory.OrderOption]{typ: generated.TypeUserHistory, tq: q}, nil
	case *generated.UserSettingQuery:
		return &query[*generated.UserSettingQuery, predicate.UserSetting, usersetting.OrderOption]{typ: generated.TypeUserSetting, tq: q}, nil
	case *generated.UserSettingHistoryQuery:
		return &query[*generated.UserSettingHistoryQuery, predicate.UserSettingHistory, usersettinghistory.OrderOption]{typ: generated.TypeUserSettingHistory, tq: q}, nil
	case *generated.WebauthnQuery:
		return &query[*generated.WebauthnQuery, predicate.Webauthn, webauthn.OrderOption]{typ: generated.TypeWebauthn, tq: q}, nil
	case *generated.WebhookQuery:
		return &query[*generated.WebhookQuery, predicate.Webhook, webhook.OrderOption]{typ: generated.TypeWebhook, tq: q}, nil
	case *generated.WebhookHistoryQuery:
		return &query[*generated.WebhookHistoryQuery, predicate.WebhookHistory, webhookhistory.OrderOption]{typ: generated.TypeWebhookHistory, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
