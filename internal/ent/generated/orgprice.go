// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/pkg/models"
)

// OrgPrice is the model entity for the OrgPrice schema.
type OrgPrice struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the price details for this subscription product
	Price models.Price `json:"price,omitempty"`
	// the Stripe price ID for this subscription product
	StripePriceID string `json:"stripe_price_id,omitempty"`
	// the status of the subscription product
	Status string `json:"status,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// the ID of the product this price is associated with
	ProductID string `json:"product_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgPriceQuery when eager-loading is set.
	Edges        OrgPriceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrgPriceEdges holds the relations/edges for other nodes in the graph.
type OrgPriceEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// OrgProducts holds the value of the org_products edge.
	OrgProducts []*OrgProduct `json:"org_products,omitempty"`
	// OrgModules holds the value of the org_modules edge.
	OrgModules []*OrgModule `json:"org_modules,omitempty"`
	// OrgSubscription holds the value of the org_subscription edge.
	OrgSubscription *OrgSubscription `json:"org_subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedOrgProducts map[string][]*OrgProduct
	namedOrgModules  map[string][]*OrgModule
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgPriceEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// OrgProductsOrErr returns the OrgProducts value or an error if the edge
// was not loaded in eager-loading.
func (e OrgPriceEdges) OrgProductsOrErr() ([]*OrgProduct, error) {
	if e.loadedTypes[1] {
		return e.OrgProducts, nil
	}
	return nil, &NotLoadedError{edge: "org_products"}
}

// OrgModulesOrErr returns the OrgModules value or an error if the edge
// was not loaded in eager-loading.
func (e OrgPriceEdges) OrgModulesOrErr() ([]*OrgModule, error) {
	if e.loadedTypes[2] {
		return e.OrgModules, nil
	}
	return nil, &NotLoadedError{edge: "org_modules"}
}

// OrgSubscriptionOrErr returns the OrgSubscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgPriceEdges) OrgSubscriptionOrErr() (*OrgSubscription, error) {
	if e.OrgSubscription != nil {
		return e.OrgSubscription, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: orgsubscription.Label}
	}
	return nil, &NotLoadedError{edge: "org_subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgPrice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgprice.FieldTags, orgprice.FieldPrice:
			values[i] = new([]byte)
		case orgprice.FieldActive:
			values[i] = new(sql.NullBool)
		case orgprice.FieldID, orgprice.FieldCreatedBy, orgprice.FieldUpdatedBy, orgprice.FieldDeletedBy, orgprice.FieldOwnerID, orgprice.FieldStripePriceID, orgprice.FieldStatus, orgprice.FieldProductID, orgprice.FieldSubscriptionID:
			values[i] = new(sql.NullString)
		case orgprice.FieldCreatedAt, orgprice.FieldUpdatedAt, orgprice.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgPrice fields.
func (op *OrgPrice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgprice.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				op.ID = value.String
			}
		case orgprice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				op.CreatedAt = value.Time
			}
		case orgprice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				op.UpdatedAt = value.Time
			}
		case orgprice.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				op.CreatedBy = value.String
			}
		case orgprice.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				op.UpdatedBy = value.String
			}
		case orgprice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				op.DeletedAt = value.Time
			}
		case orgprice.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				op.DeletedBy = value.String
			}
		case orgprice.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &op.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case orgprice.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				op.OwnerID = value.String
			}
		case orgprice.FieldPrice:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &op.Price); err != nil {
					return fmt.Errorf("unmarshal field price: %w", err)
				}
			}
		case orgprice.FieldStripePriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_price_id", values[i])
			} else if value.Valid {
				op.StripePriceID = value.String
			}
		case orgprice.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				op.Status = value.String
			}
		case orgprice.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				op.Active = value.Bool
			}
		case orgprice.FieldProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				op.ProductID = value.String
			}
		case orgprice.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				op.SubscriptionID = value.String
			}
		default:
			op.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrgPrice.
// This includes values selected through modifiers, order, etc.
func (op *OrgPrice) Value(name string) (ent.Value, error) {
	return op.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the OrgPrice entity.
func (op *OrgPrice) QueryOwner() *OrganizationQuery {
	return NewOrgPriceClient(op.config).QueryOwner(op)
}

// QueryOrgProducts queries the "org_products" edge of the OrgPrice entity.
func (op *OrgPrice) QueryOrgProducts() *OrgProductQuery {
	return NewOrgPriceClient(op.config).QueryOrgProducts(op)
}

// QueryOrgModules queries the "org_modules" edge of the OrgPrice entity.
func (op *OrgPrice) QueryOrgModules() *OrgModuleQuery {
	return NewOrgPriceClient(op.config).QueryOrgModules(op)
}

// QueryOrgSubscription queries the "org_subscription" edge of the OrgPrice entity.
func (op *OrgPrice) QueryOrgSubscription() *OrgSubscriptionQuery {
	return NewOrgPriceClient(op.config).QueryOrgSubscription(op)
}

// Update returns a builder for updating this OrgPrice.
// Note that you need to call OrgPrice.Unwrap() before calling this method if this OrgPrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (op *OrgPrice) Update() *OrgPriceUpdateOne {
	return NewOrgPriceClient(op.config).UpdateOne(op)
}

// Unwrap unwraps the OrgPrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (op *OrgPrice) Unwrap() *OrgPrice {
	_tx, ok := op.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrgPrice is not a transactional entity")
	}
	op.config.driver = _tx.drv
	return op
}

// String implements the fmt.Stringer.
func (op *OrgPrice) String() string {
	var builder strings.Builder
	builder.WriteString("OrgPrice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", op.ID))
	builder.WriteString("created_at=")
	builder.WriteString(op.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(op.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(op.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(op.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(op.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(op.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", op.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(op.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", op.Price))
	builder.WriteString(", ")
	builder.WriteString("stripe_price_id=")
	builder.WriteString(op.StripePriceID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(op.Status)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", op.Active))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(op.ProductID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(op.SubscriptionID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrgProducts returns the OrgProducts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (op *OrgPrice) NamedOrgProducts(name string) ([]*OrgProduct, error) {
	if op.Edges.namedOrgProducts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := op.Edges.namedOrgProducts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (op *OrgPrice) appendNamedOrgProducts(name string, edges ...*OrgProduct) {
	if op.Edges.namedOrgProducts == nil {
		op.Edges.namedOrgProducts = make(map[string][]*OrgProduct)
	}
	if len(edges) == 0 {
		op.Edges.namedOrgProducts[name] = []*OrgProduct{}
	} else {
		op.Edges.namedOrgProducts[name] = append(op.Edges.namedOrgProducts[name], edges...)
	}
}

// NamedOrgModules returns the OrgModules named value or an error if the edge was not
// loaded in eager-loading with this name.
func (op *OrgPrice) NamedOrgModules(name string) ([]*OrgModule, error) {
	if op.Edges.namedOrgModules == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := op.Edges.namedOrgModules[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (op *OrgPrice) appendNamedOrgModules(name string, edges ...*OrgModule) {
	if op.Edges.namedOrgModules == nil {
		op.Edges.namedOrgModules = make(map[string][]*OrgModule)
	}
	if len(edges) == 0 {
		op.Edges.namedOrgModules[name] = []*OrgModule{}
	} else {
		op.Edges.namedOrgModules[name] = append(op.Edges.namedOrgModules[name], edges...)
	}
}

// OrgPrices is a parsable slice of OrgPrice.
type OrgPrices []*OrgPrice
