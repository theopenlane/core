// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ProcedureHistory is the model entity for the ProcedureHistory schema.
type ProcedureHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
	Revision string `json:"revision,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the procedure
	Name string `json:"name,omitempty"`
	// status of the procedure, e.g. draft, published, archived, etc.
	Status enums.DocumentStatus `json:"status,omitempty"`
	// type of the procedure, e.g. compliance, operational, health and safety, etc.
	ProcedureType string `json:"procedure_type,omitempty"`
	// details of the procedure
	Details string `json:"details,omitempty"`
	// whether approval is required for edits to the procedure
	ApprovalRequired bool `json:"approval_required,omitempty"`
	// the date the procedure should be reviewed, calculated based on the review_frequency if not directly set
	ReviewDue time.Time `json:"review_due,omitempty"`
	// the frequency at which the procedure should be reviewed, used to calculate the review_due date
	ReviewFrequency enums.Frequency `json:"review_frequency,omitempty"`
	// the id of the group responsible for approving the procedure
	ApproverID string `json:"approver_id,omitempty"`
	// the id of the group responsible for approving the procedure
	DelegateID string `json:"delegate_id,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// auto-generated tag suggestions for the procedure
	TagSuggestions []string `json:"tag_suggestions,omitempty"`
	// tag suggestions dismissed by the user for the procedure
	DismissedTagSuggestions []string `json:"dismissed_tag_suggestions,omitempty"`
	// proposed controls referenced in the procedure
	ControlSuggestions []string `json:"control_suggestions,omitempty"`
	// control suggestions dismissed by the user for the procedure
	DismissedControlSuggestions []string `json:"dismissed_control_suggestions,omitempty"`
	// suggested improvements for the procedure
	ImprovementSuggestions []string `json:"improvement_suggestions,omitempty"`
	// improvement suggestions dismissed by the user for the procedure
	DismissedImprovementSuggestions []string `json:"dismissed_improvement_suggestions,omitempty"`
	selectValues                    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcedureHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case procedurehistory.FieldTags, procedurehistory.FieldTagSuggestions, procedurehistory.FieldDismissedTagSuggestions, procedurehistory.FieldControlSuggestions, procedurehistory.FieldDismissedControlSuggestions, procedurehistory.FieldImprovementSuggestions, procedurehistory.FieldDismissedImprovementSuggestions:
			values[i] = new([]byte)
		case procedurehistory.FieldOperation:
			values[i] = new(history.OpType)
		case procedurehistory.FieldApprovalRequired:
			values[i] = new(sql.NullBool)
		case procedurehistory.FieldID, procedurehistory.FieldRef, procedurehistory.FieldCreatedBy, procedurehistory.FieldUpdatedBy, procedurehistory.FieldDeletedBy, procedurehistory.FieldDisplayID, procedurehistory.FieldRevision, procedurehistory.FieldOwnerID, procedurehistory.FieldName, procedurehistory.FieldStatus, procedurehistory.FieldProcedureType, procedurehistory.FieldDetails, procedurehistory.FieldReviewFrequency, procedurehistory.FieldApproverID, procedurehistory.FieldDelegateID, procedurehistory.FieldSummary:
			values[i] = new(sql.NullString)
		case procedurehistory.FieldHistoryTime, procedurehistory.FieldCreatedAt, procedurehistory.FieldUpdatedAt, procedurehistory.FieldDeletedAt, procedurehistory.FieldReviewDue:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcedureHistory fields.
func (_m *ProcedureHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case procedurehistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case procedurehistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				_m.HistoryTime = value.Time
			}
		case procedurehistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				_m.Ref = value.String
			}
		case procedurehistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				_m.Operation = *value
			}
		case procedurehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case procedurehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case procedurehistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case procedurehistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case procedurehistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case procedurehistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case procedurehistory.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				_m.DisplayID = value.String
			}
		case procedurehistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case procedurehistory.FieldRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				_m.Revision = value.String
			}
		case procedurehistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case procedurehistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case procedurehistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = enums.DocumentStatus(value.String)
			}
		case procedurehistory.FieldProcedureType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field procedure_type", values[i])
			} else if value.Valid {
				_m.ProcedureType = value.String
			}
		case procedurehistory.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				_m.Details = value.String
			}
		case procedurehistory.FieldApprovalRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approval_required", values[i])
			} else if value.Valid {
				_m.ApprovalRequired = value.Bool
			}
		case procedurehistory.FieldReviewDue:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field review_due", values[i])
			} else if value.Valid {
				_m.ReviewDue = value.Time
			}
		case procedurehistory.FieldReviewFrequency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_frequency", values[i])
			} else if value.Valid {
				_m.ReviewFrequency = enums.Frequency(value.String)
			}
		case procedurehistory.FieldApproverID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				_m.ApproverID = value.String
			}
		case procedurehistory.FieldDelegateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delegate_id", values[i])
			} else if value.Valid {
				_m.DelegateID = value.String
			}
		case procedurehistory.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				_m.Summary = value.String
			}
		case procedurehistory.FieldTagSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tag_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TagSuggestions); err != nil {
					return fmt.Errorf("unmarshal field tag_suggestions: %w", err)
				}
			}
		case procedurehistory.FieldDismissedTagSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dismissed_tag_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.DismissedTagSuggestions); err != nil {
					return fmt.Errorf("unmarshal field dismissed_tag_suggestions: %w", err)
				}
			}
		case procedurehistory.FieldControlSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field control_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ControlSuggestions); err != nil {
					return fmt.Errorf("unmarshal field control_suggestions: %w", err)
				}
			}
		case procedurehistory.FieldDismissedControlSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dismissed_control_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.DismissedControlSuggestions); err != nil {
					return fmt.Errorf("unmarshal field dismissed_control_suggestions: %w", err)
				}
			}
		case procedurehistory.FieldImprovementSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field improvement_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ImprovementSuggestions); err != nil {
					return fmt.Errorf("unmarshal field improvement_suggestions: %w", err)
				}
			}
		case procedurehistory.FieldDismissedImprovementSuggestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dismissed_improvement_suggestions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.DismissedImprovementSuggestions); err != nil {
					return fmt.Errorf("unmarshal field dismissed_improvement_suggestions: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcedureHistory.
// This includes values selected through modifiers, order, etc.
func (_m *ProcedureHistory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ProcedureHistory.
// Note that you need to call ProcedureHistory.Unwrap() before calling this method if this ProcedureHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ProcedureHistory) Update() *ProcedureHistoryUpdateOne {
	return NewProcedureHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ProcedureHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ProcedureHistory) Unwrap() *ProcedureHistory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProcedureHistory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ProcedureHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ProcedureHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("history_time=")
	builder.WriteString(_m.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(_m.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", _m.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(_m.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(_m.Revision)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("procedure_type=")
	builder.WriteString(_m.ProcedureType)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(_m.Details)
	builder.WriteString(", ")
	builder.WriteString("approval_required=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApprovalRequired))
	builder.WriteString(", ")
	builder.WriteString("review_due=")
	builder.WriteString(_m.ReviewDue.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("review_frequency=")
	builder.WriteString(fmt.Sprintf("%v", _m.ReviewFrequency))
	builder.WriteString(", ")
	builder.WriteString("approver_id=")
	builder.WriteString(_m.ApproverID)
	builder.WriteString(", ")
	builder.WriteString("delegate_id=")
	builder.WriteString(_m.DelegateID)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(_m.Summary)
	builder.WriteString(", ")
	builder.WriteString("tag_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.TagSuggestions))
	builder.WriteString(", ")
	builder.WriteString("dismissed_tag_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.DismissedTagSuggestions))
	builder.WriteString(", ")
	builder.WriteString("control_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.ControlSuggestions))
	builder.WriteString(", ")
	builder.WriteString("dismissed_control_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.DismissedControlSuggestions))
	builder.WriteString(", ")
	builder.WriteString("improvement_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImprovementSuggestions))
	builder.WriteString(", ")
	builder.WriteString("dismissed_improvement_suggestions=")
	builder.WriteString(fmt.Sprintf("%v", _m.DismissedImprovementSuggestions))
	builder.WriteByte(')')
	return builder.String()
}

// ProcedureHistories is a parsable slice of ProcedureHistory.
type ProcedureHistories []*ProcedureHistory
