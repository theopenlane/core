// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlObjectiveUpdate is the builder for updating ControlObjective entities.
type ControlObjectiveUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlObjectiveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlObjectiveUpdate builder.
func (cou *ControlObjectiveUpdate) Where(ps ...predicate.ControlObjective) *ControlObjectiveUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetUpdatedAt sets the "updated_at" field.
func (cou *ControlObjectiveUpdate) SetUpdatedAt(t time.Time) *ControlObjectiveUpdate {
	cou.mutation.SetUpdatedAt(t)
	return cou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cou *ControlObjectiveUpdate) ClearUpdatedAt() *ControlObjectiveUpdate {
	cou.mutation.ClearUpdatedAt()
	return cou
}

// SetUpdatedBy sets the "updated_by" field.
func (cou *ControlObjectiveUpdate) SetUpdatedBy(s string) *ControlObjectiveUpdate {
	cou.mutation.SetUpdatedBy(s)
	return cou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableUpdatedBy(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetUpdatedBy(*s)
	}
	return cou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cou *ControlObjectiveUpdate) ClearUpdatedBy() *ControlObjectiveUpdate {
	cou.mutation.ClearUpdatedBy()
	return cou
}

// SetDeletedAt sets the "deleted_at" field.
func (cou *ControlObjectiveUpdate) SetDeletedAt(t time.Time) *ControlObjectiveUpdate {
	cou.mutation.SetDeletedAt(t)
	return cou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableDeletedAt(t *time.Time) *ControlObjectiveUpdate {
	if t != nil {
		cou.SetDeletedAt(*t)
	}
	return cou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cou *ControlObjectiveUpdate) ClearDeletedAt() *ControlObjectiveUpdate {
	cou.mutation.ClearDeletedAt()
	return cou
}

// SetDeletedBy sets the "deleted_by" field.
func (cou *ControlObjectiveUpdate) SetDeletedBy(s string) *ControlObjectiveUpdate {
	cou.mutation.SetDeletedBy(s)
	return cou
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableDeletedBy(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetDeletedBy(*s)
	}
	return cou
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cou *ControlObjectiveUpdate) ClearDeletedBy() *ControlObjectiveUpdate {
	cou.mutation.ClearDeletedBy()
	return cou
}

// SetTags sets the "tags" field.
func (cou *ControlObjectiveUpdate) SetTags(s []string) *ControlObjectiveUpdate {
	cou.mutation.SetTags(s)
	return cou
}

// AppendTags appends s to the "tags" field.
func (cou *ControlObjectiveUpdate) AppendTags(s []string) *ControlObjectiveUpdate {
	cou.mutation.AppendTags(s)
	return cou
}

// ClearTags clears the value of the "tags" field.
func (cou *ControlObjectiveUpdate) ClearTags() *ControlObjectiveUpdate {
	cou.mutation.ClearTags()
	return cou
}

// SetName sets the "name" field.
func (cou *ControlObjectiveUpdate) SetName(s string) *ControlObjectiveUpdate {
	cou.mutation.SetName(s)
	return cou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableName(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetName(*s)
	}
	return cou
}

// SetDescription sets the "description" field.
func (cou *ControlObjectiveUpdate) SetDescription(s string) *ControlObjectiveUpdate {
	cou.mutation.SetDescription(s)
	return cou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableDescription(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetDescription(*s)
	}
	return cou
}

// ClearDescription clears the value of the "description" field.
func (cou *ControlObjectiveUpdate) ClearDescription() *ControlObjectiveUpdate {
	cou.mutation.ClearDescription()
	return cou
}

// SetStatus sets the "status" field.
func (cou *ControlObjectiveUpdate) SetStatus(s string) *ControlObjectiveUpdate {
	cou.mutation.SetStatus(s)
	return cou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableStatus(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetStatus(*s)
	}
	return cou
}

// ClearStatus clears the value of the "status" field.
func (cou *ControlObjectiveUpdate) ClearStatus() *ControlObjectiveUpdate {
	cou.mutation.ClearStatus()
	return cou
}

// SetControlObjectiveType sets the "control_objective_type" field.
func (cou *ControlObjectiveUpdate) SetControlObjectiveType(s string) *ControlObjectiveUpdate {
	cou.mutation.SetControlObjectiveType(s)
	return cou
}

// SetNillableControlObjectiveType sets the "control_objective_type" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableControlObjectiveType(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetControlObjectiveType(*s)
	}
	return cou
}

// ClearControlObjectiveType clears the value of the "control_objective_type" field.
func (cou *ControlObjectiveUpdate) ClearControlObjectiveType() *ControlObjectiveUpdate {
	cou.mutation.ClearControlObjectiveType()
	return cou
}

// SetVersion sets the "version" field.
func (cou *ControlObjectiveUpdate) SetVersion(s string) *ControlObjectiveUpdate {
	cou.mutation.SetVersion(s)
	return cou
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableVersion(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetVersion(*s)
	}
	return cou
}

// ClearVersion clears the value of the "version" field.
func (cou *ControlObjectiveUpdate) ClearVersion() *ControlObjectiveUpdate {
	cou.mutation.ClearVersion()
	return cou
}

// SetControlNumber sets the "control_number" field.
func (cou *ControlObjectiveUpdate) SetControlNumber(s string) *ControlObjectiveUpdate {
	cou.mutation.SetControlNumber(s)
	return cou
}

// SetNillableControlNumber sets the "control_number" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableControlNumber(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetControlNumber(*s)
	}
	return cou
}

// ClearControlNumber clears the value of the "control_number" field.
func (cou *ControlObjectiveUpdate) ClearControlNumber() *ControlObjectiveUpdate {
	cou.mutation.ClearControlNumber()
	return cou
}

// SetFamily sets the "family" field.
func (cou *ControlObjectiveUpdate) SetFamily(s string) *ControlObjectiveUpdate {
	cou.mutation.SetFamily(s)
	return cou
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableFamily(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetFamily(*s)
	}
	return cou
}

// ClearFamily clears the value of the "family" field.
func (cou *ControlObjectiveUpdate) ClearFamily() *ControlObjectiveUpdate {
	cou.mutation.ClearFamily()
	return cou
}

// SetClass sets the "class" field.
func (cou *ControlObjectiveUpdate) SetClass(s string) *ControlObjectiveUpdate {
	cou.mutation.SetClass(s)
	return cou
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableClass(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetClass(*s)
	}
	return cou
}

// ClearClass clears the value of the "class" field.
func (cou *ControlObjectiveUpdate) ClearClass() *ControlObjectiveUpdate {
	cou.mutation.ClearClass()
	return cou
}

// SetSource sets the "source" field.
func (cou *ControlObjectiveUpdate) SetSource(s string) *ControlObjectiveUpdate {
	cou.mutation.SetSource(s)
	return cou
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableSource(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetSource(*s)
	}
	return cou
}

// ClearSource clears the value of the "source" field.
func (cou *ControlObjectiveUpdate) ClearSource() *ControlObjectiveUpdate {
	cou.mutation.ClearSource()
	return cou
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (cou *ControlObjectiveUpdate) SetMappedFrameworks(s string) *ControlObjectiveUpdate {
	cou.mutation.SetMappedFrameworks(s)
	return cou
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (cou *ControlObjectiveUpdate) SetNillableMappedFrameworks(s *string) *ControlObjectiveUpdate {
	if s != nil {
		cou.SetMappedFrameworks(*s)
	}
	return cou
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (cou *ControlObjectiveUpdate) ClearMappedFrameworks() *ControlObjectiveUpdate {
	cou.mutation.ClearMappedFrameworks()
	return cou
}

// SetDetails sets the "details" field.
func (cou *ControlObjectiveUpdate) SetDetails(m map[string]interface{}) *ControlObjectiveUpdate {
	cou.mutation.SetDetails(m)
	return cou
}

// ClearDetails clears the value of the "details" field.
func (cou *ControlObjectiveUpdate) ClearDetails() *ControlObjectiveUpdate {
	cou.mutation.ClearDetails()
	return cou
}

// AddPolicyIDs adds the "policy" edge to the InternalPolicy entity by IDs.
func (cou *ControlObjectiveUpdate) AddPolicyIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddPolicyIDs(ids...)
	return cou
}

// AddPolicy adds the "policy" edges to the InternalPolicy entity.
func (cou *ControlObjectiveUpdate) AddPolicy(i ...*InternalPolicy) *ControlObjectiveUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cou.AddPolicyIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (cou *ControlObjectiveUpdate) AddControlIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddControlIDs(ids...)
	return cou
}

// AddControls adds the "controls" edges to the Control entity.
func (cou *ControlObjectiveUpdate) AddControls(c ...*Control) *ControlObjectiveUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cou.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (cou *ControlObjectiveUpdate) AddProcedureIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddProcedureIDs(ids...)
	return cou
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (cou *ControlObjectiveUpdate) AddProcedures(p ...*Procedure) *ControlObjectiveUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cou.AddProcedureIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (cou *ControlObjectiveUpdate) AddRiskIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddRiskIDs(ids...)
	return cou
}

// AddRisks adds the "risks" edges to the Risk entity.
func (cou *ControlObjectiveUpdate) AddRisks(r ...*Risk) *ControlObjectiveUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cou.AddRiskIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (cou *ControlObjectiveUpdate) AddSubcontrolIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddSubcontrolIDs(ids...)
	return cou
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (cou *ControlObjectiveUpdate) AddSubcontrols(s ...*Subcontrol) *ControlObjectiveUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cou.AddSubcontrolIDs(ids...)
}

// AddStandardIDs adds the "standard" edge to the Standard entity by IDs.
func (cou *ControlObjectiveUpdate) AddStandardIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddStandardIDs(ids...)
	return cou
}

// AddStandard adds the "standard" edges to the Standard entity.
func (cou *ControlObjectiveUpdate) AddStandard(s ...*Standard) *ControlObjectiveUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cou.AddStandardIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (cou *ControlObjectiveUpdate) AddNarrativeIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddNarrativeIDs(ids...)
	return cou
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (cou *ControlObjectiveUpdate) AddNarratives(n ...*Narrative) *ControlObjectiveUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cou.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (cou *ControlObjectiveUpdate) AddTaskIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddTaskIDs(ids...)
	return cou
}

// AddTasks adds the "tasks" edges to the Task entity.
func (cou *ControlObjectiveUpdate) AddTasks(t ...*Task) *ControlObjectiveUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cou.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (cou *ControlObjectiveUpdate) AddProgramIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.AddProgramIDs(ids...)
	return cou
}

// AddPrograms adds the "programs" edges to the Program entity.
func (cou *ControlObjectiveUpdate) AddPrograms(p ...*Program) *ControlObjectiveUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cou.AddProgramIDs(ids...)
}

// Mutation returns the ControlObjectiveMutation object of the builder.
func (cou *ControlObjectiveUpdate) Mutation() *ControlObjectiveMutation {
	return cou.mutation
}

// ClearPolicy clears all "policy" edges to the InternalPolicy entity.
func (cou *ControlObjectiveUpdate) ClearPolicy() *ControlObjectiveUpdate {
	cou.mutation.ClearPolicy()
	return cou
}

// RemovePolicyIDs removes the "policy" edge to InternalPolicy entities by IDs.
func (cou *ControlObjectiveUpdate) RemovePolicyIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemovePolicyIDs(ids...)
	return cou
}

// RemovePolicy removes "policy" edges to InternalPolicy entities.
func (cou *ControlObjectiveUpdate) RemovePolicy(i ...*InternalPolicy) *ControlObjectiveUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cou.RemovePolicyIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (cou *ControlObjectiveUpdate) ClearControls() *ControlObjectiveUpdate {
	cou.mutation.ClearControls()
	return cou
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (cou *ControlObjectiveUpdate) RemoveControlIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemoveControlIDs(ids...)
	return cou
}

// RemoveControls removes "controls" edges to Control entities.
func (cou *ControlObjectiveUpdate) RemoveControls(c ...*Control) *ControlObjectiveUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cou.RemoveControlIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (cou *ControlObjectiveUpdate) ClearProcedures() *ControlObjectiveUpdate {
	cou.mutation.ClearProcedures()
	return cou
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (cou *ControlObjectiveUpdate) RemoveProcedureIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemoveProcedureIDs(ids...)
	return cou
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (cou *ControlObjectiveUpdate) RemoveProcedures(p ...*Procedure) *ControlObjectiveUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cou.RemoveProcedureIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (cou *ControlObjectiveUpdate) ClearRisks() *ControlObjectiveUpdate {
	cou.mutation.ClearRisks()
	return cou
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (cou *ControlObjectiveUpdate) RemoveRiskIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemoveRiskIDs(ids...)
	return cou
}

// RemoveRisks removes "risks" edges to Risk entities.
func (cou *ControlObjectiveUpdate) RemoveRisks(r ...*Risk) *ControlObjectiveUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cou.RemoveRiskIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (cou *ControlObjectiveUpdate) ClearSubcontrols() *ControlObjectiveUpdate {
	cou.mutation.ClearSubcontrols()
	return cou
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (cou *ControlObjectiveUpdate) RemoveSubcontrolIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemoveSubcontrolIDs(ids...)
	return cou
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (cou *ControlObjectiveUpdate) RemoveSubcontrols(s ...*Subcontrol) *ControlObjectiveUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cou.RemoveSubcontrolIDs(ids...)
}

// ClearStandard clears all "standard" edges to the Standard entity.
func (cou *ControlObjectiveUpdate) ClearStandard() *ControlObjectiveUpdate {
	cou.mutation.ClearStandard()
	return cou
}

// RemoveStandardIDs removes the "standard" edge to Standard entities by IDs.
func (cou *ControlObjectiveUpdate) RemoveStandardIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemoveStandardIDs(ids...)
	return cou
}

// RemoveStandard removes "standard" edges to Standard entities.
func (cou *ControlObjectiveUpdate) RemoveStandard(s ...*Standard) *ControlObjectiveUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cou.RemoveStandardIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (cou *ControlObjectiveUpdate) ClearNarratives() *ControlObjectiveUpdate {
	cou.mutation.ClearNarratives()
	return cou
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (cou *ControlObjectiveUpdate) RemoveNarrativeIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemoveNarrativeIDs(ids...)
	return cou
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (cou *ControlObjectiveUpdate) RemoveNarratives(n ...*Narrative) *ControlObjectiveUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cou.RemoveNarrativeIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (cou *ControlObjectiveUpdate) ClearTasks() *ControlObjectiveUpdate {
	cou.mutation.ClearTasks()
	return cou
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (cou *ControlObjectiveUpdate) RemoveTaskIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemoveTaskIDs(ids...)
	return cou
}

// RemoveTasks removes "tasks" edges to Task entities.
func (cou *ControlObjectiveUpdate) RemoveTasks(t ...*Task) *ControlObjectiveUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cou.RemoveTaskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (cou *ControlObjectiveUpdate) ClearPrograms() *ControlObjectiveUpdate {
	cou.mutation.ClearPrograms()
	return cou
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (cou *ControlObjectiveUpdate) RemoveProgramIDs(ids ...string) *ControlObjectiveUpdate {
	cou.mutation.RemoveProgramIDs(ids...)
	return cou
}

// RemovePrograms removes "programs" edges to Program entities.
func (cou *ControlObjectiveUpdate) RemovePrograms(p ...*Program) *ControlObjectiveUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cou.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *ControlObjectiveUpdate) Save(ctx context.Context) (int, error) {
	if err := cou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cou.sqlSave, cou.mutation, cou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cou *ControlObjectiveUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *ControlObjectiveUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *ControlObjectiveUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cou *ControlObjectiveUpdate) defaults() error {
	if _, ok := cou.mutation.UpdatedAt(); !ok && !cou.mutation.UpdatedAtCleared() {
		if controlobjective.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlobjective.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlobjective.UpdateDefaultUpdatedAt()
		cou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cou *ControlObjectiveUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlObjectiveUpdate {
	cou.modifiers = append(cou.modifiers, modifiers...)
	return cou
}

func (cou *ControlObjectiveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(controlobjective.Table, controlobjective.Columns, sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString))
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cou.mutation.CreatedAtCleared() {
		_spec.ClearField(controlobjective.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cou.mutation.UpdatedAt(); ok {
		_spec.SetField(controlobjective.FieldUpdatedAt, field.TypeTime, value)
	}
	if cou.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlobjective.FieldUpdatedAt, field.TypeTime)
	}
	if cou.mutation.CreatedByCleared() {
		_spec.ClearField(controlobjective.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cou.mutation.UpdatedBy(); ok {
		_spec.SetField(controlobjective.FieldUpdatedBy, field.TypeString, value)
	}
	if cou.mutation.UpdatedByCleared() {
		_spec.ClearField(controlobjective.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cou.mutation.DeletedAt(); ok {
		_spec.SetField(controlobjective.FieldDeletedAt, field.TypeTime, value)
	}
	if cou.mutation.DeletedAtCleared() {
		_spec.ClearField(controlobjective.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cou.mutation.DeletedBy(); ok {
		_spec.SetField(controlobjective.FieldDeletedBy, field.TypeString, value)
	}
	if cou.mutation.DeletedByCleared() {
		_spec.ClearField(controlobjective.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cou.mutation.Tags(); ok {
		_spec.SetField(controlobjective.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cou.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlobjective.FieldTags, value)
		})
	}
	if cou.mutation.TagsCleared() {
		_spec.ClearField(controlobjective.FieldTags, field.TypeJSON)
	}
	if value, ok := cou.mutation.Name(); ok {
		_spec.SetField(controlobjective.FieldName, field.TypeString, value)
	}
	if value, ok := cou.mutation.Description(); ok {
		_spec.SetField(controlobjective.FieldDescription, field.TypeString, value)
	}
	if cou.mutation.DescriptionCleared() {
		_spec.ClearField(controlobjective.FieldDescription, field.TypeString)
	}
	if value, ok := cou.mutation.Status(); ok {
		_spec.SetField(controlobjective.FieldStatus, field.TypeString, value)
	}
	if cou.mutation.StatusCleared() {
		_spec.ClearField(controlobjective.FieldStatus, field.TypeString)
	}
	if value, ok := cou.mutation.ControlObjectiveType(); ok {
		_spec.SetField(controlobjective.FieldControlObjectiveType, field.TypeString, value)
	}
	if cou.mutation.ControlObjectiveTypeCleared() {
		_spec.ClearField(controlobjective.FieldControlObjectiveType, field.TypeString)
	}
	if value, ok := cou.mutation.Version(); ok {
		_spec.SetField(controlobjective.FieldVersion, field.TypeString, value)
	}
	if cou.mutation.VersionCleared() {
		_spec.ClearField(controlobjective.FieldVersion, field.TypeString)
	}
	if value, ok := cou.mutation.ControlNumber(); ok {
		_spec.SetField(controlobjective.FieldControlNumber, field.TypeString, value)
	}
	if cou.mutation.ControlNumberCleared() {
		_spec.ClearField(controlobjective.FieldControlNumber, field.TypeString)
	}
	if value, ok := cou.mutation.Family(); ok {
		_spec.SetField(controlobjective.FieldFamily, field.TypeString, value)
	}
	if cou.mutation.FamilyCleared() {
		_spec.ClearField(controlobjective.FieldFamily, field.TypeString)
	}
	if value, ok := cou.mutation.Class(); ok {
		_spec.SetField(controlobjective.FieldClass, field.TypeString, value)
	}
	if cou.mutation.ClassCleared() {
		_spec.ClearField(controlobjective.FieldClass, field.TypeString)
	}
	if value, ok := cou.mutation.Source(); ok {
		_spec.SetField(controlobjective.FieldSource, field.TypeString, value)
	}
	if cou.mutation.SourceCleared() {
		_spec.ClearField(controlobjective.FieldSource, field.TypeString)
	}
	if value, ok := cou.mutation.MappedFrameworks(); ok {
		_spec.SetField(controlobjective.FieldMappedFrameworks, field.TypeString, value)
	}
	if cou.mutation.MappedFrameworksCleared() {
		_spec.ClearField(controlobjective.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := cou.mutation.Details(); ok {
		_spec.SetField(controlobjective.FieldDetails, field.TypeJSON, value)
	}
	if cou.mutation.DetailsCleared() {
		_spec.ClearField(controlobjective.FieldDetails, field.TypeJSON)
	}
	if cou.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.PolicyTable,
			Columns: controlobjective.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.InternalPolicyControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedPolicyIDs(); len(nodes) > 0 && !cou.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.PolicyTable,
			Columns: controlobjective.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.PolicyTable,
			Columns: controlobjective.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ControlsTable,
			Columns: []string{controlobjective.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedControlsIDs(); len(nodes) > 0 && !cou.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ControlsTable,
			Columns: []string{controlobjective.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ControlsTable,
			Columns: []string{controlobjective.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ProceduresTable,
			Columns: []string{controlobjective.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !cou.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ProceduresTable,
			Columns: []string{controlobjective.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ProceduresTable,
			Columns: []string{controlobjective.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.RisksTable,
			Columns: []string{controlobjective.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedRisksIDs(); len(nodes) > 0 && !cou.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.RisksTable,
			Columns: []string{controlobjective.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.RisksTable,
			Columns: []string{controlobjective.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.SubcontrolsTable,
			Columns: []string{controlobjective.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !cou.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.SubcontrolsTable,
			Columns: []string{controlobjective.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.SubcontrolsTable,
			Columns: []string{controlobjective.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.StandardTable,
			Columns: controlobjective.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.StandardControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedStandardIDs(); len(nodes) > 0 && !cou.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.StandardTable,
			Columns: controlobjective.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.StandardControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.StandardTable,
			Columns: controlobjective.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.StandardControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.NarrativesTable,
			Columns: controlobjective.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ControlObjectiveNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !cou.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.NarrativesTable,
			Columns: controlobjective.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.NarrativesTable,
			Columns: controlobjective.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.TasksTable,
			Columns: controlobjective.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ControlObjectiveTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedTasksIDs(); len(nodes) > 0 && !cou.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.TasksTable,
			Columns: controlobjective.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.TasksTable,
			Columns: controlobjective.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ProgramsTable,
			Columns: controlobjective.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ProgramControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !cou.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ProgramsTable,
			Columns: controlobjective.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ProgramsTable,
			Columns: controlobjective.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = cou.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cou.schemaConfig.ControlObjective
	ctx = internal.NewSchemaConfigContext(ctx, cou.schemaConfig)
	_spec.AddModifiers(cou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlobjective.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cou.mutation.done = true
	return n, nil
}

// ControlObjectiveUpdateOne is the builder for updating a single ControlObjective entity.
type ControlObjectiveUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlObjectiveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (couo *ControlObjectiveUpdateOne) SetUpdatedAt(t time.Time) *ControlObjectiveUpdateOne {
	couo.mutation.SetUpdatedAt(t)
	return couo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (couo *ControlObjectiveUpdateOne) ClearUpdatedAt() *ControlObjectiveUpdateOne {
	couo.mutation.ClearUpdatedAt()
	return couo
}

// SetUpdatedBy sets the "updated_by" field.
func (couo *ControlObjectiveUpdateOne) SetUpdatedBy(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetUpdatedBy(s)
	return couo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableUpdatedBy(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetUpdatedBy(*s)
	}
	return couo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (couo *ControlObjectiveUpdateOne) ClearUpdatedBy() *ControlObjectiveUpdateOne {
	couo.mutation.ClearUpdatedBy()
	return couo
}

// SetDeletedAt sets the "deleted_at" field.
func (couo *ControlObjectiveUpdateOne) SetDeletedAt(t time.Time) *ControlObjectiveUpdateOne {
	couo.mutation.SetDeletedAt(t)
	return couo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableDeletedAt(t *time.Time) *ControlObjectiveUpdateOne {
	if t != nil {
		couo.SetDeletedAt(*t)
	}
	return couo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (couo *ControlObjectiveUpdateOne) ClearDeletedAt() *ControlObjectiveUpdateOne {
	couo.mutation.ClearDeletedAt()
	return couo
}

// SetDeletedBy sets the "deleted_by" field.
func (couo *ControlObjectiveUpdateOne) SetDeletedBy(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetDeletedBy(s)
	return couo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableDeletedBy(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetDeletedBy(*s)
	}
	return couo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (couo *ControlObjectiveUpdateOne) ClearDeletedBy() *ControlObjectiveUpdateOne {
	couo.mutation.ClearDeletedBy()
	return couo
}

// SetTags sets the "tags" field.
func (couo *ControlObjectiveUpdateOne) SetTags(s []string) *ControlObjectiveUpdateOne {
	couo.mutation.SetTags(s)
	return couo
}

// AppendTags appends s to the "tags" field.
func (couo *ControlObjectiveUpdateOne) AppendTags(s []string) *ControlObjectiveUpdateOne {
	couo.mutation.AppendTags(s)
	return couo
}

// ClearTags clears the value of the "tags" field.
func (couo *ControlObjectiveUpdateOne) ClearTags() *ControlObjectiveUpdateOne {
	couo.mutation.ClearTags()
	return couo
}

// SetName sets the "name" field.
func (couo *ControlObjectiveUpdateOne) SetName(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetName(s)
	return couo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableName(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetName(*s)
	}
	return couo
}

// SetDescription sets the "description" field.
func (couo *ControlObjectiveUpdateOne) SetDescription(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetDescription(s)
	return couo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableDescription(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetDescription(*s)
	}
	return couo
}

// ClearDescription clears the value of the "description" field.
func (couo *ControlObjectiveUpdateOne) ClearDescription() *ControlObjectiveUpdateOne {
	couo.mutation.ClearDescription()
	return couo
}

// SetStatus sets the "status" field.
func (couo *ControlObjectiveUpdateOne) SetStatus(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetStatus(s)
	return couo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableStatus(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetStatus(*s)
	}
	return couo
}

// ClearStatus clears the value of the "status" field.
func (couo *ControlObjectiveUpdateOne) ClearStatus() *ControlObjectiveUpdateOne {
	couo.mutation.ClearStatus()
	return couo
}

// SetControlObjectiveType sets the "control_objective_type" field.
func (couo *ControlObjectiveUpdateOne) SetControlObjectiveType(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetControlObjectiveType(s)
	return couo
}

// SetNillableControlObjectiveType sets the "control_objective_type" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableControlObjectiveType(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetControlObjectiveType(*s)
	}
	return couo
}

// ClearControlObjectiveType clears the value of the "control_objective_type" field.
func (couo *ControlObjectiveUpdateOne) ClearControlObjectiveType() *ControlObjectiveUpdateOne {
	couo.mutation.ClearControlObjectiveType()
	return couo
}

// SetVersion sets the "version" field.
func (couo *ControlObjectiveUpdateOne) SetVersion(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetVersion(s)
	return couo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableVersion(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetVersion(*s)
	}
	return couo
}

// ClearVersion clears the value of the "version" field.
func (couo *ControlObjectiveUpdateOne) ClearVersion() *ControlObjectiveUpdateOne {
	couo.mutation.ClearVersion()
	return couo
}

// SetControlNumber sets the "control_number" field.
func (couo *ControlObjectiveUpdateOne) SetControlNumber(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetControlNumber(s)
	return couo
}

// SetNillableControlNumber sets the "control_number" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableControlNumber(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetControlNumber(*s)
	}
	return couo
}

// ClearControlNumber clears the value of the "control_number" field.
func (couo *ControlObjectiveUpdateOne) ClearControlNumber() *ControlObjectiveUpdateOne {
	couo.mutation.ClearControlNumber()
	return couo
}

// SetFamily sets the "family" field.
func (couo *ControlObjectiveUpdateOne) SetFamily(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetFamily(s)
	return couo
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableFamily(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetFamily(*s)
	}
	return couo
}

// ClearFamily clears the value of the "family" field.
func (couo *ControlObjectiveUpdateOne) ClearFamily() *ControlObjectiveUpdateOne {
	couo.mutation.ClearFamily()
	return couo
}

// SetClass sets the "class" field.
func (couo *ControlObjectiveUpdateOne) SetClass(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetClass(s)
	return couo
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableClass(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetClass(*s)
	}
	return couo
}

// ClearClass clears the value of the "class" field.
func (couo *ControlObjectiveUpdateOne) ClearClass() *ControlObjectiveUpdateOne {
	couo.mutation.ClearClass()
	return couo
}

// SetSource sets the "source" field.
func (couo *ControlObjectiveUpdateOne) SetSource(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetSource(s)
	return couo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableSource(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetSource(*s)
	}
	return couo
}

// ClearSource clears the value of the "source" field.
func (couo *ControlObjectiveUpdateOne) ClearSource() *ControlObjectiveUpdateOne {
	couo.mutation.ClearSource()
	return couo
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (couo *ControlObjectiveUpdateOne) SetMappedFrameworks(s string) *ControlObjectiveUpdateOne {
	couo.mutation.SetMappedFrameworks(s)
	return couo
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (couo *ControlObjectiveUpdateOne) SetNillableMappedFrameworks(s *string) *ControlObjectiveUpdateOne {
	if s != nil {
		couo.SetMappedFrameworks(*s)
	}
	return couo
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (couo *ControlObjectiveUpdateOne) ClearMappedFrameworks() *ControlObjectiveUpdateOne {
	couo.mutation.ClearMappedFrameworks()
	return couo
}

// SetDetails sets the "details" field.
func (couo *ControlObjectiveUpdateOne) SetDetails(m map[string]interface{}) *ControlObjectiveUpdateOne {
	couo.mutation.SetDetails(m)
	return couo
}

// ClearDetails clears the value of the "details" field.
func (couo *ControlObjectiveUpdateOne) ClearDetails() *ControlObjectiveUpdateOne {
	couo.mutation.ClearDetails()
	return couo
}

// AddPolicyIDs adds the "policy" edge to the InternalPolicy entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddPolicyIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddPolicyIDs(ids...)
	return couo
}

// AddPolicy adds the "policy" edges to the InternalPolicy entity.
func (couo *ControlObjectiveUpdateOne) AddPolicy(i ...*InternalPolicy) *ControlObjectiveUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return couo.AddPolicyIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddControlIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddControlIDs(ids...)
	return couo
}

// AddControls adds the "controls" edges to the Control entity.
func (couo *ControlObjectiveUpdateOne) AddControls(c ...*Control) *ControlObjectiveUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return couo.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddProcedureIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddProcedureIDs(ids...)
	return couo
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (couo *ControlObjectiveUpdateOne) AddProcedures(p ...*Procedure) *ControlObjectiveUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return couo.AddProcedureIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddRiskIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddRiskIDs(ids...)
	return couo
}

// AddRisks adds the "risks" edges to the Risk entity.
func (couo *ControlObjectiveUpdateOne) AddRisks(r ...*Risk) *ControlObjectiveUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return couo.AddRiskIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddSubcontrolIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddSubcontrolIDs(ids...)
	return couo
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (couo *ControlObjectiveUpdateOne) AddSubcontrols(s ...*Subcontrol) *ControlObjectiveUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return couo.AddSubcontrolIDs(ids...)
}

// AddStandardIDs adds the "standard" edge to the Standard entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddStandardIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddStandardIDs(ids...)
	return couo
}

// AddStandard adds the "standard" edges to the Standard entity.
func (couo *ControlObjectiveUpdateOne) AddStandard(s ...*Standard) *ControlObjectiveUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return couo.AddStandardIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddNarrativeIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddNarrativeIDs(ids...)
	return couo
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (couo *ControlObjectiveUpdateOne) AddNarratives(n ...*Narrative) *ControlObjectiveUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return couo.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddTaskIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddTaskIDs(ids...)
	return couo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (couo *ControlObjectiveUpdateOne) AddTasks(t ...*Task) *ControlObjectiveUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return couo.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (couo *ControlObjectiveUpdateOne) AddProgramIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.AddProgramIDs(ids...)
	return couo
}

// AddPrograms adds the "programs" edges to the Program entity.
func (couo *ControlObjectiveUpdateOne) AddPrograms(p ...*Program) *ControlObjectiveUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return couo.AddProgramIDs(ids...)
}

// Mutation returns the ControlObjectiveMutation object of the builder.
func (couo *ControlObjectiveUpdateOne) Mutation() *ControlObjectiveMutation {
	return couo.mutation
}

// ClearPolicy clears all "policy" edges to the InternalPolicy entity.
func (couo *ControlObjectiveUpdateOne) ClearPolicy() *ControlObjectiveUpdateOne {
	couo.mutation.ClearPolicy()
	return couo
}

// RemovePolicyIDs removes the "policy" edge to InternalPolicy entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemovePolicyIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemovePolicyIDs(ids...)
	return couo
}

// RemovePolicy removes "policy" edges to InternalPolicy entities.
func (couo *ControlObjectiveUpdateOne) RemovePolicy(i ...*InternalPolicy) *ControlObjectiveUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return couo.RemovePolicyIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (couo *ControlObjectiveUpdateOne) ClearControls() *ControlObjectiveUpdateOne {
	couo.mutation.ClearControls()
	return couo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemoveControlIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemoveControlIDs(ids...)
	return couo
}

// RemoveControls removes "controls" edges to Control entities.
func (couo *ControlObjectiveUpdateOne) RemoveControls(c ...*Control) *ControlObjectiveUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return couo.RemoveControlIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (couo *ControlObjectiveUpdateOne) ClearProcedures() *ControlObjectiveUpdateOne {
	couo.mutation.ClearProcedures()
	return couo
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemoveProcedureIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemoveProcedureIDs(ids...)
	return couo
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (couo *ControlObjectiveUpdateOne) RemoveProcedures(p ...*Procedure) *ControlObjectiveUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return couo.RemoveProcedureIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (couo *ControlObjectiveUpdateOne) ClearRisks() *ControlObjectiveUpdateOne {
	couo.mutation.ClearRisks()
	return couo
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemoveRiskIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemoveRiskIDs(ids...)
	return couo
}

// RemoveRisks removes "risks" edges to Risk entities.
func (couo *ControlObjectiveUpdateOne) RemoveRisks(r ...*Risk) *ControlObjectiveUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return couo.RemoveRiskIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (couo *ControlObjectiveUpdateOne) ClearSubcontrols() *ControlObjectiveUpdateOne {
	couo.mutation.ClearSubcontrols()
	return couo
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemoveSubcontrolIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemoveSubcontrolIDs(ids...)
	return couo
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (couo *ControlObjectiveUpdateOne) RemoveSubcontrols(s ...*Subcontrol) *ControlObjectiveUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return couo.RemoveSubcontrolIDs(ids...)
}

// ClearStandard clears all "standard" edges to the Standard entity.
func (couo *ControlObjectiveUpdateOne) ClearStandard() *ControlObjectiveUpdateOne {
	couo.mutation.ClearStandard()
	return couo
}

// RemoveStandardIDs removes the "standard" edge to Standard entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemoveStandardIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemoveStandardIDs(ids...)
	return couo
}

// RemoveStandard removes "standard" edges to Standard entities.
func (couo *ControlObjectiveUpdateOne) RemoveStandard(s ...*Standard) *ControlObjectiveUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return couo.RemoveStandardIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (couo *ControlObjectiveUpdateOne) ClearNarratives() *ControlObjectiveUpdateOne {
	couo.mutation.ClearNarratives()
	return couo
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemoveNarrativeIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemoveNarrativeIDs(ids...)
	return couo
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (couo *ControlObjectiveUpdateOne) RemoveNarratives(n ...*Narrative) *ControlObjectiveUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return couo.RemoveNarrativeIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (couo *ControlObjectiveUpdateOne) ClearTasks() *ControlObjectiveUpdateOne {
	couo.mutation.ClearTasks()
	return couo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemoveTaskIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemoveTaskIDs(ids...)
	return couo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (couo *ControlObjectiveUpdateOne) RemoveTasks(t ...*Task) *ControlObjectiveUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return couo.RemoveTaskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (couo *ControlObjectiveUpdateOne) ClearPrograms() *ControlObjectiveUpdateOne {
	couo.mutation.ClearPrograms()
	return couo
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (couo *ControlObjectiveUpdateOne) RemoveProgramIDs(ids ...string) *ControlObjectiveUpdateOne {
	couo.mutation.RemoveProgramIDs(ids...)
	return couo
}

// RemovePrograms removes "programs" edges to Program entities.
func (couo *ControlObjectiveUpdateOne) RemovePrograms(p ...*Program) *ControlObjectiveUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return couo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the ControlObjectiveUpdate builder.
func (couo *ControlObjectiveUpdateOne) Where(ps ...predicate.ControlObjective) *ControlObjectiveUpdateOne {
	couo.mutation.Where(ps...)
	return couo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *ControlObjectiveUpdateOne) Select(field string, fields ...string) *ControlObjectiveUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated ControlObjective entity.
func (couo *ControlObjectiveUpdateOne) Save(ctx context.Context) (*ControlObjective, error) {
	if err := couo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, couo.sqlSave, couo.mutation, couo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (couo *ControlObjectiveUpdateOne) SaveX(ctx context.Context) *ControlObjective {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *ControlObjectiveUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *ControlObjectiveUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (couo *ControlObjectiveUpdateOne) defaults() error {
	if _, ok := couo.mutation.UpdatedAt(); !ok && !couo.mutation.UpdatedAtCleared() {
		if controlobjective.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlobjective.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlobjective.UpdateDefaultUpdatedAt()
		couo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (couo *ControlObjectiveUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlObjectiveUpdateOne {
	couo.modifiers = append(couo.modifiers, modifiers...)
	return couo
}

func (couo *ControlObjectiveUpdateOne) sqlSave(ctx context.Context) (_node *ControlObjective, err error) {
	_spec := sqlgraph.NewUpdateSpec(controlobjective.Table, controlobjective.Columns, sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString))
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ControlObjective.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlobjective.FieldID)
		for _, f := range fields {
			if !controlobjective.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != controlobjective.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if couo.mutation.CreatedAtCleared() {
		_spec.ClearField(controlobjective.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := couo.mutation.UpdatedAt(); ok {
		_spec.SetField(controlobjective.FieldUpdatedAt, field.TypeTime, value)
	}
	if couo.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlobjective.FieldUpdatedAt, field.TypeTime)
	}
	if couo.mutation.CreatedByCleared() {
		_spec.ClearField(controlobjective.FieldCreatedBy, field.TypeString)
	}
	if value, ok := couo.mutation.UpdatedBy(); ok {
		_spec.SetField(controlobjective.FieldUpdatedBy, field.TypeString, value)
	}
	if couo.mutation.UpdatedByCleared() {
		_spec.ClearField(controlobjective.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := couo.mutation.DeletedAt(); ok {
		_spec.SetField(controlobjective.FieldDeletedAt, field.TypeTime, value)
	}
	if couo.mutation.DeletedAtCleared() {
		_spec.ClearField(controlobjective.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := couo.mutation.DeletedBy(); ok {
		_spec.SetField(controlobjective.FieldDeletedBy, field.TypeString, value)
	}
	if couo.mutation.DeletedByCleared() {
		_spec.ClearField(controlobjective.FieldDeletedBy, field.TypeString)
	}
	if value, ok := couo.mutation.Tags(); ok {
		_spec.SetField(controlobjective.FieldTags, field.TypeJSON, value)
	}
	if value, ok := couo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlobjective.FieldTags, value)
		})
	}
	if couo.mutation.TagsCleared() {
		_spec.ClearField(controlobjective.FieldTags, field.TypeJSON)
	}
	if value, ok := couo.mutation.Name(); ok {
		_spec.SetField(controlobjective.FieldName, field.TypeString, value)
	}
	if value, ok := couo.mutation.Description(); ok {
		_spec.SetField(controlobjective.FieldDescription, field.TypeString, value)
	}
	if couo.mutation.DescriptionCleared() {
		_spec.ClearField(controlobjective.FieldDescription, field.TypeString)
	}
	if value, ok := couo.mutation.Status(); ok {
		_spec.SetField(controlobjective.FieldStatus, field.TypeString, value)
	}
	if couo.mutation.StatusCleared() {
		_spec.ClearField(controlobjective.FieldStatus, field.TypeString)
	}
	if value, ok := couo.mutation.ControlObjectiveType(); ok {
		_spec.SetField(controlobjective.FieldControlObjectiveType, field.TypeString, value)
	}
	if couo.mutation.ControlObjectiveTypeCleared() {
		_spec.ClearField(controlobjective.FieldControlObjectiveType, field.TypeString)
	}
	if value, ok := couo.mutation.Version(); ok {
		_spec.SetField(controlobjective.FieldVersion, field.TypeString, value)
	}
	if couo.mutation.VersionCleared() {
		_spec.ClearField(controlobjective.FieldVersion, field.TypeString)
	}
	if value, ok := couo.mutation.ControlNumber(); ok {
		_spec.SetField(controlobjective.FieldControlNumber, field.TypeString, value)
	}
	if couo.mutation.ControlNumberCleared() {
		_spec.ClearField(controlobjective.FieldControlNumber, field.TypeString)
	}
	if value, ok := couo.mutation.Family(); ok {
		_spec.SetField(controlobjective.FieldFamily, field.TypeString, value)
	}
	if couo.mutation.FamilyCleared() {
		_spec.ClearField(controlobjective.FieldFamily, field.TypeString)
	}
	if value, ok := couo.mutation.Class(); ok {
		_spec.SetField(controlobjective.FieldClass, field.TypeString, value)
	}
	if couo.mutation.ClassCleared() {
		_spec.ClearField(controlobjective.FieldClass, field.TypeString)
	}
	if value, ok := couo.mutation.Source(); ok {
		_spec.SetField(controlobjective.FieldSource, field.TypeString, value)
	}
	if couo.mutation.SourceCleared() {
		_spec.ClearField(controlobjective.FieldSource, field.TypeString)
	}
	if value, ok := couo.mutation.MappedFrameworks(); ok {
		_spec.SetField(controlobjective.FieldMappedFrameworks, field.TypeString, value)
	}
	if couo.mutation.MappedFrameworksCleared() {
		_spec.ClearField(controlobjective.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := couo.mutation.Details(); ok {
		_spec.SetField(controlobjective.FieldDetails, field.TypeJSON, value)
	}
	if couo.mutation.DetailsCleared() {
		_spec.ClearField(controlobjective.FieldDetails, field.TypeJSON)
	}
	if couo.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.PolicyTable,
			Columns: controlobjective.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.InternalPolicyControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedPolicyIDs(); len(nodes) > 0 && !couo.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.PolicyTable,
			Columns: controlobjective.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.PolicyTable,
			Columns: controlobjective.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ControlsTable,
			Columns: []string{controlobjective.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !couo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ControlsTable,
			Columns: []string{controlobjective.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ControlsTable,
			Columns: []string{controlobjective.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ProceduresTable,
			Columns: []string{controlobjective.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !couo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ProceduresTable,
			Columns: []string{controlobjective.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.ProceduresTable,
			Columns: []string{controlobjective.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.RisksTable,
			Columns: []string{controlobjective.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedRisksIDs(); len(nodes) > 0 && !couo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.RisksTable,
			Columns: []string{controlobjective.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.RisksTable,
			Columns: []string{controlobjective.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.SubcontrolsTable,
			Columns: []string{controlobjective.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !couo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.SubcontrolsTable,
			Columns: []string{controlobjective.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   controlobjective.SubcontrolsTable,
			Columns: []string{controlobjective.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.StandardTable,
			Columns: controlobjective.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.StandardControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedStandardIDs(); len(nodes) > 0 && !couo.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.StandardTable,
			Columns: controlobjective.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.StandardControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.StandardTable,
			Columns: controlobjective.StandardPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.StandardControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.NarrativesTable,
			Columns: controlobjective.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ControlObjectiveNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !couo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.NarrativesTable,
			Columns: controlobjective.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.NarrativesTable,
			Columns: controlobjective.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.TasksTable,
			Columns: controlobjective.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ControlObjectiveTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !couo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.TasksTable,
			Columns: controlobjective.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlobjective.TasksTable,
			Columns: controlobjective.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ControlObjectiveTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ProgramsTable,
			Columns: controlobjective.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ProgramControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !couo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ProgramsTable,
			Columns: controlobjective.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   controlobjective.ProgramsTable,
			Columns: controlobjective.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = couo.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = couo.schemaConfig.ControlObjective
	ctx = internal.NewSchemaConfigContext(ctx, couo.schemaConfig)
	_spec.AddModifiers(couo.modifiers...)
	_node = &ControlObjective{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlobjective.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	couo.mutation.done = true
	return _node, nil
}
