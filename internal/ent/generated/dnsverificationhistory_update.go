// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/dnsverificationhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// DNSVerificationHistoryUpdate is the builder for updating DNSVerificationHistory entities.
type DNSVerificationHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *DNSVerificationHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DNSVerificationHistoryUpdate builder.
func (_u *DNSVerificationHistoryUpdate) Where(ps ...predicate.DNSVerificationHistory) *DNSVerificationHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DNSVerificationHistoryUpdate) SetUpdatedAt(v time.Time) *DNSVerificationHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DNSVerificationHistoryUpdate) ClearUpdatedAt() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *DNSVerificationHistoryUpdate) SetUpdatedBy(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableUpdatedBy(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *DNSVerificationHistoryUpdate) ClearUpdatedBy() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DNSVerificationHistoryUpdate) SetDeletedAt(v time.Time) *DNSVerificationHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableDeletedAt(v *time.Time) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DNSVerificationHistoryUpdate) ClearDeletedAt() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *DNSVerificationHistoryUpdate) SetDeletedBy(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableDeletedBy(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *DNSVerificationHistoryUpdate) ClearDeletedBy() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *DNSVerificationHistoryUpdate) SetTags(v []string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *DNSVerificationHistoryUpdate) AppendTags(v []string) *DNSVerificationHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *DNSVerificationHistoryUpdate) ClearTags() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *DNSVerificationHistoryUpdate) SetOwnerID(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableOwnerID(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *DNSVerificationHistoryUpdate) ClearOwnerID() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetDNSTxtRecord sets the "dns_txt_record" field.
func (_u *DNSVerificationHistoryUpdate) SetDNSTxtRecord(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetDNSTxtRecord(v)
	return _u
}

// SetNillableDNSTxtRecord sets the "dns_txt_record" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableDNSTxtRecord(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetDNSTxtRecord(*v)
	}
	return _u
}

// SetDNSTxtValue sets the "dns_txt_value" field.
func (_u *DNSVerificationHistoryUpdate) SetDNSTxtValue(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetDNSTxtValue(v)
	return _u
}

// SetNillableDNSTxtValue sets the "dns_txt_value" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableDNSTxtValue(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetDNSTxtValue(*v)
	}
	return _u
}

// SetDNSVerificationStatus sets the "dns_verification_status" field.
func (_u *DNSVerificationHistoryUpdate) SetDNSVerificationStatus(v enums.DNSVerificationStatus) *DNSVerificationHistoryUpdate {
	_u.mutation.SetDNSVerificationStatus(v)
	return _u
}

// SetNillableDNSVerificationStatus sets the "dns_verification_status" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableDNSVerificationStatus(v *enums.DNSVerificationStatus) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetDNSVerificationStatus(*v)
	}
	return _u
}

// SetDNSVerificationStatusReason sets the "dns_verification_status_reason" field.
func (_u *DNSVerificationHistoryUpdate) SetDNSVerificationStatusReason(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetDNSVerificationStatusReason(v)
	return _u
}

// SetNillableDNSVerificationStatusReason sets the "dns_verification_status_reason" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableDNSVerificationStatusReason(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetDNSVerificationStatusReason(*v)
	}
	return _u
}

// ClearDNSVerificationStatusReason clears the value of the "dns_verification_status_reason" field.
func (_u *DNSVerificationHistoryUpdate) ClearDNSVerificationStatusReason() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearDNSVerificationStatusReason()
	return _u
}

// SetAcmeChallengePath sets the "acme_challenge_path" field.
func (_u *DNSVerificationHistoryUpdate) SetAcmeChallengePath(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetAcmeChallengePath(v)
	return _u
}

// SetNillableAcmeChallengePath sets the "acme_challenge_path" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableAcmeChallengePath(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetAcmeChallengePath(*v)
	}
	return _u
}

// ClearAcmeChallengePath clears the value of the "acme_challenge_path" field.
func (_u *DNSVerificationHistoryUpdate) ClearAcmeChallengePath() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearAcmeChallengePath()
	return _u
}

// SetExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field.
func (_u *DNSVerificationHistoryUpdate) SetExpectedAcmeChallengeValue(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetExpectedAcmeChallengeValue(v)
	return _u
}

// SetNillableExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableExpectedAcmeChallengeValue(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetExpectedAcmeChallengeValue(*v)
	}
	return _u
}

// ClearExpectedAcmeChallengeValue clears the value of the "expected_acme_challenge_value" field.
func (_u *DNSVerificationHistoryUpdate) ClearExpectedAcmeChallengeValue() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearExpectedAcmeChallengeValue()
	return _u
}

// SetAcmeChallengeStatus sets the "acme_challenge_status" field.
func (_u *DNSVerificationHistoryUpdate) SetAcmeChallengeStatus(v enums.SSLVerificationStatus) *DNSVerificationHistoryUpdate {
	_u.mutation.SetAcmeChallengeStatus(v)
	return _u
}

// SetNillableAcmeChallengeStatus sets the "acme_challenge_status" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableAcmeChallengeStatus(v *enums.SSLVerificationStatus) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetAcmeChallengeStatus(*v)
	}
	return _u
}

// SetAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field.
func (_u *DNSVerificationHistoryUpdate) SetAcmeChallengeStatusReason(v string) *DNSVerificationHistoryUpdate {
	_u.mutation.SetAcmeChallengeStatusReason(v)
	return _u
}

// SetNillableAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdate) SetNillableAcmeChallengeStatusReason(v *string) *DNSVerificationHistoryUpdate {
	if v != nil {
		_u.SetAcmeChallengeStatusReason(*v)
	}
	return _u
}

// ClearAcmeChallengeStatusReason clears the value of the "acme_challenge_status_reason" field.
func (_u *DNSVerificationHistoryUpdate) ClearAcmeChallengeStatusReason() *DNSVerificationHistoryUpdate {
	_u.mutation.ClearAcmeChallengeStatusReason()
	return _u
}

// Mutation returns the DNSVerificationHistoryMutation object of the builder.
func (_u *DNSVerificationHistoryUpdate) Mutation() *DNSVerificationHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DNSVerificationHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DNSVerificationHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DNSVerificationHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DNSVerificationHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DNSVerificationHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if dnsverificationhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized dnsverificationhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := dnsverificationhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *DNSVerificationHistoryUpdate) check() error {
	if v, ok := _u.mutation.DNSVerificationStatus(); ok {
		if err := dnsverificationhistory.DNSVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerificationHistory.dns_verification_status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AcmeChallengeStatus(); ok {
		if err := dnsverificationhistory.AcmeChallengeStatusValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerificationHistory.acme_challenge_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DNSVerificationHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DNSVerificationHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DNSVerificationHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnsverificationhistory.Table, dnsverificationhistory.Columns, sqlgraph.NewFieldSpec(dnsverificationhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(dnsverificationhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsverificationhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(dnsverificationhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dnsverificationhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(dnsverificationhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(dnsverificationhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsverificationhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(dnsverificationhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(dnsverificationhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(dnsverificationhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.DNSTxtRecord(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSTxtRecord, field.TypeString, value)
	}
	if value, ok := _u.mutation.DNSTxtValue(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSTxtValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.DNSVerificationStatus(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSVerificationStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DNSVerificationStatusReason(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSVerificationStatusReason, field.TypeString, value)
	}
	if _u.mutation.DNSVerificationStatusReasonCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDNSVerificationStatusReason, field.TypeString)
	}
	if value, ok := _u.mutation.AcmeChallengePath(); ok {
		_spec.SetField(dnsverificationhistory.FieldAcmeChallengePath, field.TypeString, value)
	}
	if _u.mutation.AcmeChallengePathCleared() {
		_spec.ClearField(dnsverificationhistory.FieldAcmeChallengePath, field.TypeString)
	}
	if value, ok := _u.mutation.ExpectedAcmeChallengeValue(); ok {
		_spec.SetField(dnsverificationhistory.FieldExpectedAcmeChallengeValue, field.TypeString, value)
	}
	if _u.mutation.ExpectedAcmeChallengeValueCleared() {
		_spec.ClearField(dnsverificationhistory.FieldExpectedAcmeChallengeValue, field.TypeString)
	}
	if value, ok := _u.mutation.AcmeChallengeStatus(); ok {
		_spec.SetField(dnsverificationhistory.FieldAcmeChallengeStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.AcmeChallengeStatusReason(); ok {
		_spec.SetField(dnsverificationhistory.FieldAcmeChallengeStatusReason, field.TypeString, value)
	}
	if _u.mutation.AcmeChallengeStatusReasonCleared() {
		_spec.ClearField(dnsverificationhistory.FieldAcmeChallengeStatusReason, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.DNSVerificationHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsverificationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DNSVerificationHistoryUpdateOne is the builder for updating a single DNSVerificationHistory entity.
type DNSVerificationHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DNSVerificationHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DNSVerificationHistoryUpdateOne) SetUpdatedAt(v time.Time) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearUpdatedAt() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *DNSVerificationHistoryUpdateOne) SetUpdatedBy(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableUpdatedBy(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearUpdatedBy() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DNSVerificationHistoryUpdateOne) SetDeletedAt(v time.Time) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearDeletedAt() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *DNSVerificationHistoryUpdateOne) SetDeletedBy(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableDeletedBy(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearDeletedBy() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *DNSVerificationHistoryUpdateOne) SetTags(v []string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *DNSVerificationHistoryUpdateOne) AppendTags(v []string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearTags() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *DNSVerificationHistoryUpdateOne) SetOwnerID(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableOwnerID(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearOwnerID() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetDNSTxtRecord sets the "dns_txt_record" field.
func (_u *DNSVerificationHistoryUpdateOne) SetDNSTxtRecord(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetDNSTxtRecord(v)
	return _u
}

// SetNillableDNSTxtRecord sets the "dns_txt_record" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableDNSTxtRecord(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetDNSTxtRecord(*v)
	}
	return _u
}

// SetDNSTxtValue sets the "dns_txt_value" field.
func (_u *DNSVerificationHistoryUpdateOne) SetDNSTxtValue(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetDNSTxtValue(v)
	return _u
}

// SetNillableDNSTxtValue sets the "dns_txt_value" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableDNSTxtValue(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetDNSTxtValue(*v)
	}
	return _u
}

// SetDNSVerificationStatus sets the "dns_verification_status" field.
func (_u *DNSVerificationHistoryUpdateOne) SetDNSVerificationStatus(v enums.DNSVerificationStatus) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetDNSVerificationStatus(v)
	return _u
}

// SetNillableDNSVerificationStatus sets the "dns_verification_status" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableDNSVerificationStatus(v *enums.DNSVerificationStatus) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetDNSVerificationStatus(*v)
	}
	return _u
}

// SetDNSVerificationStatusReason sets the "dns_verification_status_reason" field.
func (_u *DNSVerificationHistoryUpdateOne) SetDNSVerificationStatusReason(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetDNSVerificationStatusReason(v)
	return _u
}

// SetNillableDNSVerificationStatusReason sets the "dns_verification_status_reason" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableDNSVerificationStatusReason(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetDNSVerificationStatusReason(*v)
	}
	return _u
}

// ClearDNSVerificationStatusReason clears the value of the "dns_verification_status_reason" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearDNSVerificationStatusReason() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearDNSVerificationStatusReason()
	return _u
}

// SetAcmeChallengePath sets the "acme_challenge_path" field.
func (_u *DNSVerificationHistoryUpdateOne) SetAcmeChallengePath(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetAcmeChallengePath(v)
	return _u
}

// SetNillableAcmeChallengePath sets the "acme_challenge_path" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableAcmeChallengePath(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetAcmeChallengePath(*v)
	}
	return _u
}

// ClearAcmeChallengePath clears the value of the "acme_challenge_path" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearAcmeChallengePath() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearAcmeChallengePath()
	return _u
}

// SetExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field.
func (_u *DNSVerificationHistoryUpdateOne) SetExpectedAcmeChallengeValue(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetExpectedAcmeChallengeValue(v)
	return _u
}

// SetNillableExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableExpectedAcmeChallengeValue(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetExpectedAcmeChallengeValue(*v)
	}
	return _u
}

// ClearExpectedAcmeChallengeValue clears the value of the "expected_acme_challenge_value" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearExpectedAcmeChallengeValue() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearExpectedAcmeChallengeValue()
	return _u
}

// SetAcmeChallengeStatus sets the "acme_challenge_status" field.
func (_u *DNSVerificationHistoryUpdateOne) SetAcmeChallengeStatus(v enums.SSLVerificationStatus) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetAcmeChallengeStatus(v)
	return _u
}

// SetNillableAcmeChallengeStatus sets the "acme_challenge_status" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableAcmeChallengeStatus(v *enums.SSLVerificationStatus) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetAcmeChallengeStatus(*v)
	}
	return _u
}

// SetAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field.
func (_u *DNSVerificationHistoryUpdateOne) SetAcmeChallengeStatusReason(v string) *DNSVerificationHistoryUpdateOne {
	_u.mutation.SetAcmeChallengeStatusReason(v)
	return _u
}

// SetNillableAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field if the given value is not nil.
func (_u *DNSVerificationHistoryUpdateOne) SetNillableAcmeChallengeStatusReason(v *string) *DNSVerificationHistoryUpdateOne {
	if v != nil {
		_u.SetAcmeChallengeStatusReason(*v)
	}
	return _u
}

// ClearAcmeChallengeStatusReason clears the value of the "acme_challenge_status_reason" field.
func (_u *DNSVerificationHistoryUpdateOne) ClearAcmeChallengeStatusReason() *DNSVerificationHistoryUpdateOne {
	_u.mutation.ClearAcmeChallengeStatusReason()
	return _u
}

// Mutation returns the DNSVerificationHistoryMutation object of the builder.
func (_u *DNSVerificationHistoryUpdateOne) Mutation() *DNSVerificationHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the DNSVerificationHistoryUpdate builder.
func (_u *DNSVerificationHistoryUpdateOne) Where(ps ...predicate.DNSVerificationHistory) *DNSVerificationHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DNSVerificationHistoryUpdateOne) Select(field string, fields ...string) *DNSVerificationHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DNSVerificationHistory entity.
func (_u *DNSVerificationHistoryUpdateOne) Save(ctx context.Context) (*DNSVerificationHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DNSVerificationHistoryUpdateOne) SaveX(ctx context.Context) *DNSVerificationHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DNSVerificationHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DNSVerificationHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DNSVerificationHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if dnsverificationhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized dnsverificationhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := dnsverificationhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *DNSVerificationHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.DNSVerificationStatus(); ok {
		if err := dnsverificationhistory.DNSVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerificationHistory.dns_verification_status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AcmeChallengeStatus(); ok {
		if err := dnsverificationhistory.AcmeChallengeStatusValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerificationHistory.acme_challenge_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DNSVerificationHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DNSVerificationHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DNSVerificationHistoryUpdateOne) sqlSave(ctx context.Context) (_node *DNSVerificationHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnsverificationhistory.Table, dnsverificationhistory.Columns, sqlgraph.NewFieldSpec(dnsverificationhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DNSVerificationHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dnsverificationhistory.FieldID)
		for _, f := range fields {
			if !dnsverificationhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != dnsverificationhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(dnsverificationhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsverificationhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(dnsverificationhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dnsverificationhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(dnsverificationhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(dnsverificationhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsverificationhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(dnsverificationhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(dnsverificationhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(dnsverificationhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.DNSTxtRecord(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSTxtRecord, field.TypeString, value)
	}
	if value, ok := _u.mutation.DNSTxtValue(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSTxtValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.DNSVerificationStatus(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSVerificationStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DNSVerificationStatusReason(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSVerificationStatusReason, field.TypeString, value)
	}
	if _u.mutation.DNSVerificationStatusReasonCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDNSVerificationStatusReason, field.TypeString)
	}
	if value, ok := _u.mutation.AcmeChallengePath(); ok {
		_spec.SetField(dnsverificationhistory.FieldAcmeChallengePath, field.TypeString, value)
	}
	if _u.mutation.AcmeChallengePathCleared() {
		_spec.ClearField(dnsverificationhistory.FieldAcmeChallengePath, field.TypeString)
	}
	if value, ok := _u.mutation.ExpectedAcmeChallengeValue(); ok {
		_spec.SetField(dnsverificationhistory.FieldExpectedAcmeChallengeValue, field.TypeString, value)
	}
	if _u.mutation.ExpectedAcmeChallengeValueCleared() {
		_spec.ClearField(dnsverificationhistory.FieldExpectedAcmeChallengeValue, field.TypeString)
	}
	if value, ok := _u.mutation.AcmeChallengeStatus(); ok {
		_spec.SetField(dnsverificationhistory.FieldAcmeChallengeStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.AcmeChallengeStatusReason(); ok {
		_spec.SetField(dnsverificationhistory.FieldAcmeChallengeStatusReason, field.TypeString, value)
	}
	if _u.mutation.AcmeChallengeStatusReasonCleared() {
		_spec.ClearField(dnsverificationhistory.FieldAcmeChallengeStatusReason, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.DNSVerificationHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &DNSVerificationHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsverificationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
