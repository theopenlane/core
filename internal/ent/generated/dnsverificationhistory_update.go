// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/dnsverificationhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// DNSVerificationHistoryUpdate is the builder for updating DNSVerificationHistory entities.
type DNSVerificationHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *DNSVerificationHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DNSVerificationHistoryUpdate builder.
func (dvhu *DNSVerificationHistoryUpdate) Where(ps ...predicate.DNSVerificationHistory) *DNSVerificationHistoryUpdate {
	dvhu.mutation.Where(ps...)
	return dvhu
}

// SetUpdatedAt sets the "updated_at" field.
func (dvhu *DNSVerificationHistoryUpdate) SetUpdatedAt(t time.Time) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetUpdatedAt(t)
	return dvhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (dvhu *DNSVerificationHistoryUpdate) ClearUpdatedAt() *DNSVerificationHistoryUpdate {
	dvhu.mutation.ClearUpdatedAt()
	return dvhu
}

// SetUpdatedBy sets the "updated_by" field.
func (dvhu *DNSVerificationHistoryUpdate) SetUpdatedBy(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetUpdatedBy(s)
	return dvhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableUpdatedBy(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetUpdatedBy(*s)
	}
	return dvhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dvhu *DNSVerificationHistoryUpdate) ClearUpdatedBy() *DNSVerificationHistoryUpdate {
	dvhu.mutation.ClearUpdatedBy()
	return dvhu
}

// SetDeletedAt sets the "deleted_at" field.
func (dvhu *DNSVerificationHistoryUpdate) SetDeletedAt(t time.Time) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetDeletedAt(t)
	return dvhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableDeletedAt(t *time.Time) *DNSVerificationHistoryUpdate {
	if t != nil {
		dvhu.SetDeletedAt(*t)
	}
	return dvhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dvhu *DNSVerificationHistoryUpdate) ClearDeletedAt() *DNSVerificationHistoryUpdate {
	dvhu.mutation.ClearDeletedAt()
	return dvhu
}

// SetDeletedBy sets the "deleted_by" field.
func (dvhu *DNSVerificationHistoryUpdate) SetDeletedBy(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetDeletedBy(s)
	return dvhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableDeletedBy(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetDeletedBy(*s)
	}
	return dvhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (dvhu *DNSVerificationHistoryUpdate) ClearDeletedBy() *DNSVerificationHistoryUpdate {
	dvhu.mutation.ClearDeletedBy()
	return dvhu
}

// SetTags sets the "tags" field.
func (dvhu *DNSVerificationHistoryUpdate) SetTags(s []string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetTags(s)
	return dvhu
}

// AppendTags appends s to the "tags" field.
func (dvhu *DNSVerificationHistoryUpdate) AppendTags(s []string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.AppendTags(s)
	return dvhu
}

// ClearTags clears the value of the "tags" field.
func (dvhu *DNSVerificationHistoryUpdate) ClearTags() *DNSVerificationHistoryUpdate {
	dvhu.mutation.ClearTags()
	return dvhu
}

// SetOwnerID sets the "owner_id" field.
func (dvhu *DNSVerificationHistoryUpdate) SetOwnerID(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetOwnerID(s)
	return dvhu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableOwnerID(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetOwnerID(*s)
	}
	return dvhu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (dvhu *DNSVerificationHistoryUpdate) ClearOwnerID() *DNSVerificationHistoryUpdate {
	dvhu.mutation.ClearOwnerID()
	return dvhu
}

// SetDNSTxtRecord sets the "dns_txt_record" field.
func (dvhu *DNSVerificationHistoryUpdate) SetDNSTxtRecord(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetDNSTxtRecord(s)
	return dvhu
}

// SetNillableDNSTxtRecord sets the "dns_txt_record" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableDNSTxtRecord(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetDNSTxtRecord(*s)
	}
	return dvhu
}

// SetDNSTxtValue sets the "dns_txt_value" field.
func (dvhu *DNSVerificationHistoryUpdate) SetDNSTxtValue(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetDNSTxtValue(s)
	return dvhu
}

// SetNillableDNSTxtValue sets the "dns_txt_value" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableDNSTxtValue(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetDNSTxtValue(*s)
	}
	return dvhu
}

// SetDNSVerificationStatus sets the "dns_verification_status" field.
func (dvhu *DNSVerificationHistoryUpdate) SetDNSVerificationStatus(eds enums.CustomDomainStatus) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetDNSVerificationStatus(eds)
	return dvhu
}

// SetNillableDNSVerificationStatus sets the "dns_verification_status" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableDNSVerificationStatus(eds *enums.CustomDomainStatus) *DNSVerificationHistoryUpdate {
	if eds != nil {
		dvhu.SetDNSVerificationStatus(*eds)
	}
	return dvhu
}

// SetDNSVerificationStatusReason sets the "dns_verification_status_reason" field.
func (dvhu *DNSVerificationHistoryUpdate) SetDNSVerificationStatusReason(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetDNSVerificationStatusReason(s)
	return dvhu
}

// SetNillableDNSVerificationStatusReason sets the "dns_verification_status_reason" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableDNSVerificationStatusReason(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetDNSVerificationStatusReason(*s)
	}
	return dvhu
}

// ClearDNSVerificationStatusReason clears the value of the "dns_verification_status_reason" field.
func (dvhu *DNSVerificationHistoryUpdate) ClearDNSVerificationStatusReason() *DNSVerificationHistoryUpdate {
	dvhu.mutation.ClearDNSVerificationStatusReason()
	return dvhu
}

// SetSslTxtRecord sets the "ssl_txt_record" field.
func (dvhu *DNSVerificationHistoryUpdate) SetSslTxtRecord(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetSslTxtRecord(s)
	return dvhu
}

// SetNillableSslTxtRecord sets the "ssl_txt_record" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableSslTxtRecord(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetSslTxtRecord(*s)
	}
	return dvhu
}

// SetSslTxtValue sets the "ssl_txt_value" field.
func (dvhu *DNSVerificationHistoryUpdate) SetSslTxtValue(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetSslTxtValue(s)
	return dvhu
}

// SetNillableSslTxtValue sets the "ssl_txt_value" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableSslTxtValue(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetSslTxtValue(*s)
	}
	return dvhu
}

// SetSslCertStatus sets the "ssl_cert_status" field.
func (dvhu *DNSVerificationHistoryUpdate) SetSslCertStatus(eds enums.CustomDomainStatus) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetSslCertStatus(eds)
	return dvhu
}

// SetNillableSslCertStatus sets the "ssl_cert_status" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableSslCertStatus(eds *enums.CustomDomainStatus) *DNSVerificationHistoryUpdate {
	if eds != nil {
		dvhu.SetSslCertStatus(*eds)
	}
	return dvhu
}

// SetSslCertStatusReason sets the "ssl_cert_status_reason" field.
func (dvhu *DNSVerificationHistoryUpdate) SetSslCertStatusReason(s string) *DNSVerificationHistoryUpdate {
	dvhu.mutation.SetSslCertStatusReason(s)
	return dvhu
}

// SetNillableSslCertStatusReason sets the "ssl_cert_status_reason" field if the given value is not nil.
func (dvhu *DNSVerificationHistoryUpdate) SetNillableSslCertStatusReason(s *string) *DNSVerificationHistoryUpdate {
	if s != nil {
		dvhu.SetSslCertStatusReason(*s)
	}
	return dvhu
}

// ClearSslCertStatusReason clears the value of the "ssl_cert_status_reason" field.
func (dvhu *DNSVerificationHistoryUpdate) ClearSslCertStatusReason() *DNSVerificationHistoryUpdate {
	dvhu.mutation.ClearSslCertStatusReason()
	return dvhu
}

// Mutation returns the DNSVerificationHistoryMutation object of the builder.
func (dvhu *DNSVerificationHistoryUpdate) Mutation() *DNSVerificationHistoryMutation {
	return dvhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dvhu *DNSVerificationHistoryUpdate) Save(ctx context.Context) (int, error) {
	dvhu.defaults()
	return withHooks(ctx, dvhu.sqlSave, dvhu.mutation, dvhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dvhu *DNSVerificationHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := dvhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dvhu *DNSVerificationHistoryUpdate) Exec(ctx context.Context) error {
	_, err := dvhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dvhu *DNSVerificationHistoryUpdate) ExecX(ctx context.Context) {
	if err := dvhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dvhu *DNSVerificationHistoryUpdate) defaults() {
	if _, ok := dvhu.mutation.UpdatedAt(); !ok && !dvhu.mutation.UpdatedAtCleared() {
		v := dnsverificationhistory.UpdateDefaultUpdatedAt()
		dvhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dvhu *DNSVerificationHistoryUpdate) check() error {
	if v, ok := dvhu.mutation.DNSVerificationStatus(); ok {
		if err := dnsverificationhistory.DNSVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerificationHistory.dns_verification_status": %w`, err)}
		}
	}
	if v, ok := dvhu.mutation.SslCertStatus(); ok {
		if err := dnsverificationhistory.SslCertStatusValidator(v); err != nil {
			return &ValidationError{Name: "ssl_cert_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerificationHistory.ssl_cert_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dvhu *DNSVerificationHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DNSVerificationHistoryUpdate {
	dvhu.modifiers = append(dvhu.modifiers, modifiers...)
	return dvhu
}

func (dvhu *DNSVerificationHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dvhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnsverificationhistory.Table, dnsverificationhistory.Columns, sqlgraph.NewFieldSpec(dnsverificationhistory.FieldID, field.TypeString))
	if ps := dvhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dvhu.mutation.RefCleared() {
		_spec.ClearField(dnsverificationhistory.FieldRef, field.TypeString)
	}
	if dvhu.mutation.CreatedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := dvhu.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsverificationhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if dvhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldUpdatedAt, field.TypeTime)
	}
	if dvhu.mutation.CreatedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dvhu.mutation.UpdatedBy(); ok {
		_spec.SetField(dnsverificationhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if dvhu.mutation.UpdatedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := dvhu.mutation.DeletedAt(); ok {
		_spec.SetField(dnsverificationhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if dvhu.mutation.DeletedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := dvhu.mutation.DeletedBy(); ok {
		_spec.SetField(dnsverificationhistory.FieldDeletedBy, field.TypeString, value)
	}
	if dvhu.mutation.DeletedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := dvhu.mutation.Tags(); ok {
		_spec.SetField(dnsverificationhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := dvhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsverificationhistory.FieldTags, value)
		})
	}
	if dvhu.mutation.TagsCleared() {
		_spec.ClearField(dnsverificationhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := dvhu.mutation.OwnerID(); ok {
		_spec.SetField(dnsverificationhistory.FieldOwnerID, field.TypeString, value)
	}
	if dvhu.mutation.OwnerIDCleared() {
		_spec.ClearField(dnsverificationhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := dvhu.mutation.DNSTxtRecord(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSTxtRecord, field.TypeString, value)
	}
	if value, ok := dvhu.mutation.DNSTxtValue(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSTxtValue, field.TypeString, value)
	}
	if value, ok := dvhu.mutation.DNSVerificationStatus(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSVerificationStatus, field.TypeEnum, value)
	}
	if value, ok := dvhu.mutation.DNSVerificationStatusReason(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSVerificationStatusReason, field.TypeString, value)
	}
	if dvhu.mutation.DNSVerificationStatusReasonCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDNSVerificationStatusReason, field.TypeString)
	}
	if value, ok := dvhu.mutation.SslTxtRecord(); ok {
		_spec.SetField(dnsverificationhistory.FieldSslTxtRecord, field.TypeString, value)
	}
	if value, ok := dvhu.mutation.SslTxtValue(); ok {
		_spec.SetField(dnsverificationhistory.FieldSslTxtValue, field.TypeString, value)
	}
	if value, ok := dvhu.mutation.SslCertStatus(); ok {
		_spec.SetField(dnsverificationhistory.FieldSslCertStatus, field.TypeEnum, value)
	}
	if value, ok := dvhu.mutation.SslCertStatusReason(); ok {
		_spec.SetField(dnsverificationhistory.FieldSslCertStatusReason, field.TypeString, value)
	}
	if dvhu.mutation.SslCertStatusReasonCleared() {
		_spec.ClearField(dnsverificationhistory.FieldSslCertStatusReason, field.TypeString)
	}
	_spec.Node.Schema = dvhu.schemaConfig.DNSVerificationHistory
	ctx = internal.NewSchemaConfigContext(ctx, dvhu.schemaConfig)
	_spec.AddModifiers(dvhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dvhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsverificationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dvhu.mutation.done = true
	return n, nil
}

// DNSVerificationHistoryUpdateOne is the builder for updating a single DNSVerificationHistory entity.
type DNSVerificationHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DNSVerificationHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetUpdatedAt(t time.Time) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetUpdatedAt(t)
	return dvhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) ClearUpdatedAt() *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.ClearUpdatedAt()
	return dvhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetUpdatedBy(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetUpdatedBy(s)
	return dvhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableUpdatedBy(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetUpdatedBy(*s)
	}
	return dvhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) ClearUpdatedBy() *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.ClearUpdatedBy()
	return dvhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetDeletedAt(t time.Time) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetDeletedAt(t)
	return dvhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *DNSVerificationHistoryUpdateOne {
	if t != nil {
		dvhuo.SetDeletedAt(*t)
	}
	return dvhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) ClearDeletedAt() *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.ClearDeletedAt()
	return dvhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetDeletedBy(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetDeletedBy(s)
	return dvhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableDeletedBy(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetDeletedBy(*s)
	}
	return dvhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) ClearDeletedBy() *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.ClearDeletedBy()
	return dvhuo
}

// SetTags sets the "tags" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetTags(s []string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetTags(s)
	return dvhuo
}

// AppendTags appends s to the "tags" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) AppendTags(s []string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.AppendTags(s)
	return dvhuo
}

// ClearTags clears the value of the "tags" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) ClearTags() *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.ClearTags()
	return dvhuo
}

// SetOwnerID sets the "owner_id" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetOwnerID(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetOwnerID(s)
	return dvhuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableOwnerID(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetOwnerID(*s)
	}
	return dvhuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) ClearOwnerID() *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.ClearOwnerID()
	return dvhuo
}

// SetDNSTxtRecord sets the "dns_txt_record" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetDNSTxtRecord(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetDNSTxtRecord(s)
	return dvhuo
}

// SetNillableDNSTxtRecord sets the "dns_txt_record" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableDNSTxtRecord(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetDNSTxtRecord(*s)
	}
	return dvhuo
}

// SetDNSTxtValue sets the "dns_txt_value" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetDNSTxtValue(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetDNSTxtValue(s)
	return dvhuo
}

// SetNillableDNSTxtValue sets the "dns_txt_value" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableDNSTxtValue(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetDNSTxtValue(*s)
	}
	return dvhuo
}

// SetDNSVerificationStatus sets the "dns_verification_status" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetDNSVerificationStatus(eds enums.CustomDomainStatus) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetDNSVerificationStatus(eds)
	return dvhuo
}

// SetNillableDNSVerificationStatus sets the "dns_verification_status" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableDNSVerificationStatus(eds *enums.CustomDomainStatus) *DNSVerificationHistoryUpdateOne {
	if eds != nil {
		dvhuo.SetDNSVerificationStatus(*eds)
	}
	return dvhuo
}

// SetDNSVerificationStatusReason sets the "dns_verification_status_reason" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetDNSVerificationStatusReason(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetDNSVerificationStatusReason(s)
	return dvhuo
}

// SetNillableDNSVerificationStatusReason sets the "dns_verification_status_reason" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableDNSVerificationStatusReason(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetDNSVerificationStatusReason(*s)
	}
	return dvhuo
}

// ClearDNSVerificationStatusReason clears the value of the "dns_verification_status_reason" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) ClearDNSVerificationStatusReason() *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.ClearDNSVerificationStatusReason()
	return dvhuo
}

// SetSslTxtRecord sets the "ssl_txt_record" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetSslTxtRecord(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetSslTxtRecord(s)
	return dvhuo
}

// SetNillableSslTxtRecord sets the "ssl_txt_record" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableSslTxtRecord(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetSslTxtRecord(*s)
	}
	return dvhuo
}

// SetSslTxtValue sets the "ssl_txt_value" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetSslTxtValue(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetSslTxtValue(s)
	return dvhuo
}

// SetNillableSslTxtValue sets the "ssl_txt_value" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableSslTxtValue(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetSslTxtValue(*s)
	}
	return dvhuo
}

// SetSslCertStatus sets the "ssl_cert_status" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetSslCertStatus(eds enums.CustomDomainStatus) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetSslCertStatus(eds)
	return dvhuo
}

// SetNillableSslCertStatus sets the "ssl_cert_status" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableSslCertStatus(eds *enums.CustomDomainStatus) *DNSVerificationHistoryUpdateOne {
	if eds != nil {
		dvhuo.SetSslCertStatus(*eds)
	}
	return dvhuo
}

// SetSslCertStatusReason sets the "ssl_cert_status_reason" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetSslCertStatusReason(s string) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.SetSslCertStatusReason(s)
	return dvhuo
}

// SetNillableSslCertStatusReason sets the "ssl_cert_status_reason" field if the given value is not nil.
func (dvhuo *DNSVerificationHistoryUpdateOne) SetNillableSslCertStatusReason(s *string) *DNSVerificationHistoryUpdateOne {
	if s != nil {
		dvhuo.SetSslCertStatusReason(*s)
	}
	return dvhuo
}

// ClearSslCertStatusReason clears the value of the "ssl_cert_status_reason" field.
func (dvhuo *DNSVerificationHistoryUpdateOne) ClearSslCertStatusReason() *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.ClearSslCertStatusReason()
	return dvhuo
}

// Mutation returns the DNSVerificationHistoryMutation object of the builder.
func (dvhuo *DNSVerificationHistoryUpdateOne) Mutation() *DNSVerificationHistoryMutation {
	return dvhuo.mutation
}

// Where appends a list predicates to the DNSVerificationHistoryUpdate builder.
func (dvhuo *DNSVerificationHistoryUpdateOne) Where(ps ...predicate.DNSVerificationHistory) *DNSVerificationHistoryUpdateOne {
	dvhuo.mutation.Where(ps...)
	return dvhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dvhuo *DNSVerificationHistoryUpdateOne) Select(field string, fields ...string) *DNSVerificationHistoryUpdateOne {
	dvhuo.fields = append([]string{field}, fields...)
	return dvhuo
}

// Save executes the query and returns the updated DNSVerificationHistory entity.
func (dvhuo *DNSVerificationHistoryUpdateOne) Save(ctx context.Context) (*DNSVerificationHistory, error) {
	dvhuo.defaults()
	return withHooks(ctx, dvhuo.sqlSave, dvhuo.mutation, dvhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dvhuo *DNSVerificationHistoryUpdateOne) SaveX(ctx context.Context) *DNSVerificationHistory {
	node, err := dvhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dvhuo *DNSVerificationHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := dvhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dvhuo *DNSVerificationHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := dvhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dvhuo *DNSVerificationHistoryUpdateOne) defaults() {
	if _, ok := dvhuo.mutation.UpdatedAt(); !ok && !dvhuo.mutation.UpdatedAtCleared() {
		v := dnsverificationhistory.UpdateDefaultUpdatedAt()
		dvhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dvhuo *DNSVerificationHistoryUpdateOne) check() error {
	if v, ok := dvhuo.mutation.DNSVerificationStatus(); ok {
		if err := dnsverificationhistory.DNSVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerificationHistory.dns_verification_status": %w`, err)}
		}
	}
	if v, ok := dvhuo.mutation.SslCertStatus(); ok {
		if err := dnsverificationhistory.SslCertStatusValidator(v); err != nil {
			return &ValidationError{Name: "ssl_cert_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerificationHistory.ssl_cert_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dvhuo *DNSVerificationHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DNSVerificationHistoryUpdateOne {
	dvhuo.modifiers = append(dvhuo.modifiers, modifiers...)
	return dvhuo
}

func (dvhuo *DNSVerificationHistoryUpdateOne) sqlSave(ctx context.Context) (_node *DNSVerificationHistory, err error) {
	if err := dvhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnsverificationhistory.Table, dnsverificationhistory.Columns, sqlgraph.NewFieldSpec(dnsverificationhistory.FieldID, field.TypeString))
	id, ok := dvhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DNSVerificationHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dvhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dnsverificationhistory.FieldID)
		for _, f := range fields {
			if !dnsverificationhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != dnsverificationhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dvhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dvhuo.mutation.RefCleared() {
		_spec.ClearField(dnsverificationhistory.FieldRef, field.TypeString)
	}
	if dvhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := dvhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsverificationhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if dvhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldUpdatedAt, field.TypeTime)
	}
	if dvhuo.mutation.CreatedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dvhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(dnsverificationhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if dvhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := dvhuo.mutation.DeletedAt(); ok {
		_spec.SetField(dnsverificationhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if dvhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := dvhuo.mutation.DeletedBy(); ok {
		_spec.SetField(dnsverificationhistory.FieldDeletedBy, field.TypeString, value)
	}
	if dvhuo.mutation.DeletedByCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := dvhuo.mutation.Tags(); ok {
		_spec.SetField(dnsverificationhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := dvhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsverificationhistory.FieldTags, value)
		})
	}
	if dvhuo.mutation.TagsCleared() {
		_spec.ClearField(dnsverificationhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := dvhuo.mutation.OwnerID(); ok {
		_spec.SetField(dnsverificationhistory.FieldOwnerID, field.TypeString, value)
	}
	if dvhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(dnsverificationhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := dvhuo.mutation.DNSTxtRecord(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSTxtRecord, field.TypeString, value)
	}
	if value, ok := dvhuo.mutation.DNSTxtValue(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSTxtValue, field.TypeString, value)
	}
	if value, ok := dvhuo.mutation.DNSVerificationStatus(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSVerificationStatus, field.TypeEnum, value)
	}
	if value, ok := dvhuo.mutation.DNSVerificationStatusReason(); ok {
		_spec.SetField(dnsverificationhistory.FieldDNSVerificationStatusReason, field.TypeString, value)
	}
	if dvhuo.mutation.DNSVerificationStatusReasonCleared() {
		_spec.ClearField(dnsverificationhistory.FieldDNSVerificationStatusReason, field.TypeString)
	}
	if value, ok := dvhuo.mutation.SslTxtRecord(); ok {
		_spec.SetField(dnsverificationhistory.FieldSslTxtRecord, field.TypeString, value)
	}
	if value, ok := dvhuo.mutation.SslTxtValue(); ok {
		_spec.SetField(dnsverificationhistory.FieldSslTxtValue, field.TypeString, value)
	}
	if value, ok := dvhuo.mutation.SslCertStatus(); ok {
		_spec.SetField(dnsverificationhistory.FieldSslCertStatus, field.TypeEnum, value)
	}
	if value, ok := dvhuo.mutation.SslCertStatusReason(); ok {
		_spec.SetField(dnsverificationhistory.FieldSslCertStatusReason, field.TypeString, value)
	}
	if dvhuo.mutation.SslCertStatusReasonCleared() {
		_spec.ClearField(dnsverificationhistory.FieldSslCertStatusReason, field.TypeString)
	}
	_spec.Node.Schema = dvhuo.schemaConfig.DNSVerificationHistory
	ctx = internal.NewSchemaConfigContext(ctx, dvhuo.schemaConfig)
	_spec.AddModifiers(dvhuo.modifiers...)
	_node = &DNSVerificationHistory{config: dvhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dvhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsverificationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dvhuo.mutation.done = true
	return _node, nil
}
