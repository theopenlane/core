// Code generated by ent, DO NOT EDIT.

package standardhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/entx/history"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldRef, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldMappingID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDescription, v))
}

// Family applies equality check predicate on the "family" field. It's identical to FamilyEQ.
func Family(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldFamily, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldStatus, v))
}

// StandardType applies equality check predicate on the "standard_type" field. It's identical to StandardTypeEQ.
func StandardType(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldStandardType, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldVersion, v))
}

// PurposeAndScope applies equality check predicate on the "purpose_and_scope" field. It's identical to PurposeAndScopeEQ.
func PurposeAndScope(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldPurposeAndScope, v))
}

// Background applies equality check predicate on the "background" field. It's identical to BackgroundEQ.
func Background(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldBackground, v))
}

// Satisfies applies equality check predicate on the "satisfies" field. It's identical to SatisfiesEQ.
func Satisfies(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldSatisfies, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldRef))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldRef, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v history.OpType) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v history.OpType) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...history.OpType) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...history.OpType) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldDeletedBy, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldTags))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldDescription, v))
}

// FamilyEQ applies the EQ predicate on the "family" field.
func FamilyEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldFamily, v))
}

// FamilyNEQ applies the NEQ predicate on the "family" field.
func FamilyNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldFamily, v))
}

// FamilyIn applies the In predicate on the "family" field.
func FamilyIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldFamily, vs...))
}

// FamilyNotIn applies the NotIn predicate on the "family" field.
func FamilyNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldFamily, vs...))
}

// FamilyGT applies the GT predicate on the "family" field.
func FamilyGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldFamily, v))
}

// FamilyGTE applies the GTE predicate on the "family" field.
func FamilyGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldFamily, v))
}

// FamilyLT applies the LT predicate on the "family" field.
func FamilyLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldFamily, v))
}

// FamilyLTE applies the LTE predicate on the "family" field.
func FamilyLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldFamily, v))
}

// FamilyContains applies the Contains predicate on the "family" field.
func FamilyContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldFamily, v))
}

// FamilyHasPrefix applies the HasPrefix predicate on the "family" field.
func FamilyHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldFamily, v))
}

// FamilyHasSuffix applies the HasSuffix predicate on the "family" field.
func FamilyHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldFamily, v))
}

// FamilyIsNil applies the IsNil predicate on the "family" field.
func FamilyIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldFamily))
}

// FamilyNotNil applies the NotNil predicate on the "family" field.
func FamilyNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldFamily))
}

// FamilyEqualFold applies the EqualFold predicate on the "family" field.
func FamilyEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldFamily, v))
}

// FamilyContainsFold applies the ContainsFold predicate on the "family" field.
func FamilyContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldFamily, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldStatus, v))
}

// StandardTypeEQ applies the EQ predicate on the "standard_type" field.
func StandardTypeEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldStandardType, v))
}

// StandardTypeNEQ applies the NEQ predicate on the "standard_type" field.
func StandardTypeNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldStandardType, v))
}

// StandardTypeIn applies the In predicate on the "standard_type" field.
func StandardTypeIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldStandardType, vs...))
}

// StandardTypeNotIn applies the NotIn predicate on the "standard_type" field.
func StandardTypeNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldStandardType, vs...))
}

// StandardTypeGT applies the GT predicate on the "standard_type" field.
func StandardTypeGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldStandardType, v))
}

// StandardTypeGTE applies the GTE predicate on the "standard_type" field.
func StandardTypeGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldStandardType, v))
}

// StandardTypeLT applies the LT predicate on the "standard_type" field.
func StandardTypeLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldStandardType, v))
}

// StandardTypeLTE applies the LTE predicate on the "standard_type" field.
func StandardTypeLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldStandardType, v))
}

// StandardTypeContains applies the Contains predicate on the "standard_type" field.
func StandardTypeContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldStandardType, v))
}

// StandardTypeHasPrefix applies the HasPrefix predicate on the "standard_type" field.
func StandardTypeHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldStandardType, v))
}

// StandardTypeHasSuffix applies the HasSuffix predicate on the "standard_type" field.
func StandardTypeHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldStandardType, v))
}

// StandardTypeIsNil applies the IsNil predicate on the "standard_type" field.
func StandardTypeIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldStandardType))
}

// StandardTypeNotNil applies the NotNil predicate on the "standard_type" field.
func StandardTypeNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldStandardType))
}

// StandardTypeEqualFold applies the EqualFold predicate on the "standard_type" field.
func StandardTypeEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldStandardType, v))
}

// StandardTypeContainsFold applies the ContainsFold predicate on the "standard_type" field.
func StandardTypeContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldStandardType, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldVersion, v))
}

// PurposeAndScopeEQ applies the EQ predicate on the "purpose_and_scope" field.
func PurposeAndScopeEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldPurposeAndScope, v))
}

// PurposeAndScopeNEQ applies the NEQ predicate on the "purpose_and_scope" field.
func PurposeAndScopeNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldPurposeAndScope, v))
}

// PurposeAndScopeIn applies the In predicate on the "purpose_and_scope" field.
func PurposeAndScopeIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldPurposeAndScope, vs...))
}

// PurposeAndScopeNotIn applies the NotIn predicate on the "purpose_and_scope" field.
func PurposeAndScopeNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldPurposeAndScope, vs...))
}

// PurposeAndScopeGT applies the GT predicate on the "purpose_and_scope" field.
func PurposeAndScopeGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldPurposeAndScope, v))
}

// PurposeAndScopeGTE applies the GTE predicate on the "purpose_and_scope" field.
func PurposeAndScopeGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldPurposeAndScope, v))
}

// PurposeAndScopeLT applies the LT predicate on the "purpose_and_scope" field.
func PurposeAndScopeLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldPurposeAndScope, v))
}

// PurposeAndScopeLTE applies the LTE predicate on the "purpose_and_scope" field.
func PurposeAndScopeLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldPurposeAndScope, v))
}

// PurposeAndScopeContains applies the Contains predicate on the "purpose_and_scope" field.
func PurposeAndScopeContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldPurposeAndScope, v))
}

// PurposeAndScopeHasPrefix applies the HasPrefix predicate on the "purpose_and_scope" field.
func PurposeAndScopeHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldPurposeAndScope, v))
}

// PurposeAndScopeHasSuffix applies the HasSuffix predicate on the "purpose_and_scope" field.
func PurposeAndScopeHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldPurposeAndScope, v))
}

// PurposeAndScopeIsNil applies the IsNil predicate on the "purpose_and_scope" field.
func PurposeAndScopeIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldPurposeAndScope))
}

// PurposeAndScopeNotNil applies the NotNil predicate on the "purpose_and_scope" field.
func PurposeAndScopeNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldPurposeAndScope))
}

// PurposeAndScopeEqualFold applies the EqualFold predicate on the "purpose_and_scope" field.
func PurposeAndScopeEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldPurposeAndScope, v))
}

// PurposeAndScopeContainsFold applies the ContainsFold predicate on the "purpose_and_scope" field.
func PurposeAndScopeContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldPurposeAndScope, v))
}

// BackgroundEQ applies the EQ predicate on the "background" field.
func BackgroundEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldBackground, v))
}

// BackgroundNEQ applies the NEQ predicate on the "background" field.
func BackgroundNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldBackground, v))
}

// BackgroundIn applies the In predicate on the "background" field.
func BackgroundIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldBackground, vs...))
}

// BackgroundNotIn applies the NotIn predicate on the "background" field.
func BackgroundNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldBackground, vs...))
}

// BackgroundGT applies the GT predicate on the "background" field.
func BackgroundGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldBackground, v))
}

// BackgroundGTE applies the GTE predicate on the "background" field.
func BackgroundGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldBackground, v))
}

// BackgroundLT applies the LT predicate on the "background" field.
func BackgroundLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldBackground, v))
}

// BackgroundLTE applies the LTE predicate on the "background" field.
func BackgroundLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldBackground, v))
}

// BackgroundContains applies the Contains predicate on the "background" field.
func BackgroundContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldBackground, v))
}

// BackgroundHasPrefix applies the HasPrefix predicate on the "background" field.
func BackgroundHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldBackground, v))
}

// BackgroundHasSuffix applies the HasSuffix predicate on the "background" field.
func BackgroundHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldBackground, v))
}

// BackgroundIsNil applies the IsNil predicate on the "background" field.
func BackgroundIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldBackground))
}

// BackgroundNotNil applies the NotNil predicate on the "background" field.
func BackgroundNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldBackground))
}

// BackgroundEqualFold applies the EqualFold predicate on the "background" field.
func BackgroundEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldBackground, v))
}

// BackgroundContainsFold applies the ContainsFold predicate on the "background" field.
func BackgroundContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldBackground, v))
}

// SatisfiesEQ applies the EQ predicate on the "satisfies" field.
func SatisfiesEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldSatisfies, v))
}

// SatisfiesNEQ applies the NEQ predicate on the "satisfies" field.
func SatisfiesNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldSatisfies, v))
}

// SatisfiesIn applies the In predicate on the "satisfies" field.
func SatisfiesIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldSatisfies, vs...))
}

// SatisfiesNotIn applies the NotIn predicate on the "satisfies" field.
func SatisfiesNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldSatisfies, vs...))
}

// SatisfiesGT applies the GT predicate on the "satisfies" field.
func SatisfiesGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldSatisfies, v))
}

// SatisfiesGTE applies the GTE predicate on the "satisfies" field.
func SatisfiesGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldSatisfies, v))
}

// SatisfiesLT applies the LT predicate on the "satisfies" field.
func SatisfiesLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldSatisfies, v))
}

// SatisfiesLTE applies the LTE predicate on the "satisfies" field.
func SatisfiesLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldSatisfies, v))
}

// SatisfiesContains applies the Contains predicate on the "satisfies" field.
func SatisfiesContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldSatisfies, v))
}

// SatisfiesHasPrefix applies the HasPrefix predicate on the "satisfies" field.
func SatisfiesHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldSatisfies, v))
}

// SatisfiesHasSuffix applies the HasSuffix predicate on the "satisfies" field.
func SatisfiesHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldSatisfies, v))
}

// SatisfiesIsNil applies the IsNil predicate on the "satisfies" field.
func SatisfiesIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldSatisfies))
}

// SatisfiesNotNil applies the NotNil predicate on the "satisfies" field.
func SatisfiesNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldSatisfies))
}

// SatisfiesEqualFold applies the EqualFold predicate on the "satisfies" field.
func SatisfiesEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldSatisfies, v))
}

// SatisfiesContainsFold applies the ContainsFold predicate on the "satisfies" field.
func SatisfiesContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldSatisfies, v))
}

// DetailsIsNil applies the IsNil predicate on the "details" field.
func DetailsIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldDetails))
}

// DetailsNotNil applies the NotNil predicate on the "details" field.
func DetailsNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldDetails))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StandardHistory) predicate.StandardHistory {
	return predicate.StandardHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StandardHistory) predicate.StandardHistory {
	return predicate.StandardHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StandardHistory) predicate.StandardHistory {
	return predicate.StandardHistory(sql.NotPredicates(p))
}
