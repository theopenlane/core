// Code generated by ent, DO NOT EDIT.

package standardhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldRef, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// Revision applies equality check predicate on the "revision" field. It's identical to RevisionEQ.
func Revision(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldRevision, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldOwnerID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldName, v))
}

// ShortName applies equality check predicate on the "short_name" field. It's identical to ShortNameEQ.
func ShortName(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldShortName, v))
}

// Framework applies equality check predicate on the "framework" field. It's identical to FrameworkEQ.
func Framework(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldFramework, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDescription, v))
}

// GoverningBodyLogoURL applies equality check predicate on the "governing_body_logo_url" field. It's identical to GoverningBodyLogoURLEQ.
func GoverningBodyLogoURL(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldGoverningBodyLogoURL, v))
}

// GoverningBody applies equality check predicate on the "governing_body" field. It's identical to GoverningBodyEQ.
func GoverningBody(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldGoverningBody, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldLink, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldIsPublic, v))
}

// FreeToUse applies equality check predicate on the "free_to_use" field. It's identical to FreeToUseEQ.
func FreeToUse(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldFreeToUse, v))
}

// SystemOwned applies equality check predicate on the "system_owned" field. It's identical to SystemOwnedEQ.
func SystemOwned(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldSystemOwned, v))
}

// StandardType applies equality check predicate on the "standard_type" field. It's identical to StandardTypeEQ.
func StandardType(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldStandardType, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldVersion, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldRef))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldRef, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v history.OpType) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v history.OpType) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...history.OpType) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...history.OpType) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldTags))
}

// RevisionEQ applies the EQ predicate on the "revision" field.
func RevisionEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldRevision, v))
}

// RevisionNEQ applies the NEQ predicate on the "revision" field.
func RevisionNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldRevision, v))
}

// RevisionIn applies the In predicate on the "revision" field.
func RevisionIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldRevision, vs...))
}

// RevisionNotIn applies the NotIn predicate on the "revision" field.
func RevisionNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldRevision, vs...))
}

// RevisionGT applies the GT predicate on the "revision" field.
func RevisionGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldRevision, v))
}

// RevisionGTE applies the GTE predicate on the "revision" field.
func RevisionGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldRevision, v))
}

// RevisionLT applies the LT predicate on the "revision" field.
func RevisionLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldRevision, v))
}

// RevisionLTE applies the LTE predicate on the "revision" field.
func RevisionLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldRevision, v))
}

// RevisionContains applies the Contains predicate on the "revision" field.
func RevisionContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldRevision, v))
}

// RevisionHasPrefix applies the HasPrefix predicate on the "revision" field.
func RevisionHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldRevision, v))
}

// RevisionHasSuffix applies the HasSuffix predicate on the "revision" field.
func RevisionHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldRevision, v))
}

// RevisionIsNil applies the IsNil predicate on the "revision" field.
func RevisionIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldRevision))
}

// RevisionNotNil applies the NotNil predicate on the "revision" field.
func RevisionNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldRevision))
}

// RevisionEqualFold applies the EqualFold predicate on the "revision" field.
func RevisionEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldRevision, v))
}

// RevisionContainsFold applies the ContainsFold predicate on the "revision" field.
func RevisionContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldRevision, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldOwnerID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldName, v))
}

// ShortNameEQ applies the EQ predicate on the "short_name" field.
func ShortNameEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldShortName, v))
}

// ShortNameNEQ applies the NEQ predicate on the "short_name" field.
func ShortNameNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldShortName, v))
}

// ShortNameIn applies the In predicate on the "short_name" field.
func ShortNameIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldShortName, vs...))
}

// ShortNameNotIn applies the NotIn predicate on the "short_name" field.
func ShortNameNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldShortName, vs...))
}

// ShortNameGT applies the GT predicate on the "short_name" field.
func ShortNameGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldShortName, v))
}

// ShortNameGTE applies the GTE predicate on the "short_name" field.
func ShortNameGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldShortName, v))
}

// ShortNameLT applies the LT predicate on the "short_name" field.
func ShortNameLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldShortName, v))
}

// ShortNameLTE applies the LTE predicate on the "short_name" field.
func ShortNameLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldShortName, v))
}

// ShortNameContains applies the Contains predicate on the "short_name" field.
func ShortNameContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldShortName, v))
}

// ShortNameHasPrefix applies the HasPrefix predicate on the "short_name" field.
func ShortNameHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldShortName, v))
}

// ShortNameHasSuffix applies the HasSuffix predicate on the "short_name" field.
func ShortNameHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldShortName, v))
}

// ShortNameIsNil applies the IsNil predicate on the "short_name" field.
func ShortNameIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldShortName))
}

// ShortNameNotNil applies the NotNil predicate on the "short_name" field.
func ShortNameNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldShortName))
}

// ShortNameEqualFold applies the EqualFold predicate on the "short_name" field.
func ShortNameEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldShortName, v))
}

// ShortNameContainsFold applies the ContainsFold predicate on the "short_name" field.
func ShortNameContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldShortName, v))
}

// FrameworkEQ applies the EQ predicate on the "framework" field.
func FrameworkEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldFramework, v))
}

// FrameworkNEQ applies the NEQ predicate on the "framework" field.
func FrameworkNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldFramework, v))
}

// FrameworkIn applies the In predicate on the "framework" field.
func FrameworkIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldFramework, vs...))
}

// FrameworkNotIn applies the NotIn predicate on the "framework" field.
func FrameworkNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldFramework, vs...))
}

// FrameworkGT applies the GT predicate on the "framework" field.
func FrameworkGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldFramework, v))
}

// FrameworkGTE applies the GTE predicate on the "framework" field.
func FrameworkGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldFramework, v))
}

// FrameworkLT applies the LT predicate on the "framework" field.
func FrameworkLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldFramework, v))
}

// FrameworkLTE applies the LTE predicate on the "framework" field.
func FrameworkLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldFramework, v))
}

// FrameworkContains applies the Contains predicate on the "framework" field.
func FrameworkContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldFramework, v))
}

// FrameworkHasPrefix applies the HasPrefix predicate on the "framework" field.
func FrameworkHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldFramework, v))
}

// FrameworkHasSuffix applies the HasSuffix predicate on the "framework" field.
func FrameworkHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldFramework, v))
}

// FrameworkIsNil applies the IsNil predicate on the "framework" field.
func FrameworkIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldFramework))
}

// FrameworkNotNil applies the NotNil predicate on the "framework" field.
func FrameworkNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldFramework))
}

// FrameworkEqualFold applies the EqualFold predicate on the "framework" field.
func FrameworkEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldFramework, v))
}

// FrameworkContainsFold applies the ContainsFold predicate on the "framework" field.
func FrameworkContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldFramework, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldDescription, v))
}

// GoverningBodyLogoURLEQ applies the EQ predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLNEQ applies the NEQ predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLIn applies the In predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldGoverningBodyLogoURL, vs...))
}

// GoverningBodyLogoURLNotIn applies the NotIn predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldGoverningBodyLogoURL, vs...))
}

// GoverningBodyLogoURLGT applies the GT predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLGTE applies the GTE predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLLT applies the LT predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLLTE applies the LTE predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLContains applies the Contains predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLHasPrefix applies the HasPrefix predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLHasSuffix applies the HasSuffix predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLIsNil applies the IsNil predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldGoverningBodyLogoURL))
}

// GoverningBodyLogoURLNotNil applies the NotNil predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldGoverningBodyLogoURL))
}

// GoverningBodyLogoURLEqualFold applies the EqualFold predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyLogoURLContainsFold applies the ContainsFold predicate on the "governing_body_logo_url" field.
func GoverningBodyLogoURLContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldGoverningBodyLogoURL, v))
}

// GoverningBodyEQ applies the EQ predicate on the "governing_body" field.
func GoverningBodyEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldGoverningBody, v))
}

// GoverningBodyNEQ applies the NEQ predicate on the "governing_body" field.
func GoverningBodyNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldGoverningBody, v))
}

// GoverningBodyIn applies the In predicate on the "governing_body" field.
func GoverningBodyIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldGoverningBody, vs...))
}

// GoverningBodyNotIn applies the NotIn predicate on the "governing_body" field.
func GoverningBodyNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldGoverningBody, vs...))
}

// GoverningBodyGT applies the GT predicate on the "governing_body" field.
func GoverningBodyGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldGoverningBody, v))
}

// GoverningBodyGTE applies the GTE predicate on the "governing_body" field.
func GoverningBodyGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldGoverningBody, v))
}

// GoverningBodyLT applies the LT predicate on the "governing_body" field.
func GoverningBodyLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldGoverningBody, v))
}

// GoverningBodyLTE applies the LTE predicate on the "governing_body" field.
func GoverningBodyLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldGoverningBody, v))
}

// GoverningBodyContains applies the Contains predicate on the "governing_body" field.
func GoverningBodyContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldGoverningBody, v))
}

// GoverningBodyHasPrefix applies the HasPrefix predicate on the "governing_body" field.
func GoverningBodyHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldGoverningBody, v))
}

// GoverningBodyHasSuffix applies the HasSuffix predicate on the "governing_body" field.
func GoverningBodyHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldGoverningBody, v))
}

// GoverningBodyIsNil applies the IsNil predicate on the "governing_body" field.
func GoverningBodyIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldGoverningBody))
}

// GoverningBodyNotNil applies the NotNil predicate on the "governing_body" field.
func GoverningBodyNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldGoverningBody))
}

// GoverningBodyEqualFold applies the EqualFold predicate on the "governing_body" field.
func GoverningBodyEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldGoverningBody, v))
}

// GoverningBodyContainsFold applies the ContainsFold predicate on the "governing_body" field.
func GoverningBodyContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldGoverningBody, v))
}

// DomainsIsNil applies the IsNil predicate on the "domains" field.
func DomainsIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldDomains))
}

// DomainsNotNil applies the NotNil predicate on the "domains" field.
func DomainsNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldDomains))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldLink, v))
}

// LinkIsNil applies the IsNil predicate on the "link" field.
func LinkIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldLink))
}

// LinkNotNil applies the NotNil predicate on the "link" field.
func LinkNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldLink))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldLink, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.StandardStatus) predicate.StandardHistory {
	vc := v
	return predicate.StandardHistory(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.StandardStatus) predicate.StandardHistory {
	vc := v
	return predicate.StandardHistory(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.StandardStatus) predicate.StandardHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StandardHistory(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.StandardStatus) predicate.StandardHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StandardHistory(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldStatus))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldIsPublic, v))
}

// IsPublicIsNil applies the IsNil predicate on the "is_public" field.
func IsPublicIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldIsPublic))
}

// IsPublicNotNil applies the NotNil predicate on the "is_public" field.
func IsPublicNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldIsPublic))
}

// FreeToUseEQ applies the EQ predicate on the "free_to_use" field.
func FreeToUseEQ(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldFreeToUse, v))
}

// FreeToUseNEQ applies the NEQ predicate on the "free_to_use" field.
func FreeToUseNEQ(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldFreeToUse, v))
}

// FreeToUseIsNil applies the IsNil predicate on the "free_to_use" field.
func FreeToUseIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldFreeToUse))
}

// FreeToUseNotNil applies the NotNil predicate on the "free_to_use" field.
func FreeToUseNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldFreeToUse))
}

// SystemOwnedEQ applies the EQ predicate on the "system_owned" field.
func SystemOwnedEQ(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldSystemOwned, v))
}

// SystemOwnedNEQ applies the NEQ predicate on the "system_owned" field.
func SystemOwnedNEQ(v bool) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldSystemOwned, v))
}

// SystemOwnedIsNil applies the IsNil predicate on the "system_owned" field.
func SystemOwnedIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldSystemOwned))
}

// SystemOwnedNotNil applies the NotNil predicate on the "system_owned" field.
func SystemOwnedNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldSystemOwned))
}

// StandardTypeEQ applies the EQ predicate on the "standard_type" field.
func StandardTypeEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldStandardType, v))
}

// StandardTypeNEQ applies the NEQ predicate on the "standard_type" field.
func StandardTypeNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldStandardType, v))
}

// StandardTypeIn applies the In predicate on the "standard_type" field.
func StandardTypeIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldStandardType, vs...))
}

// StandardTypeNotIn applies the NotIn predicate on the "standard_type" field.
func StandardTypeNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldStandardType, vs...))
}

// StandardTypeGT applies the GT predicate on the "standard_type" field.
func StandardTypeGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldStandardType, v))
}

// StandardTypeGTE applies the GTE predicate on the "standard_type" field.
func StandardTypeGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldStandardType, v))
}

// StandardTypeLT applies the LT predicate on the "standard_type" field.
func StandardTypeLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldStandardType, v))
}

// StandardTypeLTE applies the LTE predicate on the "standard_type" field.
func StandardTypeLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldStandardType, v))
}

// StandardTypeContains applies the Contains predicate on the "standard_type" field.
func StandardTypeContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldStandardType, v))
}

// StandardTypeHasPrefix applies the HasPrefix predicate on the "standard_type" field.
func StandardTypeHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldStandardType, v))
}

// StandardTypeHasSuffix applies the HasSuffix predicate on the "standard_type" field.
func StandardTypeHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldStandardType, v))
}

// StandardTypeIsNil applies the IsNil predicate on the "standard_type" field.
func StandardTypeIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldStandardType))
}

// StandardTypeNotNil applies the NotNil predicate on the "standard_type" field.
func StandardTypeNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldStandardType))
}

// StandardTypeEqualFold applies the EqualFold predicate on the "standard_type" field.
func StandardTypeEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldStandardType, v))
}

// StandardTypeContainsFold applies the ContainsFold predicate on the "standard_type" field.
func StandardTypeContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldStandardType, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.StandardHistory {
	return predicate.StandardHistory(sql.FieldContainsFold(FieldVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StandardHistory) predicate.StandardHistory {
	return predicate.StandardHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StandardHistory) predicate.StandardHistory {
	return predicate.StandardHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StandardHistory) predicate.StandardHistory {
	return predicate.StandardHistory(sql.NotPredicates(p))
}
