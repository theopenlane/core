// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliance"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// StandardUpdate is the builder for updating Standard entities.
type StandardUpdate struct {
	config
	hooks     []Hook
	mutation  *StandardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StandardUpdate builder.
func (_u *StandardUpdate) Where(ps ...predicate.Standard) *StandardUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StandardUpdate) SetUpdatedAt(v time.Time) *StandardUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *StandardUpdate) ClearUpdatedAt() *StandardUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *StandardUpdate) SetUpdatedBy(v string) *StandardUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableUpdatedBy(v *string) *StandardUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *StandardUpdate) ClearUpdatedBy() *StandardUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *StandardUpdate) SetDeletedAt(v time.Time) *StandardUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableDeletedAt(v *time.Time) *StandardUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *StandardUpdate) ClearDeletedAt() *StandardUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *StandardUpdate) SetDeletedBy(v string) *StandardUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableDeletedBy(v *string) *StandardUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *StandardUpdate) ClearDeletedBy() *StandardUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *StandardUpdate) SetTags(v []string) *StandardUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *StandardUpdate) AppendTags(v []string) *StandardUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *StandardUpdate) ClearTags() *StandardUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *StandardUpdate) SetRevision(v string) *StandardUpdate {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableRevision(v *string) *StandardUpdate {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *StandardUpdate) ClearRevision() *StandardUpdate {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *StandardUpdate) SetOwnerID(v string) *StandardUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableOwnerID(v *string) *StandardUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *StandardUpdate) ClearOwnerID() *StandardUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *StandardUpdate) SetName(v string) *StandardUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableName(v *string) *StandardUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetShortName sets the "short_name" field.
func (_u *StandardUpdate) SetShortName(v string) *StandardUpdate {
	_u.mutation.SetShortName(v)
	return _u
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableShortName(v *string) *StandardUpdate {
	if v != nil {
		_u.SetShortName(*v)
	}
	return _u
}

// ClearShortName clears the value of the "short_name" field.
func (_u *StandardUpdate) ClearShortName() *StandardUpdate {
	_u.mutation.ClearShortName()
	return _u
}

// SetFramework sets the "framework" field.
func (_u *StandardUpdate) SetFramework(v string) *StandardUpdate {
	_u.mutation.SetFramework(v)
	return _u
}

// SetNillableFramework sets the "framework" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableFramework(v *string) *StandardUpdate {
	if v != nil {
		_u.SetFramework(*v)
	}
	return _u
}

// ClearFramework clears the value of the "framework" field.
func (_u *StandardUpdate) ClearFramework() *StandardUpdate {
	_u.mutation.ClearFramework()
	return _u
}

// SetDescription sets the "description" field.
func (_u *StandardUpdate) SetDescription(v string) *StandardUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableDescription(v *string) *StandardUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *StandardUpdate) ClearDescription() *StandardUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetGoverningBodyLogoURL sets the "governing_body_logo_url" field.
func (_u *StandardUpdate) SetGoverningBodyLogoURL(v string) *StandardUpdate {
	_u.mutation.SetGoverningBodyLogoURL(v)
	return _u
}

// SetNillableGoverningBodyLogoURL sets the "governing_body_logo_url" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableGoverningBodyLogoURL(v *string) *StandardUpdate {
	if v != nil {
		_u.SetGoverningBodyLogoURL(*v)
	}
	return _u
}

// ClearGoverningBodyLogoURL clears the value of the "governing_body_logo_url" field.
func (_u *StandardUpdate) ClearGoverningBodyLogoURL() *StandardUpdate {
	_u.mutation.ClearGoverningBodyLogoURL()
	return _u
}

// SetGoverningBody sets the "governing_body" field.
func (_u *StandardUpdate) SetGoverningBody(v string) *StandardUpdate {
	_u.mutation.SetGoverningBody(v)
	return _u
}

// SetNillableGoverningBody sets the "governing_body" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableGoverningBody(v *string) *StandardUpdate {
	if v != nil {
		_u.SetGoverningBody(*v)
	}
	return _u
}

// ClearGoverningBody clears the value of the "governing_body" field.
func (_u *StandardUpdate) ClearGoverningBody() *StandardUpdate {
	_u.mutation.ClearGoverningBody()
	return _u
}

// SetDomains sets the "domains" field.
func (_u *StandardUpdate) SetDomains(v []string) *StandardUpdate {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *StandardUpdate) AppendDomains(v []string) *StandardUpdate {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *StandardUpdate) ClearDomains() *StandardUpdate {
	_u.mutation.ClearDomains()
	return _u
}

// SetLink sets the "link" field.
func (_u *StandardUpdate) SetLink(v string) *StandardUpdate {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableLink(v *string) *StandardUpdate {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// ClearLink clears the value of the "link" field.
func (_u *StandardUpdate) ClearLink() *StandardUpdate {
	_u.mutation.ClearLink()
	return _u
}

// SetStatus sets the "status" field.
func (_u *StandardUpdate) SetStatus(v enums.StandardStatus) *StandardUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableStatus(v *enums.StandardStatus) *StandardUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *StandardUpdate) ClearStatus() *StandardUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *StandardUpdate) SetIsPublic(v bool) *StandardUpdate {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableIsPublic(v *bool) *StandardUpdate {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// ClearIsPublic clears the value of the "is_public" field.
func (_u *StandardUpdate) ClearIsPublic() *StandardUpdate {
	_u.mutation.ClearIsPublic()
	return _u
}

// SetFreeToUse sets the "free_to_use" field.
func (_u *StandardUpdate) SetFreeToUse(v bool) *StandardUpdate {
	_u.mutation.SetFreeToUse(v)
	return _u
}

// SetNillableFreeToUse sets the "free_to_use" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableFreeToUse(v *bool) *StandardUpdate {
	if v != nil {
		_u.SetFreeToUse(*v)
	}
	return _u
}

// ClearFreeToUse clears the value of the "free_to_use" field.
func (_u *StandardUpdate) ClearFreeToUse() *StandardUpdate {
	_u.mutation.ClearFreeToUse()
	return _u
}

// SetStandardType sets the "standard_type" field.
func (_u *StandardUpdate) SetStandardType(v string) *StandardUpdate {
	_u.mutation.SetStandardType(v)
	return _u
}

// SetNillableStandardType sets the "standard_type" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableStandardType(v *string) *StandardUpdate {
	if v != nil {
		_u.SetStandardType(*v)
	}
	return _u
}

// ClearStandardType clears the value of the "standard_type" field.
func (_u *StandardUpdate) ClearStandardType() *StandardUpdate {
	_u.mutation.ClearStandardType()
	return _u
}

// SetVersion sets the "version" field.
func (_u *StandardUpdate) SetVersion(v string) *StandardUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *StandardUpdate) SetNillableVersion(v *string) *StandardUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *StandardUpdate) ClearVersion() *StandardUpdate {
	_u.mutation.ClearVersion()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *StandardUpdate) SetOwner(v *Organization) *StandardUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *StandardUpdate) AddControlIDs(ids ...string) *StandardUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *StandardUpdate) AddControls(v ...*Control) *StandardUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddTrustCenterComplianceIDs adds the "trust_center_compliances" edge to the TrustCenterCompliance entity by IDs.
func (_u *StandardUpdate) AddTrustCenterComplianceIDs(ids ...string) *StandardUpdate {
	_u.mutation.AddTrustCenterComplianceIDs(ids...)
	return _u
}

// AddTrustCenterCompliances adds the "trust_center_compliances" edges to the TrustCenterCompliance entity.
func (_u *StandardUpdate) AddTrustCenterCompliances(v ...*TrustCenterCompliance) *StandardUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterComplianceIDs(ids...)
}

// Mutation returns the StandardMutation object of the builder.
func (_u *StandardUpdate) Mutation() *StandardMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *StandardUpdate) ClearOwner() *StandardUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *StandardUpdate) ClearControls() *StandardUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *StandardUpdate) RemoveControlIDs(ids ...string) *StandardUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *StandardUpdate) RemoveControls(v ...*Control) *StandardUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearTrustCenterCompliances clears all "trust_center_compliances" edges to the TrustCenterCompliance entity.
func (_u *StandardUpdate) ClearTrustCenterCompliances() *StandardUpdate {
	_u.mutation.ClearTrustCenterCompliances()
	return _u
}

// RemoveTrustCenterComplianceIDs removes the "trust_center_compliances" edge to TrustCenterCompliance entities by IDs.
func (_u *StandardUpdate) RemoveTrustCenterComplianceIDs(ids ...string) *StandardUpdate {
	_u.mutation.RemoveTrustCenterComplianceIDs(ids...)
	return _u
}

// RemoveTrustCenterCompliances removes "trust_center_compliances" edges to TrustCenterCompliance entities.
func (_u *StandardUpdate) RemoveTrustCenterCompliances(v ...*TrustCenterCompliance) *StandardUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterComplianceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StandardUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StandardUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StandardUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StandardUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StandardUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if standard.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized standard.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := standard.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *StandardUpdate) check() error {
	if v, ok := _u.mutation.Revision(); ok {
		if err := standard.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "Standard.revision": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := standard.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Standard.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GoverningBodyLogoURL(); ok {
		if err := standard.GoverningBodyLogoURLValidator(v); err != nil {
			return &ValidationError{Name: "governing_body_logo_url", err: fmt.Errorf(`generated: validator failed for field "Standard.governing_body_logo_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Link(); ok {
		if err := standard.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`generated: validator failed for field "Standard.link": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := standard.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Standard.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *StandardUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StandardUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *StandardUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(standard.Table, standard.Columns, sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(standard.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(standard.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(standard.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(standard.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(standard.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(standard.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(standard.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(standard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(standard.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(standard.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(standard.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standard.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(standard.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(standard.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(standard.FieldRevision, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(standard.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(standard.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ShortName(); ok {
		_spec.SetField(standard.FieldShortName, field.TypeString, value)
	}
	if _u.mutation.ShortNameCleared() {
		_spec.ClearField(standard.FieldShortName, field.TypeString)
	}
	if value, ok := _u.mutation.Framework(); ok {
		_spec.SetField(standard.FieldFramework, field.TypeString, value)
	}
	if _u.mutation.FrameworkCleared() {
		_spec.ClearField(standard.FieldFramework, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(standard.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(standard.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.GoverningBodyLogoURL(); ok {
		_spec.SetField(standard.FieldGoverningBodyLogoURL, field.TypeString, value)
	}
	if _u.mutation.GoverningBodyLogoURLCleared() {
		_spec.ClearField(standard.FieldGoverningBodyLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.GoverningBody(); ok {
		_spec.SetField(standard.FieldGoverningBody, field.TypeString, value)
	}
	if _u.mutation.GoverningBodyCleared() {
		_spec.ClearField(standard.FieldGoverningBody, field.TypeString)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(standard.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standard.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(standard.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(standard.FieldLink, field.TypeString, value)
	}
	if _u.mutation.LinkCleared() {
		_spec.ClearField(standard.FieldLink, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(standard.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(standard.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(standard.FieldIsPublic, field.TypeBool, value)
	}
	if _u.mutation.IsPublicCleared() {
		_spec.ClearField(standard.FieldIsPublic, field.TypeBool)
	}
	if value, ok := _u.mutation.FreeToUse(); ok {
		_spec.SetField(standard.FieldFreeToUse, field.TypeBool, value)
	}
	if _u.mutation.FreeToUseCleared() {
		_spec.ClearField(standard.FieldFreeToUse, field.TypeBool)
	}
	if value, ok := _u.mutation.StandardType(); ok {
		_spec.SetField(standard.FieldStandardType, field.TypeString, value)
	}
	if _u.mutation.StandardTypeCleared() {
		_spec.ClearField(standard.FieldStandardType, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(standard.FieldVersion, field.TypeString, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(standard.FieldVersion, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   standard.OwnerTable,
			Columns: []string{standard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   standard.OwnerTable,
			Columns: []string{standard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: []string{standard.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: []string{standard.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: []string{standard.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCenterCompliancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.TrustCenterCompliancesTable,
			Columns: []string{standard.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCenterCompliancesIDs(); len(nodes) > 0 && !_u.mutation.TrustCenterCompliancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.TrustCenterCompliancesTable,
			Columns: []string{standard.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterCompliancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.TrustCenterCompliancesTable,
			Columns: []string{standard.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Standard
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{standard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StandardUpdateOne is the builder for updating a single Standard entity.
type StandardUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StandardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StandardUpdateOne) SetUpdatedAt(v time.Time) *StandardUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *StandardUpdateOne) ClearUpdatedAt() *StandardUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *StandardUpdateOne) SetUpdatedBy(v string) *StandardUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableUpdatedBy(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *StandardUpdateOne) ClearUpdatedBy() *StandardUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *StandardUpdateOne) SetDeletedAt(v time.Time) *StandardUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableDeletedAt(v *time.Time) *StandardUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *StandardUpdateOne) ClearDeletedAt() *StandardUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *StandardUpdateOne) SetDeletedBy(v string) *StandardUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableDeletedBy(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *StandardUpdateOne) ClearDeletedBy() *StandardUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *StandardUpdateOne) SetTags(v []string) *StandardUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *StandardUpdateOne) AppendTags(v []string) *StandardUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *StandardUpdateOne) ClearTags() *StandardUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *StandardUpdateOne) SetRevision(v string) *StandardUpdateOne {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableRevision(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *StandardUpdateOne) ClearRevision() *StandardUpdateOne {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *StandardUpdateOne) SetOwnerID(v string) *StandardUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableOwnerID(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *StandardUpdateOne) ClearOwnerID() *StandardUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *StandardUpdateOne) SetName(v string) *StandardUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableName(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetShortName sets the "short_name" field.
func (_u *StandardUpdateOne) SetShortName(v string) *StandardUpdateOne {
	_u.mutation.SetShortName(v)
	return _u
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableShortName(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetShortName(*v)
	}
	return _u
}

// ClearShortName clears the value of the "short_name" field.
func (_u *StandardUpdateOne) ClearShortName() *StandardUpdateOne {
	_u.mutation.ClearShortName()
	return _u
}

// SetFramework sets the "framework" field.
func (_u *StandardUpdateOne) SetFramework(v string) *StandardUpdateOne {
	_u.mutation.SetFramework(v)
	return _u
}

// SetNillableFramework sets the "framework" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableFramework(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetFramework(*v)
	}
	return _u
}

// ClearFramework clears the value of the "framework" field.
func (_u *StandardUpdateOne) ClearFramework() *StandardUpdateOne {
	_u.mutation.ClearFramework()
	return _u
}

// SetDescription sets the "description" field.
func (_u *StandardUpdateOne) SetDescription(v string) *StandardUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableDescription(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *StandardUpdateOne) ClearDescription() *StandardUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetGoverningBodyLogoURL sets the "governing_body_logo_url" field.
func (_u *StandardUpdateOne) SetGoverningBodyLogoURL(v string) *StandardUpdateOne {
	_u.mutation.SetGoverningBodyLogoURL(v)
	return _u
}

// SetNillableGoverningBodyLogoURL sets the "governing_body_logo_url" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableGoverningBodyLogoURL(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetGoverningBodyLogoURL(*v)
	}
	return _u
}

// ClearGoverningBodyLogoURL clears the value of the "governing_body_logo_url" field.
func (_u *StandardUpdateOne) ClearGoverningBodyLogoURL() *StandardUpdateOne {
	_u.mutation.ClearGoverningBodyLogoURL()
	return _u
}

// SetGoverningBody sets the "governing_body" field.
func (_u *StandardUpdateOne) SetGoverningBody(v string) *StandardUpdateOne {
	_u.mutation.SetGoverningBody(v)
	return _u
}

// SetNillableGoverningBody sets the "governing_body" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableGoverningBody(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetGoverningBody(*v)
	}
	return _u
}

// ClearGoverningBody clears the value of the "governing_body" field.
func (_u *StandardUpdateOne) ClearGoverningBody() *StandardUpdateOne {
	_u.mutation.ClearGoverningBody()
	return _u
}

// SetDomains sets the "domains" field.
func (_u *StandardUpdateOne) SetDomains(v []string) *StandardUpdateOne {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *StandardUpdateOne) AppendDomains(v []string) *StandardUpdateOne {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *StandardUpdateOne) ClearDomains() *StandardUpdateOne {
	_u.mutation.ClearDomains()
	return _u
}

// SetLink sets the "link" field.
func (_u *StandardUpdateOne) SetLink(v string) *StandardUpdateOne {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableLink(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// ClearLink clears the value of the "link" field.
func (_u *StandardUpdateOne) ClearLink() *StandardUpdateOne {
	_u.mutation.ClearLink()
	return _u
}

// SetStatus sets the "status" field.
func (_u *StandardUpdateOne) SetStatus(v enums.StandardStatus) *StandardUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableStatus(v *enums.StandardStatus) *StandardUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *StandardUpdateOne) ClearStatus() *StandardUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *StandardUpdateOne) SetIsPublic(v bool) *StandardUpdateOne {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableIsPublic(v *bool) *StandardUpdateOne {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// ClearIsPublic clears the value of the "is_public" field.
func (_u *StandardUpdateOne) ClearIsPublic() *StandardUpdateOne {
	_u.mutation.ClearIsPublic()
	return _u
}

// SetFreeToUse sets the "free_to_use" field.
func (_u *StandardUpdateOne) SetFreeToUse(v bool) *StandardUpdateOne {
	_u.mutation.SetFreeToUse(v)
	return _u
}

// SetNillableFreeToUse sets the "free_to_use" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableFreeToUse(v *bool) *StandardUpdateOne {
	if v != nil {
		_u.SetFreeToUse(*v)
	}
	return _u
}

// ClearFreeToUse clears the value of the "free_to_use" field.
func (_u *StandardUpdateOne) ClearFreeToUse() *StandardUpdateOne {
	_u.mutation.ClearFreeToUse()
	return _u
}

// SetStandardType sets the "standard_type" field.
func (_u *StandardUpdateOne) SetStandardType(v string) *StandardUpdateOne {
	_u.mutation.SetStandardType(v)
	return _u
}

// SetNillableStandardType sets the "standard_type" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableStandardType(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetStandardType(*v)
	}
	return _u
}

// ClearStandardType clears the value of the "standard_type" field.
func (_u *StandardUpdateOne) ClearStandardType() *StandardUpdateOne {
	_u.mutation.ClearStandardType()
	return _u
}

// SetVersion sets the "version" field.
func (_u *StandardUpdateOne) SetVersion(v string) *StandardUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *StandardUpdateOne) SetNillableVersion(v *string) *StandardUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *StandardUpdateOne) ClearVersion() *StandardUpdateOne {
	_u.mutation.ClearVersion()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *StandardUpdateOne) SetOwner(v *Organization) *StandardUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *StandardUpdateOne) AddControlIDs(ids ...string) *StandardUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *StandardUpdateOne) AddControls(v ...*Control) *StandardUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddTrustCenterComplianceIDs adds the "trust_center_compliances" edge to the TrustCenterCompliance entity by IDs.
func (_u *StandardUpdateOne) AddTrustCenterComplianceIDs(ids ...string) *StandardUpdateOne {
	_u.mutation.AddTrustCenterComplianceIDs(ids...)
	return _u
}

// AddTrustCenterCompliances adds the "trust_center_compliances" edges to the TrustCenterCompliance entity.
func (_u *StandardUpdateOne) AddTrustCenterCompliances(v ...*TrustCenterCompliance) *StandardUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterComplianceIDs(ids...)
}

// Mutation returns the StandardMutation object of the builder.
func (_u *StandardUpdateOne) Mutation() *StandardMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *StandardUpdateOne) ClearOwner() *StandardUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *StandardUpdateOne) ClearControls() *StandardUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *StandardUpdateOne) RemoveControlIDs(ids ...string) *StandardUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *StandardUpdateOne) RemoveControls(v ...*Control) *StandardUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearTrustCenterCompliances clears all "trust_center_compliances" edges to the TrustCenterCompliance entity.
func (_u *StandardUpdateOne) ClearTrustCenterCompliances() *StandardUpdateOne {
	_u.mutation.ClearTrustCenterCompliances()
	return _u
}

// RemoveTrustCenterComplianceIDs removes the "trust_center_compliances" edge to TrustCenterCompliance entities by IDs.
func (_u *StandardUpdateOne) RemoveTrustCenterComplianceIDs(ids ...string) *StandardUpdateOne {
	_u.mutation.RemoveTrustCenterComplianceIDs(ids...)
	return _u
}

// RemoveTrustCenterCompliances removes "trust_center_compliances" edges to TrustCenterCompliance entities.
func (_u *StandardUpdateOne) RemoveTrustCenterCompliances(v ...*TrustCenterCompliance) *StandardUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterComplianceIDs(ids...)
}

// Where appends a list predicates to the StandardUpdate builder.
func (_u *StandardUpdateOne) Where(ps ...predicate.Standard) *StandardUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StandardUpdateOne) Select(field string, fields ...string) *StandardUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Standard entity.
func (_u *StandardUpdateOne) Save(ctx context.Context) (*Standard, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StandardUpdateOne) SaveX(ctx context.Context) *Standard {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StandardUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StandardUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StandardUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if standard.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized standard.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := standard.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *StandardUpdateOne) check() error {
	if v, ok := _u.mutation.Revision(); ok {
		if err := standard.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "Standard.revision": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := standard.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Standard.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GoverningBodyLogoURL(); ok {
		if err := standard.GoverningBodyLogoURLValidator(v); err != nil {
			return &ValidationError{Name: "governing_body_logo_url", err: fmt.Errorf(`generated: validator failed for field "Standard.governing_body_logo_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Link(); ok {
		if err := standard.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`generated: validator failed for field "Standard.link": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := standard.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Standard.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *StandardUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StandardUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *StandardUpdateOne) sqlSave(ctx context.Context) (_node *Standard, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(standard.Table, standard.Columns, sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Standard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, standard.FieldID)
		for _, f := range fields {
			if !standard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != standard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(standard.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(standard.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(standard.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(standard.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(standard.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(standard.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(standard.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(standard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(standard.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(standard.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(standard.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standard.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(standard.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(standard.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(standard.FieldRevision, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(standard.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(standard.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ShortName(); ok {
		_spec.SetField(standard.FieldShortName, field.TypeString, value)
	}
	if _u.mutation.ShortNameCleared() {
		_spec.ClearField(standard.FieldShortName, field.TypeString)
	}
	if value, ok := _u.mutation.Framework(); ok {
		_spec.SetField(standard.FieldFramework, field.TypeString, value)
	}
	if _u.mutation.FrameworkCleared() {
		_spec.ClearField(standard.FieldFramework, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(standard.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(standard.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.GoverningBodyLogoURL(); ok {
		_spec.SetField(standard.FieldGoverningBodyLogoURL, field.TypeString, value)
	}
	if _u.mutation.GoverningBodyLogoURLCleared() {
		_spec.ClearField(standard.FieldGoverningBodyLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.GoverningBody(); ok {
		_spec.SetField(standard.FieldGoverningBody, field.TypeString, value)
	}
	if _u.mutation.GoverningBodyCleared() {
		_spec.ClearField(standard.FieldGoverningBody, field.TypeString)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(standard.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standard.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(standard.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(standard.FieldLink, field.TypeString, value)
	}
	if _u.mutation.LinkCleared() {
		_spec.ClearField(standard.FieldLink, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(standard.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(standard.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(standard.FieldIsPublic, field.TypeBool, value)
	}
	if _u.mutation.IsPublicCleared() {
		_spec.ClearField(standard.FieldIsPublic, field.TypeBool)
	}
	if value, ok := _u.mutation.FreeToUse(); ok {
		_spec.SetField(standard.FieldFreeToUse, field.TypeBool, value)
	}
	if _u.mutation.FreeToUseCleared() {
		_spec.ClearField(standard.FieldFreeToUse, field.TypeBool)
	}
	if value, ok := _u.mutation.StandardType(); ok {
		_spec.SetField(standard.FieldStandardType, field.TypeString, value)
	}
	if _u.mutation.StandardTypeCleared() {
		_spec.ClearField(standard.FieldStandardType, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(standard.FieldVersion, field.TypeString, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(standard.FieldVersion, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   standard.OwnerTable,
			Columns: []string{standard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   standard.OwnerTable,
			Columns: []string{standard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: []string{standard.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: []string{standard.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: []string{standard.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCenterCompliancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.TrustCenterCompliancesTable,
			Columns: []string{standard.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCenterCompliancesIDs(); len(nodes) > 0 && !_u.mutation.TrustCenterCompliancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.TrustCenterCompliancesTable,
			Columns: []string{standard.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterCompliancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.TrustCenterCompliancesTable,
			Columns: []string{standard.TrustCenterCompliancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Standard
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Standard{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{standard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
