// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/standard"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// StandardUpdate is the builder for updating Standard entities.
type StandardUpdate struct {
	config
	hooks     []Hook
	mutation  *StandardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StandardUpdate builder.
func (su *StandardUpdate) Where(ps ...predicate.Standard) *StandardUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StandardUpdate) SetUpdatedAt(t time.Time) *StandardUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *StandardUpdate) ClearUpdatedAt() *StandardUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *StandardUpdate) SetUpdatedBy(s string) *StandardUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *StandardUpdate) SetNillableUpdatedBy(s *string) *StandardUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *StandardUpdate) ClearUpdatedBy() *StandardUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StandardUpdate) SetDeletedAt(t time.Time) *StandardUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StandardUpdate) SetNillableDeletedAt(t *time.Time) *StandardUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StandardUpdate) ClearDeletedAt() *StandardUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetDeletedBy sets the "deleted_by" field.
func (su *StandardUpdate) SetDeletedBy(s string) *StandardUpdate {
	su.mutation.SetDeletedBy(s)
	return su
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (su *StandardUpdate) SetNillableDeletedBy(s *string) *StandardUpdate {
	if s != nil {
		su.SetDeletedBy(*s)
	}
	return su
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (su *StandardUpdate) ClearDeletedBy() *StandardUpdate {
	su.mutation.ClearDeletedBy()
	return su
}

// SetTags sets the "tags" field.
func (su *StandardUpdate) SetTags(s []string) *StandardUpdate {
	su.mutation.SetTags(s)
	return su
}

// AppendTags appends s to the "tags" field.
func (su *StandardUpdate) AppendTags(s []string) *StandardUpdate {
	su.mutation.AppendTags(s)
	return su
}

// ClearTags clears the value of the "tags" field.
func (su *StandardUpdate) ClearTags() *StandardUpdate {
	su.mutation.ClearTags()
	return su
}

// SetName sets the "name" field.
func (su *StandardUpdate) SetName(s string) *StandardUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StandardUpdate) SetNillableName(s *string) *StandardUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *StandardUpdate) SetDescription(s string) *StandardUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *StandardUpdate) SetNillableDescription(s *string) *StandardUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *StandardUpdate) ClearDescription() *StandardUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetFamily sets the "family" field.
func (su *StandardUpdate) SetFamily(s string) *StandardUpdate {
	su.mutation.SetFamily(s)
	return su
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (su *StandardUpdate) SetNillableFamily(s *string) *StandardUpdate {
	if s != nil {
		su.SetFamily(*s)
	}
	return su
}

// ClearFamily clears the value of the "family" field.
func (su *StandardUpdate) ClearFamily() *StandardUpdate {
	su.mutation.ClearFamily()
	return su
}

// SetStatus sets the "status" field.
func (su *StandardUpdate) SetStatus(s string) *StandardUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StandardUpdate) SetNillableStatus(s *string) *StandardUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *StandardUpdate) ClearStatus() *StandardUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetStandardType sets the "standard_type" field.
func (su *StandardUpdate) SetStandardType(s string) *StandardUpdate {
	su.mutation.SetStandardType(s)
	return su
}

// SetNillableStandardType sets the "standard_type" field if the given value is not nil.
func (su *StandardUpdate) SetNillableStandardType(s *string) *StandardUpdate {
	if s != nil {
		su.SetStandardType(*s)
	}
	return su
}

// ClearStandardType clears the value of the "standard_type" field.
func (su *StandardUpdate) ClearStandardType() *StandardUpdate {
	su.mutation.ClearStandardType()
	return su
}

// SetVersion sets the "version" field.
func (su *StandardUpdate) SetVersion(s string) *StandardUpdate {
	su.mutation.SetVersion(s)
	return su
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (su *StandardUpdate) SetNillableVersion(s *string) *StandardUpdate {
	if s != nil {
		su.SetVersion(*s)
	}
	return su
}

// ClearVersion clears the value of the "version" field.
func (su *StandardUpdate) ClearVersion() *StandardUpdate {
	su.mutation.ClearVersion()
	return su
}

// SetPurposeAndScope sets the "purpose_and_scope" field.
func (su *StandardUpdate) SetPurposeAndScope(s string) *StandardUpdate {
	su.mutation.SetPurposeAndScope(s)
	return su
}

// SetNillablePurposeAndScope sets the "purpose_and_scope" field if the given value is not nil.
func (su *StandardUpdate) SetNillablePurposeAndScope(s *string) *StandardUpdate {
	if s != nil {
		su.SetPurposeAndScope(*s)
	}
	return su
}

// ClearPurposeAndScope clears the value of the "purpose_and_scope" field.
func (su *StandardUpdate) ClearPurposeAndScope() *StandardUpdate {
	su.mutation.ClearPurposeAndScope()
	return su
}

// SetBackground sets the "background" field.
func (su *StandardUpdate) SetBackground(s string) *StandardUpdate {
	su.mutation.SetBackground(s)
	return su
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (su *StandardUpdate) SetNillableBackground(s *string) *StandardUpdate {
	if s != nil {
		su.SetBackground(*s)
	}
	return su
}

// ClearBackground clears the value of the "background" field.
func (su *StandardUpdate) ClearBackground() *StandardUpdate {
	su.mutation.ClearBackground()
	return su
}

// SetSatisfies sets the "satisfies" field.
func (su *StandardUpdate) SetSatisfies(s string) *StandardUpdate {
	su.mutation.SetSatisfies(s)
	return su
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (su *StandardUpdate) SetNillableSatisfies(s *string) *StandardUpdate {
	if s != nil {
		su.SetSatisfies(*s)
	}
	return su
}

// ClearSatisfies clears the value of the "satisfies" field.
func (su *StandardUpdate) ClearSatisfies() *StandardUpdate {
	su.mutation.ClearSatisfies()
	return su
}

// SetDetails sets the "details" field.
func (su *StandardUpdate) SetDetails(m map[string]interface{}) *StandardUpdate {
	su.mutation.SetDetails(m)
	return su
}

// ClearDetails clears the value of the "details" field.
func (su *StandardUpdate) ClearDetails() *StandardUpdate {
	su.mutation.ClearDetails()
	return su
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (su *StandardUpdate) AddControlObjectiveIDs(ids ...string) *StandardUpdate {
	su.mutation.AddControlObjectiveIDs(ids...)
	return su
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (su *StandardUpdate) AddControlObjectives(c ...*ControlObjective) *StandardUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddControlObjectiveIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (su *StandardUpdate) AddControlIDs(ids ...string) *StandardUpdate {
	su.mutation.AddControlIDs(ids...)
	return su
}

// AddControls adds the "controls" edges to the Control entity.
func (su *StandardUpdate) AddControls(c ...*Control) *StandardUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (su *StandardUpdate) AddProcedureIDs(ids ...string) *StandardUpdate {
	su.mutation.AddProcedureIDs(ids...)
	return su
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (su *StandardUpdate) AddProcedures(p ...*Procedure) *StandardUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProcedureIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (su *StandardUpdate) AddActionPlanIDs(ids ...string) *StandardUpdate {
	su.mutation.AddActionPlanIDs(ids...)
	return su
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (su *StandardUpdate) AddActionPlans(a ...*ActionPlan) *StandardUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddActionPlanIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (su *StandardUpdate) AddProgramIDs(ids ...string) *StandardUpdate {
	su.mutation.AddProgramIDs(ids...)
	return su
}

// AddPrograms adds the "programs" edges to the Program entity.
func (su *StandardUpdate) AddPrograms(p ...*Program) *StandardUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProgramIDs(ids...)
}

// Mutation returns the StandardMutation object of the builder.
func (su *StandardUpdate) Mutation() *StandardMutation {
	return su.mutation
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (su *StandardUpdate) ClearControlObjectives() *StandardUpdate {
	su.mutation.ClearControlObjectives()
	return su
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (su *StandardUpdate) RemoveControlObjectiveIDs(ids ...string) *StandardUpdate {
	su.mutation.RemoveControlObjectiveIDs(ids...)
	return su
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (su *StandardUpdate) RemoveControlObjectives(c ...*ControlObjective) *StandardUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveControlObjectiveIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (su *StandardUpdate) ClearControls() *StandardUpdate {
	su.mutation.ClearControls()
	return su
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (su *StandardUpdate) RemoveControlIDs(ids ...string) *StandardUpdate {
	su.mutation.RemoveControlIDs(ids...)
	return su
}

// RemoveControls removes "controls" edges to Control entities.
func (su *StandardUpdate) RemoveControls(c ...*Control) *StandardUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveControlIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (su *StandardUpdate) ClearProcedures() *StandardUpdate {
	su.mutation.ClearProcedures()
	return su
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (su *StandardUpdate) RemoveProcedureIDs(ids ...string) *StandardUpdate {
	su.mutation.RemoveProcedureIDs(ids...)
	return su
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (su *StandardUpdate) RemoveProcedures(p ...*Procedure) *StandardUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProcedureIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (su *StandardUpdate) ClearActionPlans() *StandardUpdate {
	su.mutation.ClearActionPlans()
	return su
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (su *StandardUpdate) RemoveActionPlanIDs(ids ...string) *StandardUpdate {
	su.mutation.RemoveActionPlanIDs(ids...)
	return su
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (su *StandardUpdate) RemoveActionPlans(a ...*ActionPlan) *StandardUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveActionPlanIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (su *StandardUpdate) ClearPrograms() *StandardUpdate {
	su.mutation.ClearPrograms()
	return su
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (su *StandardUpdate) RemoveProgramIDs(ids ...string) *StandardUpdate {
	su.mutation.RemoveProgramIDs(ids...)
	return su
}

// RemovePrograms removes "programs" edges to Program entities.
func (su *StandardUpdate) RemovePrograms(p ...*Program) *StandardUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StandardUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StandardUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StandardUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StandardUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StandardUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		if standard.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized standard.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := standard.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *StandardUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := standard.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Standard.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StandardUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StandardUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StandardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(standard.Table, standard.Columns, sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(standard.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(standard.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(standard.FieldUpdatedAt, field.TypeTime)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(standard.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(standard.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(standard.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(standard.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(standard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.DeletedBy(); ok {
		_spec.SetField(standard.FieldDeletedBy, field.TypeString, value)
	}
	if su.mutation.DeletedByCleared() {
		_spec.ClearField(standard.FieldDeletedBy, field.TypeString)
	}
	if value, ok := su.mutation.Tags(); ok {
		_spec.SetField(standard.FieldTags, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standard.FieldTags, value)
		})
	}
	if su.mutation.TagsCleared() {
		_spec.ClearField(standard.FieldTags, field.TypeJSON)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(standard.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(standard.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(standard.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Family(); ok {
		_spec.SetField(standard.FieldFamily, field.TypeString, value)
	}
	if su.mutation.FamilyCleared() {
		_spec.ClearField(standard.FieldFamily, field.TypeString)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(standard.FieldStatus, field.TypeString, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(standard.FieldStatus, field.TypeString)
	}
	if value, ok := su.mutation.StandardType(); ok {
		_spec.SetField(standard.FieldStandardType, field.TypeString, value)
	}
	if su.mutation.StandardTypeCleared() {
		_spec.ClearField(standard.FieldStandardType, field.TypeString)
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(standard.FieldVersion, field.TypeString, value)
	}
	if su.mutation.VersionCleared() {
		_spec.ClearField(standard.FieldVersion, field.TypeString)
	}
	if value, ok := su.mutation.PurposeAndScope(); ok {
		_spec.SetField(standard.FieldPurposeAndScope, field.TypeString, value)
	}
	if su.mutation.PurposeAndScopeCleared() {
		_spec.ClearField(standard.FieldPurposeAndScope, field.TypeString)
	}
	if value, ok := su.mutation.Background(); ok {
		_spec.SetField(standard.FieldBackground, field.TypeString, value)
	}
	if su.mutation.BackgroundCleared() {
		_spec.ClearField(standard.FieldBackground, field.TypeString)
	}
	if value, ok := su.mutation.Satisfies(); ok {
		_spec.SetField(standard.FieldSatisfies, field.TypeString, value)
	}
	if su.mutation.SatisfiesCleared() {
		_spec.ClearField(standard.FieldSatisfies, field.TypeString)
	}
	if value, ok := su.mutation.Details(); ok {
		_spec.SetField(standard.FieldDetails, field.TypeJSON, value)
	}
	if su.mutation.DetailsCleared() {
		_spec.ClearField(standard.FieldDetails, field.TypeJSON)
	}
	if su.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlObjectivesTable,
			Columns: standard.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !su.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlObjectivesTable,
			Columns: standard.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlObjectivesTable,
			Columns: standard.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: standard.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedControlsIDs(); len(nodes) > 0 && !su.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: standard.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: standard.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ProceduresTable,
			Columns: []string{standard.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !su.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ProceduresTable,
			Columns: []string{standard.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ProceduresTable,
			Columns: []string{standard.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ActionPlansTable,
			Columns: standard.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !su.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ActionPlansTable,
			Columns: standard.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ActionPlansTable,
			Columns: standard.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ProgramsTable,
			Columns: standard.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardPrograms
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !su.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ProgramsTable,
			Columns: standard.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ProgramsTable,
			Columns: standard.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Standard
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{standard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StandardUpdateOne is the builder for updating a single Standard entity.
type StandardUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StandardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StandardUpdateOne) SetUpdatedAt(t time.Time) *StandardUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *StandardUpdateOne) ClearUpdatedAt() *StandardUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *StandardUpdateOne) SetUpdatedBy(s string) *StandardUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableUpdatedBy(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *StandardUpdateOne) ClearUpdatedBy() *StandardUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StandardUpdateOne) SetDeletedAt(t time.Time) *StandardUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableDeletedAt(t *time.Time) *StandardUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StandardUpdateOne) ClearDeletedAt() *StandardUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetDeletedBy sets the "deleted_by" field.
func (suo *StandardUpdateOne) SetDeletedBy(s string) *StandardUpdateOne {
	suo.mutation.SetDeletedBy(s)
	return suo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableDeletedBy(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetDeletedBy(*s)
	}
	return suo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (suo *StandardUpdateOne) ClearDeletedBy() *StandardUpdateOne {
	suo.mutation.ClearDeletedBy()
	return suo
}

// SetTags sets the "tags" field.
func (suo *StandardUpdateOne) SetTags(s []string) *StandardUpdateOne {
	suo.mutation.SetTags(s)
	return suo
}

// AppendTags appends s to the "tags" field.
func (suo *StandardUpdateOne) AppendTags(s []string) *StandardUpdateOne {
	suo.mutation.AppendTags(s)
	return suo
}

// ClearTags clears the value of the "tags" field.
func (suo *StandardUpdateOne) ClearTags() *StandardUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// SetName sets the "name" field.
func (suo *StandardUpdateOne) SetName(s string) *StandardUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableName(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *StandardUpdateOne) SetDescription(s string) *StandardUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableDescription(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *StandardUpdateOne) ClearDescription() *StandardUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetFamily sets the "family" field.
func (suo *StandardUpdateOne) SetFamily(s string) *StandardUpdateOne {
	suo.mutation.SetFamily(s)
	return suo
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableFamily(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetFamily(*s)
	}
	return suo
}

// ClearFamily clears the value of the "family" field.
func (suo *StandardUpdateOne) ClearFamily() *StandardUpdateOne {
	suo.mutation.ClearFamily()
	return suo
}

// SetStatus sets the "status" field.
func (suo *StandardUpdateOne) SetStatus(s string) *StandardUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableStatus(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *StandardUpdateOne) ClearStatus() *StandardUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetStandardType sets the "standard_type" field.
func (suo *StandardUpdateOne) SetStandardType(s string) *StandardUpdateOne {
	suo.mutation.SetStandardType(s)
	return suo
}

// SetNillableStandardType sets the "standard_type" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableStandardType(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetStandardType(*s)
	}
	return suo
}

// ClearStandardType clears the value of the "standard_type" field.
func (suo *StandardUpdateOne) ClearStandardType() *StandardUpdateOne {
	suo.mutation.ClearStandardType()
	return suo
}

// SetVersion sets the "version" field.
func (suo *StandardUpdateOne) SetVersion(s string) *StandardUpdateOne {
	suo.mutation.SetVersion(s)
	return suo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableVersion(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetVersion(*s)
	}
	return suo
}

// ClearVersion clears the value of the "version" field.
func (suo *StandardUpdateOne) ClearVersion() *StandardUpdateOne {
	suo.mutation.ClearVersion()
	return suo
}

// SetPurposeAndScope sets the "purpose_and_scope" field.
func (suo *StandardUpdateOne) SetPurposeAndScope(s string) *StandardUpdateOne {
	suo.mutation.SetPurposeAndScope(s)
	return suo
}

// SetNillablePurposeAndScope sets the "purpose_and_scope" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillablePurposeAndScope(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetPurposeAndScope(*s)
	}
	return suo
}

// ClearPurposeAndScope clears the value of the "purpose_and_scope" field.
func (suo *StandardUpdateOne) ClearPurposeAndScope() *StandardUpdateOne {
	suo.mutation.ClearPurposeAndScope()
	return suo
}

// SetBackground sets the "background" field.
func (suo *StandardUpdateOne) SetBackground(s string) *StandardUpdateOne {
	suo.mutation.SetBackground(s)
	return suo
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableBackground(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetBackground(*s)
	}
	return suo
}

// ClearBackground clears the value of the "background" field.
func (suo *StandardUpdateOne) ClearBackground() *StandardUpdateOne {
	suo.mutation.ClearBackground()
	return suo
}

// SetSatisfies sets the "satisfies" field.
func (suo *StandardUpdateOne) SetSatisfies(s string) *StandardUpdateOne {
	suo.mutation.SetSatisfies(s)
	return suo
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (suo *StandardUpdateOne) SetNillableSatisfies(s *string) *StandardUpdateOne {
	if s != nil {
		suo.SetSatisfies(*s)
	}
	return suo
}

// ClearSatisfies clears the value of the "satisfies" field.
func (suo *StandardUpdateOne) ClearSatisfies() *StandardUpdateOne {
	suo.mutation.ClearSatisfies()
	return suo
}

// SetDetails sets the "details" field.
func (suo *StandardUpdateOne) SetDetails(m map[string]interface{}) *StandardUpdateOne {
	suo.mutation.SetDetails(m)
	return suo
}

// ClearDetails clears the value of the "details" field.
func (suo *StandardUpdateOne) ClearDetails() *StandardUpdateOne {
	suo.mutation.ClearDetails()
	return suo
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (suo *StandardUpdateOne) AddControlObjectiveIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.AddControlObjectiveIDs(ids...)
	return suo
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (suo *StandardUpdateOne) AddControlObjectives(c ...*ControlObjective) *StandardUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddControlObjectiveIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (suo *StandardUpdateOne) AddControlIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.AddControlIDs(ids...)
	return suo
}

// AddControls adds the "controls" edges to the Control entity.
func (suo *StandardUpdateOne) AddControls(c ...*Control) *StandardUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (suo *StandardUpdateOne) AddProcedureIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.AddProcedureIDs(ids...)
	return suo
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (suo *StandardUpdateOne) AddProcedures(p ...*Procedure) *StandardUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProcedureIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (suo *StandardUpdateOne) AddActionPlanIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.AddActionPlanIDs(ids...)
	return suo
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (suo *StandardUpdateOne) AddActionPlans(a ...*ActionPlan) *StandardUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddActionPlanIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (suo *StandardUpdateOne) AddProgramIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.AddProgramIDs(ids...)
	return suo
}

// AddPrograms adds the "programs" edges to the Program entity.
func (suo *StandardUpdateOne) AddPrograms(p ...*Program) *StandardUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProgramIDs(ids...)
}

// Mutation returns the StandardMutation object of the builder.
func (suo *StandardUpdateOne) Mutation() *StandardMutation {
	return suo.mutation
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (suo *StandardUpdateOne) ClearControlObjectives() *StandardUpdateOne {
	suo.mutation.ClearControlObjectives()
	return suo
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (suo *StandardUpdateOne) RemoveControlObjectiveIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.RemoveControlObjectiveIDs(ids...)
	return suo
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (suo *StandardUpdateOne) RemoveControlObjectives(c ...*ControlObjective) *StandardUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveControlObjectiveIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (suo *StandardUpdateOne) ClearControls() *StandardUpdateOne {
	suo.mutation.ClearControls()
	return suo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (suo *StandardUpdateOne) RemoveControlIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.RemoveControlIDs(ids...)
	return suo
}

// RemoveControls removes "controls" edges to Control entities.
func (suo *StandardUpdateOne) RemoveControls(c ...*Control) *StandardUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveControlIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (suo *StandardUpdateOne) ClearProcedures() *StandardUpdateOne {
	suo.mutation.ClearProcedures()
	return suo
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (suo *StandardUpdateOne) RemoveProcedureIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.RemoveProcedureIDs(ids...)
	return suo
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (suo *StandardUpdateOne) RemoveProcedures(p ...*Procedure) *StandardUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProcedureIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (suo *StandardUpdateOne) ClearActionPlans() *StandardUpdateOne {
	suo.mutation.ClearActionPlans()
	return suo
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (suo *StandardUpdateOne) RemoveActionPlanIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.RemoveActionPlanIDs(ids...)
	return suo
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (suo *StandardUpdateOne) RemoveActionPlans(a ...*ActionPlan) *StandardUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveActionPlanIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (suo *StandardUpdateOne) ClearPrograms() *StandardUpdateOne {
	suo.mutation.ClearPrograms()
	return suo
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (suo *StandardUpdateOne) RemoveProgramIDs(ids ...string) *StandardUpdateOne {
	suo.mutation.RemoveProgramIDs(ids...)
	return suo
}

// RemovePrograms removes "programs" edges to Program entities.
func (suo *StandardUpdateOne) RemovePrograms(p ...*Program) *StandardUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the StandardUpdate builder.
func (suo *StandardUpdateOne) Where(ps ...predicate.Standard) *StandardUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StandardUpdateOne) Select(field string, fields ...string) *StandardUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Standard entity.
func (suo *StandardUpdateOne) Save(ctx context.Context) (*Standard, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StandardUpdateOne) SaveX(ctx context.Context) *Standard {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StandardUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StandardUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StandardUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		if standard.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized standard.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := standard.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *StandardUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := standard.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Standard.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StandardUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StandardUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StandardUpdateOne) sqlSave(ctx context.Context) (_node *Standard, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(standard.Table, standard.Columns, sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Standard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, standard.FieldID)
		for _, f := range fields {
			if !standard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != standard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(standard.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(standard.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(standard.FieldUpdatedAt, field.TypeTime)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(standard.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(standard.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(standard.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(standard.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(standard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.DeletedBy(); ok {
		_spec.SetField(standard.FieldDeletedBy, field.TypeString, value)
	}
	if suo.mutation.DeletedByCleared() {
		_spec.ClearField(standard.FieldDeletedBy, field.TypeString)
	}
	if value, ok := suo.mutation.Tags(); ok {
		_spec.SetField(standard.FieldTags, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standard.FieldTags, value)
		})
	}
	if suo.mutation.TagsCleared() {
		_spec.ClearField(standard.FieldTags, field.TypeJSON)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(standard.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(standard.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(standard.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Family(); ok {
		_spec.SetField(standard.FieldFamily, field.TypeString, value)
	}
	if suo.mutation.FamilyCleared() {
		_spec.ClearField(standard.FieldFamily, field.TypeString)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(standard.FieldStatus, field.TypeString, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(standard.FieldStatus, field.TypeString)
	}
	if value, ok := suo.mutation.StandardType(); ok {
		_spec.SetField(standard.FieldStandardType, field.TypeString, value)
	}
	if suo.mutation.StandardTypeCleared() {
		_spec.ClearField(standard.FieldStandardType, field.TypeString)
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(standard.FieldVersion, field.TypeString, value)
	}
	if suo.mutation.VersionCleared() {
		_spec.ClearField(standard.FieldVersion, field.TypeString)
	}
	if value, ok := suo.mutation.PurposeAndScope(); ok {
		_spec.SetField(standard.FieldPurposeAndScope, field.TypeString, value)
	}
	if suo.mutation.PurposeAndScopeCleared() {
		_spec.ClearField(standard.FieldPurposeAndScope, field.TypeString)
	}
	if value, ok := suo.mutation.Background(); ok {
		_spec.SetField(standard.FieldBackground, field.TypeString, value)
	}
	if suo.mutation.BackgroundCleared() {
		_spec.ClearField(standard.FieldBackground, field.TypeString)
	}
	if value, ok := suo.mutation.Satisfies(); ok {
		_spec.SetField(standard.FieldSatisfies, field.TypeString, value)
	}
	if suo.mutation.SatisfiesCleared() {
		_spec.ClearField(standard.FieldSatisfies, field.TypeString)
	}
	if value, ok := suo.mutation.Details(); ok {
		_spec.SetField(standard.FieldDetails, field.TypeJSON, value)
	}
	if suo.mutation.DetailsCleared() {
		_spec.ClearField(standard.FieldDetails, field.TypeJSON)
	}
	if suo.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlObjectivesTable,
			Columns: standard.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !suo.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlObjectivesTable,
			Columns: standard.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlObjectivesTable,
			Columns: standard.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: standard.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !suo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: standard.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: standard.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ProceduresTable,
			Columns: []string{standard.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !suo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ProceduresTable,
			Columns: []string{standard.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ProceduresTable,
			Columns: []string{standard.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ActionPlansTable,
			Columns: standard.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !suo.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ActionPlansTable,
			Columns: standard.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ActionPlansTable,
			Columns: standard.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ProgramsTable,
			Columns: standard.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardPrograms
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !suo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ProgramsTable,
			Columns: standard.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ProgramsTable,
			Columns: standard.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Standard
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Standard{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{standard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
