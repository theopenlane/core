// Code generated by ent, DO NOT EDIT.

package assessmentresponse

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldDeletedBy, v))
}

// AssessmentID applies equality check predicate on the "assessment_id" field. It's identical to AssessmentIDEQ.
func AssessmentID(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldAssessmentID, v))
}

// ResponderID applies equality check predicate on the "responder_id" field. It's identical to ResponderIDEQ.
func ResponderID(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldResponderID, v))
}

// AssignedAt applies equality check predicate on the "assigned_at" field. It's identical to AssignedAtEQ.
func AssignedAt(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldAssignedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldCompletedAt, v))
}

// DueDate applies equality check predicate on the "due_date" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldDueDate, v))
}

// ResponseDataID applies equality check predicate on the "response_data_id" field. It's identical to ResponseDataIDEQ.
func ResponseDataID(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldResponseDataID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldTags))
}

// AssessmentIDEQ applies the EQ predicate on the "assessment_id" field.
func AssessmentIDEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldAssessmentID, v))
}

// AssessmentIDNEQ applies the NEQ predicate on the "assessment_id" field.
func AssessmentIDNEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldAssessmentID, v))
}

// AssessmentIDIn applies the In predicate on the "assessment_id" field.
func AssessmentIDIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldAssessmentID, vs...))
}

// AssessmentIDNotIn applies the NotIn predicate on the "assessment_id" field.
func AssessmentIDNotIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldAssessmentID, vs...))
}

// AssessmentIDGT applies the GT predicate on the "assessment_id" field.
func AssessmentIDGT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldAssessmentID, v))
}

// AssessmentIDGTE applies the GTE predicate on the "assessment_id" field.
func AssessmentIDGTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldAssessmentID, v))
}

// AssessmentIDLT applies the LT predicate on the "assessment_id" field.
func AssessmentIDLT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldAssessmentID, v))
}

// AssessmentIDLTE applies the LTE predicate on the "assessment_id" field.
func AssessmentIDLTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldAssessmentID, v))
}

// AssessmentIDContains applies the Contains predicate on the "assessment_id" field.
func AssessmentIDContains(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContains(FieldAssessmentID, v))
}

// AssessmentIDHasPrefix applies the HasPrefix predicate on the "assessment_id" field.
func AssessmentIDHasPrefix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasPrefix(FieldAssessmentID, v))
}

// AssessmentIDHasSuffix applies the HasSuffix predicate on the "assessment_id" field.
func AssessmentIDHasSuffix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasSuffix(FieldAssessmentID, v))
}

// AssessmentIDEqualFold applies the EqualFold predicate on the "assessment_id" field.
func AssessmentIDEqualFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEqualFold(FieldAssessmentID, v))
}

// AssessmentIDContainsFold applies the ContainsFold predicate on the "assessment_id" field.
func AssessmentIDContainsFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContainsFold(FieldAssessmentID, v))
}

// ResponderIDEQ applies the EQ predicate on the "responder_id" field.
func ResponderIDEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldResponderID, v))
}

// ResponderIDNEQ applies the NEQ predicate on the "responder_id" field.
func ResponderIDNEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldResponderID, v))
}

// ResponderIDIn applies the In predicate on the "responder_id" field.
func ResponderIDIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldResponderID, vs...))
}

// ResponderIDNotIn applies the NotIn predicate on the "responder_id" field.
func ResponderIDNotIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldResponderID, vs...))
}

// ResponderIDGT applies the GT predicate on the "responder_id" field.
func ResponderIDGT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldResponderID, v))
}

// ResponderIDGTE applies the GTE predicate on the "responder_id" field.
func ResponderIDGTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldResponderID, v))
}

// ResponderIDLT applies the LT predicate on the "responder_id" field.
func ResponderIDLT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldResponderID, v))
}

// ResponderIDLTE applies the LTE predicate on the "responder_id" field.
func ResponderIDLTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldResponderID, v))
}

// ResponderIDContains applies the Contains predicate on the "responder_id" field.
func ResponderIDContains(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContains(FieldResponderID, v))
}

// ResponderIDHasPrefix applies the HasPrefix predicate on the "responder_id" field.
func ResponderIDHasPrefix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasPrefix(FieldResponderID, v))
}

// ResponderIDHasSuffix applies the HasSuffix predicate on the "responder_id" field.
func ResponderIDHasSuffix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasSuffix(FieldResponderID, v))
}

// ResponderIDEqualFold applies the EqualFold predicate on the "responder_id" field.
func ResponderIDEqualFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEqualFold(FieldResponderID, v))
}

// ResponderIDContainsFold applies the ContainsFold predicate on the "responder_id" field.
func ResponderIDContainsFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContainsFold(FieldResponderID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.AssessmentResponseStatus) predicate.AssessmentResponse {
	vc := v
	return predicate.AssessmentResponse(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.AssessmentResponseStatus) predicate.AssessmentResponse {
	vc := v
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.AssessmentResponseStatus) predicate.AssessmentResponse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssessmentResponse(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.AssessmentResponseStatus) predicate.AssessmentResponse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldStatus, v...))
}

// AssignedAtEQ applies the EQ predicate on the "assigned_at" field.
func AssignedAtEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldAssignedAt, v))
}

// AssignedAtNEQ applies the NEQ predicate on the "assigned_at" field.
func AssignedAtNEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldAssignedAt, v))
}

// AssignedAtIn applies the In predicate on the "assigned_at" field.
func AssignedAtIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldAssignedAt, vs...))
}

// AssignedAtNotIn applies the NotIn predicate on the "assigned_at" field.
func AssignedAtNotIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldAssignedAt, vs...))
}

// AssignedAtGT applies the GT predicate on the "assigned_at" field.
func AssignedAtGT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldAssignedAt, v))
}

// AssignedAtGTE applies the GTE predicate on the "assigned_at" field.
func AssignedAtGTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldAssignedAt, v))
}

// AssignedAtLT applies the LT predicate on the "assigned_at" field.
func AssignedAtLT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldAssignedAt, v))
}

// AssignedAtLTE applies the LTE predicate on the "assigned_at" field.
func AssignedAtLTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldAssignedAt, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldStartedAt, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldCompletedAt))
}

// DueDateEQ applies the EQ predicate on the "due_date" field.
func DueDateEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldDueDate, v))
}

// DueDateNEQ applies the NEQ predicate on the "due_date" field.
func DueDateNEQ(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldDueDate, v))
}

// DueDateIn applies the In predicate on the "due_date" field.
func DueDateIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldDueDate, vs...))
}

// DueDateNotIn applies the NotIn predicate on the "due_date" field.
func DueDateNotIn(vs ...time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldDueDate, vs...))
}

// DueDateGT applies the GT predicate on the "due_date" field.
func DueDateGT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldDueDate, v))
}

// DueDateGTE applies the GTE predicate on the "due_date" field.
func DueDateGTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldDueDate, v))
}

// DueDateLT applies the LT predicate on the "due_date" field.
func DueDateLT(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldDueDate, v))
}

// DueDateLTE applies the LTE predicate on the "due_date" field.
func DueDateLTE(v time.Time) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldDueDate, v))
}

// DueDateIsNil applies the IsNil predicate on the "due_date" field.
func DueDateIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldDueDate))
}

// DueDateNotNil applies the NotNil predicate on the "due_date" field.
func DueDateNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldDueDate))
}

// ResponseDataIDEQ applies the EQ predicate on the "response_data_id" field.
func ResponseDataIDEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEQ(FieldResponseDataID, v))
}

// ResponseDataIDNEQ applies the NEQ predicate on the "response_data_id" field.
func ResponseDataIDNEQ(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNEQ(FieldResponseDataID, v))
}

// ResponseDataIDIn applies the In predicate on the "response_data_id" field.
func ResponseDataIDIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIn(FieldResponseDataID, vs...))
}

// ResponseDataIDNotIn applies the NotIn predicate on the "response_data_id" field.
func ResponseDataIDNotIn(vs ...string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotIn(FieldResponseDataID, vs...))
}

// ResponseDataIDGT applies the GT predicate on the "response_data_id" field.
func ResponseDataIDGT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGT(FieldResponseDataID, v))
}

// ResponseDataIDGTE applies the GTE predicate on the "response_data_id" field.
func ResponseDataIDGTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldGTE(FieldResponseDataID, v))
}

// ResponseDataIDLT applies the LT predicate on the "response_data_id" field.
func ResponseDataIDLT(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLT(FieldResponseDataID, v))
}

// ResponseDataIDLTE applies the LTE predicate on the "response_data_id" field.
func ResponseDataIDLTE(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldLTE(FieldResponseDataID, v))
}

// ResponseDataIDContains applies the Contains predicate on the "response_data_id" field.
func ResponseDataIDContains(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContains(FieldResponseDataID, v))
}

// ResponseDataIDHasPrefix applies the HasPrefix predicate on the "response_data_id" field.
func ResponseDataIDHasPrefix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasPrefix(FieldResponseDataID, v))
}

// ResponseDataIDHasSuffix applies the HasSuffix predicate on the "response_data_id" field.
func ResponseDataIDHasSuffix(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldHasSuffix(FieldResponseDataID, v))
}

// ResponseDataIDIsNil applies the IsNil predicate on the "response_data_id" field.
func ResponseDataIDIsNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldIsNull(FieldResponseDataID))
}

// ResponseDataIDNotNil applies the NotNil predicate on the "response_data_id" field.
func ResponseDataIDNotNil() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldNotNull(FieldResponseDataID))
}

// ResponseDataIDEqualFold applies the EqualFold predicate on the "response_data_id" field.
func ResponseDataIDEqualFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldEqualFold(FieldResponseDataID, v))
}

// ResponseDataIDContainsFold applies the ContainsFold predicate on the "response_data_id" field.
func ResponseDataIDContainsFold(v string) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.FieldContainsFold(FieldResponseDataID, v))
}

// HasAssessment applies the HasEdge predicate on the "assessment" edge.
func HasAssessment() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssessmentTable, AssessmentColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Assessment
		step.Edge.Schema = schemaConfig.AssessmentResponse
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssessmentWith applies the HasEdge predicate on the "assessment" edge with a given conditions (other predicates).
func HasAssessmentWith(preds ...predicate.Assessment) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(func(s *sql.Selector) {
		step := newAssessmentStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Assessment
		step.Edge.Schema = schemaConfig.AssessmentResponse
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocument applies the HasEdge predicate on the "document" edge.
func HasDocument() predicate.AssessmentResponse {
	return predicate.AssessmentResponse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DocumentTable, DocumentColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.AssessmentResponse
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentWith applies the HasEdge predicate on the "document" edge with a given conditions (other predicates).
func HasDocumentWith(preds ...predicate.DocumentData) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(func(s *sql.Selector) {
		step := newDocumentStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.AssessmentResponse
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssessmentResponse) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssessmentResponse) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssessmentResponse) predicate.AssessmentResponse {
	return predicate.AssessmentResponse(sql.NotPredicates(p))
}
