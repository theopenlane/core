// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
)

// Narrative is the model entity for the Narrative schema.
type Narrative struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the name of the narrative
	Name string `json:"name,omitempty"`
	// the description of the narrative
	Description string `json:"description,omitempty"`
	// which controls are satisfied by the narrative
	Satisfies string `json:"satisfies,omitempty"`
	// json data for the narrative document
	Details map[string]interface{} `json:"details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NarrativeQuery when eager-loading is set.
	Edges        NarrativeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NarrativeEdges holds the relations/edges for other nodes in the graph.
type NarrativeEdges struct {
	// Policy holds the value of the policy edge.
	Policy []*InternalPolicy `json:"policy,omitempty"`
	// Control holds the value of the control edge.
	Control []*Control `json:"control,omitempty"`
	// Procedure holds the value of the procedure edge.
	Procedure []*Procedure `json:"procedure,omitempty"`
	// Controlobjective holds the value of the controlobjective edge.
	Controlobjective []*ControlObjective `json:"controlobjective,omitempty"`
	// Program holds the value of the program edge.
	Program []*Program `json:"program,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedPolicy           map[string][]*InternalPolicy
	namedControl          map[string][]*Control
	namedProcedure        map[string][]*Procedure
	namedControlobjective map[string][]*ControlObjective
	namedProgram          map[string][]*Program
}

// PolicyOrErr returns the Policy value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) PolicyOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[0] {
		return e.Policy, nil
	}
	return nil, &NotLoadedError{edge: "policy"}
}

// ControlOrErr returns the Control value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) ControlOrErr() ([]*Control, error) {
	if e.loadedTypes[1] {
		return e.Control, nil
	}
	return nil, &NotLoadedError{edge: "control"}
}

// ProcedureOrErr returns the Procedure value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) ProcedureOrErr() ([]*Procedure, error) {
	if e.loadedTypes[2] {
		return e.Procedure, nil
	}
	return nil, &NotLoadedError{edge: "procedure"}
}

// ControlobjectiveOrErr returns the Controlobjective value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) ControlobjectiveOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[3] {
		return e.Controlobjective, nil
	}
	return nil, &NotLoadedError{edge: "controlobjective"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) ProgramOrErr() ([]*Program, error) {
	if e.loadedTypes[4] {
		return e.Program, nil
	}
	return nil, &NotLoadedError{edge: "program"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Narrative) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case narrative.FieldTags, narrative.FieldDetails:
			values[i] = new([]byte)
		case narrative.FieldID, narrative.FieldCreatedBy, narrative.FieldUpdatedBy, narrative.FieldDeletedBy, narrative.FieldMappingID, narrative.FieldName, narrative.FieldDescription, narrative.FieldSatisfies:
			values[i] = new(sql.NullString)
		case narrative.FieldCreatedAt, narrative.FieldUpdatedAt, narrative.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Narrative fields.
func (n *Narrative) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case narrative.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				n.ID = value.String
			}
		case narrative.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case narrative.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case narrative.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				n.CreatedBy = value.String
			}
		case narrative.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				n.UpdatedBy = value.String
			}
		case narrative.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				n.DeletedAt = value.Time
			}
		case narrative.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				n.DeletedBy = value.String
			}
		case narrative.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				n.MappingID = value.String
			}
		case narrative.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case narrative.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case narrative.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				n.Description = value.String
			}
		case narrative.FieldSatisfies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field satisfies", values[i])
			} else if value.Valid {
				n.Satisfies = value.String
			}
		case narrative.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Narrative.
// This includes values selected through modifiers, order, etc.
func (n *Narrative) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryPolicy queries the "policy" edge of the Narrative entity.
func (n *Narrative) QueryPolicy() *InternalPolicyQuery {
	return NewNarrativeClient(n.config).QueryPolicy(n)
}

// QueryControl queries the "control" edge of the Narrative entity.
func (n *Narrative) QueryControl() *ControlQuery {
	return NewNarrativeClient(n.config).QueryControl(n)
}

// QueryProcedure queries the "procedure" edge of the Narrative entity.
func (n *Narrative) QueryProcedure() *ProcedureQuery {
	return NewNarrativeClient(n.config).QueryProcedure(n)
}

// QueryControlobjective queries the "controlobjective" edge of the Narrative entity.
func (n *Narrative) QueryControlobjective() *ControlObjectiveQuery {
	return NewNarrativeClient(n.config).QueryControlobjective(n)
}

// QueryProgram queries the "program" edge of the Narrative entity.
func (n *Narrative) QueryProgram() *ProgramQuery {
	return NewNarrativeClient(n.config).QueryProgram(n)
}

// Update returns a builder for updating this Narrative.
// Note that you need to call Narrative.Unwrap() before calling this method if this Narrative
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Narrative) Update() *NarrativeUpdateOne {
	return NewNarrativeClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Narrative entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Narrative) Unwrap() *Narrative {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("generated: Narrative is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Narrative) String() string {
	var builder strings.Builder
	builder.WriteString("Narrative(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(n.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(n.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(n.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(n.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(n.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", n.Tags))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(n.Description)
	builder.WriteString(", ")
	builder.WriteString("satisfies=")
	builder.WriteString(n.Satisfies)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", n.Details))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPolicy returns the Policy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedPolicy(name string) ([]*InternalPolicy, error) {
	if n.Edges.namedPolicy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedPolicy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedPolicy(name string, edges ...*InternalPolicy) {
	if n.Edges.namedPolicy == nil {
		n.Edges.namedPolicy = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		n.Edges.namedPolicy[name] = []*InternalPolicy{}
	} else {
		n.Edges.namedPolicy[name] = append(n.Edges.namedPolicy[name], edges...)
	}
}

// NamedControl returns the Control named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedControl(name string) ([]*Control, error) {
	if n.Edges.namedControl == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedControl[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedControl(name string, edges ...*Control) {
	if n.Edges.namedControl == nil {
		n.Edges.namedControl = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		n.Edges.namedControl[name] = []*Control{}
	} else {
		n.Edges.namedControl[name] = append(n.Edges.namedControl[name], edges...)
	}
}

// NamedProcedure returns the Procedure named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedProcedure(name string) ([]*Procedure, error) {
	if n.Edges.namedProcedure == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedProcedure[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedProcedure(name string, edges ...*Procedure) {
	if n.Edges.namedProcedure == nil {
		n.Edges.namedProcedure = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		n.Edges.namedProcedure[name] = []*Procedure{}
	} else {
		n.Edges.namedProcedure[name] = append(n.Edges.namedProcedure[name], edges...)
	}
}

// NamedControlobjective returns the Controlobjective named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedControlobjective(name string) ([]*ControlObjective, error) {
	if n.Edges.namedControlobjective == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedControlobjective[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedControlobjective(name string, edges ...*ControlObjective) {
	if n.Edges.namedControlobjective == nil {
		n.Edges.namedControlobjective = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		n.Edges.namedControlobjective[name] = []*ControlObjective{}
	} else {
		n.Edges.namedControlobjective[name] = append(n.Edges.namedControlobjective[name], edges...)
	}
}

// NamedProgram returns the Program named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedProgram(name string) ([]*Program, error) {
	if n.Edges.namedProgram == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedProgram[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedProgram(name string, edges ...*Program) {
	if n.Edges.namedProgram == nil {
		n.Edges.namedProgram = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		n.Edges.namedProgram[name] = []*Program{}
	} else {
		n.Edges.namedProgram[name] = append(n.Edges.namedProgram[name], edges...)
	}
}

// Narratives is a parsable slice of Narrative.
type Narratives []*Narrative
