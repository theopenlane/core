// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// Narrative is the model entity for the Narrative schema.
type Narrative struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the narrative
	Name string `json:"name,omitempty"`
	// the description of the narrative
	Description string `json:"description,omitempty"`
	// text data for the narrative document
	Details string `json:"details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NarrativeQuery when eager-loading is set.
	Edges                        NarrativeEdges `json:"edges"`
	control_objective_narratives *string
	internal_policy_narratives   *string
	procedure_narratives         *string
	subcontrol_narratives        *string
	selectValues                 sql.SelectValues
}

// NarrativeEdges holds the relations/edges for other nodes in the graph.
type NarrativeEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// groups that are blocked from viewing or editing the risk
	BlockedGroups []*Group `json:"blocked_groups,omitempty"`
	// provides edit access to the risk to members of the group
	Editors []*Group `json:"editors,omitempty"`
	// provides view access to the risk to members of the group
	Viewers []*Group `json:"viewers,omitempty"`
	// which controls are satisfied by the narrative
	Satisfies []*Control `json:"satisfies,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedBlockedGroups map[string][]*Group
	namedEditors       map[string][]*Group
	namedViewers       map[string][]*Group
	namedSatisfies     map[string][]*Control
	namedPrograms      map[string][]*Program
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NarrativeEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BlockedGroupsOrErr returns the BlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) BlockedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.BlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "blocked_groups"}
}

// EditorsOrErr returns the Editors value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) EditorsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Editors, nil
	}
	return nil, &NotLoadedError{edge: "editors"}
}

// ViewersOrErr returns the Viewers value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) ViewersOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Viewers, nil
	}
	return nil, &NotLoadedError{edge: "viewers"}
}

// SatisfiesOrErr returns the Satisfies value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) SatisfiesOrErr() ([]*Control, error) {
	if e.loadedTypes[4] {
		return e.Satisfies, nil
	}
	return nil, &NotLoadedError{edge: "satisfies"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e NarrativeEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[5] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Narrative) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case narrative.FieldTags:
			values[i] = new([]byte)
		case narrative.FieldID, narrative.FieldCreatedBy, narrative.FieldUpdatedBy, narrative.FieldDeletedBy, narrative.FieldDisplayID, narrative.FieldOwnerID, narrative.FieldName, narrative.FieldDescription, narrative.FieldDetails:
			values[i] = new(sql.NullString)
		case narrative.FieldCreatedAt, narrative.FieldUpdatedAt, narrative.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case narrative.ForeignKeys[0]: // control_objective_narratives
			values[i] = new(sql.NullString)
		case narrative.ForeignKeys[1]: // internal_policy_narratives
			values[i] = new(sql.NullString)
		case narrative.ForeignKeys[2]: // procedure_narratives
			values[i] = new(sql.NullString)
		case narrative.ForeignKeys[3]: // subcontrol_narratives
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Narrative fields.
func (n *Narrative) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case narrative.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				n.ID = value.String
			}
		case narrative.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case narrative.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case narrative.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				n.CreatedBy = value.String
			}
		case narrative.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				n.UpdatedBy = value.String
			}
		case narrative.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				n.DeletedAt = value.Time
			}
		case narrative.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				n.DeletedBy = value.String
			}
		case narrative.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				n.DisplayID = value.String
			}
		case narrative.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case narrative.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				n.OwnerID = value.String
			}
		case narrative.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case narrative.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				n.Description = value.String
			}
		case narrative.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				n.Details = value.String
			}
		case narrative.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_objective_narratives", values[i])
			} else if value.Valid {
				n.control_objective_narratives = new(string)
				*n.control_objective_narratives = value.String
			}
		case narrative.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_policy_narratives", values[i])
			} else if value.Valid {
				n.internal_policy_narratives = new(string)
				*n.internal_policy_narratives = value.String
			}
		case narrative.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field procedure_narratives", values[i])
			} else if value.Valid {
				n.procedure_narratives = new(string)
				*n.procedure_narratives = value.String
			}
		case narrative.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_narratives", values[i])
			} else if value.Valid {
				n.subcontrol_narratives = new(string)
				*n.subcontrol_narratives = value.String
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Narrative.
// This includes values selected through modifiers, order, etc.
func (n *Narrative) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Narrative entity.
func (n *Narrative) QueryOwner() *OrganizationQuery {
	return NewNarrativeClient(n.config).QueryOwner(n)
}

// QueryBlockedGroups queries the "blocked_groups" edge of the Narrative entity.
func (n *Narrative) QueryBlockedGroups() *GroupQuery {
	return NewNarrativeClient(n.config).QueryBlockedGroups(n)
}

// QueryEditors queries the "editors" edge of the Narrative entity.
func (n *Narrative) QueryEditors() *GroupQuery {
	return NewNarrativeClient(n.config).QueryEditors(n)
}

// QueryViewers queries the "viewers" edge of the Narrative entity.
func (n *Narrative) QueryViewers() *GroupQuery {
	return NewNarrativeClient(n.config).QueryViewers(n)
}

// QuerySatisfies queries the "satisfies" edge of the Narrative entity.
func (n *Narrative) QuerySatisfies() *ControlQuery {
	return NewNarrativeClient(n.config).QuerySatisfies(n)
}

// QueryPrograms queries the "programs" edge of the Narrative entity.
func (n *Narrative) QueryPrograms() *ProgramQuery {
	return NewNarrativeClient(n.config).QueryPrograms(n)
}

// Update returns a builder for updating this Narrative.
// Note that you need to call Narrative.Unwrap() before calling this method if this Narrative
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Narrative) Update() *NarrativeUpdateOne {
	return NewNarrativeClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Narrative entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Narrative) Unwrap() *Narrative {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("generated: Narrative is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Narrative) String() string {
	var builder strings.Builder
	builder.WriteString("Narrative(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(n.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(n.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(n.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(n.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(n.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", n.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(n.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(n.Description)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(n.Details)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockedGroups returns the BlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedBlockedGroups(name string) ([]*Group, error) {
	if n.Edges.namedBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedBlockedGroups(name string, edges ...*Group) {
	if n.Edges.namedBlockedGroups == nil {
		n.Edges.namedBlockedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		n.Edges.namedBlockedGroups[name] = []*Group{}
	} else {
		n.Edges.namedBlockedGroups[name] = append(n.Edges.namedBlockedGroups[name], edges...)
	}
}

// NamedEditors returns the Editors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedEditors(name string) ([]*Group, error) {
	if n.Edges.namedEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedEditors(name string, edges ...*Group) {
	if n.Edges.namedEditors == nil {
		n.Edges.namedEditors = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		n.Edges.namedEditors[name] = []*Group{}
	} else {
		n.Edges.namedEditors[name] = append(n.Edges.namedEditors[name], edges...)
	}
}

// NamedViewers returns the Viewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedViewers(name string) ([]*Group, error) {
	if n.Edges.namedViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedViewers(name string, edges ...*Group) {
	if n.Edges.namedViewers == nil {
		n.Edges.namedViewers = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		n.Edges.namedViewers[name] = []*Group{}
	} else {
		n.Edges.namedViewers[name] = append(n.Edges.namedViewers[name], edges...)
	}
}

// NamedSatisfies returns the Satisfies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedSatisfies(name string) ([]*Control, error) {
	if n.Edges.namedSatisfies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedSatisfies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedSatisfies(name string, edges ...*Control) {
	if n.Edges.namedSatisfies == nil {
		n.Edges.namedSatisfies = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		n.Edges.namedSatisfies[name] = []*Control{}
	} else {
		n.Edges.namedSatisfies[name] = append(n.Edges.namedSatisfies[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Narrative) NamedPrograms(name string) ([]*Program, error) {
	if n.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Narrative) appendNamedPrograms(name string, edges ...*Program) {
	if n.Edges.namedPrograms == nil {
		n.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		n.Edges.namedPrograms[name] = []*Program{}
	} else {
		n.Edges.namedPrograms[name] = append(n.Edges.namedPrograms[name], edges...)
	}
}

// Narratives is a parsable slice of Narrative.
type Narratives []*Narrative
