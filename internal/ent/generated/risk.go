// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// Risk is the model entity for the Risk schema.
type Risk struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID string `json:"created_by_id,omitempty"`
	// UpdatedByID holds the value of the "updated_by_id" field.
	UpdatedByID string `json:"updated_by_id,omitempty"`
	// CreatedByUserID holds the value of the "created_by_user_id" field.
	CreatedByUserID string `json:"created_by_user_id,omitempty"`
	// UpdatedByUserID holds the value of the "updated_by_user_id" field.
	UpdatedByUserID string `json:"updated_by_user_id,omitempty"`
	// CreatedByServiceID holds the value of the "created_by_service_id" field.
	CreatedByServiceID string `json:"created_by_service_id,omitempty"`
	// UpdatedByServiceID holds the value of the "updated_by_service_id" field.
	UpdatedByServiceID string `json:"updated_by_service_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedByID holds the value of the "deleted_by_id" field.
	DeletedByID string `json:"deleted_by_id,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the risk
	Name string `json:"name,omitempty"`
	// description of the risk
	Description string `json:"description,omitempty"`
	// status of the risk - mitigated or not, inflight, etc.
	Status string `json:"status,omitempty"`
	// type of the risk, e.g. strategic, operational, financial, external, etc.
	RiskType string `json:"risk_type,omitempty"`
	// business costs associated with the risk
	BusinessCosts string `json:"business_costs,omitempty"`
	// impact of the risk - high, medium, low
	Impact enums.RiskImpact `json:"impact,omitempty"`
	// likelihood of the risk occurring; unlikely, likely, highly likely
	Likelihood enums.RiskLikelihood `json:"likelihood,omitempty"`
	// mitigation for the risk
	Mitigation string `json:"mitigation,omitempty"`
	// which controls are satisfied by the risk
	Satisfies string `json:"satisfies,omitempty"`
	// json data for the risk document
	Details map[string]interface{} `json:"details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RiskQuery when eager-loading is set.
	Edges                   RiskEdges `json:"edges"`
	control_objective_risks *string
	selectValues            sql.SelectValues

	// CreatedBy includes the details about the user or service that created the object
	CreatedBy models.Actor `json:"created_by,omitempty"`
	// UpdatedBy includes the details about the user or service that last updated the object
	UpdatedBy models.Actor `json:"updated_by,omitempty"`
}

// RiskEdges holds the relations/edges for other nodes in the graph.
type RiskEdges struct {
	// CreatedByUser holds the value of the created_by_user edge.
	CreatedByUser *User `json:"created_by_user,omitempty"`
	// UpdatedByUser holds the value of the updated_by_user edge.
	UpdatedByUser *User `json:"updated_by_user,omitempty"`
	// CreatedByService holds the value of the created_by_service edge.
	CreatedByService *APIToken `json:"created_by_service,omitempty"`
	// UpdatedByService holds the value of the updated_by_service edge.
	UpdatedByService *APIToken `json:"updated_by_service,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// groups that are blocked from viewing or editing the risk
	BlockedGroups []*Group `json:"blocked_groups,omitempty"`
	// provides edit access to the risk to members of the group
	Editors []*Group `json:"editors,omitempty"`
	// provides view access to the risk to members of the group
	Viewers []*Group `json:"viewers,omitempty"`
	// Control holds the value of the control edge.
	Control []*Control `json:"control,omitempty"`
	// Procedure holds the value of the procedure edge.
	Procedure []*Procedure `json:"procedure,omitempty"`
	// ActionPlans holds the value of the action_plans edge.
	ActionPlans []*ActionPlan `json:"action_plans,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
	// totalCount holds the count of the edges above.
	totalCount [12]map[string]int

	namedBlockedGroups map[string][]*Group
	namedEditors       map[string][]*Group
	namedViewers       map[string][]*Group
	namedControl       map[string][]*Control
	namedProcedure     map[string][]*Procedure
	namedActionPlans   map[string][]*ActionPlan
	namedPrograms      map[string][]*Program
}

// CreatedByUserOrErr returns the CreatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) CreatedByUserOrErr() (*User, error) {
	if e.CreatedByUser != nil {
		return e.CreatedByUser, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_user"}
}

// UpdatedByUserOrErr returns the UpdatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) UpdatedByUserOrErr() (*User, error) {
	if e.UpdatedByUser != nil {
		return e.UpdatedByUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by_user"}
}

// CreatedByServiceOrErr returns the CreatedByService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) CreatedByServiceOrErr() (*APIToken, error) {
	if e.CreatedByService != nil {
		return e.CreatedByService, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: apitoken.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_service"}
}

// UpdatedByServiceOrErr returns the UpdatedByService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) UpdatedByServiceOrErr() (*APIToken, error) {
	if e.UpdatedByService != nil {
		return e.UpdatedByService, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: apitoken.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by_service"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiskEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BlockedGroupsOrErr returns the BlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e RiskEdges) BlockedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[5] {
		return e.BlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "blocked_groups"}
}

// EditorsOrErr returns the Editors value or an error if the edge
// was not loaded in eager-loading.
func (e RiskEdges) EditorsOrErr() ([]*Group, error) {
	if e.loadedTypes[6] {
		return e.Editors, nil
	}
	return nil, &NotLoadedError{edge: "editors"}
}

// ViewersOrErr returns the Viewers value or an error if the edge
// was not loaded in eager-loading.
func (e RiskEdges) ViewersOrErr() ([]*Group, error) {
	if e.loadedTypes[7] {
		return e.Viewers, nil
	}
	return nil, &NotLoadedError{edge: "viewers"}
}

// ControlOrErr returns the Control value or an error if the edge
// was not loaded in eager-loading.
func (e RiskEdges) ControlOrErr() ([]*Control, error) {
	if e.loadedTypes[8] {
		return e.Control, nil
	}
	return nil, &NotLoadedError{edge: "control"}
}

// ProcedureOrErr returns the Procedure value or an error if the edge
// was not loaded in eager-loading.
func (e RiskEdges) ProcedureOrErr() ([]*Procedure, error) {
	if e.loadedTypes[9] {
		return e.Procedure, nil
	}
	return nil, &NotLoadedError{edge: "procedure"}
}

// ActionPlansOrErr returns the ActionPlans value or an error if the edge
// was not loaded in eager-loading.
func (e RiskEdges) ActionPlansOrErr() ([]*ActionPlan, error) {
	if e.loadedTypes[10] {
		return e.ActionPlans, nil
	}
	return nil, &NotLoadedError{edge: "action_plans"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e RiskEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[11] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Risk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case risk.FieldTags, risk.FieldDetails:
			values[i] = new([]byte)
		case risk.FieldID, risk.FieldCreatedByID, risk.FieldUpdatedByID, risk.FieldCreatedByUserID, risk.FieldUpdatedByUserID, risk.FieldCreatedByServiceID, risk.FieldUpdatedByServiceID, risk.FieldDeletedByID, risk.FieldMappingID, risk.FieldOwnerID, risk.FieldName, risk.FieldDescription, risk.FieldStatus, risk.FieldRiskType, risk.FieldBusinessCosts, risk.FieldImpact, risk.FieldLikelihood, risk.FieldMitigation, risk.FieldSatisfies:
			values[i] = new(sql.NullString)
		case risk.FieldCreatedAt, risk.FieldUpdatedAt, risk.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case risk.ForeignKeys[0]: // control_objective_risks
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Risk fields.
func (r *Risk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case risk.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case risk.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case risk.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case risk.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				r.CreatedByID = value.String
			}
		case risk.FieldUpdatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_id", values[i])
			} else if value.Valid {
				r.UpdatedByID = value.String
			}
		case risk.FieldCreatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_id", values[i])
			} else if value.Valid {
				r.CreatedByUserID = value.String
			}
		case risk.FieldUpdatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_user_id", values[i])
			} else if value.Valid {
				r.UpdatedByUserID = value.String
			}
		case risk.FieldCreatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_service_id", values[i])
			} else if value.Valid {
				r.CreatedByServiceID = value.String
			}
		case risk.FieldUpdatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_service_id", values[i])
			} else if value.Valid {
				r.UpdatedByServiceID = value.String
			}
		case risk.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = value.Time
			}
		case risk.FieldDeletedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by_id", values[i])
			} else if value.Valid {
				r.DeletedByID = value.String
			}
		case risk.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				r.MappingID = value.String
			}
		case risk.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case risk.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				r.OwnerID = value.String
			}
		case risk.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case risk.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case risk.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = value.String
			}
		case risk.FieldRiskType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field risk_type", values[i])
			} else if value.Valid {
				r.RiskType = value.String
			}
		case risk.FieldBusinessCosts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_costs", values[i])
			} else if value.Valid {
				r.BusinessCosts = value.String
			}
		case risk.FieldImpact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field impact", values[i])
			} else if value.Valid {
				r.Impact = enums.RiskImpact(value.String)
			}
		case risk.FieldLikelihood:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field likelihood", values[i])
			} else if value.Valid {
				r.Likelihood = enums.RiskLikelihood(value.String)
			}
		case risk.FieldMitigation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mitigation", values[i])
			} else if value.Valid {
				r.Mitigation = value.String
			}
		case risk.FieldSatisfies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field satisfies", values[i])
			} else if value.Valid {
				r.Satisfies = value.String
			}
		case risk.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		case risk.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_objective_risks", values[i])
			} else if value.Valid {
				r.control_objective_risks = new(string)
				*r.control_objective_risks = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Risk.
// This includes values selected through modifiers, order, etc.
func (r *Risk) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryCreatedByUser queries the "created_by_user" edge of the Risk entity.
func (r *Risk) QueryCreatedByUser() *UserQuery {
	return NewRiskClient(r.config).QueryCreatedByUser(r)
}

// QueryUpdatedByUser queries the "updated_by_user" edge of the Risk entity.
func (r *Risk) QueryUpdatedByUser() *UserQuery {
	return NewRiskClient(r.config).QueryUpdatedByUser(r)
}

// QueryCreatedByService queries the "created_by_service" edge of the Risk entity.
func (r *Risk) QueryCreatedByService() *APITokenQuery {
	return NewRiskClient(r.config).QueryCreatedByService(r)
}

// QueryUpdatedByService queries the "updated_by_service" edge of the Risk entity.
func (r *Risk) QueryUpdatedByService() *APITokenQuery {
	return NewRiskClient(r.config).QueryUpdatedByService(r)
}

// QueryOwner queries the "owner" edge of the Risk entity.
func (r *Risk) QueryOwner() *OrganizationQuery {
	return NewRiskClient(r.config).QueryOwner(r)
}

// QueryBlockedGroups queries the "blocked_groups" edge of the Risk entity.
func (r *Risk) QueryBlockedGroups() *GroupQuery {
	return NewRiskClient(r.config).QueryBlockedGroups(r)
}

// QueryEditors queries the "editors" edge of the Risk entity.
func (r *Risk) QueryEditors() *GroupQuery {
	return NewRiskClient(r.config).QueryEditors(r)
}

// QueryViewers queries the "viewers" edge of the Risk entity.
func (r *Risk) QueryViewers() *GroupQuery {
	return NewRiskClient(r.config).QueryViewers(r)
}

// QueryControl queries the "control" edge of the Risk entity.
func (r *Risk) QueryControl() *ControlQuery {
	return NewRiskClient(r.config).QueryControl(r)
}

// QueryProcedure queries the "procedure" edge of the Risk entity.
func (r *Risk) QueryProcedure() *ProcedureQuery {
	return NewRiskClient(r.config).QueryProcedure(r)
}

// QueryActionPlans queries the "action_plans" edge of the Risk entity.
func (r *Risk) QueryActionPlans() *ActionPlanQuery {
	return NewRiskClient(r.config).QueryActionPlans(r)
}

// QueryPrograms queries the "programs" edge of the Risk entity.
func (r *Risk) QueryPrograms() *ProgramQuery {
	return NewRiskClient(r.config).QueryPrograms(r)
}

// Update returns a builder for updating this Risk.
// Note that you need to call Risk.Unwrap() before calling this method if this Risk
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Risk) Update() *RiskUpdateOne {
	return NewRiskClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Risk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Risk) Unwrap() *Risk {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("generated: Risk is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Risk) String() string {
	var builder strings.Builder
	builder.WriteString("Risk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by_id=")
	builder.WriteString(r.CreatedByID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_id=")
	builder.WriteString(r.UpdatedByID)
	builder.WriteString(", ")
	builder.WriteString("created_by_user_id=")
	builder.WriteString(r.CreatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_user_id=")
	builder.WriteString(r.UpdatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("created_by_service_id=")
	builder.WriteString(r.CreatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_service_id=")
	builder.WriteString(r.UpdatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(r.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by_id=")
	builder.WriteString(r.DeletedByID)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(r.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", r.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(r.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(r.Status)
	builder.WriteString(", ")
	builder.WriteString("risk_type=")
	builder.WriteString(r.RiskType)
	builder.WriteString(", ")
	builder.WriteString("business_costs=")
	builder.WriteString(r.BusinessCosts)
	builder.WriteString(", ")
	builder.WriteString("impact=")
	builder.WriteString(fmt.Sprintf("%v", r.Impact))
	builder.WriteString(", ")
	builder.WriteString("likelihood=")
	builder.WriteString(fmt.Sprintf("%v", r.Likelihood))
	builder.WriteString(", ")
	builder.WriteString("mitigation=")
	builder.WriteString(r.Mitigation)
	builder.WriteString(", ")
	builder.WriteString("satisfies=")
	builder.WriteString(r.Satisfies)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", r.Details))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockedGroups returns the BlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Risk) NamedBlockedGroups(name string) ([]*Group, error) {
	if r.Edges.namedBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Risk) appendNamedBlockedGroups(name string, edges ...*Group) {
	if r.Edges.namedBlockedGroups == nil {
		r.Edges.namedBlockedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		r.Edges.namedBlockedGroups[name] = []*Group{}
	} else {
		r.Edges.namedBlockedGroups[name] = append(r.Edges.namedBlockedGroups[name], edges...)
	}
}

// NamedEditors returns the Editors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Risk) NamedEditors(name string) ([]*Group, error) {
	if r.Edges.namedEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Risk) appendNamedEditors(name string, edges ...*Group) {
	if r.Edges.namedEditors == nil {
		r.Edges.namedEditors = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		r.Edges.namedEditors[name] = []*Group{}
	} else {
		r.Edges.namedEditors[name] = append(r.Edges.namedEditors[name], edges...)
	}
}

// NamedViewers returns the Viewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Risk) NamedViewers(name string) ([]*Group, error) {
	if r.Edges.namedViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Risk) appendNamedViewers(name string, edges ...*Group) {
	if r.Edges.namedViewers == nil {
		r.Edges.namedViewers = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		r.Edges.namedViewers[name] = []*Group{}
	} else {
		r.Edges.namedViewers[name] = append(r.Edges.namedViewers[name], edges...)
	}
}

// NamedControl returns the Control named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Risk) NamedControl(name string) ([]*Control, error) {
	if r.Edges.namedControl == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedControl[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Risk) appendNamedControl(name string, edges ...*Control) {
	if r.Edges.namedControl == nil {
		r.Edges.namedControl = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		r.Edges.namedControl[name] = []*Control{}
	} else {
		r.Edges.namedControl[name] = append(r.Edges.namedControl[name], edges...)
	}
}

// NamedProcedure returns the Procedure named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Risk) NamedProcedure(name string) ([]*Procedure, error) {
	if r.Edges.namedProcedure == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedProcedure[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Risk) appendNamedProcedure(name string, edges ...*Procedure) {
	if r.Edges.namedProcedure == nil {
		r.Edges.namedProcedure = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		r.Edges.namedProcedure[name] = []*Procedure{}
	} else {
		r.Edges.namedProcedure[name] = append(r.Edges.namedProcedure[name], edges...)
	}
}

// NamedActionPlans returns the ActionPlans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Risk) NamedActionPlans(name string) ([]*ActionPlan, error) {
	if r.Edges.namedActionPlans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedActionPlans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Risk) appendNamedActionPlans(name string, edges ...*ActionPlan) {
	if r.Edges.namedActionPlans == nil {
		r.Edges.namedActionPlans = make(map[string][]*ActionPlan)
	}
	if len(edges) == 0 {
		r.Edges.namedActionPlans[name] = []*ActionPlan{}
	} else {
		r.Edges.namedActionPlans[name] = append(r.Edges.namedActionPlans[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Risk) NamedPrograms(name string) ([]*Program, error) {
	if r.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Risk) appendNamedPrograms(name string, edges ...*Program) {
	if r.Edges.namedPrograms == nil {
		r.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		r.Edges.namedPrograms[name] = []*Program{}
	} else {
		r.Edges.namedPrograms[name] = append(r.Edges.namedPrograms[name], edges...)
	}
}

// Risks is a parsable slice of Risk.
type Risks []*Risk
