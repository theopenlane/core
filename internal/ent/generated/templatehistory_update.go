// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/templatehistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TemplateHistoryUpdate is the builder for updating TemplateHistory entities.
type TemplateHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TemplateHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TemplateHistoryUpdate builder.
func (_u *TemplateHistoryUpdate) Where(ps ...predicate.TemplateHistory) *TemplateHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TemplateHistoryUpdate) SetUpdatedAt(v time.Time) *TemplateHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TemplateHistoryUpdate) ClearUpdatedAt() *TemplateHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TemplateHistoryUpdate) SetUpdatedBy(v string) *TemplateHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TemplateHistoryUpdate) SetNillableUpdatedBy(v *string) *TemplateHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TemplateHistoryUpdate) ClearUpdatedBy() *TemplateHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TemplateHistoryUpdate) SetDeletedAt(v time.Time) *TemplateHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TemplateHistoryUpdate) SetNillableDeletedAt(v *time.Time) *TemplateHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TemplateHistoryUpdate) ClearDeletedAt() *TemplateHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TemplateHistoryUpdate) SetDeletedBy(v string) *TemplateHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TemplateHistoryUpdate) SetNillableDeletedBy(v *string) *TemplateHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TemplateHistoryUpdate) ClearDeletedBy() *TemplateHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TemplateHistoryUpdate) SetTags(v []string) *TemplateHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TemplateHistoryUpdate) AppendTags(v []string) *TemplateHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TemplateHistoryUpdate) ClearTags() *TemplateHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TemplateHistoryUpdate) SetOwnerID(v string) *TemplateHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TemplateHistoryUpdate) SetNillableOwnerID(v *string) *TemplateHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TemplateHistoryUpdate) ClearOwnerID() *TemplateHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *TemplateHistoryUpdate) SetName(v string) *TemplateHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TemplateHistoryUpdate) SetNillableName(v *string) *TemplateHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTemplateType sets the "template_type" field.
func (_u *TemplateHistoryUpdate) SetTemplateType(v enums.DocumentType) *TemplateHistoryUpdate {
	_u.mutation.SetTemplateType(v)
	return _u
}

// SetNillableTemplateType sets the "template_type" field if the given value is not nil.
func (_u *TemplateHistoryUpdate) SetNillableTemplateType(v *enums.DocumentType) *TemplateHistoryUpdate {
	if v != nil {
		_u.SetTemplateType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *TemplateHistoryUpdate) SetDescription(v string) *TemplateHistoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TemplateHistoryUpdate) SetNillableDescription(v *string) *TemplateHistoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TemplateHistoryUpdate) ClearDescription() *TemplateHistoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetKind sets the "kind" field.
func (_u *TemplateHistoryUpdate) SetKind(v enums.TemplateKind) *TemplateHistoryUpdate {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *TemplateHistoryUpdate) SetNillableKind(v *enums.TemplateKind) *TemplateHistoryUpdate {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *TemplateHistoryUpdate) ClearKind() *TemplateHistoryUpdate {
	_u.mutation.ClearKind()
	return _u
}

// SetJsonconfig sets the "jsonconfig" field.
func (_u *TemplateHistoryUpdate) SetJsonconfig(v map[string]interface{}) *TemplateHistoryUpdate {
	_u.mutation.SetJsonconfig(v)
	return _u
}

// SetUischema sets the "uischema" field.
func (_u *TemplateHistoryUpdate) SetUischema(v map[string]interface{}) *TemplateHistoryUpdate {
	_u.mutation.SetUischema(v)
	return _u
}

// ClearUischema clears the value of the "uischema" field.
func (_u *TemplateHistoryUpdate) ClearUischema() *TemplateHistoryUpdate {
	_u.mutation.ClearUischema()
	return _u
}

// Mutation returns the TemplateHistoryMutation object of the builder.
func (_u *TemplateHistoryUpdate) Mutation() *TemplateHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TemplateHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TemplateHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TemplateHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TemplateHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TemplateHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if templatehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized templatehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := templatehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TemplateHistoryUpdate) check() error {
	if v, ok := _u.mutation.TemplateType(); ok {
		if err := templatehistory.TemplateTypeValidator(v); err != nil {
			return &ValidationError{Name: "template_type", err: fmt.Errorf(`generated: validator failed for field "TemplateHistory.template_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Kind(); ok {
		if err := templatehistory.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`generated: validator failed for field "TemplateHistory.kind": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TemplateHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TemplateHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TemplateHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(templatehistory.Table, templatehistory.Columns, sqlgraph.NewFieldSpec(templatehistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(templatehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(templatehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(templatehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(templatehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(templatehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(templatehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(templatehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(templatehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(templatehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(templatehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(templatehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(templatehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, templatehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(templatehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(templatehistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(templatehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(templatehistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.TemplateType(); ok {
		_spec.SetField(templatehistory.FieldTemplateType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(templatehistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(templatehistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(templatehistory.FieldKind, field.TypeEnum, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(templatehistory.FieldKind, field.TypeEnum)
	}
	if value, ok := _u.mutation.Jsonconfig(); ok {
		_spec.SetField(templatehistory.FieldJsonconfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Uischema(); ok {
		_spec.SetField(templatehistory.FieldUischema, field.TypeJSON, value)
	}
	if _u.mutation.UischemaCleared() {
		_spec.ClearField(templatehistory.FieldUischema, field.TypeJSON)
	}
	_spec.Node.Schema = _u.schemaConfig.TemplateHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templatehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TemplateHistoryUpdateOne is the builder for updating a single TemplateHistory entity.
type TemplateHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TemplateHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TemplateHistoryUpdateOne) SetUpdatedAt(v time.Time) *TemplateHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TemplateHistoryUpdateOne) ClearUpdatedAt() *TemplateHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TemplateHistoryUpdateOne) SetUpdatedBy(v string) *TemplateHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TemplateHistoryUpdateOne) SetNillableUpdatedBy(v *string) *TemplateHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TemplateHistoryUpdateOne) ClearUpdatedBy() *TemplateHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TemplateHistoryUpdateOne) SetDeletedAt(v time.Time) *TemplateHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TemplateHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *TemplateHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TemplateHistoryUpdateOne) ClearDeletedAt() *TemplateHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TemplateHistoryUpdateOne) SetDeletedBy(v string) *TemplateHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TemplateHistoryUpdateOne) SetNillableDeletedBy(v *string) *TemplateHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TemplateHistoryUpdateOne) ClearDeletedBy() *TemplateHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TemplateHistoryUpdateOne) SetTags(v []string) *TemplateHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TemplateHistoryUpdateOne) AppendTags(v []string) *TemplateHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TemplateHistoryUpdateOne) ClearTags() *TemplateHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TemplateHistoryUpdateOne) SetOwnerID(v string) *TemplateHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TemplateHistoryUpdateOne) SetNillableOwnerID(v *string) *TemplateHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TemplateHistoryUpdateOne) ClearOwnerID() *TemplateHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *TemplateHistoryUpdateOne) SetName(v string) *TemplateHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TemplateHistoryUpdateOne) SetNillableName(v *string) *TemplateHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTemplateType sets the "template_type" field.
func (_u *TemplateHistoryUpdateOne) SetTemplateType(v enums.DocumentType) *TemplateHistoryUpdateOne {
	_u.mutation.SetTemplateType(v)
	return _u
}

// SetNillableTemplateType sets the "template_type" field if the given value is not nil.
func (_u *TemplateHistoryUpdateOne) SetNillableTemplateType(v *enums.DocumentType) *TemplateHistoryUpdateOne {
	if v != nil {
		_u.SetTemplateType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *TemplateHistoryUpdateOne) SetDescription(v string) *TemplateHistoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TemplateHistoryUpdateOne) SetNillableDescription(v *string) *TemplateHistoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TemplateHistoryUpdateOne) ClearDescription() *TemplateHistoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetKind sets the "kind" field.
func (_u *TemplateHistoryUpdateOne) SetKind(v enums.TemplateKind) *TemplateHistoryUpdateOne {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *TemplateHistoryUpdateOne) SetNillableKind(v *enums.TemplateKind) *TemplateHistoryUpdateOne {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *TemplateHistoryUpdateOne) ClearKind() *TemplateHistoryUpdateOne {
	_u.mutation.ClearKind()
	return _u
}

// SetJsonconfig sets the "jsonconfig" field.
func (_u *TemplateHistoryUpdateOne) SetJsonconfig(v map[string]interface{}) *TemplateHistoryUpdateOne {
	_u.mutation.SetJsonconfig(v)
	return _u
}

// SetUischema sets the "uischema" field.
func (_u *TemplateHistoryUpdateOne) SetUischema(v map[string]interface{}) *TemplateHistoryUpdateOne {
	_u.mutation.SetUischema(v)
	return _u
}

// ClearUischema clears the value of the "uischema" field.
func (_u *TemplateHistoryUpdateOne) ClearUischema() *TemplateHistoryUpdateOne {
	_u.mutation.ClearUischema()
	return _u
}

// Mutation returns the TemplateHistoryMutation object of the builder.
func (_u *TemplateHistoryUpdateOne) Mutation() *TemplateHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the TemplateHistoryUpdate builder.
func (_u *TemplateHistoryUpdateOne) Where(ps ...predicate.TemplateHistory) *TemplateHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TemplateHistoryUpdateOne) Select(field string, fields ...string) *TemplateHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TemplateHistory entity.
func (_u *TemplateHistoryUpdateOne) Save(ctx context.Context) (*TemplateHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TemplateHistoryUpdateOne) SaveX(ctx context.Context) *TemplateHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TemplateHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TemplateHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TemplateHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if templatehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized templatehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := templatehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TemplateHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.TemplateType(); ok {
		if err := templatehistory.TemplateTypeValidator(v); err != nil {
			return &ValidationError{Name: "template_type", err: fmt.Errorf(`generated: validator failed for field "TemplateHistory.template_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Kind(); ok {
		if err := templatehistory.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`generated: validator failed for field "TemplateHistory.kind": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TemplateHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TemplateHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TemplateHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TemplateHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(templatehistory.Table, templatehistory.Columns, sqlgraph.NewFieldSpec(templatehistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TemplateHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, templatehistory.FieldID)
		for _, f := range fields {
			if !templatehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != templatehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(templatehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(templatehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(templatehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(templatehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(templatehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(templatehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(templatehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(templatehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(templatehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(templatehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(templatehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(templatehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, templatehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(templatehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(templatehistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(templatehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(templatehistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.TemplateType(); ok {
		_spec.SetField(templatehistory.FieldTemplateType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(templatehistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(templatehistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(templatehistory.FieldKind, field.TypeEnum, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(templatehistory.FieldKind, field.TypeEnum)
	}
	if value, ok := _u.mutation.Jsonconfig(); ok {
		_spec.SetField(templatehistory.FieldJsonconfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Uischema(); ok {
		_spec.SetField(templatehistory.FieldUischema, field.TypeJSON, value)
	}
	if _u.mutation.UischemaCleared() {
		_spec.ClearField(templatehistory.FieldUischema, field.TypeJSON)
	}
	_spec.Node.Schema = _u.schemaConfig.TemplateHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TemplateHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templatehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
