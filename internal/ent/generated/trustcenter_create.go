// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
)

// TrustCenterCreate is the builder for creating a TrustCenter entity.
type TrustCenterCreate struct {
	config
	mutation *TrustCenterMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TrustCenterCreate) SetCreatedAt(t time.Time) *TrustCenterCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableCreatedAt(t *time.Time) *TrustCenterCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TrustCenterCreate) SetUpdatedAt(t time.Time) *TrustCenterCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableUpdatedAt(t *time.Time) *TrustCenterCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetCreatedBy sets the "created_by" field.
func (tcc *TrustCenterCreate) SetCreatedBy(s string) *TrustCenterCreate {
	tcc.mutation.SetCreatedBy(s)
	return tcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableCreatedBy(s *string) *TrustCenterCreate {
	if s != nil {
		tcc.SetCreatedBy(*s)
	}
	return tcc
}

// SetUpdatedBy sets the "updated_by" field.
func (tcc *TrustCenterCreate) SetUpdatedBy(s string) *TrustCenterCreate {
	tcc.mutation.SetUpdatedBy(s)
	return tcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableUpdatedBy(s *string) *TrustCenterCreate {
	if s != nil {
		tcc.SetUpdatedBy(*s)
	}
	return tcc
}

// SetDeletedAt sets the "deleted_at" field.
func (tcc *TrustCenterCreate) SetDeletedAt(t time.Time) *TrustCenterCreate {
	tcc.mutation.SetDeletedAt(t)
	return tcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableDeletedAt(t *time.Time) *TrustCenterCreate {
	if t != nil {
		tcc.SetDeletedAt(*t)
	}
	return tcc
}

// SetDeletedBy sets the "deleted_by" field.
func (tcc *TrustCenterCreate) SetDeletedBy(s string) *TrustCenterCreate {
	tcc.mutation.SetDeletedBy(s)
	return tcc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableDeletedBy(s *string) *TrustCenterCreate {
	if s != nil {
		tcc.SetDeletedBy(*s)
	}
	return tcc
}

// SetTags sets the "tags" field.
func (tcc *TrustCenterCreate) SetTags(s []string) *TrustCenterCreate {
	tcc.mutation.SetTags(s)
	return tcc
}

// SetOwnerID sets the "owner_id" field.
func (tcc *TrustCenterCreate) SetOwnerID(s string) *TrustCenterCreate {
	tcc.mutation.SetOwnerID(s)
	return tcc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableOwnerID(s *string) *TrustCenterCreate {
	if s != nil {
		tcc.SetOwnerID(*s)
	}
	return tcc
}

// SetSlug sets the "slug" field.
func (tcc *TrustCenterCreate) SetSlug(s string) *TrustCenterCreate {
	tcc.mutation.SetSlug(s)
	return tcc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableSlug(s *string) *TrustCenterCreate {
	if s != nil {
		tcc.SetSlug(*s)
	}
	return tcc
}

// SetCustomDomainID sets the "custom_domain_id" field.
func (tcc *TrustCenterCreate) SetCustomDomainID(s string) *TrustCenterCreate {
	tcc.mutation.SetCustomDomainID(s)
	return tcc
}

// SetNillableCustomDomainID sets the "custom_domain_id" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableCustomDomainID(s *string) *TrustCenterCreate {
	if s != nil {
		tcc.SetCustomDomainID(*s)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TrustCenterCreate) SetID(s string) *TrustCenterCreate {
	tcc.mutation.SetID(s)
	return tcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableID(s *string) *TrustCenterCreate {
	if s != nil {
		tcc.SetID(*s)
	}
	return tcc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (tcc *TrustCenterCreate) SetOwner(o *Organization) *TrustCenterCreate {
	return tcc.SetOwnerID(o.ID)
}

// SetCustomDomain sets the "custom_domain" edge to the CustomDomain entity.
func (tcc *TrustCenterCreate) SetCustomDomain(c *CustomDomain) *TrustCenterCreate {
	return tcc.SetCustomDomainID(c.ID)
}

// SetSettingID sets the "setting" edge to the TrustCenterSetting entity by ID.
func (tcc *TrustCenterCreate) SetSettingID(id string) *TrustCenterCreate {
	tcc.mutation.SetSettingID(id)
	return tcc
}

// SetNillableSettingID sets the "setting" edge to the TrustCenterSetting entity by ID if the given value is not nil.
func (tcc *TrustCenterCreate) SetNillableSettingID(id *string) *TrustCenterCreate {
	if id != nil {
		tcc = tcc.SetSettingID(*id)
	}
	return tcc
}

// SetSetting sets the "setting" edge to the TrustCenterSetting entity.
func (tcc *TrustCenterCreate) SetSetting(t *TrustCenterSetting) *TrustCenterCreate {
	return tcc.SetSettingID(t.ID)
}

// Mutation returns the TrustCenterMutation object of the builder.
func (tcc *TrustCenterCreate) Mutation() *TrustCenterMutation {
	return tcc.mutation
}

// Save creates the TrustCenter in the database.
func (tcc *TrustCenterCreate) Save(ctx context.Context) (*TrustCenter, error) {
	if err := tcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TrustCenterCreate) SaveX(ctx context.Context) *TrustCenter {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TrustCenterCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TrustCenterCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TrustCenterCreate) defaults() error {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		if trustcenter.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenter.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenter.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		if trustcenter.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcenter.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcenter.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.Tags(); !ok {
		v := trustcenter.DefaultTags
		tcc.mutation.SetTags(v)
	}
	if _, ok := tcc.mutation.ID(); !ok {
		if trustcenter.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized trustcenter.DefaultID (forgotten import generated/runtime?)")
		}
		v := trustcenter.DefaultID()
		tcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TrustCenterCreate) check() error {
	if v, ok := tcc.mutation.OwnerID(); ok {
		if err := trustcenter.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.owner_id": %w`, err)}
		}
	}
	if v, ok := tcc.mutation.Slug(); ok {
		if err := trustcenter.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`generated: validator failed for field "TrustCenter.slug": %w`, err)}
		}
	}
	return nil
}

func (tcc *TrustCenterCreate) sqlSave(ctx context.Context) (*TrustCenter, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TrustCenter.ID type: %T", _spec.ID.Value)
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TrustCenterCreate) createSpec() (*TrustCenter, *sqlgraph.CreateSpec) {
	var (
		_node = &TrustCenter{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(trustcenter.Table, sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString))
	)
	_spec.Schema = tcc.schemaConfig.TrustCenter
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(trustcenter.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcenter.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.CreatedBy(); ok {
		_spec.SetField(trustcenter.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tcc.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcenter.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tcc.mutation.DeletedAt(); ok {
		_spec.SetField(trustcenter.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tcc.mutation.DeletedBy(); ok {
		_spec.SetField(trustcenter.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := tcc.mutation.Tags(); ok {
		_spec.SetField(trustcenter.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := tcc.mutation.Slug(); ok {
		_spec.SetField(trustcenter.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if nodes := tcc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcenter.OwnerTable,
			Columns: []string{trustcenter.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcc.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.CustomDomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcenter.CustomDomainTable,
			Columns: []string{trustcenter.CustomDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcc.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomDomainID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   trustcenter.SettingTable,
			Columns: []string{trustcenter.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcc.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrustCenterCreateBulk is the builder for creating many TrustCenter entities in bulk.
type TrustCenterCreateBulk struct {
	config
	err      error
	builders []*TrustCenterCreate
}

// Save creates the TrustCenter entities in the database.
func (tccb *TrustCenterCreateBulk) Save(ctx context.Context) ([]*TrustCenter, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TrustCenter, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrustCenterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TrustCenterCreateBulk) SaveX(ctx context.Context) []*TrustCenter {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TrustCenterCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TrustCenterCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
