// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/models"
)

// Note is the model entity for the Note schema.
type Note struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID string `json:"created_by_id,omitempty"`
	// UpdatedByID holds the value of the "updated_by_id" field.
	UpdatedByID string `json:"updated_by_id,omitempty"`
	// CreatedByUserID holds the value of the "created_by_user_id" field.
	CreatedByUserID string `json:"created_by_user_id,omitempty"`
	// UpdatedByUserID holds the value of the "updated_by_user_id" field.
	UpdatedByUserID string `json:"updated_by_user_id,omitempty"`
	// CreatedByServiceID holds the value of the "created_by_service_id" field.
	CreatedByServiceID string `json:"created_by_service_id,omitempty"`
	// UpdatedByServiceID holds the value of the "updated_by_service_id" field.
	UpdatedByServiceID string `json:"updated_by_service_id,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedByID holds the value of the "deleted_by_id" field.
	DeletedByID string `json:"deleted_by_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the text of the note
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NoteQuery when eager-loading is set.
	Edges        NoteEdges `json:"edges"`
	entity_notes *string
	selectValues sql.SelectValues

	// CreatedBy includes the details about the user or service that created the object
	CreatedBy models.Actor `json:"created_by,omitempty"`
	// UpdatedBy includes the details about the user or service that last updated the object
	UpdatedBy models.Actor `json:"updated_by,omitempty"`
}

// NoteEdges holds the relations/edges for other nodes in the graph.
type NoteEdges struct {
	// CreatedByUser holds the value of the created_by_user edge.
	CreatedByUser *User `json:"created_by_user,omitempty"`
	// UpdatedByUser holds the value of the updated_by_user edge.
	UpdatedByUser *User `json:"updated_by_user,omitempty"`
	// CreatedByService holds the value of the created_by_service edge.
	CreatedByService *APIToken `json:"created_by_service,omitempty"`
	// UpdatedByService holds the value of the updated_by_service edge.
	UpdatedByService *APIToken `json:"updated_by_service,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Entity holds the value of the entity edge.
	Entity *Entity `json:"entity,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// Program holds the value of the program edge.
	Program []*Program `json:"program,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [8]map[string]int

	namedSubcontrols map[string][]*Subcontrol
	namedProgram     map[string][]*Program
}

// CreatedByUserOrErr returns the CreatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) CreatedByUserOrErr() (*User, error) {
	if e.CreatedByUser != nil {
		return e.CreatedByUser, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_user"}
}

// UpdatedByUserOrErr returns the UpdatedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) UpdatedByUserOrErr() (*User, error) {
	if e.UpdatedByUser != nil {
		return e.UpdatedByUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by_user"}
}

// CreatedByServiceOrErr returns the CreatedByService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) CreatedByServiceOrErr() (*APIToken, error) {
	if e.CreatedByService != nil {
		return e.CreatedByService, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: apitoken.Label}
	}
	return nil, &NotLoadedError{edge: "created_by_service"}
}

// UpdatedByServiceOrErr returns the UpdatedByService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) UpdatedByServiceOrErr() (*APIToken, error) {
	if e.UpdatedByService != nil {
		return e.UpdatedByService, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: apitoken.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by_service"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// EntityOrErr returns the Entity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) EntityOrErr() (*Entity, error) {
	if e.Entity != nil {
		return e.Entity, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: entity.Label}
	}
	return nil, &NotLoadedError{edge: "entity"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e NoteEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[6] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading.
func (e NoteEdges) ProgramOrErr() ([]*Program, error) {
	if e.loadedTypes[7] {
		return e.Program, nil
	}
	return nil, &NotLoadedError{edge: "program"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Note) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case note.FieldTags:
			values[i] = new([]byte)
		case note.FieldID, note.FieldCreatedByID, note.FieldUpdatedByID, note.FieldCreatedByUserID, note.FieldUpdatedByUserID, note.FieldCreatedByServiceID, note.FieldUpdatedByServiceID, note.FieldMappingID, note.FieldDeletedByID, note.FieldOwnerID, note.FieldText:
			values[i] = new(sql.NullString)
		case note.FieldCreatedAt, note.FieldUpdatedAt, note.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case note.ForeignKeys[0]: // entity_notes
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Note fields.
func (n *Note) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case note.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				n.ID = value.String
			}
		case note.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case note.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case note.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				n.CreatedByID = value.String
			}
		case note.FieldUpdatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_id", values[i])
			} else if value.Valid {
				n.UpdatedByID = value.String
			}
		case note.FieldCreatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_id", values[i])
			} else if value.Valid {
				n.CreatedByUserID = value.String
			}
		case note.FieldUpdatedByUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_user_id", values[i])
			} else if value.Valid {
				n.UpdatedByUserID = value.String
			}
		case note.FieldCreatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_service_id", values[i])
			} else if value.Valid {
				n.CreatedByServiceID = value.String
			}
		case note.FieldUpdatedByServiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_service_id", values[i])
			} else if value.Valid {
				n.UpdatedByServiceID = value.String
			}
		case note.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				n.MappingID = value.String
			}
		case note.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				n.DeletedAt = value.Time
			}
		case note.FieldDeletedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by_id", values[i])
			} else if value.Valid {
				n.DeletedByID = value.String
			}
		case note.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case note.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				n.OwnerID = value.String
			}
		case note.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				n.Text = value.String
			}
		case note.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_notes", values[i])
			} else if value.Valid {
				n.entity_notes = new(string)
				*n.entity_notes = value.String
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Note.
// This includes values selected through modifiers, order, etc.
func (n *Note) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryCreatedByUser queries the "created_by_user" edge of the Note entity.
func (n *Note) QueryCreatedByUser() *UserQuery {
	return NewNoteClient(n.config).QueryCreatedByUser(n)
}

// QueryUpdatedByUser queries the "updated_by_user" edge of the Note entity.
func (n *Note) QueryUpdatedByUser() *UserQuery {
	return NewNoteClient(n.config).QueryUpdatedByUser(n)
}

// QueryCreatedByService queries the "created_by_service" edge of the Note entity.
func (n *Note) QueryCreatedByService() *APITokenQuery {
	return NewNoteClient(n.config).QueryCreatedByService(n)
}

// QueryUpdatedByService queries the "updated_by_service" edge of the Note entity.
func (n *Note) QueryUpdatedByService() *APITokenQuery {
	return NewNoteClient(n.config).QueryUpdatedByService(n)
}

// QueryOwner queries the "owner" edge of the Note entity.
func (n *Note) QueryOwner() *OrganizationQuery {
	return NewNoteClient(n.config).QueryOwner(n)
}

// QueryEntity queries the "entity" edge of the Note entity.
func (n *Note) QueryEntity() *EntityQuery {
	return NewNoteClient(n.config).QueryEntity(n)
}

// QuerySubcontrols queries the "subcontrols" edge of the Note entity.
func (n *Note) QuerySubcontrols() *SubcontrolQuery {
	return NewNoteClient(n.config).QuerySubcontrols(n)
}

// QueryProgram queries the "program" edge of the Note entity.
func (n *Note) QueryProgram() *ProgramQuery {
	return NewNoteClient(n.config).QueryProgram(n)
}

// Update returns a builder for updating this Note.
// Note that you need to call Note.Unwrap() before calling this method if this Note
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Note) Update() *NoteUpdateOne {
	return NewNoteClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Note entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Note) Unwrap() *Note {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("generated: Note is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Note) String() string {
	var builder strings.Builder
	builder.WriteString("Note(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by_id=")
	builder.WriteString(n.CreatedByID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_id=")
	builder.WriteString(n.UpdatedByID)
	builder.WriteString(", ")
	builder.WriteString("created_by_user_id=")
	builder.WriteString(n.CreatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_user_id=")
	builder.WriteString(n.UpdatedByUserID)
	builder.WriteString(", ")
	builder.WriteString("created_by_service_id=")
	builder.WriteString(n.CreatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_service_id=")
	builder.WriteString(n.UpdatedByServiceID)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(n.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(n.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by_id=")
	builder.WriteString(n.DeletedByID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", n.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(n.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(n.Text)
	builder.WriteByte(')')
	return builder.String()
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Note) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if n.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Note) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if n.Edges.namedSubcontrols == nil {
		n.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		n.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		n.Edges.namedSubcontrols[name] = append(n.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedProgram returns the Program named value or an error if the edge was not
// loaded in eager-loading with this name.
func (n *Note) NamedProgram(name string) ([]*Program, error) {
	if n.Edges.namedProgram == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := n.Edges.namedProgram[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (n *Note) appendNamedProgram(name string, edges ...*Program) {
	if n.Edges.namedProgram == nil {
		n.Edges.namedProgram = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		n.Edges.namedProgram[name] = []*Program{}
	} else {
		n.Edges.namedProgram[name] = append(n.Edges.namedProgram[name], edges...)
	}
}

// Notes is a parsable slice of Note.
type Notes []*Note
