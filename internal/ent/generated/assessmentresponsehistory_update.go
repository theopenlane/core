// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponsehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssessmentResponseHistoryUpdate is the builder for updating AssessmentResponseHistory entities.
type AssessmentResponseHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *AssessmentResponseHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssessmentResponseHistoryUpdate builder.
func (arhu *AssessmentResponseHistoryUpdate) Where(ps ...predicate.AssessmentResponseHistory) *AssessmentResponseHistoryUpdate {
	arhu.mutation.Where(ps...)
	return arhu
}

// SetUpdatedAt sets the "updated_at" field.
func (arhu *AssessmentResponseHistoryUpdate) SetUpdatedAt(t time.Time) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetUpdatedAt(t)
	return arhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearUpdatedAt() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearUpdatedAt()
	return arhu
}

// SetUpdatedBy sets the "updated_by" field.
func (arhu *AssessmentResponseHistoryUpdate) SetUpdatedBy(s string) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetUpdatedBy(s)
	return arhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableUpdatedBy(s *string) *AssessmentResponseHistoryUpdate {
	if s != nil {
		arhu.SetUpdatedBy(*s)
	}
	return arhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearUpdatedBy() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearUpdatedBy()
	return arhu
}

// SetDeletedAt sets the "deleted_at" field.
func (arhu *AssessmentResponseHistoryUpdate) SetDeletedAt(t time.Time) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetDeletedAt(t)
	return arhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableDeletedAt(t *time.Time) *AssessmentResponseHistoryUpdate {
	if t != nil {
		arhu.SetDeletedAt(*t)
	}
	return arhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearDeletedAt() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearDeletedAt()
	return arhu
}

// SetDeletedBy sets the "deleted_by" field.
func (arhu *AssessmentResponseHistoryUpdate) SetDeletedBy(s string) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetDeletedBy(s)
	return arhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableDeletedBy(s *string) *AssessmentResponseHistoryUpdate {
	if s != nil {
		arhu.SetDeletedBy(*s)
	}
	return arhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearDeletedBy() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearDeletedBy()
	return arhu
}

// SetTags sets the "tags" field.
func (arhu *AssessmentResponseHistoryUpdate) SetTags(s []string) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetTags(s)
	return arhu
}

// AppendTags appends s to the "tags" field.
func (arhu *AssessmentResponseHistoryUpdate) AppendTags(s []string) *AssessmentResponseHistoryUpdate {
	arhu.mutation.AppendTags(s)
	return arhu
}

// ClearTags clears the value of the "tags" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearTags() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearTags()
	return arhu
}

// SetAssessmentID sets the "assessment_id" field.
func (arhu *AssessmentResponseHistoryUpdate) SetAssessmentID(s string) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetAssessmentID(s)
	return arhu
}

// SetNillableAssessmentID sets the "assessment_id" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableAssessmentID(s *string) *AssessmentResponseHistoryUpdate {
	if s != nil {
		arhu.SetAssessmentID(*s)
	}
	return arhu
}

// SetUserID sets the "user_id" field.
func (arhu *AssessmentResponseHistoryUpdate) SetUserID(s string) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetUserID(s)
	return arhu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableUserID(s *string) *AssessmentResponseHistoryUpdate {
	if s != nil {
		arhu.SetUserID(*s)
	}
	return arhu
}

// SetStatus sets the "status" field.
func (arhu *AssessmentResponseHistoryUpdate) SetStatus(ers enums.AssessmentResponseStatus) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetStatus(ers)
	return arhu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableStatus(ers *enums.AssessmentResponseStatus) *AssessmentResponseHistoryUpdate {
	if ers != nil {
		arhu.SetStatus(*ers)
	}
	return arhu
}

// SetAssignedAt sets the "assigned_at" field.
func (arhu *AssessmentResponseHistoryUpdate) SetAssignedAt(t time.Time) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetAssignedAt(t)
	return arhu
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableAssignedAt(t *time.Time) *AssessmentResponseHistoryUpdate {
	if t != nil {
		arhu.SetAssignedAt(*t)
	}
	return arhu
}

// ClearAssignedAt clears the value of the "assigned_at" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearAssignedAt() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearAssignedAt()
	return arhu
}

// SetStartedAt sets the "started_at" field.
func (arhu *AssessmentResponseHistoryUpdate) SetStartedAt(t time.Time) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetStartedAt(t)
	return arhu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableStartedAt(t *time.Time) *AssessmentResponseHistoryUpdate {
	if t != nil {
		arhu.SetStartedAt(*t)
	}
	return arhu
}

// ClearStartedAt clears the value of the "started_at" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearStartedAt() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearStartedAt()
	return arhu
}

// SetCompletedAt sets the "completed_at" field.
func (arhu *AssessmentResponseHistoryUpdate) SetCompletedAt(t time.Time) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetCompletedAt(t)
	return arhu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableCompletedAt(t *time.Time) *AssessmentResponseHistoryUpdate {
	if t != nil {
		arhu.SetCompletedAt(*t)
	}
	return arhu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearCompletedAt() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearCompletedAt()
	return arhu
}

// SetDueDate sets the "due_date" field.
func (arhu *AssessmentResponseHistoryUpdate) SetDueDate(t time.Time) *AssessmentResponseHistoryUpdate {
	arhu.mutation.SetDueDate(t)
	return arhu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (arhu *AssessmentResponseHistoryUpdate) SetNillableDueDate(t *time.Time) *AssessmentResponseHistoryUpdate {
	if t != nil {
		arhu.SetDueDate(*t)
	}
	return arhu
}

// ClearDueDate clears the value of the "due_date" field.
func (arhu *AssessmentResponseHistoryUpdate) ClearDueDate() *AssessmentResponseHistoryUpdate {
	arhu.mutation.ClearDueDate()
	return arhu
}

// Mutation returns the AssessmentResponseHistoryMutation object of the builder.
func (arhu *AssessmentResponseHistoryUpdate) Mutation() *AssessmentResponseHistoryMutation {
	return arhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (arhu *AssessmentResponseHistoryUpdate) Save(ctx context.Context) (int, error) {
	arhu.defaults()
	return withHooks(ctx, arhu.sqlSave, arhu.mutation, arhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (arhu *AssessmentResponseHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := arhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (arhu *AssessmentResponseHistoryUpdate) Exec(ctx context.Context) error {
	_, err := arhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arhu *AssessmentResponseHistoryUpdate) ExecX(ctx context.Context) {
	if err := arhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arhu *AssessmentResponseHistoryUpdate) defaults() {
	if _, ok := arhu.mutation.UpdatedAt(); !ok && !arhu.mutation.UpdatedAtCleared() {
		v := assessmentresponsehistory.UpdateDefaultUpdatedAt()
		arhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arhu *AssessmentResponseHistoryUpdate) check() error {
	if v, ok := arhu.mutation.Status(); ok {
		if err := assessmentresponsehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponseHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (arhu *AssessmentResponseHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssessmentResponseHistoryUpdate {
	arhu.modifiers = append(arhu.modifiers, modifiers...)
	return arhu
}

func (arhu *AssessmentResponseHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := arhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assessmentresponsehistory.Table, assessmentresponsehistory.Columns, sqlgraph.NewFieldSpec(assessmentresponsehistory.FieldID, field.TypeString))
	if ps := arhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if arhu.mutation.RefCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldRef, field.TypeString)
	}
	if arhu.mutation.CreatedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := arhu.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if arhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime)
	}
	if arhu.mutation.CreatedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := arhu.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if arhu.mutation.UpdatedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := arhu.mutation.DeletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if arhu.mutation.DeletedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := arhu.mutation.DeletedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedBy, field.TypeString, value)
	}
	if arhu.mutation.DeletedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := arhu.mutation.Tags(); ok {
		_spec.SetField(assessmentresponsehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := arhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assessmentresponsehistory.FieldTags, value)
		})
	}
	if arhu.mutation.TagsCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := arhu.mutation.AssessmentID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldAssessmentID, field.TypeString, value)
	}
	if value, ok := arhu.mutation.UserID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := arhu.mutation.Status(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := arhu.mutation.AssignedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldAssignedAt, field.TypeTime, value)
	}
	if arhu.mutation.AssignedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldAssignedAt, field.TypeTime)
	}
	if value, ok := arhu.mutation.StartedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStartedAt, field.TypeTime, value)
	}
	if arhu.mutation.StartedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldStartedAt, field.TypeTime)
	}
	if value, ok := arhu.mutation.CompletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime, value)
	}
	if arhu.mutation.CompletedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := arhu.mutation.DueDate(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDueDate, field.TypeTime, value)
	}
	if arhu.mutation.DueDateCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDueDate, field.TypeTime)
	}
	_spec.Node.Schema = arhu.schemaConfig.AssessmentResponseHistory
	ctx = internal.NewSchemaConfigContext(ctx, arhu.schemaConfig)
	_spec.AddModifiers(arhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, arhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assessmentresponsehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	arhu.mutation.done = true
	return n, nil
}

// AssessmentResponseHistoryUpdateOne is the builder for updating a single AssessmentResponseHistory entity.
type AssessmentResponseHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssessmentResponseHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetUpdatedAt(t time.Time) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetUpdatedAt(t)
	return arhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearUpdatedAt() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearUpdatedAt()
	return arhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetUpdatedBy(s string) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetUpdatedBy(s)
	return arhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableUpdatedBy(s *string) *AssessmentResponseHistoryUpdateOne {
	if s != nil {
		arhuo.SetUpdatedBy(*s)
	}
	return arhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearUpdatedBy() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearUpdatedBy()
	return arhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetDeletedAt(t time.Time) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetDeletedAt(t)
	return arhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *AssessmentResponseHistoryUpdateOne {
	if t != nil {
		arhuo.SetDeletedAt(*t)
	}
	return arhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearDeletedAt() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearDeletedAt()
	return arhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetDeletedBy(s string) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetDeletedBy(s)
	return arhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableDeletedBy(s *string) *AssessmentResponseHistoryUpdateOne {
	if s != nil {
		arhuo.SetDeletedBy(*s)
	}
	return arhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearDeletedBy() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearDeletedBy()
	return arhuo
}

// SetTags sets the "tags" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetTags(s []string) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetTags(s)
	return arhuo
}

// AppendTags appends s to the "tags" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) AppendTags(s []string) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.AppendTags(s)
	return arhuo
}

// ClearTags clears the value of the "tags" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearTags() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearTags()
	return arhuo
}

// SetAssessmentID sets the "assessment_id" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetAssessmentID(s string) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetAssessmentID(s)
	return arhuo
}

// SetNillableAssessmentID sets the "assessment_id" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableAssessmentID(s *string) *AssessmentResponseHistoryUpdateOne {
	if s != nil {
		arhuo.SetAssessmentID(*s)
	}
	return arhuo
}

// SetUserID sets the "user_id" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetUserID(s string) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetUserID(s)
	return arhuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableUserID(s *string) *AssessmentResponseHistoryUpdateOne {
	if s != nil {
		arhuo.SetUserID(*s)
	}
	return arhuo
}

// SetStatus sets the "status" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetStatus(ers enums.AssessmentResponseStatus) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetStatus(ers)
	return arhuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableStatus(ers *enums.AssessmentResponseStatus) *AssessmentResponseHistoryUpdateOne {
	if ers != nil {
		arhuo.SetStatus(*ers)
	}
	return arhuo
}

// SetAssignedAt sets the "assigned_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetAssignedAt(t time.Time) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetAssignedAt(t)
	return arhuo
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableAssignedAt(t *time.Time) *AssessmentResponseHistoryUpdateOne {
	if t != nil {
		arhuo.SetAssignedAt(*t)
	}
	return arhuo
}

// ClearAssignedAt clears the value of the "assigned_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearAssignedAt() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearAssignedAt()
	return arhuo
}

// SetStartedAt sets the "started_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetStartedAt(t time.Time) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetStartedAt(t)
	return arhuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableStartedAt(t *time.Time) *AssessmentResponseHistoryUpdateOne {
	if t != nil {
		arhuo.SetStartedAt(*t)
	}
	return arhuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearStartedAt() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearStartedAt()
	return arhuo
}

// SetCompletedAt sets the "completed_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetCompletedAt(t time.Time) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetCompletedAt(t)
	return arhuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableCompletedAt(t *time.Time) *AssessmentResponseHistoryUpdateOne {
	if t != nil {
		arhuo.SetCompletedAt(*t)
	}
	return arhuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearCompletedAt() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearCompletedAt()
	return arhuo
}

// SetDueDate sets the "due_date" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetDueDate(t time.Time) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.SetDueDate(t)
	return arhuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (arhuo *AssessmentResponseHistoryUpdateOne) SetNillableDueDate(t *time.Time) *AssessmentResponseHistoryUpdateOne {
	if t != nil {
		arhuo.SetDueDate(*t)
	}
	return arhuo
}

// ClearDueDate clears the value of the "due_date" field.
func (arhuo *AssessmentResponseHistoryUpdateOne) ClearDueDate() *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.ClearDueDate()
	return arhuo
}

// Mutation returns the AssessmentResponseHistoryMutation object of the builder.
func (arhuo *AssessmentResponseHistoryUpdateOne) Mutation() *AssessmentResponseHistoryMutation {
	return arhuo.mutation
}

// Where appends a list predicates to the AssessmentResponseHistoryUpdate builder.
func (arhuo *AssessmentResponseHistoryUpdateOne) Where(ps ...predicate.AssessmentResponseHistory) *AssessmentResponseHistoryUpdateOne {
	arhuo.mutation.Where(ps...)
	return arhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (arhuo *AssessmentResponseHistoryUpdateOne) Select(field string, fields ...string) *AssessmentResponseHistoryUpdateOne {
	arhuo.fields = append([]string{field}, fields...)
	return arhuo
}

// Save executes the query and returns the updated AssessmentResponseHistory entity.
func (arhuo *AssessmentResponseHistoryUpdateOne) Save(ctx context.Context) (*AssessmentResponseHistory, error) {
	arhuo.defaults()
	return withHooks(ctx, arhuo.sqlSave, arhuo.mutation, arhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (arhuo *AssessmentResponseHistoryUpdateOne) SaveX(ctx context.Context) *AssessmentResponseHistory {
	node, err := arhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (arhuo *AssessmentResponseHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := arhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arhuo *AssessmentResponseHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := arhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arhuo *AssessmentResponseHistoryUpdateOne) defaults() {
	if _, ok := arhuo.mutation.UpdatedAt(); !ok && !arhuo.mutation.UpdatedAtCleared() {
		v := assessmentresponsehistory.UpdateDefaultUpdatedAt()
		arhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arhuo *AssessmentResponseHistoryUpdateOne) check() error {
	if v, ok := arhuo.mutation.Status(); ok {
		if err := assessmentresponsehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponseHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (arhuo *AssessmentResponseHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssessmentResponseHistoryUpdateOne {
	arhuo.modifiers = append(arhuo.modifiers, modifiers...)
	return arhuo
}

func (arhuo *AssessmentResponseHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AssessmentResponseHistory, err error) {
	if err := arhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assessmentresponsehistory.Table, assessmentresponsehistory.Columns, sqlgraph.NewFieldSpec(assessmentresponsehistory.FieldID, field.TypeString))
	id, ok := arhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AssessmentResponseHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := arhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assessmentresponsehistory.FieldID)
		for _, f := range fields {
			if !assessmentresponsehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != assessmentresponsehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := arhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if arhuo.mutation.RefCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldRef, field.TypeString)
	}
	if arhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := arhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if arhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime)
	}
	if arhuo.mutation.CreatedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := arhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if arhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := arhuo.mutation.DeletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if arhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := arhuo.mutation.DeletedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedBy, field.TypeString, value)
	}
	if arhuo.mutation.DeletedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := arhuo.mutation.Tags(); ok {
		_spec.SetField(assessmentresponsehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := arhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assessmentresponsehistory.FieldTags, value)
		})
	}
	if arhuo.mutation.TagsCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := arhuo.mutation.AssessmentID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldAssessmentID, field.TypeString, value)
	}
	if value, ok := arhuo.mutation.UserID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := arhuo.mutation.Status(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := arhuo.mutation.AssignedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldAssignedAt, field.TypeTime, value)
	}
	if arhuo.mutation.AssignedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldAssignedAt, field.TypeTime)
	}
	if value, ok := arhuo.mutation.StartedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStartedAt, field.TypeTime, value)
	}
	if arhuo.mutation.StartedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldStartedAt, field.TypeTime)
	}
	if value, ok := arhuo.mutation.CompletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime, value)
	}
	if arhuo.mutation.CompletedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := arhuo.mutation.DueDate(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDueDate, field.TypeTime, value)
	}
	if arhuo.mutation.DueDateCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDueDate, field.TypeTime)
	}
	_spec.Node.Schema = arhuo.schemaConfig.AssessmentResponseHistory
	ctx = internal.NewSchemaConfigContext(ctx, arhuo.schemaConfig)
	_spec.AddModifiers(arhuo.modifiers...)
	_node = &AssessmentResponseHistory{config: arhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, arhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assessmentresponsehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	arhuo.mutation.done = true
	return _node, nil
}
