// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponsehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssessmentResponseHistoryUpdate is the builder for updating AssessmentResponseHistory entities.
type AssessmentResponseHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *AssessmentResponseHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssessmentResponseHistoryUpdate builder.
func (_u *AssessmentResponseHistoryUpdate) Where(ps ...predicate.AssessmentResponseHistory) *AssessmentResponseHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AssessmentResponseHistoryUpdate) SetUpdatedAt(v time.Time) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *AssessmentResponseHistoryUpdate) ClearUpdatedAt() *AssessmentResponseHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *AssessmentResponseHistoryUpdate) SetUpdatedBy(v string) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableUpdatedBy(v *string) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *AssessmentResponseHistoryUpdate) ClearUpdatedBy() *AssessmentResponseHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AssessmentResponseHistoryUpdate) SetDeletedAt(v time.Time) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableDeletedAt(v *time.Time) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AssessmentResponseHistoryUpdate) ClearDeletedAt() *AssessmentResponseHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *AssessmentResponseHistoryUpdate) SetDeletedBy(v string) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableDeletedBy(v *string) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *AssessmentResponseHistoryUpdate) ClearDeletedBy() *AssessmentResponseHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *AssessmentResponseHistoryUpdate) SetTags(v []string) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *AssessmentResponseHistoryUpdate) AppendTags(v []string) *AssessmentResponseHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *AssessmentResponseHistoryUpdate) ClearTags() *AssessmentResponseHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetAssessmentID sets the "assessment_id" field.
func (_u *AssessmentResponseHistoryUpdate) SetAssessmentID(v string) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetAssessmentID(v)
	return _u
}

// SetNillableAssessmentID sets the "assessment_id" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableAssessmentID(v *string) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetAssessmentID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *AssessmentResponseHistoryUpdate) SetStatus(v enums.AssessmentResponseStatus) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableStatus(v *enums.AssessmentResponseStatus) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *AssessmentResponseHistoryUpdate) SetStartedAt(v time.Time) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableStartedAt(v *time.Time) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *AssessmentResponseHistoryUpdate) SetCompletedAt(v time.Time) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableCompletedAt(v *time.Time) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *AssessmentResponseHistoryUpdate) ClearCompletedAt() *AssessmentResponseHistoryUpdate {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *AssessmentResponseHistoryUpdate) SetDueDate(v time.Time) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableDueDate(v *time.Time) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// ClearDueDate clears the value of the "due_date" field.
func (_u *AssessmentResponseHistoryUpdate) ClearDueDate() *AssessmentResponseHistoryUpdate {
	_u.mutation.ClearDueDate()
	return _u
}

// SetResponseDataID sets the "response_data_id" field.
func (_u *AssessmentResponseHistoryUpdate) SetResponseDataID(v string) *AssessmentResponseHistoryUpdate {
	_u.mutation.SetResponseDataID(v)
	return _u
}

// SetNillableResponseDataID sets the "response_data_id" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdate) SetNillableResponseDataID(v *string) *AssessmentResponseHistoryUpdate {
	if v != nil {
		_u.SetResponseDataID(*v)
	}
	return _u
}

// ClearResponseDataID clears the value of the "response_data_id" field.
func (_u *AssessmentResponseHistoryUpdate) ClearResponseDataID() *AssessmentResponseHistoryUpdate {
	_u.mutation.ClearResponseDataID()
	return _u
}

// Mutation returns the AssessmentResponseHistoryMutation object of the builder.
func (_u *AssessmentResponseHistoryUpdate) Mutation() *AssessmentResponseHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AssessmentResponseHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AssessmentResponseHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AssessmentResponseHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AssessmentResponseHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AssessmentResponseHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if assessmentresponsehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessmentresponsehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := assessmentresponsehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AssessmentResponseHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := assessmentresponsehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponseHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AssessmentResponseHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssessmentResponseHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AssessmentResponseHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assessmentresponsehistory.Table, assessmentresponsehistory.Columns, sqlgraph.NewFieldSpec(assessmentresponsehistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(assessmentresponsehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assessmentresponsehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldAssessmentID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.DueDateCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.ResponseDataID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldResponseDataID, field.TypeString, value)
	}
	if _u.mutation.ResponseDataIDCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldResponseDataID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.AssessmentResponseHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assessmentresponsehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AssessmentResponseHistoryUpdateOne is the builder for updating a single AssessmentResponseHistory entity.
type AssessmentResponseHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssessmentResponseHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetUpdatedAt(v time.Time) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *AssessmentResponseHistoryUpdateOne) ClearUpdatedAt() *AssessmentResponseHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetUpdatedBy(v string) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableUpdatedBy(v *string) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *AssessmentResponseHistoryUpdateOne) ClearUpdatedBy() *AssessmentResponseHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetDeletedAt(v time.Time) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AssessmentResponseHistoryUpdateOne) ClearDeletedAt() *AssessmentResponseHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetDeletedBy(v string) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableDeletedBy(v *string) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *AssessmentResponseHistoryUpdateOne) ClearDeletedBy() *AssessmentResponseHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetTags(v []string) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *AssessmentResponseHistoryUpdateOne) AppendTags(v []string) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *AssessmentResponseHistoryUpdateOne) ClearTags() *AssessmentResponseHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetAssessmentID sets the "assessment_id" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetAssessmentID(v string) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetAssessmentID(v)
	return _u
}

// SetNillableAssessmentID sets the "assessment_id" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableAssessmentID(v *string) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetAssessmentID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetStatus(v enums.AssessmentResponseStatus) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableStatus(v *enums.AssessmentResponseStatus) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetStartedAt(v time.Time) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableStartedAt(v *time.Time) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetCompletedAt(v time.Time) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableCompletedAt(v *time.Time) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *AssessmentResponseHistoryUpdateOne) ClearCompletedAt() *AssessmentResponseHistoryUpdateOne {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetDueDate(v time.Time) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableDueDate(v *time.Time) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// ClearDueDate clears the value of the "due_date" field.
func (_u *AssessmentResponseHistoryUpdateOne) ClearDueDate() *AssessmentResponseHistoryUpdateOne {
	_u.mutation.ClearDueDate()
	return _u
}

// SetResponseDataID sets the "response_data_id" field.
func (_u *AssessmentResponseHistoryUpdateOne) SetResponseDataID(v string) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.SetResponseDataID(v)
	return _u
}

// SetNillableResponseDataID sets the "response_data_id" field if the given value is not nil.
func (_u *AssessmentResponseHistoryUpdateOne) SetNillableResponseDataID(v *string) *AssessmentResponseHistoryUpdateOne {
	if v != nil {
		_u.SetResponseDataID(*v)
	}
	return _u
}

// ClearResponseDataID clears the value of the "response_data_id" field.
func (_u *AssessmentResponseHistoryUpdateOne) ClearResponseDataID() *AssessmentResponseHistoryUpdateOne {
	_u.mutation.ClearResponseDataID()
	return _u
}

// Mutation returns the AssessmentResponseHistoryMutation object of the builder.
func (_u *AssessmentResponseHistoryUpdateOne) Mutation() *AssessmentResponseHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the AssessmentResponseHistoryUpdate builder.
func (_u *AssessmentResponseHistoryUpdateOne) Where(ps ...predicate.AssessmentResponseHistory) *AssessmentResponseHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AssessmentResponseHistoryUpdateOne) Select(field string, fields ...string) *AssessmentResponseHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AssessmentResponseHistory entity.
func (_u *AssessmentResponseHistoryUpdateOne) Save(ctx context.Context) (*AssessmentResponseHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AssessmentResponseHistoryUpdateOne) SaveX(ctx context.Context) *AssessmentResponseHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AssessmentResponseHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AssessmentResponseHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AssessmentResponseHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if assessmentresponsehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessmentresponsehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := assessmentresponsehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AssessmentResponseHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := assessmentresponsehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponseHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AssessmentResponseHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssessmentResponseHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AssessmentResponseHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AssessmentResponseHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assessmentresponsehistory.Table, assessmentresponsehistory.Columns, sqlgraph.NewFieldSpec(assessmentresponsehistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AssessmentResponseHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assessmentresponsehistory.FieldID)
		for _, f := range fields {
			if !assessmentresponsehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != assessmentresponsehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(assessmentresponsehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assessmentresponsehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldAssessmentID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.DueDateCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.ResponseDataID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldResponseDataID, field.TypeString, value)
	}
	if _u.mutation.ResponseDataIDCleared() {
		_spec.ClearField(assessmentresponsehistory.FieldResponseDataID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.AssessmentResponseHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &AssessmentResponseHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assessmentresponsehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
