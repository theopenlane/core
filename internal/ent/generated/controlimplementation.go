// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/pkg/enums"
)

// ControlImplementation is the model entity for the ControlImplementation schema.
type ControlImplementation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// status of the %s, e.g. draft, published, archived, etc.
	Status enums.DocumentStatus `json:"status,omitempty"`
	// date the control was implemented
	ImplementationDate time.Time `json:"implementation_date,omitempty"`
	// set to true if the control implementation has been verified
	Verified bool `json:"verified,omitempty"`
	// date the control implementation was verified
	VerificationDate time.Time `json:"verification_date,omitempty"`
	// details of the control implementation
	Details string `json:"details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ControlImplementationQuery when eager-loading is set.
	Edges        ControlImplementationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ControlImplementationEdges holds the relations/edges for other nodes in the graph.
type ControlImplementationEdges struct {
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedControls map[string][]*Control
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e ControlImplementationEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[0] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ControlImplementation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case controlimplementation.FieldTags:
			values[i] = new([]byte)
		case controlimplementation.FieldVerified:
			values[i] = new(sql.NullBool)
		case controlimplementation.FieldID, controlimplementation.FieldCreatedBy, controlimplementation.FieldUpdatedBy, controlimplementation.FieldDeletedBy, controlimplementation.FieldStatus, controlimplementation.FieldDetails:
			values[i] = new(sql.NullString)
		case controlimplementation.FieldCreatedAt, controlimplementation.FieldUpdatedAt, controlimplementation.FieldDeletedAt, controlimplementation.FieldImplementationDate, controlimplementation.FieldVerificationDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ControlImplementation fields.
func (ci *ControlImplementation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case controlimplementation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ci.ID = value.String
			}
		case controlimplementation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case controlimplementation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Time
			}
		case controlimplementation.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ci.CreatedBy = value.String
			}
		case controlimplementation.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ci.UpdatedBy = value.String
			}
		case controlimplementation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ci.DeletedAt = value.Time
			}
		case controlimplementation.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ci.DeletedBy = value.String
			}
		case controlimplementation.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ci.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case controlimplementation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ci.Status = enums.DocumentStatus(value.String)
			}
		case controlimplementation.FieldImplementationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_date", values[i])
			} else if value.Valid {
				ci.ImplementationDate = value.Time
			}
		case controlimplementation.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				ci.Verified = value.Bool
			}
		case controlimplementation.FieldVerificationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verification_date", values[i])
			} else if value.Valid {
				ci.VerificationDate = value.Time
			}
		case controlimplementation.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				ci.Details = value.String
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ControlImplementation.
// This includes values selected through modifiers, order, etc.
func (ci *ControlImplementation) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// QueryControls queries the "controls" edge of the ControlImplementation entity.
func (ci *ControlImplementation) QueryControls() *ControlQuery {
	return NewControlImplementationClient(ci.config).QueryControls(ci)
}

// Update returns a builder for updating this ControlImplementation.
// Note that you need to call ControlImplementation.Unwrap() before calling this method if this ControlImplementation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *ControlImplementation) Update() *ControlImplementationUpdateOne {
	return NewControlImplementationClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the ControlImplementation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *ControlImplementation) Unwrap() *ControlImplementation {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("generated: ControlImplementation is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *ControlImplementation) String() string {
	var builder strings.Builder
	builder.WriteString("ControlImplementation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ci.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ci.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ci.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ci.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ci.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ci.Tags))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ci.Status))
	builder.WriteString(", ")
	builder.WriteString("implementation_date=")
	builder.WriteString(ci.ImplementationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", ci.Verified))
	builder.WriteString(", ")
	builder.WriteString("verification_date=")
	builder.WriteString(ci.VerificationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(ci.Details)
	builder.WriteByte(')')
	return builder.String()
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ci *ControlImplementation) NamedControls(name string) ([]*Control, error) {
	if ci.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ci.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ci *ControlImplementation) appendNamedControls(name string, edges ...*Control) {
	if ci.Edges.namedControls == nil {
		ci.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		ci.Edges.namedControls[name] = []*Control{}
	} else {
		ci.Edges.namedControls[name] = append(ci.Edges.namedControls[name], edges...)
	}
}

// ControlImplementations is a parsable slice of ControlImplementation.
type ControlImplementations []*ControlImplementation
