// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/impersonationeventhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ImpersonationEventHistoryUpdate is the builder for updating ImpersonationEventHistory entities.
type ImpersonationEventHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ImpersonationEventHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ImpersonationEventHistoryUpdate builder.
func (_u *ImpersonationEventHistoryUpdate) Where(ps ...predicate.ImpersonationEventHistory) *ImpersonationEventHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ImpersonationEventHistoryUpdate) SetUpdatedAt(v time.Time) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ImpersonationEventHistoryUpdate) ClearUpdatedAt() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ImpersonationEventHistoryUpdate) SetUpdatedBy(v string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableUpdatedBy(v *string) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ImpersonationEventHistoryUpdate) ClearUpdatedBy() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ImpersonationEventHistoryUpdate) SetDeletedAt(v time.Time) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableDeletedAt(v *time.Time) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ImpersonationEventHistoryUpdate) ClearDeletedAt() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ImpersonationEventHistoryUpdate) SetDeletedBy(v string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableDeletedBy(v *string) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ImpersonationEventHistoryUpdate) ClearDeletedBy() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ImpersonationEventHistoryUpdate) SetTags(v []string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ImpersonationEventHistoryUpdate) AppendTags(v []string) *ImpersonationEventHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ImpersonationEventHistoryUpdate) ClearTags() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetImpersonationType sets the "impersonation_type" field.
func (_u *ImpersonationEventHistoryUpdate) SetImpersonationType(v enums.ImpersonationType) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetImpersonationType(v)
	return _u
}

// SetNillableImpersonationType sets the "impersonation_type" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableImpersonationType(v *enums.ImpersonationType) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetImpersonationType(*v)
	}
	return _u
}

// SetAction sets the "action" field.
func (_u *ImpersonationEventHistoryUpdate) SetAction(v enums.ImpersonationAction) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableAction(v *enums.ImpersonationAction) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *ImpersonationEventHistoryUpdate) SetReason(v string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableReason(v *string) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *ImpersonationEventHistoryUpdate) ClearReason() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearReason()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ImpersonationEventHistoryUpdate) SetIPAddress(v string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableIPAddress(v *string) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ImpersonationEventHistoryUpdate) ClearIPAddress() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ImpersonationEventHistoryUpdate) SetUserAgent(v string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableUserAgent(v *string) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ImpersonationEventHistoryUpdate) ClearUserAgent() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *ImpersonationEventHistoryUpdate) SetScopes(v []string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *ImpersonationEventHistoryUpdate) AppendScopes(v []string) *ImpersonationEventHistoryUpdate {
	_u.mutation.AppendScopes(v)
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *ImpersonationEventHistoryUpdate) ClearScopes() *ImpersonationEventHistoryUpdate {
	_u.mutation.ClearScopes()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ImpersonationEventHistoryUpdate) SetUserID(v string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableUserID(v *string) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *ImpersonationEventHistoryUpdate) SetOrganizationID(v string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableOrganizationID(v *string) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// SetTargetUserID sets the "target_user_id" field.
func (_u *ImpersonationEventHistoryUpdate) SetTargetUserID(v string) *ImpersonationEventHistoryUpdate {
	_u.mutation.SetTargetUserID(v)
	return _u
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdate) SetNillableTargetUserID(v *string) *ImpersonationEventHistoryUpdate {
	if v != nil {
		_u.SetTargetUserID(*v)
	}
	return _u
}

// Mutation returns the ImpersonationEventHistoryMutation object of the builder.
func (_u *ImpersonationEventHistoryUpdate) Mutation() *ImpersonationEventHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ImpersonationEventHistoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImpersonationEventHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ImpersonationEventHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImpersonationEventHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ImpersonationEventHistoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := impersonationeventhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImpersonationEventHistoryUpdate) check() error {
	if v, ok := _u.mutation.ImpersonationType(); ok {
		if err := impersonationeventhistory.ImpersonationTypeValidator(v); err != nil {
			return &ValidationError{Name: "impersonation_type", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEventHistory.impersonation_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Action(); ok {
		if err := impersonationeventhistory.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEventHistory.action": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ImpersonationEventHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ImpersonationEventHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ImpersonationEventHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(impersonationeventhistory.Table, impersonationeventhistory.Columns, sqlgraph.NewFieldSpec(impersonationeventhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(impersonationeventhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(impersonationeventhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(impersonationeventhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(impersonationeventhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(impersonationeventhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(impersonationeventhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(impersonationeventhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(impersonationeventhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(impersonationeventhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(impersonationeventhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(impersonationeventhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(impersonationeventhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, impersonationeventhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(impersonationeventhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImpersonationType(); ok {
		_spec.SetField(impersonationeventhistory.FieldImpersonationType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(impersonationeventhistory.FieldAction, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(impersonationeventhistory.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(impersonationeventhistory.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(impersonationeventhistory.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(impersonationeventhistory.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(impersonationeventhistory.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(impersonationeventhistory.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(impersonationeventhistory.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, impersonationeventhistory.FieldScopes, value)
		})
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(impersonationeventhistory.FieldScopes, field.TypeJSON)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(impersonationeventhistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.OrganizationID(); ok {
		_spec.SetField(impersonationeventhistory.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := _u.mutation.TargetUserID(); ok {
		_spec.SetField(impersonationeventhistory.FieldTargetUserID, field.TypeString, value)
	}
	_spec.Node.Schema = _u.schemaConfig.ImpersonationEventHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{impersonationeventhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ImpersonationEventHistoryUpdateOne is the builder for updating a single ImpersonationEventHistory entity.
type ImpersonationEventHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ImpersonationEventHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetUpdatedAt(v time.Time) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearUpdatedAt() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetUpdatedBy(v string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableUpdatedBy(v *string) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearUpdatedBy() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetDeletedAt(v time.Time) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearDeletedAt() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetDeletedBy(v string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableDeletedBy(v *string) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearDeletedBy() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetTags(v []string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ImpersonationEventHistoryUpdateOne) AppendTags(v []string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearTags() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetImpersonationType sets the "impersonation_type" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetImpersonationType(v enums.ImpersonationType) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetImpersonationType(v)
	return _u
}

// SetNillableImpersonationType sets the "impersonation_type" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableImpersonationType(v *enums.ImpersonationType) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetImpersonationType(*v)
	}
	return _u
}

// SetAction sets the "action" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetAction(v enums.ImpersonationAction) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableAction(v *enums.ImpersonationAction) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetReason(v string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableReason(v *string) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearReason() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearReason()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetIPAddress(v string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableIPAddress(v *string) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearIPAddress() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetUserAgent(v string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableUserAgent(v *string) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearUserAgent() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetScopes(v []string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *ImpersonationEventHistoryUpdateOne) AppendScopes(v []string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.AppendScopes(v)
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *ImpersonationEventHistoryUpdateOne) ClearScopes() *ImpersonationEventHistoryUpdateOne {
	_u.mutation.ClearScopes()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetUserID(v string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableUserID(v *string) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetOrganizationID(v string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableOrganizationID(v *string) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// SetTargetUserID sets the "target_user_id" field.
func (_u *ImpersonationEventHistoryUpdateOne) SetTargetUserID(v string) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.SetTargetUserID(v)
	return _u
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (_u *ImpersonationEventHistoryUpdateOne) SetNillableTargetUserID(v *string) *ImpersonationEventHistoryUpdateOne {
	if v != nil {
		_u.SetTargetUserID(*v)
	}
	return _u
}

// Mutation returns the ImpersonationEventHistoryMutation object of the builder.
func (_u *ImpersonationEventHistoryUpdateOne) Mutation() *ImpersonationEventHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the ImpersonationEventHistoryUpdate builder.
func (_u *ImpersonationEventHistoryUpdateOne) Where(ps ...predicate.ImpersonationEventHistory) *ImpersonationEventHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ImpersonationEventHistoryUpdateOne) Select(field string, fields ...string) *ImpersonationEventHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ImpersonationEventHistory entity.
func (_u *ImpersonationEventHistoryUpdateOne) Save(ctx context.Context) (*ImpersonationEventHistory, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImpersonationEventHistoryUpdateOne) SaveX(ctx context.Context) *ImpersonationEventHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ImpersonationEventHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImpersonationEventHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ImpersonationEventHistoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := impersonationeventhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImpersonationEventHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.ImpersonationType(); ok {
		if err := impersonationeventhistory.ImpersonationTypeValidator(v); err != nil {
			return &ValidationError{Name: "impersonation_type", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEventHistory.impersonation_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Action(); ok {
		if err := impersonationeventhistory.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEventHistory.action": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ImpersonationEventHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ImpersonationEventHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ImpersonationEventHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ImpersonationEventHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(impersonationeventhistory.Table, impersonationeventhistory.Columns, sqlgraph.NewFieldSpec(impersonationeventhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ImpersonationEventHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, impersonationeventhistory.FieldID)
		for _, f := range fields {
			if !impersonationeventhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != impersonationeventhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(impersonationeventhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(impersonationeventhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(impersonationeventhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(impersonationeventhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(impersonationeventhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(impersonationeventhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(impersonationeventhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(impersonationeventhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(impersonationeventhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(impersonationeventhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(impersonationeventhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(impersonationeventhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, impersonationeventhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(impersonationeventhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImpersonationType(); ok {
		_spec.SetField(impersonationeventhistory.FieldImpersonationType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(impersonationeventhistory.FieldAction, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(impersonationeventhistory.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(impersonationeventhistory.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(impersonationeventhistory.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(impersonationeventhistory.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(impersonationeventhistory.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(impersonationeventhistory.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(impersonationeventhistory.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, impersonationeventhistory.FieldScopes, value)
		})
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(impersonationeventhistory.FieldScopes, field.TypeJSON)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(impersonationeventhistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.OrganizationID(); ok {
		_spec.SetField(impersonationeventhistory.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := _u.mutation.TargetUserID(); ok {
		_spec.SetField(impersonationeventhistory.FieldTargetUserID, field.TypeString, value)
	}
	_spec.Node.Schema = _u.schemaConfig.ImpersonationEventHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ImpersonationEventHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{impersonationeventhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
