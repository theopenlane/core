// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/customtypeenum"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
)

// CustomTypeEnumCreate is the builder for creating a CustomTypeEnum entity.
type CustomTypeEnumCreate struct {
	config
	mutation *CustomTypeEnumMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *CustomTypeEnumCreate) SetCreatedAt(v time.Time) *CustomTypeEnumCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableCreatedAt(v *time.Time) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CustomTypeEnumCreate) SetUpdatedAt(v time.Time) *CustomTypeEnumCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableUpdatedAt(v *time.Time) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *CustomTypeEnumCreate) SetCreatedBy(v string) *CustomTypeEnumCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableCreatedBy(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *CustomTypeEnumCreate) SetUpdatedBy(v string) *CustomTypeEnumCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableUpdatedBy(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *CustomTypeEnumCreate) SetDeletedAt(v time.Time) *CustomTypeEnumCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableDeletedAt(v *time.Time) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *CustomTypeEnumCreate) SetDeletedBy(v string) *CustomTypeEnumCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableDeletedBy(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *CustomTypeEnumCreate) SetTags(v []string) *CustomTypeEnumCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *CustomTypeEnumCreate) SetOwnerID(v string) *CustomTypeEnumCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableOwnerID(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *CustomTypeEnumCreate) SetSystemOwned(v bool) *CustomTypeEnumCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableSystemOwned(v *bool) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *CustomTypeEnumCreate) SetInternalNotes(v string) *CustomTypeEnumCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableInternalNotes(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *CustomTypeEnumCreate) SetSystemInternalID(v string) *CustomTypeEnumCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableSystemInternalID(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetObjectType sets the "object_type" field.
func (_c *CustomTypeEnumCreate) SetObjectType(v string) *CustomTypeEnumCreate {
	_c.mutation.SetObjectType(v)
	return _c
}

// SetField sets the "field" field.
func (_c *CustomTypeEnumCreate) SetField(v string) *CustomTypeEnumCreate {
	_c.mutation.SetFieldField(v)
	return _c
}

// SetNillableField sets the "field" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableField(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetField(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *CustomTypeEnumCreate) SetName(v string) *CustomTypeEnumCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *CustomTypeEnumCreate) SetDescription(v string) *CustomTypeEnumCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableDescription(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetSystemGenerated sets the "system_generated" field.
func (_c *CustomTypeEnumCreate) SetSystemGenerated(v bool) *CustomTypeEnumCreate {
	_c.mutation.SetSystemGenerated(v)
	return _c
}

// SetNillableSystemGenerated sets the "system_generated" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableSystemGenerated(v *bool) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetSystemGenerated(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *CustomTypeEnumCreate) SetID(v string) *CustomTypeEnumCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *CustomTypeEnumCreate) SetNillableID(v *string) *CustomTypeEnumCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *CustomTypeEnumCreate) SetOwner(v *Organization) *CustomTypeEnumCreate {
	return _c.SetOwnerID(v.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_c *CustomTypeEnumCreate) AddTaskIDs(ids ...string) *CustomTypeEnumCreate {
	_c.mutation.AddTaskIDs(ids...)
	return _c
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_c *CustomTypeEnumCreate) AddTasks(v ...*Task) *CustomTypeEnumCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTaskIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_c *CustomTypeEnumCreate) AddControlIDs(ids ...string) *CustomTypeEnumCreate {
	_c.mutation.AddControlIDs(ids...)
	return _c
}

// AddControls adds the "controls" edges to the Control entity.
func (_c *CustomTypeEnumCreate) AddControls(v ...*Control) *CustomTypeEnumCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_c *CustomTypeEnumCreate) AddSubcontrolIDs(ids ...string) *CustomTypeEnumCreate {
	_c.mutation.AddSubcontrolIDs(ids...)
	return _c
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_c *CustomTypeEnumCreate) AddSubcontrols(v ...*Subcontrol) *CustomTypeEnumCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubcontrolIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_c *CustomTypeEnumCreate) AddRiskIDs(ids ...string) *CustomTypeEnumCreate {
	_c.mutation.AddRiskIDs(ids...)
	return _c
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_c *CustomTypeEnumCreate) AddRisks(v ...*Risk) *CustomTypeEnumCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_c *CustomTypeEnumCreate) AddInternalPolicyIDs(ids ...string) *CustomTypeEnumCreate {
	_c.mutation.AddInternalPolicyIDs(ids...)
	return _c
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_c *CustomTypeEnumCreate) AddInternalPolicies(v ...*InternalPolicy) *CustomTypeEnumCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInternalPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_c *CustomTypeEnumCreate) AddProcedureIDs(ids ...string) *CustomTypeEnumCreate {
	_c.mutation.AddProcedureIDs(ids...)
	return _c
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_c *CustomTypeEnumCreate) AddProcedures(v ...*Procedure) *CustomTypeEnumCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProcedureIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_c *CustomTypeEnumCreate) AddActionPlanIDs(ids ...string) *CustomTypeEnumCreate {
	_c.mutation.AddActionPlanIDs(ids...)
	return _c
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_c *CustomTypeEnumCreate) AddActionPlans(v ...*ActionPlan) *CustomTypeEnumCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddActionPlanIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_c *CustomTypeEnumCreate) AddProgramIDs(ids ...string) *CustomTypeEnumCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_c *CustomTypeEnumCreate) AddPrograms(v ...*Program) *CustomTypeEnumCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// Mutation returns the CustomTypeEnumMutation object of the builder.
func (_c *CustomTypeEnumCreate) Mutation() *CustomTypeEnumMutation {
	return _c.mutation
}

// Save creates the CustomTypeEnum in the database.
func (_c *CustomTypeEnumCreate) Save(ctx context.Context) (*CustomTypeEnum, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CustomTypeEnumCreate) SaveX(ctx context.Context) *CustomTypeEnum {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CustomTypeEnumCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CustomTypeEnumCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CustomTypeEnumCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if customtypeenum.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized customtypeenum.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := customtypeenum.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if customtypeenum.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized customtypeenum.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := customtypeenum.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := customtypeenum.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := customtypeenum.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.GetField(); !ok {
		v := customtypeenum.DefaultField
		_c.mutation.SetFieldField(v)
	}
	if _, ok := _c.mutation.SystemGenerated(); !ok {
		v := customtypeenum.DefaultSystemGenerated
		_c.mutation.SetSystemGenerated(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if customtypeenum.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized customtypeenum.DefaultID (forgotten import generated/runtime?)")
		}
		v := customtypeenum.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *CustomTypeEnumCreate) check() error {
	if _, ok := _c.mutation.ObjectType(); !ok {
		return &ValidationError{Name: "object_type", err: errors.New(`generated: missing required field "CustomTypeEnum.object_type"`)}
	}
	if v, ok := _c.mutation.ObjectType(); ok {
		if err := customtypeenum.ObjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "object_type", err: fmt.Errorf(`generated: validator failed for field "CustomTypeEnum.object_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetField(); !ok {
		return &ValidationError{Name: "field", err: errors.New(`generated: missing required field "CustomTypeEnum.field"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "CustomTypeEnum.name"`)}
	}
	if _, ok := _c.mutation.SystemGenerated(); !ok {
		return &ValidationError{Name: "system_generated", err: errors.New(`generated: missing required field "CustomTypeEnum.system_generated"`)}
	}
	return nil
}

func (_c *CustomTypeEnumCreate) sqlSave(ctx context.Context) (*CustomTypeEnum, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CustomTypeEnum.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CustomTypeEnumCreate) createSpec() (*CustomTypeEnum, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomTypeEnum{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(customtypeenum.Table, sqlgraph.NewFieldSpec(customtypeenum.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.CustomTypeEnum
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(customtypeenum.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(customtypeenum.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(customtypeenum.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(customtypeenum.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(customtypeenum.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(customtypeenum.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(customtypeenum.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(customtypeenum.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(customtypeenum.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(customtypeenum.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	if value, ok := _c.mutation.ObjectType(); ok {
		_spec.SetField(customtypeenum.FieldObjectType, field.TypeString, value)
		_node.ObjectType = value
	}
	if value, ok := _c.mutation.GetField(); ok {
		_spec.SetField(customtypeenum.FieldField, field.TypeString, value)
		_node.Field = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(customtypeenum.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(customtypeenum.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.SystemGenerated(); ok {
		_spec.SetField(customtypeenum.FieldSystemGenerated, field.TypeBool, value)
		_node.SystemGenerated = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customtypeenum.OwnerTable,
			Columns: []string{customtypeenum.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.CustomTypeEnum
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.TasksTable,
			Columns: []string{customtypeenum.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ControlsTable,
			Columns: []string{customtypeenum.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.SubcontrolsTable,
			Columns: []string{customtypeenum.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.RisksTable,
			Columns: []string{customtypeenum.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.InternalPoliciesTable,
			Columns: []string{customtypeenum.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProceduresTable,
			Columns: []string{customtypeenum.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ActionPlansTable,
			Columns: []string{customtypeenum.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customtypeenum.ProgramsTable,
			Columns: []string{customtypeenum.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomTypeEnumCreateBulk is the builder for creating many CustomTypeEnum entities in bulk.
type CustomTypeEnumCreateBulk struct {
	config
	err      error
	builders []*CustomTypeEnumCreate
}

// Save creates the CustomTypeEnum entities in the database.
func (_c *CustomTypeEnumCreateBulk) Save(ctx context.Context) ([]*CustomTypeEnum, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*CustomTypeEnum, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomTypeEnumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CustomTypeEnumCreateBulk) SaveX(ctx context.Context) []*CustomTypeEnum {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CustomTypeEnumCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CustomTypeEnumCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
