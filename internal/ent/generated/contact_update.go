// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ContactUpdate is the builder for updating Contact entities.
type ContactUpdate struct {
	config
	hooks     []Hook
	mutation  *ContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContactUpdate builder.
func (_u *ContactUpdate) Where(ps ...predicate.Contact) *ContactUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ContactUpdate) SetUpdatedAt(v time.Time) *ContactUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ContactUpdate) ClearUpdatedAt() *ContactUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ContactUpdate) SetUpdatedBy(v string) *ContactUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableUpdatedBy(v *string) *ContactUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ContactUpdate) ClearUpdatedBy() *ContactUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ContactUpdate) SetDeletedAt(v time.Time) *ContactUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableDeletedAt(v *time.Time) *ContactUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ContactUpdate) ClearDeletedAt() *ContactUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ContactUpdate) SetDeletedBy(v string) *ContactUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableDeletedBy(v *string) *ContactUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ContactUpdate) ClearDeletedBy() *ContactUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ContactUpdate) SetTags(v []string) *ContactUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ContactUpdate) AppendTags(v []string) *ContactUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ContactUpdate) ClearTags() *ContactUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ContactUpdate) SetOwnerID(v string) *ContactUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableOwnerID(v *string) *ContactUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ContactUpdate) ClearOwnerID() *ContactUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetFullName sets the "full_name" field.
func (_u *ContactUpdate) SetFullName(v string) *ContactUpdate {
	_u.mutation.SetFullName(v)
	return _u
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableFullName(v *string) *ContactUpdate {
	if v != nil {
		_u.SetFullName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ContactUpdate) SetTitle(v string) *ContactUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableTitle(v *string) *ContactUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *ContactUpdate) ClearTitle() *ContactUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetCompany sets the "company" field.
func (_u *ContactUpdate) SetCompany(v string) *ContactUpdate {
	_u.mutation.SetCompany(v)
	return _u
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableCompany(v *string) *ContactUpdate {
	if v != nil {
		_u.SetCompany(*v)
	}
	return _u
}

// ClearCompany clears the value of the "company" field.
func (_u *ContactUpdate) ClearCompany() *ContactUpdate {
	_u.mutation.ClearCompany()
	return _u
}

// SetEmail sets the "email" field.
func (_u *ContactUpdate) SetEmail(v string) *ContactUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableEmail(v *string) *ContactUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *ContactUpdate) ClearEmail() *ContactUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *ContactUpdate) SetPhoneNumber(v string) *ContactUpdate {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *ContactUpdate) SetNillablePhoneNumber(v *string) *ContactUpdate {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *ContactUpdate) ClearPhoneNumber() *ContactUpdate {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetAddress sets the "address" field.
func (_u *ContactUpdate) SetAddress(v string) *ContactUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableAddress(v *string) *ContactUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *ContactUpdate) ClearAddress() *ContactUpdate {
	_u.mutation.ClearAddress()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ContactUpdate) SetStatus(v enums.UserStatus) *ContactUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ContactUpdate) SetNillableStatus(v *enums.UserStatus) *ContactUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *ContactUpdate) SetOwner(v *Organization) *ContactUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *ContactUpdate) AddEntityIDs(ids ...string) *ContactUpdate {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *ContactUpdate) AddEntities(v ...*Entity) *ContactUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *ContactUpdate) AddFileIDs(ids ...string) *ContactUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *ContactUpdate) AddFiles(v ...*File) *ContactUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (_u *ContactUpdate) Mutation() *ContactMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *ContactUpdate) ClearOwner() *ContactUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *ContactUpdate) ClearEntities() *ContactUpdate {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *ContactUpdate) RemoveEntityIDs(ids ...string) *ContactUpdate {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *ContactUpdate) RemoveEntities(v ...*Entity) *ContactUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *ContactUpdate) ClearFiles() *ContactUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *ContactUpdate) RemoveFileIDs(ids ...string) *ContactUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *ContactUpdate) RemoveFiles(v ...*File) *ContactUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ContactUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ContactUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ContactUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ContactUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ContactUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if contact.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contact.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contact.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ContactUpdate) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := contact.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Contact.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FullName(); ok {
		if err := contact.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`generated: validator failed for field "Contact.full_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := contact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Contact.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := contact.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`generated: validator failed for field "Contact.phone_number": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := contact.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Contact.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ContactUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ContactUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(contact.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(contact.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(contact.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(contact.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(contact.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(contact.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(contact.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(contact.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(contact.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(contact.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contact.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(contact.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.FullName(); ok {
		_spec.SetField(contact.FieldFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(contact.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(contact.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Company(); ok {
		_spec.SetField(contact.FieldCompany, field.TypeString, value)
	}
	if _u.mutation.CompanyCleared() {
		_spec.ClearField(contact.FieldCompany, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(contact.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(contact.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(contact.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(contact.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(contact.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(contact.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Contact
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ContactUpdateOne is the builder for updating a single Contact entity.
type ContactUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ContactUpdateOne) SetUpdatedAt(v time.Time) *ContactUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ContactUpdateOne) ClearUpdatedAt() *ContactUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ContactUpdateOne) SetUpdatedBy(v string) *ContactUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableUpdatedBy(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ContactUpdateOne) ClearUpdatedBy() *ContactUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ContactUpdateOne) SetDeletedAt(v time.Time) *ContactUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableDeletedAt(v *time.Time) *ContactUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ContactUpdateOne) ClearDeletedAt() *ContactUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ContactUpdateOne) SetDeletedBy(v string) *ContactUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableDeletedBy(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ContactUpdateOne) ClearDeletedBy() *ContactUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ContactUpdateOne) SetTags(v []string) *ContactUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ContactUpdateOne) AppendTags(v []string) *ContactUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ContactUpdateOne) ClearTags() *ContactUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ContactUpdateOne) SetOwnerID(v string) *ContactUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableOwnerID(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ContactUpdateOne) ClearOwnerID() *ContactUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetFullName sets the "full_name" field.
func (_u *ContactUpdateOne) SetFullName(v string) *ContactUpdateOne {
	_u.mutation.SetFullName(v)
	return _u
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableFullName(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetFullName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ContactUpdateOne) SetTitle(v string) *ContactUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableTitle(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *ContactUpdateOne) ClearTitle() *ContactUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetCompany sets the "company" field.
func (_u *ContactUpdateOne) SetCompany(v string) *ContactUpdateOne {
	_u.mutation.SetCompany(v)
	return _u
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableCompany(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetCompany(*v)
	}
	return _u
}

// ClearCompany clears the value of the "company" field.
func (_u *ContactUpdateOne) ClearCompany() *ContactUpdateOne {
	_u.mutation.ClearCompany()
	return _u
}

// SetEmail sets the "email" field.
func (_u *ContactUpdateOne) SetEmail(v string) *ContactUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableEmail(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *ContactUpdateOne) ClearEmail() *ContactUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *ContactUpdateOne) SetPhoneNumber(v string) *ContactUpdateOne {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillablePhoneNumber(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *ContactUpdateOne) ClearPhoneNumber() *ContactUpdateOne {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetAddress sets the "address" field.
func (_u *ContactUpdateOne) SetAddress(v string) *ContactUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableAddress(v *string) *ContactUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *ContactUpdateOne) ClearAddress() *ContactUpdateOne {
	_u.mutation.ClearAddress()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ContactUpdateOne) SetStatus(v enums.UserStatus) *ContactUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ContactUpdateOne) SetNillableStatus(v *enums.UserStatus) *ContactUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *ContactUpdateOne) SetOwner(v *Organization) *ContactUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *ContactUpdateOne) AddEntityIDs(ids ...string) *ContactUpdateOne {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *ContactUpdateOne) AddEntities(v ...*Entity) *ContactUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *ContactUpdateOne) AddFileIDs(ids ...string) *ContactUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *ContactUpdateOne) AddFiles(v ...*File) *ContactUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (_u *ContactUpdateOne) Mutation() *ContactMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *ContactUpdateOne) ClearOwner() *ContactUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *ContactUpdateOne) ClearEntities() *ContactUpdateOne {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *ContactUpdateOne) RemoveEntityIDs(ids ...string) *ContactUpdateOne {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *ContactUpdateOne) RemoveEntities(v ...*Entity) *ContactUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *ContactUpdateOne) ClearFiles() *ContactUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *ContactUpdateOne) RemoveFileIDs(ids ...string) *ContactUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *ContactUpdateOne) RemoveFiles(v ...*File) *ContactUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the ContactUpdate builder.
func (_u *ContactUpdateOne) Where(ps ...predicate.Contact) *ContactUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ContactUpdateOne) Select(field string, fields ...string) *ContactUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Contact entity.
func (_u *ContactUpdateOne) Save(ctx context.Context) (*Contact, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ContactUpdateOne) SaveX(ctx context.Context) *Contact {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ContactUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ContactUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ContactUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if contact.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contact.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contact.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ContactUpdateOne) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := contact.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Contact.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FullName(); ok {
		if err := contact.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`generated: validator failed for field "Contact.full_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := contact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Contact.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := contact.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`generated: validator failed for field "Contact.phone_number": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := contact.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Contact.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ContactUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ContactUpdateOne) sqlSave(ctx context.Context) (_node *Contact, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Contact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contact.FieldID)
		for _, f := range fields {
			if !contact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(contact.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(contact.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(contact.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(contact.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(contact.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(contact.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(contact.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(contact.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(contact.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(contact.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contact.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(contact.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.FullName(); ok {
		_spec.SetField(contact.FieldFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(contact.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(contact.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Company(); ok {
		_spec.SetField(contact.FieldCompany, field.TypeString, value)
	}
	if _u.mutation.CompanyCleared() {
		_spec.ClearField(contact.FieldCompany, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(contact.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(contact.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(contact.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(contact.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(contact.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(contact.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Contact
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Contact{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
