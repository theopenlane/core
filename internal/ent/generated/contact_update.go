// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"
)

// ContactUpdate is the builder for updating Contact entities.
type ContactUpdate struct {
	config
	hooks     []Hook
	mutation  *ContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContactUpdate builder.
func (cu *ContactUpdate) Where(ps ...predicate.Contact) *ContactUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContactUpdate) SetUpdatedAt(t time.Time) *ContactUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *ContactUpdate) ClearUpdatedAt() *ContactUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *ContactUpdate) SetUpdatedBy(s string) *ContactUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableUpdatedBy(s *string) *ContactUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *ContactUpdate) ClearUpdatedBy() *ContactUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ContactUpdate) SetDeletedAt(t time.Time) *ContactUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableDeletedAt(t *time.Time) *ContactUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ContactUpdate) ClearDeletedAt() *ContactUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetDeletedBy sets the "deleted_by" field.
func (cu *ContactUpdate) SetDeletedBy(s string) *ContactUpdate {
	cu.mutation.SetDeletedBy(s)
	return cu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableDeletedBy(s *string) *ContactUpdate {
	if s != nil {
		cu.SetDeletedBy(*s)
	}
	return cu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cu *ContactUpdate) ClearDeletedBy() *ContactUpdate {
	cu.mutation.ClearDeletedBy()
	return cu
}

// SetTags sets the "tags" field.
func (cu *ContactUpdate) SetTags(s []string) *ContactUpdate {
	cu.mutation.SetTags(s)
	return cu
}

// AppendTags appends s to the "tags" field.
func (cu *ContactUpdate) AppendTags(s []string) *ContactUpdate {
	cu.mutation.AppendTags(s)
	return cu
}

// ClearTags clears the value of the "tags" field.
func (cu *ContactUpdate) ClearTags() *ContactUpdate {
	cu.mutation.ClearTags()
	return cu
}

// SetOwnerID sets the "owner_id" field.
func (cu *ContactUpdate) SetOwnerID(s string) *ContactUpdate {
	cu.mutation.SetOwnerID(s)
	return cu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableOwnerID(s *string) *ContactUpdate {
	if s != nil {
		cu.SetOwnerID(*s)
	}
	return cu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (cu *ContactUpdate) ClearOwnerID() *ContactUpdate {
	cu.mutation.ClearOwnerID()
	return cu
}

// SetFullName sets the "full_name" field.
func (cu *ContactUpdate) SetFullName(s string) *ContactUpdate {
	cu.mutation.SetFullName(s)
	return cu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableFullName(s *string) *ContactUpdate {
	if s != nil {
		cu.SetFullName(*s)
	}
	return cu
}

// SetTitle sets the "title" field.
func (cu *ContactUpdate) SetTitle(s string) *ContactUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableTitle(s *string) *ContactUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// ClearTitle clears the value of the "title" field.
func (cu *ContactUpdate) ClearTitle() *ContactUpdate {
	cu.mutation.ClearTitle()
	return cu
}

// SetCompany sets the "company" field.
func (cu *ContactUpdate) SetCompany(s string) *ContactUpdate {
	cu.mutation.SetCompany(s)
	return cu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableCompany(s *string) *ContactUpdate {
	if s != nil {
		cu.SetCompany(*s)
	}
	return cu
}

// ClearCompany clears the value of the "company" field.
func (cu *ContactUpdate) ClearCompany() *ContactUpdate {
	cu.mutation.ClearCompany()
	return cu
}

// SetEmail sets the "email" field.
func (cu *ContactUpdate) SetEmail(s string) *ContactUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableEmail(s *string) *ContactUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// ClearEmail clears the value of the "email" field.
func (cu *ContactUpdate) ClearEmail() *ContactUpdate {
	cu.mutation.ClearEmail()
	return cu
}

// SetPhoneNumber sets the "phone_number" field.
func (cu *ContactUpdate) SetPhoneNumber(s string) *ContactUpdate {
	cu.mutation.SetPhoneNumber(s)
	return cu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cu *ContactUpdate) SetNillablePhoneNumber(s *string) *ContactUpdate {
	if s != nil {
		cu.SetPhoneNumber(*s)
	}
	return cu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (cu *ContactUpdate) ClearPhoneNumber() *ContactUpdate {
	cu.mutation.ClearPhoneNumber()
	return cu
}

// SetAddress sets the "address" field.
func (cu *ContactUpdate) SetAddress(s string) *ContactUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableAddress(s *string) *ContactUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// ClearAddress clears the value of the "address" field.
func (cu *ContactUpdate) ClearAddress() *ContactUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// SetStatus sets the "status" field.
func (cu *ContactUpdate) SetStatus(es enums.UserStatus) *ContactUpdate {
	cu.mutation.SetStatus(es)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableStatus(es *enums.UserStatus) *ContactUpdate {
	if es != nil {
		cu.SetStatus(*es)
	}
	return cu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (cu *ContactUpdate) SetOwner(o *Organization) *ContactUpdate {
	return cu.SetOwnerID(o.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (cu *ContactUpdate) AddEntityIDs(ids ...string) *ContactUpdate {
	cu.mutation.AddEntityIDs(ids...)
	return cu
}

// AddEntities adds the "entities" edges to the Entity entity.
func (cu *ContactUpdate) AddEntities(e ...*Entity) *ContactUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEntityIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (cu *ContactUpdate) Mutation() *ContactMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (cu *ContactUpdate) ClearOwner() *ContactUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (cu *ContactUpdate) ClearEntities() *ContactUpdate {
	cu.mutation.ClearEntities()
	return cu
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (cu *ContactUpdate) RemoveEntityIDs(ids ...string) *ContactUpdate {
	cu.mutation.RemoveEntityIDs(ids...)
	return cu
}

// RemoveEntities removes "entities" edges to Entity entities.
func (cu *ContactUpdate) RemoveEntities(e ...*Entity) *ContactUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEntityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContactUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContactUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContactUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContactUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContactUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		if contact.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contact.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contact.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContactUpdate) check() error {
	if v, ok := cu.mutation.OwnerID(); ok {
		if err := contact.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Contact.owner_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.FullName(); ok {
		if err := contact.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`generated: validator failed for field "Contact.full_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := contact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Contact.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PhoneNumber(); ok {
		if err := contact.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`generated: validator failed for field "Contact.phone_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := contact.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Contact.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ContactUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(contact.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(contact.FieldUpdatedAt, field.TypeTime)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(contact.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(contact.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(contact.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(contact.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(contact.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.DeletedBy(); ok {
		_spec.SetField(contact.FieldDeletedBy, field.TypeString, value)
	}
	if cu.mutation.DeletedByCleared() {
		_spec.ClearField(contact.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.SetField(contact.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contact.FieldTags, value)
		})
	}
	if cu.mutation.TagsCleared() {
		_spec.ClearField(contact.FieldTags, field.TypeJSON)
	}
	if value, ok := cu.mutation.FullName(); ok {
		_spec.SetField(contact.FieldFullName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(contact.FieldTitle, field.TypeString, value)
	}
	if cu.mutation.TitleCleared() {
		_spec.ClearField(contact.FieldTitle, field.TypeString)
	}
	if value, ok := cu.mutation.Company(); ok {
		_spec.SetField(contact.FieldCompany, field.TypeString, value)
	}
	if cu.mutation.CompanyCleared() {
		_spec.ClearField(contact.FieldCompany, field.TypeString)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
	}
	if cu.mutation.EmailCleared() {
		_spec.ClearField(contact.FieldEmail, field.TypeString)
	}
	if value, ok := cu.mutation.PhoneNumber(); ok {
		_spec.SetField(contact.FieldPhoneNumber, field.TypeString, value)
	}
	if cu.mutation.PhoneNumberCleared() {
		_spec.ClearField(contact.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(contact.FieldAddress, field.TypeString, value)
	}
	if cu.mutation.AddressCleared() {
		_spec.ClearField(contact.FieldAddress, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(contact.FieldStatus, field.TypeEnum, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.Contact
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.EntityContacts
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !cu.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cu.schemaConfig.Contact
	ctx = internal.NewSchemaConfigContext(ctx, cu.schemaConfig)
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContactUpdateOne is the builder for updating a single Contact entity.
type ContactUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContactUpdateOne) SetUpdatedAt(t time.Time) *ContactUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *ContactUpdateOne) ClearUpdatedAt() *ContactUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *ContactUpdateOne) SetUpdatedBy(s string) *ContactUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableUpdatedBy(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *ContactUpdateOne) ClearUpdatedBy() *ContactUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ContactUpdateOne) SetDeletedAt(t time.Time) *ContactUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableDeletedAt(t *time.Time) *ContactUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ContactUpdateOne) ClearDeletedAt() *ContactUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetDeletedBy sets the "deleted_by" field.
func (cuo *ContactUpdateOne) SetDeletedBy(s string) *ContactUpdateOne {
	cuo.mutation.SetDeletedBy(s)
	return cuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableDeletedBy(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetDeletedBy(*s)
	}
	return cuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cuo *ContactUpdateOne) ClearDeletedBy() *ContactUpdateOne {
	cuo.mutation.ClearDeletedBy()
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *ContactUpdateOne) SetTags(s []string) *ContactUpdateOne {
	cuo.mutation.SetTags(s)
	return cuo
}

// AppendTags appends s to the "tags" field.
func (cuo *ContactUpdateOne) AppendTags(s []string) *ContactUpdateOne {
	cuo.mutation.AppendTags(s)
	return cuo
}

// ClearTags clears the value of the "tags" field.
func (cuo *ContactUpdateOne) ClearTags() *ContactUpdateOne {
	cuo.mutation.ClearTags()
	return cuo
}

// SetOwnerID sets the "owner_id" field.
func (cuo *ContactUpdateOne) SetOwnerID(s string) *ContactUpdateOne {
	cuo.mutation.SetOwnerID(s)
	return cuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableOwnerID(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetOwnerID(*s)
	}
	return cuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (cuo *ContactUpdateOne) ClearOwnerID() *ContactUpdateOne {
	cuo.mutation.ClearOwnerID()
	return cuo
}

// SetFullName sets the "full_name" field.
func (cuo *ContactUpdateOne) SetFullName(s string) *ContactUpdateOne {
	cuo.mutation.SetFullName(s)
	return cuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableFullName(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetFullName(*s)
	}
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *ContactUpdateOne) SetTitle(s string) *ContactUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableTitle(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// ClearTitle clears the value of the "title" field.
func (cuo *ContactUpdateOne) ClearTitle() *ContactUpdateOne {
	cuo.mutation.ClearTitle()
	return cuo
}

// SetCompany sets the "company" field.
func (cuo *ContactUpdateOne) SetCompany(s string) *ContactUpdateOne {
	cuo.mutation.SetCompany(s)
	return cuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableCompany(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetCompany(*s)
	}
	return cuo
}

// ClearCompany clears the value of the "company" field.
func (cuo *ContactUpdateOne) ClearCompany() *ContactUpdateOne {
	cuo.mutation.ClearCompany()
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *ContactUpdateOne) SetEmail(s string) *ContactUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableEmail(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// ClearEmail clears the value of the "email" field.
func (cuo *ContactUpdateOne) ClearEmail() *ContactUpdateOne {
	cuo.mutation.ClearEmail()
	return cuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cuo *ContactUpdateOne) SetPhoneNumber(s string) *ContactUpdateOne {
	cuo.mutation.SetPhoneNumber(s)
	return cuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillablePhoneNumber(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetPhoneNumber(*s)
	}
	return cuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (cuo *ContactUpdateOne) ClearPhoneNumber() *ContactUpdateOne {
	cuo.mutation.ClearPhoneNumber()
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *ContactUpdateOne) SetAddress(s string) *ContactUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableAddress(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// ClearAddress clears the value of the "address" field.
func (cuo *ContactUpdateOne) ClearAddress() *ContactUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ContactUpdateOne) SetStatus(es enums.UserStatus) *ContactUpdateOne {
	cuo.mutation.SetStatus(es)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableStatus(es *enums.UserStatus) *ContactUpdateOne {
	if es != nil {
		cuo.SetStatus(*es)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (cuo *ContactUpdateOne) SetOwner(o *Organization) *ContactUpdateOne {
	return cuo.SetOwnerID(o.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (cuo *ContactUpdateOne) AddEntityIDs(ids ...string) *ContactUpdateOne {
	cuo.mutation.AddEntityIDs(ids...)
	return cuo
}

// AddEntities adds the "entities" edges to the Entity entity.
func (cuo *ContactUpdateOne) AddEntities(e ...*Entity) *ContactUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEntityIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (cuo *ContactUpdateOne) Mutation() *ContactMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (cuo *ContactUpdateOne) ClearOwner() *ContactUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (cuo *ContactUpdateOne) ClearEntities() *ContactUpdateOne {
	cuo.mutation.ClearEntities()
	return cuo
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (cuo *ContactUpdateOne) RemoveEntityIDs(ids ...string) *ContactUpdateOne {
	cuo.mutation.RemoveEntityIDs(ids...)
	return cuo
}

// RemoveEntities removes "entities" edges to Entity entities.
func (cuo *ContactUpdateOne) RemoveEntities(e ...*Entity) *ContactUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEntityIDs(ids...)
}

// Where appends a list predicates to the ContactUpdate builder.
func (cuo *ContactUpdateOne) Where(ps ...predicate.Contact) *ContactUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContactUpdateOne) Select(field string, fields ...string) *ContactUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contact entity.
func (cuo *ContactUpdateOne) Save(ctx context.Context) (*Contact, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContactUpdateOne) SaveX(ctx context.Context) *Contact {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContactUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContactUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContactUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		if contact.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contact.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contact.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContactUpdateOne) check() error {
	if v, ok := cuo.mutation.OwnerID(); ok {
		if err := contact.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Contact.owner_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.FullName(); ok {
		if err := contact.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`generated: validator failed for field "Contact.full_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := contact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Contact.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PhoneNumber(); ok {
		if err := contact.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`generated: validator failed for field "Contact.phone_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := contact.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Contact.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ContactUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ContactUpdateOne) sqlSave(ctx context.Context) (_node *Contact, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Contact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contact.FieldID)
		for _, f := range fields {
			if !contact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(contact.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(contact.FieldUpdatedAt, field.TypeTime)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(contact.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(contact.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(contact.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(contact.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(contact.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.DeletedBy(); ok {
		_spec.SetField(contact.FieldDeletedBy, field.TypeString, value)
	}
	if cuo.mutation.DeletedByCleared() {
		_spec.ClearField(contact.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.SetField(contact.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contact.FieldTags, value)
		})
	}
	if cuo.mutation.TagsCleared() {
		_spec.ClearField(contact.FieldTags, field.TypeJSON)
	}
	if value, ok := cuo.mutation.FullName(); ok {
		_spec.SetField(contact.FieldFullName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(contact.FieldTitle, field.TypeString, value)
	}
	if cuo.mutation.TitleCleared() {
		_spec.ClearField(contact.FieldTitle, field.TypeString)
	}
	if value, ok := cuo.mutation.Company(); ok {
		_spec.SetField(contact.FieldCompany, field.TypeString, value)
	}
	if cuo.mutation.CompanyCleared() {
		_spec.ClearField(contact.FieldCompany, field.TypeString)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
	}
	if cuo.mutation.EmailCleared() {
		_spec.ClearField(contact.FieldEmail, field.TypeString)
	}
	if value, ok := cuo.mutation.PhoneNumber(); ok {
		_spec.SetField(contact.FieldPhoneNumber, field.TypeString, value)
	}
	if cuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(contact.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(contact.FieldAddress, field.TypeString, value)
	}
	if cuo.mutation.AddressCleared() {
		_spec.ClearField(contact.FieldAddress, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(contact.FieldStatus, field.TypeEnum, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.Contact
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.EntityContacts
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !cuo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cuo.schemaConfig.Contact
	ctx = internal.NewSchemaConfigContext(ctx, cuo.schemaConfig)
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Contact{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
