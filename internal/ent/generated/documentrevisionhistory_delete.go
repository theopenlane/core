// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/documentrevisionhistory"
	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// DocumentRevisionHistoryDelete is the builder for deleting a DocumentRevisionHistory entity.
type DocumentRevisionHistoryDelete struct {
	config
	hooks    []Hook
	mutation *DocumentRevisionHistoryMutation
}

// Where appends a list predicates to the DocumentRevisionHistoryDelete builder.
func (drhd *DocumentRevisionHistoryDelete) Where(ps ...predicate.DocumentRevisionHistory) *DocumentRevisionHistoryDelete {
	drhd.mutation.Where(ps...)
	return drhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (drhd *DocumentRevisionHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, drhd.sqlExec, drhd.mutation, drhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (drhd *DocumentRevisionHistoryDelete) ExecX(ctx context.Context) int {
	n, err := drhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (drhd *DocumentRevisionHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(documentrevisionhistory.Table, sqlgraph.NewFieldSpec(documentrevisionhistory.FieldID, field.TypeString))
	_spec.Node.Schema = drhd.schemaConfig.DocumentRevisionHistory
	ctx = internal.NewSchemaConfigContext(ctx, drhd.schemaConfig)
	if ps := drhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, drhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	drhd.mutation.done = true
	return affected, err
}

// DocumentRevisionHistoryDeleteOne is the builder for deleting a single DocumentRevisionHistory entity.
type DocumentRevisionHistoryDeleteOne struct {
	drhd *DocumentRevisionHistoryDelete
}

// Where appends a list predicates to the DocumentRevisionHistoryDelete builder.
func (drhdo *DocumentRevisionHistoryDeleteOne) Where(ps ...predicate.DocumentRevisionHistory) *DocumentRevisionHistoryDeleteOne {
	drhdo.drhd.mutation.Where(ps...)
	return drhdo
}

// Exec executes the deletion query.
func (drhdo *DocumentRevisionHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := drhdo.drhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{documentrevisionhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (drhdo *DocumentRevisionHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := drhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
