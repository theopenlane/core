// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// CustomDomainUpdate is the builder for updating CustomDomain entities.
type CustomDomainUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomDomainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomDomainUpdate builder.
func (cdu *CustomDomainUpdate) Where(ps ...predicate.CustomDomain) *CustomDomainUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetUpdatedAt sets the "updated_at" field.
func (cdu *CustomDomainUpdate) SetUpdatedAt(t time.Time) *CustomDomainUpdate {
	cdu.mutation.SetUpdatedAt(t)
	return cdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cdu *CustomDomainUpdate) ClearUpdatedAt() *CustomDomainUpdate {
	cdu.mutation.ClearUpdatedAt()
	return cdu
}

// SetUpdatedBy sets the "updated_by" field.
func (cdu *CustomDomainUpdate) SetUpdatedBy(s string) *CustomDomainUpdate {
	cdu.mutation.SetUpdatedBy(s)
	return cdu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cdu *CustomDomainUpdate) SetNillableUpdatedBy(s *string) *CustomDomainUpdate {
	if s != nil {
		cdu.SetUpdatedBy(*s)
	}
	return cdu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cdu *CustomDomainUpdate) ClearUpdatedBy() *CustomDomainUpdate {
	cdu.mutation.ClearUpdatedBy()
	return cdu
}

// SetDeletedAt sets the "deleted_at" field.
func (cdu *CustomDomainUpdate) SetDeletedAt(t time.Time) *CustomDomainUpdate {
	cdu.mutation.SetDeletedAt(t)
	return cdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cdu *CustomDomainUpdate) SetNillableDeletedAt(t *time.Time) *CustomDomainUpdate {
	if t != nil {
		cdu.SetDeletedAt(*t)
	}
	return cdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cdu *CustomDomainUpdate) ClearDeletedAt() *CustomDomainUpdate {
	cdu.mutation.ClearDeletedAt()
	return cdu
}

// SetDeletedBy sets the "deleted_by" field.
func (cdu *CustomDomainUpdate) SetDeletedBy(s string) *CustomDomainUpdate {
	cdu.mutation.SetDeletedBy(s)
	return cdu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cdu *CustomDomainUpdate) SetNillableDeletedBy(s *string) *CustomDomainUpdate {
	if s != nil {
		cdu.SetDeletedBy(*s)
	}
	return cdu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cdu *CustomDomainUpdate) ClearDeletedBy() *CustomDomainUpdate {
	cdu.mutation.ClearDeletedBy()
	return cdu
}

// SetTags sets the "tags" field.
func (cdu *CustomDomainUpdate) SetTags(s []string) *CustomDomainUpdate {
	cdu.mutation.SetTags(s)
	return cdu
}

// AppendTags appends s to the "tags" field.
func (cdu *CustomDomainUpdate) AppendTags(s []string) *CustomDomainUpdate {
	cdu.mutation.AppendTags(s)
	return cdu
}

// ClearTags clears the value of the "tags" field.
func (cdu *CustomDomainUpdate) ClearTags() *CustomDomainUpdate {
	cdu.mutation.ClearTags()
	return cdu
}

// SetOwnerID sets the "owner_id" field.
func (cdu *CustomDomainUpdate) SetOwnerID(s string) *CustomDomainUpdate {
	cdu.mutation.SetOwnerID(s)
	return cdu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cdu *CustomDomainUpdate) SetNillableOwnerID(s *string) *CustomDomainUpdate {
	if s != nil {
		cdu.SetOwnerID(*s)
	}
	return cdu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (cdu *CustomDomainUpdate) ClearOwnerID() *CustomDomainUpdate {
	cdu.mutation.ClearOwnerID()
	return cdu
}

// SetStatus sets the "status" field.
func (cdu *CustomDomainUpdate) SetStatus(eds enums.CustomDomainStatus) *CustomDomainUpdate {
	cdu.mutation.SetStatus(eds)
	return cdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cdu *CustomDomainUpdate) SetNillableStatus(eds *enums.CustomDomainStatus) *CustomDomainUpdate {
	if eds != nil {
		cdu.SetStatus(*eds)
	}
	return cdu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (cdu *CustomDomainUpdate) SetOwner(o *Organization) *CustomDomainUpdate {
	return cdu.SetOwnerID(o.ID)
}

// Mutation returns the CustomDomainMutation object of the builder.
func (cdu *CustomDomainUpdate) Mutation() *CustomDomainMutation {
	return cdu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (cdu *CustomDomainUpdate) ClearOwner() *CustomDomainUpdate {
	cdu.mutation.ClearOwner()
	return cdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CustomDomainUpdate) Save(ctx context.Context) (int, error) {
	if err := cdu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cdu.sqlSave, cdu.mutation, cdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CustomDomainUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CustomDomainUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CustomDomainUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdu *CustomDomainUpdate) defaults() error {
	if _, ok := cdu.mutation.UpdatedAt(); !ok && !cdu.mutation.UpdatedAtCleared() {
		if customdomain.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized customdomain.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := customdomain.UpdateDefaultUpdatedAt()
		cdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cdu *CustomDomainUpdate) check() error {
	if v, ok := cdu.mutation.OwnerID(); ok {
		if err := customdomain.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "CustomDomain.owner_id": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.Status(); ok {
		if err := customdomain.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "CustomDomain.status": %w`, err)}
		}
	}
	if cdu.mutation.MappableDomainCleared() && len(cdu.mutation.MappableDomainIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "CustomDomain.mappable_domain"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cdu *CustomDomainUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomDomainUpdate {
	cdu.modifiers = append(cdu.modifiers, modifiers...)
	return cdu
}

func (cdu *CustomDomainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customdomain.Table, customdomain.Columns, sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString))
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cdu.mutation.CreatedAtCleared() {
		_spec.ClearField(customdomain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cdu.mutation.UpdatedAt(); ok {
		_spec.SetField(customdomain.FieldUpdatedAt, field.TypeTime, value)
	}
	if cdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(customdomain.FieldUpdatedAt, field.TypeTime)
	}
	if cdu.mutation.CreatedByCleared() {
		_spec.ClearField(customdomain.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cdu.mutation.UpdatedBy(); ok {
		_spec.SetField(customdomain.FieldUpdatedBy, field.TypeString, value)
	}
	if cdu.mutation.UpdatedByCleared() {
		_spec.ClearField(customdomain.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cdu.mutation.DeletedAt(); ok {
		_spec.SetField(customdomain.FieldDeletedAt, field.TypeTime, value)
	}
	if cdu.mutation.DeletedAtCleared() {
		_spec.ClearField(customdomain.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cdu.mutation.DeletedBy(); ok {
		_spec.SetField(customdomain.FieldDeletedBy, field.TypeString, value)
	}
	if cdu.mutation.DeletedByCleared() {
		_spec.ClearField(customdomain.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cdu.mutation.Tags(); ok {
		_spec.SetField(customdomain.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cdu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, customdomain.FieldTags, value)
		})
	}
	if cdu.mutation.TagsCleared() {
		_spec.ClearField(customdomain.FieldTags, field.TypeJSON)
	}
	if value, ok := cdu.mutation.Status(); ok {
		_spec.SetField(customdomain.FieldStatus, field.TypeEnum, value)
	}
	if cdu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cdu.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cdu.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cdu.schemaConfig.CustomDomain
	ctx = internal.NewSchemaConfigContext(ctx, cdu.schemaConfig)
	_spec.AddModifiers(cdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdu.mutation.done = true
	return n, nil
}

// CustomDomainUpdateOne is the builder for updating a single CustomDomain entity.
type CustomDomainUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomDomainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cduo *CustomDomainUpdateOne) SetUpdatedAt(t time.Time) *CustomDomainUpdateOne {
	cduo.mutation.SetUpdatedAt(t)
	return cduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cduo *CustomDomainUpdateOne) ClearUpdatedAt() *CustomDomainUpdateOne {
	cduo.mutation.ClearUpdatedAt()
	return cduo
}

// SetUpdatedBy sets the "updated_by" field.
func (cduo *CustomDomainUpdateOne) SetUpdatedBy(s string) *CustomDomainUpdateOne {
	cduo.mutation.SetUpdatedBy(s)
	return cduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cduo *CustomDomainUpdateOne) SetNillableUpdatedBy(s *string) *CustomDomainUpdateOne {
	if s != nil {
		cduo.SetUpdatedBy(*s)
	}
	return cduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cduo *CustomDomainUpdateOne) ClearUpdatedBy() *CustomDomainUpdateOne {
	cduo.mutation.ClearUpdatedBy()
	return cduo
}

// SetDeletedAt sets the "deleted_at" field.
func (cduo *CustomDomainUpdateOne) SetDeletedAt(t time.Time) *CustomDomainUpdateOne {
	cduo.mutation.SetDeletedAt(t)
	return cduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cduo *CustomDomainUpdateOne) SetNillableDeletedAt(t *time.Time) *CustomDomainUpdateOne {
	if t != nil {
		cduo.SetDeletedAt(*t)
	}
	return cduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cduo *CustomDomainUpdateOne) ClearDeletedAt() *CustomDomainUpdateOne {
	cduo.mutation.ClearDeletedAt()
	return cduo
}

// SetDeletedBy sets the "deleted_by" field.
func (cduo *CustomDomainUpdateOne) SetDeletedBy(s string) *CustomDomainUpdateOne {
	cduo.mutation.SetDeletedBy(s)
	return cduo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cduo *CustomDomainUpdateOne) SetNillableDeletedBy(s *string) *CustomDomainUpdateOne {
	if s != nil {
		cduo.SetDeletedBy(*s)
	}
	return cduo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cduo *CustomDomainUpdateOne) ClearDeletedBy() *CustomDomainUpdateOne {
	cduo.mutation.ClearDeletedBy()
	return cduo
}

// SetTags sets the "tags" field.
func (cduo *CustomDomainUpdateOne) SetTags(s []string) *CustomDomainUpdateOne {
	cduo.mutation.SetTags(s)
	return cduo
}

// AppendTags appends s to the "tags" field.
func (cduo *CustomDomainUpdateOne) AppendTags(s []string) *CustomDomainUpdateOne {
	cduo.mutation.AppendTags(s)
	return cduo
}

// ClearTags clears the value of the "tags" field.
func (cduo *CustomDomainUpdateOne) ClearTags() *CustomDomainUpdateOne {
	cduo.mutation.ClearTags()
	return cduo
}

// SetOwnerID sets the "owner_id" field.
func (cduo *CustomDomainUpdateOne) SetOwnerID(s string) *CustomDomainUpdateOne {
	cduo.mutation.SetOwnerID(s)
	return cduo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cduo *CustomDomainUpdateOne) SetNillableOwnerID(s *string) *CustomDomainUpdateOne {
	if s != nil {
		cduo.SetOwnerID(*s)
	}
	return cduo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (cduo *CustomDomainUpdateOne) ClearOwnerID() *CustomDomainUpdateOne {
	cduo.mutation.ClearOwnerID()
	return cduo
}

// SetStatus sets the "status" field.
func (cduo *CustomDomainUpdateOne) SetStatus(eds enums.CustomDomainStatus) *CustomDomainUpdateOne {
	cduo.mutation.SetStatus(eds)
	return cduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cduo *CustomDomainUpdateOne) SetNillableStatus(eds *enums.CustomDomainStatus) *CustomDomainUpdateOne {
	if eds != nil {
		cduo.SetStatus(*eds)
	}
	return cduo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (cduo *CustomDomainUpdateOne) SetOwner(o *Organization) *CustomDomainUpdateOne {
	return cduo.SetOwnerID(o.ID)
}

// Mutation returns the CustomDomainMutation object of the builder.
func (cduo *CustomDomainUpdateOne) Mutation() *CustomDomainMutation {
	return cduo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (cduo *CustomDomainUpdateOne) ClearOwner() *CustomDomainUpdateOne {
	cduo.mutation.ClearOwner()
	return cduo
}

// Where appends a list predicates to the CustomDomainUpdate builder.
func (cduo *CustomDomainUpdateOne) Where(ps ...predicate.CustomDomain) *CustomDomainUpdateOne {
	cduo.mutation.Where(ps...)
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CustomDomainUpdateOne) Select(field string, fields ...string) *CustomDomainUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CustomDomain entity.
func (cduo *CustomDomainUpdateOne) Save(ctx context.Context) (*CustomDomain, error) {
	if err := cduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cduo.sqlSave, cduo.mutation, cduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CustomDomainUpdateOne) SaveX(ctx context.Context) *CustomDomain {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CustomDomainUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CustomDomainUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cduo *CustomDomainUpdateOne) defaults() error {
	if _, ok := cduo.mutation.UpdatedAt(); !ok && !cduo.mutation.UpdatedAtCleared() {
		if customdomain.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized customdomain.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := customdomain.UpdateDefaultUpdatedAt()
		cduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cduo *CustomDomainUpdateOne) check() error {
	if v, ok := cduo.mutation.OwnerID(); ok {
		if err := customdomain.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "CustomDomain.owner_id": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.Status(); ok {
		if err := customdomain.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "CustomDomain.status": %w`, err)}
		}
	}
	if cduo.mutation.MappableDomainCleared() && len(cduo.mutation.MappableDomainIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "CustomDomain.mappable_domain"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cduo *CustomDomainUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomDomainUpdateOne {
	cduo.modifiers = append(cduo.modifiers, modifiers...)
	return cduo
}

func (cduo *CustomDomainUpdateOne) sqlSave(ctx context.Context) (_node *CustomDomain, err error) {
	if err := cduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customdomain.Table, customdomain.Columns, sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString))
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CustomDomain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customdomain.FieldID)
		for _, f := range fields {
			if !customdomain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != customdomain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cduo.mutation.CreatedAtCleared() {
		_spec.ClearField(customdomain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cduo.mutation.UpdatedAt(); ok {
		_spec.SetField(customdomain.FieldUpdatedAt, field.TypeTime, value)
	}
	if cduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(customdomain.FieldUpdatedAt, field.TypeTime)
	}
	if cduo.mutation.CreatedByCleared() {
		_spec.ClearField(customdomain.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cduo.mutation.UpdatedBy(); ok {
		_spec.SetField(customdomain.FieldUpdatedBy, field.TypeString, value)
	}
	if cduo.mutation.UpdatedByCleared() {
		_spec.ClearField(customdomain.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cduo.mutation.DeletedAt(); ok {
		_spec.SetField(customdomain.FieldDeletedAt, field.TypeTime, value)
	}
	if cduo.mutation.DeletedAtCleared() {
		_spec.ClearField(customdomain.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cduo.mutation.DeletedBy(); ok {
		_spec.SetField(customdomain.FieldDeletedBy, field.TypeString, value)
	}
	if cduo.mutation.DeletedByCleared() {
		_spec.ClearField(customdomain.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cduo.mutation.Tags(); ok {
		_spec.SetField(customdomain.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cduo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, customdomain.FieldTags, value)
		})
	}
	if cduo.mutation.TagsCleared() {
		_spec.ClearField(customdomain.FieldTags, field.TypeJSON)
	}
	if value, ok := cduo.mutation.Status(); ok {
		_spec.SetField(customdomain.FieldStatus, field.TypeEnum, value)
	}
	if cduo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cduo.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cduo.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cduo.schemaConfig.CustomDomain
	ctx = internal.NewSchemaConfigContext(ctx, cduo.schemaConfig)
	_spec.AddModifiers(cduo.modifiers...)
	_node = &CustomDomain{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cduo.mutation.done = true
	return _node, nil
}
