// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// CustomDomainUpdate is the builder for updating CustomDomain entities.
type CustomDomainUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomDomainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomDomainUpdate builder.
func (_u *CustomDomainUpdate) Where(ps ...predicate.CustomDomain) *CustomDomainUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CustomDomainUpdate) SetUpdatedAt(v time.Time) *CustomDomainUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *CustomDomainUpdate) ClearUpdatedAt() *CustomDomainUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *CustomDomainUpdate) SetUpdatedBy(v string) *CustomDomainUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *CustomDomainUpdate) SetNillableUpdatedBy(v *string) *CustomDomainUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *CustomDomainUpdate) ClearUpdatedBy() *CustomDomainUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *CustomDomainUpdate) SetDeletedAt(v time.Time) *CustomDomainUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *CustomDomainUpdate) SetNillableDeletedAt(v *time.Time) *CustomDomainUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *CustomDomainUpdate) ClearDeletedAt() *CustomDomainUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *CustomDomainUpdate) SetDeletedBy(v string) *CustomDomainUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *CustomDomainUpdate) SetNillableDeletedBy(v *string) *CustomDomainUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *CustomDomainUpdate) ClearDeletedBy() *CustomDomainUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *CustomDomainUpdate) SetTags(v []string) *CustomDomainUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *CustomDomainUpdate) AppendTags(v []string) *CustomDomainUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *CustomDomainUpdate) ClearTags() *CustomDomainUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *CustomDomainUpdate) SetOwnerID(v string) *CustomDomainUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *CustomDomainUpdate) SetNillableOwnerID(v *string) *CustomDomainUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *CustomDomainUpdate) ClearOwnerID() *CustomDomainUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *CustomDomainUpdate) SetInternalNotes(v string) *CustomDomainUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *CustomDomainUpdate) SetNillableInternalNotes(v *string) *CustomDomainUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *CustomDomainUpdate) ClearInternalNotes() *CustomDomainUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *CustomDomainUpdate) SetSystemInternalID(v string) *CustomDomainUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *CustomDomainUpdate) SetNillableSystemInternalID(v *string) *CustomDomainUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *CustomDomainUpdate) ClearSystemInternalID() *CustomDomainUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetDNSVerificationID sets the "dns_verification_id" field.
func (_u *CustomDomainUpdate) SetDNSVerificationID(v string) *CustomDomainUpdate {
	_u.mutation.SetDNSVerificationID(v)
	return _u
}

// SetNillableDNSVerificationID sets the "dns_verification_id" field if the given value is not nil.
func (_u *CustomDomainUpdate) SetNillableDNSVerificationID(v *string) *CustomDomainUpdate {
	if v != nil {
		_u.SetDNSVerificationID(*v)
	}
	return _u
}

// ClearDNSVerificationID clears the value of the "dns_verification_id" field.
func (_u *CustomDomainUpdate) ClearDNSVerificationID() *CustomDomainUpdate {
	_u.mutation.ClearDNSVerificationID()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *CustomDomainUpdate) SetOwner(v *Organization) *CustomDomainUpdate {
	return _u.SetOwnerID(v.ID)
}

// SetDNSVerification sets the "dns_verification" edge to the DNSVerification entity.
func (_u *CustomDomainUpdate) SetDNSVerification(v *DNSVerification) *CustomDomainUpdate {
	return _u.SetDNSVerificationID(v.ID)
}

// Mutation returns the CustomDomainMutation object of the builder.
func (_u *CustomDomainUpdate) Mutation() *CustomDomainMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *CustomDomainUpdate) ClearOwner() *CustomDomainUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearDNSVerification clears the "dns_verification" edge to the DNSVerification entity.
func (_u *CustomDomainUpdate) ClearDNSVerification() *CustomDomainUpdate {
	_u.mutation.ClearDNSVerification()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CustomDomainUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CustomDomainUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CustomDomainUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CustomDomainUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CustomDomainUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if customdomain.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized customdomain.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := customdomain.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *CustomDomainUpdate) check() error {
	if _u.mutation.MappableDomainCleared() && len(_u.mutation.MappableDomainIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "CustomDomain.mappable_domain"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CustomDomainUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomDomainUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CustomDomainUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customdomain.Table, customdomain.Columns, sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(customdomain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(customdomain.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(customdomain.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(customdomain.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(customdomain.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(customdomain.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(customdomain.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(customdomain.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(customdomain.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(customdomain.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(customdomain.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, customdomain.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(customdomain.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(customdomain.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(customdomain.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(customdomain.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(customdomain.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(customdomain.FieldSystemInternalID, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DNSVerificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customdomain.DNSVerificationTable,
			Columns: []string{customdomain.DNSVerificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DNSVerificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customdomain.DNSVerificationTable,
			Columns: []string{customdomain.DNSVerificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.CustomDomain
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CustomDomainUpdateOne is the builder for updating a single CustomDomain entity.
type CustomDomainUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomDomainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CustomDomainUpdateOne) SetUpdatedAt(v time.Time) *CustomDomainUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *CustomDomainUpdateOne) ClearUpdatedAt() *CustomDomainUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *CustomDomainUpdateOne) SetUpdatedBy(v string) *CustomDomainUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *CustomDomainUpdateOne) SetNillableUpdatedBy(v *string) *CustomDomainUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *CustomDomainUpdateOne) ClearUpdatedBy() *CustomDomainUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *CustomDomainUpdateOne) SetDeletedAt(v time.Time) *CustomDomainUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *CustomDomainUpdateOne) SetNillableDeletedAt(v *time.Time) *CustomDomainUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *CustomDomainUpdateOne) ClearDeletedAt() *CustomDomainUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *CustomDomainUpdateOne) SetDeletedBy(v string) *CustomDomainUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *CustomDomainUpdateOne) SetNillableDeletedBy(v *string) *CustomDomainUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *CustomDomainUpdateOne) ClearDeletedBy() *CustomDomainUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *CustomDomainUpdateOne) SetTags(v []string) *CustomDomainUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *CustomDomainUpdateOne) AppendTags(v []string) *CustomDomainUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *CustomDomainUpdateOne) ClearTags() *CustomDomainUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *CustomDomainUpdateOne) SetOwnerID(v string) *CustomDomainUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *CustomDomainUpdateOne) SetNillableOwnerID(v *string) *CustomDomainUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *CustomDomainUpdateOne) ClearOwnerID() *CustomDomainUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *CustomDomainUpdateOne) SetInternalNotes(v string) *CustomDomainUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *CustomDomainUpdateOne) SetNillableInternalNotes(v *string) *CustomDomainUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *CustomDomainUpdateOne) ClearInternalNotes() *CustomDomainUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *CustomDomainUpdateOne) SetSystemInternalID(v string) *CustomDomainUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *CustomDomainUpdateOne) SetNillableSystemInternalID(v *string) *CustomDomainUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *CustomDomainUpdateOne) ClearSystemInternalID() *CustomDomainUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetDNSVerificationID sets the "dns_verification_id" field.
func (_u *CustomDomainUpdateOne) SetDNSVerificationID(v string) *CustomDomainUpdateOne {
	_u.mutation.SetDNSVerificationID(v)
	return _u
}

// SetNillableDNSVerificationID sets the "dns_verification_id" field if the given value is not nil.
func (_u *CustomDomainUpdateOne) SetNillableDNSVerificationID(v *string) *CustomDomainUpdateOne {
	if v != nil {
		_u.SetDNSVerificationID(*v)
	}
	return _u
}

// ClearDNSVerificationID clears the value of the "dns_verification_id" field.
func (_u *CustomDomainUpdateOne) ClearDNSVerificationID() *CustomDomainUpdateOne {
	_u.mutation.ClearDNSVerificationID()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *CustomDomainUpdateOne) SetOwner(v *Organization) *CustomDomainUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// SetDNSVerification sets the "dns_verification" edge to the DNSVerification entity.
func (_u *CustomDomainUpdateOne) SetDNSVerification(v *DNSVerification) *CustomDomainUpdateOne {
	return _u.SetDNSVerificationID(v.ID)
}

// Mutation returns the CustomDomainMutation object of the builder.
func (_u *CustomDomainUpdateOne) Mutation() *CustomDomainMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *CustomDomainUpdateOne) ClearOwner() *CustomDomainUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearDNSVerification clears the "dns_verification" edge to the DNSVerification entity.
func (_u *CustomDomainUpdateOne) ClearDNSVerification() *CustomDomainUpdateOne {
	_u.mutation.ClearDNSVerification()
	return _u
}

// Where appends a list predicates to the CustomDomainUpdate builder.
func (_u *CustomDomainUpdateOne) Where(ps ...predicate.CustomDomain) *CustomDomainUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CustomDomainUpdateOne) Select(field string, fields ...string) *CustomDomainUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CustomDomain entity.
func (_u *CustomDomainUpdateOne) Save(ctx context.Context) (*CustomDomain, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CustomDomainUpdateOne) SaveX(ctx context.Context) *CustomDomain {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CustomDomainUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CustomDomainUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CustomDomainUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if customdomain.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized customdomain.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := customdomain.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *CustomDomainUpdateOne) check() error {
	if _u.mutation.MappableDomainCleared() && len(_u.mutation.MappableDomainIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "CustomDomain.mappable_domain"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CustomDomainUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomDomainUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CustomDomainUpdateOne) sqlSave(ctx context.Context) (_node *CustomDomain, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customdomain.Table, customdomain.Columns, sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CustomDomain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customdomain.FieldID)
		for _, f := range fields {
			if !customdomain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != customdomain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(customdomain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(customdomain.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(customdomain.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(customdomain.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(customdomain.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(customdomain.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(customdomain.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(customdomain.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(customdomain.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(customdomain.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(customdomain.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, customdomain.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(customdomain.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(customdomain.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(customdomain.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(customdomain.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(customdomain.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(customdomain.FieldSystemInternalID, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DNSVerificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customdomain.DNSVerificationTable,
			Columns: []string{customdomain.DNSVerificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DNSVerificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customdomain.DNSVerificationTable,
			Columns: []string{customdomain.DNSVerificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.CustomDomain
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &CustomDomain{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
