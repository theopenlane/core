// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/export"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// Export is the model entity for the Export schema.
type Export struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the type of export, e.g., control, policy, etc.
	ExportType enums.ExportType `json:"export_type,omitempty"`
	// the format of export, e.g., csv and others
	Format enums.ExportFormat `json:"format,omitempty"`
	// the status of the export, e.g., pending, ready, failed
	Status enums.ExportStatus `json:"status,omitempty"`
	// the user who initiated the export
	RequestorID string `json:"requestor_id,omitempty"`
	// the specific fields to include in the export (defaults to only the id if not provided)
	Fields []string `json:"fields,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExportQuery when eager-loading is set.
	Edges        ExportEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExportEdges holds the relations/edges for other nodes in the graph.
type ExportEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedEvents map[string][]*Event
	namedFiles  map[string][]*File
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExportEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ExportEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e ExportEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[2] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Export) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case export.FieldFields:
			values[i] = new([]byte)
		case export.FieldID, export.FieldCreatedBy, export.FieldUpdatedBy, export.FieldDeletedBy, export.FieldOwnerID, export.FieldExportType, export.FieldFormat, export.FieldStatus, export.FieldRequestorID:
			values[i] = new(sql.NullString)
		case export.FieldCreatedAt, export.FieldUpdatedAt, export.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Export fields.
func (e *Export) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case export.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case export.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case export.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case export.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = value.String
			}
		case export.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = value.String
			}
		case export.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = value.Time
			}
		case export.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				e.DeletedBy = value.String
			}
		case export.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				e.OwnerID = value.String
			}
		case export.FieldExportType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field export_type", values[i])
			} else if value.Valid {
				e.ExportType = enums.ExportType(value.String)
			}
		case export.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				e.Format = enums.ExportFormat(value.String)
			}
		case export.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = enums.ExportStatus(value.String)
			}
		case export.FieldRequestorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requestor_id", values[i])
			} else if value.Valid {
				e.RequestorID = value.String
			}
		case export.FieldFields:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field fields", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Fields); err != nil {
					return fmt.Errorf("unmarshal field fields: %w", err)
				}
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Export.
// This includes values selected through modifiers, order, etc.
func (e *Export) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Export entity.
func (e *Export) QueryOwner() *OrganizationQuery {
	return NewExportClient(e.config).QueryOwner(e)
}

// QueryEvents queries the "events" edge of the Export entity.
func (e *Export) QueryEvents() *EventQuery {
	return NewExportClient(e.config).QueryEvents(e)
}

// QueryFiles queries the "files" edge of the Export entity.
func (e *Export) QueryFiles() *FileQuery {
	return NewExportClient(e.config).QueryFiles(e)
}

// Update returns a builder for updating this Export.
// Note that you need to call Export.Unwrap() before calling this method if this Export
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Export) Update() *ExportUpdateOne {
	return NewExportClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Export entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Export) Unwrap() *Export {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("generated: Export is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Export) String() string {
	var builder strings.Builder
	builder.WriteString("Export(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(e.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(e.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(e.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(e.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(e.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("export_type=")
	builder.WriteString(fmt.Sprintf("%v", e.ExportType))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(fmt.Sprintf("%v", e.Format))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("requestor_id=")
	builder.WriteString(e.RequestorID)
	builder.WriteString(", ")
	builder.WriteString("fields=")
	builder.WriteString(fmt.Sprintf("%v", e.Fields))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Export) NamedEvents(name string) ([]*Event, error) {
	if e.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Export) appendNamedEvents(name string, edges ...*Event) {
	if e.Edges.namedEvents == nil {
		e.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		e.Edges.namedEvents[name] = []*Event{}
	} else {
		e.Edges.namedEvents[name] = append(e.Edges.namedEvents[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Export) NamedFiles(name string) ([]*File, error) {
	if e.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Export) appendNamedFiles(name string, edges ...*File) {
	if e.Edges.namedFiles == nil {
		e.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		e.Edges.namedFiles[name] = []*File{}
	} else {
		e.Edges.namedFiles[name] = append(e.Edges.namedFiles[name], edges...)
	}
}

// Exports is a parsable slice of Export.
type Exports []*Export
