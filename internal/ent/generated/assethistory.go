// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/assethistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// AssetHistory is the model entity for the AssetHistory schema.
type AssetHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the type of the asset, e.g. technology, domain, device, etc
	AssetType enums.AssetType `json:"asset_type,omitempty"`
	// the name of the asset, e.g. matts computer, office router, IP address, etc
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// unique identifier like domain, device id, etc
	Identifier string `json:"identifier,omitempty"`
	// the website of the asset, if applicable
	Website string `json:"website,omitempty"`
	// the CPE (Common Platform Enumeration) of the asset, if applicable
	Cpe string `json:"cpe,omitempty"`
	// the categories of the asset, e.g. web server, database, etc
	Categories   []string `json:"categories,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assethistory.FieldTags, assethistory.FieldCategories:
			values[i] = new([]byte)
		case assethistory.FieldOperation:
			values[i] = new(history.OpType)
		case assethistory.FieldID, assethistory.FieldRef, assethistory.FieldCreatedBy, assethistory.FieldUpdatedBy, assethistory.FieldDeletedBy, assethistory.FieldOwnerID, assethistory.FieldAssetType, assethistory.FieldName, assethistory.FieldDescription, assethistory.FieldIdentifier, assethistory.FieldWebsite, assethistory.FieldCpe:
			values[i] = new(sql.NullString)
		case assethistory.FieldHistoryTime, assethistory.FieldCreatedAt, assethistory.FieldUpdatedAt, assethistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetHistory fields.
func (ah *AssetHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assethistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ah.ID = value.String
			}
		case assethistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				ah.HistoryTime = value.Time
			}
		case assethistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				ah.Ref = value.String
			}
		case assethistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				ah.Operation = *value
			}
		case assethistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ah.CreatedAt = value.Time
			}
		case assethistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ah.UpdatedAt = value.Time
			}
		case assethistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ah.CreatedBy = value.String
			}
		case assethistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ah.UpdatedBy = value.String
			}
		case assethistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ah.DeletedAt = value.Time
			}
		case assethistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ah.DeletedBy = value.String
			}
		case assethistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ah.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case assethistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				ah.OwnerID = value.String
			}
		case assethistory.FieldAssetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_type", values[i])
			} else if value.Valid {
				ah.AssetType = enums.AssetType(value.String)
			}
		case assethistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ah.Name = value.String
			}
		case assethistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ah.Description = value.String
			}
		case assethistory.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				ah.Identifier = value.String
			}
		case assethistory.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				ah.Website = value.String
			}
		case assethistory.FieldCpe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpe", values[i])
			} else if value.Valid {
				ah.Cpe = value.String
			}
		case assethistory.FieldCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ah.Categories); err != nil {
					return fmt.Errorf("unmarshal field categories: %w", err)
				}
			}
		default:
			ah.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetHistory.
// This includes values selected through modifiers, order, etc.
func (ah *AssetHistory) Value(name string) (ent.Value, error) {
	return ah.selectValues.Get(name)
}

// Update returns a builder for updating this AssetHistory.
// Note that you need to call AssetHistory.Unwrap() before calling this method if this AssetHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ah *AssetHistory) Update() *AssetHistoryUpdateOne {
	return NewAssetHistoryClient(ah.config).UpdateOne(ah)
}

// Unwrap unwraps the AssetHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ah *AssetHistory) Unwrap() *AssetHistory {
	_tx, ok := ah.config.driver.(*txDriver)
	if !ok {
		panic("generated: AssetHistory is not a transactional entity")
	}
	ah.config.driver = _tx.drv
	return ah
}

// String implements the fmt.Stringer.
func (ah *AssetHistory) String() string {
	var builder strings.Builder
	builder.WriteString("AssetHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ah.ID))
	builder.WriteString("history_time=")
	builder.WriteString(ah.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(ah.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", ah.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ah.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ah.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ah.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ah.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ah.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ah.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ah.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(ah.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("asset_type=")
	builder.WriteString(fmt.Sprintf("%v", ah.AssetType))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ah.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ah.Description)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(ah.Identifier)
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(ah.Website)
	builder.WriteString(", ")
	builder.WriteString("cpe=")
	builder.WriteString(ah.Cpe)
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(fmt.Sprintf("%v", ah.Categories))
	builder.WriteByte(')')
	return builder.String()
}

// AssetHistories is a parsable slice of AssetHistory.
type AssetHistories []*AssetHistory
