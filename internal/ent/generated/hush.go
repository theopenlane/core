// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// Hush is the model entity for the Hush schema.
type Hush struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID string `json:"created_by_id,omitempty"`
	// UpdatedByID holds the value of the "updated_by_id" field.
	UpdatedByID string `json:"updated_by_id,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedByID holds the value of the "deleted_by_id" field.
	DeletedByID string `json:"deleted_by_id,omitempty"`
	// the logical name of the corresponding hush secret or it's general grouping
	Name string `json:"name,omitempty"`
	// a description of the hush value or purpose, such as github PAT
	Description string `json:"description,omitempty"`
	// the kind of secret, such as sshkey, certificate, api token, etc.
	Kind string `json:"kind,omitempty"`
	// the generic name of a secret associated with the organization
	SecretName string `json:"secret_name,omitempty"`
	// the secret value
	SecretValue string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HushQuery when eager-loading is set.
	Edges        HushEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HushEdges holds the relations/edges for other nodes in the graph.
type HushEdges struct {
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updated_by,omitempty"`
	// the integration associated with the secret
	Integrations []*Integration `json:"integrations,omitempty"`
	// Organization holds the value of the organization edge.
	Organization []*Organization `json:"organization,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedIntegrations map[string][]*Integration
	namedOrganization map[string][]*Organization
	namedEvents       map[string][]*Event
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HushEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HushEdges) UpdatedByOrErr() (*User, error) {
	if e.UpdatedBy != nil {
		return e.UpdatedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e HushEdges) IntegrationsOrErr() ([]*Integration, error) {
	if e.loadedTypes[2] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading.
func (e HushEdges) OrganizationOrErr() ([]*Organization, error) {
	if e.loadedTypes[3] {
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e HushEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[4] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hush) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hush.FieldID, hush.FieldCreatedByID, hush.FieldUpdatedByID, hush.FieldMappingID, hush.FieldDeletedByID, hush.FieldName, hush.FieldDescription, hush.FieldKind, hush.FieldSecretName, hush.FieldSecretValue:
			values[i] = new(sql.NullString)
		case hush.FieldCreatedAt, hush.FieldUpdatedAt, hush.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hush fields.
func (h *Hush) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hush.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		case hush.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case hush.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Time
			}
		case hush.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				h.CreatedByID = value.String
			}
		case hush.FieldUpdatedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_id", values[i])
			} else if value.Valid {
				h.UpdatedByID = value.String
			}
		case hush.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				h.MappingID = value.String
			}
		case hush.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				h.DeletedAt = value.Time
			}
		case hush.FieldDeletedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by_id", values[i])
			} else if value.Valid {
				h.DeletedByID = value.String
			}
		case hush.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case hush.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				h.Description = value.String
			}
		case hush.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				h.Kind = value.String
			}
		case hush.FieldSecretName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_name", values[i])
			} else if value.Valid {
				h.SecretName = value.String
			}
		case hush.FieldSecretValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_value", values[i])
			} else if value.Valid {
				h.SecretValue = value.String
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Hush.
// This includes values selected through modifiers, order, etc.
func (h *Hush) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryCreatedBy queries the "created_by" edge of the Hush entity.
func (h *Hush) QueryCreatedBy() *UserQuery {
	return NewHushClient(h.config).QueryCreatedBy(h)
}

// QueryUpdatedBy queries the "updated_by" edge of the Hush entity.
func (h *Hush) QueryUpdatedBy() *UserQuery {
	return NewHushClient(h.config).QueryUpdatedBy(h)
}

// QueryIntegrations queries the "integrations" edge of the Hush entity.
func (h *Hush) QueryIntegrations() *IntegrationQuery {
	return NewHushClient(h.config).QueryIntegrations(h)
}

// QueryOrganization queries the "organization" edge of the Hush entity.
func (h *Hush) QueryOrganization() *OrganizationQuery {
	return NewHushClient(h.config).QueryOrganization(h)
}

// QueryEvents queries the "events" edge of the Hush entity.
func (h *Hush) QueryEvents() *EventQuery {
	return NewHushClient(h.config).QueryEvents(h)
}

// Update returns a builder for updating this Hush.
// Note that you need to call Hush.Unwrap() before calling this method if this Hush
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hush) Update() *HushUpdateOne {
	return NewHushClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Hush entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hush) Unwrap() *Hush {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("generated: Hush is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hush) String() string {
	var builder strings.Builder
	builder.WriteString("Hush(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(h.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by_id=")
	builder.WriteString(h.CreatedByID)
	builder.WriteString(", ")
	builder.WriteString("updated_by_id=")
	builder.WriteString(h.UpdatedByID)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(h.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(h.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by_id=")
	builder.WriteString(h.DeletedByID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(h.Description)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(h.Kind)
	builder.WriteString(", ")
	builder.WriteString("secret_name=")
	builder.WriteString(h.SecretName)
	builder.WriteString(", ")
	builder.WriteString("secret_value=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// NamedIntegrations returns the Integrations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (h *Hush) NamedIntegrations(name string) ([]*Integration, error) {
	if h.Edges.namedIntegrations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := h.Edges.namedIntegrations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (h *Hush) appendNamedIntegrations(name string, edges ...*Integration) {
	if h.Edges.namedIntegrations == nil {
		h.Edges.namedIntegrations = make(map[string][]*Integration)
	}
	if len(edges) == 0 {
		h.Edges.namedIntegrations[name] = []*Integration{}
	} else {
		h.Edges.namedIntegrations[name] = append(h.Edges.namedIntegrations[name], edges...)
	}
}

// NamedOrganization returns the Organization named value or an error if the edge was not
// loaded in eager-loading with this name.
func (h *Hush) NamedOrganization(name string) ([]*Organization, error) {
	if h.Edges.namedOrganization == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := h.Edges.namedOrganization[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (h *Hush) appendNamedOrganization(name string, edges ...*Organization) {
	if h.Edges.namedOrganization == nil {
		h.Edges.namedOrganization = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		h.Edges.namedOrganization[name] = []*Organization{}
	} else {
		h.Edges.namedOrganization[name] = append(h.Edges.namedOrganization[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (h *Hush) NamedEvents(name string) ([]*Event, error) {
	if h.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := h.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (h *Hush) appendNamedEvents(name string, edges ...*Event) {
	if h.Edges.namedEvents == nil {
		h.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		h.Edges.namedEvents[name] = []*Event{}
	} else {
		h.Edges.namedEvents[name] = append(h.Edges.namedEvents[name], edges...)
	}
}

// Hushes is a parsable slice of Hush.
type Hushes []*Hush
