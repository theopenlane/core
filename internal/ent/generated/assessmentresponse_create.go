// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/pkg/enums"
)

// AssessmentResponseCreate is the builder for creating a AssessmentResponse entity.
type AssessmentResponseCreate struct {
	config
	mutation *AssessmentResponseMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *AssessmentResponseCreate) SetCreatedAt(v time.Time) *AssessmentResponseCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableCreatedAt(v *time.Time) *AssessmentResponseCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AssessmentResponseCreate) SetUpdatedAt(v time.Time) *AssessmentResponseCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableUpdatedAt(v *time.Time) *AssessmentResponseCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *AssessmentResponseCreate) SetCreatedBy(v string) *AssessmentResponseCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableCreatedBy(v *string) *AssessmentResponseCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *AssessmentResponseCreate) SetUpdatedBy(v string) *AssessmentResponseCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableUpdatedBy(v *string) *AssessmentResponseCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *AssessmentResponseCreate) SetDeletedAt(v time.Time) *AssessmentResponseCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableDeletedAt(v *time.Time) *AssessmentResponseCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *AssessmentResponseCreate) SetDeletedBy(v string) *AssessmentResponseCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableDeletedBy(v *string) *AssessmentResponseCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *AssessmentResponseCreate) SetTags(v []string) *AssessmentResponseCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetAssessmentID sets the "assessment_id" field.
func (_c *AssessmentResponseCreate) SetAssessmentID(v string) *AssessmentResponseCreate {
	_c.mutation.SetAssessmentID(v)
	return _c
}

// SetResponderID sets the "responder_id" field.
func (_c *AssessmentResponseCreate) SetResponderID(v string) *AssessmentResponseCreate {
	_c.mutation.SetResponderID(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *AssessmentResponseCreate) SetStatus(v enums.AssessmentResponseStatus) *AssessmentResponseCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableStatus(v *enums.AssessmentResponseStatus) *AssessmentResponseCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetAssignedAt sets the "assigned_at" field.
func (_c *AssessmentResponseCreate) SetAssignedAt(v time.Time) *AssessmentResponseCreate {
	_c.mutation.SetAssignedAt(v)
	return _c
}

// SetStartedAt sets the "started_at" field.
func (_c *AssessmentResponseCreate) SetStartedAt(v time.Time) *AssessmentResponseCreate {
	_c.mutation.SetStartedAt(v)
	return _c
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableStartedAt(v *time.Time) *AssessmentResponseCreate {
	if v != nil {
		_c.SetStartedAt(*v)
	}
	return _c
}

// SetCompletedAt sets the "completed_at" field.
func (_c *AssessmentResponseCreate) SetCompletedAt(v time.Time) *AssessmentResponseCreate {
	_c.mutation.SetCompletedAt(v)
	return _c
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableCompletedAt(v *time.Time) *AssessmentResponseCreate {
	if v != nil {
		_c.SetCompletedAt(*v)
	}
	return _c
}

// SetDueDate sets the "due_date" field.
func (_c *AssessmentResponseCreate) SetDueDate(v time.Time) *AssessmentResponseCreate {
	_c.mutation.SetDueDate(v)
	return _c
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableDueDate(v *time.Time) *AssessmentResponseCreate {
	if v != nil {
		_c.SetDueDate(*v)
	}
	return _c
}

// SetResponseDataID sets the "response_data_id" field.
func (_c *AssessmentResponseCreate) SetResponseDataID(v string) *AssessmentResponseCreate {
	_c.mutation.SetResponseDataID(v)
	return _c
}

// SetNillableResponseDataID sets the "response_data_id" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableResponseDataID(v *string) *AssessmentResponseCreate {
	if v != nil {
		_c.SetResponseDataID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AssessmentResponseCreate) SetID(v string) *AssessmentResponseCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableID(v *string) *AssessmentResponseCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetAssessment sets the "assessment" edge to the Assessment entity.
func (_c *AssessmentResponseCreate) SetAssessment(v *Assessment) *AssessmentResponseCreate {
	return _c.SetAssessmentID(v.ID)
}

// SetDocumentID sets the "document" edge to the DocumentData entity by ID.
func (_c *AssessmentResponseCreate) SetDocumentID(id string) *AssessmentResponseCreate {
	_c.mutation.SetDocumentID(id)
	return _c
}

// SetNillableDocumentID sets the "document" edge to the DocumentData entity by ID if the given value is not nil.
func (_c *AssessmentResponseCreate) SetNillableDocumentID(id *string) *AssessmentResponseCreate {
	if id != nil {
		_c = _c.SetDocumentID(*id)
	}
	return _c
}

// SetDocument sets the "document" edge to the DocumentData entity.
func (_c *AssessmentResponseCreate) SetDocument(v *DocumentData) *AssessmentResponseCreate {
	return _c.SetDocumentID(v.ID)
}

// Mutation returns the AssessmentResponseMutation object of the builder.
func (_c *AssessmentResponseCreate) Mutation() *AssessmentResponseMutation {
	return _c.mutation
}

// Save creates the AssessmentResponse in the database.
func (_c *AssessmentResponseCreate) Save(ctx context.Context) (*AssessmentResponse, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AssessmentResponseCreate) SaveX(ctx context.Context) *AssessmentResponse {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AssessmentResponseCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AssessmentResponseCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AssessmentResponseCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if assessmentresponse.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessmentresponse.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := assessmentresponse.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if assessmentresponse.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessmentresponse.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := assessmentresponse.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := assessmentresponse.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := assessmentresponse.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.StartedAt(); !ok {
		v := assessmentresponse.DefaultStartedAt
		_c.mutation.SetStartedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if assessmentresponse.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized assessmentresponse.DefaultID (forgotten import generated/runtime?)")
		}
		v := assessmentresponse.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *AssessmentResponseCreate) check() error {
	if _, ok := _c.mutation.AssessmentID(); !ok {
		return &ValidationError{Name: "assessment_id", err: errors.New(`generated: missing required field "AssessmentResponse.assessment_id"`)}
	}
	if v, ok := _c.mutation.AssessmentID(); ok {
		if err := assessmentresponse.AssessmentIDValidator(v); err != nil {
			return &ValidationError{Name: "assessment_id", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponse.assessment_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ResponderID(); !ok {
		return &ValidationError{Name: "responder_id", err: errors.New(`generated: missing required field "AssessmentResponse.responder_id"`)}
	}
	if v, ok := _c.mutation.ResponderID(); ok {
		if err := assessmentresponse.ResponderIDValidator(v); err != nil {
			return &ValidationError{Name: "responder_id", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponse.responder_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "AssessmentResponse.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := assessmentresponse.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponse.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AssignedAt(); !ok {
		return &ValidationError{Name: "assigned_at", err: errors.New(`generated: missing required field "AssessmentResponse.assigned_at"`)}
	}
	if _, ok := _c.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`generated: missing required field "AssessmentResponse.started_at"`)}
	}
	if len(_c.mutation.AssessmentIDs()) == 0 {
		return &ValidationError{Name: "assessment", err: errors.New(`generated: missing required edge "AssessmentResponse.assessment"`)}
	}
	return nil
}

func (_c *AssessmentResponseCreate) sqlSave(ctx context.Context) (*AssessmentResponse, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AssessmentResponse.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AssessmentResponseCreate) createSpec() (*AssessmentResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &AssessmentResponse{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(assessmentresponse.Table, sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.AssessmentResponse
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(assessmentresponse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmentresponse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(assessmentresponse.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmentresponse.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(assessmentresponse.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(assessmentresponse.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(assessmentresponse.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.ResponderID(); ok {
		_spec.SetField(assessmentresponse.FieldResponderID, field.TypeString, value)
		_node.ResponderID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(assessmentresponse.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.AssignedAt(); ok {
		_spec.SetField(assessmentresponse.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if value, ok := _c.mutation.StartedAt(); ok {
		_spec.SetField(assessmentresponse.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := _c.mutation.CompletedAt(); ok {
		_spec.SetField(assessmentresponse.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := _c.mutation.DueDate(); ok {
		_spec.SetField(assessmentresponse.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if nodes := _c.mutation.AssessmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assessmentresponse.AssessmentTable,
			Columns: []string{assessmentresponse.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssessmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assessmentresponse.DocumentTable,
			Columns: []string{assessmentresponse.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResponseDataID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssessmentResponseCreateBulk is the builder for creating many AssessmentResponse entities in bulk.
type AssessmentResponseCreateBulk struct {
	config
	err      error
	builders []*AssessmentResponseCreate
}

// Save creates the AssessmentResponse entities in the database.
func (_c *AssessmentResponseCreateBulk) Save(ctx context.Context) ([]*AssessmentResponse, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AssessmentResponse, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssessmentResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AssessmentResponseCreateBulk) SaveX(ctx context.Context) []*AssessmentResponse {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AssessmentResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AssessmentResponseCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
