// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// AssessmentResponseCreate is the builder for creating a AssessmentResponse entity.
type AssessmentResponseCreate struct {
	config
	mutation *AssessmentResponseMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (arc *AssessmentResponseCreate) SetCreatedAt(t time.Time) *AssessmentResponseCreate {
	arc.mutation.SetCreatedAt(t)
	return arc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableCreatedAt(t *time.Time) *AssessmentResponseCreate {
	if t != nil {
		arc.SetCreatedAt(*t)
	}
	return arc
}

// SetUpdatedAt sets the "updated_at" field.
func (arc *AssessmentResponseCreate) SetUpdatedAt(t time.Time) *AssessmentResponseCreate {
	arc.mutation.SetUpdatedAt(t)
	return arc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableUpdatedAt(t *time.Time) *AssessmentResponseCreate {
	if t != nil {
		arc.SetUpdatedAt(*t)
	}
	return arc
}

// SetCreatedBy sets the "created_by" field.
func (arc *AssessmentResponseCreate) SetCreatedBy(s string) *AssessmentResponseCreate {
	arc.mutation.SetCreatedBy(s)
	return arc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableCreatedBy(s *string) *AssessmentResponseCreate {
	if s != nil {
		arc.SetCreatedBy(*s)
	}
	return arc
}

// SetUpdatedBy sets the "updated_by" field.
func (arc *AssessmentResponseCreate) SetUpdatedBy(s string) *AssessmentResponseCreate {
	arc.mutation.SetUpdatedBy(s)
	return arc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableUpdatedBy(s *string) *AssessmentResponseCreate {
	if s != nil {
		arc.SetUpdatedBy(*s)
	}
	return arc
}

// SetDeletedAt sets the "deleted_at" field.
func (arc *AssessmentResponseCreate) SetDeletedAt(t time.Time) *AssessmentResponseCreate {
	arc.mutation.SetDeletedAt(t)
	return arc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableDeletedAt(t *time.Time) *AssessmentResponseCreate {
	if t != nil {
		arc.SetDeletedAt(*t)
	}
	return arc
}

// SetDeletedBy sets the "deleted_by" field.
func (arc *AssessmentResponseCreate) SetDeletedBy(s string) *AssessmentResponseCreate {
	arc.mutation.SetDeletedBy(s)
	return arc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableDeletedBy(s *string) *AssessmentResponseCreate {
	if s != nil {
		arc.SetDeletedBy(*s)
	}
	return arc
}

// SetTags sets the "tags" field.
func (arc *AssessmentResponseCreate) SetTags(s []string) *AssessmentResponseCreate {
	arc.mutation.SetTags(s)
	return arc
}

// SetOwnerID sets the "owner_id" field.
func (arc *AssessmentResponseCreate) SetOwnerID(s string) *AssessmentResponseCreate {
	arc.mutation.SetOwnerID(s)
	return arc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableOwnerID(s *string) *AssessmentResponseCreate {
	if s != nil {
		arc.SetOwnerID(*s)
	}
	return arc
}

// SetAssessmentID sets the "assessment_id" field.
func (arc *AssessmentResponseCreate) SetAssessmentID(s string) *AssessmentResponseCreate {
	arc.mutation.SetAssessmentID(s)
	return arc
}

// SetUserID sets the "user_id" field.
func (arc *AssessmentResponseCreate) SetUserID(s string) *AssessmentResponseCreate {
	arc.mutation.SetUserID(s)
	return arc
}

// SetStatus sets the "status" field.
func (arc *AssessmentResponseCreate) SetStatus(ers enums.AssessmentResponseStatus) *AssessmentResponseCreate {
	arc.mutation.SetStatus(ers)
	return arc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableStatus(ers *enums.AssessmentResponseStatus) *AssessmentResponseCreate {
	if ers != nil {
		arc.SetStatus(*ers)
	}
	return arc
}

// SetAssignedAt sets the "assigned_at" field.
func (arc *AssessmentResponseCreate) SetAssignedAt(t time.Time) *AssessmentResponseCreate {
	arc.mutation.SetAssignedAt(t)
	return arc
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableAssignedAt(t *time.Time) *AssessmentResponseCreate {
	if t != nil {
		arc.SetAssignedAt(*t)
	}
	return arc
}

// SetStartedAt sets the "started_at" field.
func (arc *AssessmentResponseCreate) SetStartedAt(t time.Time) *AssessmentResponseCreate {
	arc.mutation.SetStartedAt(t)
	return arc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableStartedAt(t *time.Time) *AssessmentResponseCreate {
	if t != nil {
		arc.SetStartedAt(*t)
	}
	return arc
}

// SetCompletedAt sets the "completed_at" field.
func (arc *AssessmentResponseCreate) SetCompletedAt(t time.Time) *AssessmentResponseCreate {
	arc.mutation.SetCompletedAt(t)
	return arc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableCompletedAt(t *time.Time) *AssessmentResponseCreate {
	if t != nil {
		arc.SetCompletedAt(*t)
	}
	return arc
}

// SetDueDate sets the "due_date" field.
func (arc *AssessmentResponseCreate) SetDueDate(t time.Time) *AssessmentResponseCreate {
	arc.mutation.SetDueDate(t)
	return arc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableDueDate(t *time.Time) *AssessmentResponseCreate {
	if t != nil {
		arc.SetDueDate(*t)
	}
	return arc
}

// SetResponseDataID sets the "response_data_id" field.
func (arc *AssessmentResponseCreate) SetResponseDataID(s string) *AssessmentResponseCreate {
	arc.mutation.SetResponseDataID(s)
	return arc
}

// SetNillableResponseDataID sets the "response_data_id" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableResponseDataID(s *string) *AssessmentResponseCreate {
	if s != nil {
		arc.SetResponseDataID(*s)
	}
	return arc
}

// SetID sets the "id" field.
func (arc *AssessmentResponseCreate) SetID(s string) *AssessmentResponseCreate {
	arc.mutation.SetID(s)
	return arc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableID(s *string) *AssessmentResponseCreate {
	if s != nil {
		arc.SetID(*s)
	}
	return arc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (arc *AssessmentResponseCreate) SetOwner(o *Organization) *AssessmentResponseCreate {
	return arc.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (arc *AssessmentResponseCreate) AddBlockedGroupIDs(ids ...string) *AssessmentResponseCreate {
	arc.mutation.AddBlockedGroupIDs(ids...)
	return arc
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (arc *AssessmentResponseCreate) AddBlockedGroups(g ...*Group) *AssessmentResponseCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return arc.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (arc *AssessmentResponseCreate) AddEditorIDs(ids ...string) *AssessmentResponseCreate {
	arc.mutation.AddEditorIDs(ids...)
	return arc
}

// AddEditors adds the "editors" edges to the Group entity.
func (arc *AssessmentResponseCreate) AddEditors(g ...*Group) *AssessmentResponseCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return arc.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (arc *AssessmentResponseCreate) AddViewerIDs(ids ...string) *AssessmentResponseCreate {
	arc.mutation.AddViewerIDs(ids...)
	return arc
}

// AddViewers adds the "viewers" edges to the Group entity.
func (arc *AssessmentResponseCreate) AddViewers(g ...*Group) *AssessmentResponseCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return arc.AddViewerIDs(ids...)
}

// SetAssessment sets the "assessment" edge to the Assessment entity.
func (arc *AssessmentResponseCreate) SetAssessment(a *Assessment) *AssessmentResponseCreate {
	return arc.SetAssessmentID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (arc *AssessmentResponseCreate) SetUser(u *User) *AssessmentResponseCreate {
	return arc.SetUserID(u.ID)
}

// SetDocumentID sets the "document" edge to the DocumentData entity by ID.
func (arc *AssessmentResponseCreate) SetDocumentID(id string) *AssessmentResponseCreate {
	arc.mutation.SetDocumentID(id)
	return arc
}

// SetNillableDocumentID sets the "document" edge to the DocumentData entity by ID if the given value is not nil.
func (arc *AssessmentResponseCreate) SetNillableDocumentID(id *string) *AssessmentResponseCreate {
	if id != nil {
		arc = arc.SetDocumentID(*id)
	}
	return arc
}

// SetDocument sets the "document" edge to the DocumentData entity.
func (arc *AssessmentResponseCreate) SetDocument(d *DocumentData) *AssessmentResponseCreate {
	return arc.SetDocumentID(d.ID)
}

// Mutation returns the AssessmentResponseMutation object of the builder.
func (arc *AssessmentResponseCreate) Mutation() *AssessmentResponseMutation {
	return arc.mutation
}

// Save creates the AssessmentResponse in the database.
func (arc *AssessmentResponseCreate) Save(ctx context.Context) (*AssessmentResponse, error) {
	if err := arc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AssessmentResponseCreate) SaveX(ctx context.Context) *AssessmentResponse {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AssessmentResponseCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AssessmentResponseCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *AssessmentResponseCreate) defaults() error {
	if _, ok := arc.mutation.CreatedAt(); !ok {
		if assessmentresponse.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessmentresponse.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := assessmentresponse.DefaultCreatedAt()
		arc.mutation.SetCreatedAt(v)
	}
	if _, ok := arc.mutation.UpdatedAt(); !ok {
		if assessmentresponse.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessmentresponse.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := assessmentresponse.DefaultUpdatedAt()
		arc.mutation.SetUpdatedAt(v)
	}
	if _, ok := arc.mutation.Tags(); !ok {
		v := assessmentresponse.DefaultTags
		arc.mutation.SetTags(v)
	}
	if _, ok := arc.mutation.Status(); !ok {
		v := assessmentresponse.DefaultStatus
		arc.mutation.SetStatus(v)
	}
	if _, ok := arc.mutation.StartedAt(); !ok {
		v := assessmentresponse.DefaultStartedAt
		arc.mutation.SetStartedAt(v)
	}
	if _, ok := arc.mutation.ID(); !ok {
		if assessmentresponse.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized assessmentresponse.DefaultID (forgotten import generated/runtime?)")
		}
		v := assessmentresponse.DefaultID()
		arc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (arc *AssessmentResponseCreate) check() error {
	if v, ok := arc.mutation.OwnerID(); ok {
		if err := assessmentresponse.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponse.owner_id": %w`, err)}
		}
	}
	if _, ok := arc.mutation.AssessmentID(); !ok {
		return &ValidationError{Name: "assessment_id", err: errors.New(`generated: missing required field "AssessmentResponse.assessment_id"`)}
	}
	if v, ok := arc.mutation.AssessmentID(); ok {
		if err := assessmentresponse.AssessmentIDValidator(v); err != nil {
			return &ValidationError{Name: "assessment_id", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponse.assessment_id": %w`, err)}
		}
	}
	if _, ok := arc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "AssessmentResponse.user_id"`)}
	}
	if v, ok := arc.mutation.UserID(); ok {
		if err := assessmentresponse.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponse.user_id": %w`, err)}
		}
	}
	if _, ok := arc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "AssessmentResponse.status"`)}
	}
	if v, ok := arc.mutation.Status(); ok {
		if err := assessmentresponse.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponse.status": %w`, err)}
		}
	}
	if _, ok := arc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`generated: missing required field "AssessmentResponse.started_at"`)}
	}
	if len(arc.mutation.AssessmentIDs()) == 0 {
		return &ValidationError{Name: "assessment", err: errors.New(`generated: missing required edge "AssessmentResponse.assessment"`)}
	}
	if len(arc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`generated: missing required edge "AssessmentResponse.user"`)}
	}
	return nil
}

func (arc *AssessmentResponseCreate) sqlSave(ctx context.Context) (*AssessmentResponse, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AssessmentResponse.ID type: %T", _spec.ID.Value)
		}
	}
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AssessmentResponseCreate) createSpec() (*AssessmentResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &AssessmentResponse{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(assessmentresponse.Table, sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString))
	)
	_spec.Schema = arc.schemaConfig.AssessmentResponse
	if id, ok := arc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arc.mutation.CreatedAt(); ok {
		_spec.SetField(assessmentresponse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := arc.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmentresponse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := arc.mutation.CreatedBy(); ok {
		_spec.SetField(assessmentresponse.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := arc.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmentresponse.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := arc.mutation.DeletedAt(); ok {
		_spec.SetField(assessmentresponse.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := arc.mutation.DeletedBy(); ok {
		_spec.SetField(assessmentresponse.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := arc.mutation.Tags(); ok {
		_spec.SetField(assessmentresponse.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := arc.mutation.Status(); ok {
		_spec.SetField(assessmentresponse.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := arc.mutation.AssignedAt(); ok {
		_spec.SetField(assessmentresponse.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if value, ok := arc.mutation.StartedAt(); ok {
		_spec.SetField(assessmentresponse.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := arc.mutation.CompletedAt(); ok {
		_spec.SetField(assessmentresponse.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := arc.mutation.DueDate(); ok {
		_spec.SetField(assessmentresponse.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if nodes := arc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assessmentresponse.OwnerTable,
			Columns: []string{assessmentresponse.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = arc.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessmentresponse.BlockedGroupsTable,
			Columns: assessmentresponse.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = arc.schemaConfig.AssessmentResponseBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessmentresponse.EditorsTable,
			Columns: assessmentresponse.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = arc.schemaConfig.AssessmentResponseEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessmentresponse.ViewersTable,
			Columns: assessmentresponse.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = arc.schemaConfig.AssessmentResponseViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.AssessmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assessmentresponse.AssessmentTable,
			Columns: []string{assessmentresponse.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString),
			},
		}
		edge.Schema = arc.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssessmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assessmentresponse.UserTable,
			Columns: []string{assessmentresponse.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = arc.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assessmentresponse.DocumentTable,
			Columns: []string{assessmentresponse.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = arc.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResponseDataID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssessmentResponseCreateBulk is the builder for creating many AssessmentResponse entities in bulk.
type AssessmentResponseCreateBulk struct {
	config
	err      error
	builders []*AssessmentResponseCreate
}

// Save creates the AssessmentResponse entities in the database.
func (arcb *AssessmentResponseCreateBulk) Save(ctx context.Context) ([]*AssessmentResponse, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AssessmentResponse, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssessmentResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AssessmentResponseCreateBulk) SaveX(ctx context.Context) []*AssessmentResponse {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AssessmentResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AssessmentResponseCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
