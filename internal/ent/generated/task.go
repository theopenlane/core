// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the title of the task
	Title string `json:"title,omitempty"`
	// the details of the task
	Details string `json:"details,omitempty"`
	// the status of the task
	Status enums.TaskStatus `json:"status,omitempty"`
	// the category of the task, e.g. evidence upload, risk review, policy review, etc.
	Category string `json:"category,omitempty"`
	// the due date of the task
	Due *models.DateTime `json:"due,omitempty"`
	// the completion date of the task
	Completed *models.DateTime `json:"completed,omitempty"`
	// the id of the user who was assigned the task
	AssigneeID string `json:"assignee_id,omitempty"`
	// the id of the user who assigned the task, can be left empty if created by the system or a service token
	AssignerID string `json:"assigner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Assigner holds the value of the assigner edge.
	Assigner *User `json:"assigner,omitempty"`
	// Assignee holds the value of the assignee edge.
	Assignee *User `json:"assignee,omitempty"`
	// conversations related to the task
	Comments []*Note `json:"comments,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// InternalPolicies holds the value of the internal_policies edge.
	InternalPolicies []*InternalPolicy `json:"internal_policies,omitempty"`
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// ControlObjectives holds the value of the control_objectives edge.
	ControlObjectives []*ControlObjective `json:"control_objectives,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// Risks holds the value of the risks edge.
	Risks []*Risk `json:"risks,omitempty"`
	// Evidence holds the value of the evidence edge.
	Evidence []*Evidence `json:"evidence,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
	// totalCount holds the count of the edges above.
	totalCount [13]map[string]int

	namedComments          map[string][]*Note
	namedGroups            map[string][]*Group
	namedInternalPolicies  map[string][]*InternalPolicy
	namedProcedures        map[string][]*Procedure
	namedControls          map[string][]*Control
	namedSubcontrols       map[string][]*Subcontrol
	namedControlObjectives map[string][]*ControlObjective
	namedPrograms          map[string][]*Program
	namedRisks             map[string][]*Risk
	namedEvidence          map[string][]*Evidence
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// AssignerOrErr returns the Assigner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) AssignerOrErr() (*User, error) {
	if e.Assigner != nil {
		return e.Assigner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assigner"}
}

// AssigneeOrErr returns the Assignee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) AssigneeOrErr() (*User, error) {
	if e.Assignee != nil {
		return e.Assignee, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assignee"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) CommentsOrErr() ([]*Note, error) {
	if e.loadedTypes[3] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[4] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// InternalPoliciesOrErr returns the InternalPolicies value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) InternalPoliciesOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[5] {
		return e.InternalPolicies, nil
	}
	return nil, &NotLoadedError{edge: "internal_policies"}
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[6] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[7] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[8] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// ControlObjectivesOrErr returns the ControlObjectives value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ControlObjectivesOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[9] {
		return e.ControlObjectives, nil
	}
	return nil, &NotLoadedError{edge: "control_objectives"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[10] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// RisksOrErr returns the Risks value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) RisksOrErr() ([]*Risk, error) {
	if e.loadedTypes[11] {
		return e.Risks, nil
	}
	return nil, &NotLoadedError{edge: "risks"}
}

// EvidenceOrErr returns the Evidence value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) EvidenceOrErr() ([]*Evidence, error) {
	if e.loadedTypes[12] {
		return e.Evidence, nil
	}
	return nil, &NotLoadedError{edge: "evidence"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldDue, task.FieldCompleted:
			values[i] = &sql.NullScanner{S: new(models.DateTime)}
		case task.FieldTags:
			values[i] = new([]byte)
		case task.FieldID, task.FieldCreatedBy, task.FieldUpdatedBy, task.FieldDeletedBy, task.FieldDisplayID, task.FieldOwnerID, task.FieldTitle, task.FieldDetails, task.FieldStatus, task.FieldCategory, task.FieldAssigneeID, task.FieldAssignerID:
			values[i] = new(sql.NullString)
		case task.FieldCreatedAt, task.FieldUpdatedAt, task.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (_m *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case task.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case task.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case task.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case task.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case task.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case task.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				_m.DisplayID = value.String
			}
		case task.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case task.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case task.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case task.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				_m.Details = value.String
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = enums.TaskStatus(value.String)
			}
		case task.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case task.FieldDue:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field due", values[i])
			} else if value.Valid {
				_m.Due = new(models.DateTime)
				*_m.Due = *value.S.(*models.DateTime)
			}
		case task.FieldCompleted:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				_m.Completed = new(models.DateTime)
				*_m.Completed = *value.S.(*models.DateTime)
			}
		case task.FieldAssigneeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assignee_id", values[i])
			} else if value.Valid {
				_m.AssigneeID = value.String
			}
		case task.FieldAssignerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assigner_id", values[i])
			} else if value.Valid {
				_m.AssignerID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (_m *Task) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Task entity.
func (_m *Task) QueryOwner() *OrganizationQuery {
	return NewTaskClient(_m.config).QueryOwner(_m)
}

// QueryAssigner queries the "assigner" edge of the Task entity.
func (_m *Task) QueryAssigner() *UserQuery {
	return NewTaskClient(_m.config).QueryAssigner(_m)
}

// QueryAssignee queries the "assignee" edge of the Task entity.
func (_m *Task) QueryAssignee() *UserQuery {
	return NewTaskClient(_m.config).QueryAssignee(_m)
}

// QueryComments queries the "comments" edge of the Task entity.
func (_m *Task) QueryComments() *NoteQuery {
	return NewTaskClient(_m.config).QueryComments(_m)
}

// QueryGroups queries the "groups" edge of the Task entity.
func (_m *Task) QueryGroups() *GroupQuery {
	return NewTaskClient(_m.config).QueryGroups(_m)
}

// QueryInternalPolicies queries the "internal_policies" edge of the Task entity.
func (_m *Task) QueryInternalPolicies() *InternalPolicyQuery {
	return NewTaskClient(_m.config).QueryInternalPolicies(_m)
}

// QueryProcedures queries the "procedures" edge of the Task entity.
func (_m *Task) QueryProcedures() *ProcedureQuery {
	return NewTaskClient(_m.config).QueryProcedures(_m)
}

// QueryControls queries the "controls" edge of the Task entity.
func (_m *Task) QueryControls() *ControlQuery {
	return NewTaskClient(_m.config).QueryControls(_m)
}

// QuerySubcontrols queries the "subcontrols" edge of the Task entity.
func (_m *Task) QuerySubcontrols() *SubcontrolQuery {
	return NewTaskClient(_m.config).QuerySubcontrols(_m)
}

// QueryControlObjectives queries the "control_objectives" edge of the Task entity.
func (_m *Task) QueryControlObjectives() *ControlObjectiveQuery {
	return NewTaskClient(_m.config).QueryControlObjectives(_m)
}

// QueryPrograms queries the "programs" edge of the Task entity.
func (_m *Task) QueryPrograms() *ProgramQuery {
	return NewTaskClient(_m.config).QueryPrograms(_m)
}

// QueryRisks queries the "risks" edge of the Task entity.
func (_m *Task) QueryRisks() *RiskQuery {
	return NewTaskClient(_m.config).QueryRisks(_m)
}

// QueryEvidence queries the "evidence" edge of the Task entity.
func (_m *Task) QueryEvidence() *EvidenceQuery {
	return NewTaskClient(_m.config).QueryEvidence(_m)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Task) Update() *TaskUpdateOne {
	return NewTaskClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Task) Unwrap() *Task {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Task is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(_m.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(_m.Details)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	if v := _m.Due; v != nil {
		builder.WriteString("due=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Completed; v != nil {
		builder.WriteString("completed=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("assignee_id=")
	builder.WriteString(_m.AssigneeID)
	builder.WriteString(", ")
	builder.WriteString("assigner_id=")
	builder.WriteString(_m.AssignerID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedComments returns the Comments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedComments(name string) ([]*Note, error) {
	if _m.Edges.namedComments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedComments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedComments(name string, edges ...*Note) {
	if _m.Edges.namedComments == nil {
		_m.Edges.namedComments = make(map[string][]*Note)
	}
	if len(edges) == 0 {
		_m.Edges.namedComments[name] = []*Note{}
	} else {
		_m.Edges.namedComments[name] = append(_m.Edges.namedComments[name], edges...)
	}
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedGroups(name string) ([]*Group, error) {
	if _m.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedGroups(name string, edges ...*Group) {
	if _m.Edges.namedGroups == nil {
		_m.Edges.namedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedGroups[name] = []*Group{}
	} else {
		_m.Edges.namedGroups[name] = append(_m.Edges.namedGroups[name], edges...)
	}
}

// NamedInternalPolicies returns the InternalPolicies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedInternalPolicies(name string) ([]*InternalPolicy, error) {
	if _m.Edges.namedInternalPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedInternalPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedInternalPolicies(name string, edges ...*InternalPolicy) {
	if _m.Edges.namedInternalPolicies == nil {
		_m.Edges.namedInternalPolicies = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		_m.Edges.namedInternalPolicies[name] = []*InternalPolicy{}
	} else {
		_m.Edges.namedInternalPolicies[name] = append(_m.Edges.namedInternalPolicies[name], edges...)
	}
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedProcedures(name string) ([]*Procedure, error) {
	if _m.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedProcedures(name string, edges ...*Procedure) {
	if _m.Edges.namedProcedures == nil {
		_m.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		_m.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		_m.Edges.namedProcedures[name] = append(_m.Edges.namedProcedures[name], edges...)
	}
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedControls(name string) ([]*Control, error) {
	if _m.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedControls(name string, edges ...*Control) {
	if _m.Edges.namedControls == nil {
		_m.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		_m.Edges.namedControls[name] = []*Control{}
	} else {
		_m.Edges.namedControls[name] = append(_m.Edges.namedControls[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if _m.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if _m.Edges.namedSubcontrols == nil {
		_m.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		_m.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		_m.Edges.namedSubcontrols[name] = append(_m.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedControlObjectives returns the ControlObjectives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedControlObjectives(name string) ([]*ControlObjective, error) {
	if _m.Edges.namedControlObjectives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedControlObjectives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedControlObjectives(name string, edges ...*ControlObjective) {
	if _m.Edges.namedControlObjectives == nil {
		_m.Edges.namedControlObjectives = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		_m.Edges.namedControlObjectives[name] = []*ControlObjective{}
	} else {
		_m.Edges.namedControlObjectives[name] = append(_m.Edges.namedControlObjectives[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedPrograms(name string) ([]*Program, error) {
	if _m.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedPrograms(name string, edges ...*Program) {
	if _m.Edges.namedPrograms == nil {
		_m.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		_m.Edges.namedPrograms[name] = []*Program{}
	} else {
		_m.Edges.namedPrograms[name] = append(_m.Edges.namedPrograms[name], edges...)
	}
}

// NamedRisks returns the Risks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedRisks(name string) ([]*Risk, error) {
	if _m.Edges.namedRisks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedRisks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedRisks(name string, edges ...*Risk) {
	if _m.Edges.namedRisks == nil {
		_m.Edges.namedRisks = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		_m.Edges.namedRisks[name] = []*Risk{}
	} else {
		_m.Edges.namedRisks[name] = append(_m.Edges.namedRisks[name], edges...)
	}
}

// NamedEvidence returns the Evidence named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Task) NamedEvidence(name string) ([]*Evidence, error) {
	if _m.Edges.namedEvidence == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEvidence[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Task) appendNamedEvidence(name string, edges ...*Evidence) {
	if _m.Edges.namedEvidence == nil {
		_m.Edges.namedEvidence = make(map[string][]*Evidence)
	}
	if len(edges) == 0 {
		_m.Edges.namedEvidence[name] = []*Evidence{}
	} else {
		_m.Edges.namedEvidence[name] = append(_m.Edges.namedEvidence[name], edges...)
	}
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
