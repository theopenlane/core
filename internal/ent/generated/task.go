// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the title of the task
	Title string `json:"title,omitempty"`
	// the description of the task
	Description string `json:"description,omitempty"`
	// the details of the task
	Details map[string]interface{} `json:"details,omitempty"`
	// the status of the task
	Status enums.TaskStatus `json:"status,omitempty"`
	// the due date of the task
	Due time.Time `json:"due,omitempty"`
	// the completion date of the task
	Completed time.Time `json:"completed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges               TaskEdges `json:"edges"`
	user_assigner_tasks *string
	user_assignee_tasks *string
	selectValues        sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Assigner holds the value of the assigner edge.
	Assigner *User `json:"assigner,omitempty"`
	// Assignee holds the value of the assignee edge.
	Assignee *User `json:"assignee,omitempty"`
	// Organization holds the value of the organization edge.
	Organization []*Organization `json:"organization,omitempty"`
	// Group holds the value of the group edge.
	Group []*Group `json:"group,omitempty"`
	// Policy holds the value of the policy edge.
	Policy []*InternalPolicy `json:"policy,omitempty"`
	// Procedure holds the value of the procedure edge.
	Procedure []*Procedure `json:"procedure,omitempty"`
	// Control holds the value of the control edge.
	Control []*Control `json:"control,omitempty"`
	// ControlObjective holds the value of the control_objective edge.
	ControlObjective []*ControlObjective `json:"control_objective,omitempty"`
	// Subcontrol holds the value of the subcontrol edge.
	Subcontrol []*Subcontrol `json:"subcontrol,omitempty"`
	// Program holds the value of the program edge.
	Program []*Program `json:"program,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
	// totalCount holds the count of the edges above.
	totalCount [10]map[string]int

	namedOrganization     map[string][]*Organization
	namedGroup            map[string][]*Group
	namedPolicy           map[string][]*InternalPolicy
	namedProcedure        map[string][]*Procedure
	namedControl          map[string][]*Control
	namedControlObjective map[string][]*ControlObjective
	namedSubcontrol       map[string][]*Subcontrol
	namedProgram          map[string][]*Program
}

// AssignerOrErr returns the Assigner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) AssignerOrErr() (*User, error) {
	if e.Assigner != nil {
		return e.Assigner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assigner"}
}

// AssigneeOrErr returns the Assignee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) AssigneeOrErr() (*User, error) {
	if e.Assignee != nil {
		return e.Assignee, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assignee"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) OrganizationOrErr() ([]*Organization, error) {
	if e.loadedTypes[2] {
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) GroupOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// PolicyOrErr returns the Policy value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) PolicyOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[4] {
		return e.Policy, nil
	}
	return nil, &NotLoadedError{edge: "policy"}
}

// ProcedureOrErr returns the Procedure value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ProcedureOrErr() ([]*Procedure, error) {
	if e.loadedTypes[5] {
		return e.Procedure, nil
	}
	return nil, &NotLoadedError{edge: "procedure"}
}

// ControlOrErr returns the Control value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ControlOrErr() ([]*Control, error) {
	if e.loadedTypes[6] {
		return e.Control, nil
	}
	return nil, &NotLoadedError{edge: "control"}
}

// ControlObjectiveOrErr returns the ControlObjective value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ControlObjectiveOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[7] {
		return e.ControlObjective, nil
	}
	return nil, &NotLoadedError{edge: "control_objective"}
}

// SubcontrolOrErr returns the Subcontrol value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) SubcontrolOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[8] {
		return e.Subcontrol, nil
	}
	return nil, &NotLoadedError{edge: "subcontrol"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ProgramOrErr() ([]*Program, error) {
	if e.loadedTypes[9] {
		return e.Program, nil
	}
	return nil, &NotLoadedError{edge: "program"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldTags, task.FieldDetails:
			values[i] = new([]byte)
		case task.FieldID, task.FieldCreatedBy, task.FieldUpdatedBy, task.FieldMappingID, task.FieldDeletedBy, task.FieldTitle, task.FieldDescription, task.FieldStatus:
			values[i] = new(sql.NullString)
		case task.FieldCreatedAt, task.FieldUpdatedAt, task.FieldDeletedAt, task.FieldDue, task.FieldCompleted:
			values[i] = new(sql.NullTime)
		case task.ForeignKeys[0]: // user_assigner_tasks
			values[i] = new(sql.NullString)
		case task.ForeignKeys[1]: // user_assignee_tasks
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case task.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				t.CreatedBy = value.String
			}
		case task.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				t.UpdatedBy = value.String
			}
		case task.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				t.MappingID = value.String
			}
		case task.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = value.Time
			}
		case task.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				t.DeletedBy = value.String
			}
		case task.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case task.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case task.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case task.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = enums.TaskStatus(value.String)
			}
		case task.FieldDue:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due", values[i])
			} else if value.Valid {
				t.Due = value.Time
			}
		case task.FieldCompleted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				t.Completed = value.Time
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_assigner_tasks", values[i])
			} else if value.Valid {
				t.user_assigner_tasks = new(string)
				*t.user_assigner_tasks = value.String
			}
		case task.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_assignee_tasks", values[i])
			} else if value.Valid {
				t.user_assignee_tasks = new(string)
				*t.user_assignee_tasks = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryAssigner queries the "assigner" edge of the Task entity.
func (t *Task) QueryAssigner() *UserQuery {
	return NewTaskClient(t.config).QueryAssigner(t)
}

// QueryAssignee queries the "assignee" edge of the Task entity.
func (t *Task) QueryAssignee() *UserQuery {
	return NewTaskClient(t.config).QueryAssignee(t)
}

// QueryOrganization queries the "organization" edge of the Task entity.
func (t *Task) QueryOrganization() *OrganizationQuery {
	return NewTaskClient(t.config).QueryOrganization(t)
}

// QueryGroup queries the "group" edge of the Task entity.
func (t *Task) QueryGroup() *GroupQuery {
	return NewTaskClient(t.config).QueryGroup(t)
}

// QueryPolicy queries the "policy" edge of the Task entity.
func (t *Task) QueryPolicy() *InternalPolicyQuery {
	return NewTaskClient(t.config).QueryPolicy(t)
}

// QueryProcedure queries the "procedure" edge of the Task entity.
func (t *Task) QueryProcedure() *ProcedureQuery {
	return NewTaskClient(t.config).QueryProcedure(t)
}

// QueryControl queries the "control" edge of the Task entity.
func (t *Task) QueryControl() *ControlQuery {
	return NewTaskClient(t.config).QueryControl(t)
}

// QueryControlObjective queries the "control_objective" edge of the Task entity.
func (t *Task) QueryControlObjective() *ControlObjectiveQuery {
	return NewTaskClient(t.config).QueryControlObjective(t)
}

// QuerySubcontrol queries the "subcontrol" edge of the Task entity.
func (t *Task) QuerySubcontrol() *SubcontrolQuery {
	return NewTaskClient(t.config).QuerySubcontrol(t)
}

// QueryProgram queries the "program" edge of the Task entity.
func (t *Task) QueryProgram() *ProgramQuery {
	return NewTaskClient(t.config).QueryProgram(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("generated: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(t.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(t.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(t.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(t.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(t.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", t.Tags))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", t.Details))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("due=")
	builder.WriteString(t.Due.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed=")
	builder.WriteString(t.Completed.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrganization returns the Organization named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedOrganization(name string) ([]*Organization, error) {
	if t.Edges.namedOrganization == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedOrganization[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedOrganization(name string, edges ...*Organization) {
	if t.Edges.namedOrganization == nil {
		t.Edges.namedOrganization = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		t.Edges.namedOrganization[name] = []*Organization{}
	} else {
		t.Edges.namedOrganization[name] = append(t.Edges.namedOrganization[name], edges...)
	}
}

// NamedGroup returns the Group named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedGroup(name string) ([]*Group, error) {
	if t.Edges.namedGroup == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedGroup[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedGroup(name string, edges ...*Group) {
	if t.Edges.namedGroup == nil {
		t.Edges.namedGroup = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		t.Edges.namedGroup[name] = []*Group{}
	} else {
		t.Edges.namedGroup[name] = append(t.Edges.namedGroup[name], edges...)
	}
}

// NamedPolicy returns the Policy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedPolicy(name string) ([]*InternalPolicy, error) {
	if t.Edges.namedPolicy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedPolicy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedPolicy(name string, edges ...*InternalPolicy) {
	if t.Edges.namedPolicy == nil {
		t.Edges.namedPolicy = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		t.Edges.namedPolicy[name] = []*InternalPolicy{}
	} else {
		t.Edges.namedPolicy[name] = append(t.Edges.namedPolicy[name], edges...)
	}
}

// NamedProcedure returns the Procedure named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedProcedure(name string) ([]*Procedure, error) {
	if t.Edges.namedProcedure == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedProcedure[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedProcedure(name string, edges ...*Procedure) {
	if t.Edges.namedProcedure == nil {
		t.Edges.namedProcedure = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		t.Edges.namedProcedure[name] = []*Procedure{}
	} else {
		t.Edges.namedProcedure[name] = append(t.Edges.namedProcedure[name], edges...)
	}
}

// NamedControl returns the Control named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedControl(name string) ([]*Control, error) {
	if t.Edges.namedControl == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedControl[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedControl(name string, edges ...*Control) {
	if t.Edges.namedControl == nil {
		t.Edges.namedControl = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		t.Edges.namedControl[name] = []*Control{}
	} else {
		t.Edges.namedControl[name] = append(t.Edges.namedControl[name], edges...)
	}
}

// NamedControlObjective returns the ControlObjective named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedControlObjective(name string) ([]*ControlObjective, error) {
	if t.Edges.namedControlObjective == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedControlObjective[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedControlObjective(name string, edges ...*ControlObjective) {
	if t.Edges.namedControlObjective == nil {
		t.Edges.namedControlObjective = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		t.Edges.namedControlObjective[name] = []*ControlObjective{}
	} else {
		t.Edges.namedControlObjective[name] = append(t.Edges.namedControlObjective[name], edges...)
	}
}

// NamedSubcontrol returns the Subcontrol named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedSubcontrol(name string) ([]*Subcontrol, error) {
	if t.Edges.namedSubcontrol == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedSubcontrol[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedSubcontrol(name string, edges ...*Subcontrol) {
	if t.Edges.namedSubcontrol == nil {
		t.Edges.namedSubcontrol = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		t.Edges.namedSubcontrol[name] = []*Subcontrol{}
	} else {
		t.Edges.namedSubcontrol[name] = append(t.Edges.namedSubcontrol[name], edges...)
	}
}

// NamedProgram returns the Program named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedProgram(name string) ([]*Program, error) {
	if t.Edges.namedProgram == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedProgram[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedProgram(name string, edges ...*Program) {
	if t.Edges.namedProgram == nil {
		t.Edges.namedProgram = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		t.Edges.namedProgram[name] = []*Program{}
	} else {
		t.Edges.namedProgram[name] = append(t.Edges.namedProgram[name], edges...)
	}
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
