// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// DNSVerificationUpdate is the builder for updating DNSVerification entities.
type DNSVerificationUpdate struct {
	config
	hooks     []Hook
	mutation  *DNSVerificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DNSVerificationUpdate builder.
func (dvu *DNSVerificationUpdate) Where(ps ...predicate.DNSVerification) *DNSVerificationUpdate {
	dvu.mutation.Where(ps...)
	return dvu
}

// SetUpdatedAt sets the "updated_at" field.
func (dvu *DNSVerificationUpdate) SetUpdatedAt(t time.Time) *DNSVerificationUpdate {
	dvu.mutation.SetUpdatedAt(t)
	return dvu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (dvu *DNSVerificationUpdate) ClearUpdatedAt() *DNSVerificationUpdate {
	dvu.mutation.ClearUpdatedAt()
	return dvu
}

// SetUpdatedBy sets the "updated_by" field.
func (dvu *DNSVerificationUpdate) SetUpdatedBy(s string) *DNSVerificationUpdate {
	dvu.mutation.SetUpdatedBy(s)
	return dvu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableUpdatedBy(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetUpdatedBy(*s)
	}
	return dvu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dvu *DNSVerificationUpdate) ClearUpdatedBy() *DNSVerificationUpdate {
	dvu.mutation.ClearUpdatedBy()
	return dvu
}

// SetDeletedAt sets the "deleted_at" field.
func (dvu *DNSVerificationUpdate) SetDeletedAt(t time.Time) *DNSVerificationUpdate {
	dvu.mutation.SetDeletedAt(t)
	return dvu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableDeletedAt(t *time.Time) *DNSVerificationUpdate {
	if t != nil {
		dvu.SetDeletedAt(*t)
	}
	return dvu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dvu *DNSVerificationUpdate) ClearDeletedAt() *DNSVerificationUpdate {
	dvu.mutation.ClearDeletedAt()
	return dvu
}

// SetDeletedBy sets the "deleted_by" field.
func (dvu *DNSVerificationUpdate) SetDeletedBy(s string) *DNSVerificationUpdate {
	dvu.mutation.SetDeletedBy(s)
	return dvu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableDeletedBy(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetDeletedBy(*s)
	}
	return dvu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (dvu *DNSVerificationUpdate) ClearDeletedBy() *DNSVerificationUpdate {
	dvu.mutation.ClearDeletedBy()
	return dvu
}

// SetTags sets the "tags" field.
func (dvu *DNSVerificationUpdate) SetTags(s []string) *DNSVerificationUpdate {
	dvu.mutation.SetTags(s)
	return dvu
}

// AppendTags appends s to the "tags" field.
func (dvu *DNSVerificationUpdate) AppendTags(s []string) *DNSVerificationUpdate {
	dvu.mutation.AppendTags(s)
	return dvu
}

// ClearTags clears the value of the "tags" field.
func (dvu *DNSVerificationUpdate) ClearTags() *DNSVerificationUpdate {
	dvu.mutation.ClearTags()
	return dvu
}

// SetOwnerID sets the "owner_id" field.
func (dvu *DNSVerificationUpdate) SetOwnerID(s string) *DNSVerificationUpdate {
	dvu.mutation.SetOwnerID(s)
	return dvu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableOwnerID(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetOwnerID(*s)
	}
	return dvu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (dvu *DNSVerificationUpdate) ClearOwnerID() *DNSVerificationUpdate {
	dvu.mutation.ClearOwnerID()
	return dvu
}

// SetDNSTxtRecord sets the "dns_txt_record" field.
func (dvu *DNSVerificationUpdate) SetDNSTxtRecord(s string) *DNSVerificationUpdate {
	dvu.mutation.SetDNSTxtRecord(s)
	return dvu
}

// SetNillableDNSTxtRecord sets the "dns_txt_record" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableDNSTxtRecord(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetDNSTxtRecord(*s)
	}
	return dvu
}

// SetDNSTxtValue sets the "dns_txt_value" field.
func (dvu *DNSVerificationUpdate) SetDNSTxtValue(s string) *DNSVerificationUpdate {
	dvu.mutation.SetDNSTxtValue(s)
	return dvu
}

// SetNillableDNSTxtValue sets the "dns_txt_value" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableDNSTxtValue(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetDNSTxtValue(*s)
	}
	return dvu
}

// SetDNSVerificationStatus sets the "dns_verification_status" field.
func (dvu *DNSVerificationUpdate) SetDNSVerificationStatus(evs enums.DNSVerificationStatus) *DNSVerificationUpdate {
	dvu.mutation.SetDNSVerificationStatus(evs)
	return dvu
}

// SetNillableDNSVerificationStatus sets the "dns_verification_status" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableDNSVerificationStatus(evs *enums.DNSVerificationStatus) *DNSVerificationUpdate {
	if evs != nil {
		dvu.SetDNSVerificationStatus(*evs)
	}
	return dvu
}

// SetDNSVerificationStatusReason sets the "dns_verification_status_reason" field.
func (dvu *DNSVerificationUpdate) SetDNSVerificationStatusReason(s string) *DNSVerificationUpdate {
	dvu.mutation.SetDNSVerificationStatusReason(s)
	return dvu
}

// SetNillableDNSVerificationStatusReason sets the "dns_verification_status_reason" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableDNSVerificationStatusReason(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetDNSVerificationStatusReason(*s)
	}
	return dvu
}

// ClearDNSVerificationStatusReason clears the value of the "dns_verification_status_reason" field.
func (dvu *DNSVerificationUpdate) ClearDNSVerificationStatusReason() *DNSVerificationUpdate {
	dvu.mutation.ClearDNSVerificationStatusReason()
	return dvu
}

// SetAcmeChallengePath sets the "acme_challenge_path" field.
func (dvu *DNSVerificationUpdate) SetAcmeChallengePath(s string) *DNSVerificationUpdate {
	dvu.mutation.SetAcmeChallengePath(s)
	return dvu
}

// SetNillableAcmeChallengePath sets the "acme_challenge_path" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableAcmeChallengePath(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetAcmeChallengePath(*s)
	}
	return dvu
}

// ClearAcmeChallengePath clears the value of the "acme_challenge_path" field.
func (dvu *DNSVerificationUpdate) ClearAcmeChallengePath() *DNSVerificationUpdate {
	dvu.mutation.ClearAcmeChallengePath()
	return dvu
}

// SetExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field.
func (dvu *DNSVerificationUpdate) SetExpectedAcmeChallengeValue(s string) *DNSVerificationUpdate {
	dvu.mutation.SetExpectedAcmeChallengeValue(s)
	return dvu
}

// SetNillableExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableExpectedAcmeChallengeValue(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetExpectedAcmeChallengeValue(*s)
	}
	return dvu
}

// ClearExpectedAcmeChallengeValue clears the value of the "expected_acme_challenge_value" field.
func (dvu *DNSVerificationUpdate) ClearExpectedAcmeChallengeValue() *DNSVerificationUpdate {
	dvu.mutation.ClearExpectedAcmeChallengeValue()
	return dvu
}

// SetAcmeChallengeStatus sets the "acme_challenge_status" field.
func (dvu *DNSVerificationUpdate) SetAcmeChallengeStatus(evs enums.SSLVerificationStatus) *DNSVerificationUpdate {
	dvu.mutation.SetAcmeChallengeStatus(evs)
	return dvu
}

// SetNillableAcmeChallengeStatus sets the "acme_challenge_status" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableAcmeChallengeStatus(evs *enums.SSLVerificationStatus) *DNSVerificationUpdate {
	if evs != nil {
		dvu.SetAcmeChallengeStatus(*evs)
	}
	return dvu
}

// SetAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field.
func (dvu *DNSVerificationUpdate) SetAcmeChallengeStatusReason(s string) *DNSVerificationUpdate {
	dvu.mutation.SetAcmeChallengeStatusReason(s)
	return dvu
}

// SetNillableAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field if the given value is not nil.
func (dvu *DNSVerificationUpdate) SetNillableAcmeChallengeStatusReason(s *string) *DNSVerificationUpdate {
	if s != nil {
		dvu.SetAcmeChallengeStatusReason(*s)
	}
	return dvu
}

// ClearAcmeChallengeStatusReason clears the value of the "acme_challenge_status_reason" field.
func (dvu *DNSVerificationUpdate) ClearAcmeChallengeStatusReason() *DNSVerificationUpdate {
	dvu.mutation.ClearAcmeChallengeStatusReason()
	return dvu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (dvu *DNSVerificationUpdate) SetOwner(o *Organization) *DNSVerificationUpdate {
	return dvu.SetOwnerID(o.ID)
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (dvu *DNSVerificationUpdate) AddCustomDomainIDs(ids ...string) *DNSVerificationUpdate {
	dvu.mutation.AddCustomDomainIDs(ids...)
	return dvu
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (dvu *DNSVerificationUpdate) AddCustomDomains(c ...*CustomDomain) *DNSVerificationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dvu.AddCustomDomainIDs(ids...)
}

// Mutation returns the DNSVerificationMutation object of the builder.
func (dvu *DNSVerificationUpdate) Mutation() *DNSVerificationMutation {
	return dvu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (dvu *DNSVerificationUpdate) ClearOwner() *DNSVerificationUpdate {
	dvu.mutation.ClearOwner()
	return dvu
}

// ClearCustomDomains clears all "custom_domains" edges to the CustomDomain entity.
func (dvu *DNSVerificationUpdate) ClearCustomDomains() *DNSVerificationUpdate {
	dvu.mutation.ClearCustomDomains()
	return dvu
}

// RemoveCustomDomainIDs removes the "custom_domains" edge to CustomDomain entities by IDs.
func (dvu *DNSVerificationUpdate) RemoveCustomDomainIDs(ids ...string) *DNSVerificationUpdate {
	dvu.mutation.RemoveCustomDomainIDs(ids...)
	return dvu
}

// RemoveCustomDomains removes "custom_domains" edges to CustomDomain entities.
func (dvu *DNSVerificationUpdate) RemoveCustomDomains(c ...*CustomDomain) *DNSVerificationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dvu.RemoveCustomDomainIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dvu *DNSVerificationUpdate) Save(ctx context.Context) (int, error) {
	if err := dvu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, dvu.sqlSave, dvu.mutation, dvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dvu *DNSVerificationUpdate) SaveX(ctx context.Context) int {
	affected, err := dvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dvu *DNSVerificationUpdate) Exec(ctx context.Context) error {
	_, err := dvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dvu *DNSVerificationUpdate) ExecX(ctx context.Context) {
	if err := dvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dvu *DNSVerificationUpdate) defaults() error {
	if _, ok := dvu.mutation.UpdatedAt(); !ok && !dvu.mutation.UpdatedAtCleared() {
		if dnsverification.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized dnsverification.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := dnsverification.UpdateDefaultUpdatedAt()
		dvu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dvu *DNSVerificationUpdate) check() error {
	if v, ok := dvu.mutation.DNSTxtRecord(); ok {
		if err := dnsverification.DNSTxtRecordValidator(v); err != nil {
			return &ValidationError{Name: "dns_txt_record", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_txt_record": %w`, err)}
		}
	}
	if v, ok := dvu.mutation.DNSTxtValue(); ok {
		if err := dnsverification.DNSTxtValueValidator(v); err != nil {
			return &ValidationError{Name: "dns_txt_value", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_txt_value": %w`, err)}
		}
	}
	if v, ok := dvu.mutation.DNSVerificationStatus(); ok {
		if err := dnsverification.DNSVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_verification_status": %w`, err)}
		}
	}
	if v, ok := dvu.mutation.DNSVerificationStatusReason(); ok {
		if err := dnsverification.DNSVerificationStatusReasonValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status_reason", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_verification_status_reason": %w`, err)}
		}
	}
	if v, ok := dvu.mutation.AcmeChallengePath(); ok {
		if err := dnsverification.AcmeChallengePathValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_path", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_path": %w`, err)}
		}
	}
	if v, ok := dvu.mutation.ExpectedAcmeChallengeValue(); ok {
		if err := dnsverification.ExpectedAcmeChallengeValueValidator(v); err != nil {
			return &ValidationError{Name: "expected_acme_challenge_value", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.expected_acme_challenge_value": %w`, err)}
		}
	}
	if v, ok := dvu.mutation.AcmeChallengeStatus(); ok {
		if err := dnsverification.AcmeChallengeStatusValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_status": %w`, err)}
		}
	}
	if v, ok := dvu.mutation.AcmeChallengeStatusReason(); ok {
		if err := dnsverification.AcmeChallengeStatusReasonValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_status_reason", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_status_reason": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dvu *DNSVerificationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DNSVerificationUpdate {
	dvu.modifiers = append(dvu.modifiers, modifiers...)
	return dvu
}

func (dvu *DNSVerificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnsverification.Table, dnsverification.Columns, sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString))
	if ps := dvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dvu.mutation.CreatedAtCleared() {
		_spec.ClearField(dnsverification.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := dvu.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsverification.FieldUpdatedAt, field.TypeTime, value)
	}
	if dvu.mutation.UpdatedAtCleared() {
		_spec.ClearField(dnsverification.FieldUpdatedAt, field.TypeTime)
	}
	if dvu.mutation.CreatedByCleared() {
		_spec.ClearField(dnsverification.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dvu.mutation.UpdatedBy(); ok {
		_spec.SetField(dnsverification.FieldUpdatedBy, field.TypeString, value)
	}
	if dvu.mutation.UpdatedByCleared() {
		_spec.ClearField(dnsverification.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := dvu.mutation.DeletedAt(); ok {
		_spec.SetField(dnsverification.FieldDeletedAt, field.TypeTime, value)
	}
	if dvu.mutation.DeletedAtCleared() {
		_spec.ClearField(dnsverification.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := dvu.mutation.DeletedBy(); ok {
		_spec.SetField(dnsverification.FieldDeletedBy, field.TypeString, value)
	}
	if dvu.mutation.DeletedByCleared() {
		_spec.ClearField(dnsverification.FieldDeletedBy, field.TypeString)
	}
	if value, ok := dvu.mutation.Tags(); ok {
		_spec.SetField(dnsverification.FieldTags, field.TypeJSON, value)
	}
	if value, ok := dvu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsverification.FieldTags, value)
		})
	}
	if dvu.mutation.TagsCleared() {
		_spec.ClearField(dnsverification.FieldTags, field.TypeJSON)
	}
	if value, ok := dvu.mutation.DNSTxtRecord(); ok {
		_spec.SetField(dnsverification.FieldDNSTxtRecord, field.TypeString, value)
	}
	if value, ok := dvu.mutation.DNSTxtValue(); ok {
		_spec.SetField(dnsverification.FieldDNSTxtValue, field.TypeString, value)
	}
	if value, ok := dvu.mutation.DNSVerificationStatus(); ok {
		_spec.SetField(dnsverification.FieldDNSVerificationStatus, field.TypeEnum, value)
	}
	if value, ok := dvu.mutation.DNSVerificationStatusReason(); ok {
		_spec.SetField(dnsverification.FieldDNSVerificationStatusReason, field.TypeString, value)
	}
	if dvu.mutation.DNSVerificationStatusReasonCleared() {
		_spec.ClearField(dnsverification.FieldDNSVerificationStatusReason, field.TypeString)
	}
	if value, ok := dvu.mutation.AcmeChallengePath(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengePath, field.TypeString, value)
	}
	if dvu.mutation.AcmeChallengePathCleared() {
		_spec.ClearField(dnsverification.FieldAcmeChallengePath, field.TypeString)
	}
	if value, ok := dvu.mutation.ExpectedAcmeChallengeValue(); ok {
		_spec.SetField(dnsverification.FieldExpectedAcmeChallengeValue, field.TypeString, value)
	}
	if dvu.mutation.ExpectedAcmeChallengeValueCleared() {
		_spec.ClearField(dnsverification.FieldExpectedAcmeChallengeValue, field.TypeString)
	}
	if value, ok := dvu.mutation.AcmeChallengeStatus(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengeStatus, field.TypeEnum, value)
	}
	if value, ok := dvu.mutation.AcmeChallengeStatusReason(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengeStatusReason, field.TypeString, value)
	}
	if dvu.mutation.AcmeChallengeStatusReasonCleared() {
		_spec.ClearField(dnsverification.FieldAcmeChallengeStatusReason, field.TypeString)
	}
	if dvu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsverification.OwnerTable,
			Columns: []string{dnsverification.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvu.schemaConfig.DNSVerification
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dvu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsverification.OwnerTable,
			Columns: []string{dnsverification.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvu.schemaConfig.DNSVerification
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dvu.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsverification.CustomDomainsTable,
			Columns: []string{dnsverification.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvu.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dvu.mutation.RemovedCustomDomainsIDs(); len(nodes) > 0 && !dvu.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsverification.CustomDomainsTable,
			Columns: []string{dnsverification.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvu.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dvu.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsverification.CustomDomainsTable,
			Columns: []string{dnsverification.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvu.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = dvu.schemaConfig.DNSVerification
	ctx = internal.NewSchemaConfigContext(ctx, dvu.schemaConfig)
	_spec.AddModifiers(dvu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsverification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dvu.mutation.done = true
	return n, nil
}

// DNSVerificationUpdateOne is the builder for updating a single DNSVerification entity.
type DNSVerificationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DNSVerificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (dvuo *DNSVerificationUpdateOne) SetUpdatedAt(t time.Time) *DNSVerificationUpdateOne {
	dvuo.mutation.SetUpdatedAt(t)
	return dvuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (dvuo *DNSVerificationUpdateOne) ClearUpdatedAt() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearUpdatedAt()
	return dvuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dvuo *DNSVerificationUpdateOne) SetUpdatedBy(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetUpdatedBy(s)
	return dvuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableUpdatedBy(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetUpdatedBy(*s)
	}
	return dvuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dvuo *DNSVerificationUpdateOne) ClearUpdatedBy() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearUpdatedBy()
	return dvuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dvuo *DNSVerificationUpdateOne) SetDeletedAt(t time.Time) *DNSVerificationUpdateOne {
	dvuo.mutation.SetDeletedAt(t)
	return dvuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableDeletedAt(t *time.Time) *DNSVerificationUpdateOne {
	if t != nil {
		dvuo.SetDeletedAt(*t)
	}
	return dvuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dvuo *DNSVerificationUpdateOne) ClearDeletedAt() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearDeletedAt()
	return dvuo
}

// SetDeletedBy sets the "deleted_by" field.
func (dvuo *DNSVerificationUpdateOne) SetDeletedBy(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetDeletedBy(s)
	return dvuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableDeletedBy(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetDeletedBy(*s)
	}
	return dvuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (dvuo *DNSVerificationUpdateOne) ClearDeletedBy() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearDeletedBy()
	return dvuo
}

// SetTags sets the "tags" field.
func (dvuo *DNSVerificationUpdateOne) SetTags(s []string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetTags(s)
	return dvuo
}

// AppendTags appends s to the "tags" field.
func (dvuo *DNSVerificationUpdateOne) AppendTags(s []string) *DNSVerificationUpdateOne {
	dvuo.mutation.AppendTags(s)
	return dvuo
}

// ClearTags clears the value of the "tags" field.
func (dvuo *DNSVerificationUpdateOne) ClearTags() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearTags()
	return dvuo
}

// SetOwnerID sets the "owner_id" field.
func (dvuo *DNSVerificationUpdateOne) SetOwnerID(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetOwnerID(s)
	return dvuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableOwnerID(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetOwnerID(*s)
	}
	return dvuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (dvuo *DNSVerificationUpdateOne) ClearOwnerID() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearOwnerID()
	return dvuo
}

// SetDNSTxtRecord sets the "dns_txt_record" field.
func (dvuo *DNSVerificationUpdateOne) SetDNSTxtRecord(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetDNSTxtRecord(s)
	return dvuo
}

// SetNillableDNSTxtRecord sets the "dns_txt_record" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableDNSTxtRecord(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetDNSTxtRecord(*s)
	}
	return dvuo
}

// SetDNSTxtValue sets the "dns_txt_value" field.
func (dvuo *DNSVerificationUpdateOne) SetDNSTxtValue(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetDNSTxtValue(s)
	return dvuo
}

// SetNillableDNSTxtValue sets the "dns_txt_value" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableDNSTxtValue(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetDNSTxtValue(*s)
	}
	return dvuo
}

// SetDNSVerificationStatus sets the "dns_verification_status" field.
func (dvuo *DNSVerificationUpdateOne) SetDNSVerificationStatus(evs enums.DNSVerificationStatus) *DNSVerificationUpdateOne {
	dvuo.mutation.SetDNSVerificationStatus(evs)
	return dvuo
}

// SetNillableDNSVerificationStatus sets the "dns_verification_status" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableDNSVerificationStatus(evs *enums.DNSVerificationStatus) *DNSVerificationUpdateOne {
	if evs != nil {
		dvuo.SetDNSVerificationStatus(*evs)
	}
	return dvuo
}

// SetDNSVerificationStatusReason sets the "dns_verification_status_reason" field.
func (dvuo *DNSVerificationUpdateOne) SetDNSVerificationStatusReason(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetDNSVerificationStatusReason(s)
	return dvuo
}

// SetNillableDNSVerificationStatusReason sets the "dns_verification_status_reason" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableDNSVerificationStatusReason(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetDNSVerificationStatusReason(*s)
	}
	return dvuo
}

// ClearDNSVerificationStatusReason clears the value of the "dns_verification_status_reason" field.
func (dvuo *DNSVerificationUpdateOne) ClearDNSVerificationStatusReason() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearDNSVerificationStatusReason()
	return dvuo
}

// SetAcmeChallengePath sets the "acme_challenge_path" field.
func (dvuo *DNSVerificationUpdateOne) SetAcmeChallengePath(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetAcmeChallengePath(s)
	return dvuo
}

// SetNillableAcmeChallengePath sets the "acme_challenge_path" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableAcmeChallengePath(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetAcmeChallengePath(*s)
	}
	return dvuo
}

// ClearAcmeChallengePath clears the value of the "acme_challenge_path" field.
func (dvuo *DNSVerificationUpdateOne) ClearAcmeChallengePath() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearAcmeChallengePath()
	return dvuo
}

// SetExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field.
func (dvuo *DNSVerificationUpdateOne) SetExpectedAcmeChallengeValue(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetExpectedAcmeChallengeValue(s)
	return dvuo
}

// SetNillableExpectedAcmeChallengeValue sets the "expected_acme_challenge_value" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableExpectedAcmeChallengeValue(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetExpectedAcmeChallengeValue(*s)
	}
	return dvuo
}

// ClearExpectedAcmeChallengeValue clears the value of the "expected_acme_challenge_value" field.
func (dvuo *DNSVerificationUpdateOne) ClearExpectedAcmeChallengeValue() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearExpectedAcmeChallengeValue()
	return dvuo
}

// SetAcmeChallengeStatus sets the "acme_challenge_status" field.
func (dvuo *DNSVerificationUpdateOne) SetAcmeChallengeStatus(evs enums.SSLVerificationStatus) *DNSVerificationUpdateOne {
	dvuo.mutation.SetAcmeChallengeStatus(evs)
	return dvuo
}

// SetNillableAcmeChallengeStatus sets the "acme_challenge_status" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableAcmeChallengeStatus(evs *enums.SSLVerificationStatus) *DNSVerificationUpdateOne {
	if evs != nil {
		dvuo.SetAcmeChallengeStatus(*evs)
	}
	return dvuo
}

// SetAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field.
func (dvuo *DNSVerificationUpdateOne) SetAcmeChallengeStatusReason(s string) *DNSVerificationUpdateOne {
	dvuo.mutation.SetAcmeChallengeStatusReason(s)
	return dvuo
}

// SetNillableAcmeChallengeStatusReason sets the "acme_challenge_status_reason" field if the given value is not nil.
func (dvuo *DNSVerificationUpdateOne) SetNillableAcmeChallengeStatusReason(s *string) *DNSVerificationUpdateOne {
	if s != nil {
		dvuo.SetAcmeChallengeStatusReason(*s)
	}
	return dvuo
}

// ClearAcmeChallengeStatusReason clears the value of the "acme_challenge_status_reason" field.
func (dvuo *DNSVerificationUpdateOne) ClearAcmeChallengeStatusReason() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearAcmeChallengeStatusReason()
	return dvuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (dvuo *DNSVerificationUpdateOne) SetOwner(o *Organization) *DNSVerificationUpdateOne {
	return dvuo.SetOwnerID(o.ID)
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (dvuo *DNSVerificationUpdateOne) AddCustomDomainIDs(ids ...string) *DNSVerificationUpdateOne {
	dvuo.mutation.AddCustomDomainIDs(ids...)
	return dvuo
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (dvuo *DNSVerificationUpdateOne) AddCustomDomains(c ...*CustomDomain) *DNSVerificationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dvuo.AddCustomDomainIDs(ids...)
}

// Mutation returns the DNSVerificationMutation object of the builder.
func (dvuo *DNSVerificationUpdateOne) Mutation() *DNSVerificationMutation {
	return dvuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (dvuo *DNSVerificationUpdateOne) ClearOwner() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearOwner()
	return dvuo
}

// ClearCustomDomains clears all "custom_domains" edges to the CustomDomain entity.
func (dvuo *DNSVerificationUpdateOne) ClearCustomDomains() *DNSVerificationUpdateOne {
	dvuo.mutation.ClearCustomDomains()
	return dvuo
}

// RemoveCustomDomainIDs removes the "custom_domains" edge to CustomDomain entities by IDs.
func (dvuo *DNSVerificationUpdateOne) RemoveCustomDomainIDs(ids ...string) *DNSVerificationUpdateOne {
	dvuo.mutation.RemoveCustomDomainIDs(ids...)
	return dvuo
}

// RemoveCustomDomains removes "custom_domains" edges to CustomDomain entities.
func (dvuo *DNSVerificationUpdateOne) RemoveCustomDomains(c ...*CustomDomain) *DNSVerificationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dvuo.RemoveCustomDomainIDs(ids...)
}

// Where appends a list predicates to the DNSVerificationUpdate builder.
func (dvuo *DNSVerificationUpdateOne) Where(ps ...predicate.DNSVerification) *DNSVerificationUpdateOne {
	dvuo.mutation.Where(ps...)
	return dvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dvuo *DNSVerificationUpdateOne) Select(field string, fields ...string) *DNSVerificationUpdateOne {
	dvuo.fields = append([]string{field}, fields...)
	return dvuo
}

// Save executes the query and returns the updated DNSVerification entity.
func (dvuo *DNSVerificationUpdateOne) Save(ctx context.Context) (*DNSVerification, error) {
	if err := dvuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dvuo.sqlSave, dvuo.mutation, dvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dvuo *DNSVerificationUpdateOne) SaveX(ctx context.Context) *DNSVerification {
	node, err := dvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dvuo *DNSVerificationUpdateOne) Exec(ctx context.Context) error {
	_, err := dvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dvuo *DNSVerificationUpdateOne) ExecX(ctx context.Context) {
	if err := dvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dvuo *DNSVerificationUpdateOne) defaults() error {
	if _, ok := dvuo.mutation.UpdatedAt(); !ok && !dvuo.mutation.UpdatedAtCleared() {
		if dnsverification.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized dnsverification.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := dnsverification.UpdateDefaultUpdatedAt()
		dvuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dvuo *DNSVerificationUpdateOne) check() error {
	if v, ok := dvuo.mutation.DNSTxtRecord(); ok {
		if err := dnsverification.DNSTxtRecordValidator(v); err != nil {
			return &ValidationError{Name: "dns_txt_record", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_txt_record": %w`, err)}
		}
	}
	if v, ok := dvuo.mutation.DNSTxtValue(); ok {
		if err := dnsverification.DNSTxtValueValidator(v); err != nil {
			return &ValidationError{Name: "dns_txt_value", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_txt_value": %w`, err)}
		}
	}
	if v, ok := dvuo.mutation.DNSVerificationStatus(); ok {
		if err := dnsverification.DNSVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_verification_status": %w`, err)}
		}
	}
	if v, ok := dvuo.mutation.DNSVerificationStatusReason(); ok {
		if err := dnsverification.DNSVerificationStatusReasonValidator(v); err != nil {
			return &ValidationError{Name: "dns_verification_status_reason", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.dns_verification_status_reason": %w`, err)}
		}
	}
	if v, ok := dvuo.mutation.AcmeChallengePath(); ok {
		if err := dnsverification.AcmeChallengePathValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_path", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_path": %w`, err)}
		}
	}
	if v, ok := dvuo.mutation.ExpectedAcmeChallengeValue(); ok {
		if err := dnsverification.ExpectedAcmeChallengeValueValidator(v); err != nil {
			return &ValidationError{Name: "expected_acme_challenge_value", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.expected_acme_challenge_value": %w`, err)}
		}
	}
	if v, ok := dvuo.mutation.AcmeChallengeStatus(); ok {
		if err := dnsverification.AcmeChallengeStatusValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_status", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_status": %w`, err)}
		}
	}
	if v, ok := dvuo.mutation.AcmeChallengeStatusReason(); ok {
		if err := dnsverification.AcmeChallengeStatusReasonValidator(v); err != nil {
			return &ValidationError{Name: "acme_challenge_status_reason", err: fmt.Errorf(`generated: validator failed for field "DNSVerification.acme_challenge_status_reason": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dvuo *DNSVerificationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DNSVerificationUpdateOne {
	dvuo.modifiers = append(dvuo.modifiers, modifiers...)
	return dvuo
}

func (dvuo *DNSVerificationUpdateOne) sqlSave(ctx context.Context) (_node *DNSVerification, err error) {
	if err := dvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnsverification.Table, dnsverification.Columns, sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString))
	id, ok := dvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DNSVerification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dnsverification.FieldID)
		for _, f := range fields {
			if !dnsverification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != dnsverification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dvuo.mutation.CreatedAtCleared() {
		_spec.ClearField(dnsverification.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := dvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsverification.FieldUpdatedAt, field.TypeTime, value)
	}
	if dvuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(dnsverification.FieldUpdatedAt, field.TypeTime)
	}
	if dvuo.mutation.CreatedByCleared() {
		_spec.ClearField(dnsverification.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dvuo.mutation.UpdatedBy(); ok {
		_spec.SetField(dnsverification.FieldUpdatedBy, field.TypeString, value)
	}
	if dvuo.mutation.UpdatedByCleared() {
		_spec.ClearField(dnsverification.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := dvuo.mutation.DeletedAt(); ok {
		_spec.SetField(dnsverification.FieldDeletedAt, field.TypeTime, value)
	}
	if dvuo.mutation.DeletedAtCleared() {
		_spec.ClearField(dnsverification.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := dvuo.mutation.DeletedBy(); ok {
		_spec.SetField(dnsverification.FieldDeletedBy, field.TypeString, value)
	}
	if dvuo.mutation.DeletedByCleared() {
		_spec.ClearField(dnsverification.FieldDeletedBy, field.TypeString)
	}
	if value, ok := dvuo.mutation.Tags(); ok {
		_spec.SetField(dnsverification.FieldTags, field.TypeJSON, value)
	}
	if value, ok := dvuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsverification.FieldTags, value)
		})
	}
	if dvuo.mutation.TagsCleared() {
		_spec.ClearField(dnsverification.FieldTags, field.TypeJSON)
	}
	if value, ok := dvuo.mutation.DNSTxtRecord(); ok {
		_spec.SetField(dnsverification.FieldDNSTxtRecord, field.TypeString, value)
	}
	if value, ok := dvuo.mutation.DNSTxtValue(); ok {
		_spec.SetField(dnsverification.FieldDNSTxtValue, field.TypeString, value)
	}
	if value, ok := dvuo.mutation.DNSVerificationStatus(); ok {
		_spec.SetField(dnsverification.FieldDNSVerificationStatus, field.TypeEnum, value)
	}
	if value, ok := dvuo.mutation.DNSVerificationStatusReason(); ok {
		_spec.SetField(dnsverification.FieldDNSVerificationStatusReason, field.TypeString, value)
	}
	if dvuo.mutation.DNSVerificationStatusReasonCleared() {
		_spec.ClearField(dnsverification.FieldDNSVerificationStatusReason, field.TypeString)
	}
	if value, ok := dvuo.mutation.AcmeChallengePath(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengePath, field.TypeString, value)
	}
	if dvuo.mutation.AcmeChallengePathCleared() {
		_spec.ClearField(dnsverification.FieldAcmeChallengePath, field.TypeString)
	}
	if value, ok := dvuo.mutation.ExpectedAcmeChallengeValue(); ok {
		_spec.SetField(dnsverification.FieldExpectedAcmeChallengeValue, field.TypeString, value)
	}
	if dvuo.mutation.ExpectedAcmeChallengeValueCleared() {
		_spec.ClearField(dnsverification.FieldExpectedAcmeChallengeValue, field.TypeString)
	}
	if value, ok := dvuo.mutation.AcmeChallengeStatus(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengeStatus, field.TypeEnum, value)
	}
	if value, ok := dvuo.mutation.AcmeChallengeStatusReason(); ok {
		_spec.SetField(dnsverification.FieldAcmeChallengeStatusReason, field.TypeString, value)
	}
	if dvuo.mutation.AcmeChallengeStatusReasonCleared() {
		_spec.ClearField(dnsverification.FieldAcmeChallengeStatusReason, field.TypeString)
	}
	if dvuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsverification.OwnerTable,
			Columns: []string{dnsverification.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvuo.schemaConfig.DNSVerification
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dvuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsverification.OwnerTable,
			Columns: []string{dnsverification.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvuo.schemaConfig.DNSVerification
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dvuo.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsverification.CustomDomainsTable,
			Columns: []string{dnsverification.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvuo.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dvuo.mutation.RemovedCustomDomainsIDs(); len(nodes) > 0 && !dvuo.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsverification.CustomDomainsTable,
			Columns: []string{dnsverification.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvuo.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dvuo.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsverification.CustomDomainsTable,
			Columns: []string{dnsverification.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = dvuo.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = dvuo.schemaConfig.DNSVerification
	ctx = internal.NewSchemaConfigContext(ctx, dvuo.schemaConfig)
	_spec.AddModifiers(dvuo.modifiers...)
	_node = &DNSVerification{config: dvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsverification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dvuo.mutation.done = true
	return _node, nil
}
