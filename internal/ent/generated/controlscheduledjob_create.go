// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlscheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/pkg/models"
)

// ControlScheduledJobCreate is the builder for creating a ControlScheduledJob entity.
type ControlScheduledJobCreate struct {
	config
	mutation *ControlScheduledJobMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (csjc *ControlScheduledJobCreate) SetCreatedAt(t time.Time) *ControlScheduledJobCreate {
	csjc.mutation.SetCreatedAt(t)
	return csjc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableCreatedAt(t *time.Time) *ControlScheduledJobCreate {
	if t != nil {
		csjc.SetCreatedAt(*t)
	}
	return csjc
}

// SetUpdatedAt sets the "updated_at" field.
func (csjc *ControlScheduledJobCreate) SetUpdatedAt(t time.Time) *ControlScheduledJobCreate {
	csjc.mutation.SetUpdatedAt(t)
	return csjc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableUpdatedAt(t *time.Time) *ControlScheduledJobCreate {
	if t != nil {
		csjc.SetUpdatedAt(*t)
	}
	return csjc
}

// SetCreatedBy sets the "created_by" field.
func (csjc *ControlScheduledJobCreate) SetCreatedBy(s string) *ControlScheduledJobCreate {
	csjc.mutation.SetCreatedBy(s)
	return csjc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableCreatedBy(s *string) *ControlScheduledJobCreate {
	if s != nil {
		csjc.SetCreatedBy(*s)
	}
	return csjc
}

// SetUpdatedBy sets the "updated_by" field.
func (csjc *ControlScheduledJobCreate) SetUpdatedBy(s string) *ControlScheduledJobCreate {
	csjc.mutation.SetUpdatedBy(s)
	return csjc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableUpdatedBy(s *string) *ControlScheduledJobCreate {
	if s != nil {
		csjc.SetUpdatedBy(*s)
	}
	return csjc
}

// SetDeletedAt sets the "deleted_at" field.
func (csjc *ControlScheduledJobCreate) SetDeletedAt(t time.Time) *ControlScheduledJobCreate {
	csjc.mutation.SetDeletedAt(t)
	return csjc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableDeletedAt(t *time.Time) *ControlScheduledJobCreate {
	if t != nil {
		csjc.SetDeletedAt(*t)
	}
	return csjc
}

// SetDeletedBy sets the "deleted_by" field.
func (csjc *ControlScheduledJobCreate) SetDeletedBy(s string) *ControlScheduledJobCreate {
	csjc.mutation.SetDeletedBy(s)
	return csjc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableDeletedBy(s *string) *ControlScheduledJobCreate {
	if s != nil {
		csjc.SetDeletedBy(*s)
	}
	return csjc
}

// SetOwnerID sets the "owner_id" field.
func (csjc *ControlScheduledJobCreate) SetOwnerID(s string) *ControlScheduledJobCreate {
	csjc.mutation.SetOwnerID(s)
	return csjc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableOwnerID(s *string) *ControlScheduledJobCreate {
	if s != nil {
		csjc.SetOwnerID(*s)
	}
	return csjc
}

// SetJobID sets the "job_id" field.
func (csjc *ControlScheduledJobCreate) SetJobID(s string) *ControlScheduledJobCreate {
	csjc.mutation.SetJobID(s)
	return csjc
}

// SetConfiguration sets the "configuration" field.
func (csjc *ControlScheduledJobCreate) SetConfiguration(mc models.JobConfiguration) *ControlScheduledJobCreate {
	csjc.mutation.SetConfiguration(mc)
	return csjc
}

// SetCron sets the "cron" field.
func (csjc *ControlScheduledJobCreate) SetCron(m models.Cron) *ControlScheduledJobCreate {
	csjc.mutation.SetCron(m)
	return csjc
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableCron(m *models.Cron) *ControlScheduledJobCreate {
	if m != nil {
		csjc.SetCron(*m)
	}
	return csjc
}

// SetJobRunnerID sets the "job_runner_id" field.
func (csjc *ControlScheduledJobCreate) SetJobRunnerID(s string) *ControlScheduledJobCreate {
	csjc.mutation.SetJobRunnerID(s)
	return csjc
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableJobRunnerID(s *string) *ControlScheduledJobCreate {
	if s != nil {
		csjc.SetJobRunnerID(*s)
	}
	return csjc
}

// SetID sets the "id" field.
func (csjc *ControlScheduledJobCreate) SetID(s string) *ControlScheduledJobCreate {
	csjc.mutation.SetID(s)
	return csjc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csjc *ControlScheduledJobCreate) SetNillableID(s *string) *ControlScheduledJobCreate {
	if s != nil {
		csjc.SetID(*s)
	}
	return csjc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (csjc *ControlScheduledJobCreate) SetOwner(o *Organization) *ControlScheduledJobCreate {
	return csjc.SetOwnerID(o.ID)
}

// SetJob sets the "job" edge to the ScheduledJob entity.
func (csjc *ControlScheduledJobCreate) SetJob(s *ScheduledJob) *ControlScheduledJobCreate {
	return csjc.SetJobID(s.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (csjc *ControlScheduledJobCreate) AddControlIDs(ids ...string) *ControlScheduledJobCreate {
	csjc.mutation.AddControlIDs(ids...)
	return csjc
}

// AddControls adds the "controls" edges to the Control entity.
func (csjc *ControlScheduledJobCreate) AddControls(c ...*Control) *ControlScheduledJobCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csjc.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (csjc *ControlScheduledJobCreate) AddSubcontrolIDs(ids ...string) *ControlScheduledJobCreate {
	csjc.mutation.AddSubcontrolIDs(ids...)
	return csjc
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (csjc *ControlScheduledJobCreate) AddSubcontrols(s ...*Subcontrol) *ControlScheduledJobCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return csjc.AddSubcontrolIDs(ids...)
}

// SetJobRunner sets the "job_runner" edge to the JobRunner entity.
func (csjc *ControlScheduledJobCreate) SetJobRunner(j *JobRunner) *ControlScheduledJobCreate {
	return csjc.SetJobRunnerID(j.ID)
}

// Mutation returns the ControlScheduledJobMutation object of the builder.
func (csjc *ControlScheduledJobCreate) Mutation() *ControlScheduledJobMutation {
	return csjc.mutation
}

// Save creates the ControlScheduledJob in the database.
func (csjc *ControlScheduledJobCreate) Save(ctx context.Context) (*ControlScheduledJob, error) {
	if err := csjc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csjc.sqlSave, csjc.mutation, csjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csjc *ControlScheduledJobCreate) SaveX(ctx context.Context) *ControlScheduledJob {
	v, err := csjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csjc *ControlScheduledJobCreate) Exec(ctx context.Context) error {
	_, err := csjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csjc *ControlScheduledJobCreate) ExecX(ctx context.Context) {
	if err := csjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csjc *ControlScheduledJobCreate) defaults() error {
	if _, ok := csjc.mutation.CreatedAt(); !ok {
		if controlscheduledjob.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlscheduledjob.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := controlscheduledjob.DefaultCreatedAt()
		csjc.mutation.SetCreatedAt(v)
	}
	if _, ok := csjc.mutation.UpdatedAt(); !ok {
		if controlscheduledjob.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlscheduledjob.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlscheduledjob.DefaultUpdatedAt()
		csjc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csjc.mutation.ID(); !ok {
		if controlscheduledjob.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized controlscheduledjob.DefaultID (forgotten import generated/runtime?)")
		}
		v := controlscheduledjob.DefaultID()
		csjc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csjc *ControlScheduledJobCreate) check() error {
	if v, ok := csjc.mutation.OwnerID(); ok {
		if err := controlscheduledjob.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJob.owner_id": %w`, err)}
		}
	}
	if _, ok := csjc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`generated: missing required field "ControlScheduledJob.job_id"`)}
	}
	if v, ok := csjc.mutation.Cron(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "ControlScheduledJob.cron": %w`, err)}
		}
	}
	if len(csjc.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`generated: missing required edge "ControlScheduledJob.job"`)}
	}
	return nil
}

func (csjc *ControlScheduledJobCreate) sqlSave(ctx context.Context) (*ControlScheduledJob, error) {
	if err := csjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ControlScheduledJob.ID type: %T", _spec.ID.Value)
		}
	}
	csjc.mutation.id = &_node.ID
	csjc.mutation.done = true
	return _node, nil
}

func (csjc *ControlScheduledJobCreate) createSpec() (*ControlScheduledJob, *sqlgraph.CreateSpec) {
	var (
		_node = &ControlScheduledJob{config: csjc.config}
		_spec = sqlgraph.NewCreateSpec(controlscheduledjob.Table, sqlgraph.NewFieldSpec(controlscheduledjob.FieldID, field.TypeString))
	)
	_spec.Schema = csjc.schemaConfig.ControlScheduledJob
	if id, ok := csjc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csjc.mutation.CreatedAt(); ok {
		_spec.SetField(controlscheduledjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := csjc.mutation.UpdatedAt(); ok {
		_spec.SetField(controlscheduledjob.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := csjc.mutation.CreatedBy(); ok {
		_spec.SetField(controlscheduledjob.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := csjc.mutation.UpdatedBy(); ok {
		_spec.SetField(controlscheduledjob.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := csjc.mutation.DeletedAt(); ok {
		_spec.SetField(controlscheduledjob.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := csjc.mutation.DeletedBy(); ok {
		_spec.SetField(controlscheduledjob.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := csjc.mutation.Configuration(); ok {
		_spec.SetField(controlscheduledjob.FieldConfiguration, field.TypeJSON, value)
		_node.Configuration = value
	}
	if value, ok := csjc.mutation.Cron(); ok {
		_spec.SetField(controlscheduledjob.FieldCron, field.TypeString, value)
		_node.Cron = &value
	}
	if nodes := csjc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   controlscheduledjob.OwnerTable,
			Columns: []string{controlscheduledjob.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjc.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csjc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobTable,
			Columns: []string{controlscheduledjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjc.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csjc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.ControlsTable,
			Columns: controlscheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjc.schemaConfig.ControlScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csjc.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   controlscheduledjob.SubcontrolsTable,
			Columns: controlscheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjc.schemaConfig.ControlScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csjc.mutation.JobRunnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   controlscheduledjob.JobRunnerTable,
			Columns: []string{controlscheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = csjc.schemaConfig.ControlScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobRunnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ControlScheduledJobCreateBulk is the builder for creating many ControlScheduledJob entities in bulk.
type ControlScheduledJobCreateBulk struct {
	config
	err      error
	builders []*ControlScheduledJobCreate
}

// Save creates the ControlScheduledJob entities in the database.
func (csjcb *ControlScheduledJobCreateBulk) Save(ctx context.Context) ([]*ControlScheduledJob, error) {
	if csjcb.err != nil {
		return nil, csjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(csjcb.builders))
	nodes := make([]*ControlScheduledJob, len(csjcb.builders))
	mutators := make([]Mutator, len(csjcb.builders))
	for i := range csjcb.builders {
		func(i int, root context.Context) {
			builder := csjcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ControlScheduledJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csjcb *ControlScheduledJobCreateBulk) SaveX(ctx context.Context) []*ControlScheduledJob {
	v, err := csjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csjcb *ControlScheduledJobCreateBulk) Exec(ctx context.Context) error {
	_, err := csjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csjcb *ControlScheduledJobCreateBulk) ExecX(ctx context.Context) {
	if err := csjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
