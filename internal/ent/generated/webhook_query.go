// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/webhook"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// WebhookQuery is the builder for querying Webhook entities.
type WebhookQuery struct {
	config
	ctx                   *QueryContext
	order                 []webhook.OrderOption
	inters                []Interceptor
	predicates            []predicate.Webhook
	withOwner             *OrganizationQuery
	withEvents            *EventQuery
	withIntegrations      *IntegrationQuery
	loadTotal             []func(context.Context, []*Webhook) error
	modifiers             []func(*sql.Selector)
	withNamedEvents       map[string]*EventQuery
	withNamedIntegrations map[string]*IntegrationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WebhookQuery builder.
func (wq *WebhookQuery) Where(ps ...predicate.Webhook) *WebhookQuery {
	wq.predicates = append(wq.predicates, ps...)
	return wq
}

// Limit the number of records to be returned by this query.
func (wq *WebhookQuery) Limit(limit int) *WebhookQuery {
	wq.ctx.Limit = &limit
	return wq
}

// Offset to start from.
func (wq *WebhookQuery) Offset(offset int) *WebhookQuery {
	wq.ctx.Offset = &offset
	return wq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wq *WebhookQuery) Unique(unique bool) *WebhookQuery {
	wq.ctx.Unique = &unique
	return wq
}

// Order specifies how the records should be ordered.
func (wq *WebhookQuery) Order(o ...webhook.OrderOption) *WebhookQuery {
	wq.order = append(wq.order, o...)
	return wq
}

// QueryOwner chains the current query on the "owner" edge.
func (wq *WebhookQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: wq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(webhook.Table, webhook.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, webhook.OwnerTable, webhook.OwnerColumn),
		)
		schemaConfig := wq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Webhook
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (wq *WebhookQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: wq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(webhook.Table, webhook.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, webhook.EventsTable, webhook.EventsPrimaryKey...),
		)
		schemaConfig := wq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.WebhookEvents
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegrations chains the current query on the "integrations" edge.
func (wq *WebhookQuery) QueryIntegrations() *IntegrationQuery {
	query := (&IntegrationClient{config: wq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(webhook.Table, webhook.FieldID, selector),
			sqlgraph.To(integration.Table, integration.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, webhook.IntegrationsTable, webhook.IntegrationsPrimaryKey...),
		)
		schemaConfig := wq.schemaConfig
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.IntegrationWebhooks
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Webhook entity from the query.
// Returns a *NotFoundError when no Webhook was found.
func (wq *WebhookQuery) First(ctx context.Context) (*Webhook, error) {
	nodes, err := wq.Limit(1).All(setContextOp(ctx, wq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{webhook.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wq *WebhookQuery) FirstX(ctx context.Context) *Webhook {
	node, err := wq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Webhook ID from the query.
// Returns a *NotFoundError when no Webhook ID was found.
func (wq *WebhookQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = wq.Limit(1).IDs(setContextOp(ctx, wq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{webhook.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wq *WebhookQuery) FirstIDX(ctx context.Context) string {
	id, err := wq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Webhook entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Webhook entity is found.
// Returns a *NotFoundError when no Webhook entities are found.
func (wq *WebhookQuery) Only(ctx context.Context) (*Webhook, error) {
	nodes, err := wq.Limit(2).All(setContextOp(ctx, wq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{webhook.Label}
	default:
		return nil, &NotSingularError{webhook.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wq *WebhookQuery) OnlyX(ctx context.Context) *Webhook {
	node, err := wq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Webhook ID in the query.
// Returns a *NotSingularError when more than one Webhook ID is found.
// Returns a *NotFoundError when no entities are found.
func (wq *WebhookQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = wq.Limit(2).IDs(setContextOp(ctx, wq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{webhook.Label}
	default:
		err = &NotSingularError{webhook.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wq *WebhookQuery) OnlyIDX(ctx context.Context) string {
	id, err := wq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Webhooks.
func (wq *WebhookQuery) All(ctx context.Context) ([]*Webhook, error) {
	ctx = setContextOp(ctx, wq.ctx, ent.OpQueryAll)
	if err := wq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Webhook, *WebhookQuery]()
	return withInterceptors[[]*Webhook](ctx, wq, qr, wq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wq *WebhookQuery) AllX(ctx context.Context) []*Webhook {
	nodes, err := wq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Webhook IDs.
func (wq *WebhookQuery) IDs(ctx context.Context) (ids []string, err error) {
	if wq.ctx.Unique == nil && wq.path != nil {
		wq.Unique(true)
	}
	ctx = setContextOp(ctx, wq.ctx, ent.OpQueryIDs)
	if err = wq.Select(webhook.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wq *WebhookQuery) IDsX(ctx context.Context) []string {
	ids, err := wq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wq *WebhookQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wq.ctx, ent.OpQueryCount)
	if err := wq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wq, querierCount[*WebhookQuery](), wq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wq *WebhookQuery) CountX(ctx context.Context) int {
	count, err := wq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wq *WebhookQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wq.ctx, ent.OpQueryExist)
	switch _, err := wq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wq *WebhookQuery) ExistX(ctx context.Context) bool {
	exist, err := wq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WebhookQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wq *WebhookQuery) Clone() *WebhookQuery {
	if wq == nil {
		return nil
	}
	return &WebhookQuery{
		config:           wq.config,
		ctx:              wq.ctx.Clone(),
		order:            append([]webhook.OrderOption{}, wq.order...),
		inters:           append([]Interceptor{}, wq.inters...),
		predicates:       append([]predicate.Webhook{}, wq.predicates...),
		withOwner:        wq.withOwner.Clone(),
		withEvents:       wq.withEvents.Clone(),
		withIntegrations: wq.withIntegrations.Clone(),
		// clone intermediate query.
		sql:       wq.sql.Clone(),
		path:      wq.path,
		modifiers: append([]func(*sql.Selector){}, wq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WebhookQuery) WithOwner(opts ...func(*OrganizationQuery)) *WebhookQuery {
	query := (&OrganizationClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wq.withOwner = query
	return wq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WebhookQuery) WithEvents(opts ...func(*EventQuery)) *WebhookQuery {
	query := (&EventClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wq.withEvents = query
	return wq
}

// WithIntegrations tells the query-builder to eager-load the nodes that are connected to
// the "integrations" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WebhookQuery) WithIntegrations(opts ...func(*IntegrationQuery)) *WebhookQuery {
	query := (&IntegrationClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wq.withIntegrations = query
	return wq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Webhook.Query().
//		GroupBy(webhook.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (wq *WebhookQuery) GroupBy(field string, fields ...string) *WebhookGroupBy {
	wq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WebhookGroupBy{build: wq}
	grbuild.flds = &wq.ctx.Fields
	grbuild.label = webhook.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Webhook.Query().
//		Select(webhook.FieldCreatedAt).
//		Scan(ctx, &v)
func (wq *WebhookQuery) Select(fields ...string) *WebhookSelect {
	wq.ctx.Fields = append(wq.ctx.Fields, fields...)
	sbuild := &WebhookSelect{WebhookQuery: wq}
	sbuild.label = webhook.Label
	sbuild.flds, sbuild.scan = &wq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WebhookSelect configured with the given aggregations.
func (wq *WebhookQuery) Aggregate(fns ...AggregateFunc) *WebhookSelect {
	return wq.Select().Aggregate(fns...)
}

func (wq *WebhookQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wq); err != nil {
				return err
			}
		}
	}
	for _, f := range wq.ctx.Fields {
		if !webhook.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if wq.path != nil {
		prev, err := wq.path(ctx)
		if err != nil {
			return err
		}
		wq.sql = prev
	}
	return nil
}

func (wq *WebhookQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Webhook, error) {
	var (
		nodes       = []*Webhook{}
		_spec       = wq.querySpec()
		loadedTypes = [3]bool{
			wq.withOwner != nil,
			wq.withEvents != nil,
			wq.withIntegrations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Webhook).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Webhook{config: wq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = wq.schemaConfig.Webhook
	ctx = internal.NewSchemaConfigContext(ctx, wq.schemaConfig)
	if len(wq.modifiers) > 0 {
		_spec.Modifiers = wq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wq.withOwner; query != nil {
		if err := wq.loadOwner(ctx, query, nodes, nil,
			func(n *Webhook, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := wq.withEvents; query != nil {
		if err := wq.loadEvents(ctx, query, nodes,
			func(n *Webhook) { n.Edges.Events = []*Event{} },
			func(n *Webhook, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withIntegrations; query != nil {
		if err := wq.loadIntegrations(ctx, query, nodes,
			func(n *Webhook) { n.Edges.Integrations = []*Integration{} },
			func(n *Webhook, e *Integration) { n.Edges.Integrations = append(n.Edges.Integrations, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range wq.withNamedEvents {
		if err := wq.loadEvents(ctx, query, nodes,
			func(n *Webhook) { n.appendNamedEvents(name) },
			func(n *Webhook, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range wq.withNamedIntegrations {
		if err := wq.loadIntegrations(ctx, query, nodes,
			func(n *Webhook) { n.appendNamedIntegrations(name) },
			func(n *Webhook, e *Integration) { n.appendNamedIntegrations(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range wq.loadTotal {
		if err := wq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wq *WebhookQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Webhook, init func(*Webhook), assign func(*Webhook, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Webhook)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wq *WebhookQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Webhook, init func(*Webhook), assign func(*Webhook, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Webhook)
	nids := make(map[string]map[*Webhook]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(webhook.EventsTable)
		joinT.Schema(wq.schemaConfig.WebhookEvents)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(webhook.EventsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(webhook.EventsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(webhook.EventsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Webhook]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Event](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "events" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (wq *WebhookQuery) loadIntegrations(ctx context.Context, query *IntegrationQuery, nodes []*Webhook, init func(*Webhook), assign func(*Webhook, *Integration)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Webhook)
	nids := make(map[string]map[*Webhook]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(webhook.IntegrationsTable)
		joinT.Schema(wq.schemaConfig.IntegrationWebhooks)
		s.Join(joinT).On(s.C(integration.FieldID), joinT.C(webhook.IntegrationsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(webhook.IntegrationsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(webhook.IntegrationsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Webhook]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Integration](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "integrations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (wq *WebhookQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wq.querySpec()
	_spec.Node.Schema = wq.schemaConfig.Webhook
	ctx = internal.NewSchemaConfigContext(ctx, wq.schemaConfig)
	if len(wq.modifiers) > 0 {
		_spec.Modifiers = wq.modifiers
	}
	_spec.Node.Columns = wq.ctx.Fields
	if len(wq.ctx.Fields) > 0 {
		_spec.Unique = wq.ctx.Unique != nil && *wq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wq.driver, _spec)
}

func (wq *WebhookQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(webhook.Table, webhook.Columns, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString))
	_spec.From = wq.sql
	if unique := wq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wq.path != nil {
		_spec.Unique = true
	}
	if fields := wq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webhook.FieldID)
		for i := range fields {
			if fields[i] != webhook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wq.withOwner != nil {
			_spec.Node.AddColumnOnce(webhook.FieldOwnerID)
		}
	}
	if ps := wq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wq *WebhookQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wq.driver.Dialect())
	t1 := builder.Table(webhook.Table)
	columns := wq.ctx.Fields
	if len(columns) == 0 {
		columns = webhook.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wq.sql != nil {
		selector = wq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wq.ctx.Unique != nil && *wq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(wq.schemaConfig.Webhook)
	ctx = internal.NewSchemaConfigContext(ctx, wq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range wq.modifiers {
		m(selector)
	}
	for _, p := range wq.predicates {
		p(selector)
	}
	for _, p := range wq.order {
		p(selector)
	}
	if offset := wq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wq *WebhookQuery) Modify(modifiers ...func(s *sql.Selector)) *WebhookSelect {
	wq.modifiers = append(wq.modifiers, modifiers...)
	return wq.Select()
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (wq *WebhookQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *WebhookQuery {
	query := (&EventClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if wq.withNamedEvents == nil {
		wq.withNamedEvents = make(map[string]*EventQuery)
	}
	wq.withNamedEvents[name] = query
	return wq
}

// WithNamedIntegrations tells the query-builder to eager-load the nodes that are connected to the "integrations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (wq *WebhookQuery) WithNamedIntegrations(name string, opts ...func(*IntegrationQuery)) *WebhookQuery {
	query := (&IntegrationClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if wq.withNamedIntegrations == nil {
		wq.withNamedIntegrations = make(map[string]*IntegrationQuery)
	}
	wq.withNamedIntegrations[name] = query
	return wq
}

// WebhookGroupBy is the group-by builder for Webhook entities.
type WebhookGroupBy struct {
	selector
	build *WebhookQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wgb *WebhookGroupBy) Aggregate(fns ...AggregateFunc) *WebhookGroupBy {
	wgb.fns = append(wgb.fns, fns...)
	return wgb
}

// Scan applies the selector query and scans the result into the given value.
func (wgb *WebhookGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wgb.build.ctx, ent.OpQueryGroupBy)
	if err := wgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WebhookQuery, *WebhookGroupBy](ctx, wgb.build, wgb, wgb.build.inters, v)
}

func (wgb *WebhookGroupBy) sqlScan(ctx context.Context, root *WebhookQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wgb.fns))
	for _, fn := range wgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wgb.flds)+len(wgb.fns))
		for _, f := range *wgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WebhookSelect is the builder for selecting fields of Webhook entities.
type WebhookSelect struct {
	*WebhookQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ws *WebhookSelect) Aggregate(fns ...AggregateFunc) *WebhookSelect {
	ws.fns = append(ws.fns, fns...)
	return ws
}

// Scan applies the selector query and scans the result into the given value.
func (ws *WebhookSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ws.ctx, ent.OpQuerySelect)
	if err := ws.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WebhookQuery, *WebhookSelect](ctx, ws.WebhookQuery, ws, ws.inters, v)
}

func (ws *WebhookSelect) sqlScan(ctx context.Context, root *WebhookQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ws.fns))
	for _, fn := range ws.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ws.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ws.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ws *WebhookSelect) Modify(modifiers ...func(s *sql.Selector)) *WebhookSelect {
	ws.modifiers = append(ws.modifiers, modifiers...)
	return ws
}
