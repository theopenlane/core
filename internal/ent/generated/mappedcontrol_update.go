// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// MappedControlUpdate is the builder for updating MappedControl entities.
type MappedControlUpdate struct {
	config
	hooks     []Hook
	mutation  *MappedControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MappedControlUpdate builder.
func (mcu *MappedControlUpdate) Where(ps ...predicate.MappedControl) *MappedControlUpdate {
	mcu.mutation.Where(ps...)
	return mcu
}

// SetUpdatedAt sets the "updated_at" field.
func (mcu *MappedControlUpdate) SetUpdatedAt(t time.Time) *MappedControlUpdate {
	mcu.mutation.SetUpdatedAt(t)
	return mcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mcu *MappedControlUpdate) ClearUpdatedAt() *MappedControlUpdate {
	mcu.mutation.ClearUpdatedAt()
	return mcu
}

// SetUpdatedBy sets the "updated_by" field.
func (mcu *MappedControlUpdate) SetUpdatedBy(s string) *MappedControlUpdate {
	mcu.mutation.SetUpdatedBy(s)
	return mcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcu *MappedControlUpdate) SetNillableUpdatedBy(s *string) *MappedControlUpdate {
	if s != nil {
		mcu.SetUpdatedBy(*s)
	}
	return mcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mcu *MappedControlUpdate) ClearUpdatedBy() *MappedControlUpdate {
	mcu.mutation.ClearUpdatedBy()
	return mcu
}

// SetDeletedAt sets the "deleted_at" field.
func (mcu *MappedControlUpdate) SetDeletedAt(t time.Time) *MappedControlUpdate {
	mcu.mutation.SetDeletedAt(t)
	return mcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mcu *MappedControlUpdate) SetNillableDeletedAt(t *time.Time) *MappedControlUpdate {
	if t != nil {
		mcu.SetDeletedAt(*t)
	}
	return mcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mcu *MappedControlUpdate) ClearDeletedAt() *MappedControlUpdate {
	mcu.mutation.ClearDeletedAt()
	return mcu
}

// SetDeletedBy sets the "deleted_by" field.
func (mcu *MappedControlUpdate) SetDeletedBy(s string) *MappedControlUpdate {
	mcu.mutation.SetDeletedBy(s)
	return mcu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (mcu *MappedControlUpdate) SetNillableDeletedBy(s *string) *MappedControlUpdate {
	if s != nil {
		mcu.SetDeletedBy(*s)
	}
	return mcu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (mcu *MappedControlUpdate) ClearDeletedBy() *MappedControlUpdate {
	mcu.mutation.ClearDeletedBy()
	return mcu
}

// SetTags sets the "tags" field.
func (mcu *MappedControlUpdate) SetTags(s []string) *MappedControlUpdate {
	mcu.mutation.SetTags(s)
	return mcu
}

// AppendTags appends s to the "tags" field.
func (mcu *MappedControlUpdate) AppendTags(s []string) *MappedControlUpdate {
	mcu.mutation.AppendTags(s)
	return mcu
}

// ClearTags clears the value of the "tags" field.
func (mcu *MappedControlUpdate) ClearTags() *MappedControlUpdate {
	mcu.mutation.ClearTags()
	return mcu
}

// SetMappingType sets the "mapping_type" field.
func (mcu *MappedControlUpdate) SetMappingType(s string) *MappedControlUpdate {
	mcu.mutation.SetMappingType(s)
	return mcu
}

// SetNillableMappingType sets the "mapping_type" field if the given value is not nil.
func (mcu *MappedControlUpdate) SetNillableMappingType(s *string) *MappedControlUpdate {
	if s != nil {
		mcu.SetMappingType(*s)
	}
	return mcu
}

// ClearMappingType clears the value of the "mapping_type" field.
func (mcu *MappedControlUpdate) ClearMappingType() *MappedControlUpdate {
	mcu.mutation.ClearMappingType()
	return mcu
}

// SetRelation sets the "relation" field.
func (mcu *MappedControlUpdate) SetRelation(s string) *MappedControlUpdate {
	mcu.mutation.SetRelation(s)
	return mcu
}

// SetNillableRelation sets the "relation" field if the given value is not nil.
func (mcu *MappedControlUpdate) SetNillableRelation(s *string) *MappedControlUpdate {
	if s != nil {
		mcu.SetRelation(*s)
	}
	return mcu
}

// ClearRelation clears the value of the "relation" field.
func (mcu *MappedControlUpdate) ClearRelation() *MappedControlUpdate {
	mcu.mutation.ClearRelation()
	return mcu
}

// Mutation returns the MappedControlMutation object of the builder.
func (mcu *MappedControlUpdate) Mutation() *MappedControlMutation {
	return mcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcu *MappedControlUpdate) Save(ctx context.Context) (int, error) {
	if err := mcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, mcu.sqlSave, mcu.mutation, mcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MappedControlUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MappedControlUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MappedControlUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcu *MappedControlUpdate) defaults() error {
	if _, ok := mcu.mutation.UpdatedAt(); !ok && !mcu.mutation.UpdatedAtCleared() {
		if mappedcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappedcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := mappedcontrol.UpdateDefaultUpdatedAt()
		mcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mcu *MappedControlUpdate) check() error {
	if mcu.mutation.ControlCleared() && len(mcu.mutation.ControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "MappedControl.control"`)
	}
	if mcu.mutation.MappedControlCleared() && len(mcu.mutation.MappedControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "MappedControl.mapped_control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mcu *MappedControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MappedControlUpdate {
	mcu.modifiers = append(mcu.modifiers, modifiers...)
	return mcu
}

func (mcu *MappedControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mappedcontrol.Table, mappedcontrol.Columns, sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString))
	if ps := mcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mcu.mutation.CreatedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mcu.mutation.UpdatedAt(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if mcu.mutation.UpdatedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if mcu.mutation.CreatedByCleared() {
		_spec.ClearField(mappedcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mcu.mutation.UpdatedBy(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if mcu.mutation.UpdatedByCleared() {
		_spec.ClearField(mappedcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := mcu.mutation.DeletedAt(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if mcu.mutation.DeletedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mcu.mutation.DeletedBy(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if mcu.mutation.DeletedByCleared() {
		_spec.ClearField(mappedcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := mcu.mutation.Tags(); ok {
		_spec.SetField(mappedcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := mcu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mappedcontrol.FieldTags, value)
		})
	}
	if mcu.mutation.TagsCleared() {
		_spec.ClearField(mappedcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := mcu.mutation.MappingType(); ok {
		_spec.SetField(mappedcontrol.FieldMappingType, field.TypeString, value)
	}
	if mcu.mutation.MappingTypeCleared() {
		_spec.ClearField(mappedcontrol.FieldMappingType, field.TypeString)
	}
	if value, ok := mcu.mutation.Relation(); ok {
		_spec.SetField(mappedcontrol.FieldRelation, field.TypeString, value)
	}
	if mcu.mutation.RelationCleared() {
		_spec.ClearField(mappedcontrol.FieldRelation, field.TypeString)
	}
	_spec.Node.Schema = mcu.schemaConfig.MappedControl
	ctx = internal.NewSchemaConfigContext(ctx, mcu.schemaConfig)
	_spec.AddModifiers(mcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mappedcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mcu.mutation.done = true
	return n, nil
}

// MappedControlUpdateOne is the builder for updating a single MappedControl entity.
type MappedControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MappedControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (mcuo *MappedControlUpdateOne) SetUpdatedAt(t time.Time) *MappedControlUpdateOne {
	mcuo.mutation.SetUpdatedAt(t)
	return mcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mcuo *MappedControlUpdateOne) ClearUpdatedAt() *MappedControlUpdateOne {
	mcuo.mutation.ClearUpdatedAt()
	return mcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mcuo *MappedControlUpdateOne) SetUpdatedBy(s string) *MappedControlUpdateOne {
	mcuo.mutation.SetUpdatedBy(s)
	return mcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcuo *MappedControlUpdateOne) SetNillableUpdatedBy(s *string) *MappedControlUpdateOne {
	if s != nil {
		mcuo.SetUpdatedBy(*s)
	}
	return mcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mcuo *MappedControlUpdateOne) ClearUpdatedBy() *MappedControlUpdateOne {
	mcuo.mutation.ClearUpdatedBy()
	return mcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mcuo *MappedControlUpdateOne) SetDeletedAt(t time.Time) *MappedControlUpdateOne {
	mcuo.mutation.SetDeletedAt(t)
	return mcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mcuo *MappedControlUpdateOne) SetNillableDeletedAt(t *time.Time) *MappedControlUpdateOne {
	if t != nil {
		mcuo.SetDeletedAt(*t)
	}
	return mcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mcuo *MappedControlUpdateOne) ClearDeletedAt() *MappedControlUpdateOne {
	mcuo.mutation.ClearDeletedAt()
	return mcuo
}

// SetDeletedBy sets the "deleted_by" field.
func (mcuo *MappedControlUpdateOne) SetDeletedBy(s string) *MappedControlUpdateOne {
	mcuo.mutation.SetDeletedBy(s)
	return mcuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (mcuo *MappedControlUpdateOne) SetNillableDeletedBy(s *string) *MappedControlUpdateOne {
	if s != nil {
		mcuo.SetDeletedBy(*s)
	}
	return mcuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (mcuo *MappedControlUpdateOne) ClearDeletedBy() *MappedControlUpdateOne {
	mcuo.mutation.ClearDeletedBy()
	return mcuo
}

// SetTags sets the "tags" field.
func (mcuo *MappedControlUpdateOne) SetTags(s []string) *MappedControlUpdateOne {
	mcuo.mutation.SetTags(s)
	return mcuo
}

// AppendTags appends s to the "tags" field.
func (mcuo *MappedControlUpdateOne) AppendTags(s []string) *MappedControlUpdateOne {
	mcuo.mutation.AppendTags(s)
	return mcuo
}

// ClearTags clears the value of the "tags" field.
func (mcuo *MappedControlUpdateOne) ClearTags() *MappedControlUpdateOne {
	mcuo.mutation.ClearTags()
	return mcuo
}

// SetMappingType sets the "mapping_type" field.
func (mcuo *MappedControlUpdateOne) SetMappingType(s string) *MappedControlUpdateOne {
	mcuo.mutation.SetMappingType(s)
	return mcuo
}

// SetNillableMappingType sets the "mapping_type" field if the given value is not nil.
func (mcuo *MappedControlUpdateOne) SetNillableMappingType(s *string) *MappedControlUpdateOne {
	if s != nil {
		mcuo.SetMappingType(*s)
	}
	return mcuo
}

// ClearMappingType clears the value of the "mapping_type" field.
func (mcuo *MappedControlUpdateOne) ClearMappingType() *MappedControlUpdateOne {
	mcuo.mutation.ClearMappingType()
	return mcuo
}

// SetRelation sets the "relation" field.
func (mcuo *MappedControlUpdateOne) SetRelation(s string) *MappedControlUpdateOne {
	mcuo.mutation.SetRelation(s)
	return mcuo
}

// SetNillableRelation sets the "relation" field if the given value is not nil.
func (mcuo *MappedControlUpdateOne) SetNillableRelation(s *string) *MappedControlUpdateOne {
	if s != nil {
		mcuo.SetRelation(*s)
	}
	return mcuo
}

// ClearRelation clears the value of the "relation" field.
func (mcuo *MappedControlUpdateOne) ClearRelation() *MappedControlUpdateOne {
	mcuo.mutation.ClearRelation()
	return mcuo
}

// Mutation returns the MappedControlMutation object of the builder.
func (mcuo *MappedControlUpdateOne) Mutation() *MappedControlMutation {
	return mcuo.mutation
}

// Where appends a list predicates to the MappedControlUpdate builder.
func (mcuo *MappedControlUpdateOne) Where(ps ...predicate.MappedControl) *MappedControlUpdateOne {
	mcuo.mutation.Where(ps...)
	return mcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcuo *MappedControlUpdateOne) Select(field string, fields ...string) *MappedControlUpdateOne {
	mcuo.fields = append([]string{field}, fields...)
	return mcuo
}

// Save executes the query and returns the updated MappedControl entity.
func (mcuo *MappedControlUpdateOne) Save(ctx context.Context) (*MappedControl, error) {
	if err := mcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mcuo.sqlSave, mcuo.mutation, mcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MappedControlUpdateOne) SaveX(ctx context.Context) *MappedControl {
	node, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcuo *MappedControlUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MappedControlUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcuo *MappedControlUpdateOne) defaults() error {
	if _, ok := mcuo.mutation.UpdatedAt(); !ok && !mcuo.mutation.UpdatedAtCleared() {
		if mappedcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappedcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := mappedcontrol.UpdateDefaultUpdatedAt()
		mcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mcuo *MappedControlUpdateOne) check() error {
	if mcuo.mutation.ControlCleared() && len(mcuo.mutation.ControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "MappedControl.control"`)
	}
	if mcuo.mutation.MappedControlCleared() && len(mcuo.mutation.MappedControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "MappedControl.mapped_control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mcuo *MappedControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MappedControlUpdateOne {
	mcuo.modifiers = append(mcuo.modifiers, modifiers...)
	return mcuo
}

func (mcuo *MappedControlUpdateOne) sqlSave(ctx context.Context) (_node *MappedControl, err error) {
	if err := mcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mappedcontrol.Table, mappedcontrol.Columns, sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString))
	id, ok := mcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "MappedControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mappedcontrol.FieldID)
		for _, f := range fields {
			if !mappedcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != mappedcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mcuo.mutation.CreatedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if mcuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if mcuo.mutation.CreatedByCleared() {
		_spec.ClearField(mappedcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if mcuo.mutation.UpdatedByCleared() {
		_spec.ClearField(mappedcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := mcuo.mutation.DeletedAt(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if mcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mcuo.mutation.DeletedBy(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if mcuo.mutation.DeletedByCleared() {
		_spec.ClearField(mappedcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := mcuo.mutation.Tags(); ok {
		_spec.SetField(mappedcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := mcuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mappedcontrol.FieldTags, value)
		})
	}
	if mcuo.mutation.TagsCleared() {
		_spec.ClearField(mappedcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := mcuo.mutation.MappingType(); ok {
		_spec.SetField(mappedcontrol.FieldMappingType, field.TypeString, value)
	}
	if mcuo.mutation.MappingTypeCleared() {
		_spec.ClearField(mappedcontrol.FieldMappingType, field.TypeString)
	}
	if value, ok := mcuo.mutation.Relation(); ok {
		_spec.SetField(mappedcontrol.FieldRelation, field.TypeString, value)
	}
	if mcuo.mutation.RelationCleared() {
		_spec.ClearField(mappedcontrol.FieldRelation, field.TypeString)
	}
	_spec.Node.Schema = mcuo.schemaConfig.MappedControl
	ctx = internal.NewSchemaConfigContext(ctx, mcuo.schemaConfig)
	_spec.AddModifiers(mcuo.modifiers...)
	_node = &MappedControl{config: mcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mappedcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mcuo.mutation.done = true
	return _node, nil
}
