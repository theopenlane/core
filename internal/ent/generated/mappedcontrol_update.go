// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// MappedControlUpdate is the builder for updating MappedControl entities.
type MappedControlUpdate struct {
	config
	hooks     []Hook
	mutation  *MappedControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MappedControlUpdate builder.
func (_u *MappedControlUpdate) Where(ps ...predicate.MappedControl) *MappedControlUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MappedControlUpdate) SetUpdatedAt(v time.Time) *MappedControlUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MappedControlUpdate) ClearUpdatedAt() *MappedControlUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *MappedControlUpdate) SetUpdatedBy(v string) *MappedControlUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *MappedControlUpdate) SetNillableUpdatedBy(v *string) *MappedControlUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *MappedControlUpdate) ClearUpdatedBy() *MappedControlUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MappedControlUpdate) SetDeletedAt(v time.Time) *MappedControlUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MappedControlUpdate) SetNillableDeletedAt(v *time.Time) *MappedControlUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MappedControlUpdate) ClearDeletedAt() *MappedControlUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *MappedControlUpdate) SetDeletedBy(v string) *MappedControlUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *MappedControlUpdate) SetNillableDeletedBy(v *string) *MappedControlUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *MappedControlUpdate) ClearDeletedBy() *MappedControlUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *MappedControlUpdate) SetTags(v []string) *MappedControlUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *MappedControlUpdate) AppendTags(v []string) *MappedControlUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *MappedControlUpdate) ClearTags() *MappedControlUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *MappedControlUpdate) SetOwnerID(v string) *MappedControlUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *MappedControlUpdate) SetNillableOwnerID(v *string) *MappedControlUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *MappedControlUpdate) ClearOwnerID() *MappedControlUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetMappingType sets the "mapping_type" field.
func (_u *MappedControlUpdate) SetMappingType(v enums.MappingType) *MappedControlUpdate {
	_u.mutation.SetMappingType(v)
	return _u
}

// SetNillableMappingType sets the "mapping_type" field if the given value is not nil.
func (_u *MappedControlUpdate) SetNillableMappingType(v *enums.MappingType) *MappedControlUpdate {
	if v != nil {
		_u.SetMappingType(*v)
	}
	return _u
}

// SetRelation sets the "relation" field.
func (_u *MappedControlUpdate) SetRelation(v string) *MappedControlUpdate {
	_u.mutation.SetRelation(v)
	return _u
}

// SetNillableRelation sets the "relation" field if the given value is not nil.
func (_u *MappedControlUpdate) SetNillableRelation(v *string) *MappedControlUpdate {
	if v != nil {
		_u.SetRelation(*v)
	}
	return _u
}

// ClearRelation clears the value of the "relation" field.
func (_u *MappedControlUpdate) ClearRelation() *MappedControlUpdate {
	_u.mutation.ClearRelation()
	return _u
}

// SetConfidence sets the "confidence" field.
func (_u *MappedControlUpdate) SetConfidence(v int) *MappedControlUpdate {
	_u.mutation.ResetConfidence()
	_u.mutation.SetConfidence(v)
	return _u
}

// SetNillableConfidence sets the "confidence" field if the given value is not nil.
func (_u *MappedControlUpdate) SetNillableConfidence(v *int) *MappedControlUpdate {
	if v != nil {
		_u.SetConfidence(*v)
	}
	return _u
}

// AddConfidence adds value to the "confidence" field.
func (_u *MappedControlUpdate) AddConfidence(v int) *MappedControlUpdate {
	_u.mutation.AddConfidence(v)
	return _u
}

// ClearConfidence clears the value of the "confidence" field.
func (_u *MappedControlUpdate) ClearConfidence() *MappedControlUpdate {
	_u.mutation.ClearConfidence()
	return _u
}

// SetSource sets the "source" field.
func (_u *MappedControlUpdate) SetSource(v enums.MappingSource) *MappedControlUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *MappedControlUpdate) SetNillableSource(v *enums.MappingSource) *MappedControlUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *MappedControlUpdate) ClearSource() *MappedControlUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *MappedControlUpdate) SetOwner(v *Organization) *MappedControlUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *MappedControlUpdate) AddBlockedGroupIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *MappedControlUpdate) AddBlockedGroups(v ...*Group) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *MappedControlUpdate) AddEditorIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *MappedControlUpdate) AddEditors(v ...*Group) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddFromControlIDs adds the "from_controls" edge to the Control entity by IDs.
func (_u *MappedControlUpdate) AddFromControlIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.AddFromControlIDs(ids...)
	return _u
}

// AddFromControls adds the "from_controls" edges to the Control entity.
func (_u *MappedControlUpdate) AddFromControls(v ...*Control) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFromControlIDs(ids...)
}

// AddToControlIDs adds the "to_controls" edge to the Control entity by IDs.
func (_u *MappedControlUpdate) AddToControlIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.AddToControlIDs(ids...)
	return _u
}

// AddToControls adds the "to_controls" edges to the Control entity.
func (_u *MappedControlUpdate) AddToControls(v ...*Control) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddToControlIDs(ids...)
}

// AddFromSubcontrolIDs adds the "from_subcontrols" edge to the Subcontrol entity by IDs.
func (_u *MappedControlUpdate) AddFromSubcontrolIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.AddFromSubcontrolIDs(ids...)
	return _u
}

// AddFromSubcontrols adds the "from_subcontrols" edges to the Subcontrol entity.
func (_u *MappedControlUpdate) AddFromSubcontrols(v ...*Subcontrol) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFromSubcontrolIDs(ids...)
}

// AddToSubcontrolIDs adds the "to_subcontrols" edge to the Subcontrol entity by IDs.
func (_u *MappedControlUpdate) AddToSubcontrolIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.AddToSubcontrolIDs(ids...)
	return _u
}

// AddToSubcontrols adds the "to_subcontrols" edges to the Subcontrol entity.
func (_u *MappedControlUpdate) AddToSubcontrols(v ...*Subcontrol) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddToSubcontrolIDs(ids...)
}

// Mutation returns the MappedControlMutation object of the builder.
func (_u *MappedControlUpdate) Mutation() *MappedControlMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *MappedControlUpdate) ClearOwner() *MappedControlUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *MappedControlUpdate) ClearBlockedGroups() *MappedControlUpdate {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *MappedControlUpdate) RemoveBlockedGroupIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *MappedControlUpdate) RemoveBlockedGroups(v ...*Group) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *MappedControlUpdate) ClearEditors() *MappedControlUpdate {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *MappedControlUpdate) RemoveEditorIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *MappedControlUpdate) RemoveEditors(v ...*Group) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearFromControls clears all "from_controls" edges to the Control entity.
func (_u *MappedControlUpdate) ClearFromControls() *MappedControlUpdate {
	_u.mutation.ClearFromControls()
	return _u
}

// RemoveFromControlIDs removes the "from_controls" edge to Control entities by IDs.
func (_u *MappedControlUpdate) RemoveFromControlIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.RemoveFromControlIDs(ids...)
	return _u
}

// RemoveFromControls removes "from_controls" edges to Control entities.
func (_u *MappedControlUpdate) RemoveFromControls(v ...*Control) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFromControlIDs(ids...)
}

// ClearToControls clears all "to_controls" edges to the Control entity.
func (_u *MappedControlUpdate) ClearToControls() *MappedControlUpdate {
	_u.mutation.ClearToControls()
	return _u
}

// RemoveToControlIDs removes the "to_controls" edge to Control entities by IDs.
func (_u *MappedControlUpdate) RemoveToControlIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.RemoveToControlIDs(ids...)
	return _u
}

// RemoveToControls removes "to_controls" edges to Control entities.
func (_u *MappedControlUpdate) RemoveToControls(v ...*Control) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveToControlIDs(ids...)
}

// ClearFromSubcontrols clears all "from_subcontrols" edges to the Subcontrol entity.
func (_u *MappedControlUpdate) ClearFromSubcontrols() *MappedControlUpdate {
	_u.mutation.ClearFromSubcontrols()
	return _u
}

// RemoveFromSubcontrolIDs removes the "from_subcontrols" edge to Subcontrol entities by IDs.
func (_u *MappedControlUpdate) RemoveFromSubcontrolIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.RemoveFromSubcontrolIDs(ids...)
	return _u
}

// RemoveFromSubcontrols removes "from_subcontrols" edges to Subcontrol entities.
func (_u *MappedControlUpdate) RemoveFromSubcontrols(v ...*Subcontrol) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFromSubcontrolIDs(ids...)
}

// ClearToSubcontrols clears all "to_subcontrols" edges to the Subcontrol entity.
func (_u *MappedControlUpdate) ClearToSubcontrols() *MappedControlUpdate {
	_u.mutation.ClearToSubcontrols()
	return _u
}

// RemoveToSubcontrolIDs removes the "to_subcontrols" edge to Subcontrol entities by IDs.
func (_u *MappedControlUpdate) RemoveToSubcontrolIDs(ids ...string) *MappedControlUpdate {
	_u.mutation.RemoveToSubcontrolIDs(ids...)
	return _u
}

// RemoveToSubcontrols removes "to_subcontrols" edges to Subcontrol entities.
func (_u *MappedControlUpdate) RemoveToSubcontrols(v ...*Subcontrol) *MappedControlUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveToSubcontrolIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MappedControlUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MappedControlUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MappedControlUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MappedControlUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MappedControlUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if mappedcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappedcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := mappedcontrol.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *MappedControlUpdate) check() error {
	if v, ok := _u.mutation.MappingType(); ok {
		if err := mappedcontrol.MappingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mapping_type", err: fmt.Errorf(`generated: validator failed for field "MappedControl.mapping_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Confidence(); ok {
		if err := mappedcontrol.ConfidenceValidator(v); err != nil {
			return &ValidationError{Name: "confidence", err: fmt.Errorf(`generated: validator failed for field "MappedControl.confidence": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := mappedcontrol.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "MappedControl.source": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MappedControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MappedControlUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MappedControlUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mappedcontrol.Table, mappedcontrol.Columns, sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(mappedcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(mappedcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(mappedcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(mappedcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mappedcontrol.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(mappedcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.MappingType(); ok {
		_spec.SetField(mappedcontrol.FieldMappingType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Relation(); ok {
		_spec.SetField(mappedcontrol.FieldRelation, field.TypeString, value)
	}
	if _u.mutation.RelationCleared() {
		_spec.ClearField(mappedcontrol.FieldRelation, field.TypeString)
	}
	if value, ok := _u.mutation.Confidence(); ok {
		_spec.SetField(mappedcontrol.FieldConfidence, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedConfidence(); ok {
		_spec.AddField(mappedcontrol.FieldConfidence, field.TypeInt, value)
	}
	if _u.mutation.ConfidenceCleared() {
		_spec.ClearField(mappedcontrol.FieldConfidence, field.TypeInt)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(mappedcontrol.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(mappedcontrol.FieldSource, field.TypeEnum)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedcontrol.OwnerTable,
			Columns: []string{mappedcontrol.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedcontrol.OwnerTable,
			Columns: []string{mappedcontrol.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.BlockedGroupsTable,
			Columns: mappedcontrol.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.BlockedGroupsTable,
			Columns: mappedcontrol.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.BlockedGroupsTable,
			Columns: mappedcontrol.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.EditorsTable,
			Columns: mappedcontrol.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.EditorsTable,
			Columns: mappedcontrol.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.EditorsTable,
			Columns: mappedcontrol.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FromControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromControlsTable,
			Columns: mappedcontrol.FromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFromControlsIDs(); len(nodes) > 0 && !_u.mutation.FromControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromControlsTable,
			Columns: mappedcontrol.FromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FromControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromControlsTable,
			Columns: mappedcontrol.FromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ToControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToControlsTable,
			Columns: mappedcontrol.ToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedToControlsIDs(); len(nodes) > 0 && !_u.mutation.ToControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToControlsTable,
			Columns: mappedcontrol.ToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ToControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToControlsTable,
			Columns: mappedcontrol.ToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FromSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromSubcontrolsTable,
			Columns: mappedcontrol.FromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFromSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.FromSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromSubcontrolsTable,
			Columns: mappedcontrol.FromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FromSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromSubcontrolsTable,
			Columns: mappedcontrol.FromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ToSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToSubcontrolsTable,
			Columns: mappedcontrol.ToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedToSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.ToSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToSubcontrolsTable,
			Columns: mappedcontrol.ToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ToSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToSubcontrolsTable,
			Columns: mappedcontrol.ToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.MappedControl
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mappedcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MappedControlUpdateOne is the builder for updating a single MappedControl entity.
type MappedControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MappedControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MappedControlUpdateOne) SetUpdatedAt(v time.Time) *MappedControlUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MappedControlUpdateOne) ClearUpdatedAt() *MappedControlUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *MappedControlUpdateOne) SetUpdatedBy(v string) *MappedControlUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *MappedControlUpdateOne) SetNillableUpdatedBy(v *string) *MappedControlUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *MappedControlUpdateOne) ClearUpdatedBy() *MappedControlUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MappedControlUpdateOne) SetDeletedAt(v time.Time) *MappedControlUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MappedControlUpdateOne) SetNillableDeletedAt(v *time.Time) *MappedControlUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MappedControlUpdateOne) ClearDeletedAt() *MappedControlUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *MappedControlUpdateOne) SetDeletedBy(v string) *MappedControlUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *MappedControlUpdateOne) SetNillableDeletedBy(v *string) *MappedControlUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *MappedControlUpdateOne) ClearDeletedBy() *MappedControlUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *MappedControlUpdateOne) SetTags(v []string) *MappedControlUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *MappedControlUpdateOne) AppendTags(v []string) *MappedControlUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *MappedControlUpdateOne) ClearTags() *MappedControlUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *MappedControlUpdateOne) SetOwnerID(v string) *MappedControlUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *MappedControlUpdateOne) SetNillableOwnerID(v *string) *MappedControlUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *MappedControlUpdateOne) ClearOwnerID() *MappedControlUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetMappingType sets the "mapping_type" field.
func (_u *MappedControlUpdateOne) SetMappingType(v enums.MappingType) *MappedControlUpdateOne {
	_u.mutation.SetMappingType(v)
	return _u
}

// SetNillableMappingType sets the "mapping_type" field if the given value is not nil.
func (_u *MappedControlUpdateOne) SetNillableMappingType(v *enums.MappingType) *MappedControlUpdateOne {
	if v != nil {
		_u.SetMappingType(*v)
	}
	return _u
}

// SetRelation sets the "relation" field.
func (_u *MappedControlUpdateOne) SetRelation(v string) *MappedControlUpdateOne {
	_u.mutation.SetRelation(v)
	return _u
}

// SetNillableRelation sets the "relation" field if the given value is not nil.
func (_u *MappedControlUpdateOne) SetNillableRelation(v *string) *MappedControlUpdateOne {
	if v != nil {
		_u.SetRelation(*v)
	}
	return _u
}

// ClearRelation clears the value of the "relation" field.
func (_u *MappedControlUpdateOne) ClearRelation() *MappedControlUpdateOne {
	_u.mutation.ClearRelation()
	return _u
}

// SetConfidence sets the "confidence" field.
func (_u *MappedControlUpdateOne) SetConfidence(v int) *MappedControlUpdateOne {
	_u.mutation.ResetConfidence()
	_u.mutation.SetConfidence(v)
	return _u
}

// SetNillableConfidence sets the "confidence" field if the given value is not nil.
func (_u *MappedControlUpdateOne) SetNillableConfidence(v *int) *MappedControlUpdateOne {
	if v != nil {
		_u.SetConfidence(*v)
	}
	return _u
}

// AddConfidence adds value to the "confidence" field.
func (_u *MappedControlUpdateOne) AddConfidence(v int) *MappedControlUpdateOne {
	_u.mutation.AddConfidence(v)
	return _u
}

// ClearConfidence clears the value of the "confidence" field.
func (_u *MappedControlUpdateOne) ClearConfidence() *MappedControlUpdateOne {
	_u.mutation.ClearConfidence()
	return _u
}

// SetSource sets the "source" field.
func (_u *MappedControlUpdateOne) SetSource(v enums.MappingSource) *MappedControlUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *MappedControlUpdateOne) SetNillableSource(v *enums.MappingSource) *MappedControlUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *MappedControlUpdateOne) ClearSource() *MappedControlUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *MappedControlUpdateOne) SetOwner(v *Organization) *MappedControlUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *MappedControlUpdateOne) AddBlockedGroupIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *MappedControlUpdateOne) AddBlockedGroups(v ...*Group) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *MappedControlUpdateOne) AddEditorIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *MappedControlUpdateOne) AddEditors(v ...*Group) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddFromControlIDs adds the "from_controls" edge to the Control entity by IDs.
func (_u *MappedControlUpdateOne) AddFromControlIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.AddFromControlIDs(ids...)
	return _u
}

// AddFromControls adds the "from_controls" edges to the Control entity.
func (_u *MappedControlUpdateOne) AddFromControls(v ...*Control) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFromControlIDs(ids...)
}

// AddToControlIDs adds the "to_controls" edge to the Control entity by IDs.
func (_u *MappedControlUpdateOne) AddToControlIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.AddToControlIDs(ids...)
	return _u
}

// AddToControls adds the "to_controls" edges to the Control entity.
func (_u *MappedControlUpdateOne) AddToControls(v ...*Control) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddToControlIDs(ids...)
}

// AddFromSubcontrolIDs adds the "from_subcontrols" edge to the Subcontrol entity by IDs.
func (_u *MappedControlUpdateOne) AddFromSubcontrolIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.AddFromSubcontrolIDs(ids...)
	return _u
}

// AddFromSubcontrols adds the "from_subcontrols" edges to the Subcontrol entity.
func (_u *MappedControlUpdateOne) AddFromSubcontrols(v ...*Subcontrol) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFromSubcontrolIDs(ids...)
}

// AddToSubcontrolIDs adds the "to_subcontrols" edge to the Subcontrol entity by IDs.
func (_u *MappedControlUpdateOne) AddToSubcontrolIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.AddToSubcontrolIDs(ids...)
	return _u
}

// AddToSubcontrols adds the "to_subcontrols" edges to the Subcontrol entity.
func (_u *MappedControlUpdateOne) AddToSubcontrols(v ...*Subcontrol) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddToSubcontrolIDs(ids...)
}

// Mutation returns the MappedControlMutation object of the builder.
func (_u *MappedControlUpdateOne) Mutation() *MappedControlMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *MappedControlUpdateOne) ClearOwner() *MappedControlUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *MappedControlUpdateOne) ClearBlockedGroups() *MappedControlUpdateOne {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *MappedControlUpdateOne) RemoveBlockedGroupIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *MappedControlUpdateOne) RemoveBlockedGroups(v ...*Group) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *MappedControlUpdateOne) ClearEditors() *MappedControlUpdateOne {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *MappedControlUpdateOne) RemoveEditorIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *MappedControlUpdateOne) RemoveEditors(v ...*Group) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearFromControls clears all "from_controls" edges to the Control entity.
func (_u *MappedControlUpdateOne) ClearFromControls() *MappedControlUpdateOne {
	_u.mutation.ClearFromControls()
	return _u
}

// RemoveFromControlIDs removes the "from_controls" edge to Control entities by IDs.
func (_u *MappedControlUpdateOne) RemoveFromControlIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.RemoveFromControlIDs(ids...)
	return _u
}

// RemoveFromControls removes "from_controls" edges to Control entities.
func (_u *MappedControlUpdateOne) RemoveFromControls(v ...*Control) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFromControlIDs(ids...)
}

// ClearToControls clears all "to_controls" edges to the Control entity.
func (_u *MappedControlUpdateOne) ClearToControls() *MappedControlUpdateOne {
	_u.mutation.ClearToControls()
	return _u
}

// RemoveToControlIDs removes the "to_controls" edge to Control entities by IDs.
func (_u *MappedControlUpdateOne) RemoveToControlIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.RemoveToControlIDs(ids...)
	return _u
}

// RemoveToControls removes "to_controls" edges to Control entities.
func (_u *MappedControlUpdateOne) RemoveToControls(v ...*Control) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveToControlIDs(ids...)
}

// ClearFromSubcontrols clears all "from_subcontrols" edges to the Subcontrol entity.
func (_u *MappedControlUpdateOne) ClearFromSubcontrols() *MappedControlUpdateOne {
	_u.mutation.ClearFromSubcontrols()
	return _u
}

// RemoveFromSubcontrolIDs removes the "from_subcontrols" edge to Subcontrol entities by IDs.
func (_u *MappedControlUpdateOne) RemoveFromSubcontrolIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.RemoveFromSubcontrolIDs(ids...)
	return _u
}

// RemoveFromSubcontrols removes "from_subcontrols" edges to Subcontrol entities.
func (_u *MappedControlUpdateOne) RemoveFromSubcontrols(v ...*Subcontrol) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFromSubcontrolIDs(ids...)
}

// ClearToSubcontrols clears all "to_subcontrols" edges to the Subcontrol entity.
func (_u *MappedControlUpdateOne) ClearToSubcontrols() *MappedControlUpdateOne {
	_u.mutation.ClearToSubcontrols()
	return _u
}

// RemoveToSubcontrolIDs removes the "to_subcontrols" edge to Subcontrol entities by IDs.
func (_u *MappedControlUpdateOne) RemoveToSubcontrolIDs(ids ...string) *MappedControlUpdateOne {
	_u.mutation.RemoveToSubcontrolIDs(ids...)
	return _u
}

// RemoveToSubcontrols removes "to_subcontrols" edges to Subcontrol entities.
func (_u *MappedControlUpdateOne) RemoveToSubcontrols(v ...*Subcontrol) *MappedControlUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveToSubcontrolIDs(ids...)
}

// Where appends a list predicates to the MappedControlUpdate builder.
func (_u *MappedControlUpdateOne) Where(ps ...predicate.MappedControl) *MappedControlUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MappedControlUpdateOne) Select(field string, fields ...string) *MappedControlUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MappedControl entity.
func (_u *MappedControlUpdateOne) Save(ctx context.Context) (*MappedControl, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MappedControlUpdateOne) SaveX(ctx context.Context) *MappedControl {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MappedControlUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MappedControlUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MappedControlUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if mappedcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappedcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := mappedcontrol.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *MappedControlUpdateOne) check() error {
	if v, ok := _u.mutation.MappingType(); ok {
		if err := mappedcontrol.MappingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mapping_type", err: fmt.Errorf(`generated: validator failed for field "MappedControl.mapping_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Confidence(); ok {
		if err := mappedcontrol.ConfidenceValidator(v); err != nil {
			return &ValidationError{Name: "confidence", err: fmt.Errorf(`generated: validator failed for field "MappedControl.confidence": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := mappedcontrol.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "MappedControl.source": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MappedControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MappedControlUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MappedControlUpdateOne) sqlSave(ctx context.Context) (_node *MappedControl, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mappedcontrol.Table, mappedcontrol.Columns, sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "MappedControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mappedcontrol.FieldID)
		for _, f := range fields {
			if !mappedcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != mappedcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(mappedcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(mappedcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(mappedcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(mappedcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(mappedcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mappedcontrol.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(mappedcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.MappingType(); ok {
		_spec.SetField(mappedcontrol.FieldMappingType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Relation(); ok {
		_spec.SetField(mappedcontrol.FieldRelation, field.TypeString, value)
	}
	if _u.mutation.RelationCleared() {
		_spec.ClearField(mappedcontrol.FieldRelation, field.TypeString)
	}
	if value, ok := _u.mutation.Confidence(); ok {
		_spec.SetField(mappedcontrol.FieldConfidence, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedConfidence(); ok {
		_spec.AddField(mappedcontrol.FieldConfidence, field.TypeInt, value)
	}
	if _u.mutation.ConfidenceCleared() {
		_spec.ClearField(mappedcontrol.FieldConfidence, field.TypeInt)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(mappedcontrol.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(mappedcontrol.FieldSource, field.TypeEnum)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedcontrol.OwnerTable,
			Columns: []string{mappedcontrol.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedcontrol.OwnerTable,
			Columns: []string{mappedcontrol.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.BlockedGroupsTable,
			Columns: mappedcontrol.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.BlockedGroupsTable,
			Columns: mappedcontrol.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.BlockedGroupsTable,
			Columns: mappedcontrol.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.EditorsTable,
			Columns: mappedcontrol.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.EditorsTable,
			Columns: mappedcontrol.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.EditorsTable,
			Columns: mappedcontrol.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FromControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromControlsTable,
			Columns: mappedcontrol.FromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFromControlsIDs(); len(nodes) > 0 && !_u.mutation.FromControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromControlsTable,
			Columns: mappedcontrol.FromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FromControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromControlsTable,
			Columns: mappedcontrol.FromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ToControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToControlsTable,
			Columns: mappedcontrol.ToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedToControlsIDs(); len(nodes) > 0 && !_u.mutation.ToControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToControlsTable,
			Columns: mappedcontrol.ToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ToControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToControlsTable,
			Columns: mappedcontrol.ToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FromSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromSubcontrolsTable,
			Columns: mappedcontrol.FromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFromSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.FromSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromSubcontrolsTable,
			Columns: mappedcontrol.FromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FromSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromSubcontrolsTable,
			Columns: mappedcontrol.FromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ToSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToSubcontrolsTable,
			Columns: mappedcontrol.ToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedToSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.ToSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToSubcontrolsTable,
			Columns: mappedcontrol.ToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ToSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToSubcontrolsTable,
			Columns: mappedcontrol.ToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.MappedControl
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &MappedControl{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mappedcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
