// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/filehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// FileHistoryUpdate is the builder for updating FileHistory entities.
type FileHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *FileHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileHistoryUpdate builder.
func (_u *FileHistoryUpdate) Where(ps ...predicate.FileHistory) *FileHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FileHistoryUpdate) SetUpdatedAt(v time.Time) *FileHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *FileHistoryUpdate) ClearUpdatedAt() *FileHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *FileHistoryUpdate) SetUpdatedBy(v string) *FileHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableUpdatedBy(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *FileHistoryUpdate) ClearUpdatedBy() *FileHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FileHistoryUpdate) SetDeletedAt(v time.Time) *FileHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableDeletedAt(v *time.Time) *FileHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FileHistoryUpdate) ClearDeletedAt() *FileHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *FileHistoryUpdate) SetDeletedBy(v string) *FileHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableDeletedBy(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *FileHistoryUpdate) ClearDeletedBy() *FileHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *FileHistoryUpdate) SetTags(v []string) *FileHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *FileHistoryUpdate) AppendTags(v []string) *FileHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *FileHistoryUpdate) ClearTags() *FileHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetProvidedFileName sets the "provided_file_name" field.
func (_u *FileHistoryUpdate) SetProvidedFileName(v string) *FileHistoryUpdate {
	_u.mutation.SetProvidedFileName(v)
	return _u
}

// SetNillableProvidedFileName sets the "provided_file_name" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableProvidedFileName(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetProvidedFileName(*v)
	}
	return _u
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (_u *FileHistoryUpdate) SetProvidedFileExtension(v string) *FileHistoryUpdate {
	_u.mutation.SetProvidedFileExtension(v)
	return _u
}

// SetNillableProvidedFileExtension sets the "provided_file_extension" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableProvidedFileExtension(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetProvidedFileExtension(*v)
	}
	return _u
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (_u *FileHistoryUpdate) SetProvidedFileSize(v int64) *FileHistoryUpdate {
	_u.mutation.ResetProvidedFileSize()
	_u.mutation.SetProvidedFileSize(v)
	return _u
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableProvidedFileSize(v *int64) *FileHistoryUpdate {
	if v != nil {
		_u.SetProvidedFileSize(*v)
	}
	return _u
}

// AddProvidedFileSize adds value to the "provided_file_size" field.
func (_u *FileHistoryUpdate) AddProvidedFileSize(v int64) *FileHistoryUpdate {
	_u.mutation.AddProvidedFileSize(v)
	return _u
}

// ClearProvidedFileSize clears the value of the "provided_file_size" field.
func (_u *FileHistoryUpdate) ClearProvidedFileSize() *FileHistoryUpdate {
	_u.mutation.ClearProvidedFileSize()
	return _u
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (_u *FileHistoryUpdate) SetPersistedFileSize(v int64) *FileHistoryUpdate {
	_u.mutation.ResetPersistedFileSize()
	_u.mutation.SetPersistedFileSize(v)
	return _u
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillablePersistedFileSize(v *int64) *FileHistoryUpdate {
	if v != nil {
		_u.SetPersistedFileSize(*v)
	}
	return _u
}

// AddPersistedFileSize adds value to the "persisted_file_size" field.
func (_u *FileHistoryUpdate) AddPersistedFileSize(v int64) *FileHistoryUpdate {
	_u.mutation.AddPersistedFileSize(v)
	return _u
}

// ClearPersistedFileSize clears the value of the "persisted_file_size" field.
func (_u *FileHistoryUpdate) ClearPersistedFileSize() *FileHistoryUpdate {
	_u.mutation.ClearPersistedFileSize()
	return _u
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (_u *FileHistoryUpdate) SetDetectedMimeType(v string) *FileHistoryUpdate {
	_u.mutation.SetDetectedMimeType(v)
	return _u
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableDetectedMimeType(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetDetectedMimeType(*v)
	}
	return _u
}

// ClearDetectedMimeType clears the value of the "detected_mime_type" field.
func (_u *FileHistoryUpdate) ClearDetectedMimeType() *FileHistoryUpdate {
	_u.mutation.ClearDetectedMimeType()
	return _u
}

// SetMd5Hash sets the "md5_hash" field.
func (_u *FileHistoryUpdate) SetMd5Hash(v string) *FileHistoryUpdate {
	_u.mutation.SetMd5Hash(v)
	return _u
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableMd5Hash(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetMd5Hash(*v)
	}
	return _u
}

// ClearMd5Hash clears the value of the "md5_hash" field.
func (_u *FileHistoryUpdate) ClearMd5Hash() *FileHistoryUpdate {
	_u.mutation.ClearMd5Hash()
	return _u
}

// SetDetectedContentType sets the "detected_content_type" field.
func (_u *FileHistoryUpdate) SetDetectedContentType(v string) *FileHistoryUpdate {
	_u.mutation.SetDetectedContentType(v)
	return _u
}

// SetNillableDetectedContentType sets the "detected_content_type" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableDetectedContentType(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetDetectedContentType(*v)
	}
	return _u
}

// SetStoreKey sets the "store_key" field.
func (_u *FileHistoryUpdate) SetStoreKey(v string) *FileHistoryUpdate {
	_u.mutation.SetStoreKey(v)
	return _u
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableStoreKey(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetStoreKey(*v)
	}
	return _u
}

// ClearStoreKey clears the value of the "store_key" field.
func (_u *FileHistoryUpdate) ClearStoreKey() *FileHistoryUpdate {
	_u.mutation.ClearStoreKey()
	return _u
}

// SetCategoryType sets the "category_type" field.
func (_u *FileHistoryUpdate) SetCategoryType(v string) *FileHistoryUpdate {
	_u.mutation.SetCategoryType(v)
	return _u
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableCategoryType(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetCategoryType(*v)
	}
	return _u
}

// ClearCategoryType clears the value of the "category_type" field.
func (_u *FileHistoryUpdate) ClearCategoryType() *FileHistoryUpdate {
	_u.mutation.ClearCategoryType()
	return _u
}

// SetURI sets the "uri" field.
func (_u *FileHistoryUpdate) SetURI(v string) *FileHistoryUpdate {
	_u.mutation.SetURI(v)
	return _u
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableURI(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetURI(*v)
	}
	return _u
}

// ClearURI clears the value of the "uri" field.
func (_u *FileHistoryUpdate) ClearURI() *FileHistoryUpdate {
	_u.mutation.ClearURI()
	return _u
}

// SetStorageScheme sets the "storage_scheme" field.
func (_u *FileHistoryUpdate) SetStorageScheme(v string) *FileHistoryUpdate {
	_u.mutation.SetStorageScheme(v)
	return _u
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableStorageScheme(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetStorageScheme(*v)
	}
	return _u
}

// ClearStorageScheme clears the value of the "storage_scheme" field.
func (_u *FileHistoryUpdate) ClearStorageScheme() *FileHistoryUpdate {
	_u.mutation.ClearStorageScheme()
	return _u
}

// SetStorageVolume sets the "storage_volume" field.
func (_u *FileHistoryUpdate) SetStorageVolume(v string) *FileHistoryUpdate {
	_u.mutation.SetStorageVolume(v)
	return _u
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableStorageVolume(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetStorageVolume(*v)
	}
	return _u
}

// ClearStorageVolume clears the value of the "storage_volume" field.
func (_u *FileHistoryUpdate) ClearStorageVolume() *FileHistoryUpdate {
	_u.mutation.ClearStorageVolume()
	return _u
}

// SetStoragePath sets the "storage_path" field.
func (_u *FileHistoryUpdate) SetStoragePath(v string) *FileHistoryUpdate {
	_u.mutation.SetStoragePath(v)
	return _u
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (_u *FileHistoryUpdate) SetNillableStoragePath(v *string) *FileHistoryUpdate {
	if v != nil {
		_u.SetStoragePath(*v)
	}
	return _u
}

// ClearStoragePath clears the value of the "storage_path" field.
func (_u *FileHistoryUpdate) ClearStoragePath() *FileHistoryUpdate {
	_u.mutation.ClearStoragePath()
	return _u
}

// SetFileContents sets the "file_contents" field.
func (_u *FileHistoryUpdate) SetFileContents(v []byte) *FileHistoryUpdate {
	_u.mutation.SetFileContents(v)
	return _u
}

// ClearFileContents clears the value of the "file_contents" field.
func (_u *FileHistoryUpdate) ClearFileContents() *FileHistoryUpdate {
	_u.mutation.ClearFileContents()
	return _u
}

// Mutation returns the FileHistoryMutation object of the builder.
func (_u *FileHistoryUpdate) Mutation() *FileHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if filehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized filehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := filehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(filehistory.Table, filehistory.Columns, sqlgraph.NewFieldSpec(filehistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(filehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(filehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(filehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(filehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(filehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(filehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(filehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(filehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(filehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(filehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(filehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(filehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, filehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(filehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ProvidedFileName(); ok {
		_spec.SetField(filehistory.FieldProvidedFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(filehistory.FieldProvidedFileExtension, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProvidedFileSize(); ok {
		_spec.SetField(filehistory.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedProvidedFileSize(); ok {
		_spec.AddField(filehistory.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if _u.mutation.ProvidedFileSizeCleared() {
		_spec.ClearField(filehistory.FieldProvidedFileSize, field.TypeInt64)
	}
	if value, ok := _u.mutation.PersistedFileSize(); ok {
		_spec.SetField(filehistory.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPersistedFileSize(); ok {
		_spec.AddField(filehistory.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if _u.mutation.PersistedFileSizeCleared() {
		_spec.ClearField(filehistory.FieldPersistedFileSize, field.TypeInt64)
	}
	if value, ok := _u.mutation.DetectedMimeType(); ok {
		_spec.SetField(filehistory.FieldDetectedMimeType, field.TypeString, value)
	}
	if _u.mutation.DetectedMimeTypeCleared() {
		_spec.ClearField(filehistory.FieldDetectedMimeType, field.TypeString)
	}
	if value, ok := _u.mutation.Md5Hash(); ok {
		_spec.SetField(filehistory.FieldMd5Hash, field.TypeString, value)
	}
	if _u.mutation.Md5HashCleared() {
		_spec.ClearField(filehistory.FieldMd5Hash, field.TypeString)
	}
	if value, ok := _u.mutation.DetectedContentType(); ok {
		_spec.SetField(filehistory.FieldDetectedContentType, field.TypeString, value)
	}
	if value, ok := _u.mutation.StoreKey(); ok {
		_spec.SetField(filehistory.FieldStoreKey, field.TypeString, value)
	}
	if _u.mutation.StoreKeyCleared() {
		_spec.ClearField(filehistory.FieldStoreKey, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryType(); ok {
		_spec.SetField(filehistory.FieldCategoryType, field.TypeString, value)
	}
	if _u.mutation.CategoryTypeCleared() {
		_spec.ClearField(filehistory.FieldCategoryType, field.TypeString)
	}
	if value, ok := _u.mutation.URI(); ok {
		_spec.SetField(filehistory.FieldURI, field.TypeString, value)
	}
	if _u.mutation.URICleared() {
		_spec.ClearField(filehistory.FieldURI, field.TypeString)
	}
	if value, ok := _u.mutation.StorageScheme(); ok {
		_spec.SetField(filehistory.FieldStorageScheme, field.TypeString, value)
	}
	if _u.mutation.StorageSchemeCleared() {
		_spec.ClearField(filehistory.FieldStorageScheme, field.TypeString)
	}
	if value, ok := _u.mutation.StorageVolume(); ok {
		_spec.SetField(filehistory.FieldStorageVolume, field.TypeString, value)
	}
	if _u.mutation.StorageVolumeCleared() {
		_spec.ClearField(filehistory.FieldStorageVolume, field.TypeString)
	}
	if value, ok := _u.mutation.StoragePath(); ok {
		_spec.SetField(filehistory.FieldStoragePath, field.TypeString, value)
	}
	if _u.mutation.StoragePathCleared() {
		_spec.ClearField(filehistory.FieldStoragePath, field.TypeString)
	}
	if value, ok := _u.mutation.FileContents(); ok {
		_spec.SetField(filehistory.FieldFileContents, field.TypeBytes, value)
	}
	if _u.mutation.FileContentsCleared() {
		_spec.ClearField(filehistory.FieldFileContents, field.TypeBytes)
	}
	_spec.Node.Schema = _u.schemaConfig.FileHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileHistoryUpdateOne is the builder for updating a single FileHistory entity.
type FileHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FileHistoryUpdateOne) SetUpdatedAt(v time.Time) *FileHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *FileHistoryUpdateOne) ClearUpdatedAt() *FileHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *FileHistoryUpdateOne) SetUpdatedBy(v string) *FileHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableUpdatedBy(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *FileHistoryUpdateOne) ClearUpdatedBy() *FileHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FileHistoryUpdateOne) SetDeletedAt(v time.Time) *FileHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FileHistoryUpdateOne) ClearDeletedAt() *FileHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *FileHistoryUpdateOne) SetDeletedBy(v string) *FileHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableDeletedBy(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *FileHistoryUpdateOne) ClearDeletedBy() *FileHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *FileHistoryUpdateOne) SetTags(v []string) *FileHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *FileHistoryUpdateOne) AppendTags(v []string) *FileHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *FileHistoryUpdateOne) ClearTags() *FileHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetProvidedFileName sets the "provided_file_name" field.
func (_u *FileHistoryUpdateOne) SetProvidedFileName(v string) *FileHistoryUpdateOne {
	_u.mutation.SetProvidedFileName(v)
	return _u
}

// SetNillableProvidedFileName sets the "provided_file_name" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableProvidedFileName(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetProvidedFileName(*v)
	}
	return _u
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (_u *FileHistoryUpdateOne) SetProvidedFileExtension(v string) *FileHistoryUpdateOne {
	_u.mutation.SetProvidedFileExtension(v)
	return _u
}

// SetNillableProvidedFileExtension sets the "provided_file_extension" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableProvidedFileExtension(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetProvidedFileExtension(*v)
	}
	return _u
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (_u *FileHistoryUpdateOne) SetProvidedFileSize(v int64) *FileHistoryUpdateOne {
	_u.mutation.ResetProvidedFileSize()
	_u.mutation.SetProvidedFileSize(v)
	return _u
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableProvidedFileSize(v *int64) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetProvidedFileSize(*v)
	}
	return _u
}

// AddProvidedFileSize adds value to the "provided_file_size" field.
func (_u *FileHistoryUpdateOne) AddProvidedFileSize(v int64) *FileHistoryUpdateOne {
	_u.mutation.AddProvidedFileSize(v)
	return _u
}

// ClearProvidedFileSize clears the value of the "provided_file_size" field.
func (_u *FileHistoryUpdateOne) ClearProvidedFileSize() *FileHistoryUpdateOne {
	_u.mutation.ClearProvidedFileSize()
	return _u
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (_u *FileHistoryUpdateOne) SetPersistedFileSize(v int64) *FileHistoryUpdateOne {
	_u.mutation.ResetPersistedFileSize()
	_u.mutation.SetPersistedFileSize(v)
	return _u
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillablePersistedFileSize(v *int64) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetPersistedFileSize(*v)
	}
	return _u
}

// AddPersistedFileSize adds value to the "persisted_file_size" field.
func (_u *FileHistoryUpdateOne) AddPersistedFileSize(v int64) *FileHistoryUpdateOne {
	_u.mutation.AddPersistedFileSize(v)
	return _u
}

// ClearPersistedFileSize clears the value of the "persisted_file_size" field.
func (_u *FileHistoryUpdateOne) ClearPersistedFileSize() *FileHistoryUpdateOne {
	_u.mutation.ClearPersistedFileSize()
	return _u
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (_u *FileHistoryUpdateOne) SetDetectedMimeType(v string) *FileHistoryUpdateOne {
	_u.mutation.SetDetectedMimeType(v)
	return _u
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableDetectedMimeType(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetDetectedMimeType(*v)
	}
	return _u
}

// ClearDetectedMimeType clears the value of the "detected_mime_type" field.
func (_u *FileHistoryUpdateOne) ClearDetectedMimeType() *FileHistoryUpdateOne {
	_u.mutation.ClearDetectedMimeType()
	return _u
}

// SetMd5Hash sets the "md5_hash" field.
func (_u *FileHistoryUpdateOne) SetMd5Hash(v string) *FileHistoryUpdateOne {
	_u.mutation.SetMd5Hash(v)
	return _u
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableMd5Hash(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetMd5Hash(*v)
	}
	return _u
}

// ClearMd5Hash clears the value of the "md5_hash" field.
func (_u *FileHistoryUpdateOne) ClearMd5Hash() *FileHistoryUpdateOne {
	_u.mutation.ClearMd5Hash()
	return _u
}

// SetDetectedContentType sets the "detected_content_type" field.
func (_u *FileHistoryUpdateOne) SetDetectedContentType(v string) *FileHistoryUpdateOne {
	_u.mutation.SetDetectedContentType(v)
	return _u
}

// SetNillableDetectedContentType sets the "detected_content_type" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableDetectedContentType(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetDetectedContentType(*v)
	}
	return _u
}

// SetStoreKey sets the "store_key" field.
func (_u *FileHistoryUpdateOne) SetStoreKey(v string) *FileHistoryUpdateOne {
	_u.mutation.SetStoreKey(v)
	return _u
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableStoreKey(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetStoreKey(*v)
	}
	return _u
}

// ClearStoreKey clears the value of the "store_key" field.
func (_u *FileHistoryUpdateOne) ClearStoreKey() *FileHistoryUpdateOne {
	_u.mutation.ClearStoreKey()
	return _u
}

// SetCategoryType sets the "category_type" field.
func (_u *FileHistoryUpdateOne) SetCategoryType(v string) *FileHistoryUpdateOne {
	_u.mutation.SetCategoryType(v)
	return _u
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableCategoryType(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetCategoryType(*v)
	}
	return _u
}

// ClearCategoryType clears the value of the "category_type" field.
func (_u *FileHistoryUpdateOne) ClearCategoryType() *FileHistoryUpdateOne {
	_u.mutation.ClearCategoryType()
	return _u
}

// SetURI sets the "uri" field.
func (_u *FileHistoryUpdateOne) SetURI(v string) *FileHistoryUpdateOne {
	_u.mutation.SetURI(v)
	return _u
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableURI(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetURI(*v)
	}
	return _u
}

// ClearURI clears the value of the "uri" field.
func (_u *FileHistoryUpdateOne) ClearURI() *FileHistoryUpdateOne {
	_u.mutation.ClearURI()
	return _u
}

// SetStorageScheme sets the "storage_scheme" field.
func (_u *FileHistoryUpdateOne) SetStorageScheme(v string) *FileHistoryUpdateOne {
	_u.mutation.SetStorageScheme(v)
	return _u
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableStorageScheme(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetStorageScheme(*v)
	}
	return _u
}

// ClearStorageScheme clears the value of the "storage_scheme" field.
func (_u *FileHistoryUpdateOne) ClearStorageScheme() *FileHistoryUpdateOne {
	_u.mutation.ClearStorageScheme()
	return _u
}

// SetStorageVolume sets the "storage_volume" field.
func (_u *FileHistoryUpdateOne) SetStorageVolume(v string) *FileHistoryUpdateOne {
	_u.mutation.SetStorageVolume(v)
	return _u
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableStorageVolume(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetStorageVolume(*v)
	}
	return _u
}

// ClearStorageVolume clears the value of the "storage_volume" field.
func (_u *FileHistoryUpdateOne) ClearStorageVolume() *FileHistoryUpdateOne {
	_u.mutation.ClearStorageVolume()
	return _u
}

// SetStoragePath sets the "storage_path" field.
func (_u *FileHistoryUpdateOne) SetStoragePath(v string) *FileHistoryUpdateOne {
	_u.mutation.SetStoragePath(v)
	return _u
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (_u *FileHistoryUpdateOne) SetNillableStoragePath(v *string) *FileHistoryUpdateOne {
	if v != nil {
		_u.SetStoragePath(*v)
	}
	return _u
}

// ClearStoragePath clears the value of the "storage_path" field.
func (_u *FileHistoryUpdateOne) ClearStoragePath() *FileHistoryUpdateOne {
	_u.mutation.ClearStoragePath()
	return _u
}

// SetFileContents sets the "file_contents" field.
func (_u *FileHistoryUpdateOne) SetFileContents(v []byte) *FileHistoryUpdateOne {
	_u.mutation.SetFileContents(v)
	return _u
}

// ClearFileContents clears the value of the "file_contents" field.
func (_u *FileHistoryUpdateOne) ClearFileContents() *FileHistoryUpdateOne {
	_u.mutation.ClearFileContents()
	return _u
}

// Mutation returns the FileHistoryMutation object of the builder.
func (_u *FileHistoryUpdateOne) Mutation() *FileHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the FileHistoryUpdate builder.
func (_u *FileHistoryUpdateOne) Where(ps ...predicate.FileHistory) *FileHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileHistoryUpdateOne) Select(field string, fields ...string) *FileHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FileHistory entity.
func (_u *FileHistoryUpdateOne) Save(ctx context.Context) (*FileHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileHistoryUpdateOne) SaveX(ctx context.Context) *FileHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if filehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized filehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := filehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileHistoryUpdateOne) sqlSave(ctx context.Context) (_node *FileHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(filehistory.Table, filehistory.Columns, sqlgraph.NewFieldSpec(filehistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "FileHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filehistory.FieldID)
		for _, f := range fields {
			if !filehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != filehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(filehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(filehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(filehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(filehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(filehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(filehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(filehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(filehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(filehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(filehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(filehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(filehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, filehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(filehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ProvidedFileName(); ok {
		_spec.SetField(filehistory.FieldProvidedFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(filehistory.FieldProvidedFileExtension, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProvidedFileSize(); ok {
		_spec.SetField(filehistory.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedProvidedFileSize(); ok {
		_spec.AddField(filehistory.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if _u.mutation.ProvidedFileSizeCleared() {
		_spec.ClearField(filehistory.FieldProvidedFileSize, field.TypeInt64)
	}
	if value, ok := _u.mutation.PersistedFileSize(); ok {
		_spec.SetField(filehistory.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPersistedFileSize(); ok {
		_spec.AddField(filehistory.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if _u.mutation.PersistedFileSizeCleared() {
		_spec.ClearField(filehistory.FieldPersistedFileSize, field.TypeInt64)
	}
	if value, ok := _u.mutation.DetectedMimeType(); ok {
		_spec.SetField(filehistory.FieldDetectedMimeType, field.TypeString, value)
	}
	if _u.mutation.DetectedMimeTypeCleared() {
		_spec.ClearField(filehistory.FieldDetectedMimeType, field.TypeString)
	}
	if value, ok := _u.mutation.Md5Hash(); ok {
		_spec.SetField(filehistory.FieldMd5Hash, field.TypeString, value)
	}
	if _u.mutation.Md5HashCleared() {
		_spec.ClearField(filehistory.FieldMd5Hash, field.TypeString)
	}
	if value, ok := _u.mutation.DetectedContentType(); ok {
		_spec.SetField(filehistory.FieldDetectedContentType, field.TypeString, value)
	}
	if value, ok := _u.mutation.StoreKey(); ok {
		_spec.SetField(filehistory.FieldStoreKey, field.TypeString, value)
	}
	if _u.mutation.StoreKeyCleared() {
		_spec.ClearField(filehistory.FieldStoreKey, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryType(); ok {
		_spec.SetField(filehistory.FieldCategoryType, field.TypeString, value)
	}
	if _u.mutation.CategoryTypeCleared() {
		_spec.ClearField(filehistory.FieldCategoryType, field.TypeString)
	}
	if value, ok := _u.mutation.URI(); ok {
		_spec.SetField(filehistory.FieldURI, field.TypeString, value)
	}
	if _u.mutation.URICleared() {
		_spec.ClearField(filehistory.FieldURI, field.TypeString)
	}
	if value, ok := _u.mutation.StorageScheme(); ok {
		_spec.SetField(filehistory.FieldStorageScheme, field.TypeString, value)
	}
	if _u.mutation.StorageSchemeCleared() {
		_spec.ClearField(filehistory.FieldStorageScheme, field.TypeString)
	}
	if value, ok := _u.mutation.StorageVolume(); ok {
		_spec.SetField(filehistory.FieldStorageVolume, field.TypeString, value)
	}
	if _u.mutation.StorageVolumeCleared() {
		_spec.ClearField(filehistory.FieldStorageVolume, field.TypeString)
	}
	if value, ok := _u.mutation.StoragePath(); ok {
		_spec.SetField(filehistory.FieldStoragePath, field.TypeString, value)
	}
	if _u.mutation.StoragePathCleared() {
		_spec.ClearField(filehistory.FieldStoragePath, field.TypeString)
	}
	if value, ok := _u.mutation.FileContents(); ok {
		_spec.SetField(filehistory.FieldFileContents, field.TypeBytes, value)
	}
	if _u.mutation.FileContentsCleared() {
		_spec.ClearField(filehistory.FieldFileContents, field.TypeBytes)
	}
	_spec.Node.Schema = _u.schemaConfig.FileHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &FileHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
