// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// EntityType is the model entity for the EntityType schema.
type EntityType struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the entity
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntityTypeQuery when eager-loading is set.
	Edges        EntityTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EntityTypeEdges holds the relations/edges for other nodes in the graph.
type EntityTypeEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Entities holds the value of the entities edge.
	Entities []*Entity `json:"entities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedEntities map[string][]*Entity
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityTypeEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// EntitiesOrErr returns the Entities value or an error if the edge
// was not loaded in eager-loading.
func (e EntityTypeEdges) EntitiesOrErr() ([]*Entity, error) {
	if e.loadedTypes[1] {
		return e.Entities, nil
	}
	return nil, &NotLoadedError{edge: "entities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntityType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entitytype.FieldTags:
			values[i] = new([]byte)
		case entitytype.FieldID, entitytype.FieldCreatedBy, entitytype.FieldUpdatedBy, entitytype.FieldMappingID, entitytype.FieldDeletedBy, entitytype.FieldOwnerID, entitytype.FieldName:
			values[i] = new(sql.NullString)
		case entitytype.FieldCreatedAt, entitytype.FieldUpdatedAt, entitytype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntityType fields.
func (et *EntityType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entitytype.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				et.ID = value.String
			}
		case entitytype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		case entitytype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				et.UpdatedAt = value.Time
			}
		case entitytype.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				et.CreatedBy = value.String
			}
		case entitytype.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				et.UpdatedBy = value.String
			}
		case entitytype.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				et.MappingID = value.String
			}
		case entitytype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				et.DeletedAt = value.Time
			}
		case entitytype.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				et.DeletedBy = value.String
			}
		case entitytype.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &et.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case entitytype.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				et.OwnerID = value.String
			}
		case entitytype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				et.Name = value.String
			}
		default:
			et.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntityType.
// This includes values selected through modifiers, order, etc.
func (et *EntityType) Value(name string) (ent.Value, error) {
	return et.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the EntityType entity.
func (et *EntityType) QueryOwner() *OrganizationQuery {
	return NewEntityTypeClient(et.config).QueryOwner(et)
}

// QueryEntities queries the "entities" edge of the EntityType entity.
func (et *EntityType) QueryEntities() *EntityQuery {
	return NewEntityTypeClient(et.config).QueryEntities(et)
}

// Update returns a builder for updating this EntityType.
// Note that you need to call EntityType.Unwrap() before calling this method if this EntityType
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EntityType) Update() *EntityTypeUpdateOne {
	return NewEntityTypeClient(et.config).UpdateOne(et)
}

// Unwrap unwraps the EntityType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EntityType) Unwrap() *EntityType {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("generated: EntityType is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EntityType) String() string {
	var builder strings.Builder
	builder.WriteString("EntityType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("created_at=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(et.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(et.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(et.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(et.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(et.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(et.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", et.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(et.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(et.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEntities returns the Entities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EntityType) NamedEntities(name string) ([]*Entity, error) {
	if et.Edges.namedEntities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedEntities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EntityType) appendNamedEntities(name string, edges ...*Entity) {
	if et.Edges.namedEntities == nil {
		et.Edges.namedEntities = make(map[string][]*Entity)
	}
	if len(edges) == 0 {
		et.Edges.namedEntities[name] = []*Entity{}
	} else {
		et.Edges.namedEntities[name] = append(et.Edges.namedEntities[name], edges...)
	}
}

// EntityTypes is a parsable slice of EntityType.
type EntityTypes []*EntityType
