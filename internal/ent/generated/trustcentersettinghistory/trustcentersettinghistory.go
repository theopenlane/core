// Code generated by ent, DO NOT EDIT.

package trustcentersettinghistory

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the trustcentersettinghistory type in the database.
	Label = "trust_center_setting_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTrustCenterID holds the string denoting the trust_center_id field in the database.
	FieldTrustCenterID = "trust_center_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldOverview holds the string denoting the overview field in the database.
	FieldOverview = "overview"
	// FieldLogoRemoteURL holds the string denoting the logo_remote_url field in the database.
	FieldLogoRemoteURL = "logo_remote_url"
	// FieldLogoLocalFileID holds the string denoting the logo_local_file_id field in the database.
	FieldLogoLocalFileID = "logo_local_file_id"
	// FieldFaviconRemoteURL holds the string denoting the favicon_remote_url field in the database.
	FieldFaviconRemoteURL = "favicon_remote_url"
	// FieldFaviconLocalFileID holds the string denoting the favicon_local_file_id field in the database.
	FieldFaviconLocalFileID = "favicon_local_file_id"
	// FieldThemeMode holds the string denoting the theme_mode field in the database.
	FieldThemeMode = "theme_mode"
	// FieldPrimaryColor holds the string denoting the primary_color field in the database.
	FieldPrimaryColor = "primary_color"
	// FieldFont holds the string denoting the font field in the database.
	FieldFont = "font"
	// FieldForegroundColor holds the string denoting the foreground_color field in the database.
	FieldForegroundColor = "foreground_color"
	// FieldBackgroundColor holds the string denoting the background_color field in the database.
	FieldBackgroundColor = "background_color"
	// FieldAccentColor holds the string denoting the accent_color field in the database.
	FieldAccentColor = "accent_color"
	// Table holds the table name of the trustcentersettinghistory in the database.
	Table = "trust_center_setting_history"
)

// Columns holds all SQL columns for trustcentersettinghistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTrustCenterID,
	FieldTitle,
	FieldOverview,
	FieldLogoRemoteURL,
	FieldLogoLocalFileID,
	FieldFaviconRemoteURL,
	FieldFaviconLocalFileID,
	FieldThemeMode,
	FieldPrimaryColor,
	FieldFont,
	FieldForegroundColor,
	FieldBackgroundColor,
	FieldAccentColor,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("trustcentersettinghistory: invalid enum value for operation field: %q", o)
	}
}

const DefaultThemeMode enums.TrustCenterThemeMode = "EASY"

// ThemeModeValidator is a validator for the "theme_mode" field enum values. It is called by the builders before save.
func ThemeModeValidator(tm enums.TrustCenterThemeMode) error {
	switch tm.String() {
	case "EASY", "ADVANCED":
		return nil
	default:
		return fmt.Errorf("trustcentersettinghistory: invalid enum value for theme_mode field: %q", tm)
	}
}

// OrderOption defines the ordering options for the TrustCenterSettingHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByTrustCenterID orders the results by the trust_center_id field.
func ByTrustCenterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrustCenterID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByOverview orders the results by the overview field.
func ByOverview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverview, opts...).ToFunc()
}

// ByLogoRemoteURL orders the results by the logo_remote_url field.
func ByLogoRemoteURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoRemoteURL, opts...).ToFunc()
}

// ByLogoLocalFileID orders the results by the logo_local_file_id field.
func ByLogoLocalFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoLocalFileID, opts...).ToFunc()
}

// ByFaviconRemoteURL orders the results by the favicon_remote_url field.
func ByFaviconRemoteURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFaviconRemoteURL, opts...).ToFunc()
}

// ByFaviconLocalFileID orders the results by the favicon_local_file_id field.
func ByFaviconLocalFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFaviconLocalFileID, opts...).ToFunc()
}

// ByThemeMode orders the results by the theme_mode field.
func ByThemeMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThemeMode, opts...).ToFunc()
}

// ByPrimaryColor orders the results by the primary_color field.
func ByPrimaryColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryColor, opts...).ToFunc()
}

// ByFont orders the results by the font field.
func ByFont(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFont, opts...).ToFunc()
}

// ByForegroundColor orders the results by the foreground_color field.
func ByForegroundColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForegroundColor, opts...).ToFunc()
}

// ByBackgroundColor orders the results by the background_color field.
func ByBackgroundColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundColor, opts...).ToFunc()
}

// ByAccentColor orders the results by the accent_color field.
func ByAccentColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccentColor, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)

var (
	// enums.TrustCenterThemeMode must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.TrustCenterThemeMode)(nil)
	// enums.TrustCenterThemeMode must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.TrustCenterThemeMode)(nil)
)
