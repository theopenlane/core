// Code generated by ent, DO NOT EDIT.

package scheduledjob

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scheduledjob type in the database.
	Label = "scheduled_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDisplayID holds the string denoting the display_id field in the database.
	FieldDisplayID = "display_id"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldJobID holds the string denoting the job_id field in the database.
	FieldJobID = "job_id"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldConfiguration holds the string denoting the configuration field in the database.
	FieldConfiguration = "configuration"
	// FieldCron holds the string denoting the cron field in the database.
	FieldCron = "cron"
	// FieldJobRunnerID holds the string denoting the job_runner_id field in the database.
	FieldJobRunnerID = "job_runner_id"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeJobTemplate holds the string denoting the job_template edge name in mutations.
	EdgeJobTemplate = "job_template"
	// EdgeControls holds the string denoting the controls edge name in mutations.
	EdgeControls = "controls"
	// EdgeSubcontrols holds the string denoting the subcontrols edge name in mutations.
	EdgeSubcontrols = "subcontrols"
	// EdgeJobRunner holds the string denoting the job_runner edge name in mutations.
	EdgeJobRunner = "job_runner"
	// Table holds the table name of the scheduledjob in the database.
	Table = "scheduled_jobs"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "scheduled_jobs"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// JobTemplateTable is the table that holds the job_template relation/edge.
	JobTemplateTable = "scheduled_jobs"
	// JobTemplateInverseTable is the table name for the JobTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "jobtemplate" package.
	JobTemplateInverseTable = "job_templates"
	// JobTemplateColumn is the table column denoting the job_template relation/edge.
	JobTemplateColumn = "job_id"
	// ControlsTable is the table that holds the controls relation/edge. The primary key declared below.
	ControlsTable = "scheduled_job_controls"
	// ControlsInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlsInverseTable = "controls"
	// SubcontrolsTable is the table that holds the subcontrols relation/edge. The primary key declared below.
	SubcontrolsTable = "scheduled_job_subcontrols"
	// SubcontrolsInverseTable is the table name for the Subcontrol entity.
	// It exists in this package in order to avoid circular dependency with the "subcontrol" package.
	SubcontrolsInverseTable = "subcontrols"
	// JobRunnerTable is the table that holds the job_runner relation/edge.
	JobRunnerTable = "scheduled_jobs"
	// JobRunnerInverseTable is the table name for the JobRunner entity.
	// It exists in this package in order to avoid circular dependency with the "jobrunner" package.
	JobRunnerInverseTable = "job_runners"
	// JobRunnerColumn is the table column denoting the job_runner relation/edge.
	JobRunnerColumn = "job_runner_id"
)

// Columns holds all SQL columns for scheduledjob fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldDisplayID,
	FieldOwnerID,
	FieldJobID,
	FieldActive,
	FieldConfiguration,
	FieldCron,
	FieldJobRunnerID,
}

var (
	// ControlsPrimaryKey and ControlsColumn2 are the table columns denoting the
	// primary key for the controls relation (M2M).
	ControlsPrimaryKey = []string{"scheduled_job_id", "control_id"}
	// SubcontrolsPrimaryKey and SubcontrolsColumn2 are the table columns denoting the
	// primary key for the subcontrols relation (M2M).
	SubcontrolsPrimaryKey = []string{"scheduled_job_id", "subcontrol_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [8]ent.Hook
	Interceptors [4]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DisplayIDValidator is a validator for the "display_id" field. It is called by the builders before save.
	DisplayIDValidator func(string) error
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// JobIDValidator is a validator for the "job_id" field. It is called by the builders before save.
	JobIDValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// CronValidator is a validator for the "cron" field. It is called by the builders before save.
	CronValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the ScheduledJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDisplayID orders the results by the display_id field.
func ByDisplayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByJobID orders the results by the job_id field.
func ByJobID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobID, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByCron orders the results by the cron field.
func ByCron(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCron, opts...).ToFunc()
}

// ByJobRunnerID orders the results by the job_runner_id field.
func ByJobRunnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobRunnerID, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobTemplateField orders the results by job_template field.
func ByJobTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobTemplateStep(), sql.OrderByField(field, opts...))
	}
}

// ByControlsCount orders the results by controls count.
func ByControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlsStep(), opts...)
	}
}

// ByControls orders the results by controls terms.
func ByControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubcontrolsCount orders the results by subcontrols count.
func BySubcontrolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubcontrolsStep(), opts...)
	}
}

// BySubcontrols orders the results by subcontrols terms.
func BySubcontrols(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubcontrolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobRunnerField orders the results by job_runner field.
func ByJobRunnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobRunnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newJobTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobTemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobTemplateTable, JobTemplateColumn),
	)
}
func newControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ControlsTable, ControlsPrimaryKey...),
	)
}
func newSubcontrolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubcontrolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SubcontrolsTable, SubcontrolsPrimaryKey...),
	)
}
func newJobRunnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobRunnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, JobRunnerTable, JobRunnerColumn),
	)
}
