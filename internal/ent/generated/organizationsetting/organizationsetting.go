// Code generated by ent, DO NOT EDIT.

package organizationsetting

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the organizationsetting type in the database.
	Label = "organization_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedByID holds the string denoting the created_by_id field in the database.
	FieldCreatedByID = "created_by_id"
	// FieldUpdatedByID holds the string denoting the updated_by_id field in the database.
	FieldUpdatedByID = "updated_by_id"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedByID holds the string denoting the deleted_by_id field in the database.
	FieldDeletedByID = "deleted_by_id"
	// FieldDomains holds the string denoting the domains field in the database.
	FieldDomains = "domains"
	// FieldBillingContact holds the string denoting the billing_contact field in the database.
	FieldBillingContact = "billing_contact"
	// FieldBillingEmail holds the string denoting the billing_email field in the database.
	FieldBillingEmail = "billing_email"
	// FieldBillingPhone holds the string denoting the billing_phone field in the database.
	FieldBillingPhone = "billing_phone"
	// FieldBillingAddress holds the string denoting the billing_address field in the database.
	FieldBillingAddress = "billing_address"
	// FieldTaxIdentifier holds the string denoting the tax_identifier field in the database.
	FieldTaxIdentifier = "tax_identifier"
	// FieldGeoLocation holds the string denoting the geo_location field in the database.
	FieldGeoLocation = "geo_location"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldStripeID holds the string denoting the stripe_id field in the database.
	FieldStripeID = "stripe_id"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgeUpdatedBy holds the string denoting the updated_by edge name in mutations.
	EdgeUpdatedBy = "updated_by"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// Table holds the table name of the organizationsetting in the database.
	Table = "organization_settings"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "organization_settings"
	// CreatedByInverseTable is the table name for the ChangeActor entity.
	// It exists in this package in order to avoid circular dependency with the "changeactor" package.
	CreatedByInverseTable = "change_actors"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "created_by_id"
	// UpdatedByTable is the table that holds the updated_by relation/edge.
	UpdatedByTable = "organization_settings"
	// UpdatedByInverseTable is the table name for the ChangeActor entity.
	// It exists in this package in order to avoid circular dependency with the "changeactor" package.
	UpdatedByInverseTable = "change_actors"
	// UpdatedByColumn is the table column denoting the updated_by relation/edge.
	UpdatedByColumn = "updated_by_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "organization_settings"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// FilesTable is the table that holds the files relation/edge. The primary key declared below.
	FilesTable = "organization_setting_files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
)

// Columns holds all SQL columns for organizationsetting fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedByID,
	FieldUpdatedByID,
	FieldMappingID,
	FieldTags,
	FieldDeletedAt,
	FieldDeletedByID,
	FieldDomains,
	FieldBillingContact,
	FieldBillingEmail,
	FieldBillingPhone,
	FieldBillingAddress,
	FieldTaxIdentifier,
	FieldGeoLocation,
	FieldOrganizationID,
	FieldStripeID,
}

var (
	// FilesPrimaryKey and FilesColumn2 are the table columns denoting the
	// primary key for the files relation (M2M).
	FilesPrimaryKey = []string{"organization_setting_id", "file_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [2]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DomainsValidator is a validator for the "domains" field. It is called by the builders before save.
	DomainsValidator func([]string) error
	// BillingEmailValidator is a validator for the "billing_email" field. It is called by the builders before save.
	BillingEmailValidator func(string) error
	// BillingPhoneValidator is a validator for the "billing_phone" field. It is called by the builders before save.
	BillingPhoneValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultGeoLocation enums.Region = "AMER"

// GeoLocationValidator is a validator for the "geo_location" field enum values. It is called by the builders before save.
func GeoLocationValidator(gl enums.Region) error {
	switch gl.String() {
	case "AMER", "EMEA", "APAC":
		return nil
	default:
		return fmt.Errorf("organizationsetting: invalid enum value for geo_location field: %q", gl)
	}
}

// OrderOption defines the ordering options for the OrganizationSetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedByID orders the results by the created_by_id field.
func ByCreatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByID, opts...).ToFunc()
}

// ByUpdatedByID orders the results by the updated_by_id field.
func ByUpdatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByID, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedByID orders the results by the deleted_by_id field.
func ByDeletedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByID, opts...).ToFunc()
}

// ByBillingContact orders the results by the billing_contact field.
func ByBillingContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingContact, opts...).ToFunc()
}

// ByBillingEmail orders the results by the billing_email field.
func ByBillingEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingEmail, opts...).ToFunc()
}

// ByBillingPhone orders the results by the billing_phone field.
func ByBillingPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingPhone, opts...).ToFunc()
}

// ByBillingAddress orders the results by the billing_address field.
func ByBillingAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddress, opts...).ToFunc()
}

// ByTaxIdentifier orders the results by the tax_identifier field.
func ByTaxIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxIdentifier, opts...).ToFunc()
}

// ByGeoLocation orders the results by the geo_location field.
func ByGeoLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeoLocation, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByStripeID orders the results by the stripe_id field.
func ByStripeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripeID, opts...).ToFunc()
}

// ByCreatedByField orders the results by created_by field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByField orders the results by updated_by field.
func ByUpdatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
	)
}
func newUpdatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByTable, UpdatedByColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
	)
}

var (
	// enums.Region must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.Region)(nil)
	// enums.Region must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.Region)(nil)
)
