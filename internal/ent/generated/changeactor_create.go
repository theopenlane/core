// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/changeactor"
)

// ChangeActorCreate is the builder for creating a ChangeActor entity.
type ChangeActorCreate struct {
	config
	mutation *ChangeActorMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cac *ChangeActorCreate) SetName(s string) *ChangeActorCreate {
	cac.mutation.SetName(s)
	return cac
}

// SetActorType sets the "actor_type" field.
func (cac *ChangeActorCreate) SetActorType(ct changeactor.ActorType) *ChangeActorCreate {
	cac.mutation.SetActorType(ct)
	return cac
}

// SetID sets the "id" field.
func (cac *ChangeActorCreate) SetID(s string) *ChangeActorCreate {
	cac.mutation.SetID(s)
	return cac
}

// Mutation returns the ChangeActorMutation object of the builder.
func (cac *ChangeActorCreate) Mutation() *ChangeActorMutation {
	return cac.mutation
}

// Save creates the ChangeActor in the database.
func (cac *ChangeActorCreate) Save(ctx context.Context) (*ChangeActor, error) {
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *ChangeActorCreate) SaveX(ctx context.Context) *ChangeActor {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *ChangeActorCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *ChangeActorCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *ChangeActorCreate) check() error {
	if _, ok := cac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ChangeActor.name"`)}
	}
	if _, ok := cac.mutation.ActorType(); !ok {
		return &ValidationError{Name: "actor_type", err: errors.New(`generated: missing required field "ChangeActor.actor_type"`)}
	}
	if v, ok := cac.mutation.ActorType(); ok {
		if err := changeactor.ActorTypeValidator(v); err != nil {
			return &ValidationError{Name: "actor_type", err: fmt.Errorf(`generated: validator failed for field "ChangeActor.actor_type": %w`, err)}
		}
	}
	return nil
}

func (cac *ChangeActorCreate) sqlSave(ctx context.Context) (*ChangeActor, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ChangeActor.ID type: %T", _spec.ID.Value)
		}
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *ChangeActorCreate) createSpec() (*ChangeActor, *sqlgraph.CreateSpec) {
	var (
		_node = &ChangeActor{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(changeactor.Table, sqlgraph.NewFieldSpec(changeactor.FieldID, field.TypeString))
	)
	_spec.Schema = cac.schemaConfig.ChangeActor
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.Name(); ok {
		_spec.SetField(changeactor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cac.mutation.ActorType(); ok {
		_spec.SetField(changeactor.FieldActorType, field.TypeEnum, value)
		_node.ActorType = value
	}
	return _node, _spec
}

// ChangeActorCreateBulk is the builder for creating many ChangeActor entities in bulk.
type ChangeActorCreateBulk struct {
	config
	err      error
	builders []*ChangeActorCreate
}

// Save creates the ChangeActor entities in the database.
func (cacb *ChangeActorCreateBulk) Save(ctx context.Context) ([]*ChangeActor, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*ChangeActor, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChangeActorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *ChangeActorCreateBulk) SaveX(ctx context.Context) []*ChangeActor {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *ChangeActorCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *ChangeActorCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
