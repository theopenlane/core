// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubprocessorUpdate is the builder for updating Subprocessor entities.
type SubprocessorUpdate struct {
	config
	hooks     []Hook
	mutation  *SubprocessorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubprocessorUpdate builder.
func (su *SubprocessorUpdate) Where(ps ...predicate.Subprocessor) *SubprocessorUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubprocessorUpdate) SetUpdatedAt(t time.Time) *SubprocessorUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SubprocessorUpdate) ClearUpdatedAt() *SubprocessorUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SubprocessorUpdate) SetUpdatedBy(s string) *SubprocessorUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableUpdatedBy(s *string) *SubprocessorUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SubprocessorUpdate) ClearUpdatedBy() *SubprocessorUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SubprocessorUpdate) SetDeletedAt(t time.Time) *SubprocessorUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableDeletedAt(t *time.Time) *SubprocessorUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SubprocessorUpdate) ClearDeletedAt() *SubprocessorUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetDeletedBy sets the "deleted_by" field.
func (su *SubprocessorUpdate) SetDeletedBy(s string) *SubprocessorUpdate {
	su.mutation.SetDeletedBy(s)
	return su
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableDeletedBy(s *string) *SubprocessorUpdate {
	if s != nil {
		su.SetDeletedBy(*s)
	}
	return su
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (su *SubprocessorUpdate) ClearDeletedBy() *SubprocessorUpdate {
	su.mutation.ClearDeletedBy()
	return su
}

// SetTags sets the "tags" field.
func (su *SubprocessorUpdate) SetTags(s []string) *SubprocessorUpdate {
	su.mutation.SetTags(s)
	return su
}

// AppendTags appends s to the "tags" field.
func (su *SubprocessorUpdate) AppendTags(s []string) *SubprocessorUpdate {
	su.mutation.AppendTags(s)
	return su
}

// ClearTags clears the value of the "tags" field.
func (su *SubprocessorUpdate) ClearTags() *SubprocessorUpdate {
	su.mutation.ClearTags()
	return su
}

// SetOwnerID sets the "owner_id" field.
func (su *SubprocessorUpdate) SetOwnerID(s string) *SubprocessorUpdate {
	su.mutation.SetOwnerID(s)
	return su
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableOwnerID(s *string) *SubprocessorUpdate {
	if s != nil {
		su.SetOwnerID(*s)
	}
	return su
}

// ClearOwnerID clears the value of the "owner_id" field.
func (su *SubprocessorUpdate) ClearOwnerID() *SubprocessorUpdate {
	su.mutation.ClearOwnerID()
	return su
}

// SetName sets the "name" field.
func (su *SubprocessorUpdate) SetName(s string) *SubprocessorUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableName(s *string) *SubprocessorUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SubprocessorUpdate) SetDescription(s string) *SubprocessorUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableDescription(s *string) *SubprocessorUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SubprocessorUpdate) ClearDescription() *SubprocessorUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (su *SubprocessorUpdate) SetLogoRemoteURL(s string) *SubprocessorUpdate {
	su.mutation.SetLogoRemoteURL(s)
	return su
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableLogoRemoteURL(s *string) *SubprocessorUpdate {
	if s != nil {
		su.SetLogoRemoteURL(*s)
	}
	return su
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (su *SubprocessorUpdate) ClearLogoRemoteURL() *SubprocessorUpdate {
	su.mutation.ClearLogoRemoteURL()
	return su
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (su *SubprocessorUpdate) SetLogoLocalFileID(s string) *SubprocessorUpdate {
	su.mutation.SetLogoLocalFileID(s)
	return su
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableLogoLocalFileID(s *string) *SubprocessorUpdate {
	if s != nil {
		su.SetLogoLocalFileID(*s)
	}
	return su
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (su *SubprocessorUpdate) ClearLogoLocalFileID() *SubprocessorUpdate {
	su.mutation.ClearLogoLocalFileID()
	return su
}

// SetOwner sets the "owner" edge to the Organization entity.
func (su *SubprocessorUpdate) SetOwner(o *Organization) *SubprocessorUpdate {
	return su.SetOwnerID(o.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (su *SubprocessorUpdate) AddFileIDs(ids ...string) *SubprocessorUpdate {
	su.mutation.AddFileIDs(ids...)
	return su
}

// AddFiles adds the "files" edges to the File entity.
func (su *SubprocessorUpdate) AddFiles(f ...*File) *SubprocessorUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return su.AddFileIDs(ids...)
}

// SetLogoFileID sets the "logo_file" edge to the File entity by ID.
func (su *SubprocessorUpdate) SetLogoFileID(id string) *SubprocessorUpdate {
	su.mutation.SetLogoFileID(id)
	return su
}

// SetNillableLogoFileID sets the "logo_file" edge to the File entity by ID if the given value is not nil.
func (su *SubprocessorUpdate) SetNillableLogoFileID(id *string) *SubprocessorUpdate {
	if id != nil {
		su = su.SetLogoFileID(*id)
	}
	return su
}

// SetLogoFile sets the "logo_file" edge to the File entity.
func (su *SubprocessorUpdate) SetLogoFile(f *File) *SubprocessorUpdate {
	return su.SetLogoFileID(f.ID)
}

// AddTrustCenterSubprocessorIDs adds the "trust_center_subprocessors" edge to the TrustCenterSubprocessor entity by IDs.
func (su *SubprocessorUpdate) AddTrustCenterSubprocessorIDs(ids ...string) *SubprocessorUpdate {
	su.mutation.AddTrustCenterSubprocessorIDs(ids...)
	return su
}

// AddTrustCenterSubprocessors adds the "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (su *SubprocessorUpdate) AddTrustCenterSubprocessors(t ...*TrustCenterSubprocessor) *SubprocessorUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTrustCenterSubprocessorIDs(ids...)
}

// Mutation returns the SubprocessorMutation object of the builder.
func (su *SubprocessorUpdate) Mutation() *SubprocessorMutation {
	return su.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (su *SubprocessorUpdate) ClearOwner() *SubprocessorUpdate {
	su.mutation.ClearOwner()
	return su
}

// ClearFiles clears all "files" edges to the File entity.
func (su *SubprocessorUpdate) ClearFiles() *SubprocessorUpdate {
	su.mutation.ClearFiles()
	return su
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (su *SubprocessorUpdate) RemoveFileIDs(ids ...string) *SubprocessorUpdate {
	su.mutation.RemoveFileIDs(ids...)
	return su
}

// RemoveFiles removes "files" edges to File entities.
func (su *SubprocessorUpdate) RemoveFiles(f ...*File) *SubprocessorUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return su.RemoveFileIDs(ids...)
}

// ClearLogoFile clears the "logo_file" edge to the File entity.
func (su *SubprocessorUpdate) ClearLogoFile() *SubprocessorUpdate {
	su.mutation.ClearLogoFile()
	return su
}

// ClearTrustCenterSubprocessors clears all "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (su *SubprocessorUpdate) ClearTrustCenterSubprocessors() *SubprocessorUpdate {
	su.mutation.ClearTrustCenterSubprocessors()
	return su
}

// RemoveTrustCenterSubprocessorIDs removes the "trust_center_subprocessors" edge to TrustCenterSubprocessor entities by IDs.
func (su *SubprocessorUpdate) RemoveTrustCenterSubprocessorIDs(ids ...string) *SubprocessorUpdate {
	su.mutation.RemoveTrustCenterSubprocessorIDs(ids...)
	return su
}

// RemoveTrustCenterSubprocessors removes "trust_center_subprocessors" edges to TrustCenterSubprocessor entities.
func (su *SubprocessorUpdate) RemoveTrustCenterSubprocessors(t ...*TrustCenterSubprocessor) *SubprocessorUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTrustCenterSubprocessorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubprocessorUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubprocessorUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubprocessorUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubprocessorUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubprocessorUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		if subprocessor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subprocessor.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subprocessor.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SubprocessorUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := subprocessor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Subprocessor.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.LogoRemoteURL(); ok {
		if err := subprocessor.LogoRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_remote_url", err: fmt.Errorf(`generated: validator failed for field "Subprocessor.logo_remote_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SubprocessorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubprocessorUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SubprocessorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subprocessor.Table, subprocessor.Columns, sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(subprocessor.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subprocessor.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(subprocessor.FieldUpdatedAt, field.TypeTime)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(subprocessor.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(subprocessor.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(subprocessor.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(subprocessor.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(subprocessor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.DeletedBy(); ok {
		_spec.SetField(subprocessor.FieldDeletedBy, field.TypeString, value)
	}
	if su.mutation.DeletedByCleared() {
		_spec.ClearField(subprocessor.FieldDeletedBy, field.TypeString)
	}
	if value, ok := su.mutation.Tags(); ok {
		_spec.SetField(subprocessor.FieldTags, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subprocessor.FieldTags, value)
		})
	}
	if su.mutation.TagsCleared() {
		_spec.ClearField(subprocessor.FieldTags, field.TypeJSON)
	}
	if su.mutation.SystemOwnedCleared() {
		_spec.ClearField(subprocessor.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subprocessor.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(subprocessor.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(subprocessor.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.LogoRemoteURL(); ok {
		_spec.SetField(subprocessor.FieldLogoRemoteURL, field.TypeString, value)
	}
	if su.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(subprocessor.FieldLogoRemoteURL, field.TypeString)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subprocessor.OwnerTable,
			Columns: []string{subprocessor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subprocessor.OwnerTable,
			Columns: []string{subprocessor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subprocessor.FilesTable,
			Columns: subprocessor.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubprocessorFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedFilesIDs(); len(nodes) > 0 && !su.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subprocessor.FilesTable,
			Columns: subprocessor.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subprocessor.FilesTable,
			Columns: subprocessor.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.LogoFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subprocessor.LogoFileTable,
			Columns: []string{subprocessor.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.LogoFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subprocessor.LogoFileTable,
			Columns: []string{subprocessor.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subprocessor.TrustCenterSubprocessorsTable,
			Columns: []string{subprocessor.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTrustCenterSubprocessorsIDs(); len(nodes) > 0 && !su.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subprocessor.TrustCenterSubprocessorsTable,
			Columns: []string{subprocessor.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TrustCenterSubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subprocessor.TrustCenterSubprocessorsTable,
			Columns: []string{subprocessor.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Subprocessor
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subprocessor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubprocessorUpdateOne is the builder for updating a single Subprocessor entity.
type SubprocessorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubprocessorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubprocessorUpdateOne) SetUpdatedAt(t time.Time) *SubprocessorUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SubprocessorUpdateOne) ClearUpdatedAt() *SubprocessorUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SubprocessorUpdateOne) SetUpdatedBy(s string) *SubprocessorUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableUpdatedBy(s *string) *SubprocessorUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SubprocessorUpdateOne) ClearUpdatedBy() *SubprocessorUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SubprocessorUpdateOne) SetDeletedAt(t time.Time) *SubprocessorUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableDeletedAt(t *time.Time) *SubprocessorUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SubprocessorUpdateOne) ClearDeletedAt() *SubprocessorUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetDeletedBy sets the "deleted_by" field.
func (suo *SubprocessorUpdateOne) SetDeletedBy(s string) *SubprocessorUpdateOne {
	suo.mutation.SetDeletedBy(s)
	return suo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableDeletedBy(s *string) *SubprocessorUpdateOne {
	if s != nil {
		suo.SetDeletedBy(*s)
	}
	return suo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (suo *SubprocessorUpdateOne) ClearDeletedBy() *SubprocessorUpdateOne {
	suo.mutation.ClearDeletedBy()
	return suo
}

// SetTags sets the "tags" field.
func (suo *SubprocessorUpdateOne) SetTags(s []string) *SubprocessorUpdateOne {
	suo.mutation.SetTags(s)
	return suo
}

// AppendTags appends s to the "tags" field.
func (suo *SubprocessorUpdateOne) AppendTags(s []string) *SubprocessorUpdateOne {
	suo.mutation.AppendTags(s)
	return suo
}

// ClearTags clears the value of the "tags" field.
func (suo *SubprocessorUpdateOne) ClearTags() *SubprocessorUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// SetOwnerID sets the "owner_id" field.
func (suo *SubprocessorUpdateOne) SetOwnerID(s string) *SubprocessorUpdateOne {
	suo.mutation.SetOwnerID(s)
	return suo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableOwnerID(s *string) *SubprocessorUpdateOne {
	if s != nil {
		suo.SetOwnerID(*s)
	}
	return suo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (suo *SubprocessorUpdateOne) ClearOwnerID() *SubprocessorUpdateOne {
	suo.mutation.ClearOwnerID()
	return suo
}

// SetName sets the "name" field.
func (suo *SubprocessorUpdateOne) SetName(s string) *SubprocessorUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableName(s *string) *SubprocessorUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SubprocessorUpdateOne) SetDescription(s string) *SubprocessorUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableDescription(s *string) *SubprocessorUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SubprocessorUpdateOne) ClearDescription() *SubprocessorUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (suo *SubprocessorUpdateOne) SetLogoRemoteURL(s string) *SubprocessorUpdateOne {
	suo.mutation.SetLogoRemoteURL(s)
	return suo
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableLogoRemoteURL(s *string) *SubprocessorUpdateOne {
	if s != nil {
		suo.SetLogoRemoteURL(*s)
	}
	return suo
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (suo *SubprocessorUpdateOne) ClearLogoRemoteURL() *SubprocessorUpdateOne {
	suo.mutation.ClearLogoRemoteURL()
	return suo
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (suo *SubprocessorUpdateOne) SetLogoLocalFileID(s string) *SubprocessorUpdateOne {
	suo.mutation.SetLogoLocalFileID(s)
	return suo
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableLogoLocalFileID(s *string) *SubprocessorUpdateOne {
	if s != nil {
		suo.SetLogoLocalFileID(*s)
	}
	return suo
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (suo *SubprocessorUpdateOne) ClearLogoLocalFileID() *SubprocessorUpdateOne {
	suo.mutation.ClearLogoLocalFileID()
	return suo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (suo *SubprocessorUpdateOne) SetOwner(o *Organization) *SubprocessorUpdateOne {
	return suo.SetOwnerID(o.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (suo *SubprocessorUpdateOne) AddFileIDs(ids ...string) *SubprocessorUpdateOne {
	suo.mutation.AddFileIDs(ids...)
	return suo
}

// AddFiles adds the "files" edges to the File entity.
func (suo *SubprocessorUpdateOne) AddFiles(f ...*File) *SubprocessorUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return suo.AddFileIDs(ids...)
}

// SetLogoFileID sets the "logo_file" edge to the File entity by ID.
func (suo *SubprocessorUpdateOne) SetLogoFileID(id string) *SubprocessorUpdateOne {
	suo.mutation.SetLogoFileID(id)
	return suo
}

// SetNillableLogoFileID sets the "logo_file" edge to the File entity by ID if the given value is not nil.
func (suo *SubprocessorUpdateOne) SetNillableLogoFileID(id *string) *SubprocessorUpdateOne {
	if id != nil {
		suo = suo.SetLogoFileID(*id)
	}
	return suo
}

// SetLogoFile sets the "logo_file" edge to the File entity.
func (suo *SubprocessorUpdateOne) SetLogoFile(f *File) *SubprocessorUpdateOne {
	return suo.SetLogoFileID(f.ID)
}

// AddTrustCenterSubprocessorIDs adds the "trust_center_subprocessors" edge to the TrustCenterSubprocessor entity by IDs.
func (suo *SubprocessorUpdateOne) AddTrustCenterSubprocessorIDs(ids ...string) *SubprocessorUpdateOne {
	suo.mutation.AddTrustCenterSubprocessorIDs(ids...)
	return suo
}

// AddTrustCenterSubprocessors adds the "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (suo *SubprocessorUpdateOne) AddTrustCenterSubprocessors(t ...*TrustCenterSubprocessor) *SubprocessorUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTrustCenterSubprocessorIDs(ids...)
}

// Mutation returns the SubprocessorMutation object of the builder.
func (suo *SubprocessorUpdateOne) Mutation() *SubprocessorMutation {
	return suo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (suo *SubprocessorUpdateOne) ClearOwner() *SubprocessorUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// ClearFiles clears all "files" edges to the File entity.
func (suo *SubprocessorUpdateOne) ClearFiles() *SubprocessorUpdateOne {
	suo.mutation.ClearFiles()
	return suo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (suo *SubprocessorUpdateOne) RemoveFileIDs(ids ...string) *SubprocessorUpdateOne {
	suo.mutation.RemoveFileIDs(ids...)
	return suo
}

// RemoveFiles removes "files" edges to File entities.
func (suo *SubprocessorUpdateOne) RemoveFiles(f ...*File) *SubprocessorUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return suo.RemoveFileIDs(ids...)
}

// ClearLogoFile clears the "logo_file" edge to the File entity.
func (suo *SubprocessorUpdateOne) ClearLogoFile() *SubprocessorUpdateOne {
	suo.mutation.ClearLogoFile()
	return suo
}

// ClearTrustCenterSubprocessors clears all "trust_center_subprocessors" edges to the TrustCenterSubprocessor entity.
func (suo *SubprocessorUpdateOne) ClearTrustCenterSubprocessors() *SubprocessorUpdateOne {
	suo.mutation.ClearTrustCenterSubprocessors()
	return suo
}

// RemoveTrustCenterSubprocessorIDs removes the "trust_center_subprocessors" edge to TrustCenterSubprocessor entities by IDs.
func (suo *SubprocessorUpdateOne) RemoveTrustCenterSubprocessorIDs(ids ...string) *SubprocessorUpdateOne {
	suo.mutation.RemoveTrustCenterSubprocessorIDs(ids...)
	return suo
}

// RemoveTrustCenterSubprocessors removes "trust_center_subprocessors" edges to TrustCenterSubprocessor entities.
func (suo *SubprocessorUpdateOne) RemoveTrustCenterSubprocessors(t ...*TrustCenterSubprocessor) *SubprocessorUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTrustCenterSubprocessorIDs(ids...)
}

// Where appends a list predicates to the SubprocessorUpdate builder.
func (suo *SubprocessorUpdateOne) Where(ps ...predicate.Subprocessor) *SubprocessorUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubprocessorUpdateOne) Select(field string, fields ...string) *SubprocessorUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subprocessor entity.
func (suo *SubprocessorUpdateOne) Save(ctx context.Context) (*Subprocessor, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubprocessorUpdateOne) SaveX(ctx context.Context) *Subprocessor {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubprocessorUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubprocessorUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubprocessorUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		if subprocessor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subprocessor.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subprocessor.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubprocessorUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := subprocessor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Subprocessor.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.LogoRemoteURL(); ok {
		if err := subprocessor.LogoRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_remote_url", err: fmt.Errorf(`generated: validator failed for field "Subprocessor.logo_remote_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SubprocessorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubprocessorUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SubprocessorUpdateOne) sqlSave(ctx context.Context) (_node *Subprocessor, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subprocessor.Table, subprocessor.Columns, sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subprocessor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subprocessor.FieldID)
		for _, f := range fields {
			if !subprocessor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subprocessor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(subprocessor.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subprocessor.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subprocessor.FieldUpdatedAt, field.TypeTime)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(subprocessor.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(subprocessor.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(subprocessor.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(subprocessor.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(subprocessor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.DeletedBy(); ok {
		_spec.SetField(subprocessor.FieldDeletedBy, field.TypeString, value)
	}
	if suo.mutation.DeletedByCleared() {
		_spec.ClearField(subprocessor.FieldDeletedBy, field.TypeString)
	}
	if value, ok := suo.mutation.Tags(); ok {
		_spec.SetField(subprocessor.FieldTags, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subprocessor.FieldTags, value)
		})
	}
	if suo.mutation.TagsCleared() {
		_spec.ClearField(subprocessor.FieldTags, field.TypeJSON)
	}
	if suo.mutation.SystemOwnedCleared() {
		_spec.ClearField(subprocessor.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subprocessor.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(subprocessor.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(subprocessor.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.LogoRemoteURL(); ok {
		_spec.SetField(subprocessor.FieldLogoRemoteURL, field.TypeString, value)
	}
	if suo.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(subprocessor.FieldLogoRemoteURL, field.TypeString)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subprocessor.OwnerTable,
			Columns: []string{subprocessor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subprocessor.OwnerTable,
			Columns: []string{subprocessor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subprocessor.FilesTable,
			Columns: subprocessor.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubprocessorFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !suo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subprocessor.FilesTable,
			Columns: subprocessor.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subprocessor.FilesTable,
			Columns: subprocessor.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.LogoFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subprocessor.LogoFileTable,
			Columns: []string{subprocessor.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.LogoFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subprocessor.LogoFileTable,
			Columns: []string{subprocessor.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subprocessor.TrustCenterSubprocessorsTable,
			Columns: []string{subprocessor.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTrustCenterSubprocessorsIDs(); len(nodes) > 0 && !suo.mutation.TrustCenterSubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subprocessor.TrustCenterSubprocessorsTable,
			Columns: []string{subprocessor.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TrustCenterSubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subprocessor.TrustCenterSubprocessorsTable,
			Columns: []string{subprocessor.TrustCenterSubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Subprocessor
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Subprocessor{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subprocessor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
