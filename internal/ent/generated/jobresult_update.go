// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/jobresult"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobResultUpdate is the builder for updating JobResult entities.
type JobResultUpdate struct {
	config
	hooks     []Hook
	mutation  *JobResultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobResultUpdate builder.
func (jru *JobResultUpdate) Where(ps ...predicate.JobResult) *JobResultUpdate {
	jru.mutation.Where(ps...)
	return jru
}

// SetUpdatedAt sets the "updated_at" field.
func (jru *JobResultUpdate) SetUpdatedAt(t time.Time) *JobResultUpdate {
	jru.mutation.SetUpdatedAt(t)
	return jru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jru *JobResultUpdate) ClearUpdatedAt() *JobResultUpdate {
	jru.mutation.ClearUpdatedAt()
	return jru
}

// SetUpdatedBy sets the "updated_by" field.
func (jru *JobResultUpdate) SetUpdatedBy(s string) *JobResultUpdate {
	jru.mutation.SetUpdatedBy(s)
	return jru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jru *JobResultUpdate) SetNillableUpdatedBy(s *string) *JobResultUpdate {
	if s != nil {
		jru.SetUpdatedBy(*s)
	}
	return jru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jru *JobResultUpdate) ClearUpdatedBy() *JobResultUpdate {
	jru.mutation.ClearUpdatedBy()
	return jru
}

// SetDeletedAt sets the "deleted_at" field.
func (jru *JobResultUpdate) SetDeletedAt(t time.Time) *JobResultUpdate {
	jru.mutation.SetDeletedAt(t)
	return jru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jru *JobResultUpdate) SetNillableDeletedAt(t *time.Time) *JobResultUpdate {
	if t != nil {
		jru.SetDeletedAt(*t)
	}
	return jru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jru *JobResultUpdate) ClearDeletedAt() *JobResultUpdate {
	jru.mutation.ClearDeletedAt()
	return jru
}

// SetDeletedBy sets the "deleted_by" field.
func (jru *JobResultUpdate) SetDeletedBy(s string) *JobResultUpdate {
	jru.mutation.SetDeletedBy(s)
	return jru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jru *JobResultUpdate) SetNillableDeletedBy(s *string) *JobResultUpdate {
	if s != nil {
		jru.SetDeletedBy(*s)
	}
	return jru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jru *JobResultUpdate) ClearDeletedBy() *JobResultUpdate {
	jru.mutation.ClearDeletedBy()
	return jru
}

// SetOwnerID sets the "owner_id" field.
func (jru *JobResultUpdate) SetOwnerID(s string) *JobResultUpdate {
	jru.mutation.SetOwnerID(s)
	return jru
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jru *JobResultUpdate) SetNillableOwnerID(s *string) *JobResultUpdate {
	if s != nil {
		jru.SetOwnerID(*s)
	}
	return jru
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jru *JobResultUpdate) ClearOwnerID() *JobResultUpdate {
	jru.mutation.ClearOwnerID()
	return jru
}

// SetScheduledJobID sets the "scheduled_job_id" field.
func (jru *JobResultUpdate) SetScheduledJobID(s string) *JobResultUpdate {
	jru.mutation.SetScheduledJobID(s)
	return jru
}

// SetNillableScheduledJobID sets the "scheduled_job_id" field if the given value is not nil.
func (jru *JobResultUpdate) SetNillableScheduledJobID(s *string) *JobResultUpdate {
	if s != nil {
		jru.SetScheduledJobID(*s)
	}
	return jru
}

// SetStatus sets the "status" field.
func (jru *JobResultUpdate) SetStatus(ees enums.JobExecutionStatus) *JobResultUpdate {
	jru.mutation.SetStatus(ees)
	return jru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jru *JobResultUpdate) SetNillableStatus(ees *enums.JobExecutionStatus) *JobResultUpdate {
	if ees != nil {
		jru.SetStatus(*ees)
	}
	return jru
}

// SetFileID sets the "file_id" field.
func (jru *JobResultUpdate) SetFileID(s string) *JobResultUpdate {
	jru.mutation.SetFileID(s)
	return jru
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (jru *JobResultUpdate) SetNillableFileID(s *string) *JobResultUpdate {
	if s != nil {
		jru.SetFileID(*s)
	}
	return jru
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jru *JobResultUpdate) SetOwner(o *Organization) *JobResultUpdate {
	return jru.SetOwnerID(o.ID)
}

// SetScheduledJob sets the "scheduled_job" edge to the ScheduledJob entity.
func (jru *JobResultUpdate) SetScheduledJob(s *ScheduledJob) *JobResultUpdate {
	return jru.SetScheduledJobID(s.ID)
}

// SetFile sets the "file" edge to the File entity.
func (jru *JobResultUpdate) SetFile(f *File) *JobResultUpdate {
	return jru.SetFileID(f.ID)
}

// Mutation returns the JobResultMutation object of the builder.
func (jru *JobResultUpdate) Mutation() *JobResultMutation {
	return jru.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (jru *JobResultUpdate) ClearOwner() *JobResultUpdate {
	jru.mutation.ClearOwner()
	return jru
}

// ClearScheduledJob clears the "scheduled_job" edge to the ScheduledJob entity.
func (jru *JobResultUpdate) ClearScheduledJob() *JobResultUpdate {
	jru.mutation.ClearScheduledJob()
	return jru
}

// ClearFile clears the "file" edge to the File entity.
func (jru *JobResultUpdate) ClearFile() *JobResultUpdate {
	jru.mutation.ClearFile()
	return jru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jru *JobResultUpdate) Save(ctx context.Context) (int, error) {
	if err := jru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jru.sqlSave, jru.mutation, jru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jru *JobResultUpdate) SaveX(ctx context.Context) int {
	affected, err := jru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jru *JobResultUpdate) Exec(ctx context.Context) error {
	_, err := jru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jru *JobResultUpdate) ExecX(ctx context.Context) {
	if err := jru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jru *JobResultUpdate) defaults() error {
	if _, ok := jru.mutation.UpdatedAt(); !ok && !jru.mutation.UpdatedAtCleared() {
		if jobresult.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobresult.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobresult.UpdateDefaultUpdatedAt()
		jru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jru *JobResultUpdate) check() error {
	if v, ok := jru.mutation.OwnerID(); ok {
		if err := jobresult.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "JobResult.owner_id": %w`, err)}
		}
	}
	if v, ok := jru.mutation.Status(); ok {
		if err := jobresult.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobResult.status": %w`, err)}
		}
	}
	if jru.mutation.ScheduledJobCleared() && len(jru.mutation.ScheduledJobIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "JobResult.scheduled_job"`)
	}
	if jru.mutation.FileCleared() && len(jru.mutation.FileIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "JobResult.file"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jru *JobResultUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobResultUpdate {
	jru.modifiers = append(jru.modifiers, modifiers...)
	return jru
}

func (jru *JobResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobresult.Table, jobresult.Columns, sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString))
	if ps := jru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jru.mutation.CreatedAtCleared() {
		_spec.ClearField(jobresult.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jru.mutation.UpdatedAt(); ok {
		_spec.SetField(jobresult.FieldUpdatedAt, field.TypeTime, value)
	}
	if jru.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobresult.FieldUpdatedAt, field.TypeTime)
	}
	if jru.mutation.CreatedByCleared() {
		_spec.ClearField(jobresult.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jru.mutation.UpdatedBy(); ok {
		_spec.SetField(jobresult.FieldUpdatedBy, field.TypeString, value)
	}
	if jru.mutation.UpdatedByCleared() {
		_spec.ClearField(jobresult.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jru.mutation.DeletedAt(); ok {
		_spec.SetField(jobresult.FieldDeletedAt, field.TypeTime, value)
	}
	if jru.mutation.DeletedAtCleared() {
		_spec.ClearField(jobresult.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jru.mutation.DeletedBy(); ok {
		_spec.SetField(jobresult.FieldDeletedBy, field.TypeString, value)
	}
	if jru.mutation.DeletedByCleared() {
		_spec.ClearField(jobresult.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jru.mutation.Status(); ok {
		_spec.SetField(jobresult.FieldStatus, field.TypeEnum, value)
	}
	if jru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresult.OwnerTable,
			Columns: []string{jobresult.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobResult
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresult.OwnerTable,
			Columns: []string{jobresult.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.ScheduledJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.ScheduledJobTable,
			Columns: []string{jobresult.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobResult
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.ScheduledJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.ScheduledJobTable,
			Columns: []string{jobresult.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.FileTable,
			Columns: []string{jobresult.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobResult
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.FileTable,
			Columns: []string{jobresult.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = jru.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jru.schemaConfig.JobResult
	ctx = internal.NewSchemaConfigContext(ctx, jru.schemaConfig)
	_spec.AddModifiers(jru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jru.mutation.done = true
	return n, nil
}

// JobResultUpdateOne is the builder for updating a single JobResult entity.
type JobResultUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobResultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (jruo *JobResultUpdateOne) SetUpdatedAt(t time.Time) *JobResultUpdateOne {
	jruo.mutation.SetUpdatedAt(t)
	return jruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jruo *JobResultUpdateOne) ClearUpdatedAt() *JobResultUpdateOne {
	jruo.mutation.ClearUpdatedAt()
	return jruo
}

// SetUpdatedBy sets the "updated_by" field.
func (jruo *JobResultUpdateOne) SetUpdatedBy(s string) *JobResultUpdateOne {
	jruo.mutation.SetUpdatedBy(s)
	return jruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jruo *JobResultUpdateOne) SetNillableUpdatedBy(s *string) *JobResultUpdateOne {
	if s != nil {
		jruo.SetUpdatedBy(*s)
	}
	return jruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jruo *JobResultUpdateOne) ClearUpdatedBy() *JobResultUpdateOne {
	jruo.mutation.ClearUpdatedBy()
	return jruo
}

// SetDeletedAt sets the "deleted_at" field.
func (jruo *JobResultUpdateOne) SetDeletedAt(t time.Time) *JobResultUpdateOne {
	jruo.mutation.SetDeletedAt(t)
	return jruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jruo *JobResultUpdateOne) SetNillableDeletedAt(t *time.Time) *JobResultUpdateOne {
	if t != nil {
		jruo.SetDeletedAt(*t)
	}
	return jruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jruo *JobResultUpdateOne) ClearDeletedAt() *JobResultUpdateOne {
	jruo.mutation.ClearDeletedAt()
	return jruo
}

// SetDeletedBy sets the "deleted_by" field.
func (jruo *JobResultUpdateOne) SetDeletedBy(s string) *JobResultUpdateOne {
	jruo.mutation.SetDeletedBy(s)
	return jruo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jruo *JobResultUpdateOne) SetNillableDeletedBy(s *string) *JobResultUpdateOne {
	if s != nil {
		jruo.SetDeletedBy(*s)
	}
	return jruo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jruo *JobResultUpdateOne) ClearDeletedBy() *JobResultUpdateOne {
	jruo.mutation.ClearDeletedBy()
	return jruo
}

// SetOwnerID sets the "owner_id" field.
func (jruo *JobResultUpdateOne) SetOwnerID(s string) *JobResultUpdateOne {
	jruo.mutation.SetOwnerID(s)
	return jruo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jruo *JobResultUpdateOne) SetNillableOwnerID(s *string) *JobResultUpdateOne {
	if s != nil {
		jruo.SetOwnerID(*s)
	}
	return jruo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jruo *JobResultUpdateOne) ClearOwnerID() *JobResultUpdateOne {
	jruo.mutation.ClearOwnerID()
	return jruo
}

// SetScheduledJobID sets the "scheduled_job_id" field.
func (jruo *JobResultUpdateOne) SetScheduledJobID(s string) *JobResultUpdateOne {
	jruo.mutation.SetScheduledJobID(s)
	return jruo
}

// SetNillableScheduledJobID sets the "scheduled_job_id" field if the given value is not nil.
func (jruo *JobResultUpdateOne) SetNillableScheduledJobID(s *string) *JobResultUpdateOne {
	if s != nil {
		jruo.SetScheduledJobID(*s)
	}
	return jruo
}

// SetStatus sets the "status" field.
func (jruo *JobResultUpdateOne) SetStatus(ees enums.JobExecutionStatus) *JobResultUpdateOne {
	jruo.mutation.SetStatus(ees)
	return jruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jruo *JobResultUpdateOne) SetNillableStatus(ees *enums.JobExecutionStatus) *JobResultUpdateOne {
	if ees != nil {
		jruo.SetStatus(*ees)
	}
	return jruo
}

// SetFileID sets the "file_id" field.
func (jruo *JobResultUpdateOne) SetFileID(s string) *JobResultUpdateOne {
	jruo.mutation.SetFileID(s)
	return jruo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (jruo *JobResultUpdateOne) SetNillableFileID(s *string) *JobResultUpdateOne {
	if s != nil {
		jruo.SetFileID(*s)
	}
	return jruo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jruo *JobResultUpdateOne) SetOwner(o *Organization) *JobResultUpdateOne {
	return jruo.SetOwnerID(o.ID)
}

// SetScheduledJob sets the "scheduled_job" edge to the ScheduledJob entity.
func (jruo *JobResultUpdateOne) SetScheduledJob(s *ScheduledJob) *JobResultUpdateOne {
	return jruo.SetScheduledJobID(s.ID)
}

// SetFile sets the "file" edge to the File entity.
func (jruo *JobResultUpdateOne) SetFile(f *File) *JobResultUpdateOne {
	return jruo.SetFileID(f.ID)
}

// Mutation returns the JobResultMutation object of the builder.
func (jruo *JobResultUpdateOne) Mutation() *JobResultMutation {
	return jruo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (jruo *JobResultUpdateOne) ClearOwner() *JobResultUpdateOne {
	jruo.mutation.ClearOwner()
	return jruo
}

// ClearScheduledJob clears the "scheduled_job" edge to the ScheduledJob entity.
func (jruo *JobResultUpdateOne) ClearScheduledJob() *JobResultUpdateOne {
	jruo.mutation.ClearScheduledJob()
	return jruo
}

// ClearFile clears the "file" edge to the File entity.
func (jruo *JobResultUpdateOne) ClearFile() *JobResultUpdateOne {
	jruo.mutation.ClearFile()
	return jruo
}

// Where appends a list predicates to the JobResultUpdate builder.
func (jruo *JobResultUpdateOne) Where(ps ...predicate.JobResult) *JobResultUpdateOne {
	jruo.mutation.Where(ps...)
	return jruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jruo *JobResultUpdateOne) Select(field string, fields ...string) *JobResultUpdateOne {
	jruo.fields = append([]string{field}, fields...)
	return jruo
}

// Save executes the query and returns the updated JobResult entity.
func (jruo *JobResultUpdateOne) Save(ctx context.Context) (*JobResult, error) {
	if err := jruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jruo.sqlSave, jruo.mutation, jruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jruo *JobResultUpdateOne) SaveX(ctx context.Context) *JobResult {
	node, err := jruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jruo *JobResultUpdateOne) Exec(ctx context.Context) error {
	_, err := jruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jruo *JobResultUpdateOne) ExecX(ctx context.Context) {
	if err := jruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jruo *JobResultUpdateOne) defaults() error {
	if _, ok := jruo.mutation.UpdatedAt(); !ok && !jruo.mutation.UpdatedAtCleared() {
		if jobresult.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobresult.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobresult.UpdateDefaultUpdatedAt()
		jruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jruo *JobResultUpdateOne) check() error {
	if v, ok := jruo.mutation.OwnerID(); ok {
		if err := jobresult.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "JobResult.owner_id": %w`, err)}
		}
	}
	if v, ok := jruo.mutation.Status(); ok {
		if err := jobresult.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobResult.status": %w`, err)}
		}
	}
	if jruo.mutation.ScheduledJobCleared() && len(jruo.mutation.ScheduledJobIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "JobResult.scheduled_job"`)
	}
	if jruo.mutation.FileCleared() && len(jruo.mutation.FileIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "JobResult.file"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jruo *JobResultUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobResultUpdateOne {
	jruo.modifiers = append(jruo.modifiers, modifiers...)
	return jruo
}

func (jruo *JobResultUpdateOne) sqlSave(ctx context.Context) (_node *JobResult, err error) {
	if err := jruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobresult.Table, jobresult.Columns, sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString))
	id, ok := jruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "JobResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobresult.FieldID)
		for _, f := range fields {
			if !jobresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != jobresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jruo.mutation.CreatedAtCleared() {
		_spec.ClearField(jobresult.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jruo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobresult.FieldUpdatedAt, field.TypeTime, value)
	}
	if jruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobresult.FieldUpdatedAt, field.TypeTime)
	}
	if jruo.mutation.CreatedByCleared() {
		_spec.ClearField(jobresult.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jruo.mutation.UpdatedBy(); ok {
		_spec.SetField(jobresult.FieldUpdatedBy, field.TypeString, value)
	}
	if jruo.mutation.UpdatedByCleared() {
		_spec.ClearField(jobresult.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jruo.mutation.DeletedAt(); ok {
		_spec.SetField(jobresult.FieldDeletedAt, field.TypeTime, value)
	}
	if jruo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobresult.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jruo.mutation.DeletedBy(); ok {
		_spec.SetField(jobresult.FieldDeletedBy, field.TypeString, value)
	}
	if jruo.mutation.DeletedByCleared() {
		_spec.ClearField(jobresult.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jruo.mutation.Status(); ok {
		_spec.SetField(jobresult.FieldStatus, field.TypeEnum, value)
	}
	if jruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresult.OwnerTable,
			Columns: []string{jobresult.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobResult
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresult.OwnerTable,
			Columns: []string{jobresult.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.ScheduledJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.ScheduledJobTable,
			Columns: []string{jobresult.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobResult
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.ScheduledJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.ScheduledJobTable,
			Columns: []string{jobresult.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.FileTable,
			Columns: []string{jobresult.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobResult
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.FileTable,
			Columns: []string{jobresult.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = jruo.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jruo.schemaConfig.JobResult
	ctx = internal.NewSchemaConfigContext(ctx, jruo.schemaConfig)
	_spec.AddModifiers(jruo.modifiers...)
	_node = &JobResult{config: jruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jruo.mutation.done = true
	return _node, nil
}
