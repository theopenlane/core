// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobRunnerRegistrationTokenUpdate is the builder for updating JobRunnerRegistrationToken entities.
type JobRunnerRegistrationTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *JobRunnerRegistrationTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobRunnerRegistrationTokenUpdate builder.
func (jrrtu *JobRunnerRegistrationTokenUpdate) Where(ps ...predicate.JobRunnerRegistrationToken) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.Where(ps...)
	return jrrtu
}

// SetUpdatedAt sets the "updated_at" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetUpdatedAt(t time.Time) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.SetUpdatedAt(t)
	return jrrtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearUpdatedAt() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearUpdatedAt()
	return jrrtu
}

// SetUpdatedBy sets the "updated_by" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetUpdatedBy(s string) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.SetUpdatedBy(s)
	return jrrtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetNillableUpdatedBy(s *string) *JobRunnerRegistrationTokenUpdate {
	if s != nil {
		jrrtu.SetUpdatedBy(*s)
	}
	return jrrtu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearUpdatedBy() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearUpdatedBy()
	return jrrtu
}

// SetDeletedAt sets the "deleted_at" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetDeletedAt(t time.Time) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.SetDeletedAt(t)
	return jrrtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetNillableDeletedAt(t *time.Time) *JobRunnerRegistrationTokenUpdate {
	if t != nil {
		jrrtu.SetDeletedAt(*t)
	}
	return jrrtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearDeletedAt() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearDeletedAt()
	return jrrtu
}

// SetDeletedBy sets the "deleted_by" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetDeletedBy(s string) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.SetDeletedBy(s)
	return jrrtu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetNillableDeletedBy(s *string) *JobRunnerRegistrationTokenUpdate {
	if s != nil {
		jrrtu.SetDeletedBy(*s)
	}
	return jrrtu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearDeletedBy() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearDeletedBy()
	return jrrtu
}

// SetTags sets the "tags" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetTags(s []string) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.SetTags(s)
	return jrrtu
}

// AppendTags appends s to the "tags" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) AppendTags(s []string) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.AppendTags(s)
	return jrrtu
}

// ClearTags clears the value of the "tags" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearTags() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearTags()
	return jrrtu
}

// SetOwnerID sets the "owner_id" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetOwnerID(s string) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.SetOwnerID(s)
	return jrrtu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetNillableOwnerID(s *string) *JobRunnerRegistrationTokenUpdate {
	if s != nil {
		jrrtu.SetOwnerID(*s)
	}
	return jrrtu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearOwnerID() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearOwnerID()
	return jrrtu
}

// SetLastUsedAt sets the "last_used_at" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetLastUsedAt(t time.Time) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.SetLastUsedAt(t)
	return jrrtu
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetNillableLastUsedAt(t *time.Time) *JobRunnerRegistrationTokenUpdate {
	if t != nil {
		jrrtu.SetLastUsedAt(*t)
	}
	return jrrtu
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearLastUsedAt() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearLastUsedAt()
	return jrrtu
}

// SetJobRunnerID sets the "job_runner_id" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetJobRunnerID(s string) *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.SetJobRunnerID(s)
	return jrrtu
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetNillableJobRunnerID(s *string) *JobRunnerRegistrationTokenUpdate {
	if s != nil {
		jrrtu.SetJobRunnerID(*s)
	}
	return jrrtu
}

// ClearJobRunnerID clears the value of the "job_runner_id" field.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearJobRunnerID() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearJobRunnerID()
	return jrrtu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetOwner(o *Organization) *JobRunnerRegistrationTokenUpdate {
	return jrrtu.SetOwnerID(o.ID)
}

// SetJobRunner sets the "job_runner" edge to the JobRunner entity.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SetJobRunner(j *JobRunner) *JobRunnerRegistrationTokenUpdate {
	return jrrtu.SetJobRunnerID(j.ID)
}

// Mutation returns the JobRunnerRegistrationTokenMutation object of the builder.
func (jrrtu *JobRunnerRegistrationTokenUpdate) Mutation() *JobRunnerRegistrationTokenMutation {
	return jrrtu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearOwner() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearOwner()
	return jrrtu
}

// ClearJobRunner clears the "job_runner" edge to the JobRunner entity.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ClearJobRunner() *JobRunnerRegistrationTokenUpdate {
	jrrtu.mutation.ClearJobRunner()
	return jrrtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jrrtu *JobRunnerRegistrationTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := jrrtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jrrtu.sqlSave, jrrtu.mutation, jrrtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jrrtu *JobRunnerRegistrationTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := jrrtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jrrtu *JobRunnerRegistrationTokenUpdate) Exec(ctx context.Context) error {
	_, err := jrrtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrrtu *JobRunnerRegistrationTokenUpdate) ExecX(ctx context.Context) {
	if err := jrrtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrrtu *JobRunnerRegistrationTokenUpdate) defaults() error {
	if _, ok := jrrtu.mutation.UpdatedAt(); !ok && !jrrtu.mutation.UpdatedAtCleared() {
		if jobrunnerregistrationtoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunnerregistrationtoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunnerregistrationtoken.UpdateDefaultUpdatedAt()
		jrrtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jrrtu *JobRunnerRegistrationTokenUpdate) check() error {
	if v, ok := jrrtu.mutation.OwnerID(); ok {
		if err := jobrunnerregistrationtoken.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "JobRunnerRegistrationToken.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jrrtu *JobRunnerRegistrationTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobRunnerRegistrationTokenUpdate {
	jrrtu.modifiers = append(jrrtu.modifiers, modifiers...)
	return jrrtu
}

func (jrrtu *JobRunnerRegistrationTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jrrtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobrunnerregistrationtoken.Table, jobrunnerregistrationtoken.Columns, sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString))
	if ps := jrrtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jrrtu.mutation.CreatedAtCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jrrtu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if jrrtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldUpdatedAt, field.TypeTime)
	}
	if jrrtu.mutation.CreatedByCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jrrtu.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldUpdatedBy, field.TypeString, value)
	}
	if jrrtu.mutation.UpdatedByCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jrrtu.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if jrrtu.mutation.DeletedAtCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jrrtu.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldDeletedBy, field.TypeString, value)
	}
	if jrrtu.mutation.DeletedByCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jrrtu.mutation.Tags(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldTags, field.TypeJSON, value)
	}
	if value, ok := jrrtu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobrunnerregistrationtoken.FieldTags, value)
		})
	}
	if jrrtu.mutation.TagsCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldTags, field.TypeJSON)
	}
	if value, ok := jrrtu.mutation.LastUsedAt(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if jrrtu.mutation.LastUsedAtCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldLastUsedAt, field.TypeTime)
	}
	if jrrtu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnerregistrationtoken.OwnerTable,
			Columns: []string{jobrunnerregistrationtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrrtu.schemaConfig.JobRunnerRegistrationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jrrtu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnerregistrationtoken.OwnerTable,
			Columns: []string{jobrunnerregistrationtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrrtu.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jrrtu.mutation.JobRunnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobrunnerregistrationtoken.JobRunnerTable,
			Columns: []string{jobrunnerregistrationtoken.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrrtu.schemaConfig.JobRunnerRegistrationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jrrtu.mutation.JobRunnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobrunnerregistrationtoken.JobRunnerTable,
			Columns: []string{jobrunnerregistrationtoken.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrrtu.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jrrtu.schemaConfig.JobRunnerRegistrationToken
	ctx = internal.NewSchemaConfigContext(ctx, jrrtu.schemaConfig)
	_spec.AddModifiers(jrrtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, jrrtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrunnerregistrationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jrrtu.mutation.done = true
	return n, nil
}

// JobRunnerRegistrationTokenUpdateOne is the builder for updating a single JobRunnerRegistrationToken entity.
type JobRunnerRegistrationTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobRunnerRegistrationTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetUpdatedAt(t time.Time) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.SetUpdatedAt(t)
	return jrrtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearUpdatedAt() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearUpdatedAt()
	return jrrtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetUpdatedBy(s string) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.SetUpdatedBy(s)
	return jrrtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetNillableUpdatedBy(s *string) *JobRunnerRegistrationTokenUpdateOne {
	if s != nil {
		jrrtuo.SetUpdatedBy(*s)
	}
	return jrrtuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearUpdatedBy() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearUpdatedBy()
	return jrrtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetDeletedAt(t time.Time) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.SetDeletedAt(t)
	return jrrtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *JobRunnerRegistrationTokenUpdateOne {
	if t != nil {
		jrrtuo.SetDeletedAt(*t)
	}
	return jrrtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearDeletedAt() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearDeletedAt()
	return jrrtuo
}

// SetDeletedBy sets the "deleted_by" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetDeletedBy(s string) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.SetDeletedBy(s)
	return jrrtuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetNillableDeletedBy(s *string) *JobRunnerRegistrationTokenUpdateOne {
	if s != nil {
		jrrtuo.SetDeletedBy(*s)
	}
	return jrrtuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearDeletedBy() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearDeletedBy()
	return jrrtuo
}

// SetTags sets the "tags" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetTags(s []string) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.SetTags(s)
	return jrrtuo
}

// AppendTags appends s to the "tags" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) AppendTags(s []string) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.AppendTags(s)
	return jrrtuo
}

// ClearTags clears the value of the "tags" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearTags() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearTags()
	return jrrtuo
}

// SetOwnerID sets the "owner_id" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetOwnerID(s string) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.SetOwnerID(s)
	return jrrtuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetNillableOwnerID(s *string) *JobRunnerRegistrationTokenUpdateOne {
	if s != nil {
		jrrtuo.SetOwnerID(*s)
	}
	return jrrtuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearOwnerID() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearOwnerID()
	return jrrtuo
}

// SetLastUsedAt sets the "last_used_at" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetLastUsedAt(t time.Time) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.SetLastUsedAt(t)
	return jrrtuo
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetNillableLastUsedAt(t *time.Time) *JobRunnerRegistrationTokenUpdateOne {
	if t != nil {
		jrrtuo.SetLastUsedAt(*t)
	}
	return jrrtuo
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearLastUsedAt() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearLastUsedAt()
	return jrrtuo
}

// SetJobRunnerID sets the "job_runner_id" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetJobRunnerID(s string) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.SetJobRunnerID(s)
	return jrrtuo
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetNillableJobRunnerID(s *string) *JobRunnerRegistrationTokenUpdateOne {
	if s != nil {
		jrrtuo.SetJobRunnerID(*s)
	}
	return jrrtuo
}

// ClearJobRunnerID clears the value of the "job_runner_id" field.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearJobRunnerID() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearJobRunnerID()
	return jrrtuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetOwner(o *Organization) *JobRunnerRegistrationTokenUpdateOne {
	return jrrtuo.SetOwnerID(o.ID)
}

// SetJobRunner sets the "job_runner" edge to the JobRunner entity.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SetJobRunner(j *JobRunner) *JobRunnerRegistrationTokenUpdateOne {
	return jrrtuo.SetJobRunnerID(j.ID)
}

// Mutation returns the JobRunnerRegistrationTokenMutation object of the builder.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) Mutation() *JobRunnerRegistrationTokenMutation {
	return jrrtuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearOwner() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearOwner()
	return jrrtuo
}

// ClearJobRunner clears the "job_runner" edge to the JobRunner entity.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ClearJobRunner() *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.ClearJobRunner()
	return jrrtuo
}

// Where appends a list predicates to the JobRunnerRegistrationTokenUpdate builder.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) Where(ps ...predicate.JobRunnerRegistrationToken) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.mutation.Where(ps...)
	return jrrtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) Select(field string, fields ...string) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.fields = append([]string{field}, fields...)
	return jrrtuo
}

// Save executes the query and returns the updated JobRunnerRegistrationToken entity.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) Save(ctx context.Context) (*JobRunnerRegistrationToken, error) {
	if err := jrrtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jrrtuo.sqlSave, jrrtuo.mutation, jrrtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) SaveX(ctx context.Context) *JobRunnerRegistrationToken {
	node, err := jrrtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := jrrtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) ExecX(ctx context.Context) {
	if err := jrrtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) defaults() error {
	if _, ok := jrrtuo.mutation.UpdatedAt(); !ok && !jrrtuo.mutation.UpdatedAtCleared() {
		if jobrunnerregistrationtoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobrunnerregistrationtoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobrunnerregistrationtoken.UpdateDefaultUpdatedAt()
		jrrtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) check() error {
	if v, ok := jrrtuo.mutation.OwnerID(); ok {
		if err := jobrunnerregistrationtoken.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "JobRunnerRegistrationToken.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobRunnerRegistrationTokenUpdateOne {
	jrrtuo.modifiers = append(jrrtuo.modifiers, modifiers...)
	return jrrtuo
}

func (jrrtuo *JobRunnerRegistrationTokenUpdateOne) sqlSave(ctx context.Context) (_node *JobRunnerRegistrationToken, err error) {
	if err := jrrtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobrunnerregistrationtoken.Table, jobrunnerregistrationtoken.Columns, sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString))
	id, ok := jrrtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "JobRunnerRegistrationToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jrrtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobrunnerregistrationtoken.FieldID)
		for _, f := range fields {
			if !jobrunnerregistrationtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != jobrunnerregistrationtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jrrtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if jrrtuo.mutation.CreatedAtCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := jrrtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if jrrtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldUpdatedAt, field.TypeTime)
	}
	if jrrtuo.mutation.CreatedByCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := jrrtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldUpdatedBy, field.TypeString, value)
	}
	if jrrtuo.mutation.UpdatedByCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := jrrtuo.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if jrrtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jrrtuo.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldDeletedBy, field.TypeString, value)
	}
	if jrrtuo.mutation.DeletedByCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := jrrtuo.mutation.Tags(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldTags, field.TypeJSON, value)
	}
	if value, ok := jrrtuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobrunnerregistrationtoken.FieldTags, value)
		})
	}
	if jrrtuo.mutation.TagsCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldTags, field.TypeJSON)
	}
	if value, ok := jrrtuo.mutation.LastUsedAt(); ok {
		_spec.SetField(jobrunnerregistrationtoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if jrrtuo.mutation.LastUsedAtCleared() {
		_spec.ClearField(jobrunnerregistrationtoken.FieldLastUsedAt, field.TypeTime)
	}
	if jrrtuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnerregistrationtoken.OwnerTable,
			Columns: []string{jobrunnerregistrationtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrrtuo.schemaConfig.JobRunnerRegistrationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jrrtuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrunnerregistrationtoken.OwnerTable,
			Columns: []string{jobrunnerregistrationtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrrtuo.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jrrtuo.mutation.JobRunnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobrunnerregistrationtoken.JobRunnerTable,
			Columns: []string{jobrunnerregistrationtoken.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrrtuo.schemaConfig.JobRunnerRegistrationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jrrtuo.mutation.JobRunnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobrunnerregistrationtoken.JobRunnerTable,
			Columns: []string{jobrunnerregistrationtoken.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = jrrtuo.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jrrtuo.schemaConfig.JobRunnerRegistrationToken
	ctx = internal.NewSchemaConfigContext(ctx, jrrtuo.schemaConfig)
	_spec.AddModifiers(jrrtuo.modifiers...)
	_node = &JobRunnerRegistrationToken{config: jrrtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jrrtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrunnerregistrationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jrrtuo.mutation.done = true
	return _node, nil
}
